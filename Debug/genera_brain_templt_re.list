
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017298  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002068  08017530  08017530  00027530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019598  08019598  00029598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080195a0  080195a0  000295a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080195a4  080195a4  000295a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080195a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002078  2000008c  08019634  0003008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002104  08019634  00032104  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046837  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008fbe  00000000  00000000  00076934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003600  00000000  00000000  0007f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a0c  00000000  00000000  00082ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000460c9  00000000  00000000  00085904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d81c  00000000  00000000  000cb9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019546e  00000000  00000000  001191e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000eab4  00000000  00000000  002ae658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002bd10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017518 	.word	0x08017518

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000090 	.word	0x20000090
 80002d4:	08017518 	.word	0x08017518

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80005e0:	6079      	str	r1, [r7, #4]
 80005e2:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80005ea:	69f9      	ldr	r1, [r7, #28]
 80005ec:	2028      	movs	r0, #40	; 0x28
 80005ee:	f000 f932 	bl	8000856 <mpool_alloc>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	edd3 7a02 	vldr	s15, [r3, #8]
 800061a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80006dc <tRamp_initToPool+0x108>
 800061e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	ed93 7a03 	vldr	s14, [r3, #12]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000660:	ed97 7a02 	vldr	s14, [r7, #8]
 8000664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066c:	d504      	bpl.n	8000678 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	691a      	ldr	r2, [r3, #16]
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	61da      	str	r2, [r3, #28]
 8000676:	e002      	b.n	800067e <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	edd3 7a07 	vldr	s15, [r3, #28]
 800068a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800068e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	edd3 7a03 	vldr	s15, [r3, #12]
 8000698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80006be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80006c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	3a83126f 	.word	0x3a83126f

080006e0 <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	edd3 7a05 	vldr	s15, [r3, #20]
 8000704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	edd3 7a08 	vldr	s15, [r3, #32]
 800070e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	ed93 7a05 	vldr	s14, [r3, #20]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	edd3 7a01 	vldr	s15, [r3, #4]
 800073e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	ed93 7a05 	vldr	s14, [r3, #20]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edd3 7a06 	vldr	s15, [r3, #24]
 8000754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	db07      	blt.n	800076e <tRamp_tick+0x4a>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	edd3 7a01 	vldr	s15, [r3, #4]
 8000764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	dc12      	bgt.n	8000794 <tRamp_tick+0x70>
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	ed93 7a05 	vldr	s14, [r3, #20]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	edd3 7a06 	vldr	s15, [r3, #24]
 800077a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000782:	d80f      	bhi.n	80007a4 <tRamp_tick+0x80>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	edd3 7a01 	vldr	s15, [r3, #4]
 800078a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000792:	d507      	bpl.n	80007a4 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	ee07 3a90 	vmov	s15, r3
}
 80007ac:	eeb0 0a67 	vmov.f32	s0, s15
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 80007ba:	b590      	push	{r4, r7, lr}
 80007bc:	b087      	sub	sp, #28
 80007be:	af02      	add	r7, sp, #8
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685c      	ldr	r4, [r3, #4]
 80007ca:	2010      	movs	r0, #16
 80007cc:	f000 f902 	bl	80009d4 <mpool_align>
 80007d0:	4603      	mov	r3, r0
 80007d2:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d203      	bcs.n	80007f4 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6898      	ldr	r0, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4613      	mov	r3, r2
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	f000 f8ea 	bl	80009f0 <create_node>
 800081c:	4602      	mov	r2, r0
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	615a      	str	r2, [r3, #20]
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	331c      	adds	r3, #28
 800083a:	461a      	mov	r2, r3
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f7ff ffbb 	bl	80007ba <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f103 021c 	add.w	r2, r3, #28
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	619a      	str	r2, [r3, #24]
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000856:	b590      	push	{r4, r7, lr}
 8000858:	b08d      	sub	sp, #52	; 0x34
 800085a:	af02      	add	r7, sp, #8
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000866:	3201      	adds	r2, #1
 8000868:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d116      	bne.n	80008a0 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d206      	bcs.n	8000890 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa43 	bl	8000d14 <LEAF_internalErrorCallback>
 800088e:	e005      	b.n	800089c <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa3c 	bl	8000d14 <LEAF_internalErrorCallback>
        }
        return NULL;
 800089c:	2300      	movs	r3, #0
 800089e:	e095      	b.n	80009cc <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f897 	bl	80009d4 <mpool_align>
 80008a6:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 80008ae:	e01c      	b.n	80008ea <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d116      	bne.n	80008ea <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d206      	bcs.n	80008da <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa1e 	bl	8000d14 <LEAF_internalErrorCallback>
 80008d8:	e005      	b.n	80008e6 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fa17 	bl	8000d14 <LEAF_internalErrorCallback>
            }
            return NULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e070      	b.n	80009cc <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8dd      	bhi.n	80008b0 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	429a      	cmp	r2, r3
 800090e:	d924      	bls.n	800095a <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	441a      	add	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4413      	add	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800094a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	4622      	mov	r2, r4
 8000952:	f000 f84d 	bl	80009f0 <create_node>
 8000956:	6238      	str	r0, [r7, #32]
 8000958:	e008      	b.n	800096c <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	68da      	ldr	r2, [r3, #12]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	441a      	add	r2, r3
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000972:	429a      	cmp	r2, r3
 8000974:	d102      	bne.n	800097c <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800097c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800097e:	f000 f855 	bl	8000a2c <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	440b      	add	r3, r1
 8000992:	441a      	add	r2, r3
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd12      	ble.n	80009c8 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	e007      	b.n	80009be <mpool_alloc+0x168>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3301      	adds	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f2      	bhi.n	80009ae <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	681b      	ldr	r3, [r3, #0]
#endif
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	372c      	adds	r7, #44	; 0x2c
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3307      	adds	r3, #7
 80009e0:	f023 0307 	bic.w	r3, r3, #7
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	441a      	add	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
    node->next = next;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	609a      	str	r2, [r3, #8]
    node->size = size;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	60da      	str	r2, [r3, #12]
    return node;
 8000a1e:	697b      	ldr	r3, [r7, #20]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6892      	ldr	r2, [r2, #8]
 8000a44:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6852      	ldr	r2, [r2, #4]
 8000a56:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	3318      	adds	r3, #24
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f804 	bl	8000a94 <tMempool_initToPool>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	2018      	movs	r0, #24
 8000aac:	f7ff fed3 	bl	8000856 <mpool_alloc>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fe76 	bl	80007ba <mpool_create>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8000ae8:	6979      	ldr	r1, [r7, #20]
 8000aea:	2018      	movs	r0, #24
 8000aec:	f7ff feb3 	bl	8000856 <mpool_alloc>
 8000af0:	4602      	mov	r2, r0
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b1c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b3c <tCycle_initToPool+0x64>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b30:	615a      	str	r2, [r3, #20]
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	4f800000 	.word	0x4f800000

08000b40 <tCycle_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	61fb      	str	r3, [r7, #28]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	6892      	ldr	r2, [r2, #8]
 8000b56:	441a      	add	r2, r3
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	605a      	str	r2, [r3, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	61bb      	str	r3, [r7, #24]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8000b6c:	617b      	str	r3, [r7, #20]
    
    samp0 = __leaf_table_sinewave[idx];
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <tCycle_tick+0x8c>)
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	613b      	str	r3, [r7, #16]
    idx = (idx + 1) & c->mask;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
    samp1 = __leaf_table_sinewave[idx];
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <tCycle_tick+0x8c>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8000b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000bd0 <tCycle_tick+0x90>
 8000bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	08017538 	.word	0x08017538
 8000bd0:	35000004 	.word	0x35000004

08000bd4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	ed93 7a04 	vldr	s14, [r3, #16]
 8000bf2:	edd7 7a00 	vldr	s15, [r7]
 8000bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfe:	ee17 2a90 	vmov	r2, s15
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	609a      	str	r2, [r3, #8]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b088      	sub	sp, #32
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8000c26:	69f9      	ldr	r1, [r7, #28]
 8000c28:	2018      	movs	r0, #24
 8000c2a:	f7ff fe14 	bl	8000856 <mpool_alloc>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	7afa      	ldrb	r2, [r7, #11]
 8000c4c:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	615a      	str	r2, [r3, #20]
}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6178      	str	r0, [r7, #20]
 8000c68:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c6c:	60f9      	str	r1, [r7, #12]
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	68f9      	ldr	r1, [r7, #12]
 8000c7c:	6978      	ldr	r0, [r7, #20]
 8000c7e:	f7ff fdd4 	bl	800082a <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8000c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ca0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000cf4 <LEAF_init+0x94>
 8000ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LEAF_init+0x98>)
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	e009      	b.n	8000cda <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	330e      	adds	r3, #14
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	ddf2      	ble.n	8000cc6 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40c90fdb 	.word	0x40c90fdb
 8000cf8:	08000cfd 	.word	0x08000cfd

08000cfc <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	330e      	adds	r3, #14
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d32:	78fa      	ldrb	r2, [r7, #3]
 8000d34:	4611      	mov	r1, r2
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	4798      	blx	r3
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MIDI_Application+0x54>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d111      	bne.n	8000d74 <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MIDI_Application+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d10d      	bne.n	8000d74 <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8000d58:	2240      	movs	r2, #64	; 0x40
 8000d5a:	4911      	ldr	r1, [pc, #68]	; (8000da0 <MIDI_Application+0x5c>)
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MIDI_Application+0x60>)
 8000d5e:	f003 fbd8 	bl	8004512 <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MIDI_Application+0x58>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MIDI_Application+0x64>)
 8000d70:	f008 fa2e 	bl	80091d0 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MIDI_Application+0x54>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d10b      	bne.n	8000d94 <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MIDI_Application+0x58>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <MIDI_Application+0x60>)
 8000d84:	f003 fb5f 	bl	8004446 <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MIDI_Application+0x64>)
 8000d90:	f008 fa1e 	bl	80091d0 <HAL_GPIO_WritePin>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20001ca0 	.word	0x20001ca0
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	30000000 	.word	0x30000000
 8000da4:	30000460 	.word	0x30000460
 8000da8:	58020400 	.word	0x58020400

08000dac <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 8000db4:	4bab      	ldr	r3, [pc, #684]	; (8001064 <ProcessReceivedMidiDatas+0x2b8>)
 8000db6:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 814a 	beq.w	800105a <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 8000dc6:	e142      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4ba6      	ldr	r3, [pc, #664]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4ba3      	ldr	r3, [pc, #652]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000ddc:	705a      	strb	r2, [r3, #1]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b9f      	ldr	r3, [pc, #636]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000dea:	709a      	strb	r2, [r3, #2]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b9c      	ldr	r3, [pc, #624]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000df8:	70da      	strb	r2, [r3, #3]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8000e00:	4b99      	ldr	r3, [pc, #612]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2bf0      	cmp	r3, #240	; 0xf0
 8000e08:	f000 8120 	beq.w	800104c <ProcessReceivedMidiDatas+0x2a0>
 8000e0c:	2bf0      	cmp	r3, #240	; 0xf0
 8000e0e:	f300 811e 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e12:	2be0      	cmp	r3, #224	; 0xe0
 8000e14:	f000 811b 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e18:	2be0      	cmp	r3, #224	; 0xe0
 8000e1a:	f300 8118 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e1e:	2bd0      	cmp	r3, #208	; 0xd0
 8000e20:	f000 8115 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e24:	2bd0      	cmp	r3, #208	; 0xd0
 8000e26:	f300 8112 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e2c:	f000 810f 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e30:	2bc0      	cmp	r3, #192	; 0xc0
 8000e32:	f300 810c 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e36:	2bb0      	cmp	r3, #176	; 0xb0
 8000e38:	d02f      	beq.n	8000e9a <ProcessReceivedMidiDatas+0xee>
 8000e3a:	2bb0      	cmp	r3, #176	; 0xb0
 8000e3c:	f300 8107 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e40:	2ba0      	cmp	r3, #160	; 0xa0
 8000e42:	f000 8104 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e46:	2ba0      	cmp	r3, #160	; 0xa0
 8000e48:	f300 8101 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d002      	beq.n	8000e56 <ProcessReceivedMidiDatas+0xaa>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d011      	beq.n	8000e78 <ProcessReceivedMidiDatas+0xcc>
 8000e54:	e0fb      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 8000e56:	4b84      	ldr	r3, [pc, #528]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b83      	ldr	r3, [pc, #524]	; (800106c <ProcessReceivedMidiDatas+0x2c0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000e60:	4b81      	ldr	r3, [pc, #516]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b82      	ldr	r3, [pc, #520]	; (8001070 <ProcessReceivedMidiDatas+0x2c4>)
 8000e68:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	4880      	ldr	r0, [pc, #512]	; (8001074 <ProcessReceivedMidiDatas+0x2c8>)
 8000e72:	f008 f9ad 	bl	80091d0 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 8000e76:	e0ea      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 8000e78:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <ProcessReceivedMidiDatas+0x2c0>)
 8000e80:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000e82:	4b79      	ldr	r3, [pc, #484]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b79      	ldr	r3, [pc, #484]	; (8001070 <ProcessReceivedMidiDatas+0x2c4>)
 8000e8a:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4878      	ldr	r0, [pc, #480]	; (8001074 <ProcessReceivedMidiDatas+0x2c8>)
 8000e94:	f008 f99c 	bl	80091d0 <HAL_GPIO_WritePin>

					break;
 8000e98:	e0d9      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 8000e9a:	4b73      	ldr	r3, [pc, #460]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e9c:	789b      	ldrb	r3, [r3, #2]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b75      	ldr	r3, [pc, #468]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000ea2:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 8000ea4:	4b70      	ldr	r3, [pc, #448]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000ea6:	78db      	ldrb	r3, [r3, #3]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <ProcessReceivedMidiDatas+0x2d0>)
 8000eac:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b71      	ldr	r3, [pc, #452]	; (800107c <ProcessReceivedMidiDatas+0x2d0>)
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	4b71      	ldr	r3, [pc, #452]	; (8001080 <ProcessReceivedMidiDatas+0x2d4>)
 8000eba:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8000ebc:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	2b5e      	cmp	r3, #94	; 0x5e
 8000ec4:	f200 80c3 	bhi.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <ProcessReceivedMidiDatas+0x124>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	0800104f 	.word	0x0800104f
 8000ed4:	0800104f 	.word	0x0800104f
 8000ed8:	0800104f 	.word	0x0800104f
 8000edc:	0800104f 	.word	0x0800104f
 8000ee0:	0800104f 	.word	0x0800104f
 8000ee4:	0800104f 	.word	0x0800104f
 8000ee8:	0800104f 	.word	0x0800104f
 8000eec:	0800104f 	.word	0x0800104f
 8000ef0:	0800104f 	.word	0x0800104f
 8000ef4:	0800104f 	.word	0x0800104f
 8000ef8:	0800104f 	.word	0x0800104f
 8000efc:	0800104f 	.word	0x0800104f
 8000f00:	0800104f 	.word	0x0800104f
 8000f04:	0800104f 	.word	0x0800104f
 8000f08:	0800104f 	.word	0x0800104f
 8000f0c:	0800104f 	.word	0x0800104f
 8000f10:	0800104f 	.word	0x0800104f
 8000f14:	0800104f 	.word	0x0800104f
 8000f18:	0800104f 	.word	0x0800104f
 8000f1c:	0800104f 	.word	0x0800104f
 8000f20:	0800104f 	.word	0x0800104f
 8000f24:	0800104f 	.word	0x0800104f
 8000f28:	0800104f 	.word	0x0800104f
 8000f2c:	0800104f 	.word	0x0800104f
 8000f30:	0800104f 	.word	0x0800104f
 8000f34:	0800104f 	.word	0x0800104f
 8000f38:	0800104f 	.word	0x0800104f
 8000f3c:	0800104f 	.word	0x0800104f
 8000f40:	0800104f 	.word	0x0800104f
 8000f44:	0800104f 	.word	0x0800104f
 8000f48:	0800104f 	.word	0x0800104f
 8000f4c:	0800104f 	.word	0x0800104f
 8000f50:	0800104f 	.word	0x0800104f
 8000f54:	0800104f 	.word	0x0800104f
 8000f58:	0800104f 	.word	0x0800104f
 8000f5c:	0800104f 	.word	0x0800104f
 8000f60:	0800104f 	.word	0x0800104f
 8000f64:	0800104f 	.word	0x0800104f
 8000f68:	0800104f 	.word	0x0800104f
 8000f6c:	0800104f 	.word	0x0800104f
 8000f70:	0800104f 	.word	0x0800104f
 8000f74:	0800104f 	.word	0x0800104f
 8000f78:	0800104f 	.word	0x0800104f
 8000f7c:	0800104f 	.word	0x0800104f
 8000f80:	0800104f 	.word	0x0800104f
 8000f84:	0800104f 	.word	0x0800104f
 8000f88:	0800104f 	.word	0x0800104f
 8000f8c:	0800104f 	.word	0x0800104f
 8000f90:	0800104f 	.word	0x0800104f
 8000f94:	0800104f 	.word	0x0800104f
 8000f98:	0800104f 	.word	0x0800104f
 8000f9c:	0800104f 	.word	0x0800104f
 8000fa0:	0800104f 	.word	0x0800104f
 8000fa4:	0800104f 	.word	0x0800104f
 8000fa8:	0800104f 	.word	0x0800104f
 8000fac:	0800104f 	.word	0x0800104f
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	0800104f 	.word	0x0800104f
 8000fe8:	0800104f 	.word	0x0800104f
 8000fec:	0800104f 	.word	0x0800104f
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	0800104f 	.word	0x0800104f
 8000ff8:	0800104f 	.word	0x0800104f
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800104f 	.word	0x0800104f
 8001004:	0800104f 	.word	0x0800104f
 8001008:	0800104f 	.word	0x0800104f
 800100c:	0800104f 	.word	0x0800104f
 8001010:	0800104f 	.word	0x0800104f
 8001014:	0800104f 	.word	0x0800104f
 8001018:	0800104f 	.word	0x0800104f
 800101c:	0800104f 	.word	0x0800104f
 8001020:	0800104f 	.word	0x0800104f
 8001024:	0800104f 	.word	0x0800104f
 8001028:	0800104f 	.word	0x0800104f
 800102c:	0800104f 	.word	0x0800104f
 8001030:	0800104f 	.word	0x0800104f
 8001034:	0800104f 	.word	0x0800104f
 8001038:	0800104f 	.word	0x0800104f
 800103c:	0800104f 	.word	0x0800104f
 8001040:	0800104f 	.word	0x0800104f
 8001044:	0800104f 	.word	0x0800104f
 8001048:	0800104f 	.word	0x0800104f
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 800104c:	bf00      	nop
		while(numberOfPackets--)
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	81fa      	strh	r2, [r7, #14]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aeb7 	bne.w	8000dc8 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	30000000 	.word	0x30000000
 8001068:	2000012c 	.word	0x2000012c
 800106c:	200000a8 	.word	0x200000a8
 8001070:	200000a9 	.word	0x200000a9
 8001074:	58020000 	.word	0x58020000
 8001078:	200000aa 	.word	0x200000aa
 800107c:	200000ab 	.word	0x200000ab
 8001080:	200000ac 	.word	0x200000ac

08001084 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff fe8c 	bl	8000dac <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8001094:	2240      	movs	r2, #64	; 0x40
 8001096:	4904      	ldr	r1, [pc, #16]	; (80010a8 <USBH_MIDI_ReceiveCallback+0x24>)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <USBH_MIDI_ReceiveCallback+0x28>)
 800109a:	f003 fa3a 	bl	8004512 <USBH_MIDI_Receive>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	30000000 	.word	0x30000000
 80010ac:	30000460 	.word	0x30000460

080010b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d4:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010d6:	4a74      	ldr	r2, [pc, #464]	; (80012a8 <MX_ADC1_Init+0x1f8>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80010da:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010dc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010e2:	4b70      	ldr	r3, [pc, #448]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010e8:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fa:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001102:	220a      	movs	r2, #10
 8001104:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001108:	2200      	movs	r2, #0
 800110a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001118:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800111a:	2203      	movs	r2, #3
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111e:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001124:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001126:	2200      	movs	r2, #0
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800112a:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001132:	485c      	ldr	r0, [pc, #368]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001134:	f004 f8a6 	bl	8005284 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800113e:	f001 fe1b 	bl	8002d78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4855      	ldr	r0, [pc, #340]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800114e:	f005 fb29 	bl	80067a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001158:	f001 fe0e 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800115c:	4b53      	ldr	r3, [pc, #332]	; (80012ac <MX_ADC1_Init+0x1fc>)
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2306      	movs	r3, #6
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001164:	2306      	movs	r3, #6
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001168:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800116c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116e:	2304      	movs	r3, #4
 8001170:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4849      	ldr	r0, [pc, #292]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001180:	f004 fd3e 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800118a:	f001 fdf5 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800118e:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <MX_ADC1_Init+0x200>)
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001192:	230c      	movs	r3, #12
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4842      	ldr	r0, [pc, #264]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800119c:	f004 fd30 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011a6:	f001 fde7 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011aa:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <MX_ADC1_Init+0x204>)
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ae:	2312      	movs	r3, #18
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	483b      	ldr	r0, [pc, #236]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80011b8:	f004 fd22 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80011c2:	f001 fdd9 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <MX_ADC1_Init+0x208>)
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011ca:	2318      	movs	r3, #24
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4834      	ldr	r0, [pc, #208]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80011d4:	f004 fd14 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80011de:	f001 fdcb 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <MX_ADC1_Init+0x20c>)
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	482c      	ldr	r0, [pc, #176]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 80011f2:	f004 fd05 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80011fc:	f001 fdbc 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <MX_ADC1_Init+0x210>)
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001204:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001208:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4825      	ldr	r0, [pc, #148]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001210:	f004 fcf6 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800121a:	f001 fdad 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <MX_ADC1_Init+0x214>)
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001222:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001232:	f004 fce5 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 800123c:	f001 fd9c 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_ADC1_Init+0x218>)
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001244:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 8001250:	f004 fcd6 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800125a:	f001 fd8d 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_ADC1_Init+0x21c>)
 8001260:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001262:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800126e:	f004 fcc7 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8001278:	f001 fd7e 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_ADC1_Init+0x220>)
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_ADC1_Init+0x1f4>)
 800128c:	f004 fcb8 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8001296:	f001 fd6f 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000130 	.word	0x20000130
 80012a8:	40022000 	.word	0x40022000
 80012ac:	1d500080 	.word	0x1d500080
 80012b0:	4fb80000 	.word	0x4fb80000
 80012b4:	3ef08000 	.word	0x3ef08000
 80012b8:	0c900008 	.word	0x0c900008
 80012bc:	4b840000 	.word	0x4b840000
 80012c0:	3ac04000 	.word	0x3ac04000
 80012c4:	10c00010 	.word	0x10c00010
 80012c8:	21800100 	.word	0x21800100
 80012cc:	25b00200 	.word	0x25b00200
 80012d0:	14f00020 	.word	0x14f00020

080012d4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012ec:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <MX_ADC3_Init+0x124>)
 80012ee:	4a43      	ldr	r2, [pc, #268]	; (80013fc <MX_ADC3_Init+0x128>)
 80012f0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <MX_ADC3_Init+0x124>)
 80012f4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80012f8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <MX_ADC3_Init+0x124>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001300:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001302:	2201      	movs	r2, #1
 8001304:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001308:	2204      	movs	r2, #4
 800130a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <MX_ADC3_Init+0x124>)
 800130e:	2200      	movs	r2, #0
 8001310:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001314:	2201      	movs	r2, #1
 8001316:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <MX_ADC3_Init+0x124>)
 800131a:	2205      	movs	r2, #5
 800131c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800131e:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001320:	2200      	movs	r2, #0
 8001322:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001324:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132a:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <MX_ADC3_Init+0x124>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_ADC3_Init+0x124>)
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800134a:	482b      	ldr	r0, [pc, #172]	; (80013f8 <MX_ADC3_Init+0x124>)
 800134c:	f003 ff9a 	bl	8005284 <HAL_ADC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001356:	f001 fd0f 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_ADC3_Init+0x12c>)
 800135c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800135e:	2306      	movs	r3, #6
 8001360:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001366:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800136a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800136c:	2304      	movs	r3, #4
 800136e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	481e      	ldr	r0, [pc, #120]	; (80013f8 <MX_ADC3_Init+0x124>)
 800137e:	f004 fc3f 	bl	8005c00 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001388:	f001 fcf6 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800138c:	230c      	movs	r3, #12
 800138e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_ADC3_Init+0x124>)
 8001396:	f004 fc33 	bl	8005c00 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80013a0:	f001 fcea 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013a4:	2312      	movs	r3, #18
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <MX_ADC3_Init+0x124>)
 80013ae:	f004 fc27 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 80013b8:	f001 fcde 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013bc:	2318      	movs	r3, #24
 80013be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_ADC3_Init+0x124>)
 80013c6:	f004 fc1b 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80013d0:	f001 fcd2 	bl	8002d78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_ADC3_Init+0x124>)
 80013e0:	f004 fc0e 	bl	8005c00 <HAL_ADC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 80013ea:	f001 fcc5 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000194 	.word	0x20000194
 80013fc:	58026000 	.word	0x58026000
 8001400:	08600004 	.word	0x08600004

08001404 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	; 0x38
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6d      	ldr	r2, [pc, #436]	; (80015d8 <HAL_ADC_MspInit+0x1d4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	f040 80a3 	bne.w	800156e <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800142a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800142e:	4a6b      	ldr	r2, [pc, #428]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800143a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	623b      	str	r3, [r7, #32]
 8001444:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a63      	ldr	r2, [pc, #396]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a5c      	ldr	r2, [pc, #368]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	4a54      	ldr	r2, [pc, #336]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001492:	4b52      	ldr	r3, [pc, #328]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014a0:	2332      	movs	r3, #50	; 0x32
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	2303      	movs	r3, #3
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	484b      	ldr	r0, [pc, #300]	; (80015e0 <HAL_ADC_MspInit+0x1dc>)
 80014b4:	f007 fcc4 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014b8:	23ff      	movs	r3, #255	; 0xff
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4846      	ldr	r0, [pc, #280]	; (80015e4 <HAL_ADC_MspInit+0x1e0>)
 80014cc:	f007 fcb8 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d0:	2303      	movs	r3, #3
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4841      	ldr	r0, [pc, #260]	; (80015e8 <HAL_ADC_MspInit+0x1e4>)
 80014e4:	f007 fcac 	bl	8008e40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 80014ea:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <HAL_ADC_MspInit+0x1ec>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 80014f0:	2209      	movs	r2, #9
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001508:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 800150a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001516:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 800151a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001526:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 800152a:	2204      	movs	r2, #4
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001542:	f005 fb99 	bl	8006c78 <HAL_DMA_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 800154c:	f001 fc14 	bl	8002d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001554:	64da      	str	r2, [r3, #76]	; 0x4c
 8001556:	4a25      	ldr	r2, [pc, #148]	; (80015ec <HAL_ADC_MspInit+0x1e8>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2012      	movs	r0, #18
 8001562:	f005 fad8 	bl	8006b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001566:	2012      	movs	r0, #18
 8001568:	f005 faef 	bl	8006b4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800156c:	e02f      	b.n	80015ce <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <HAL_ADC_MspInit+0x1f0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d12a      	bne.n	80015ce <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 800159e:	f043 0320 	orr.w	r3, r3, #32
 80015a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_ADC_MspInit+0x1d8>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80015b4:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ba:	2303      	movs	r3, #3
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_ADC_MspInit+0x1f4>)
 80015ca:	f007 fc39 	bl	8008e40 <HAL_GPIO_Init>
}
 80015ce:	bf00      	nop
 80015d0:	3738      	adds	r7, #56	; 0x38
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58020000 	.word	0x58020000
 80015e8:	58020400 	.word	0x58020400
 80015ec:	200001f8 	.word	0x200001f8
 80015f0:	40020010 	.word	0x40020010
 80015f4:	58026000 	.word	0x58026000
 80015f8:	58021400 	.word	0x58021400

080015fc <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001608:	4b55      	ldr	r3, [pc, #340]	; (8001760 <audioInit+0x164>)
 800160a:	4a56      	ldr	r2, [pc, #344]	; (8001764 <audioInit+0x168>)
 800160c:	4956      	ldr	r1, [pc, #344]	; (8001768 <audioInit+0x16c>)
 800160e:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800176c <audioInit+0x170>
 8001612:	4857      	ldr	r0, [pc, #348]	; (8001770 <audioInit+0x174>)
 8001614:	f7ff fb24 	bl	8000c60 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001618:	4b55      	ldr	r3, [pc, #340]	; (8001770 <audioInit+0x174>)
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4955      	ldr	r1, [pc, #340]	; (8001774 <audioInit+0x178>)
 8001620:	4855      	ldr	r0, [pc, #340]	; (8001778 <audioInit+0x17c>)
 8001622:	f7ff fa25 	bl	8000a70 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 8001626:	4b52      	ldr	r3, [pc, #328]	; (8001770 <audioInit+0x174>)
 8001628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162c:	4953      	ldr	r1, [pc, #332]	; (800177c <audioInit+0x180>)
 800162e:	4854      	ldr	r0, [pc, #336]	; (8001780 <audioInit+0x184>)
 8001630:	f7ff fa1e 	bl	8000a70 <tMempool_init>

	for (int i = 0; i < 6; i++)
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	e00d      	b.n	8001656 <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4a51      	ldr	r2, [pc, #324]	; (8001784 <audioInit+0x188>)
 8001640:	4413      	add	r3, r2
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <audioInit+0x17c>)
 8001644:	2101      	movs	r1, #1
 8001646:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffc2 	bl	80005d4 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3301      	adds	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	2b05      	cmp	r3, #5
 800165a:	ddee      	ble.n	800163a <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	e009      	b.n	8001676 <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 8001662:	4a45      	ldr	r2, [pc, #276]	; (8001778 <audioInit+0x17c>)
 8001664:	2101      	movs	r1, #1
 8001666:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800166a:	4847      	ldr	r0, [pc, #284]	; (8001788 <audioInit+0x18c>)
 800166c:	f7fe ffb2 	bl	80005d4 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	2b05      	cmp	r3, #5
 800167a:	ddf2      	ble.n	8001662 <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 800167c:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <audioInit+0x17c>)
 800167e:	2100      	movs	r1, #0
 8001680:	4842      	ldr	r0, [pc, #264]	; (800178c <audioInit+0x190>)
 8001682:	f7ff fac6 	bl	8000c12 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	e013      	b.n	80016b4 <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <audioInit+0x194>)
 8001692:	4413      	add	r3, r2
 8001694:	4938      	ldr	r1, [pc, #224]	; (8001778 <audioInit+0x17c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fa1e 	bl	8000ad8 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 0.0f);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4a3b      	ldr	r2, [pc, #236]	; (8001790 <audioInit+0x194>)
 80016a2:	4413      	add	r3, r2
 80016a4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001794 <audioInit+0x198>
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fa93 	bl	8000bd4 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	dde8      	ble.n	800168c <audioInit+0x90>
	}


	HAL_Delay(10);
 80016ba:	200a      	movs	r0, #10
 80016bc:	f003 fb96 	bl	8004dec <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e007      	b.n	80016d6 <audioInit+0xda>
	{
		audioOutBuffer[i] = 0;
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <audioInit+0x19c>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2100      	movs	r1, #0
 80016cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	ddf4      	ble.n	80016c6 <audioInit+0xca>
	}



	HAL_Delay(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f003 fb85 	bl	8004dec <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	492c      	ldr	r1, [pc, #176]	; (8001798 <audioInit+0x19c>)
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	f00d ff8e 	bl	800f608 <HAL_SAI_Transmit_DMA>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <audioInit+0x1a0>)
 80016f2:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	492a      	ldr	r1, [pc, #168]	; (80017a0 <audioInit+0x1a4>)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f00e f83b 	bl	800f774 <HAL_SAI_Receive_DMA>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <audioInit+0x1a8>)
 8001704:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fc82 	bl	8002010 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e01e      	b.n	8001750 <audioInit+0x154>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001712:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <audioInit+0x1ac>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <audioInit+0x1b0>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <audioInit+0x1b4>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <audioInit+0x1b8>)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b02      	cmp	r3, #2
 8001754:	dddd      	ble.n	8001712 <audioInit+0x116>
	}

}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08002cb5 	.word	0x08002cb5
 8001764:	0007a120 	.word	0x0007a120
 8001768:	24000000 	.word	0x24000000
 800176c:	473b8000 	.word	0x473b8000
 8001770:	20001670 	.word	0x20001670
 8001774:	200002e8 	.word	0x200002e8
 8001778:	200016c0 	.word	0x200016c0
 800177c:	60000000 	.word	0x60000000
 8001780:	200016c4 	.word	0x200016c4
 8001784:	2000029c 	.word	0x2000029c
 8001788:	200002d0 	.word	0x200002d0
 800178c:	200002b4 	.word	0x200002b4
 8001790:	200002b8 	.word	0x200002b8
 8001794:	00000000 	.word	0x00000000
 8001798:	30000040 	.word	0x30000040
 800179c:	20000270 	.word	0x20000270
 80017a0:	30000240 	.word	0x30000240
 80017a4:	20000271 	.word	0x20000271
 80017a8:	200016c8 	.word	0x200016c8
 80017ac:	200016d4 	.word	0x200016d4
 80017b0:	200016e0 	.word	0x200016e0
 80017b4:	200016ec 	.word	0x200016ec

080017b8 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]

	frameCounter++;
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <audioFrame+0x15c>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b51      	ldr	r3, [pc, #324]	; (8001914 <audioFrame+0x15c>)
 80017d0:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <audioFrame+0x15c>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d904      	bls.n	80017e4 <audioFrame+0x2c>
	{
		frameCounter = 0;
 80017da:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <audioFrame+0x15c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 80017e0:	f000 f94e 	bl	8001a80 <buttonCheck>
	}

	/** read the inputs of the external knobs with multiplex **/
	if (count_knob < STEPS_MAX){
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <audioFrame+0x160>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d811      	bhi.n	8001810 <audioFrame+0x58>
		mux_pull_values(&x, &y, &fc, &vari, &randomness, count_knob);
 80017ec:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <audioFrame+0x160>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <audioFrame+0x164>)
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <audioFrame+0x168>)
 80017f8:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <audioFrame+0x16c>)
 80017fa:	494b      	ldr	r1, [pc, #300]	; (8001928 <audioFrame+0x170>)
 80017fc:	484b      	ldr	r0, [pc, #300]	; (800192c <audioFrame+0x174>)
 80017fe:	f002 faf3 	bl	8003de8 <mux_pull_values>
		count_knob++;
 8001802:	4b45      	ldr	r3, [pc, #276]	; (8001918 <audioFrame+0x160>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <audioFrame+0x160>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e00c      	b.n	800182a <audioFrame+0x72>
	}
	else{
		mux_pull_values(&x, &y, &fc, &vari, &randomness, 0);
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <audioFrame+0x164>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <audioFrame+0x168>)
 800181a:	4a42      	ldr	r2, [pc, #264]	; (8001924 <audioFrame+0x16c>)
 800181c:	4942      	ldr	r1, [pc, #264]	; (8001928 <audioFrame+0x170>)
 800181e:	4843      	ldr	r0, [pc, #268]	; (800192c <audioFrame+0x174>)
 8001820:	f002 fae2 	bl	8003de8 <mux_pull_values>
		count_knob = 1;
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <audioFrame+0x160>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
	/*>-<*/

	/** decide the next state **/
//	decideState();

	if(buttonPressed[1] == 1){
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <audioFrame+0x178>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <audioFrame+0x8c>
		decideState();
 8001832:	f000 fa07 	bl	8001c44 <decideState>
		state_cur = state_next;
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <audioFrame+0x17c>)
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <audioFrame+0x180>)
 800183c:	701a      	strb	r2, [r3, #0]
		buttonPressed[1] = 0;
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <audioFrame+0x178>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
	}
	tRamp_setDest(&adc[0], (fc[state_cur] * INV_TWO_TO_16));
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <audioFrame+0x180>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4a36      	ldr	r2, [pc, #216]	; (8001924 <audioFrame+0x16c>)
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800193c <audioFrame+0x184>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	4838      	ldr	r0, [pc, #224]	; (8001940 <audioFrame+0x188>)
 8001860:	f7fe ff3e 	bl	80006e0 <tRamp_setDest>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <audioFrame+0x18c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04f      	beq.n	800190c <audioFrame+0x154>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e049      	b.n	8001906 <audioFrame+0x14e>
		{
			if ((i & 1) == 0)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d11d      	bne.n	80018b8 <audioFrame+0x100>
			{
				current_sample = (int32_t)(audioTickR((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	4a31      	ldr	r2, [pc, #196]	; (8001948 <audioFrame+0x190>)
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800194c <audioFrame+0x194>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	f000 f8a4 	bl	80019e8 <audioTickR>
 80018a0:	eef0 7a40 	vmov.f32	s15, s0
 80018a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001950 <audioFrame+0x198>
 80018a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	e01c      	b.n	80018f2 <audioFrame+0x13a>
			}
			else
			{
				current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <audioFrame+0x190>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800194c <audioFrame+0x194>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f000 f83e 	bl	8001958 <audioTickL>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
 80018e0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001950 <audioFrame+0x198>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	60bb      	str	r3, [r7, #8]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <audioFrame+0x19c>)
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b3f      	cmp	r3, #63	; 0x3f
 800190a:	ddb2      	ble.n	8001872 <audioFrame+0xba>
		}
	}
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000298 	.word	0x20000298
 8001918:	200016fc 	.word	0x200016fc
 800191c:	200016f8 	.word	0x200016f8
 8001920:	200016d4 	.word	0x200016d4
 8001924:	200016c8 	.word	0x200016c8
 8001928:	200016ec 	.word	0x200016ec
 800192c:	200016e0 	.word	0x200016e0
 8001930:	20000288 	.word	0x20000288
 8001934:	200016ff 	.word	0x200016ff
 8001938:	200016fe 	.word	0x200016fe
 800193c:	377ffff6 	.word	0x377ffff6
 8001940:	2000029c 	.word	0x2000029c
 8001944:	20000272 	.word	0x20000272
 8001948:	30000240 	.word	0x30000240
 800194c:	34000000 	.word	0x34000000
 8001950:	4b000000 	.word	0x4b000000
 8001954:	30000040 	.word	0x30000040

08001958 <audioTickL>:
float rightIn = 0.0f;


float audioTickL(float audioIn)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	ed87 0a01 	vstr	s0, [r7, #4]

	sample = 0.0f;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <audioTickL+0x78>)
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
//	for (int i = 0; i < 6; i = i+2) // even numbered knobs (left side of board)
//	{
//		tCycle_setFreq(&mySine[i], (tRamp_tick(&adc[i]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
//		sample += tCycle_tick(&mySine[i]); // tick the oscillator
//	}
	tCycle_setFreq(&mySine[0], (tRamp_tick(&adc[0]) * 500.0f) + 100.0f);
 800196a:	481a      	ldr	r0, [pc, #104]	; (80019d4 <audioTickL+0x7c>)
 800196c:	f7fe feda 	bl	8000724 <tRamp_tick>
 8001970:	eef0 7a40 	vmov.f32	s15, s0
 8001974:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019d8 <audioTickL+0x80>
 8001978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019dc <audioTickL+0x84>
 8001980:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	4815      	ldr	r0, [pc, #84]	; (80019e0 <audioTickL+0x88>)
 800198a:	f7ff f923 	bl	8000bd4 <tCycle_setFreq>
	sample += tCycle_tick(&mySine[0]);
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <audioTickL+0x88>)
 8001990:	f7ff f8d6 	bl	8000b40 <tCycle_tick>
 8001994:	eeb0 7a40 	vmov.f32	s14, s0
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <audioTickL+0x78>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <audioTickL+0x78>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]

	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <audioTickL+0x78>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80019e4 <audioTickL+0x8c>
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <audioTickL+0x78>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]

	return sample;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <audioTickL+0x78>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	ee07 3a90 	vmov	s15, r3
}
 80019c4:	eeb0 0a67 	vmov.f32	s0, s15
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000294 	.word	0x20000294
 80019d4:	2000029c 	.word	0x2000029c
 80019d8:	43fa0000 	.word	0x43fa0000
 80019dc:	42c80000 	.word	0x42c80000
 80019e0:	200002b8 	.word	0x200002b8
 80019e4:	3ea8f5c3 	.word	0x3ea8f5c3

080019e8 <audioTickR>:


uint32_t myCounter = 0;

float audioTickR(float audioIn)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0a01 	vstr	s0, [r7, #4]
	rightIn = audioIn;
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <audioTickR+0x7c>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6013      	str	r3, [r2, #0]

	sample = 0.0f;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <audioTickR+0x80>)
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
//	for (int i = 0; i < 6; i = i+2) // odd numbered knobs (right side of board)
//	{
//		tCycle_setFreq(&mySine[i+1], (tRamp_tick(&adc[i+1]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
//		sample += tCycle_tick(&mySine[i+1]); // tick the oscillator
//	}
	tCycle_setFreq(&mySine[0], (tRamp_tick(&adc[0]) * 500.0f) + 100.0f);
 8001a00:	481a      	ldr	r0, [pc, #104]	; (8001a6c <audioTickR+0x84>)
 8001a02:	f7fe fe8f 	bl	8000724 <tRamp_tick>
 8001a06:	eef0 7a40 	vmov.f32	s15, s0
 8001a0a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a70 <audioTickR+0x88>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a74 <audioTickR+0x8c>
 8001a16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	4816      	ldr	r0, [pc, #88]	; (8001a78 <audioTickR+0x90>)
 8001a20:	f7ff f8d8 	bl	8000bd4 <tCycle_setFreq>
	sample += tCycle_tick(&mySine[0]);
 8001a24:	4814      	ldr	r0, [pc, #80]	; (8001a78 <audioTickR+0x90>)
 8001a26:	f7ff f88b 	bl	8000b40 <tCycle_tick>
 8001a2a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <audioTickR+0x80>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <audioTickR+0x80>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <audioTickR+0x80>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a7c <audioTickR+0x94>
 8001a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <audioTickR+0x80>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

	return sample;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <audioTickR+0x80>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	ee07 3a90 	vmov	s15, r3
}
 8001a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20001700 	.word	0x20001700
 8001a68:	20000294 	.word	0x20000294
 8001a6c:	2000029c 	.word	0x2000029c
 8001a70:	43fa0000 	.word	0x43fa0000
 8001a74:	42c80000 	.word	0x42c80000
 8001a78:	200002b8 	.word	0x200002b8
 8001a7c:	3ea8f5c3 	.word	0x3ea8f5c3

08001a80 <buttonCheck>:


uint8_t LED_States[3] = {0,0,0};
void buttonCheck(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	4866      	ldr	r0, [pc, #408]	; (8001c24 <buttonCheck+0x1a4>)
 8001a8a:	f007 fb89 	bl	80091a0 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <buttonCheck+0x1a8>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	4860      	ldr	r0, [pc, #384]	; (8001c24 <buttonCheck+0x1a4>)
 8001aa4:	f007 fb7c 	bl	80091a0 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <buttonCheck+0x1a8>)
 8001ab8:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abe:	485b      	ldr	r0, [pc, #364]	; (8001c2c <buttonCheck+0x1ac>)
 8001ac0:	f007 fb6e 	bl	80091a0 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <buttonCheck+0x1a8>)
 8001ad4:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e044      	b.n	8001b66 <buttonCheck+0xe6>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <buttonCheck+0x1a8>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4952      	ldr	r1, [pc, #328]	; (8001c30 <buttonCheck+0x1b0>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d00e      	beq.n	8001b0e <buttonCheck+0x8e>
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <buttonCheck+0x1b4>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d808      	bhi.n	8001b0e <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <buttonCheck+0x1b4>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	494b      	ldr	r1, [pc, #300]	; (8001c34 <buttonCheck+0x1b4>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8001b0e:	4a46      	ldr	r2, [pc, #280]	; (8001c28 <buttonCheck+0x1a8>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	4946      	ldr	r1, [pc, #280]	; (8001c30 <buttonCheck+0x1b0>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	440b      	add	r3, r1
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d01e      	beq.n	8001b60 <buttonCheck+0xe0>
 8001b22:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <buttonCheck+0x1b4>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	2b09      	cmp	r3, #9
 8001b2c:	d918      	bls.n	8001b60 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	; (8001c28 <buttonCheck+0x1a8>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d104      	bne.n	8001b44 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <buttonCheck+0x1b8>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8001b44:	4a38      	ldr	r2, [pc, #224]	; (8001c28 <buttonCheck+0x1a8>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	7819      	ldrb	r1, [r3, #0]
 8001b4c:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <buttonCheck+0x1b0>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	460a      	mov	r2, r1
 8001b54:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 8001b56:	4a37      	ldr	r2, [pc, #220]	; (8001c34 <buttonCheck+0x1b4>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	ddb7      	ble.n	8001adc <buttonCheck+0x5c>
	  }
	}

	if (buttonPressed[0] == 1)
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <buttonCheck+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d119      	bne.n	8001ba8 <buttonCheck+0x128>
	{
		if (LED_States[0] == 0)
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <buttonCheck+0x1bc>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <buttonCheck+0x110>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b82:	482f      	ldr	r0, [pc, #188]	; (8001c40 <buttonCheck+0x1c0>)
 8001b84:	f007 fb24 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <buttonCheck+0x1bc>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e008      	b.n	8001ba2 <buttonCheck+0x122>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b96:	482a      	ldr	r0, [pc, #168]	; (8001c40 <buttonCheck+0x1c0>)
 8001b98:	f007 fb1a 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <buttonCheck+0x1bc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <buttonCheck+0x1b8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <buttonCheck+0x1b8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d116      	bne.n	8001bde <buttonCheck+0x15e>
	{
		if (LED_States[1] == 0)
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <buttonCheck+0x1bc>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <buttonCheck+0x14c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbe:	4820      	ldr	r0, [pc, #128]	; (8001c40 <buttonCheck+0x1c0>)
 8001bc0:	f007 fb06 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <buttonCheck+0x1bc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	705a      	strb	r2, [r3, #1]
 8001bca:	e008      	b.n	8001bde <buttonCheck+0x15e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd2:	481b      	ldr	r0, [pc, #108]	; (8001c40 <buttonCheck+0x1c0>)
 8001bd4:	f007 fafc 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <buttonCheck+0x1bc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <buttonCheck+0x1b8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d119      	bne.n	8001c1a <buttonCheck+0x19a>
	{
		if (LED_States[2] == 0)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <buttonCheck+0x1bc>)
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <buttonCheck+0x182>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <buttonCheck+0x1ac>)
 8001bf6:	f007 faeb 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <buttonCheck+0x1bc>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	709a      	strb	r2, [r3, #2]
 8001c00:	e008      	b.n	8001c14 <buttonCheck+0x194>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <buttonCheck+0x1ac>)
 8001c0a:	f007 fae1 	bl	80091d0 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <buttonCheck+0x1bc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <buttonCheck+0x1b8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	58021800 	.word	0x58021800
 8001c28:	20000274 	.word	0x20000274
 8001c2c:	58020c00 	.word	0x58020c00
 8001c30:	20000278 	.word	0x20000278
 8001c34:	2000027c 	.word	0x2000027c
 8001c38:	20000288 	.word	0x20000288
 8001c3c:	20001704 	.word	0x20001704
 8001c40:	58020000 	.word	0x58020000

08001c44 <decideState>:


void decideState(){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
	method = LED_States[0];
 8001c4a:	4b87      	ldr	r3, [pc, #540]	; (8001e68 <decideState+0x224>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <decideState+0x228>)
 8001c50:	701a      	strb	r2, [r3, #0]
	float prob[STEPS_MAX], prob_accum[STEPS_MAX];

	if((method & 1) == 0){ //method: distance
 8001c52:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <decideState+0x228>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 8096 	bne.w	8001d8c <decideState+0x148>
		for(int i=0; i < STEPS_MAX; i++){
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	e08d      	b.n	8001d82 <decideState+0x13e>
			prob[i] = sqrt((x[i]-x[state_cur]) * INV_TWO_TO_16 * (x[i]-x[state_cur]) * INV_TWO_TO_16 + (y[i]-y[state_cur]) * INV_TWO_TO_16 * (y[i]-y[state_cur]) * INV_TWO_TO_16);
 8001c66:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <decideState+0x22c>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <decideState+0x230>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	; (8001e70 <decideState+0x22c>)
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c84:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001e78 <decideState+0x234>
 8001c88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c8c:	4a78      	ldr	r2, [pc, #480]	; (8001e70 <decideState+0x22c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	edd3 6a00 	vldr	s13, [r3]
 8001c98:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <decideState+0x230>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4a74      	ldr	r2, [pc, #464]	; (8001e70 <decideState+0x22c>)
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cae:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001e78 <decideState+0x234>
 8001cb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb6:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <decideState+0x238>)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	edd3 6a00 	vldr	s13, [r3]
 8001cc2:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <decideState+0x230>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4a6d      	ldr	r2, [pc, #436]	; (8001e7c <decideState+0x238>)
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cd4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001e78 <decideState+0x234>
 8001cd8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001cdc:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <decideState+0x238>)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	ed93 6a00 	vldr	s12, [r3]
 8001ce8:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <decideState+0x230>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <decideState+0x238>)
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfe:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001e78 <decideState+0x234>
 8001d02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0e:	eeb0 0b47 	vmov.f64	d0, d7
 8001d12:	f015 fbdd 	bl	80174d0 <sqrt>
 8001d16:	eeb0 7b40 	vmov.f64	d7, d0
 8001d1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	3328      	adds	r3, #40	; 0x28
 8001d24:	443b      	add	r3, r7
 8001d26:	3b1c      	subs	r3, #28
 8001d28:	edc3 7a00 	vstr	s15, [r3]
			if(i == 0) {prob_accum[i] = prob[i];}
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <decideState+0x108>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3328      	adds	r3, #40	; 0x28
 8001d38:	443b      	add	r3, r7
 8001d3a:	3b1c      	subs	r3, #28
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	3328      	adds	r3, #40	; 0x28
 8001d44:	443b      	add	r3, r7
 8001d46:	3b28      	subs	r3, #40	; 0x28
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e017      	b.n	8001d7c <decideState+0x138>
			else{prob_accum[i] = prob_accum[i - 1] + prob[i];}
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3328      	adds	r3, #40	; 0x28
 8001d54:	443b      	add	r3, r7
 8001d56:	3b28      	subs	r3, #40	; 0x28
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	3328      	adds	r3, #40	; 0x28
 8001d62:	443b      	add	r3, r7
 8001d64:	3b1c      	subs	r3, #28
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3328      	adds	r3, #40	; 0x28
 8001d74:	443b      	add	r3, r7
 8001d76:	3b28      	subs	r3, #40	; 0x28
 8001d78:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < STEPS_MAX; i++){
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3301      	adds	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f77f af6e 	ble.w	8001c66 <decideState+0x22>
 8001d8a:	e041      	b.n	8001e10 <decideState+0x1cc>
		}
	}
	else{ // method: y
		for(int i=0; i < STEPS_MAX; i++){
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	e03b      	b.n	8001e0a <decideState+0x1c6>
			prob[i] = y[i] * INV_TWO_TO_16;
 8001d92:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <decideState+0x238>)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e78 <decideState+0x234>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3328      	adds	r3, #40	; 0x28
 8001dac:	443b      	add	r3, r7
 8001dae:	3b1c      	subs	r3, #28
 8001db0:	edc3 7a00 	vstr	s15, [r3]
			if(i == 0) {prob_accum[i] = prob[i];}
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <decideState+0x190>
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	3328      	adds	r3, #40	; 0x28
 8001dc0:	443b      	add	r3, r7
 8001dc2:	3b1c      	subs	r3, #28
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	3328      	adds	r3, #40	; 0x28
 8001dcc:	443b      	add	r3, r7
 8001dce:	3b28      	subs	r3, #40	; 0x28
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e017      	b.n	8001e04 <decideState+0x1c0>
			else{prob_accum[i] = prob_accum[i - 1] + prob[i];}
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3328      	adds	r3, #40	; 0x28
 8001ddc:	443b      	add	r3, r7
 8001dde:	3b28      	subs	r3, #40	; 0x28
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3328      	adds	r3, #40	; 0x28
 8001dea:	443b      	add	r3, r7
 8001dec:	3b1c      	subs	r3, #28
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3328      	adds	r3, #40	; 0x28
 8001dfc:	443b      	add	r3, r7
 8001dfe:	3b28      	subs	r3, #40	; 0x28
 8001e00:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < STEPS_MAX; i++){
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	3301      	adds	r3, #1
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	ddc0      	ble.n	8001d92 <decideState+0x14e>
		}
	}

	float numrand = randomNumber() * prob_accum[STEPS_MAX - 1];
 8001e10:	f000 ff50 	bl	8002cb4 <randomNumber>
 8001e14:	eeb0 7a40 	vmov.f32	s14, s0
 8001e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e20:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int i=0; i < STEPS_MAX; i++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	e015      	b.n	8001e56 <decideState+0x212>
		if(prob_accum[i] > numrand){
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	3328      	adds	r3, #40	; 0x28
 8001e30:	443b      	add	r3, r7
 8001e32:	3b28      	subs	r3, #40	; 0x28
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	d504      	bpl.n	8001e50 <decideState+0x20c>
			state_next = i;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <decideState+0x23c>)
 8001e4c:	701a      	strb	r2, [r3, #0]
			break;
 8001e4e:	e006      	b.n	8001e5e <decideState+0x21a>
	for(int i=0; i < STEPS_MAX; i++){
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	3301      	adds	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	dde6      	ble.n	8001e2a <decideState+0x1e6>
		}
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20001704 	.word	0x20001704
 8001e6c:	200016fd 	.word	0x200016fd
 8001e70:	200016e0 	.word	0x200016e0
 8001e74:	200016fe 	.word	0x200016fe
 8001e78:	377ffff6 	.word	0x377ffff6
 8001e7c:	200016ec 	.word	0x200016ec
 8001e80:	200016ff 	.word	0x200016ff

08001e84 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	;
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	;
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ;
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8001ec8:	2040      	movs	r0, #64	; 0x40
 8001eca:	f7ff fc75 	bl	80017b8 <audioFrame>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fc6a 	bl	80017b8 <audioFrame>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001ef6:	f000 f879 	bl	8001fec <BSP_SD_IsDetected>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e012      	b.n	8001f2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <BSP_SD_Init+0x48>)
 8001f06:	f00d ff1a 	bl	800fd3e <HAL_SD_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <BSP_SD_Init+0x48>)
 8001f1a:	f00e fdd5 	bl	8010ac8 <HAL_SD_ConfigWideBusOperation>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200019d4 	.word	0x200019d4

08001f38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <BSP_SD_ReadBlocks+0x38>)
 8001f56:	f00e f811 	bl	800ff7c <HAL_SD_ReadBlocks>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200019d4 	.word	0x200019d4

08001f74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <BSP_SD_WriteBlocks+0x38>)
 8001f92:	f00e f97d 	bl	8010290 <HAL_SD_WriteBlocks>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200019d4 	.word	0x200019d4

08001fb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <BSP_SD_GetCardState+0x1c>)
 8001fb6:	f00e fe99 	bl	8010cec <HAL_SD_GetCardState>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200019d4 	.word	0x200019d4

08001fd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <BSP_SD_GetCardInfo+0x18>)
 8001fdc:	f00e fd48 	bl	8010a70 <HAL_SD_GetCardInfo>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200019d4 	.word	0x200019d4

08001fec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8001ff6:	f000 f911 	bl	800221c <BSP_PlatformIsDetected>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8002000:	2300      	movs	r3, #0
 8002002:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	b2db      	uxtb	r3, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af02      	add	r7, sp, #8
 8002016:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201e:	4858      	ldr	r0, [pc, #352]	; (8002180 <AudioCodec_init+0x170>)
 8002020:	f007 f8d6 	bl	80091d0 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8002024:	2002      	movs	r0, #2
 8002026:	f002 fee1 	bl	8004dec <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800202a:	4b56      	ldr	r3, [pc, #344]	; (8002184 <AudioCodec_init+0x174>)
 800202c:	2207      	movs	r2, #7
 800202e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8002030:	4b54      	ldr	r3, [pc, #336]	; (8002184 <AudioCodec_init+0x174>)
 8002032:	2203      	movs	r2, #3
 8002034:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <AudioCodec_init+0x178>)
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <AudioCodec_init+0x17c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	4a50      	ldr	r2, [pc, #320]	; (8002184 <AudioCodec_init+0x174>)
 8002044:	2120      	movs	r1, #32
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f008 fe80 	bl	800ad4c <HAL_I2C_Master_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <AudioCodec_init+0x180>)
 8002052:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8002054:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <AudioCodec_init+0x174>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 800205a:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <AudioCodec_init+0x174>)
 800205c:	2241      	movs	r2, #65	; 0x41
 800205e:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <AudioCodec_init+0x178>)
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	4b49      	ldr	r3, [pc, #292]	; (800218c <AudioCodec_init+0x17c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	4a45      	ldr	r2, [pc, #276]	; (8002184 <AudioCodec_init+0x174>)
 800206e:	2120      	movs	r1, #32
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f008 fe6b 	bl	800ad4c <HAL_I2C_Master_Transmit>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <AudioCodec_init+0x180>)
 800207c:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <AudioCodec_init+0x174>)
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <AudioCodec_init+0x174>)
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <AudioCodec_init+0x178>)
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <AudioCodec_init+0x17c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <AudioCodec_init+0x174>)
 8002098:	2120      	movs	r1, #32
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f008 fe56 	bl	800ad4c <HAL_I2C_Master_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <AudioCodec_init+0x180>)
 80020a6:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <AudioCodec_init+0x174>)
 80020aa:	2203      	movs	r2, #3
 80020ac:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 80020ae:	4b35      	ldr	r3, [pc, #212]	; (8002184 <AudioCodec_init+0x174>)
 80020b0:	2279      	movs	r2, #121	; 0x79
 80020b2:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <AudioCodec_init+0x178>)
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <AudioCodec_init+0x17c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	4a30      	ldr	r2, [pc, #192]	; (8002184 <AudioCodec_init+0x174>)
 80020c2:	2120      	movs	r1, #32
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f008 fe41 	bl	800ad4c <HAL_I2C_Master_Transmit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <AudioCodec_init+0x180>)
 80020d0:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <AudioCodec_init+0x174>)
 80020d4:	2204      	movs	r2, #4
 80020d6:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <AudioCodec_init+0x174>)
 80020da:	2201      	movs	r2, #1
 80020dc:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <AudioCodec_init+0x178>)
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <AudioCodec_init+0x17c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <AudioCodec_init+0x174>)
 80020ec:	2120      	movs	r1, #32
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f008 fe2c 	bl	800ad4c <HAL_I2C_Master_Transmit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <AudioCodec_init+0x180>)
 80020fa:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <AudioCodec_init+0x174>)
 80020fe:	2205      	movs	r2, #5
 8002100:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <AudioCodec_init+0x174>)
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <AudioCodec_init+0x178>)
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <AudioCodec_init+0x17c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <AudioCodec_init+0x174>)
 8002116:	2120      	movs	r1, #32
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f008 fe17 	bl	800ad4c <HAL_I2C_Master_Transmit>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <AudioCodec_init+0x180>)
 8002124:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <AudioCodec_init+0x174>)
 8002128:	2206      	movs	r2, #6
 800212a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <AudioCodec_init+0x174>)
 800212e:	2210      	movs	r2, #16
 8002130:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <AudioCodec_init+0x178>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <AudioCodec_init+0x17c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <AudioCodec_init+0x174>)
 8002140:	2120      	movs	r1, #32
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f008 fe02 	bl	800ad4c <HAL_I2C_Master_Transmit>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <AudioCodec_init+0x180>)
 800214e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <AudioCodec_init+0x174>)
 8002152:	2207      	movs	r2, #7
 8002154:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <AudioCodec_init+0x174>)
 8002158:	2202      	movs	r2, #2
 800215a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <AudioCodec_init+0x178>)
 800215e:	881a      	ldrh	r2, [r3, #0]
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <AudioCodec_init+0x17c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	4613      	mov	r3, r2
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <AudioCodec_init+0x174>)
 800216a:	2120      	movs	r1, #32
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f008 fded 	bl	800ad4c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <AudioCodec_init+0x184>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]

}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	58020800 	.word	0x58020800
 8002184:	20001708 	.word	0x20001708
 8002188:	20000002 	.word	0x20000002
 800218c:	20000004 	.word	0x20000004
 8002190:	2000170a 	.word	0x2000170a
 8002194:	20000272 	.word	0x20000272

08002198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_DMA_Init+0x5c>)
 80021a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <MX_DMA_Init+0x5c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_DMA_Init+0x5c>)
 80021b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	200b      	movs	r0, #11
 80021c2:	f004 fca8 	bl	8006b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021c6:	200b      	movs	r0, #11
 80021c8:	f004 fcbf 	bl	8006b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	200c      	movs	r0, #12
 80021d2:	f004 fca0 	bl	8006b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021d6:	200c      	movs	r0, #12
 80021d8:	f004 fcb7 	bl	8006b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	200d      	movs	r0, #13
 80021e2:	f004 fc98 	bl	8006b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021e6:	200d      	movs	r0, #13
 80021e8:	f004 fcaf 	bl	8006b4a <HAL_NVIC_EnableIRQ>

}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	58024400 	.word	0x58024400

080021f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <MX_FATFS_Init+0x18>)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_FATFS_Init+0x1c>)
 8002200:	f015 f808 	bl	8017214 <FATFS_LinkDriver>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <MX_FATFS_Init+0x20>)
 800220a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000170c 	.word	0x2000170c
 8002214:	08019538 	.word	0x08019538
 8002218:	2000170b 	.word	0x2000170b

0800221c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8002222:	2301      	movs	r3, #1
 8002224:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222a:	4806      	ldr	r0, [pc, #24]	; (8002244 <BSP_PlatformIsDetected+0x28>)
 800222c:	f006 ffb8 	bl	80091a0 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800223a:	79fb      	ldrb	r3, [r7, #7]
}  
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	58020800 	.word	0x58020800

08002248 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002262:	4a22      	ldr	r2, [pc, #136]	; (80022ec <MX_FMC_Init+0xa4>)
 8002264:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_FMC_Init+0xa0>)
 800226e:	2201      	movs	r2, #1
 8002270:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002274:	2208      	movs	r2, #8
 8002276:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_FMC_Init+0xa0>)
 800227a:	2210      	movs	r2, #16
 800227c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_FMC_Init+0xa0>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_FMC_Init+0xa0>)
 8002294:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002298:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <MX_FMC_Init+0xa0>)
 800229c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_FMC_Init+0xa0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80022a8:	2302      	movs	r3, #2
 80022aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80022ac:	2306      	movs	r3, #6
 80022ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80022b0:	2304      	movs	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80022b4:	2306      	movs	r3, #6
 80022b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4807      	ldr	r0, [pc, #28]	; (80022e8 <MX_FMC_Init+0xa0>)
 80022ca:	f00f f8e9 	bl	80114a0 <HAL_SDRAM_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80022d4:	f000 fd50 	bl	8002d78 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80022d8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80022dc:	f002 fdb6 	bl	8004e4c <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022e0:	bf00      	nop
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20001710 	.word	0x20001710
 80022ec:	52004140 	.word	0x52004140

080022f0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0b8      	sub	sp, #224	; 0xe0
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002306:	4b51      	ldr	r3, [pc, #324]	; (800244c <HAL_FMC_MspInit+0x15c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002310:	4b4e      	ldr	r3, [pc, #312]	; (800244c <HAL_FMC_MspInit+0x15c>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	22c0      	movs	r2, #192	; 0xc0
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f015 f844 	bl	80173ac <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002330:	2300      	movs	r3, #0
 8002332:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	4618      	mov	r0, r3
 800233a:	f00a f8d3 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002344:	f000 fd18 	bl	8002d78 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_FMC_MspInit+0x160>)
 800234a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800234e:	4a40      	ldr	r2, [pc, #256]	; (8002450 <HAL_FMC_MspInit+0x160>)
 8002350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002354:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_FMC_MspInit+0x160>)
 800235a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800235e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002366:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800236a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002380:	230c      	movs	r3, #12
 8002382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002386:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800238a:	4619      	mov	r1, r3
 800238c:	4831      	ldr	r0, [pc, #196]	; (8002454 <HAL_FMC_MspInit+0x164>)
 800238e:	f006 fd57 	bl	8008e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002392:	230d      	movs	r3, #13
 8002394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023aa:	230c      	movs	r3, #12
 80023ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023b4:	4619      	mov	r1, r3
 80023b6:	4828      	ldr	r0, [pc, #160]	; (8002458 <HAL_FMC_MspInit+0x168>)
 80023b8:	f006 fd42 	bl	8008e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80023bc:	f248 1337 	movw	r3, #33079	; 0x8137
 80023c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023d6:	230c      	movs	r3, #12
 80023d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023e0:	4619      	mov	r1, r3
 80023e2:	481e      	ldr	r0, [pc, #120]	; (800245c <HAL_FMC_MspInit+0x16c>)
 80023e4:	f006 fd2c 	bl	8008e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80023e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002402:	230c      	movs	r3, #12
 8002404:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002408:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800240c:	4619      	mov	r1, r3
 800240e:	4814      	ldr	r0, [pc, #80]	; (8002460 <HAL_FMC_MspInit+0x170>)
 8002410:	f006 fd16 	bl	8008e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002414:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800242e:	230c      	movs	r3, #12
 8002430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002438:	4619      	mov	r1, r3
 800243a:	480a      	ldr	r0, [pc, #40]	; (8002464 <HAL_FMC_MspInit+0x174>)
 800243c:	f006 fd00 	bl	8008e40 <HAL_GPIO_Init>
 8002440:	e000      	b.n	8002444 <HAL_FMC_MspInit+0x154>
    return;
 8002442:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002444:	37e0      	adds	r7, #224	; 0xe0
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20001744 	.word	0x20001744
 8002450:	58024400 	.word	0x58024400
 8002454:	58021400 	.word	0x58021400
 8002458:	58020800 	.word	0x58020800
 800245c:	58021800 	.word	0x58021800
 8002460:	58021000 	.word	0x58021000
 8002464:	58020c00 	.word	0x58020c00

08002468 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002470:	f7ff ff3e 	bl	80022f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	4b9b      	ldr	r3, [pc, #620]	; (8002700 <MX_GPIO_Init+0x284>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a99      	ldr	r2, [pc, #612]	; (8002700 <MX_GPIO_Init+0x284>)
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b97      	ldr	r3, [pc, #604]	; (8002700 <MX_GPIO_Init+0x284>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b0:	4b93      	ldr	r3, [pc, #588]	; (8002700 <MX_GPIO_Init+0x284>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	4a92      	ldr	r2, [pc, #584]	; (8002700 <MX_GPIO_Init+0x284>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c0:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <MX_GPIO_Init+0x284>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ce:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <MX_GPIO_Init+0x284>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	4a8a      	ldr	r2, [pc, #552]	; (8002700 <MX_GPIO_Init+0x284>)
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024de:	4b88      	ldr	r3, [pc, #544]	; (8002700 <MX_GPIO_Init+0x284>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <MX_GPIO_Init+0x284>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	4a83      	ldr	r2, [pc, #524]	; (8002700 <MX_GPIO_Init+0x284>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <MX_GPIO_Init+0x284>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <MX_GPIO_Init+0x284>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a7b      	ldr	r2, [pc, #492]	; (8002700 <MX_GPIO_Init+0x284>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b79      	ldr	r3, [pc, #484]	; (8002700 <MX_GPIO_Init+0x284>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <MX_GPIO_Init+0x284>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	4a74      	ldr	r2, [pc, #464]	; (8002700 <MX_GPIO_Init+0x284>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002538:	4b71      	ldr	r3, [pc, #452]	; (8002700 <MX_GPIO_Init+0x284>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <MX_GPIO_Init+0x284>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <MX_GPIO_Init+0x284>)
 800254e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002556:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <MX_GPIO_Init+0x284>)
 8002558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <MX_GPIO_Init+0x284>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <MX_GPIO_Init+0x284>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <MX_GPIO_Init+0x284>)
 8002576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f244 0140 	movw	r1, #16448	; 0x4040
 8002588:	485e      	ldr	r0, [pc, #376]	; (8002704 <MX_GPIO_Init+0x288>)
 800258a:	f006 fe21 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800258e:	2200      	movs	r2, #0
 8002590:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002594:	485c      	ldr	r0, [pc, #368]	; (8002708 <MX_GPIO_Init+0x28c>)
 8002596:	f006 fe1b 	bl	80091d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a0:	485a      	ldr	r0, [pc, #360]	; (800270c <MX_GPIO_Init+0x290>)
 80025a2:	f006 fe15 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80025ac:	4858      	ldr	r0, [pc, #352]	; (8002710 <MX_GPIO_Init+0x294>)
 80025ae:	f006 fe0f 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	484f      	ldr	r0, [pc, #316]	; (8002704 <MX_GPIO_Init+0x288>)
 80025c8:	f006 fc3a 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 80025cc:	f244 0340 	movw	r3, #16448	; 0x4040
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	4619      	mov	r1, r3
 80025e4:	4847      	ldr	r0, [pc, #284]	; (8002704 <MX_GPIO_Init+0x288>)
 80025e6:	f006 fc2b 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fe:	4619      	mov	r1, r3
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <MX_GPIO_Init+0x288>)
 8002602:	f006 fc1d 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002606:	2304      	movs	r3, #4
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002616:	4619      	mov	r1, r3
 8002618:	483b      	ldr	r0, [pc, #236]	; (8002708 <MX_GPIO_Init+0x28c>)
 800261a:	f006 fc11 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800261e:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	4834      	ldr	r0, [pc, #208]	; (8002708 <MX_GPIO_Init+0x28c>)
 8002638:	f006 fc02 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800263c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002646:	2301      	movs	r3, #1
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	482e      	ldr	r0, [pc, #184]	; (800270c <MX_GPIO_Init+0x290>)
 8002652:	f006 fbf5 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	4827      	ldr	r0, [pc, #156]	; (800270c <MX_GPIO_Init+0x290>)
 8002670:	f006 fbe6 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002674:	f242 0378 	movw	r3, #8312	; 0x2078
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267a:	2303      	movs	r3, #3
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	4820      	ldr	r0, [pc, #128]	; (800270c <MX_GPIO_Init+0x290>)
 800268a:	f006 fbd9 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 800268e:	f243 0308 	movw	r3, #12296	; 0x3008
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002694:	2303      	movs	r3, #3
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	481c      	ldr	r0, [pc, #112]	; (8002714 <MX_GPIO_Init+0x298>)
 80026a4:	f006 fbcc 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026a8:	23c0      	movs	r3, #192	; 0xc0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b0:	2301      	movs	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4816      	ldr	r0, [pc, #88]	; (8002714 <MX_GPIO_Init+0x298>)
 80026bc:	f006 fbc0 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c6:	2301      	movs	r3, #1
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d6:	4619      	mov	r1, r3
 80026d8:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_GPIO_Init+0x294>)
 80026da:	f006 fbb1 	bl	8008e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026e4:	2303      	movs	r3, #3
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_GPIO_Init+0x294>)
 80026f4:	f006 fba4 	bl	8008e40 <HAL_GPIO_Init>

}
 80026f8:	bf00      	nop
 80026fa:	3738      	adds	r7, #56	; 0x38
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	58020800 	.word	0x58020800
 8002708:	58020400 	.word	0x58020400
 800270c:	58020c00 	.word	0x58020c00
 8002710:	58020000 	.word	0x58020000
 8002714:	58021800 	.word	0x58021800

08002718 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_I2C2_Init+0x74>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <MX_I2C2_Init+0x78>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_I2C2_Init+0x74>)
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <MX_I2C2_Init+0x7c>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_I2C2_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <MX_I2C2_Init+0x74>)
 8002730:	2201      	movs	r2, #1
 8002732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_I2C2_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <MX_I2C2_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C2_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_I2C2_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_I2C2_Init+0x74>)
 800274e:	2200      	movs	r2, #0
 8002750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002752:	480e      	ldr	r0, [pc, #56]	; (800278c <MX_I2C2_Init+0x74>)
 8002754:	f008 fa6a 	bl	800ac2c <HAL_I2C_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800275e:	f000 fb0b 	bl	8002d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <MX_I2C2_Init+0x74>)
 8002766:	f008 fdf5 	bl	800b354 <HAL_I2CEx_ConfigAnalogFilter>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002770:	f000 fb02 	bl	8002d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002774:	2100      	movs	r1, #0
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_I2C2_Init+0x74>)
 8002778:	f008 fe37 	bl	800b3ea <HAL_I2CEx_ConfigDigitalFilter>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 faf9 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20001748 	.word	0x20001748
 8002790:	40005800 	.word	0x40005800
 8002794:	505097f4 	.word	0x505097f4

08002798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0ba      	sub	sp, #232	; 0xe8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	22c0      	movs	r2, #192	; 0xc0
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f014 fdf7 	bl	80173ac <memset>
  if(i2cHandle->Instance==I2C2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_I2C_MspInit+0xc8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d146      	bne.n	8002856 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027c8:	f04f 0208 	mov.w	r2, #8
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	4618      	mov	r0, r3
 80027e0:	f009 fe80 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80027ea:	f000 fac5 	bl	8002d78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 8002800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800280c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002814:	2312      	movs	r3, #18
 8002816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002826:	2304      	movs	r3, #4
 8002828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002830:	4619      	mov	r1, r3
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <HAL_I2C_MspInit+0xd0>)
 8002834:	f006 fb04 	bl	8008e40 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 800283a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002844:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_I2C_MspInit+0xcc>)
 800284a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002856:	bf00      	nop
 8002858:	37e8      	adds	r7, #232	; 0xe8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40005800 	.word	0x40005800
 8002864:	58024400 	.word	0x58024400
 8002868:	58020400 	.word	0x58020400

0800286c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8002872:	f000 fa3f 	bl	8002cf4 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002876:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <main+0x184>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d11b      	bne.n	80028ba <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002882:	f3bf 8f4f 	dsb	sy
}
 8002886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002888:	f3bf 8f6f 	isb	sy
}
 800288c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <main+0x184>)
 8002890:	2200      	movs	r2, #0
 8002892:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002896:	f3bf 8f4f 	dsb	sy
}
 800289a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800289c:	f3bf 8f6f 	isb	sy
}
 80028a0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <main+0x184>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <main+0x184>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80028ae:	f3bf 8f4f 	dsb	sy
}
 80028b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028b4:	f3bf 8f6f 	isb	sy
}
 80028b8:	e000      	b.n	80028bc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80028ba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <main+0x184>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d138      	bne.n	800293a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80028c8:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <main+0x184>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80028d0:	f3bf 8f4f 	dsb	sy
}
 80028d4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <main+0x184>)
 80028d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028dc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0b5b      	lsrs	r3, r3, #13
 80028e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028e6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80028fa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002900:	493b      	ldr	r1, [pc, #236]	; (80029f0 <main+0x184>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <main+0x86>
    } while(sets-- != 0U);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800291c:	f3bf 8f4f 	dsb	sy
}
 8002920:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <main+0x184>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <main+0x184>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800292e:	f3bf 8f4f 	dsb	sy
}
 8002932:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002934:	f3bf 8f6f 	isb	sy
}
 8002938:	e000      	b.n	800293c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800293a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293c:	f002 f9c4 	bl	8004cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002940:	f000 f864 	bl	8002a0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002944:	f000 f912 	bl	8002b6c <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002948:	f7ff fd98 	bl	800247c <MX_GPIO_Init>
  MX_DMA_Init();
 800294c:	f7ff fc24 	bl	8002198 <MX_DMA_Init>
  MX_FMC_Init();
 8002950:	f7ff fc7a 	bl	8002248 <MX_FMC_Init>
  MX_ADC1_Init();
 8002954:	f7fe fbac 	bl	80010b0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002958:	f7fe fcbc 	bl	80012d4 <MX_ADC3_Init>
  MX_I2C2_Init();
 800295c:	f7ff fedc 	bl	8002718 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002960:	f000 fcaa 	bl	80032b8 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002964:	f000 fd42 	bl	80033ec <MX_SPI1_Init>
  MX_FATFS_Init();
 8002968:	f7ff fc46 	bl	80021f8 <MX_FATFS_Init>
  MX_SAI1_Init();
 800296c:	f000 fa58 	bl	8002e20 <MX_SAI1_Init>
  MX_TIM3_Init();
 8002970:	f000 ffcc 	bl	800390c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002974:	f001 f842 	bl	80039fc <MX_TIM4_Init>
  MX_TIM7_Init();
 8002978:	f001 f8ce 	bl	8003b18 <MX_TIM7_Init>
  MX_TIM1_Init();
 800297c:	f000 ff36 	bl	80037ec <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002980:	f001 fa98 	bl	8003eb4 <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002984:	f000 f9fc 	bl	8002d80 <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002988:	f001 fb70 	bl	800406c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002992:	4818      	ldr	r0, [pc, #96]	; (80029f4 <main+0x188>)
 8002994:	f006 fc1c 	bl	80091d0 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002998:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 800299c:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	eee1 3a10 	vmsr	fpscr, r3
}
 80029b0:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 80029b2:	220a      	movs	r2, #10
 80029b4:	4910      	ldr	r1, [pc, #64]	; (80029f8 <main+0x18c>)
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <main+0x190>)
 80029b8:	f002 fe06 	bl	80055c8 <HAL_ADC_Start_DMA>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <main+0x15a>
	{
	  Error_Handler();
 80029c2:	f000 f9d9 	bl	8002d78 <Error_Handler>
	}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80029c6:	2201      	movs	r2, #1
 80029c8:	2140      	movs	r1, #64	; 0x40
 80029ca:	480a      	ldr	r0, [pc, #40]	; (80029f4 <main+0x188>)
 80029cc:	f006 fc00 	bl	80091d0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80029d0:	200a      	movs	r0, #10
 80029d2:	f002 fa0b 	bl	8004dec <HAL_Delay>

  SDRAM_Initialization_sequence();
 80029d6:	f000 f909 	bl	8002bec <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 80029da:	2064      	movs	r0, #100	; 0x64
 80029dc:	f002 fa06 	bl	8004dec <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <main+0x194>)
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <main+0x198>)
 80029e4:	4808      	ldr	r0, [pc, #32]	; (8002a08 <main+0x19c>)
 80029e6:	f7fe fe09 	bl	80015fc <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80029ea:	f001 fb67 	bl	80040bc <MX_USB_HOST_Process>
 80029ee:	e7fc      	b.n	80029ea <main+0x17e>
 80029f0:	e000ed00 	.word	0xe000ed00
 80029f4:	58020800 	.word	0x58020800
 80029f8:	30000440 	.word	0x30000440
 80029fc:	20000130 	.word	0x20000130
 8002a00:	20001848 	.word	0x20001848
 8002a04:	200017b0 	.word	0x200017b0
 8002a08:	20001748 	.word	0x20001748

08002a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b09e      	sub	sp, #120	; 0x78
 8002a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a16:	224c      	movs	r2, #76	; 0x4c
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f014 fcc6 	bl	80173ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2220      	movs	r2, #32
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f014 fcbf 	bl	80173ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f008 fd28 	bl	800b484 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <SystemClock_Config+0x154>)
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <SystemClock_Config+0x154>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <SystemClock_Config+0x154>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <SystemClock_Config+0x158>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <SystemClock_Config+0x158>)
 8002a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a58:	6193      	str	r3, [r2, #24]
 8002a5a:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <SystemClock_Config+0x158>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002a66:	bf00      	nop
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <SystemClock_Config+0x158>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a74:	d1f8      	bne.n	8002a68 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <SystemClock_Config+0x15c>)
 8002a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a7c:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <SystemClock_Config+0x15c>)
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <SystemClock_Config+0x15c>)
 8002a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002a94:	2300      	movs	r3, #0
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <SystemClock_Config+0x158>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <SystemClock_Config+0x158>)
 8002a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <SystemClock_Config+0x158>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <SystemClock_Config+0x154>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <SystemClock_Config+0x154>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <SystemClock_Config+0x154>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ac6:	bf00      	nop
 8002ac8:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <SystemClock_Config+0x158>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad4:	d1f8      	bne.n	8002ac8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002ad6:	2321      	movs	r3, #33	; 0x21
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002aec:	2305      	movs	r3, #5
 8002aee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002af0:	23c0      	movs	r3, #192	; 0xc0
 8002af2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002af8:	2302      	movs	r3, #2
 8002afa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002afc:	2302      	movs	r3, #2
 8002afe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002b00:	2308      	movs	r3, #8
 8002b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b10:	4618      	mov	r0, r3
 8002b12:	f008 fd01 	bl	800b518 <HAL_RCC_OscConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002b1c:	f000 f92c 	bl	8002d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b20:	233f      	movs	r3, #63	; 0x3f
 8002b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b24:	2303      	movs	r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002b30:	2340      	movs	r3, #64	; 0x40
 8002b32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b34:	2340      	movs	r3, #64	; 0x40
 8002b36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002b3e:	2340      	movs	r3, #64	; 0x40
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	2104      	movs	r1, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f009 f93f 	bl	800bdcc <HAL_RCC_ClockConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8002b54:	f000 f910 	bl	8002d78 <Error_Handler>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3778      	adds	r7, #120	; 0x78
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	58000400 	.word	0x58000400
 8002b64:	58024800 	.word	0x58024800
 8002b68:	58024400 	.word	0x58024400

08002b6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0b0      	sub	sp, #192	; 0xc0
 8002b70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b72:	463b      	mov	r3, r7
 8002b74:	22c0      	movs	r2, #192	; 0xc0
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f014 fc17 	bl	80173ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8002b7e:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <PeriphCommonClock_Config+0x68>)
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002b88:	2319      	movs	r3, #25
 8002b8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8002b8c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8002b92:	2307      	movs	r3, #7
 8002b94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002b96:	2302      	movs	r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bae:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 fc91 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002bc8:	f000 f8d6 	bl	8002d78 <Error_Handler>
  }
}
 8002bcc:	bf00      	nop
 8002bce:	37c0      	adds	r7, #192	; 0xc0
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00090100 	.word	0x00090100

08002bd8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	;
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4828      	ldr	r0, [pc, #160]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002c10:	f00e fc82 	bl	8011518 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f002 f8e9 	bl	8004dec <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c30:	4619      	mov	r1, r3
 8002c32:	481f      	ldr	r0, [pc, #124]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002c34:	f00e fc70 	bl	8011518 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8002c38:	f240 2322 	movw	r3, #546	; 0x222
 8002c3c:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c42:	2310      	movs	r3, #16
 8002c44:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c54:	4619      	mov	r1, r3
 8002c56:	4816      	ldr	r0, [pc, #88]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002c58:	f00e fc5e 	bl	8011518 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c60:	2310      	movs	r3, #16
 8002c62:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002c64:	2308      	movs	r3, #8
 8002c66:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c72:	4619      	mov	r1, r3
 8002c74:	480e      	ldr	r0, [pc, #56]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002c76:	f00e fc4f 	bl	8011518 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f002 f8b6 	bl	8004dec <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c80:	2303      	movs	r3, #3
 8002c82:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c84:	2310      	movs	r3, #16
 8002c86:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002c9a:	f00e fc3d 	bl	8011518 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8002c9e:	f240 5169 	movw	r1, #1385	; 0x569
 8002ca2:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <SDRAM_Initialization_sequence+0xc4>)
 8002ca4:	f00e fc6d 	bl	8011582 <HAL_SDRAM_ProgramRefreshRate>
}
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20001710 	.word	0x20001710

08002cb4 <randomNumber>:


float randomNumber(void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480b      	ldr	r0, [pc, #44]	; (8002cec <randomNumber+0x38>)
 8002cc0:	f00c f970 	bl	800efa4 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002cf0 <randomNumber+0x3c>
 8002cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd6:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	ee07 3a90 	vmov	s15, r3
}
 8002ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000179c 	.word	0x2000179c
 8002cf0:	2f80000d 	.word	0x2f80000d

08002cf4 <MPU_Conf>:


void MPU_Conf(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8002cfa:	f003 ff41 	bl	8006b80 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8002d02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002d06:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002d08:	2311      	movs	r3, #17
 8002d0a:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002d24:	2300      	movs	r3, #0
 8002d26:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 ff5e 	bl	8006bf0 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8002d38:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002d3c:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002d3e:	230f      	movs	r3, #15
 8002d40:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002d42:	2303      	movs	r3, #3
 8002d44:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d62:	463b      	mov	r3, r7
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 ff43 	bl	8006bf0 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d6a:	2004      	movs	r0, #4
 8002d6c:	f003 ff20 	bl	8006bb0 <HAL_MPU_Enable>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 8002d7c:	e7fe      	b.n	8002d7c <Error_Handler+0x4>
	...

08002d80 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <MX_RNG_Init+0x24>)
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <MX_RNG_Init+0x28>)
 8002d88:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_RNG_Init+0x24>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_RNG_Init+0x24>)
 8002d92:	f00c f8a5 	bl	800eee0 <HAL_RNG_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002d9c:	f7ff ffec 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000179c 	.word	0x2000179c
 8002da8:	48021800 	.word	0x48021800

08002dac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0b4      	sub	sp, #208	; 0xd0
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	22c0      	movs	r2, #192	; 0xc0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f014 faf5 	bl	80173ac <memset>
  if(rngHandle->Instance==RNG)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <HAL_RNG_MspInit+0x6c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d121      	bne.n	8002e10 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dde:	f107 0310 	add.w	r3, r7, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f009 fb7e 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002dee:	f7ff ffc3 	bl	8002d78 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RNG_MspInit+0x70>)
 8002df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_RNG_MspInit+0x70>)
 8002dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dfe:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RNG_MspInit+0x70>)
 8002e04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002e10:	bf00      	nop
 8002e12:	37d0      	adds	r7, #208	; 0xd0
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	48021800 	.word	0x48021800
 8002e1c:	58024400 	.word	0x58024400

08002e20 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e26:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <MX_SAI1_Init+0xb4>)
 8002e28:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e4a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002e4e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002e68:	2302      	movs	r3, #2
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4818      	ldr	r0, [pc, #96]	; (8002ed0 <MX_SAI1_Init+0xb0>)
 8002e70:	f00c f8ee 	bl	800f050 <HAL_SAI_InitProtocol>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002e7a:	f7ff ff7d 	bl	8002d78 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <MX_SAI1_Init+0xbc>)
 8002e82:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e86:	2203      	movs	r2, #3
 8002e88:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <MX_SAI1_Init+0xb8>)
 8002ebc:	f00c f8c8 	bl	800f050 <HAL_SAI_InitProtocol>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8002ec6:	f7ff ff57 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200017b0 	.word	0x200017b0
 8002ed4:	40015804 	.word	0x40015804
 8002ed8:	20001848 	.word	0x20001848
 8002edc:	40015824 	.word	0x40015824

08002ee0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a77      	ldr	r2, [pc, #476]	; (80030cc <HAL_SAI_MspInit+0x1ec>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d179      	bne.n	8002fe6 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10e      	bne.n	8002f18 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 8002efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f00:	4a74      	ldr	r2, [pc, #464]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 8002f02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f0a:	4b72      	ldr	r3, [pc, #456]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 8002f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002f18:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4a6c      	ldr	r2, [pc, #432]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 8002f20:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002f22:	2324      	movs	r3, #36	; 0x24
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f32:	2306      	movs	r3, #6
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4866      	ldr	r0, [pc, #408]	; (80030d8 <HAL_SAI_MspInit+0x1f8>)
 8002f3e:	f005 ff7f 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002f42:	2350      	movs	r3, #80	; 0x50
 8002f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002f52:	2306      	movs	r3, #6
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	485e      	ldr	r0, [pc, #376]	; (80030d8 <HAL_SAI_MspInit+0x1f8>)
 8002f5e:	f005 ff6f 	bl	8008e40 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8002f62:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f64:	4a5e      	ldr	r2, [pc, #376]	; (80030e0 <HAL_SAI_MspInit+0x200>)
 8002f66:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002f68:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f6a:	2257      	movs	r2, #87	; 0x57
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f88:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f90:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002f92:	4b52      	ldr	r3, [pc, #328]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f98:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002f9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fa0:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fa2:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002fae:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002fba:	4848      	ldr	r0, [pc, #288]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fbc:	f003 fe5c 	bl	8006c78 <HAL_DMA_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8002fc6:	f7ff fed7 	bl	8002d78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002fd2:	4a42      	ldr	r2, [pc, #264]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002fe0:	4a3e      	ldr	r2, [pc, #248]	; (80030dc <HAL_SAI_MspInit+0x1fc>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3e      	ldr	r2, [pc, #248]	; (80030e4 <HAL_SAI_MspInit+0x204>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d169      	bne.n	80030c4 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8002ff0:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10e      	bne.n	8003016 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ff8:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 8002ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ffe:	4a35      	ldr	r2, [pc, #212]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 8003000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003004:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <HAL_SAI_MspInit+0x1f4>)
 800300a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003016:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <HAL_SAI_MspInit+0x1f0>)
 800301e:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003020:	2308      	movs	r3, #8
 8003022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800302c:	2302      	movs	r3, #2
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003030:	2306      	movs	r3, #6
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	4827      	ldr	r0, [pc, #156]	; (80030d8 <HAL_SAI_MspInit+0x1f8>)
 800303c:	f005 ff00 	bl	8008e40 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_SAI_MspInit+0x20c>)
 8003044:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003046:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003048:	2258      	movs	r2, #88	; 0x58
 800304a:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800305a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305e:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003062:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003066:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800306a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800306e:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003076:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800307a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800307e:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003082:	2204      	movs	r2, #4
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800308e:	2200      	movs	r2, #0
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003098:	4813      	ldr	r0, [pc, #76]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 800309a:	f003 fded 	bl	8006c78 <HAL_DMA_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 80030a4:	f7ff fe68 	bl	8002d78 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 80030ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <HAL_SAI_MspInit+0x208>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80030c4:	bf00      	nop
 80030c6:	3728      	adds	r7, #40	; 0x28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40015804 	.word	0x40015804
 80030d0:	200019d0 	.word	0x200019d0
 80030d4:	58024400 	.word	0x58024400
 80030d8:	58021000 	.word	0x58021000
 80030dc:	200018e0 	.word	0x200018e0
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40015824 	.word	0x40015824
 80030e8:	20001958 	.word	0x20001958
 80030ec:	40020040 	.word	0x40020040

080030f0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <SD_CheckStatus+0x38>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003100:	f7fe ff56 	bl	8001fb0 <BSP_SD_GetCardState>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <SD_CheckStatus+0x38>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SD_CheckStatus+0x38>)
 8003118:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800311a:	4b03      	ldr	r3, [pc, #12]	; (8003128 <SD_CheckStatus+0x38>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000008 	.word	0x20000008

0800312c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <SD_initialize+0x38>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800313c:	f7fe fed6 	bl	8001eec <BSP_SD_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ffd1 	bl	80030f0 <SD_CheckStatus>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <SD_initialize+0x38>)
 8003154:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003156:	4b03      	ldr	r3, [pc, #12]	; (8003164 <SD_initialize+0x38>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000008 	.word	0x20000008

08003168 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ffbb 	bl	80030f0 <SD_CheckStatus>
 800317a:	4603      	mov	r3, r0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	f7fe fec9 	bl	8001f38 <BSP_SD_ReadBlocks>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80031ac:	bf00      	nop
 80031ae:	f7fe feff 	bl	8001fb0 <BSP_SD_GetCardState>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1fa      	bne.n	80031ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4603      	mov	r3, r0
 80031d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80031da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	f7fe fec6 	bl	8001f74 <BSP_SD_WriteBlocks>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80031ee:	bf00      	nop
 80031f0:	f7fe fede 	bl	8001fb0 <BSP_SD_GetCardState>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1fa      	bne.n	80031f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	603a      	str	r2, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	460b      	mov	r3, r1
 8003216:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <SD_ioctl+0xac>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <SD_ioctl+0x28>
 800322c:	2303      	movs	r3, #3
 800322e:	e03c      	b.n	80032aa <SD_ioctl+0xa2>

  switch (cmd)
 8003230:	79bb      	ldrb	r3, [r7, #6]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d834      	bhi.n	80032a0 <SD_ioctl+0x98>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <SD_ioctl+0x34>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	0800324d 	.word	0x0800324d
 8003240:	08003255 	.word	0x08003255
 8003244:	0800326d 	.word	0x0800326d
 8003248:	08003287 	.word	0x08003287
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003252:	e028      	b.n	80032a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe feb9 	bl	8001fd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800325e:	6a3a      	ldr	r2, [r7, #32]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800326a:	e01c      	b.n	80032a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fead 	bl	8001fd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	b29a      	uxth	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003284:	e00f      	b.n	80032a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fea0 	bl	8001fd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	0a5a      	lsrs	r2, r3, #9
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800329e:	e002      	b.n	80032a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80032a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008

080032b8 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032be:	4a0c      	ldr	r2, [pc, #48]	; (80032f0 <MX_SDMMC1_SD_Init+0x38>)
 80032c0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032d4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <MX_SDMMC1_SD_Init+0x34>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	200019d4 	.word	0x200019d4
 80032f0:	52007000 	.word	0x52007000

080032f4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_SD_MspInit+0xe8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d15e      	bne.n	80033d4 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003316:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003318:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <HAL_SD_MspInit+0xec>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003328:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_SD_MspInit+0xec>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_SD_MspInit+0xec>)
 800335a:	f043 0308 	orr.w	r3, r3, #8
 800335e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <HAL_SD_MspInit+0xec>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003370:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800337a:	2301      	movs	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003382:	230c      	movs	r3, #12
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4815      	ldr	r0, [pc, #84]	; (80033e4 <HAL_SD_MspInit+0xf0>)
 800338e:	f005 fd57 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80033a4:	230c      	movs	r3, #12
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	480d      	ldr	r0, [pc, #52]	; (80033e4 <HAL_SD_MspInit+0xf0>)
 80033b0:	f005 fd46 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033b4:	2304      	movs	r3, #4
 80033b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033bc:	2301      	movs	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80033c4:	230c      	movs	r3, #12
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <HAL_SD_MspInit+0xf4>)
 80033d0:	f005 fd36 	bl	8008e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80033d4:	bf00      	nop
 80033d6:	3728      	adds	r7, #40	; 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	52007000 	.word	0x52007000
 80033e0:	58024400 	.word	0x58024400
 80033e4:	58020800 	.word	0x58020800
 80033e8:	58020c00 	.word	0x58020c00

080033ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <MX_SPI1_Init+0xa4>)
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <MX_SPI1_Init+0xa8>)
 80033f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <MX_SPI1_Init+0xa4>)
 80033f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80033fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003406:	2207      	movs	r2, #7
 8003408:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800340a:	4b21      	ldr	r3, [pc, #132]	; (8003490 <MX_SPI1_Init+0xa4>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003418:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800341c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003424:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <MX_SPI1_Init+0xa4>)
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003434:	2200      	movs	r2, #0
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <MX_SPI1_Init+0xa4>)
 800343a:	2200      	movs	r2, #0
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003448:	2200      	movs	r2, #0
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <MX_SPI1_Init+0xa4>)
 800344e:	2200      	movs	r2, #0
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <MX_SPI1_Init+0xa4>)
 800345a:	2200      	movs	r2, #0
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003460:	2200      	movs	r2, #0
 8003462:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003466:	2200      	movs	r2, #0
 8003468:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <MX_SPI1_Init+0xa4>)
 800346c:	2200      	movs	r2, #0
 800346e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003472:	2200      	movs	r2, #0
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <MX_SPI1_Init+0xa4>)
 8003478:	2200      	movs	r2, #0
 800347a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <MX_SPI1_Init+0xa4>)
 800347e:	f00e f8a9 	bl	80115d4 <HAL_SPI_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003488:	f7ff fc76 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20001a50 	.word	0x20001a50
 8003494:	40013000 	.word	0x40013000

08003498 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b0bc      	sub	sp, #240	; 0xf0
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b0:	f107 0318 	add.w	r3, r7, #24
 80034b4:	22c0      	movs	r2, #192	; 0xc0
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f013 ff77 	bl	80173ac <memset>
  if(spiHandle->Instance==SPI1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_SPI_MspInit+0x10c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d169      	bne.n	800359c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80034c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f009 f801 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80034e8:	f7ff fc46 	bl	8002d78 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ec:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 80034ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 80034f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 80034fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 800350c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003510:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 800352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 8003530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_SPI_MspInit+0x110>)
 800353a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800355e:	2305      	movs	r3, #5
 8003560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003564:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003568:	4619      	mov	r1, r3
 800356a:	4810      	ldr	r0, [pc, #64]	; (80035ac <HAL_SPI_MspInit+0x114>)
 800356c:	f005 fc68 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003570:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003574:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800358a:	2305      	movs	r3, #5
 800358c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003590:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003594:	4619      	mov	r1, r3
 8003596:	4806      	ldr	r0, [pc, #24]	; (80035b0 <HAL_SPI_MspInit+0x118>)
 8003598:	f005 fc52 	bl	8008e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800359c:	bf00      	nop
 800359e:	37f0      	adds	r7, #240	; 0xf0
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40013000 	.word	0x40013000
 80035a8:	58024400 	.word	0x58024400
 80035ac:	58020c00 	.word	0x58020c00
 80035b0:	58021800 	.word	0x58021800

080035b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <HAL_MspInit+0x30>)
 80035bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <HAL_MspInit+0x30>)
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_MspInit+0x30>)
 80035cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	58024400 	.word	0x58024400

080035e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fa:	e7fe      	b.n	80035fa <HardFault_Handler+0x4>

080035fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003600:	e7fe      	b.n	8003600 <MemManage_Handler+0x4>

08003602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003606:	e7fe      	b.n	8003606 <BusFault_Handler+0x4>

08003608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800360c:	e7fe      	b.n	800360c <UsageFault_Handler+0x4>

0800360e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800363c:	f001 fbb6 	bl	8004dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}

08003644 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Stream0_IRQHandler+0x10>)
 800364a:	f004 f8db 	bl	8007804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200001f8 	.word	0x200001f8

08003658 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA1_Stream1_IRQHandler+0x10>)
 800365e:	f004 f8d1 	bl	8007804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200018e0 	.word	0x200018e0

0800366c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <DMA1_Stream2_IRQHandler+0x10>)
 8003672:	f004 f8c7 	bl	8007804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20001958 	.word	0x20001958

08003680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <ADC_IRQHandler+0x10>)
 8003686:	f002 f863 	bl	8005750 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000130 	.word	0x20000130

08003694 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800369a:	f006 f81d 	bl	80096d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20001ca8 	.word	0x20001ca8

080036a8 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 80036ae:	f006 f813 	bl	80096d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20001ca8 	.word	0x20001ca8

080036bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <OTG_FS_IRQHandler+0x10>)
 80036c2:	f006 f809 	bl	80096d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20001ca8 	.word	0x20001ca8

080036d0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <_sbrk+0x50>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <_sbrk+0x16>
		heap_end = &end;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <_sbrk+0x50>)
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <_sbrk+0x54>)
 80036e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <_sbrk+0x50>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <_sbrk+0x50>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	466a      	mov	r2, sp
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d907      	bls.n	800370a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80036fa:	f013 fe6f 	bl	80173dc <__errno>
 80036fe:	4603      	mov	r3, r0
 8003700:	220c      	movs	r2, #12
 8003702:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003708:	e006      	b.n	8003718 <_sbrk+0x48>
	}

	heap_end += incr;
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <_sbrk+0x50>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	4a03      	ldr	r2, [pc, #12]	; (8003720 <_sbrk+0x50>)
 8003714:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20001ad8 	.word	0x20001ad8
 8003724:	20002108 	.word	0x20002108

08003728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800372c:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <SystemInit+0xac>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	4a28      	ldr	r2, [pc, #160]	; (80037d4 <SystemInit+0xac>)
 8003734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800373c:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <SystemInit+0xb0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <SystemInit+0xb0>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <SystemInit+0xb0>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <SystemInit+0xb0>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4921      	ldr	r1, [pc, #132]	; (80037d8 <SystemInit+0xb0>)
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <SystemInit+0xb4>)
 8003756:	4013      	ands	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <SystemInit+0xb0>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <SystemInit+0xb0>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <SystemInit+0xb0>)
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <SystemInit+0xb0>)
 800376e:	2200      	movs	r2, #0
 8003770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <SystemInit+0xb0>)
 8003774:	2200      	movs	r2, #0
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <SystemInit+0xb0>)
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <SystemInit+0xb0>)
 8003780:	2200      	movs	r2, #0
 8003782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <SystemInit+0xb0>)
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <SystemInit+0xb0>)
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <SystemInit+0xb0>)
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <SystemInit+0xb0>)
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <SystemInit+0xb0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <SystemInit+0xb0>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <SystemInit+0xb0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <SystemInit+0xb8>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <SystemInit+0xbc>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ba:	d202      	bcs.n	80037c2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <SystemInit+0xc0>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SystemInit+0xac>)
 80037c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00
 80037d8:	58024400 	.word	0x58024400
 80037dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80037e0:	5c001000 	.word	0x5c001000
 80037e4:	ffff0000 	.word	0xffff0000
 80037e8:	51008108 	.word	0x51008108

080037ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b096      	sub	sp, #88	; 0x58
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	615a      	str	r2, [r3, #20]
 8003810:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	222c      	movs	r2, #44	; 0x2c
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f013 fdc7 	bl	80173ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800381e:	4b39      	ldr	r3, [pc, #228]	; (8003904 <MX_TIM1_Init+0x118>)
 8003820:	4a39      	ldr	r2, [pc, #228]	; (8003908 <MX_TIM1_Init+0x11c>)
 8003822:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <MX_TIM1_Init+0x118>)
 8003826:	2200      	movs	r2, #0
 8003828:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <MX_TIM1_Init+0x118>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <MX_TIM1_Init+0x118>)
 8003832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003836:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <MX_TIM1_Init+0x118>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <MX_TIM1_Init+0x118>)
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <MX_TIM1_Init+0x118>)
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800384a:	482e      	ldr	r0, [pc, #184]	; (8003904 <MX_TIM1_Init+0x118>)
 800384c:	f00e f858 	bl	8011900 <HAL_TIM_PWM_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003856:	f7ff fa8f 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003866:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800386a:	4619      	mov	r1, r3
 800386c:	4825      	ldr	r0, [pc, #148]	; (8003904 <MX_TIM1_Init+0x118>)
 800386e:	f00e feb9 	bl	80125e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003878:	f7ff fa7e 	bl	8002d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800387c:	2360      	movs	r3, #96	; 0x60
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003884:	2300      	movs	r3, #0
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003888:	2300      	movs	r3, #0
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800389c:	2208      	movs	r2, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	4818      	ldr	r0, [pc, #96]	; (8003904 <MX_TIM1_Init+0x118>)
 80038a2:	f00e f885 	bl	80119b0 <HAL_TIM_PWM_ConfigChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80038ac:	f7ff fa64 	bl	8002d78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4807      	ldr	r0, [pc, #28]	; (8003904 <MX_TIM1_Init+0x118>)
 80038e6:	f00e ff0b 	bl	8012700 <HAL_TIMEx_ConfigBreakDeadTime>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80038f0:	f7ff fa42 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038f4:	4803      	ldr	r0, [pc, #12]	; (8003904 <MX_TIM1_Init+0x118>)
 80038f6:	f000 f9b7 	bl	8003c68 <HAL_TIM_MspPostInit>

}
 80038fa:	bf00      	nop
 80038fc:	3758      	adds	r7, #88	; 0x58
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20001adc 	.word	0x20001adc
 8003908:	40010000 	.word	0x40010000

0800390c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08e      	sub	sp, #56	; 0x38
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003920:	f107 031c 	add.w	r3, r7, #28
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800392c:	463b      	mov	r3, r7
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800393e:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003940:	4a2d      	ldr	r2, [pc, #180]	; (80039f8 <MX_TIM3_Init+0xec>)
 8003942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003946:	2200      	movs	r2, #0
 8003948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <MX_TIM3_Init+0xe8>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003958:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <MX_TIM3_Init+0xe8>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003960:	2200      	movs	r2, #0
 8003962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003964:	4823      	ldr	r0, [pc, #140]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003966:	f00d ff74 	bl	8011852 <HAL_TIM_Base_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003970:	f7ff fa02 	bl	8002d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800397a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397e:	4619      	mov	r1, r3
 8003980:	481c      	ldr	r0, [pc, #112]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003982:	f00e f929 	bl	8011bd8 <HAL_TIM_ConfigClockSource>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800398c:	f7ff f9f4 	bl	8002d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003990:	4818      	ldr	r0, [pc, #96]	; (80039f4 <MX_TIM3_Init+0xe8>)
 8003992:	f00d ffb5 	bl	8011900 <HAL_TIM_PWM_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800399c:	f7ff f9ec 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	4619      	mov	r1, r3
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <MX_TIM3_Init+0xe8>)
 80039b0:	f00e fe18 	bl	80125e4 <HAL_TIMEx_MasterConfigSynchronization>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80039ba:	f7ff f9dd 	bl	8002d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039be:	2360      	movs	r3, #96	; 0x60
 80039c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039ce:	463b      	mov	r3, r7
 80039d0:	2204      	movs	r2, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4807      	ldr	r0, [pc, #28]	; (80039f4 <MX_TIM3_Init+0xe8>)
 80039d6:	f00d ffeb 	bl	80119b0 <HAL_TIM_PWM_ConfigChannel>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80039e0:	f7ff f9ca 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039e4:	4803      	ldr	r0, [pc, #12]	; (80039f4 <MX_TIM3_Init+0xe8>)
 80039e6:	f000 f93f 	bl	8003c68 <HAL_TIM_MspPostInit>

}
 80039ea:	bf00      	nop
 80039ec:	3738      	adds	r7, #56	; 0x38
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20001b28 	.word	0x20001b28
 80039f8:	40000400 	.word	0x40000400

080039fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08e      	sub	sp, #56	; 0x38
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	611a      	str	r2, [r3, #16]
 8003a2a:	615a      	str	r2, [r3, #20]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a2e:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a30:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <MX_TIM4_Init+0x118>)
 8003a32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a40:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a48:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a54:	482e      	ldr	r0, [pc, #184]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a56:	f00d fefc 	bl	8011852 <HAL_TIM_Base_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003a60:	f7ff f98a 	bl	8002d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4827      	ldr	r0, [pc, #156]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a72:	f00e f8b1 	bl	8011bd8 <HAL_TIM_ConfigClockSource>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003a7c:	f7ff f97c 	bl	8002d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a80:	4823      	ldr	r0, [pc, #140]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003a82:	f00d ff3d 	bl	8011900 <HAL_TIM_PWM_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003a8c:	f7ff f974 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	481c      	ldr	r0, [pc, #112]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003aa0:	f00e fda0 	bl	80125e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003aaa:	f7ff f965 	bl	8002d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aae:	2360      	movs	r3, #96	; 0x60
 8003ab0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003abe:	463b      	mov	r3, r7
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4812      	ldr	r0, [pc, #72]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003ac6:	f00d ff73 	bl	80119b0 <HAL_TIM_PWM_ConfigChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003ad0:	f7ff f952 	bl	8002d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	480d      	ldr	r0, [pc, #52]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003adc:	f00d ff68 	bl	80119b0 <HAL_TIM_PWM_ConfigChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003ae6:	f7ff f947 	bl	8002d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003aea:	463b      	mov	r3, r7
 8003aec:	220c      	movs	r2, #12
 8003aee:	4619      	mov	r1, r3
 8003af0:	4807      	ldr	r0, [pc, #28]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003af2:	f00d ff5d 	bl	80119b0 <HAL_TIM_PWM_ConfigChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003afc:	f7ff f93c 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <MX_TIM4_Init+0x114>)
 8003b02:	f000 f8b1 	bl	8003c68 <HAL_TIM_MspPostInit>

}
 8003b06:	bf00      	nop
 8003b08:	3738      	adds	r7, #56	; 0x38
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20001b74 	.word	0x20001b74
 8003b14:	40000800 	.word	0x40000800

08003b18 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <MX_TIM7_Init+0x68>)
 8003b2c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b40:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003b48:	480c      	ldr	r0, [pc, #48]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b4a:	f00d fe82 	bl	8011852 <HAL_TIM_Base_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003b54:	f7ff f910 	bl	8002d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4805      	ldr	r0, [pc, #20]	; (8003b7c <MX_TIM7_Init+0x64>)
 8003b66:	f00e fd3d 	bl	80125e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003b70:	f7ff f902 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20001bc0 	.word	0x20001bc0
 8003b80:	40001400 	.word	0x40001400

08003b84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10e      	bne.n	8003bb4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8003b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b9c:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	58024400 	.word	0x58024400

08003bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <HAL_TIM_Base_MspInit+0x90>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10f      	bne.n	8003bfa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be0:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003bf8:	e028      	b.n	8003c4c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_TIM_Base_MspInit+0x98>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10f      	bne.n	8003c24 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c04:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
}
 8003c22:	e013      	b.n	8003c4c <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <HAL_TIM_Base_MspInit+0x9c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10e      	bne.n	8003c4c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c34:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_TIM_Base_MspInit+0x94>)
 8003c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40001400 	.word	0x40001400

08003c68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a38      	ldr	r2, [pc, #224]	; (8003d68 <HAL_TIM_MspPostInit+0x100>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d120      	bne.n	8003ccc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c90:	4a36      	ldr	r2, [pc, #216]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c9a:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	482a      	ldr	r0, [pc, #168]	; (8003d70 <HAL_TIM_MspPostInit+0x108>)
 8003cc6:	f005 f8bb 	bl	8008e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003cca:	e049      	b.n	8003d60 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <HAL_TIM_MspPostInit+0x10c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d11f      	bne.n	8003d16 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cdc:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003cde:	f043 0302 	orr.w	r3, r3, #2
 8003ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003cf4:	2320      	movs	r3, #32
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d04:	2302      	movs	r3, #2
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	481a      	ldr	r0, [pc, #104]	; (8003d78 <HAL_TIM_MspPostInit+0x110>)
 8003d10:	f005 f896 	bl	8008e40 <HAL_GPIO_Init>
}
 8003d14:	e024      	b.n	8003d60 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <HAL_TIM_MspPostInit+0x114>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d11f      	bne.n	8003d60 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_TIM_MspPostInit+0x104>)
 8003d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003d3e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d50:	2302      	movs	r3, #2
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4807      	ldr	r0, [pc, #28]	; (8003d78 <HAL_TIM_MspPostInit+0x110>)
 8003d5c:	f005 f870 	bl	8008e40 <HAL_GPIO_Init>
}
 8003d60:	bf00      	nop
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	58020000 	.word	0x58020000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	58020400 	.word	0x58020400
 8003d7c:	40000800 	.word	0x40000800

08003d80 <mux_select_pin>:
uint16_t ADC_values[NUM_ADC_CHANNELS] __ATTR_RAM_D2;

const int mux_sel_pin[3] = {MUX_SEL_PIN_A, MUX_SEL_PIN_B, MUX_SEL_PIN_C};

void mux_select_pin(int pin)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++){
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e01f      	b.n	8003dce <mux_select_pin+0x4e>
		if(pin & (1 << i)){
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	fa42 f303 	asr.w	r3, r2, r3
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <mux_select_pin+0x34>
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_SET);
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <mux_select_pin+0x60>)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2201      	movs	r2, #1
 8003daa:	4619      	mov	r1, r3
 8003dac:	480d      	ldr	r0, [pc, #52]	; (8003de4 <mux_select_pin+0x64>)
 8003dae:	f005 fa0f 	bl	80091d0 <HAL_GPIO_WritePin>
 8003db2:	e009      	b.n	8003dc8 <mux_select_pin+0x48>
		}
		else{
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_RESET);
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <mux_select_pin+0x60>)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4808      	ldr	r0, [pc, #32]	; (8003de4 <mux_select_pin+0x64>)
 8003dc4:	f005 fa04 	bl	80091d0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++){
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	dddc      	ble.n	8003d8e <mux_select_pin+0xe>
		}
	}
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	0801955c 	.word	0x0801955c
 8003de4:	58020400 	.word	0x58020400

08003de8 <mux_pull_values>:


void mux_pull_values(float *x, float *y, float *fc, float *vari, float *randomness, int i){
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]

	mux_select_pin(i);
 8003df6:	69f8      	ldr	r0, [r7, #28]
 8003df8:	f7ff ffc2 	bl	8003d80 <mux_select_pin>
	x[i] = ADC_values[6];
 8003dfc:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <mux_pull_values+0xc8>)
 8003dfe:	8999      	ldrh	r1, [r3, #12]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	ee07 1a90 	vmov	s15, r1
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	edc3 7a00 	vstr	s15, [r3]
	y[i] = ADC_values[7];
 8003e14:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e16:	89d9      	ldrh	r1, [r3, #14]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	4413      	add	r3, r2
 8003e20:	ee07 1a90 	vmov	s15, r1
 8003e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e28:	edc3 7a00 	vstr	s15, [r3]
//	fc[i] = ADC_values[i];
//	vari[i] = ADC_values[i + 3];

	fc[0] = ADC_values[0]; fc[1] = ADC_values[1]; fc[2] = ADC_values[2];
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edc3 7a00 	vstr	s15, [r3]
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e40:	885a      	ldrh	r2, [r3, #2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	ee07 2a90 	vmov	s15, r2
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	edc3 7a00 	vstr	s15, [r3]
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e54:	889a      	ldrh	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	ee07 2a90 	vmov	s15, r2
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	edc3 7a00 	vstr	s15, [r3]
	vari[0] = ADC_values[3]; vari[1] = ADC_values[4]; vari[2] = ADC_values[5];
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e68:	88db      	ldrh	r3, [r3, #6]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	edc3 7a00 	vstr	s15, [r3]
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e7a:	891a      	ldrh	r2, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	ee07 2a90 	vmov	s15, r2
 8003e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e88:	edc3 7a00 	vstr	s15, [r3]
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <mux_pull_values+0xc8>)
 8003e8e:	895a      	ldrh	r2, [r3, #10]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	ee07 2a90 	vmov	s15, r2
 8003e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9c:	edc3 7a00 	vstr	s15, [r3]

	randomness = ADC_values[8];
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <mux_pull_values+0xc8>)
 8003ea2:	8a1b      	ldrh	r3, [r3, #16]
 8003ea4:	61bb      	str	r3, [r7, #24]

}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	30000440 	.word	0x30000440

08003eb4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003eba:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <MX_USART6_UART_Init+0x94>)
 8003ebc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003ebe:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ec4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003eda:	2204      	movs	r2, #4
 8003edc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee4:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ef6:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003efc:	4811      	ldr	r0, [pc, #68]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003efe:	f00e fc7d 	bl	80127fc <HAL_UART_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003f08:	f7fe ff36 	bl	8002d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	480d      	ldr	r0, [pc, #52]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003f10:	f00f fc7f 	bl	8013812 <HAL_UARTEx_SetTxFifoThreshold>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003f1a:	f7fe ff2d 	bl	8002d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4808      	ldr	r0, [pc, #32]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003f22:	f00f fcb4 	bl	801388e <HAL_UARTEx_SetRxFifoThreshold>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003f2c:	f7fe ff24 	bl	8002d78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003f30:	4804      	ldr	r0, [pc, #16]	; (8003f44 <MX_USART6_UART_Init+0x90>)
 8003f32:	f00f fc35 	bl	80137a0 <HAL_UARTEx_DisableFifoMode>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003f3c:	f7fe ff1c 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20001c0c 	.word	0x20001c0c
 8003f48:	40011400 	.word	0x40011400

08003f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0bc      	sub	sp, #240	; 0xf0
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f64:	f107 0318 	add.w	r3, r7, #24
 8003f68:	22c0      	movs	r2, #192	; 0xc0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f013 fa1d 	bl	80173ac <memset>
  if(uartHandle->Instance==USART6)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a39      	ldr	r2, [pc, #228]	; (800405c <HAL_UART_MspInit+0x110>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d16a      	bne.n	8004052 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003f7c:	f04f 0201 	mov.w	r2, #1
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f8e:	f107 0318 	add.w	r3, r7, #24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f008 faa6 	bl	800c4e4 <HAL_RCCEx_PeriphCLKConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003f9e:	f7fe feeb 	bl	8002d78 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fc6:	4a26      	ldr	r2, [pc, #152]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fee:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_UART_MspInit+0x114>)
 8003ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004014:	2307      	movs	r3, #7
 8004016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800401e:	4619      	mov	r1, r3
 8004020:	4810      	ldr	r0, [pc, #64]	; (8004064 <HAL_UART_MspInit+0x118>)
 8004022:	f004 ff0d 	bl	8008e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800402a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004040:	2307      	movs	r3, #7
 8004042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004046:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800404a:	4619      	mov	r1, r3
 800404c:	4806      	ldr	r0, [pc, #24]	; (8004068 <HAL_UART_MspInit+0x11c>)
 800404e:	f004 fef7 	bl	8008e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004052:	bf00      	nop
 8004054:	37f0      	adds	r7, #240	; 0xf0
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40011400 	.word	0x40011400
 8004060:	58024400 	.word	0x58024400
 8004064:	58020800 	.word	0x58020800
 8004068:	58021800 	.word	0x58021800

0800406c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004070:	2201      	movs	r2, #1
 8004072:	490f      	ldr	r1, [pc, #60]	; (80040b0 <MX_USB_HOST_Init+0x44>)
 8004074:	480f      	ldr	r0, [pc, #60]	; (80040b4 <MX_USB_HOST_Init+0x48>)
 8004076:	f011 fb73 	bl	8015760 <USBH_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8004080:	f7fe fe7a 	bl	8002d78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <MX_USB_HOST_Init+0x4c>)
 8004086:	480b      	ldr	r0, [pc, #44]	; (80040b4 <MX_USB_HOST_Init+0x48>)
 8004088:	f011 fc19 	bl	80158be <USBH_RegisterClass>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8004092:	f7fe fe71 	bl	8002d78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004096:	4807      	ldr	r0, [pc, #28]	; (80040b4 <MX_USB_HOST_Init+0x48>)
 8004098:	f011 fc9e 	bl	80159d8 <USBH_Start>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80040a2:	f7fe fe69 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80040a6:	f007 fa27 	bl	800b4f8 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	30000460 	.word	0x30000460
 80040b8:	20000014 	.word	0x20000014

080040bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80040c0:	4803      	ldr	r0, [pc, #12]	; (80040d0 <MX_USB_HOST_Process+0x14>)
 80040c2:	f011 fcb5 	bl	8015a30 <USBH_Process>
  MIDI_Application();
 80040c6:	f7fc fe3d 	bl	8000d44 <MIDI_Application>
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	30000460 	.word	0x30000460

080040d4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d839      	bhi.n	800415c <USBH_UserProcess+0x88>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <USBH_UserProcess+0x1c>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	08004147 	.word	0x08004147
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004105 	.word	0x08004105
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <USBH_UserProcess+0x94>)
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 800410a:	4818      	ldr	r0, [pc, #96]	; (800416c <USBH_UserProcess+0x98>)
 800410c:	f011 fc74 	bl	80159f8 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e007      	b.n	8004126 <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <USBH_UserProcess+0x9c>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b3f      	cmp	r3, #63	; 0x3f
 800412a:	ddf4      	ble.n	8004116 <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800412c:	2201      	movs	r2, #1
 800412e:	4911      	ldr	r1, [pc, #68]	; (8004174 <USBH_UserProcess+0xa0>)
 8004130:	480e      	ldr	r0, [pc, #56]	; (800416c <USBH_UserProcess+0x98>)
 8004132:	f011 fb15 	bl	8015760 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 8004136:	4910      	ldr	r1, [pc, #64]	; (8004178 <USBH_UserProcess+0xa4>)
 8004138:	480c      	ldr	r0, [pc, #48]	; (800416c <USBH_UserProcess+0x98>)
 800413a:	f011 fbc0 	bl	80158be <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 800413e:	480b      	ldr	r0, [pc, #44]	; (800416c <USBH_UserProcess+0x98>)
 8004140:	f011 fc4a 	bl	80159d8 <USBH_Start>
	break;
 8004144:	e00b      	b.n	800415e <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <USBH_UserProcess+0x94>)
 8004148:	2202      	movs	r2, #2
 800414a:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <USBH_UserProcess+0xa8>)
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
  break;
 8004152:	e004      	b.n	800415e <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <USBH_UserProcess+0x94>)
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
  break;
 800415a:	e000      	b.n	800415e <USBH_UserProcess+0x8a>

  default:
  break;
 800415c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20001ca0 	.word	0x20001ca0
 800416c:	30000460 	.word	0x30000460
 8004170:	30000000 	.word	0x30000000
 8004174:	080040d5 	.word	0x080040d5
 8004178:	20000014 	.word	0x20000014
 800417c:	20000000 	.word	0x20000000

08004180 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af04      	add	r7, sp, #16
 8004186:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8004188:	2302      	movs	r3, #2
 800418a:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8004190:	23ff      	movs	r3, #255	; 0xff
 8004192:	2203      	movs	r2, #3
 8004194:	2101      	movs	r1, #1
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f011 fbd8 	bl	801594c <USBH_FindInterface>
 800419c:	4603      	mov	r3, r0
 800419e:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 80041a0:	7bbb      	ldrb	r3, [r7, #14]
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d102      	bne.n	80041ac <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 80041a6:	2302      	movs	r3, #2
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e0f2      	b.n	8004392 <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 80041ac:	7bbb      	ldrb	r3, [r7, #14]
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f011 fbaf 	bl	8015914 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80041bc:	201c      	movs	r0, #28
 80041be:	f013 f839 	bl	8017234 <malloc>
 80041c2:	4603      	mov	r3, r0
 80041c4:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80041d6:	4619      	mov	r1, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	231a      	movs	r3, #26
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	da1c      	bge.n	8004228 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80041f4:	4619      	mov	r1, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	231a      	movs	r3, #26
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004210:	4619      	mov	r1, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	231a      	movs	r3, #26
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	811a      	strh	r2, [r3, #8]
 8004226:	e01b      	b.n	8004260 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800422e:	4619      	mov	r1, r3
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	231a      	movs	r3, #26
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800424a:	4619      	mov	r1, r3
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	231a      	movs	r3, #26
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004266:	4619      	mov	r1, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	231a      	movs	r3, #26
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b25b      	sxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	da1c      	bge.n	80042b8 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004284:	4619      	mov	r1, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	231a      	movs	r3, #26
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80042a0:	4619      	mov	r1, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	231a      	movs	r3, #26
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	811a      	strh	r2, [r3, #8]
 80042b6:	e01b      	b.n	80042f0 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80042be:	4619      	mov	r1, r3
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	231a      	movs	r3, #26
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80042da:	4619      	mov	r1, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	231a      	movs	r3, #26
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	78db      	ldrb	r3, [r3, #3]
 80042f4:	4619      	mov	r1, r3
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f012 fed9 	bl	80170ae <USBH_AllocPipe>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	791b      	ldrb	r3, [r3, #4]
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f012 fecf 	bl	80170ae <USBH_AllocPipe>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	7899      	ldrb	r1, [r3, #2]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	78d8      	ldrb	r0, [r3, #3]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	88d2      	ldrh	r2, [r2, #6]
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	2202      	movs	r2, #2
 8004334:	9201      	str	r2, [sp, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4623      	mov	r3, r4
 800433a:	4602      	mov	r2, r0
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f012 fe87 	bl	8017050 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	7859      	ldrb	r1, [r3, #1]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	7918      	ldrb	r0, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	8912      	ldrh	r2, [r2, #8]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	2202      	movs	r2, #2
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4623      	mov	r3, r4
 8004364:	4602      	mov	r2, r0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f012 fe72 	bl	8017050 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2200      	movs	r2, #0
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fbf6 	bl	8004b6c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	789b      	ldrb	r3, [r3, #2]
 8004384:	2200      	movs	r2, #0
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fbef 	bl	8004b6c <USBH_LL_SetToggle>
		status = USBH_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	789b      	ldrb	r3, [r3, #2]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	789b      	ldrb	r3, [r3, #2]
 80043ba:	4619      	mov	r1, r3
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f012 fe66 	bl	801708e <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	789b      	ldrb	r3, [r3, #2]
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f012 fe92 	bl	80170f2 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f012 fe53 	bl	801708e <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	785b      	ldrb	r3, [r3, #1]
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f012 fe7f 	bl	80170f2 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4618      	mov	r0, r3
 8004410:	f012 ff18 	bl	8017244 <free>
		phost->pActiveClass->pData = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800441a:	2200      	movs	r2, #0
 800441c:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8004436:	2102      	movs	r1, #2
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3

	return USBH_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b0b      	cmp	r3, #11
 8004460:	d10e      	bne.n	8004480 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f012 fe0d 	bl	801708e <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	789b      	ldrb	r3, [r3, #2]
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f012 fe07 	bl	801708e <USBH_ClosePipe>
  }
  return USBH_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d012      	beq.n	80044d2 <USBH_MIDI_Process+0x48>
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	dc1d      	bgt.n	80044ec <USBH_MIDI_Process+0x62>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <USBH_MIDI_Process+0x30>
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80044b8:	e018      	b.n	80044ec <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]
		break;
 80044be:	e018      	b.n	80044f2 <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f851 	bl	8004568 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8c0 	bl	800464c <MIDI_ProcessReception>
		status = USBH_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
		break;
 80044d0:	e00f      	b.n	80044f2 <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 80044d2:	2100      	movs	r1, #0
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f012 f837 	bl	8016548 <USBH_ClrFeature>
 80044da:	4603      	mov	r3, r0
 80044dc:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
		break;
 80044ea:	e001      	b.n	80044f0 <USBH_MIDI_Process+0x66>
		break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <USBH_MIDI_Process+0x68>
		break;
 80044f0:	bf00      	nop

	}

	return status;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	4613      	mov	r3, r2
 800451e:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <USBH_MIDI_Receive+0x2c>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d10d      	bne.n	800455a <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2203      	movs	r2, #3
 8004554:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800457a:	2300      	movs	r3, #0
 800457c:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	7e1b      	ldrb	r3, [r3, #24]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d002      	beq.n	800458c <MIDI_ProcessTransmission+0x24>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d021      	beq.n	80045ce <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 800458a:	e05a      	b.n	8004642 <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8a9a      	ldrh	r2, [r3, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88db      	ldrh	r3, [r3, #6]
 8004594:	429a      	cmp	r2, r3
 8004596:	d90b      	bls.n	80045b0 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68d9      	ldr	r1, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	88da      	ldrh	r2, [r3, #6]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	789b      	ldrb	r3, [r3, #2]
 80045a4:	2001      	movs	r0, #1
 80045a6:	9000      	str	r0, [sp, #0]
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f012 fd0e 	bl	8016fca <USBH_BulkSendData>
 80045ae:	e00a      	b.n	80045c6 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8a9a      	ldrh	r2, [r3, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	789b      	ldrb	r3, [r3, #2]
 80045bc:	2001      	movs	r0, #1
 80045be:	9000      	str	r0, [sp, #0]
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f012 fd02 	bl	8016fca <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2202      	movs	r2, #2
 80045ca:	761a      	strb	r2, [r3, #24]
		break;
 80045cc:	e039      	b.n	8004642 <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	789b      	ldrb	r3, [r3, #2]
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa9f 	bl	8004b18 <USBH_LL_GetURBState>
 80045da:	4603      	mov	r3, r0
 80045dc:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 80045de:	7afb      	ldrb	r3, [r7, #11]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d127      	bne.n	8004634 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8a9a      	ldrh	r2, [r3, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88db      	ldrh	r3, [r3, #6]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d90f      	bls.n	8004610 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8a9a      	ldrh	r2, [r3, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88db      	ldrh	r3, [r3, #6]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	88d2      	ldrh	r2, [r2, #6]
 8004608:	441a      	add	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	e002      	b.n	8004616 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8a9b      	ldrh	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	761a      	strb	r2, [r3, #24]
		break;
 8004624:	e00c      	b.n	8004640 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f86d 	bl	800470c <USBH_MIDI_TransmitCallback>
		break;
 8004632:	e005      	b.n	8004640 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d102      	bne.n	8004640 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	761a      	strb	r2, [r3, #24]
		break;
 8004640:	bf00      	nop
	}
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800465e:	2300      	movs	r3, #0
 8004660:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	7e5b      	ldrb	r3, [r3, #25]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d002      	beq.n	8004670 <MIDI_ProcessReception+0x24>
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00d      	beq.n	800468a <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 800466e:	e047      	b.n	8004700 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2204      	movs	r2, #4
 8004674:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	891a      	ldrh	r2, [r3, #8]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f012 fcc6 	bl	8017014 <USBH_BulkReceiveData>
		break;
 8004688:	e03a      	b.n	8004700 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa41 	bl	8004b18 <USBH_LL_GetURBState>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d12e      	bne.n	80046fe <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <MIDI_ProcessReception+0xbc>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f9a1 	bl	80049f4 <USBH_LL_GetLastXferSize>
 80046b2:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	8adb      	ldrh	r3, [r3, #22]
 80046b8:	461a      	mov	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4293      	cmp	r3, r2
 80046be:	d017      	beq.n	80046f0 <MIDI_ProcessReception+0xa4>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	891b      	ldrh	r3, [r3, #8]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d911      	bls.n	80046f0 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	8ada      	ldrh	r2, [r3, #22]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	441a      	add	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2203      	movs	r2, #3
 80046ec:	765a      	strb	r2, [r3, #25]
		break;
 80046ee:	e006      	b.n	80046fe <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2200      	movs	r2, #0
 80046f4:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fcc3 	bl	8001084 <USBH_MIDI_ReceiveCallback>
		break;
 80046fe:	bf00      	nop
	}
}
 8004700:	bf00      	nop
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20001ca4 	.word	0x20001ca4

0800470c <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <HAL_HCD_MspInit+0xb8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d146      	bne.n	80047d0 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 8004744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004748:	4a24      	ldr	r2, [pc, #144]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 8004754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004760:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476e:	2303      	movs	r3, #3
 8004770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004772:	230a      	movs	r3, #10
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4619      	mov	r1, r3
 800477c:	4818      	ldr	r0, [pc, #96]	; (80047e0 <HAL_HCD_MspInit+0xc0>)
 800477e:	f004 fb5f 	bl	8008e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 8004784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 800478a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800478e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_HCD_MspInit+0xbc>)
 8004794:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2106      	movs	r1, #6
 80047a4:	2062      	movs	r0, #98	; 0x62
 80047a6:	f002 f9b6 	bl	8006b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80047aa:	2062      	movs	r0, #98	; 0x62
 80047ac:	f002 f9cd 	bl	8006b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2106      	movs	r1, #6
 80047b4:	2063      	movs	r0, #99	; 0x63
 80047b6:	f002 f9ae 	bl	8006b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80047ba:	2063      	movs	r0, #99	; 0x63
 80047bc:	f002 f9c5 	bl	8006b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80047c0:	2200      	movs	r2, #0
 80047c2:	2100      	movs	r1, #0
 80047c4:	2065      	movs	r0, #101	; 0x65
 80047c6:	f002 f9a6 	bl	8006b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80047ca:	2065      	movs	r0, #101	; 0x65
 80047cc:	f002 f9bd 	bl	8006b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80047d0:	bf00      	nop
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40080000 	.word	0x40080000
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58020000 	.word	0x58020000

080047e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80047f2:	4618      	mov	r0, r3
 80047f4:	f011 fcfd 	bl	80161f2 <USBH_LL_IncTimer>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800480e:	4618      	mov	r0, r3
 8004810:	f011 fd35 	bl	801627e <USBH_LL_Connect>
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800482a:	4618      	mov	r0, r3
 800482c:	f011 fd3e 	bl	80162ac <USBH_LL_Disconnect>
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
 8004844:	4613      	mov	r3, r2
 8004846:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004862:	4618      	mov	r0, r3
 8004864:	f011 fcef 	bl	8016246 <USBH_LL_PortEnabled>
} 
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800487e:	4618      	mov	r0, r3
 8004880:	f011 fcef 	bl	8016262 <USBH_LL_PortDisabled>
} 
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d129      	bne.n	80048f2 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <USBH_LL_Init+0x70>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <USBH_LL_Init+0x70>)
 80048aa:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <USBH_LL_Init+0x70>)
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <USBH_LL_Init+0x74>)
 80048b2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80048b4:	4b11      	ldr	r3, [pc, #68]	; (80048fc <USBH_LL_Init+0x70>)
 80048b6:	2210      	movs	r2, #16
 80048b8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <USBH_LL_Init+0x70>)
 80048bc:	2201      	movs	r2, #1
 80048be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 80048c0:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <USBH_LL_Init+0x70>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <USBH_LL_Init+0x70>)
 80048c8:	2202      	movs	r2, #2
 80048ca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <USBH_LL_Init+0x70>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80048d2:	480a      	ldr	r0, [pc, #40]	; (80048fc <USBH_LL_Init+0x70>)
 80048d4:	f004 fc95 	bl	8009202 <HAL_HCD_Init>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 80048de:	f7fe fa4b 	bl	8002d78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80048e2:	4806      	ldr	r0, [pc, #24]	; (80048fc <USBH_LL_Init+0x70>)
 80048e4:	f005 f87d 	bl	80099e2 <HAL_HCD_GetCurrentFrame>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f011 fc71 	bl	80161d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20001ca8 	.word	0x20001ca8
 8004900:	40080000 	.word	0x40080000

08004904 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800491a:	4618      	mov	r0, r3
 800491c:	f004 ffeb 	bl	80098f6 <HAL_HCD_Start>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f95c 	bl	8004be4 <USBH_Get_USB_Status>
 800492c:	4603      	mov	r3, r0
 800492e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004930:	7bbb      	ldrb	r3, [r7, #14]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004950:	4618      	mov	r0, r3
 8004952:	f004 fff3 	bl	800993c <HAL_HCD_Stop>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f941 	bl	8004be4 <USBH_Get_USB_Status>
 8004962:	4603      	mov	r3, r0
 8004964:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004966:	7bbb      	ldrb	r3, [r7, #14]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004982:	4618      	mov	r0, r3
 8004984:	f005 f83b 	bl	80099fe <HAL_HCD_GetCurrentSpeed>
 8004988:	4603      	mov	r3, r0
 800498a:	2b02      	cmp	r3, #2
 800498c:	d00c      	beq.n	80049a8 <USBH_LL_GetSpeed+0x38>
 800498e:	2b02      	cmp	r3, #2
 8004990:	d80d      	bhi.n	80049ae <USBH_LL_GetSpeed+0x3e>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <USBH_LL_GetSpeed+0x2c>
 8004996:	2b01      	cmp	r3, #1
 8004998:	d003      	beq.n	80049a2 <USBH_LL_GetSpeed+0x32>
 800499a:	e008      	b.n	80049ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]
    break;
 80049a0:	e008      	b.n	80049b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
    break;
 80049a6:	e005      	b.n	80049b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80049a8:	2302      	movs	r3, #2
 80049aa:	73fb      	strb	r3, [r7, #15]
    break;
 80049ac:	e002      	b.n	80049b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
    break;
 80049b2:	bf00      	nop
  }
  return  speed;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f004 ffce 	bl	8009976 <HAL_HCD_ResetPort>
 80049da:	4603      	mov	r3, r0
 80049dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f8ff 	bl	8004be4 <USBH_Get_USB_Status>
 80049e6:	4603      	mov	r3, r0
 80049e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 ffd5 	bl	80099ba <HAL_HCD_HC_GetXferCount>
 8004a10:	4603      	mov	r3, r0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004a1a:	b590      	push	{r4, r7, lr}
 8004a1c:	b089      	sub	sp, #36	; 0x24
 8004a1e:	af04      	add	r7, sp, #16
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	461a      	mov	r2, r3
 8004a28:	4603      	mov	r3, r0
 8004a2a:	70fb      	strb	r3, [r7, #3]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70bb      	strb	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004a42:	787c      	ldrb	r4, [r7, #1]
 8004a44:	78ba      	ldrb	r2, [r7, #2]
 8004a46:	78f9      	ldrb	r1, [r7, #3]
 8004a48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a4a:	9302      	str	r3, [sp, #8]
 8004a4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4623      	mov	r3, r4
 8004a5a:	f004 fc34 	bl	80092c6 <HAL_HCD_HC_Init>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f8bd 	bl	8004be4 <USBH_Get_USB_Status>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}

08004a78 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fca4 	bl	80093e4 <HAL_HCD_HC_Halt>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f89e 	bl	8004be4 <USBH_Get_USB_Status>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004ab6:	b590      	push	{r4, r7, lr}
 8004ab8:	b089      	sub	sp, #36	; 0x24
 8004aba:	af04      	add	r7, sp, #16
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	4608      	mov	r0, r1
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	70fb      	strb	r3, [r7, #3]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70bb      	strb	r3, [r7, #2]
 8004acc:	4613      	mov	r3, r2
 8004ace:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004ade:	787c      	ldrb	r4, [r7, #1]
 8004ae0:	78ba      	ldrb	r2, [r7, #2]
 8004ae2:	78f9      	ldrb	r1, [r7, #3]
 8004ae4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4623      	mov	r3, r4
 8004afa:	f004 fc97 	bl	800942c <HAL_HCD_HC_SubmitRequest>
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f86d 	bl	8004be4 <USBH_Get_USB_Status>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}

08004b18 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 ff2f 	bl	8009992 <HAL_HCD_HC_GetURBState>
 8004b34:	4603      	mov	r3, r0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d103      	bne.n	8004b5c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f870 	bl	8004c3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004b5c:	20c8      	movs	r0, #200	; 0xc8
 8004b5e:	f000 f945 	bl	8004dec <HAL_Delay>
  return USBH_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b82:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	333b      	adds	r3, #59	; 0x3b
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3354      	adds	r3, #84	; 0x54
 8004ba6:	78ba      	ldrb	r2, [r7, #2]
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e008      	b.n	8004bbe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3355      	adds	r3, #85	; 0x55
 8004bba:	78ba      	ldrb	r2, [r7, #2]
 8004bbc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f909 	bl	8004dec <HAL_Delay>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d817      	bhi.n	8004c28 <USBH_Get_USB_Status+0x44>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <USBH_Get_USB_Status+0x1c>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c17 	.word	0x08004c17
 8004c08:	08004c1d 	.word	0x08004c1d
 8004c0c:	08004c23 	.word	0x08004c23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
    break;
 8004c14:	e00b      	b.n	8004c2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004c16:	2302      	movs	r3, #2
 8004c18:	73fb      	strb	r3, [r7, #15]
    break;
 8004c1a:	e008      	b.n	8004c2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8004c20:	e005      	b.n	8004c2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004c22:	2302      	movs	r3, #2
 8004c24:	73fb      	strb	r3, [r7, #15]
    break;
 8004c26:	e002      	b.n	8004c2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8004c2c:	bf00      	nop
  }
  return usb_status;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e001      	b.n	8004c5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c62:	4803      	ldr	r0, [pc, #12]	; (8004c70 <MX_DriverVbusFS+0x34>)
 8004c64:	f004 fab4 	bl	80091d0 <HAL_GPIO_WritePin>
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	58020400 	.word	0x58020400

08004c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c7a:	e003      	b.n	8004c84 <LoopCopyDataInit>

08004c7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c82:	3104      	adds	r1, #4

08004c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c84:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c8c:	d3f6      	bcc.n	8004c7c <CopyDataInit>
  ldr  r2, =_sbss
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	; (8004cbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c90:	e002      	b.n	8004c98 <LoopFillZerobss>

08004c92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c94:	f842 3b04 	str.w	r3, [r2], #4

08004c98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c98:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c9c:	d3f9      	bcc.n	8004c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c9e:	f7fe fd43 	bl	8003728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ca2:	f012 fba1 	bl	80173e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ca6:	f7fd fde1 	bl	800286c <main>
  bx  lr    
 8004caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004cb0:	080195a8 	.word	0x080195a8
  ldr  r0, =_sdata
 8004cb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004cb8:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004cbc:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8004cc0:	20002104 	.word	0x20002104

08004cc4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cc4:	e7fe      	b.n	8004cc4 <ADC3_IRQHandler>
	...

08004cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cce:	2003      	movs	r0, #3
 8004cd0:	f001 ff16 	bl	8006b00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cd4:	f007 fa30 	bl	800c138 <HAL_RCC_GetSysClockFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <HAL_Init+0x68>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	4913      	ldr	r1, [pc, #76]	; (8004d34 <HAL_Init+0x6c>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_Init+0x68>)
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	4a0e      	ldr	r2, [pc, #56]	; (8004d34 <HAL_Init+0x6c>)
 8004cfc:	5cd3      	ldrb	r3, [r2, r3]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <HAL_Init+0x70>)
 8004d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <HAL_Init+0x74>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d12:	2000      	movs	r0, #0
 8004d14:	f000 f814 	bl	8004d40 <HAL_InitTick>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e002      	b.n	8004d28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d22:	f7fe fc47 	bl	80035b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	58024400 	.word	0x58024400
 8004d34:	0801954c 	.word	0x0801954c
 8004d38:	20000010 	.word	0x20000010
 8004d3c:	2000000c 	.word	0x2000000c

08004d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d48:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <HAL_InitTick+0x60>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e021      	b.n	8004d98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_InitTick+0x64>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <HAL_InitTick+0x60>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fefb 	bl	8006b66 <HAL_SYSTICK_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00e      	b.n	8004d98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b0f      	cmp	r3, #15
 8004d7e:	d80a      	bhi.n	8004d96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d80:	2200      	movs	r2, #0
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d88:	f001 fec5 	bl	8006b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d8c:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <HAL_InitTick+0x68>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000038 	.word	0x20000038
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	20000034 	.word	0x20000034

08004dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_IncTick+0x20>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_IncTick+0x24>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4413      	add	r3, r2
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_IncTick+0x24>)
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000038 	.word	0x20000038
 8004dd0:	20001fac 	.word	0x20001fac

08004dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_GetTick+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20001fac 	.word	0x20001fac

08004dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7ff ffee 	bl	8004dd4 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e04:	d005      	beq.n	8004e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_Delay+0x44>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e12:	bf00      	nop
 8004e14:	f7ff ffde 	bl	8004dd4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d8f7      	bhi.n	8004e14 <HAL_Delay+0x28>
  {
  }
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000038 	.word	0x20000038

08004e34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e38:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <HAL_GetREVID+0x14>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	5c001000 	.word	0x5c001000

08004e4c <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e5c:	4904      	ldr	r1, [pc, #16]	; (8004e70 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	52004000 	.word	0x52004000

08004e74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3360      	adds	r3, #96	; 0x60
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	611a      	str	r2, [r3, #16]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b087      	sub	sp, #28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3360      	adds	r3, #96	; 0x60
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	601a      	str	r2, [r3, #0]
  }
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b087      	sub	sp, #28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3330      	adds	r3, #48	; 0x30
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	4413      	add	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	211f      	movs	r1, #31
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	401a      	ands	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	0e9b      	lsrs	r3, r3, #26
 8004fe2:	f003 011f 	and.w	r1, r3, #31
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 031f 	and.w	r3, r3, #31
 8004fec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f023 0203 	bic.w	r2, r3, #3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005034:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3314      	adds	r3, #20
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	0e5b      	lsrs	r3, r3, #25
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	4413      	add	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2107      	movs	r1, #7
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	401a      	ands	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	0d1b      	lsrs	r3, r3, #20
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	fa01 f303 	lsl.w	r3, r1, r3
 8005092:	431a      	orrs	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050bc:	43db      	mvns	r3, r3
 80050be:	401a      	ands	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0318 	and.w	r3, r3, #24
 80050c6:	4908      	ldr	r1, [pc, #32]	; (80050e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80050c8:	40d9      	lsrs	r1, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	400b      	ands	r3, r1
 80050ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	000fffff 	.word	0x000fffff

080050ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 031f 	and.w	r3, r3, #31
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005132:	4013      	ands	r3, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6093      	str	r3, [r2, #8]
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	5fffffc0 	.word	0x5fffffc0

08005148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515c:	d101      	bne.n	8005162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <LL_ADC_EnableInternalRegulator+0x24>)
 800517e:	4013      	ands	r3, r2
 8005180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	6fffffc0 	.word	0x6fffffc0

08005198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ac:	d101      	bne.n	80051b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <LL_ADC_Enable+0x24>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	7fffffc0 	.word	0x7fffffc0

080051e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <LL_ADC_IsEnabled+0x18>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <LL_ADC_IsEnabled+0x1a>
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <LL_ADC_REG_StartConversion+0x24>)
 800521e:	4013      	ands	r3, r2
 8005220:	f043 0204 	orr.w	r2, r3, #4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	7fffffc0 	.word	0x7fffffc0

08005238 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d101      	bne.n	8005250 <LL_ADC_REG_IsConversionOngoing+0x18>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b08      	cmp	r3, #8
 8005270:	d101      	bne.n	8005276 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005284:	b590      	push	{r4, r7, lr}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005290:	2300      	movs	r3, #0
 8005292:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e18f      	b.n	80055be <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fc f8a9 	bl	8001404 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff3f 	bl	8005148 <LL_ADC_IsDeepPowerDownEnabled>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff25 	bl	8005124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff5a 	bl	8005198 <LL_ADC_IsInternalRegulatorEnabled>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d114      	bne.n	8005314 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff3e 	bl	8005170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052f4:	4b87      	ldr	r3, [pc, #540]	; (8005514 <HAL_ADC_Init+0x290>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	4a87      	ldr	r2, [pc, #540]	; (8005518 <HAL_ADC_Init+0x294>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	3301      	adds	r3, #1
 8005304:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005306:	e002      	b.n	800530e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3b01      	subs	r3, #1
 800530c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f9      	bne.n	8005308 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff3d 	bl	8005198 <LL_ADC_IsInternalRegulatorEnabled>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10d      	bne.n	8005340 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	f043 0201 	orr.w	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff ff77 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 800534a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 8129 	bne.w	80055ac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8125 	bne.w	80055ac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800536a:	f043 0202 	orr.w	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff ff36 	bl	80051e8 <LL_ADC_IsEnabled>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d136      	bne.n	80053f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a65      	ldr	r2, [pc, #404]	; (800551c <HAL_ADC_Init+0x298>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_ADC_Init+0x112>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a63      	ldr	r2, [pc, #396]	; (8005520 <HAL_ADC_Init+0x29c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10e      	bne.n	80053b4 <HAL_ADC_Init+0x130>
 8005396:	4861      	ldr	r0, [pc, #388]	; (800551c <HAL_ADC_Init+0x298>)
 8005398:	f7ff ff26 	bl	80051e8 <LL_ADC_IsEnabled>
 800539c:	4604      	mov	r4, r0
 800539e:	4860      	ldr	r0, [pc, #384]	; (8005520 <HAL_ADC_Init+0x29c>)
 80053a0:	f7ff ff22 	bl	80051e8 <LL_ADC_IsEnabled>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4323      	orrs	r3, r4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e008      	b.n	80053c6 <HAL_ADC_Init+0x142>
 80053b4:	485b      	ldr	r0, [pc, #364]	; (8005524 <HAL_ADC_Init+0x2a0>)
 80053b6:	f7ff ff17 	bl	80051e8 <LL_ADC_IsEnabled>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a53      	ldr	r2, [pc, #332]	; (800551c <HAL_ADC_Init+0x298>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_ADC_Init+0x15a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a51      	ldr	r2, [pc, #324]	; (8005520 <HAL_ADC_Init+0x29c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d101      	bne.n	80053e2 <HAL_ADC_Init+0x15e>
 80053de:	4a52      	ldr	r2, [pc, #328]	; (8005528 <HAL_ADC_Init+0x2a4>)
 80053e0:	e000      	b.n	80053e4 <HAL_ADC_Init+0x160>
 80053e2:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_ADC_Init+0x2a8>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7ff fd42 	bl	8004e74 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80053f0:	f7ff fd20 	bl	8004e34 <HAL_GetREVID>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d914      	bls.n	8005428 <HAL_ADC_Init+0x1a4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d110      	bne.n	8005428 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7d5b      	ldrb	r3, [r3, #21]
 800540a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005410:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005416:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7f1b      	ldrb	r3, [r3, #28]
 800541c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800541e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005420:	f043 030c 	orr.w	r3, r3, #12
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e00d      	b.n	8005444 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7d5b      	ldrb	r3, [r3, #21]
 800542c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005432:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005438:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7f1b      	ldrb	r3, [r3, #28]
 800543e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005440:	4313      	orrs	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7f1b      	ldrb	r3, [r3, #28]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d106      	bne.n	800545a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	3b01      	subs	r3, #1
 8005452:	045b      	lsls	r3, r3, #17
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_ADC_Init+0x2ac>)
 800547e:	4013      	ands	r3, r2
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	430b      	orrs	r3, r1
 8005488:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fed2 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 8005494:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fedf 	bl	800525e <LL_ADC_INJ_IsConversionOngoing>
 80054a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d15f      	bne.n	8005568 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d15c      	bne.n	8005568 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7d1b      	ldrb	r3, [r3, #20]
 80054b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <HAL_ADC_Init+0x2b0>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	430b      	orrs	r3, r1
 80054ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d130      	bne.n	800553c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_ADC_Init+0x2b4>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054ee:	3a01      	subs	r2, #1
 80054f0:	0411      	lsls	r1, r2, #16
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054f6:	4311      	orrs	r1, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054fc:	4311      	orrs	r1, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005502:	430a      	orrs	r2, r1
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	611a      	str	r2, [r3, #16]
 8005510:	e01c      	b.n	800554c <HAL_ADC_Init+0x2c8>
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c
 8005518:	053e2d63 	.word	0x053e2d63
 800551c:	40022000 	.word	0x40022000
 8005520:	40022100 	.word	0x40022100
 8005524:	58026000 	.word	0x58026000
 8005528:	40022300 	.word	0x40022300
 800552c:	58026300 	.word	0x58026300
 8005530:	fff0c003 	.word	0xfff0c003
 8005534:	ffffbffc 	.word	0xffffbffc
 8005538:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 ffba 	bl	80064dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10c      	bne.n	800558a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f023 010f 	bic.w	r1, r3, #15
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	1e5a      	subs	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
 8005588:	e007      	b.n	800559a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 020f 	bic.w	r2, r2, #15
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
 80055aa:	e007      	b.n	80055bc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f043 0210 	orr.w	r2, r3, #16
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3724      	adds	r7, #36	; 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	bf00      	nop

080055c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a55      	ldr	r2, [pc, #340]	; (8005730 <HAL_ADC_Start_DMA+0x168>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_ADC_Start_DMA+0x20>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a54      	ldr	r2, [pc, #336]	; (8005734 <HAL_ADC_Start_DMA+0x16c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_ADC_Start_DMA+0x24>
 80055e8:	4b53      	ldr	r3, [pc, #332]	; (8005738 <HAL_ADC_Start_DMA+0x170>)
 80055ea:	e000      	b.n	80055ee <HAL_ADC_Start_DMA+0x26>
 80055ec:	4b53      	ldr	r3, [pc, #332]	; (800573c <HAL_ADC_Start_DMA+0x174>)
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fd7c 	bl	80050ec <LL_ADC_GetMultimode>
 80055f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fe1c 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 808c 	bne.w	8005720 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_ADC_Start_DMA+0x4e>
 8005612:	2302      	movs	r3, #2
 8005614:	e087      	b.n	8005726 <HAL_ADC_Start_DMA+0x15e>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d002      	beq.n	8005630 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b09      	cmp	r3, #9
 800562e:	d170      	bne.n	8005712 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fe35 	bl	80062a0 <ADC_Enable>
 8005636:	4603      	mov	r3, r0
 8005638:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d163      	bne.n	8005708 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <HAL_ADC_Start_DMA+0x178>)
 8005646:	4013      	ands	r3, r2
 8005648:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a37      	ldr	r2, [pc, #220]	; (8005734 <HAL_ADC_Start_DMA+0x16c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d002      	beq.n	8005660 <HAL_ADC_Start_DMA+0x98>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	e000      	b.n	8005662 <HAL_ADC_Start_DMA+0x9a>
 8005660:	4b33      	ldr	r3, [pc, #204]	; (8005730 <HAL_ADC_Start_DMA+0x168>)
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	4293      	cmp	r3, r2
 8005668:	d002      	beq.n	8005670 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f023 0206 	bic.w	r2, r3, #6
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	659a      	str	r2, [r3, #88]	; 0x58
 8005694:	e002      	b.n	800569c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a0:	4a28      	ldr	r2, [pc, #160]	; (8005744 <HAL_ADC_Start_DMA+0x17c>)
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a8:	4a27      	ldr	r2, [pc, #156]	; (8005748 <HAL_ADC_Start_DMA+0x180>)
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	4a26      	ldr	r2, [pc, #152]	; (800574c <HAL_ADC_Start_DMA+0x184>)
 80056b2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	221c      	movs	r2, #28
 80056ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0210 	orr.w	r2, r2, #16
 80056d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7ff fc8f 	bl	8005002 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	4619      	mov	r1, r3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f001 fe1c 	bl	8007330 <HAL_DMA_Start_IT>
 80056f8:	4603      	mov	r3, r0
 80056fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fd85 	bl	8005210 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005706:	e00d      	b.n	8005724 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005710:	e008      	b.n	8005724 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800571e:	e001      	b.n	8005724 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005720:	2302      	movs	r3, #2
 8005722:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40022000 	.word	0x40022000
 8005734:	40022100 	.word	0x40022100
 8005738:	40022300 	.word	0x40022300
 800573c:	58026300 	.word	0x58026300
 8005740:	fffff0fe 	.word	0xfffff0fe
 8005744:	080063b5 	.word	0x080063b5
 8005748:	0800648d 	.word	0x0800648d
 800574c:	080064a9 	.word	0x080064a9

08005750 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a87      	ldr	r2, [pc, #540]	; (8005990 <HAL_ADC_IRQHandler+0x240>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_ADC_IRQHandler+0x30>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a86      	ldr	r2, [pc, #536]	; (8005994 <HAL_ADC_IRQHandler+0x244>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_ADC_IRQHandler+0x34>
 8005780:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_ADC_IRQHandler+0x248>)
 8005782:	e000      	b.n	8005786 <HAL_ADC_IRQHandler+0x36>
 8005784:	4b85      	ldr	r3, [pc, #532]	; (800599c <HAL_ADC_IRQHandler+0x24c>)
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fcb0 	bl	80050ec <LL_ADC_GetMultimode>
 800578c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_ADC_IRQHandler+0x78>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d012      	beq.n	80057c8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f003 0310 	and.w	r3, r3, #16
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 ffe8 	bl	8006790 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2202      	movs	r2, #2
 80057c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_ADC_IRQHandler+0x8c>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8083 	beq.w	80058ee <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d07d      	beq.n	80058ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d105      	bne.n	800580a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff fbb8 	bl	8004f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d062      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_ADC_IRQHandler+0x244>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d002      	beq.n	800582a <HAL_ADC_IRQHandler+0xda>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	e000      	b.n	800582c <HAL_ADC_IRQHandler+0xdc>
 800582a:	4b59      	ldr	r3, [pc, #356]	; (8005990 <HAL_ADC_IRQHandler+0x240>)
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	4293      	cmp	r3, r2
 8005832:	d008      	beq.n	8005846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b05      	cmp	r3, #5
 800583e:	d002      	beq.n	8005846 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b09      	cmp	r3, #9
 8005844:	d104      	bne.n	8005850 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	e00c      	b.n	800586a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a4f      	ldr	r2, [pc, #316]	; (8005994 <HAL_ADC_IRQHandler+0x244>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d002      	beq.n	8005860 <HAL_ADC_IRQHandler+0x110>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	e000      	b.n	8005862 <HAL_ADC_IRQHandler+0x112>
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_ADC_IRQHandler+0x240>)
 8005862:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d135      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b08      	cmp	r3, #8
 8005880:	d12e      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fcd6 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11a      	bne.n	80058c8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 020c 	bic.w	r2, r2, #12
 80058a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
 80058c6:	e00b      	b.n	80058e0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	f043 0210 	orr.w	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f043 0201 	orr.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7fd f979 	bl	8002bd8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	220c      	movs	r2, #12
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <HAL_ADC_IRQHandler+0x1b2>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80a0 	beq.w	8005a4e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 809a 	beq.w	8005a4e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	d105      	bne.n	8005932 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fb76 	bl	8005028 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800593c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff fb1e 	bl	8004f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005948:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <HAL_ADC_IRQHandler+0x244>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d002      	beq.n	800595a <HAL_ADC_IRQHandler+0x20a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	e000      	b.n	800595c <HAL_ADC_IRQHandler+0x20c>
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <HAL_ADC_IRQHandler+0x240>)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	4293      	cmp	r3, r2
 8005962:	d008      	beq.n	8005976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d002      	beq.n	8005976 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b07      	cmp	r3, #7
 8005974:	d104      	bne.n	8005980 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	623b      	str	r3, [r7, #32]
 800597e:	e014      	b.n	80059aa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a03      	ldr	r2, [pc, #12]	; (8005994 <HAL_ADC_IRQHandler+0x244>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00a      	beq.n	80059a0 <HAL_ADC_IRQHandler+0x250>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	e008      	b.n	80059a2 <HAL_ADC_IRQHandler+0x252>
 8005990:	40022000 	.word	0x40022000
 8005994:	40022100 	.word	0x40022100
 8005998:	40022300 	.word	0x40022300
 800599c:	58026300 	.word	0x58026300
 80059a0:	4b84      	ldr	r3, [pc, #528]	; (8005bb4 <HAL_ADC_IRQHandler+0x464>)
 80059a2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d047      	beq.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_ADC_IRQHandler+0x27a>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03f      	beq.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d13a      	bne.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d133      	bne.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d12e      	bne.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fc39 	bl	800525e <LL_ADC_INJ_IsConversionOngoing>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d11a      	bne.n	8005a28 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a00:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d112      	bne.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
 8005a26:	e00b      	b.n	8005a40 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f043 0210 	orr.w	r2, r3, #16
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a38:	f043 0201 	orr.w	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fe7d 	bl	8006740 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2260      	movs	r2, #96	; 0x60
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d011      	beq.n	8005a7c <HAL_ADC_IRQHandler+0x32c>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8b2 	bl	8005bd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d012      	beq.n	8005aac <HAL_ADC_IRQHandler+0x35c>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fe63 	bl	8006768 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aaa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d012      	beq.n	8005adc <HAL_ADC_IRQHandler+0x38c>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fe55 	bl	800677c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ada:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d043      	beq.n	8005b6e <HAL_ADC_IRQHandler+0x41e>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d03e      	beq.n	8005b6e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005af8:	2301      	movs	r3, #1
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	e021      	b.n	8005b42 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d015      	beq.n	8005b30 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <HAL_ADC_IRQHandler+0x464>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_ADC_IRQHandler+0x3c8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <HAL_ADC_IRQHandler+0x468>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_ADC_IRQHandler+0x3cc>
 8005b18:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_ADC_IRQHandler+0x46c>)
 8005b1a:	e000      	b.n	8005b1e <HAL_ADC_IRQHandler+0x3ce>
 8005b1c:	4b28      	ldr	r3, [pc, #160]	; (8005bc0 <HAL_ADC_IRQHandler+0x470>)
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff faf2 	bl	8005108 <LL_ADC_GetMultiDMATransfer>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	e008      	b.n	8005b42 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10e      	bne.n	8005b66 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	f043 0202 	orr.w	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f843 	bl	8005bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <HAL_ADC_IRQHandler+0x45a>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d013      	beq.n	8005baa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f043 0208 	orr.w	r2, r3, #8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ba2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fdd5 	bl	8006754 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005baa:	bf00      	nop
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40022000 	.word	0x40022000
 8005bb8:	40022100 	.word	0x40022100
 8005bbc:	40022300 	.word	0x40022300
 8005bc0:	58026300 	.word	0x58026300

08005bc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b0a1      	sub	sp, #132	; 0x84
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a9d      	ldr	r2, [pc, #628]	; (8005e90 <HAL_ADC_ConfigChannel+0x290>)
 8005c1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x2a>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e321      	b.n	800626e <HAL_ADC_ConfigChannel+0x66e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fafe 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8306 	bne.w	8006250 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x62>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	0e9b      	lsrs	r3, r3, #26
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	e016      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x90>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6a:	fa93 f3a3 	rbit	r3, r3
 8005c6e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c72:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	e003      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c80:	fab3 f383 	clz	r3, r3
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	69d1      	ldr	r1, [r2, #28]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f7ff f97d 	bl	8004faa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fabf 	bl	8005238 <LL_ADC_REG_IsConversionOngoing>
 8005cba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff facc 	bl	800525e <LL_ADC_INJ_IsConversionOngoing>
 8005cc6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 80b3 	bne.w	8005e36 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f040 80af 	bne.w	8005e36 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f7ff f9b2 	bl	800504e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005cea:	4b6a      	ldr	r3, [pc, #424]	; (8005e94 <HAL_ADC_ConfigChannel+0x294>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf6:	d10b      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x110>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	e01d      	b.n	8005d4c <HAL_ADC_ConfigChannel+0x14c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x136>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	e00a      	b.n	8005d4c <HAL_ADC_ConfigChannel+0x14c>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	089b      	lsrs	r3, r3, #2
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d027      	beq.n	8005da6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6919      	ldr	r1, [r3, #16]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d64:	f7ff f8ba 	bl	8004edc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6919      	ldr	r1, [r3, #16]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	7e5b      	ldrb	r3, [r3, #25]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d102      	bne.n	8005d7e <HAL_ADC_ConfigChannel+0x17e>
 8005d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d7c:	e000      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x180>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	461a      	mov	r2, r3
 8005d82:	f7ff f8e4 	bl	8004f4e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6919      	ldr	r1, [r3, #16]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	7e1b      	ldrb	r3, [r3, #24]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d102      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x19c>
 8005d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d9a:	e000      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x19e>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f7ff f8bc 	bl	8004f1c <LL_ADC_SetDataRightShift>
 8005da4:	e047      	b.n	8005e36 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	069b      	lsls	r3, r3, #26
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d107      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005dc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	069b      	lsls	r3, r3, #26
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d107      	bne.n	8005dee <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005dec:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	069b      	lsls	r3, r3, #26
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d107      	bne.n	8005e12 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e10:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	069b      	lsls	r3, r3, #26
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d107      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e34:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff f9d4 	bl	80051e8 <LL_ADC_IsEnabled>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 820d 	bne.w	8006262 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	461a      	mov	r2, r3
 8005e56:	f7ff f925 	bl	80050a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <HAL_ADC_ConfigChannel+0x290>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f040 8133 	bne.w	80060cc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d110      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x298>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	0e9b      	lsrs	r3, r3, #26
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b09      	cmp	r3, #9
 8005e84:	bf94      	ite	ls
 8005e86:	2301      	movls	r3, #1
 8005e88:	2300      	movhi	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	e01e      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x2cc>
 8005e8e:	bf00      	nop
 8005e90:	47ff0000 	.word	0x47ff0000
 8005e94:	5c001000 	.word	0x5c001000
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea0:	fa93 f3a3 	rbit	r3, r3
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	e003      	b.n	8005ebc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	bf94      	ite	ls
 8005ec6:	2301      	movls	r3, #1
 8005ec8:	2300      	movhi	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d079      	beq.n	8005fc4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x2ec>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0e9b      	lsrs	r3, r3, #26
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	069b      	lsls	r3, r3, #26
 8005ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eea:	e015      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x318>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005efc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005f04:	2320      	movs	r3, #32
 8005f06:	e003      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0a:	fab3 f383 	clz	r3, r3
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	069b      	lsls	r3, r3, #26
 8005f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x338>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	0e9b      	lsrs	r3, r3, #26
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f303 	lsl.w	r3, r1, r3
 8005f36:	e017      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x368>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f40:	fa93 f3a3 	rbit	r3, r3
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005f50:	2320      	movs	r3, #32
 8005f52:	e003      	b.n	8005f5c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	ea42 0103 	orr.w	r1, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x38e>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0e9b      	lsrs	r3, r3, #26
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4613      	mov	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	4413      	add	r3, r2
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	e018      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x3c0>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	e003      	b.n	8005fb2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	fab3 f383 	clz	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	e07e      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x3e0>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0e9b      	lsrs	r3, r3, #26
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	069b      	lsls	r3, r3, #26
 8005fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fde:	e015      	b.n	800600c <HAL_ADC_ConfigChannel+0x40c>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005ff8:	2320      	movs	r3, #32
 8005ffa:	e003      	b.n	8006004 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	fab3 f383 	clz	r3, r3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	3301      	adds	r3, #1
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_ADC_ConfigChannel+0x42c>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	0e9b      	lsrs	r3, r3, #26
 800601e:	3301      	adds	r3, #1
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	e017      	b.n	800605c <HAL_ADC_ConfigChannel+0x45c>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	fa93 f3a3 	rbit	r3, r3
 8006038:	61bb      	str	r3, [r7, #24]
  return result;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8006044:	2320      	movs	r3, #32
 8006046:	e003      	b.n	8006050 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	fab3 f383 	clz	r3, r3
 800604e:	b2db      	uxtb	r3, r3
 8006050:	3301      	adds	r3, #1
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	ea42 0103 	orr.w	r1, r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <HAL_ADC_ConfigChannel+0x488>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0e9b      	lsrs	r3, r3, #26
 8006072:	3301      	adds	r3, #1
 8006074:	f003 021f 	and.w	r2, r3, #31
 8006078:	4613      	mov	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	3b1e      	subs	r3, #30
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006086:	e01b      	b.n	80060c0 <HAL_ADC_ConfigChannel+0x4c0>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
  return result;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e003      	b.n	80060ac <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f003 021f 	and.w	r2, r3, #31
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	3b1e      	subs	r3, #30
 80060ba:	051b      	lsls	r3, r3, #20
 80060bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060c0:	430b      	orrs	r3, r1
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	6892      	ldr	r2, [r2, #8]
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7fe ffc1 	bl	800504e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f280 80c6 	bge.w	8006262 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a67      	ldr	r2, [pc, #412]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_ADC_ConfigChannel+0x4ea>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d101      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x4ee>
 80060ea:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_ADC_ConfigChannel+0x680>)
 80060ec:	e000      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x4f0>
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <HAL_ADC_ConfigChannel+0x684>)
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fee5 	bl	8004ec0 <LL_ADC_GetCommonPathInternalCh>
 80060f6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5e      	ldr	r2, [pc, #376]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_ADC_ConfigChannel+0x50c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5d      	ldr	r2, [pc, #372]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d10e      	bne.n	800612a <HAL_ADC_ConfigChannel+0x52a>
 800610c:	485a      	ldr	r0, [pc, #360]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 800610e:	f7ff f86b 	bl	80051e8 <LL_ADC_IsEnabled>
 8006112:	4604      	mov	r4, r0
 8006114:	4859      	ldr	r0, [pc, #356]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 8006116:	f7ff f867 	bl	80051e8 <LL_ADC_IsEnabled>
 800611a:	4603      	mov	r3, r0
 800611c:	4323      	orrs	r3, r4
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e008      	b.n	800613c <HAL_ADC_ConfigChannel+0x53c>
 800612a:	4857      	ldr	r0, [pc, #348]	; (8006288 <HAL_ADC_ConfigChannel+0x688>)
 800612c:	f7ff f85c 	bl	80051e8 <LL_ADC_IsEnabled>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d07d      	beq.n	800623c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a51      	ldr	r2, [pc, #324]	; (800628c <HAL_ADC_ConfigChannel+0x68c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d130      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x5ac>
 800614a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d12b      	bne.n	80061ac <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a4b      	ldr	r2, [pc, #300]	; (8006288 <HAL_ADC_ConfigChannel+0x688>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f040 8081 	bne.w	8006262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a44      	ldr	r2, [pc, #272]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_ADC_ConfigChannel+0x574>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a43      	ldr	r2, [pc, #268]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d101      	bne.n	8006178 <HAL_ADC_ConfigChannel+0x578>
 8006174:	4a42      	ldr	r2, [pc, #264]	; (8006280 <HAL_ADC_ConfigChannel+0x680>)
 8006176:	e000      	b.n	800617a <HAL_ADC_ConfigChannel+0x57a>
 8006178:	4a42      	ldr	r2, [pc, #264]	; (8006284 <HAL_ADC_ConfigChannel+0x684>)
 800617a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f7fe fe89 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006188:	4b41      	ldr	r3, [pc, #260]	; (8006290 <HAL_ADC_ConfigChannel+0x690>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <HAL_ADC_ConfigChannel+0x694>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	3301      	adds	r3, #1
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800619c:	e002      	b.n	80061a4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f9      	bne.n	800619e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061aa:	e05a      	b.n	8006262 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a39      	ldr	r2, [pc, #228]	; (8006298 <HAL_ADC_ConfigChannel+0x698>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d11e      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x5f4>
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d119      	bne.n	80061f4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a30      	ldr	r2, [pc, #192]	; (8006288 <HAL_ADC_ConfigChannel+0x688>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d14b      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_ADC_ConfigChannel+0x5de>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a28      	ldr	r2, [pc, #160]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x5e2>
 80061de:	4a28      	ldr	r2, [pc, #160]	; (8006280 <HAL_ADC_ConfigChannel+0x680>)
 80061e0:	e000      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x5e4>
 80061e2:	4a28      	ldr	r2, [pc, #160]	; (8006284 <HAL_ADC_ConfigChannel+0x684>)
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fe fe54 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061f2:	e036      	b.n	8006262 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_ADC_ConfigChannel+0x69c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d131      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x662>
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d12c      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_ADC_ConfigChannel+0x688>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d127      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_ADC_ConfigChannel+0x678>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_ADC_ConfigChannel+0x626>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_ADC_ConfigChannel+0x67c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_ADC_ConfigChannel+0x62a>
 8006226:	4a16      	ldr	r2, [pc, #88]	; (8006280 <HAL_ADC_ConfigChannel+0x680>)
 8006228:	e000      	b.n	800622c <HAL_ADC_ConfigChannel+0x62c>
 800622a:	4a16      	ldr	r2, [pc, #88]	; (8006284 <HAL_ADC_ConfigChannel+0x684>)
 800622c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe fe30 	bl	8004e9a <LL_ADC_SetCommonPathInternalCh>
 800623a:	e012      	b.n	8006262 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800624e:	e008      	b.n	8006262 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800626a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800626e:	4618      	mov	r0, r3
 8006270:	3784      	adds	r7, #132	; 0x84
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}
 8006276:	bf00      	nop
 8006278:	40022000 	.word	0x40022000
 800627c:	40022100 	.word	0x40022100
 8006280:	40022300 	.word	0x40022300
 8006284:	58026300 	.word	0x58026300
 8006288:	58026000 	.word	0x58026000
 800628c:	cb840000 	.word	0xcb840000
 8006290:	2000000c 	.word	0x2000000c
 8006294:	053e2d63 	.word	0x053e2d63
 8006298:	c7520000 	.word	0xc7520000
 800629c:	cfb80000 	.word	0xcfb80000

080062a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe ff9b 	bl	80051e8 <LL_ADC_IsEnabled>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d16e      	bne.n	8006396 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	4b38      	ldr	r3, [pc, #224]	; (80063a0 <ADC_Enable+0x100>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00d      	beq.n	80062e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	f043 0210 	orr.w	r2, r3, #16
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	f043 0201 	orr.w	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e05a      	b.n	8006398 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe ff6a 	bl	80051c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80062ec:	f7fe fd72 	bl	8004dd4 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2b      	ldr	r2, [pc, #172]	; (80063a4 <ADC_Enable+0x104>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <ADC_Enable+0x66>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <ADC_Enable+0x108>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <ADC_Enable+0x6a>
 8006306:	4b29      	ldr	r3, [pc, #164]	; (80063ac <ADC_Enable+0x10c>)
 8006308:	e000      	b.n	800630c <ADC_Enable+0x6c>
 800630a:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <ADC_Enable+0x110>)
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe feed 	bl	80050ec <LL_ADC_GetMultimode>
 8006312:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <ADC_Enable+0x108>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d002      	beq.n	8006324 <ADC_Enable+0x84>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	e000      	b.n	8006326 <ADC_Enable+0x86>
 8006324:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <ADC_Enable+0x104>)
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	4293      	cmp	r3, r2
 800632c:	d02c      	beq.n	8006388 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d130      	bne.n	8006396 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006334:	e028      	b.n	8006388 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe ff54 	bl	80051e8 <LL_ADC_IsEnabled>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe ff38 	bl	80051c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006350:	f7fe fd40 	bl	8004dd4 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d914      	bls.n	8006388 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d00d      	beq.n	8006388 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006370:	f043 0210 	orr.w	r2, r3, #16
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	f043 0201 	orr.w	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e007      	b.n	8006398 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b01      	cmp	r3, #1
 8006394:	d1cf      	bne.n	8006336 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	8000003f 	.word	0x8000003f
 80063a4:	40022000 	.word	0x40022000
 80063a8:	40022100 	.word	0x40022100
 80063ac:	40022300 	.word	0x40022300
 80063b0:	58026300 	.word	0x58026300

080063b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d14b      	bne.n	8006466 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fdc9 	bl	8004f84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d032      	beq.n	800645e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12b      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11f      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	f043 0201 	orr.w	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
 800642a:	e018      	b.n	800645e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d111      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7fc fbba 	bl	8002bd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006464:	e00e      	b.n	8006484 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fbba 	bl	8005bec <HAL_ADC_ErrorCallback>
}
 8006478:	e004      	b.n	8006484 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fb92 	bl	8005bc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fb8c 	bl	8005bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a7a      	ldr	r2, [pc, #488]	; (80066d4 <ADC_ConfigureBoostMode+0x1f8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <ADC_ConfigureBoostMode+0x1c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a79      	ldr	r2, [pc, #484]	; (80066d8 <ADC_ConfigureBoostMode+0x1fc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d109      	bne.n	800650c <ADC_ConfigureBoostMode+0x30>
 80064f8:	4b78      	ldr	r3, [pc, #480]	; (80066dc <ADC_ConfigureBoostMode+0x200>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	e008      	b.n	800651e <ADC_ConfigureBoostMode+0x42>
 800650c:	4b74      	ldr	r3, [pc, #464]	; (80066e0 <ADC_ConfigureBoostMode+0x204>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006514:	2b00      	cmp	r3, #0
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01c      	beq.n	800655c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006522:	f005 ff83 	bl	800c42c <HAL_RCC_GetHCLKFreq>
 8006526:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006530:	d010      	beq.n	8006554 <ADC_ConfigureBoostMode+0x78>
 8006532:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006536:	d873      	bhi.n	8006620 <ADC_ConfigureBoostMode+0x144>
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653c:	d002      	beq.n	8006544 <ADC_ConfigureBoostMode+0x68>
 800653e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006542:	d16d      	bne.n	8006620 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	0c1b      	lsrs	r3, r3, #16
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	60fb      	str	r3, [r7, #12]
        break;
 8006552:	e068      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	60fb      	str	r3, [r7, #12]
        break;
 800655a:	e064      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800655c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	f007 f9c8 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006568:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006572:	d051      	beq.n	8006618 <ADC_ConfigureBoostMode+0x13c>
 8006574:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006578:	d854      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 800657a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800657e:	d047      	beq.n	8006610 <ADC_ConfigureBoostMode+0x134>
 8006580:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006584:	d84e      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 8006586:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800658a:	d03d      	beq.n	8006608 <ADC_ConfigureBoostMode+0x12c>
 800658c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006590:	d848      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 8006592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006596:	d033      	beq.n	8006600 <ADC_ConfigureBoostMode+0x124>
 8006598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659c:	d842      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 800659e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80065a2:	d029      	beq.n	80065f8 <ADC_ConfigureBoostMode+0x11c>
 80065a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80065a8:	d83c      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 80065aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80065ae:	d01a      	beq.n	80065e6 <ADC_ConfigureBoostMode+0x10a>
 80065b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80065b4:	d836      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 80065b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80065ba:	d014      	beq.n	80065e6 <ADC_ConfigureBoostMode+0x10a>
 80065bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80065c0:	d830      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 80065c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c6:	d00e      	beq.n	80065e6 <ADC_ConfigureBoostMode+0x10a>
 80065c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065cc:	d82a      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 80065ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065d2:	d008      	beq.n	80065e6 <ADC_ConfigureBoostMode+0x10a>
 80065d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065d8:	d824      	bhi.n	8006624 <ADC_ConfigureBoostMode+0x148>
 80065da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065de:	d002      	beq.n	80065e6 <ADC_ConfigureBoostMode+0x10a>
 80065e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065e4:	d11e      	bne.n	8006624 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	0c9b      	lsrs	r3, r3, #18
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	60fb      	str	r3, [r7, #12]
        break;
 80065f6:	e016      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	60fb      	str	r3, [r7, #12]
        break;
 80065fe:	e012      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	60fb      	str	r3, [r7, #12]
        break;
 8006606:	e00e      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	60fb      	str	r3, [r7, #12]
        break;
 800660e:	e00a      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	60fb      	str	r3, [r7, #12]
        break;
 8006616:	e006      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	60fb      	str	r3, [r7, #12]
        break;
 800661e:	e002      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006624:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006626:	f7fe fc05 	bl	8004e34 <HAL_GetREVID>
 800662a:	4603      	mov	r3, r0
 800662c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006630:	4293      	cmp	r3, r2
 8006632:	d815      	bhi.n	8006660 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a2b      	ldr	r2, [pc, #172]	; (80066e4 <ADC_ConfigureBoostMode+0x208>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d908      	bls.n	800664e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800664c:	e03e      	b.n	80066cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800665c:	609a      	str	r2, [r3, #8]
}
 800665e:	e035      	b.n	80066cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <ADC_ConfigureBoostMode+0x20c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d808      	bhi.n	8006680 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800667c:	609a      	str	r2, [r3, #8]
}
 800667e:	e025      	b.n	80066cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <ADC_ConfigureBoostMode+0x210>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d80a      	bhi.n	800669e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669a:	609a      	str	r2, [r3, #8]
}
 800669c:	e016      	b.n	80066cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <ADC_ConfigureBoostMode+0x214>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d80a      	bhi.n	80066bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b8:	609a      	str	r2, [r3, #8]
}
 80066ba:	e007      	b.n	80066cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40022000 	.word	0x40022000
 80066d8:	40022100 	.word	0x40022100
 80066dc:	40022300 	.word	0x40022300
 80066e0:	58026300 	.word	0x58026300
 80066e4:	01312d00 	.word	0x01312d00
 80066e8:	005f5e10 	.word	0x005f5e10
 80066ec:	00bebc20 	.word	0x00bebc20
 80066f0:	017d7840 	.word	0x017d7840

080066f4 <LL_ADC_IsEnabled>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <LL_ADC_IsEnabled+0x18>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <LL_ADC_IsEnabled+0x1a>
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <LL_ADC_REG_IsConversionOngoing>:
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d101      	bne.n	8006732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b09f      	sub	sp, #124	; 0x7c
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e0be      	b.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80067ca:	2300      	movs	r3, #0
 80067cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5c      	ldr	r2, [pc, #368]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d102      	bne.n	80067e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80067dc:	4b5b      	ldr	r3, [pc, #364]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	e001      	b.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e09d      	b.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff ff87 	bl	800671a <LL_ADC_REG_IsConversionOngoing>
 800680c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff81 	bl	800671a <LL_ADC_REG_IsConversionOngoing>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d17f      	bne.n	800691e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800681e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006820:	2b00      	cmp	r3, #0
 8006822:	d17c      	bne.n	800691e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a47      	ldr	r2, [pc, #284]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a46      	ldr	r2, [pc, #280]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d101      	bne.n	800683c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006838:	4b45      	ldr	r3, [pc, #276]	; (8006950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800683a:	e000      	b.n	800683e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800683c:	4b45      	ldr	r3, [pc, #276]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800683e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d039      	beq.n	80068bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	431a      	orrs	r2, r3
 8006856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006858:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a3a      	ldr	r2, [pc, #232]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a38      	ldr	r2, [pc, #224]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10e      	bne.n	800688c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800686e:	4836      	ldr	r0, [pc, #216]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006870:	f7ff ff40 	bl	80066f4 <LL_ADC_IsEnabled>
 8006874:	4604      	mov	r4, r0
 8006876:	4835      	ldr	r0, [pc, #212]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006878:	f7ff ff3c 	bl	80066f4 <LL_ADC_IsEnabled>
 800687c:	4603      	mov	r3, r0
 800687e:	4323      	orrs	r3, r4
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e008      	b.n	800689e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800688c:	4832      	ldr	r0, [pc, #200]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800688e:	f7ff ff31 	bl	80066f4 <LL_ADC_IsEnabled>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d047      	beq.n	8006932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	4b2d      	ldr	r3, [pc, #180]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	6811      	ldr	r1, [r2, #0]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	6892      	ldr	r2, [r2, #8]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	431a      	orrs	r2, r3
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068ba:	e03a      	b.n	8006932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80068bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d004      	beq.n	80068dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1d      	ldr	r2, [pc, #116]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d10e      	bne.n	80068fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80068dc:	481a      	ldr	r0, [pc, #104]	; (8006948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068de:	f7ff ff09 	bl	80066f4 <LL_ADC_IsEnabled>
 80068e2:	4604      	mov	r4, r0
 80068e4:	4819      	ldr	r0, [pc, #100]	; (800694c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068e6:	f7ff ff05 	bl	80066f4 <LL_ADC_IsEnabled>
 80068ea:	4603      	mov	r3, r0
 80068ec:	4323      	orrs	r3, r4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf0c      	ite	eq
 80068f2:	2301      	moveq	r3, #1
 80068f4:	2300      	movne	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e008      	b.n	800690c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80068fa:	4817      	ldr	r0, [pc, #92]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80068fc:	f7ff fefa 	bl	80066f4 <LL_ADC_IsEnabled>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d010      	beq.n	8006932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006916:	4013      	ands	r3, r2
 8006918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800691a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800691c:	e009      	b.n	8006932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006930:	e000      	b.n	8006934 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006932:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800693c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006940:	4618      	mov	r0, r3
 8006942:	377c      	adds	r7, #124	; 0x7c
 8006944:	46bd      	mov	sp, r7
 8006946:	bd90      	pop	{r4, r7, pc}
 8006948:	40022000 	.word	0x40022000
 800694c:	40022100 	.word	0x40022100
 8006950:	40022300 	.word	0x40022300
 8006954:	58026300 	.word	0x58026300
 8006958:	58026000 	.word	0x58026000
 800695c:	fffff0e0 	.word	0xfffff0e0

08006960 <__NVIC_SetPriorityGrouping>:
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800697c:	4013      	ands	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <__NVIC_SetPriorityGrouping+0x44>)
 800698a:	4313      	orrs	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800698e:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	60d3      	str	r3, [r2, #12]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	e000ed00 	.word	0xe000ed00
 80069a4:	05fa0000 	.word	0x05fa0000

080069a8 <__NVIC_GetPriorityGrouping>:
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069ac:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <__NVIC_GetPriorityGrouping+0x18>)
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	f003 0307 	and.w	r3, r3, #7
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	e000ed00 	.word	0xe000ed00

080069c4 <__NVIC_EnableIRQ>:
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	db0b      	blt.n	80069ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	f003 021f 	and.w	r2, r3, #31
 80069dc:	4907      	ldr	r1, [pc, #28]	; (80069fc <__NVIC_EnableIRQ+0x38>)
 80069de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	2001      	movs	r0, #1
 80069e6:	fa00 f202 	lsl.w	r2, r0, r2
 80069ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000e100 	.word	0xe000e100

08006a00 <__NVIC_SetPriority>:
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db0a      	blt.n	8006a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	490c      	ldr	r1, [pc, #48]	; (8006a4c <__NVIC_SetPriority+0x4c>)
 8006a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a1e:	0112      	lsls	r2, r2, #4
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	440b      	add	r3, r1
 8006a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a28:	e00a      	b.n	8006a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	4908      	ldr	r1, [pc, #32]	; (8006a50 <__NVIC_SetPriority+0x50>)
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	3b04      	subs	r3, #4
 8006a38:	0112      	lsls	r2, r2, #4
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	761a      	strb	r2, [r3, #24]
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	e000e100 	.word	0xe000e100
 8006a50:	e000ed00 	.word	0xe000ed00

08006a54 <NVIC_EncodePriority>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f1c3 0307 	rsb	r3, r3, #7
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	bf28      	it	cs
 8006a72:	2304      	movcs	r3, #4
 8006a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	2b06      	cmp	r3, #6
 8006a7c:	d902      	bls.n	8006a84 <NVIC_EncodePriority+0x30>
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3b03      	subs	r3, #3
 8006a82:	e000      	b.n	8006a86 <NVIC_EncodePriority+0x32>
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	43da      	mvns	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	401a      	ands	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa6:	43d9      	mvns	r1, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aac:	4313      	orrs	r3, r2
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3724      	adds	r7, #36	; 0x24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006acc:	d301      	bcc.n	8006ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e00f      	b.n	8006af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <SysTick_Config+0x40>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ada:	210f      	movs	r1, #15
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ae0:	f7ff ff8e 	bl	8006a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <SysTick_Config+0x40>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <SysTick_Config+0x40>)
 8006aec:	2207      	movs	r2, #7
 8006aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	e000e010 	.word	0xe000e010

08006b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff29 	bl	8006960 <__NVIC_SetPriorityGrouping>
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b24:	f7ff ff40 	bl	80069a8 <__NVIC_GetPriorityGrouping>
 8006b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff ff90 	bl	8006a54 <NVIC_EncodePriority>
 8006b34:	4602      	mov	r2, r0
 8006b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff ff5f 	bl	8006a00 <__NVIC_SetPriority>
}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	4603      	mov	r3, r0
 8006b52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff ff33 	bl	80069c4 <__NVIC_EnableIRQ>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff ffa4 	bl	8006abc <SysTick_Config>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006b84:	f3bf 8f5f 	dmb	sy
}
 8006b88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <HAL_MPU_Disable+0x28>)
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <HAL_MPU_Disable+0x28>)
 8006b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006b96:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HAL_MPU_Disable+0x2c>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	e000ed00 	.word	0xe000ed00
 8006bac:	e000ed90 	.word	0xe000ed90

08006bb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <HAL_MPU_Enable+0x38>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f043 0301 	orr.w	r3, r3, #1
 8006bc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <HAL_MPU_Enable+0x3c>)
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	4a09      	ldr	r2, [pc, #36]	; (8006bec <HAL_MPU_Enable+0x3c>)
 8006bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006bce:	f3bf 8f4f 	dsb	sy
}
 8006bd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bd4:	f3bf 8f6f 	isb	sy
}
 8006bd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	e000ed90 	.word	0xe000ed90
 8006bec:	e000ed00 	.word	0xe000ed00

08006bf0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	785a      	ldrb	r2, [r3, #1]
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <HAL_MPU_ConfigRegion+0x84>)
 8006bfe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d029      	beq.n	8006c5c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006c08:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <HAL_MPU_ConfigRegion+0x84>)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7b1b      	ldrb	r3, [r3, #12]
 8006c14:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7adb      	ldrb	r3, [r3, #11]
 8006c1a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	7a9b      	ldrb	r3, [r3, #10]
 8006c22:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006c24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7b5b      	ldrb	r3, [r3, #13]
 8006c2a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7b9b      	ldrb	r3, [r3, #14]
 8006c32:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7bdb      	ldrb	r3, [r3, #15]
 8006c3a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	7a5b      	ldrb	r3, [r3, #9]
 8006c42:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7a1b      	ldrb	r3, [r3, #8]
 8006c4a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006c4c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c54:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006c56:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006c58:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006c5a:	e005      	b.n	8006c68 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_MPU_ConfigRegion+0x84>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_MPU_ConfigRegion+0x84>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	611a      	str	r2, [r3, #16]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000ed90 	.word	0xe000ed90

08006c78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006c80:	f7fe f8a8 	bl	8004dd4 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e316      	b.n	80072be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a66      	ldr	r2, [pc, #408]	; (8006e30 <HAL_DMA_Init+0x1b8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a65      	ldr	r2, [pc, #404]	; (8006e34 <HAL_DMA_Init+0x1bc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a63      	ldr	r2, [pc, #396]	; (8006e38 <HAL_DMA_Init+0x1c0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a62      	ldr	r2, [pc, #392]	; (8006e3c <HAL_DMA_Init+0x1c4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a60      	ldr	r2, [pc, #384]	; (8006e40 <HAL_DMA_Init+0x1c8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a5f      	ldr	r2, [pc, #380]	; (8006e44 <HAL_DMA_Init+0x1cc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5d      	ldr	r2, [pc, #372]	; (8006e48 <HAL_DMA_Init+0x1d0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a5c      	ldr	r2, [pc, #368]	; (8006e4c <HAL_DMA_Init+0x1d4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5a      	ldr	r2, [pc, #360]	; (8006e50 <HAL_DMA_Init+0x1d8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a59      	ldr	r2, [pc, #356]	; (8006e54 <HAL_DMA_Init+0x1dc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a57      	ldr	r2, [pc, #348]	; (8006e58 <HAL_DMA_Init+0x1e0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a56      	ldr	r2, [pc, #344]	; (8006e5c <HAL_DMA_Init+0x1e4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a54      	ldr	r2, [pc, #336]	; (8006e60 <HAL_DMA_Init+0x1e8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a53      	ldr	r2, [pc, #332]	; (8006e64 <HAL_DMA_Init+0x1ec>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a51      	ldr	r2, [pc, #324]	; (8006e68 <HAL_DMA_Init+0x1f0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_DMA_Init+0xb8>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a50      	ldr	r2, [pc, #320]	; (8006e6c <HAL_DMA_Init+0x1f4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <HAL_DMA_Init+0xbc>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_DMA_Init+0xbe>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 813b 	beq.w	8006fb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <HAL_DMA_Init+0x1b8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d04a      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a36      	ldr	r2, [pc, #216]	; (8006e34 <HAL_DMA_Init+0x1bc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d045      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <HAL_DMA_Init+0x1c0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d040      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <HAL_DMA_Init+0x1c4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d03b      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a31      	ldr	r2, [pc, #196]	; (8006e40 <HAL_DMA_Init+0x1c8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d036      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <HAL_DMA_Init+0x1cc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d031      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <HAL_DMA_Init+0x1d0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02c      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <HAL_DMA_Init+0x1d4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d027      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	; (8006e50 <HAL_DMA_Init+0x1d8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d022      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <HAL_DMA_Init+0x1dc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d01d      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <HAL_DMA_Init+0x1e0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a27      	ldr	r2, [pc, #156]	; (8006e5c <HAL_DMA_Init+0x1e4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <HAL_DMA_Init+0x1e8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <HAL_DMA_Init+0x1ec>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <HAL_DMA_Init+0x1f0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_DMA_Init+0x174>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a21      	ldr	r2, [pc, #132]	; (8006e6c <HAL_DMA_Init+0x1f4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d108      	bne.n	8006dfe <HAL_DMA_Init+0x186>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e007      	b.n	8006e0e <HAL_DMA_Init+0x196>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e0e:	e02f      	b.n	8006e70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e10:	f7fd ffe0 	bl	8004dd4 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b05      	cmp	r3, #5
 8006e1c:	d928      	bls.n	8006e70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2203      	movs	r2, #3
 8006e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e246      	b.n	80072be <HAL_DMA_Init+0x646>
 8006e30:	40020010 	.word	0x40020010
 8006e34:	40020028 	.word	0x40020028
 8006e38:	40020040 	.word	0x40020040
 8006e3c:	40020058 	.word	0x40020058
 8006e40:	40020070 	.word	0x40020070
 8006e44:	40020088 	.word	0x40020088
 8006e48:	400200a0 	.word	0x400200a0
 8006e4c:	400200b8 	.word	0x400200b8
 8006e50:	40020410 	.word	0x40020410
 8006e54:	40020428 	.word	0x40020428
 8006e58:	40020440 	.word	0x40020440
 8006e5c:	40020458 	.word	0x40020458
 8006e60:	40020470 	.word	0x40020470
 8006e64:	40020488 	.word	0x40020488
 8006e68:	400204a0 	.word	0x400204a0
 8006e6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1c8      	bne.n	8006e10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4b83      	ldr	r3, [pc, #524]	; (8007098 <HAL_DMA_Init+0x420>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006e96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ea2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d107      	bne.n	8006ed4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006ed4:	4b71      	ldr	r3, [pc, #452]	; (800709c <HAL_DMA_Init+0x424>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	4b71      	ldr	r3, [pc, #452]	; (80070a0 <HAL_DMA_Init+0x428>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d328      	bcc.n	8006f34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b28      	cmp	r3, #40	; 0x28
 8006ee8:	d903      	bls.n	8006ef2 <HAL_DMA_Init+0x27a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef0:	d917      	bls.n	8006f22 <HAL_DMA_Init+0x2aa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef8:	d903      	bls.n	8006f02 <HAL_DMA_Init+0x28a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b42      	cmp	r3, #66	; 0x42
 8006f00:	d90f      	bls.n	8006f22 <HAL_DMA_Init+0x2aa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b46      	cmp	r3, #70	; 0x46
 8006f08:	d903      	bls.n	8006f12 <HAL_DMA_Init+0x29a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b48      	cmp	r3, #72	; 0x48
 8006f10:	d907      	bls.n	8006f22 <HAL_DMA_Init+0x2aa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b4e      	cmp	r3, #78	; 0x4e
 8006f18:	d905      	bls.n	8006f26 <HAL_DMA_Init+0x2ae>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b52      	cmp	r3, #82	; 0x52
 8006f20:	d801      	bhi.n	8006f26 <HAL_DMA_Init+0x2ae>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <HAL_DMA_Init+0x2b0>
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0307 	bic.w	r3, r3, #7
 8006f4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d117      	bne.n	8006f8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fddb 	bl	8008b2c <DMA_CheckFifoParam>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2240      	movs	r2, #64	; 0x40
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e197      	b.n	80072be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fd16 	bl	80089c8 <DMA_CalcBaseAndBitshift>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	223f      	movs	r2, #63	; 0x3f
 8006faa:	409a      	lsls	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	e0cd      	b.n	800714e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3b      	ldr	r2, [pc, #236]	; (80070a4 <HAL_DMA_Init+0x42c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a39      	ldr	r2, [pc, #228]	; (80070a8 <HAL_DMA_Init+0x430>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01d      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a38      	ldr	r2, [pc, #224]	; (80070ac <HAL_DMA_Init+0x434>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a36      	ldr	r2, [pc, #216]	; (80070b0 <HAL_DMA_Init+0x438>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a35      	ldr	r2, [pc, #212]	; (80070b4 <HAL_DMA_Init+0x43c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a33      	ldr	r2, [pc, #204]	; (80070b8 <HAL_DMA_Init+0x440>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a32      	ldr	r2, [pc, #200]	; (80070bc <HAL_DMA_Init+0x444>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_DMA_Init+0x38a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a30      	ldr	r2, [pc, #192]	; (80070c0 <HAL_DMA_Init+0x448>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <HAL_DMA_Init+0x38e>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <HAL_DMA_Init+0x390>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8097 	beq.w	800713c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <HAL_DMA_Init+0x42c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d021      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <HAL_DMA_Init+0x430>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01c      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a21      	ldr	r2, [pc, #132]	; (80070ac <HAL_DMA_Init+0x434>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d017      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_DMA_Init+0x438>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d012      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <HAL_DMA_Init+0x43c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00d      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_DMA_Init+0x440>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d008      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <HAL_DMA_Init+0x444>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <HAL_DMA_Init+0x3e4>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_DMA_Init+0x448>)
 800705a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <HAL_DMA_Init+0x44c>)
 8007078:	4013      	ands	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b40      	cmp	r3, #64	; 0x40
 8007082:	d021      	beq.n	80070c8 <HAL_DMA_Init+0x450>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b80      	cmp	r3, #128	; 0x80
 800708a:	d102      	bne.n	8007092 <HAL_DMA_Init+0x41a>
 800708c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007090:	e01b      	b.n	80070ca <HAL_DMA_Init+0x452>
 8007092:	2300      	movs	r3, #0
 8007094:	e019      	b.n	80070ca <HAL_DMA_Init+0x452>
 8007096:	bf00      	nop
 8007098:	fe10803f 	.word	0xfe10803f
 800709c:	5c001000 	.word	0x5c001000
 80070a0:	ffff0000 	.word	0xffff0000
 80070a4:	58025408 	.word	0x58025408
 80070a8:	5802541c 	.word	0x5802541c
 80070ac:	58025430 	.word	0x58025430
 80070b0:	58025444 	.word	0x58025444
 80070b4:	58025458 	.word	0x58025458
 80070b8:	5802546c 	.word	0x5802546c
 80070bc:	58025480 	.word	0x58025480
 80070c0:	58025494 	.word	0x58025494
 80070c4:	fffe000f 	.word	0xfffe000f
 80070c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68d2      	ldr	r2, [r2, #12]
 80070ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80070d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80070d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80070e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80070e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80070f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80070f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	4b6e      	ldr	r3, [pc, #440]	; (80072c8 <HAL_DMA_Init+0x650>)
 8007110:	4413      	add	r3, r2
 8007112:	4a6e      	ldr	r2, [pc, #440]	; (80072cc <HAL_DMA_Init+0x654>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	009a      	lsls	r2, r3, #2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fc51 	bl	80089c8 <DMA_CalcBaseAndBitshift>
 8007126:	4603      	mov	r3, r0
 8007128:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2201      	movs	r2, #1
 8007134:	409a      	lsls	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	e008      	b.n	800714e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2240      	movs	r2, #64	; 0x40
 8007140:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2203      	movs	r2, #3
 8007146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0b7      	b.n	80072be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a5f      	ldr	r2, [pc, #380]	; (80072d0 <HAL_DMA_Init+0x658>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d072      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a5d      	ldr	r2, [pc, #372]	; (80072d4 <HAL_DMA_Init+0x65c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d06d      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_DMA_Init+0x660>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d068      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5a      	ldr	r2, [pc, #360]	; (80072dc <HAL_DMA_Init+0x664>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d063      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a59      	ldr	r2, [pc, #356]	; (80072e0 <HAL_DMA_Init+0x668>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d05e      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a57      	ldr	r2, [pc, #348]	; (80072e4 <HAL_DMA_Init+0x66c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d059      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a56      	ldr	r2, [pc, #344]	; (80072e8 <HAL_DMA_Init+0x670>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d054      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a54      	ldr	r2, [pc, #336]	; (80072ec <HAL_DMA_Init+0x674>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04f      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a53      	ldr	r2, [pc, #332]	; (80072f0 <HAL_DMA_Init+0x678>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d04a      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a51      	ldr	r2, [pc, #324]	; (80072f4 <HAL_DMA_Init+0x67c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d045      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a50      	ldr	r2, [pc, #320]	; (80072f8 <HAL_DMA_Init+0x680>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d040      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a4e      	ldr	r2, [pc, #312]	; (80072fc <HAL_DMA_Init+0x684>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d03b      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a4d      	ldr	r2, [pc, #308]	; (8007300 <HAL_DMA_Init+0x688>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d036      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a4b      	ldr	r2, [pc, #300]	; (8007304 <HAL_DMA_Init+0x68c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d031      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a4a      	ldr	r2, [pc, #296]	; (8007308 <HAL_DMA_Init+0x690>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d02c      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a48      	ldr	r2, [pc, #288]	; (800730c <HAL_DMA_Init+0x694>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d027      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a47      	ldr	r2, [pc, #284]	; (8007310 <HAL_DMA_Init+0x698>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a45      	ldr	r2, [pc, #276]	; (8007314 <HAL_DMA_Init+0x69c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01d      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a44      	ldr	r2, [pc, #272]	; (8007318 <HAL_DMA_Init+0x6a0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a42      	ldr	r2, [pc, #264]	; (800731c <HAL_DMA_Init+0x6a4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a41      	ldr	r2, [pc, #260]	; (8007320 <HAL_DMA_Init+0x6a8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3f      	ldr	r2, [pc, #252]	; (8007324 <HAL_DMA_Init+0x6ac>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a3e      	ldr	r2, [pc, #248]	; (8007328 <HAL_DMA_Init+0x6b0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_DMA_Init+0x5c6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a3c      	ldr	r2, [pc, #240]	; (800732c <HAL_DMA_Init+0x6b4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d101      	bne.n	8007242 <HAL_DMA_Init+0x5ca>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <HAL_DMA_Init+0x5cc>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d032      	beq.n	80072ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fceb 	bl	8008c24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b80      	cmp	r3, #128	; 0x80
 8007254:	d102      	bne.n	800725c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007270:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d010      	beq.n	800729c <HAL_DMA_Init+0x624>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b08      	cmp	r3, #8
 8007280:	d80c      	bhi.n	800729c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fd68 	bl	8008d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	e008      	b.n	80072ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	a7fdabf8 	.word	0xa7fdabf8
 80072cc:	cccccccd 	.word	0xcccccccd
 80072d0:	40020010 	.word	0x40020010
 80072d4:	40020028 	.word	0x40020028
 80072d8:	40020040 	.word	0x40020040
 80072dc:	40020058 	.word	0x40020058
 80072e0:	40020070 	.word	0x40020070
 80072e4:	40020088 	.word	0x40020088
 80072e8:	400200a0 	.word	0x400200a0
 80072ec:	400200b8 	.word	0x400200b8
 80072f0:	40020410 	.word	0x40020410
 80072f4:	40020428 	.word	0x40020428
 80072f8:	40020440 	.word	0x40020440
 80072fc:	40020458 	.word	0x40020458
 8007300:	40020470 	.word	0x40020470
 8007304:	40020488 	.word	0x40020488
 8007308:	400204a0 	.word	0x400204a0
 800730c:	400204b8 	.word	0x400204b8
 8007310:	58025408 	.word	0x58025408
 8007314:	5802541c 	.word	0x5802541c
 8007318:	58025430 	.word	0x58025430
 800731c:	58025444 	.word	0x58025444
 8007320:	58025458 	.word	0x58025458
 8007324:	5802546c 	.word	0x5802546c
 8007328:	58025480 	.word	0x58025480
 800732c:	58025494 	.word	0x58025494

08007330 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e226      	b.n	800779a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_DMA_Start_IT+0x2a>
 8007356:	2302      	movs	r3, #2
 8007358:	e21f      	b.n	800779a <HAL_DMA_Start_IT+0x46a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	f040 820a 	bne.w	8007784 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a68      	ldr	r2, [pc, #416]	; (8007524 <HAL_DMA_Start_IT+0x1f4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04a      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a66      	ldr	r2, [pc, #408]	; (8007528 <HAL_DMA_Start_IT+0x1f8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d045      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a65      	ldr	r2, [pc, #404]	; (800752c <HAL_DMA_Start_IT+0x1fc>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d040      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a63      	ldr	r2, [pc, #396]	; (8007530 <HAL_DMA_Start_IT+0x200>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03b      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a62      	ldr	r2, [pc, #392]	; (8007534 <HAL_DMA_Start_IT+0x204>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d036      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a60      	ldr	r2, [pc, #384]	; (8007538 <HAL_DMA_Start_IT+0x208>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a5f      	ldr	r2, [pc, #380]	; (800753c <HAL_DMA_Start_IT+0x20c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d02c      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a5d      	ldr	r2, [pc, #372]	; (8007540 <HAL_DMA_Start_IT+0x210>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d027      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a5c      	ldr	r2, [pc, #368]	; (8007544 <HAL_DMA_Start_IT+0x214>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a5a      	ldr	r2, [pc, #360]	; (8007548 <HAL_DMA_Start_IT+0x218>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a59      	ldr	r2, [pc, #356]	; (800754c <HAL_DMA_Start_IT+0x21c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a57      	ldr	r2, [pc, #348]	; (8007550 <HAL_DMA_Start_IT+0x220>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a56      	ldr	r2, [pc, #344]	; (8007554 <HAL_DMA_Start_IT+0x224>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a54      	ldr	r2, [pc, #336]	; (8007558 <HAL_DMA_Start_IT+0x228>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a53      	ldr	r2, [pc, #332]	; (800755c <HAL_DMA_Start_IT+0x22c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_DMA_Start_IT+0xee>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a51      	ldr	r2, [pc, #324]	; (8007560 <HAL_DMA_Start_IT+0x230>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d108      	bne.n	8007430 <HAL_DMA_Start_IT+0x100>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e007      	b.n	8007440 <HAL_DMA_Start_IT+0x110>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f001 f912 	bl	8008670 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a34      	ldr	r2, [pc, #208]	; (8007524 <HAL_DMA_Start_IT+0x1f4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d04a      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a33      	ldr	r2, [pc, #204]	; (8007528 <HAL_DMA_Start_IT+0x1f8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d045      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a31      	ldr	r2, [pc, #196]	; (800752c <HAL_DMA_Start_IT+0x1fc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d040      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a30      	ldr	r2, [pc, #192]	; (8007530 <HAL_DMA_Start_IT+0x200>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d03b      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2e      	ldr	r2, [pc, #184]	; (8007534 <HAL_DMA_Start_IT+0x204>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d036      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2d      	ldr	r2, [pc, #180]	; (8007538 <HAL_DMA_Start_IT+0x208>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d031      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2b      	ldr	r2, [pc, #172]	; (800753c <HAL_DMA_Start_IT+0x20c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02c      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <HAL_DMA_Start_IT+0x210>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d027      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a28      	ldr	r2, [pc, #160]	; (8007544 <HAL_DMA_Start_IT+0x214>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a27      	ldr	r2, [pc, #156]	; (8007548 <HAL_DMA_Start_IT+0x218>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a25      	ldr	r2, [pc, #148]	; (800754c <HAL_DMA_Start_IT+0x21c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a24      	ldr	r2, [pc, #144]	; (8007550 <HAL_DMA_Start_IT+0x220>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a22      	ldr	r2, [pc, #136]	; (8007554 <HAL_DMA_Start_IT+0x224>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a21      	ldr	r2, [pc, #132]	; (8007558 <HAL_DMA_Start_IT+0x228>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1f      	ldr	r2, [pc, #124]	; (800755c <HAL_DMA_Start_IT+0x22c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_Start_IT+0x1bc>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <HAL_DMA_Start_IT+0x230>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d101      	bne.n	80074f0 <HAL_DMA_Start_IT+0x1c0>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <HAL_DMA_Start_IT+0x1c2>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d036      	beq.n	8007564 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f023 021e 	bic.w	r2, r3, #30
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0216 	orr.w	r2, r2, #22
 8007508:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d03e      	beq.n	8007590 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0208 	orr.w	r2, r2, #8
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e035      	b.n	8007590 <HAL_DMA_Start_IT+0x260>
 8007524:	40020010 	.word	0x40020010
 8007528:	40020028 	.word	0x40020028
 800752c:	40020040 	.word	0x40020040
 8007530:	40020058 	.word	0x40020058
 8007534:	40020070 	.word	0x40020070
 8007538:	40020088 	.word	0x40020088
 800753c:	400200a0 	.word	0x400200a0
 8007540:	400200b8 	.word	0x400200b8
 8007544:	40020410 	.word	0x40020410
 8007548:	40020428 	.word	0x40020428
 800754c:	40020440 	.word	0x40020440
 8007550:	40020458 	.word	0x40020458
 8007554:	40020470 	.word	0x40020470
 8007558:	40020488 	.word	0x40020488
 800755c:	400204a0 	.word	0x400204a0
 8007560:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f023 020e 	bic.w	r2, r3, #14
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 020a 	orr.w	r2, r2, #10
 8007576:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0204 	orr.w	r2, r2, #4
 800758e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a83      	ldr	r2, [pc, #524]	; (80077a4 <HAL_DMA_Start_IT+0x474>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d072      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a82      	ldr	r2, [pc, #520]	; (80077a8 <HAL_DMA_Start_IT+0x478>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d06d      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a80      	ldr	r2, [pc, #512]	; (80077ac <HAL_DMA_Start_IT+0x47c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d068      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7f      	ldr	r2, [pc, #508]	; (80077b0 <HAL_DMA_Start_IT+0x480>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d063      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a7d      	ldr	r2, [pc, #500]	; (80077b4 <HAL_DMA_Start_IT+0x484>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d05e      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a7c      	ldr	r2, [pc, #496]	; (80077b8 <HAL_DMA_Start_IT+0x488>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d059      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7a      	ldr	r2, [pc, #488]	; (80077bc <HAL_DMA_Start_IT+0x48c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d054      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a79      	ldr	r2, [pc, #484]	; (80077c0 <HAL_DMA_Start_IT+0x490>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d04f      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a77      	ldr	r2, [pc, #476]	; (80077c4 <HAL_DMA_Start_IT+0x494>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d04a      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a76      	ldr	r2, [pc, #472]	; (80077c8 <HAL_DMA_Start_IT+0x498>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d045      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a74      	ldr	r2, [pc, #464]	; (80077cc <HAL_DMA_Start_IT+0x49c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d040      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a73      	ldr	r2, [pc, #460]	; (80077d0 <HAL_DMA_Start_IT+0x4a0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d03b      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a71      	ldr	r2, [pc, #452]	; (80077d4 <HAL_DMA_Start_IT+0x4a4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d036      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a70      	ldr	r2, [pc, #448]	; (80077d8 <HAL_DMA_Start_IT+0x4a8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d031      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a6e      	ldr	r2, [pc, #440]	; (80077dc <HAL_DMA_Start_IT+0x4ac>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d02c      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6d      	ldr	r2, [pc, #436]	; (80077e0 <HAL_DMA_Start_IT+0x4b0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d027      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6b      	ldr	r2, [pc, #428]	; (80077e4 <HAL_DMA_Start_IT+0x4b4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d022      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a6a      	ldr	r2, [pc, #424]	; (80077e8 <HAL_DMA_Start_IT+0x4b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01d      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a68      	ldr	r2, [pc, #416]	; (80077ec <HAL_DMA_Start_IT+0x4bc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a67      	ldr	r2, [pc, #412]	; (80077f0 <HAL_DMA_Start_IT+0x4c0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a65      	ldr	r2, [pc, #404]	; (80077f4 <HAL_DMA_Start_IT+0x4c4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a64      	ldr	r2, [pc, #400]	; (80077f8 <HAL_DMA_Start_IT+0x4c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a62      	ldr	r2, [pc, #392]	; (80077fc <HAL_DMA_Start_IT+0x4cc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_DMA_Start_IT+0x350>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a61      	ldr	r2, [pc, #388]	; (8007800 <HAL_DMA_Start_IT+0x4d0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d101      	bne.n	8007684 <HAL_DMA_Start_IT+0x354>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_DMA_Start_IT+0x356>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01a      	beq.n	80076c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d007      	beq.n	80076a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a37      	ldr	r2, [pc, #220]	; (80077a4 <HAL_DMA_Start_IT+0x474>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d04a      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a36      	ldr	r2, [pc, #216]	; (80077a8 <HAL_DMA_Start_IT+0x478>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d045      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a34      	ldr	r2, [pc, #208]	; (80077ac <HAL_DMA_Start_IT+0x47c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d040      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <HAL_DMA_Start_IT+0x480>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d03b      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a31      	ldr	r2, [pc, #196]	; (80077b4 <HAL_DMA_Start_IT+0x484>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d036      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a30      	ldr	r2, [pc, #192]	; (80077b8 <HAL_DMA_Start_IT+0x488>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d031      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a2e      	ldr	r2, [pc, #184]	; (80077bc <HAL_DMA_Start_IT+0x48c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02c      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <HAL_DMA_Start_IT+0x490>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d027      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a2b      	ldr	r2, [pc, #172]	; (80077c4 <HAL_DMA_Start_IT+0x494>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d022      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <HAL_DMA_Start_IT+0x498>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01d      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a28      	ldr	r2, [pc, #160]	; (80077cc <HAL_DMA_Start_IT+0x49c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d018      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a27      	ldr	r2, [pc, #156]	; (80077d0 <HAL_DMA_Start_IT+0x4a0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a25      	ldr	r2, [pc, #148]	; (80077d4 <HAL_DMA_Start_IT+0x4a4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00e      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a24      	ldr	r2, [pc, #144]	; (80077d8 <HAL_DMA_Start_IT+0x4a8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d009      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_DMA_Start_IT+0x4ac>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d004      	beq.n	8007760 <HAL_DMA_Start_IT+0x430>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <HAL_DMA_Start_IT+0x4b0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <HAL_DMA_Start_IT+0x442>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	e012      	b.n	8007798 <HAL_DMA_Start_IT+0x468>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e009      	b.n	8007798 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800778a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007798:	7dfb      	ldrb	r3, [r7, #23]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40020010 	.word	0x40020010
 80077a8:	40020028 	.word	0x40020028
 80077ac:	40020040 	.word	0x40020040
 80077b0:	40020058 	.word	0x40020058
 80077b4:	40020070 	.word	0x40020070
 80077b8:	40020088 	.word	0x40020088
 80077bc:	400200a0 	.word	0x400200a0
 80077c0:	400200b8 	.word	0x400200b8
 80077c4:	40020410 	.word	0x40020410
 80077c8:	40020428 	.word	0x40020428
 80077cc:	40020440 	.word	0x40020440
 80077d0:	40020458 	.word	0x40020458
 80077d4:	40020470 	.word	0x40020470
 80077d8:	40020488 	.word	0x40020488
 80077dc:	400204a0 	.word	0x400204a0
 80077e0:	400204b8 	.word	0x400204b8
 80077e4:	58025408 	.word	0x58025408
 80077e8:	5802541c 	.word	0x5802541c
 80077ec:	58025430 	.word	0x58025430
 80077f0:	58025444 	.word	0x58025444
 80077f4:	58025458 	.word	0x58025458
 80077f8:	5802546c 	.word	0x5802546c
 80077fc:	58025480 	.word	0x58025480
 8007800:	58025494 	.word	0x58025494

08007804 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007810:	4b67      	ldr	r3, [pc, #412]	; (80079b0 <HAL_DMA_IRQHandler+0x1ac>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a67      	ldr	r2, [pc, #412]	; (80079b4 <HAL_DMA_IRQHandler+0x1b0>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	0a9b      	lsrs	r3, r3, #10
 800781c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007828:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a5f      	ldr	r2, [pc, #380]	; (80079b8 <HAL_DMA_IRQHandler+0x1b4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a5d      	ldr	r2, [pc, #372]	; (80079bc <HAL_DMA_IRQHandler+0x1b8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a5c      	ldr	r2, [pc, #368]	; (80079c0 <HAL_DMA_IRQHandler+0x1bc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5a      	ldr	r2, [pc, #360]	; (80079c4 <HAL_DMA_IRQHandler+0x1c0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a59      	ldr	r2, [pc, #356]	; (80079c8 <HAL_DMA_IRQHandler+0x1c4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a57      	ldr	r2, [pc, #348]	; (80079cc <HAL_DMA_IRQHandler+0x1c8>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a56      	ldr	r2, [pc, #344]	; (80079d0 <HAL_DMA_IRQHandler+0x1cc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a54      	ldr	r2, [pc, #336]	; (80079d4 <HAL_DMA_IRQHandler+0x1d0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a53      	ldr	r2, [pc, #332]	; (80079d8 <HAL_DMA_IRQHandler+0x1d4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a51      	ldr	r2, [pc, #324]	; (80079dc <HAL_DMA_IRQHandler+0x1d8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a50      	ldr	r2, [pc, #320]	; (80079e0 <HAL_DMA_IRQHandler+0x1dc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a4e      	ldr	r2, [pc, #312]	; (80079e4 <HAL_DMA_IRQHandler+0x1e0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a4d      	ldr	r2, [pc, #308]	; (80079e8 <HAL_DMA_IRQHandler+0x1e4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a4b      	ldr	r2, [pc, #300]	; (80079ec <HAL_DMA_IRQHandler+0x1e8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a4a      	ldr	r2, [pc, #296]	; (80079f0 <HAL_DMA_IRQHandler+0x1ec>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <HAL_DMA_IRQHandler+0xd2>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a48      	ldr	r2, [pc, #288]	; (80079f4 <HAL_DMA_IRQHandler+0x1f0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <HAL_DMA_IRQHandler+0xd6>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_DMA_IRQHandler+0xd8>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 842b 	beq.w	8008138 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2208      	movs	r2, #8
 80078ec:	409a      	lsls	r2, r3
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80a2 	beq.w	8007a3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a2e      	ldr	r2, [pc, #184]	; (80079b8 <HAL_DMA_IRQHandler+0x1b4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d04a      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <HAL_DMA_IRQHandler+0x1b8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d045      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <HAL_DMA_IRQHandler+0x1bc>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d040      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <HAL_DMA_IRQHandler+0x1c0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d03b      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a28      	ldr	r2, [pc, #160]	; (80079c8 <HAL_DMA_IRQHandler+0x1c4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d036      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a27      	ldr	r2, [pc, #156]	; (80079cc <HAL_DMA_IRQHandler+0x1c8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d031      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a25      	ldr	r2, [pc, #148]	; (80079d0 <HAL_DMA_IRQHandler+0x1cc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d02c      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a24      	ldr	r2, [pc, #144]	; (80079d4 <HAL_DMA_IRQHandler+0x1d0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d027      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a22      	ldr	r2, [pc, #136]	; (80079d8 <HAL_DMA_IRQHandler+0x1d4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d022      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a21      	ldr	r2, [pc, #132]	; (80079dc <HAL_DMA_IRQHandler+0x1d8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d01d      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_DMA_IRQHandler+0x1dc>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d018      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <HAL_DMA_IRQHandler+0x1e0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <HAL_DMA_IRQHandler+0x1e4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00e      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1b      	ldr	r2, [pc, #108]	; (80079ec <HAL_DMA_IRQHandler+0x1e8>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d009      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_DMA_IRQHandler+0x1ec>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_DMA_IRQHandler+0x194>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <HAL_DMA_IRQHandler+0x1f0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d12f      	bne.n	80079f8 <HAL_DMA_IRQHandler+0x1f4>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e02e      	b.n	8007a0c <HAL_DMA_IRQHandler+0x208>
 80079ae:	bf00      	nop
 80079b0:	2000000c 	.word	0x2000000c
 80079b4:	1b4e81b5 	.word	0x1b4e81b5
 80079b8:	40020010 	.word	0x40020010
 80079bc:	40020028 	.word	0x40020028
 80079c0:	40020040 	.word	0x40020040
 80079c4:	40020058 	.word	0x40020058
 80079c8:	40020070 	.word	0x40020070
 80079cc:	40020088 	.word	0x40020088
 80079d0:	400200a0 	.word	0x400200a0
 80079d4:	400200b8 	.word	0x400200b8
 80079d8:	40020410 	.word	0x40020410
 80079dc:	40020428 	.word	0x40020428
 80079e0:	40020440 	.word	0x40020440
 80079e4:	40020458 	.word	0x40020458
 80079e8:	40020470 	.word	0x40020470
 80079ec:	40020488 	.word	0x40020488
 80079f0:	400204a0 	.word	0x400204a0
 80079f4:	400204b8 	.word	0x400204b8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0308 	and.w	r3, r3, #8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d015      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0204 	bic.w	r2, r2, #4
 8007a1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a24:	f003 031f 	and.w	r3, r3, #31
 8007a28:	2208      	movs	r2, #8
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	f043 0201 	orr.w	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d06e      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a69      	ldr	r2, [pc, #420]	; (8007bfc <HAL_DMA_IRQHandler+0x3f8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d04a      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a67      	ldr	r2, [pc, #412]	; (8007c00 <HAL_DMA_IRQHandler+0x3fc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d045      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a66      	ldr	r2, [pc, #408]	; (8007c04 <HAL_DMA_IRQHandler+0x400>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d040      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a64      	ldr	r2, [pc, #400]	; (8007c08 <HAL_DMA_IRQHandler+0x404>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d03b      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a63      	ldr	r2, [pc, #396]	; (8007c0c <HAL_DMA_IRQHandler+0x408>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d036      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a61      	ldr	r2, [pc, #388]	; (8007c10 <HAL_DMA_IRQHandler+0x40c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d031      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a60      	ldr	r2, [pc, #384]	; (8007c14 <HAL_DMA_IRQHandler+0x410>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d02c      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a5e      	ldr	r2, [pc, #376]	; (8007c18 <HAL_DMA_IRQHandler+0x414>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d027      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a5d      	ldr	r2, [pc, #372]	; (8007c1c <HAL_DMA_IRQHandler+0x418>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d022      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a5b      	ldr	r2, [pc, #364]	; (8007c20 <HAL_DMA_IRQHandler+0x41c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d01d      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a5a      	ldr	r2, [pc, #360]	; (8007c24 <HAL_DMA_IRQHandler+0x420>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d018      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a58      	ldr	r2, [pc, #352]	; (8007c28 <HAL_DMA_IRQHandler+0x424>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d013      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a57      	ldr	r2, [pc, #348]	; (8007c2c <HAL_DMA_IRQHandler+0x428>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00e      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a55      	ldr	r2, [pc, #340]	; (8007c30 <HAL_DMA_IRQHandler+0x42c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a54      	ldr	r2, [pc, #336]	; (8007c34 <HAL_DMA_IRQHandler+0x430>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_DMA_IRQHandler+0x2ee>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a52      	ldr	r2, [pc, #328]	; (8007c38 <HAL_DMA_IRQHandler+0x434>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10a      	bne.n	8007b08 <HAL_DMA_IRQHandler+0x304>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e003      	b.n	8007b10 <HAL_DMA_IRQHandler+0x30c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00d      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	f043 0202 	orr.w	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	2204      	movs	r2, #4
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 808f 	beq.w	8007c64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a2c      	ldr	r2, [pc, #176]	; (8007bfc <HAL_DMA_IRQHandler+0x3f8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d04a      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a2a      	ldr	r2, [pc, #168]	; (8007c00 <HAL_DMA_IRQHandler+0x3fc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d045      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a29      	ldr	r2, [pc, #164]	; (8007c04 <HAL_DMA_IRQHandler+0x400>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d040      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <HAL_DMA_IRQHandler+0x404>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d03b      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <HAL_DMA_IRQHandler+0x408>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d036      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <HAL_DMA_IRQHandler+0x40c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d031      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <HAL_DMA_IRQHandler+0x410>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d02c      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <HAL_DMA_IRQHandler+0x414>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d027      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <HAL_DMA_IRQHandler+0x418>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d022      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <HAL_DMA_IRQHandler+0x41c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01d      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1d      	ldr	r2, [pc, #116]	; (8007c24 <HAL_DMA_IRQHandler+0x420>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d018      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <HAL_DMA_IRQHandler+0x424>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <HAL_DMA_IRQHandler+0x428>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00e      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <HAL_DMA_IRQHandler+0x42c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <HAL_DMA_IRQHandler+0x430>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d004      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x3e2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <HAL_DMA_IRQHandler+0x434>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d12a      	bne.n	8007c3c <HAL_DMA_IRQHandler+0x438>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	e023      	b.n	8007c44 <HAL_DMA_IRQHandler+0x440>
 8007bfc:	40020010 	.word	0x40020010
 8007c00:	40020028 	.word	0x40020028
 8007c04:	40020040 	.word	0x40020040
 8007c08:	40020058 	.word	0x40020058
 8007c0c:	40020070 	.word	0x40020070
 8007c10:	40020088 	.word	0x40020088
 8007c14:	400200a0 	.word	0x400200a0
 8007c18:	400200b8 	.word	0x400200b8
 8007c1c:	40020410 	.word	0x40020410
 8007c20:	40020428 	.word	0x40020428
 8007c24:	40020440 	.word	0x40020440
 8007c28:	40020458 	.word	0x40020458
 8007c2c:	40020470 	.word	0x40020470
 8007c30:	40020488 	.word	0x40020488
 8007c34:	400204a0 	.word	0x400204a0
 8007c38:	400204b8 	.word	0x400204b8
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	2204      	movs	r2, #4
 8007c52:	409a      	lsls	r2, r3
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f043 0204 	orr.w	r2, r3, #4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	2210      	movs	r2, #16
 8007c6e:	409a      	lsls	r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 80a6 	beq.w	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a85      	ldr	r2, [pc, #532]	; (8007e94 <HAL_DMA_IRQHandler+0x690>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d04a      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a83      	ldr	r2, [pc, #524]	; (8007e98 <HAL_DMA_IRQHandler+0x694>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d045      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a82      	ldr	r2, [pc, #520]	; (8007e9c <HAL_DMA_IRQHandler+0x698>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d040      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a80      	ldr	r2, [pc, #512]	; (8007ea0 <HAL_DMA_IRQHandler+0x69c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d03b      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a7f      	ldr	r2, [pc, #508]	; (8007ea4 <HAL_DMA_IRQHandler+0x6a0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d036      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a7d      	ldr	r2, [pc, #500]	; (8007ea8 <HAL_DMA_IRQHandler+0x6a4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d031      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a7c      	ldr	r2, [pc, #496]	; (8007eac <HAL_DMA_IRQHandler+0x6a8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d02c      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7a      	ldr	r2, [pc, #488]	; (8007eb0 <HAL_DMA_IRQHandler+0x6ac>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d027      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a79      	ldr	r2, [pc, #484]	; (8007eb4 <HAL_DMA_IRQHandler+0x6b0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d022      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a77      	ldr	r2, [pc, #476]	; (8007eb8 <HAL_DMA_IRQHandler+0x6b4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d01d      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a76      	ldr	r2, [pc, #472]	; (8007ebc <HAL_DMA_IRQHandler+0x6b8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d018      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a74      	ldr	r2, [pc, #464]	; (8007ec0 <HAL_DMA_IRQHandler+0x6bc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a73      	ldr	r2, [pc, #460]	; (8007ec4 <HAL_DMA_IRQHandler+0x6c0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a71      	ldr	r2, [pc, #452]	; (8007ec8 <HAL_DMA_IRQHandler+0x6c4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a70      	ldr	r2, [pc, #448]	; (8007ecc <HAL_DMA_IRQHandler+0x6c8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x516>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a6e      	ldr	r2, [pc, #440]	; (8007ed0 <HAL_DMA_IRQHandler+0x6cc>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10a      	bne.n	8007d30 <HAL_DMA_IRQHandler+0x52c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	e009      	b.n	8007d44 <HAL_DMA_IRQHandler+0x540>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d03e      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2210      	movs	r2, #16
 8007d52:	409a      	lsls	r2, r3
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d018      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d024      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
 8007d84:	e01f      	b.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01b      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
 8007d96:	e016      	b.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d107      	bne.n	8007db6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0208 	bic.w	r2, r2, #8
 8007db4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dca:	f003 031f 	and.w	r3, r3, #31
 8007dce:	2220      	movs	r2, #32
 8007dd0:	409a      	lsls	r2, r3
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8110 	beq.w	8007ffc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <HAL_DMA_IRQHandler+0x690>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d04a      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2b      	ldr	r2, [pc, #172]	; (8007e98 <HAL_DMA_IRQHandler+0x694>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d045      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <HAL_DMA_IRQHandler+0x698>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d040      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a28      	ldr	r2, [pc, #160]	; (8007ea0 <HAL_DMA_IRQHandler+0x69c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d03b      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <HAL_DMA_IRQHandler+0x6a0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d036      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a25      	ldr	r2, [pc, #148]	; (8007ea8 <HAL_DMA_IRQHandler+0x6a4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d031      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a23      	ldr	r2, [pc, #140]	; (8007eac <HAL_DMA_IRQHandler+0x6a8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d02c      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a22      	ldr	r2, [pc, #136]	; (8007eb0 <HAL_DMA_IRQHandler+0x6ac>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d027      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a20      	ldr	r2, [pc, #128]	; (8007eb4 <HAL_DMA_IRQHandler+0x6b0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d022      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1f      	ldr	r2, [pc, #124]	; (8007eb8 <HAL_DMA_IRQHandler+0x6b4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d01d      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1d      	ldr	r2, [pc, #116]	; (8007ebc <HAL_DMA_IRQHandler+0x6b8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d018      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ec0 <HAL_DMA_IRQHandler+0x6bc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d013      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <HAL_DMA_IRQHandler+0x6c0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00e      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <HAL_DMA_IRQHandler+0x6c4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d009      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a17      	ldr	r2, [pc, #92]	; (8007ecc <HAL_DMA_IRQHandler+0x6c8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <HAL_DMA_IRQHandler+0x678>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a16      	ldr	r2, [pc, #88]	; (8007ed0 <HAL_DMA_IRQHandler+0x6cc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d12b      	bne.n	8007ed4 <HAL_DMA_IRQHandler+0x6d0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bf14      	ite	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	2300      	moveq	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	e02a      	b.n	8007ee8 <HAL_DMA_IRQHandler+0x6e4>
 8007e92:	bf00      	nop
 8007e94:	40020010 	.word	0x40020010
 8007e98:	40020028 	.word	0x40020028
 8007e9c:	40020040 	.word	0x40020040
 8007ea0:	40020058 	.word	0x40020058
 8007ea4:	40020070 	.word	0x40020070
 8007ea8:	40020088 	.word	0x40020088
 8007eac:	400200a0 	.word	0x400200a0
 8007eb0:	400200b8 	.word	0x400200b8
 8007eb4:	40020410 	.word	0x40020410
 8007eb8:	40020428 	.word	0x40020428
 8007ebc:	40020440 	.word	0x40020440
 8007ec0:	40020458 	.word	0x40020458
 8007ec4:	40020470 	.word	0x40020470
 8007ec8:	40020488 	.word	0x40020488
 8007ecc:	400204a0 	.word	0x400204a0
 8007ed0:	400204b8 	.word	0x400204b8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf14      	ite	ne
 8007ee2:	2301      	movne	r3, #1
 8007ee4:	2300      	moveq	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 8087 	beq.w	8007ffc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	409a      	lsls	r2, r3
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d139      	bne.n	8007f7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0216 	bic.w	r2, r2, #22
 8007f18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695a      	ldr	r2, [r3, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <HAL_DMA_IRQHandler+0x736>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0208 	bic.w	r2, r2, #8
 8007f48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	223f      	movs	r2, #63	; 0x3f
 8007f54:	409a      	lsls	r2, r3
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 834a 	beq.w	8008608 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
          }
          return;
 8007f7c:	e344      	b.n	8008608 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d018      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d108      	bne.n	8007fac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02c      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
 8007faa:	e027      	b.n	8007ffc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d023      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	4798      	blx	r3
 8007fbc:	e01e      	b.n	8007ffc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10f      	bne.n	8007fec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0210 	bic.w	r2, r2, #16
 8007fda:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8306 	beq.w	8008612 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8088 	beq.w	8008124 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2204      	movs	r2, #4
 8008018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a7a      	ldr	r2, [pc, #488]	; (800820c <HAL_DMA_IRQHandler+0xa08>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d04a      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a79      	ldr	r2, [pc, #484]	; (8008210 <HAL_DMA_IRQHandler+0xa0c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d045      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a77      	ldr	r2, [pc, #476]	; (8008214 <HAL_DMA_IRQHandler+0xa10>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d040      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a76      	ldr	r2, [pc, #472]	; (8008218 <HAL_DMA_IRQHandler+0xa14>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d03b      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a74      	ldr	r2, [pc, #464]	; (800821c <HAL_DMA_IRQHandler+0xa18>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d036      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a73      	ldr	r2, [pc, #460]	; (8008220 <HAL_DMA_IRQHandler+0xa1c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d031      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a71      	ldr	r2, [pc, #452]	; (8008224 <HAL_DMA_IRQHandler+0xa20>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d02c      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a70      	ldr	r2, [pc, #448]	; (8008228 <HAL_DMA_IRQHandler+0xa24>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d027      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a6e      	ldr	r2, [pc, #440]	; (800822c <HAL_DMA_IRQHandler+0xa28>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d022      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a6d      	ldr	r2, [pc, #436]	; (8008230 <HAL_DMA_IRQHandler+0xa2c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d01d      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a6b      	ldr	r2, [pc, #428]	; (8008234 <HAL_DMA_IRQHandler+0xa30>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d018      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6a      	ldr	r2, [pc, #424]	; (8008238 <HAL_DMA_IRQHandler+0xa34>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a68      	ldr	r2, [pc, #416]	; (800823c <HAL_DMA_IRQHandler+0xa38>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00e      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a67      	ldr	r2, [pc, #412]	; (8008240 <HAL_DMA_IRQHandler+0xa3c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a65      	ldr	r2, [pc, #404]	; (8008244 <HAL_DMA_IRQHandler+0xa40>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_DMA_IRQHandler+0x8b8>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a64      	ldr	r2, [pc, #400]	; (8008248 <HAL_DMA_IRQHandler+0xa44>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d108      	bne.n	80080ce <HAL_DMA_IRQHandler+0x8ca>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e007      	b.n	80080de <HAL_DMA_IRQHandler+0x8da>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d307      	bcc.n	80080fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1f2      	bne.n	80080de <HAL_DMA_IRQHandler+0x8da>
 80080f8:	e000      	b.n	80080fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80080fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008112:	e003      	b.n	800811c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 8272 	beq.w	8008612 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	4798      	blx	r3
 8008136:	e26c      	b.n	8008612 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a43      	ldr	r2, [pc, #268]	; (800824c <HAL_DMA_IRQHandler+0xa48>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d022      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a42      	ldr	r2, [pc, #264]	; (8008250 <HAL_DMA_IRQHandler+0xa4c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d01d      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a40      	ldr	r2, [pc, #256]	; (8008254 <HAL_DMA_IRQHandler+0xa50>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d018      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a3f      	ldr	r2, [pc, #252]	; (8008258 <HAL_DMA_IRQHandler+0xa54>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d013      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a3d      	ldr	r2, [pc, #244]	; (800825c <HAL_DMA_IRQHandler+0xa58>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00e      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a3c      	ldr	r2, [pc, #240]	; (8008260 <HAL_DMA_IRQHandler+0xa5c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d009      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a3a      	ldr	r2, [pc, #232]	; (8008264 <HAL_DMA_IRQHandler+0xa60>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d004      	beq.n	8008188 <HAL_DMA_IRQHandler+0x984>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a39      	ldr	r2, [pc, #228]	; (8008268 <HAL_DMA_IRQHandler+0xa64>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d101      	bne.n	800818c <HAL_DMA_IRQHandler+0x988>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_DMA_IRQHandler+0x98a>
 800818c:	2300      	movs	r3, #0
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 823f 	beq.w	8008612 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	2204      	movs	r2, #4
 80081a6:	409a      	lsls	r2, r3
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 80cd 	beq.w	800834c <HAL_DMA_IRQHandler+0xb48>
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 80c7 	beq.w	800834c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2204      	movs	r2, #4
 80081c8:	409a      	lsls	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d049      	beq.n	800826c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 8210 	beq.w	800860c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081f4:	e20a      	b.n	800860c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8206 	beq.w	800860c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008208:	e200      	b.n	800860c <HAL_DMA_IRQHandler+0xe08>
 800820a:	bf00      	nop
 800820c:	40020010 	.word	0x40020010
 8008210:	40020028 	.word	0x40020028
 8008214:	40020040 	.word	0x40020040
 8008218:	40020058 	.word	0x40020058
 800821c:	40020070 	.word	0x40020070
 8008220:	40020088 	.word	0x40020088
 8008224:	400200a0 	.word	0x400200a0
 8008228:	400200b8 	.word	0x400200b8
 800822c:	40020410 	.word	0x40020410
 8008230:	40020428 	.word	0x40020428
 8008234:	40020440 	.word	0x40020440
 8008238:	40020458 	.word	0x40020458
 800823c:	40020470 	.word	0x40020470
 8008240:	40020488 	.word	0x40020488
 8008244:	400204a0 	.word	0x400204a0
 8008248:	400204b8 	.word	0x400204b8
 800824c:	58025408 	.word	0x58025408
 8008250:	5802541c 	.word	0x5802541c
 8008254:	58025430 	.word	0x58025430
 8008258:	58025444 	.word	0x58025444
 800825c:	58025458 	.word	0x58025458
 8008260:	5802546c 	.word	0x5802546c
 8008264:	58025480 	.word	0x58025480
 8008268:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d160      	bne.n	8008338 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a7f      	ldr	r2, [pc, #508]	; (8008478 <HAL_DMA_IRQHandler+0xc74>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d04a      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a7d      	ldr	r2, [pc, #500]	; (800847c <HAL_DMA_IRQHandler+0xc78>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d045      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a7c      	ldr	r2, [pc, #496]	; (8008480 <HAL_DMA_IRQHandler+0xc7c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d040      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a7a      	ldr	r2, [pc, #488]	; (8008484 <HAL_DMA_IRQHandler+0xc80>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d03b      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a79      	ldr	r2, [pc, #484]	; (8008488 <HAL_DMA_IRQHandler+0xc84>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d036      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a77      	ldr	r2, [pc, #476]	; (800848c <HAL_DMA_IRQHandler+0xc88>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d031      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a76      	ldr	r2, [pc, #472]	; (8008490 <HAL_DMA_IRQHandler+0xc8c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d02c      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a74      	ldr	r2, [pc, #464]	; (8008494 <HAL_DMA_IRQHandler+0xc90>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d027      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a73      	ldr	r2, [pc, #460]	; (8008498 <HAL_DMA_IRQHandler+0xc94>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d022      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a71      	ldr	r2, [pc, #452]	; (800849c <HAL_DMA_IRQHandler+0xc98>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d01d      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a70      	ldr	r2, [pc, #448]	; (80084a0 <HAL_DMA_IRQHandler+0xc9c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d018      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a6e      	ldr	r2, [pc, #440]	; (80084a4 <HAL_DMA_IRQHandler+0xca0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d013      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a6d      	ldr	r2, [pc, #436]	; (80084a8 <HAL_DMA_IRQHandler+0xca4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00e      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a6b      	ldr	r2, [pc, #428]	; (80084ac <HAL_DMA_IRQHandler+0xca8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d009      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a6a      	ldr	r2, [pc, #424]	; (80084b0 <HAL_DMA_IRQHandler+0xcac>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d004      	beq.n	8008316 <HAL_DMA_IRQHandler+0xb12>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a68      	ldr	r2, [pc, #416]	; (80084b4 <HAL_DMA_IRQHandler+0xcb0>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d108      	bne.n	8008328 <HAL_DMA_IRQHandler+0xb24>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0208 	bic.w	r2, r2, #8
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e007      	b.n	8008338 <HAL_DMA_IRQHandler+0xb34>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0204 	bic.w	r2, r2, #4
 8008336:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8165 	beq.w	800860c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800834a:	e15f      	b.n	800860c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008350:	f003 031f 	and.w	r3, r3, #31
 8008354:	2202      	movs	r2, #2
 8008356:	409a      	lsls	r2, r3
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 80c5 	beq.w	80084ec <HAL_DMA_IRQHandler+0xce8>
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80bf 	beq.w	80084ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2202      	movs	r2, #2
 8008378:	409a      	lsls	r2, r3
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008384:	2b00      	cmp	r3, #0
 8008386:	d018      	beq.n	80083ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 813a 	beq.w	8008610 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083a4:	e134      	b.n	8008610 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8130 	beq.w	8008610 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083b8:	e12a      	b.n	8008610 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f003 0320 	and.w	r3, r3, #32
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8089 	bne.w	80084d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a2b      	ldr	r2, [pc, #172]	; (8008478 <HAL_DMA_IRQHandler+0xc74>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d04a      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a29      	ldr	r2, [pc, #164]	; (800847c <HAL_DMA_IRQHandler+0xc78>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d045      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a28      	ldr	r2, [pc, #160]	; (8008480 <HAL_DMA_IRQHandler+0xc7c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d040      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a26      	ldr	r2, [pc, #152]	; (8008484 <HAL_DMA_IRQHandler+0xc80>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d03b      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a25      	ldr	r2, [pc, #148]	; (8008488 <HAL_DMA_IRQHandler+0xc84>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d036      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a23      	ldr	r2, [pc, #140]	; (800848c <HAL_DMA_IRQHandler+0xc88>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d031      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a22      	ldr	r2, [pc, #136]	; (8008490 <HAL_DMA_IRQHandler+0xc8c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d02c      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <HAL_DMA_IRQHandler+0xc90>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d027      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <HAL_DMA_IRQHandler+0xc94>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d022      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1d      	ldr	r2, [pc, #116]	; (800849c <HAL_DMA_IRQHandler+0xc98>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01d      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_DMA_IRQHandler+0xc9c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d018      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1a      	ldr	r2, [pc, #104]	; (80084a4 <HAL_DMA_IRQHandler+0xca0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a19      	ldr	r2, [pc, #100]	; (80084a8 <HAL_DMA_IRQHandler+0xca4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a17      	ldr	r2, [pc, #92]	; (80084ac <HAL_DMA_IRQHandler+0xca8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <HAL_DMA_IRQHandler+0xcac>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_DMA_IRQHandler+0xc62>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <HAL_DMA_IRQHandler+0xcb0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d128      	bne.n	80084b8 <HAL_DMA_IRQHandler+0xcb4>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0214 	bic.w	r2, r2, #20
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	e027      	b.n	80084c8 <HAL_DMA_IRQHandler+0xcc4>
 8008478:	40020010 	.word	0x40020010
 800847c:	40020028 	.word	0x40020028
 8008480:	40020040 	.word	0x40020040
 8008484:	40020058 	.word	0x40020058
 8008488:	40020070 	.word	0x40020070
 800848c:	40020088 	.word	0x40020088
 8008490:	400200a0 	.word	0x400200a0
 8008494:	400200b8 	.word	0x400200b8
 8008498:	40020410 	.word	0x40020410
 800849c:	40020428 	.word	0x40020428
 80084a0:	40020440 	.word	0x40020440
 80084a4:	40020458 	.word	0x40020458
 80084a8:	40020470 	.word	0x40020470
 80084ac:	40020488 	.word	0x40020488
 80084b0:	400204a0 	.word	0x400204a0
 80084b4:	400204b8 	.word	0x400204b8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 020a 	bic.w	r2, r2, #10
 80084c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8097 	beq.w	8008610 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084ea:	e091      	b.n	8008610 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	2208      	movs	r2, #8
 80084f6:	409a      	lsls	r2, r3
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8088 	beq.w	8008612 <HAL_DMA_IRQHandler+0xe0e>
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8082 	beq.w	8008612 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a41      	ldr	r2, [pc, #260]	; (8008618 <HAL_DMA_IRQHandler+0xe14>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d04a      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a3f      	ldr	r2, [pc, #252]	; (800861c <HAL_DMA_IRQHandler+0xe18>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d045      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3e      	ldr	r2, [pc, #248]	; (8008620 <HAL_DMA_IRQHandler+0xe1c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d040      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a3c      	ldr	r2, [pc, #240]	; (8008624 <HAL_DMA_IRQHandler+0xe20>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d03b      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a3b      	ldr	r2, [pc, #236]	; (8008628 <HAL_DMA_IRQHandler+0xe24>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d036      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a39      	ldr	r2, [pc, #228]	; (800862c <HAL_DMA_IRQHandler+0xe28>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d031      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a38      	ldr	r2, [pc, #224]	; (8008630 <HAL_DMA_IRQHandler+0xe2c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d02c      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a36      	ldr	r2, [pc, #216]	; (8008634 <HAL_DMA_IRQHandler+0xe30>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d027      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a35      	ldr	r2, [pc, #212]	; (8008638 <HAL_DMA_IRQHandler+0xe34>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d022      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a33      	ldr	r2, [pc, #204]	; (800863c <HAL_DMA_IRQHandler+0xe38>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d01d      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a32      	ldr	r2, [pc, #200]	; (8008640 <HAL_DMA_IRQHandler+0xe3c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d018      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a30      	ldr	r2, [pc, #192]	; (8008644 <HAL_DMA_IRQHandler+0xe40>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a2f      	ldr	r2, [pc, #188]	; (8008648 <HAL_DMA_IRQHandler+0xe44>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00e      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a2d      	ldr	r2, [pc, #180]	; (800864c <HAL_DMA_IRQHandler+0xe48>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a2c      	ldr	r2, [pc, #176]	; (8008650 <HAL_DMA_IRQHandler+0xe4c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_DMA_IRQHandler+0xdaa>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <HAL_DMA_IRQHandler+0xe50>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d108      	bne.n	80085c0 <HAL_DMA_IRQHandler+0xdbc>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 021c 	bic.w	r2, r2, #28
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e007      	b.n	80085d0 <HAL_DMA_IRQHandler+0xdcc>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 020e 	bic.w	r2, r2, #14
 80085ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	2201      	movs	r2, #1
 80085da:	409a      	lsls	r2, r3
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
 8008606:	e004      	b.n	8008612 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008608:	bf00      	nop
 800860a:	e002      	b.n	8008612 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800860c:	bf00      	nop
 800860e:	e000      	b.n	8008612 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008610:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008612:	3728      	adds	r7, #40	; 0x28
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40020010 	.word	0x40020010
 800861c:	40020028 	.word	0x40020028
 8008620:	40020040 	.word	0x40020040
 8008624:	40020058 	.word	0x40020058
 8008628:	40020070 	.word	0x40020070
 800862c:	40020088 	.word	0x40020088
 8008630:	400200a0 	.word	0x400200a0
 8008634:	400200b8 	.word	0x400200b8
 8008638:	40020410 	.word	0x40020410
 800863c:	40020428 	.word	0x40020428
 8008640:	40020440 	.word	0x40020440
 8008644:	40020458 	.word	0x40020458
 8008648:	40020470 	.word	0x40020470
 800864c:	40020488 	.word	0x40020488
 8008650:	400204a0 	.word	0x400204a0
 8008654:	400204b8 	.word	0x400204b8

08008658 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a7f      	ldr	r2, [pc, #508]	; (800888c <DMA_SetConfig+0x21c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d072      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a7d      	ldr	r2, [pc, #500]	; (8008890 <DMA_SetConfig+0x220>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d06d      	beq.n	800877a <DMA_SetConfig+0x10a>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a7c      	ldr	r2, [pc, #496]	; (8008894 <DMA_SetConfig+0x224>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d068      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a7a      	ldr	r2, [pc, #488]	; (8008898 <DMA_SetConfig+0x228>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d063      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a79      	ldr	r2, [pc, #484]	; (800889c <DMA_SetConfig+0x22c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d05e      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a77      	ldr	r2, [pc, #476]	; (80088a0 <DMA_SetConfig+0x230>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d059      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a76      	ldr	r2, [pc, #472]	; (80088a4 <DMA_SetConfig+0x234>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d054      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a74      	ldr	r2, [pc, #464]	; (80088a8 <DMA_SetConfig+0x238>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d04f      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a73      	ldr	r2, [pc, #460]	; (80088ac <DMA_SetConfig+0x23c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d04a      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a71      	ldr	r2, [pc, #452]	; (80088b0 <DMA_SetConfig+0x240>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d045      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a70      	ldr	r2, [pc, #448]	; (80088b4 <DMA_SetConfig+0x244>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d040      	beq.n	800877a <DMA_SetConfig+0x10a>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a6e      	ldr	r2, [pc, #440]	; (80088b8 <DMA_SetConfig+0x248>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d03b      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a6d      	ldr	r2, [pc, #436]	; (80088bc <DMA_SetConfig+0x24c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d036      	beq.n	800877a <DMA_SetConfig+0x10a>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a6b      	ldr	r2, [pc, #428]	; (80088c0 <DMA_SetConfig+0x250>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d031      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a6a      	ldr	r2, [pc, #424]	; (80088c4 <DMA_SetConfig+0x254>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d02c      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a68      	ldr	r2, [pc, #416]	; (80088c8 <DMA_SetConfig+0x258>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d027      	beq.n	800877a <DMA_SetConfig+0x10a>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a67      	ldr	r2, [pc, #412]	; (80088cc <DMA_SetConfig+0x25c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d022      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a65      	ldr	r2, [pc, #404]	; (80088d0 <DMA_SetConfig+0x260>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01d      	beq.n	800877a <DMA_SetConfig+0x10a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a64      	ldr	r2, [pc, #400]	; (80088d4 <DMA_SetConfig+0x264>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d018      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a62      	ldr	r2, [pc, #392]	; (80088d8 <DMA_SetConfig+0x268>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a61      	ldr	r2, [pc, #388]	; (80088dc <DMA_SetConfig+0x26c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00e      	beq.n	800877a <DMA_SetConfig+0x10a>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a5f      	ldr	r2, [pc, #380]	; (80088e0 <DMA_SetConfig+0x270>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d009      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a5e      	ldr	r2, [pc, #376]	; (80088e4 <DMA_SetConfig+0x274>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <DMA_SetConfig+0x10a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a5c      	ldr	r2, [pc, #368]	; (80088e8 <DMA_SetConfig+0x278>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d101      	bne.n	800877e <DMA_SetConfig+0x10e>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <DMA_SetConfig+0x110>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800878c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800879e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a39      	ldr	r2, [pc, #228]	; (800888c <DMA_SetConfig+0x21c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d04a      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a38      	ldr	r2, [pc, #224]	; (8008890 <DMA_SetConfig+0x220>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d045      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a36      	ldr	r2, [pc, #216]	; (8008894 <DMA_SetConfig+0x224>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d040      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a35      	ldr	r2, [pc, #212]	; (8008898 <DMA_SetConfig+0x228>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d03b      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a33      	ldr	r2, [pc, #204]	; (800889c <DMA_SetConfig+0x22c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d036      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a32      	ldr	r2, [pc, #200]	; (80088a0 <DMA_SetConfig+0x230>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d031      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a30      	ldr	r2, [pc, #192]	; (80088a4 <DMA_SetConfig+0x234>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d02c      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a2f      	ldr	r2, [pc, #188]	; (80088a8 <DMA_SetConfig+0x238>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d027      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a2d      	ldr	r2, [pc, #180]	; (80088ac <DMA_SetConfig+0x23c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d022      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a2c      	ldr	r2, [pc, #176]	; (80088b0 <DMA_SetConfig+0x240>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01d      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a2a      	ldr	r2, [pc, #168]	; (80088b4 <DMA_SetConfig+0x244>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a29      	ldr	r2, [pc, #164]	; (80088b8 <DMA_SetConfig+0x248>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a27      	ldr	r2, [pc, #156]	; (80088bc <DMA_SetConfig+0x24c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a26      	ldr	r2, [pc, #152]	; (80088c0 <DMA_SetConfig+0x250>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a24      	ldr	r2, [pc, #144]	; (80088c4 <DMA_SetConfig+0x254>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <DMA_SetConfig+0x1d0>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a23      	ldr	r2, [pc, #140]	; (80088c8 <DMA_SetConfig+0x258>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d101      	bne.n	8008844 <DMA_SetConfig+0x1d4>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <DMA_SetConfig+0x1d6>
 8008844:	2300      	movs	r3, #0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d059      	beq.n	80088fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884e:	f003 031f 	and.w	r3, r3, #31
 8008852:	223f      	movs	r2, #63	; 0x3f
 8008854:	409a      	lsls	r2, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008868:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d138      	bne.n	80088ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800888a:	e086      	b.n	800899a <DMA_SetConfig+0x32a>
 800888c:	40020010 	.word	0x40020010
 8008890:	40020028 	.word	0x40020028
 8008894:	40020040 	.word	0x40020040
 8008898:	40020058 	.word	0x40020058
 800889c:	40020070 	.word	0x40020070
 80088a0:	40020088 	.word	0x40020088
 80088a4:	400200a0 	.word	0x400200a0
 80088a8:	400200b8 	.word	0x400200b8
 80088ac:	40020410 	.word	0x40020410
 80088b0:	40020428 	.word	0x40020428
 80088b4:	40020440 	.word	0x40020440
 80088b8:	40020458 	.word	0x40020458
 80088bc:	40020470 	.word	0x40020470
 80088c0:	40020488 	.word	0x40020488
 80088c4:	400204a0 	.word	0x400204a0
 80088c8:	400204b8 	.word	0x400204b8
 80088cc:	58025408 	.word	0x58025408
 80088d0:	5802541c 	.word	0x5802541c
 80088d4:	58025430 	.word	0x58025430
 80088d8:	58025444 	.word	0x58025444
 80088dc:	58025458 	.word	0x58025458
 80088e0:	5802546c 	.word	0x5802546c
 80088e4:	58025480 	.word	0x58025480
 80088e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	60da      	str	r2, [r3, #12]
}
 80088fc:	e04d      	b.n	800899a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a29      	ldr	r2, [pc, #164]	; (80089a8 <DMA_SetConfig+0x338>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d022      	beq.n	800894e <DMA_SetConfig+0x2de>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a27      	ldr	r2, [pc, #156]	; (80089ac <DMA_SetConfig+0x33c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d01d      	beq.n	800894e <DMA_SetConfig+0x2de>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a26      	ldr	r2, [pc, #152]	; (80089b0 <DMA_SetConfig+0x340>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d018      	beq.n	800894e <DMA_SetConfig+0x2de>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a24      	ldr	r2, [pc, #144]	; (80089b4 <DMA_SetConfig+0x344>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <DMA_SetConfig+0x2de>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a23      	ldr	r2, [pc, #140]	; (80089b8 <DMA_SetConfig+0x348>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00e      	beq.n	800894e <DMA_SetConfig+0x2de>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a21      	ldr	r2, [pc, #132]	; (80089bc <DMA_SetConfig+0x34c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d009      	beq.n	800894e <DMA_SetConfig+0x2de>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a20      	ldr	r2, [pc, #128]	; (80089c0 <DMA_SetConfig+0x350>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d004      	beq.n	800894e <DMA_SetConfig+0x2de>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <DMA_SetConfig+0x354>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d101      	bne.n	8008952 <DMA_SetConfig+0x2e2>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <DMA_SetConfig+0x2e4>
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d020      	beq.n	800899a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	2201      	movs	r2, #1
 8008962:	409a      	lsls	r2, r3
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d108      	bne.n	800898a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	60da      	str	r2, [r3, #12]
}
 8008988:	e007      	b.n	800899a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	60da      	str	r2, [r3, #12]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	58025408 	.word	0x58025408
 80089ac:	5802541c 	.word	0x5802541c
 80089b0:	58025430 	.word	0x58025430
 80089b4:	58025444 	.word	0x58025444
 80089b8:	58025458 	.word	0x58025458
 80089bc:	5802546c 	.word	0x5802546c
 80089c0:	58025480 	.word	0x58025480
 80089c4:	58025494 	.word	0x58025494

080089c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a42      	ldr	r2, [pc, #264]	; (8008ae0 <DMA_CalcBaseAndBitshift+0x118>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d04a      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a41      	ldr	r2, [pc, #260]	; (8008ae4 <DMA_CalcBaseAndBitshift+0x11c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d045      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a3f      	ldr	r2, [pc, #252]	; (8008ae8 <DMA_CalcBaseAndBitshift+0x120>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d040      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a3e      	ldr	r2, [pc, #248]	; (8008aec <DMA_CalcBaseAndBitshift+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d03b      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a3c      	ldr	r2, [pc, #240]	; (8008af0 <DMA_CalcBaseAndBitshift+0x128>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d036      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a3b      	ldr	r2, [pc, #236]	; (8008af4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d031      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a39      	ldr	r2, [pc, #228]	; (8008af8 <DMA_CalcBaseAndBitshift+0x130>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d02c      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a38      	ldr	r2, [pc, #224]	; (8008afc <DMA_CalcBaseAndBitshift+0x134>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d027      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a36      	ldr	r2, [pc, #216]	; (8008b00 <DMA_CalcBaseAndBitshift+0x138>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d022      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a35      	ldr	r2, [pc, #212]	; (8008b04 <DMA_CalcBaseAndBitshift+0x13c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d01d      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a33      	ldr	r2, [pc, #204]	; (8008b08 <DMA_CalcBaseAndBitshift+0x140>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d018      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a32      	ldr	r2, [pc, #200]	; (8008b0c <DMA_CalcBaseAndBitshift+0x144>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a30      	ldr	r2, [pc, #192]	; (8008b10 <DMA_CalcBaseAndBitshift+0x148>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00e      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <DMA_CalcBaseAndBitshift+0x14c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d009      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a2d      	ldr	r2, [pc, #180]	; (8008b18 <DMA_CalcBaseAndBitshift+0x150>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <DMA_CalcBaseAndBitshift+0xa8>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <DMA_CalcBaseAndBitshift+0x154>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d101      	bne.n	8008a74 <DMA_CalcBaseAndBitshift+0xac>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <DMA_CalcBaseAndBitshift+0xae>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d024      	beq.n	8008ac4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	3b10      	subs	r3, #16
 8008a82:	4a27      	ldr	r2, [pc, #156]	; (8008b20 <DMA_CalcBaseAndBitshift+0x158>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	091b      	lsrs	r3, r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	4a24      	ldr	r2, [pc, #144]	; (8008b24 <DMA_CalcBaseAndBitshift+0x15c>)
 8008a94:	5cd3      	ldrb	r3, [r2, r3]
 8008a96:	461a      	mov	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d908      	bls.n	8008ab4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4b1f      	ldr	r3, [pc, #124]	; (8008b28 <DMA_CalcBaseAndBitshift+0x160>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	1d1a      	adds	r2, r3, #4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8008ab2:	e00d      	b.n	8008ad0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <DMA_CalcBaseAndBitshift+0x160>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8008ac2:	e005      	b.n	8008ad0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40020010 	.word	0x40020010
 8008ae4:	40020028 	.word	0x40020028
 8008ae8:	40020040 	.word	0x40020040
 8008aec:	40020058 	.word	0x40020058
 8008af0:	40020070 	.word	0x40020070
 8008af4:	40020088 	.word	0x40020088
 8008af8:	400200a0 	.word	0x400200a0
 8008afc:	400200b8 	.word	0x400200b8
 8008b00:	40020410 	.word	0x40020410
 8008b04:	40020428 	.word	0x40020428
 8008b08:	40020440 	.word	0x40020440
 8008b0c:	40020458 	.word	0x40020458
 8008b10:	40020470 	.word	0x40020470
 8008b14:	40020488 	.word	0x40020488
 8008b18:	400204a0 	.word	0x400204a0
 8008b1c:	400204b8 	.word	0x400204b8
 8008b20:	aaaaaaab 	.word	0xaaaaaaab
 8008b24:	08019568 	.word	0x08019568
 8008b28:	fffffc00 	.word	0xfffffc00

08008b2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d120      	bne.n	8008b82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d858      	bhi.n	8008bfa <DMA_CheckFifoParam+0xce>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <DMA_CheckFifoParam+0x24>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b73 	.word	0x08008b73
 8008b58:	08008b61 	.word	0x08008b61
 8008b5c:	08008bfb 	.word	0x08008bfb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d048      	beq.n	8008bfe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b70:	e045      	b.n	8008bfe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b7a:	d142      	bne.n	8008c02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008b80:	e03f      	b.n	8008c02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8a:	d123      	bne.n	8008bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d838      	bhi.n	8008c06 <DMA_CheckFifoParam+0xda>
 8008b94:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <DMA_CheckFifoParam+0x70>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bad 	.word	0x08008bad
 8008ba0:	08008bb3 	.word	0x08008bb3
 8008ba4:	08008bad 	.word	0x08008bad
 8008ba8:	08008bc5 	.word	0x08008bc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
        break;
 8008bb0:	e030      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d025      	beq.n	8008c0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008bc2:	e022      	b.n	8008c0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bcc:	d11f      	bne.n	8008c0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008bd2:	e01c      	b.n	8008c0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d902      	bls.n	8008be2 <DMA_CheckFifoParam+0xb6>
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d003      	beq.n	8008be8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008be0:	e018      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
        break;
 8008be6:	e015      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf8:	e00b      	b.n	8008c12 <DMA_CheckFifoParam+0xe6>
        break;
 8008bfa:	bf00      	nop
 8008bfc:	e00a      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        break;
 8008bfe:	bf00      	nop
 8008c00:	e008      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        break;
 8008c02:	bf00      	nop
 8008c04:	e006      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        break;
 8008c06:	bf00      	nop
 8008c08:	e004      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        break;
 8008c0a:	bf00      	nop
 8008c0c:	e002      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
        break;
 8008c0e:	bf00      	nop
 8008c10:	e000      	b.n	8008c14 <DMA_CheckFifoParam+0xe8>
    break;
 8008c12:	bf00      	nop
    }
  }

  return status;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a38      	ldr	r2, [pc, #224]	; (8008d18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d022      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a36      	ldr	r2, [pc, #216]	; (8008d1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d01d      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a35      	ldr	r2, [pc, #212]	; (8008d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d018      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a33      	ldr	r2, [pc, #204]	; (8008d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d013      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a32      	ldr	r2, [pc, #200]	; (8008d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00e      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a30      	ldr	r2, [pc, #192]	; (8008d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d009      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a2f      	ldr	r2, [pc, #188]	; (8008d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d004      	beq.n	8008c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a2d      	ldr	r2, [pc, #180]	; (8008d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d101      	bne.n	8008c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008c82:	2301      	movs	r3, #1
 8008c84:	e000      	b.n	8008c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01a      	beq.n	8008cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	3b08      	subs	r3, #8
 8008c94:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008c96:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9a:	091b      	lsrs	r3, r3, #4
 8008c9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4b26      	ldr	r3, [pc, #152]	; (8008d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a24      	ldr	r2, [pc, #144]	; (8008d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008cb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f003 031f 	and.w	r3, r3, #31
 8008cb8:	2201      	movs	r2, #1
 8008cba:	409a      	lsls	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008cc0:	e024      	b.n	8008d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	3b10      	subs	r3, #16
 8008cca:	4a1e      	ldr	r2, [pc, #120]	; (8008d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd0:	091b      	lsrs	r3, r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d806      	bhi.n	8008cea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4a1b      	ldr	r2, [pc, #108]	; (8008d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d902      	bls.n	8008cea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4b18      	ldr	r3, [pc, #96]	; (8008d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008cfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008d0c:	bf00      	nop
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	58025408 	.word	0x58025408
 8008d1c:	5802541c 	.word	0x5802541c
 8008d20:	58025430 	.word	0x58025430
 8008d24:	58025444 	.word	0x58025444
 8008d28:	58025458 	.word	0x58025458
 8008d2c:	5802546c 	.word	0x5802546c
 8008d30:	58025480 	.word	0x58025480
 8008d34:	58025494 	.word	0x58025494
 8008d38:	cccccccd 	.word	0xcccccccd
 8008d3c:	16009600 	.word	0x16009600
 8008d40:	58025880 	.word	0x58025880
 8008d44:	aaaaaaab 	.word	0xaaaaaaab
 8008d48:	400204b8 	.word	0x400204b8
 8008d4c:	4002040f 	.word	0x4002040f
 8008d50:	10008200 	.word	0x10008200
 8008d54:	40020880 	.word	0x40020880

08008d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d04a      	beq.n	8008e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d847      	bhi.n	8008e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a25      	ldr	r2, [pc, #148]	; (8008e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d022      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a24      	ldr	r2, [pc, #144]	; (8008e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d01d      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a22      	ldr	r2, [pc, #136]	; (8008e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a21      	ldr	r2, [pc, #132]	; (8008e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1f      	ldr	r2, [pc, #124]	; (8008e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1e      	ldr	r2, [pc, #120]	; (8008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a1c      	ldr	r2, [pc, #112]	; (8008e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a1b      	ldr	r2, [pc, #108]	; (8008e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d101      	bne.n	8008dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008de0:	671a      	str	r2, [r3, #112]	; 0x70
 8008de2:	e009      	b.n	8008df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a11      	ldr	r2, [pc, #68]	; (8008e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008df6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	409a      	lsls	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008e04:	bf00      	nop
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	58025408 	.word	0x58025408
 8008e14:	5802541c 	.word	0x5802541c
 8008e18:	58025430 	.word	0x58025430
 8008e1c:	58025444 	.word	0x58025444
 8008e20:	58025458 	.word	0x58025458
 8008e24:	5802546c 	.word	0x5802546c
 8008e28:	58025480 	.word	0x58025480
 8008e2c:	58025494 	.word	0x58025494
 8008e30:	1600963f 	.word	0x1600963f
 8008e34:	58025940 	.word	0x58025940
 8008e38:	1000823f 	.word	0x1000823f
 8008e3c:	40020940 	.word	0x40020940

08008e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b089      	sub	sp, #36	; 0x24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e4e:	4b89      	ldr	r3, [pc, #548]	; (8009074 <HAL_GPIO_Init+0x234>)
 8008e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e52:	e194      	b.n	800917e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	2101      	movs	r1, #1
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e60:	4013      	ands	r3, r2
 8008e62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8186 	beq.w	8009178 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d005      	beq.n	8008e84 <HAL_GPIO_Init+0x44>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d130      	bne.n	8008ee6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	2203      	movs	r2, #3
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	43db      	mvns	r3, r3
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008eba:	2201      	movs	r2, #1
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	43db      	mvns	r3, r3
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	091b      	lsrs	r3, r3, #4
 8008ed0:	f003 0201 	and.w	r2, r3, #1
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f003 0303 	and.w	r3, r3, #3
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d017      	beq.n	8008f22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	2203      	movs	r2, #3
 8008efe:	fa02 f303 	lsl.w	r3, r2, r3
 8008f02:	43db      	mvns	r3, r3
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	4013      	ands	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d123      	bne.n	8008f76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	08da      	lsrs	r2, r3, #3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3208      	adds	r2, #8
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	220f      	movs	r2, #15
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	43db      	mvns	r3, r3
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	08da      	lsrs	r2, r3, #3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3208      	adds	r2, #8
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	2203      	movs	r2, #3
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	43db      	mvns	r3, r3
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f003 0203 	and.w	r2, r3, #3
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 80e0 	beq.w	8009178 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fb8:	4b2f      	ldr	r3, [pc, #188]	; (8009078 <HAL_GPIO_Init+0x238>)
 8008fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fbe:	4a2e      	ldr	r2, [pc, #184]	; (8009078 <HAL_GPIO_Init+0x238>)
 8008fc0:	f043 0302 	orr.w	r3, r3, #2
 8008fc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008fc8:	4b2b      	ldr	r3, [pc, #172]	; (8009078 <HAL_GPIO_Init+0x238>)
 8008fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008fd6:	4a29      	ldr	r2, [pc, #164]	; (800907c <HAL_GPIO_Init+0x23c>)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	089b      	lsrs	r3, r3, #2
 8008fdc:	3302      	adds	r3, #2
 8008fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	220f      	movs	r2, #15
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	43db      	mvns	r3, r3
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a20      	ldr	r2, [pc, #128]	; (8009080 <HAL_GPIO_Init+0x240>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d052      	beq.n	80090a8 <HAL_GPIO_Init+0x268>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a1f      	ldr	r2, [pc, #124]	; (8009084 <HAL_GPIO_Init+0x244>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d031      	beq.n	800906e <HAL_GPIO_Init+0x22e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a1e      	ldr	r2, [pc, #120]	; (8009088 <HAL_GPIO_Init+0x248>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d02b      	beq.n	800906a <HAL_GPIO_Init+0x22a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a1d      	ldr	r2, [pc, #116]	; (800908c <HAL_GPIO_Init+0x24c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d025      	beq.n	8009066 <HAL_GPIO_Init+0x226>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <HAL_GPIO_Init+0x250>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d01f      	beq.n	8009062 <HAL_GPIO_Init+0x222>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a1b      	ldr	r2, [pc, #108]	; (8009094 <HAL_GPIO_Init+0x254>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d019      	beq.n	800905e <HAL_GPIO_Init+0x21e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a1a      	ldr	r2, [pc, #104]	; (8009098 <HAL_GPIO_Init+0x258>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <HAL_GPIO_Init+0x21a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a19      	ldr	r2, [pc, #100]	; (800909c <HAL_GPIO_Init+0x25c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00d      	beq.n	8009056 <HAL_GPIO_Init+0x216>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <HAL_GPIO_Init+0x260>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <HAL_GPIO_Init+0x212>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <HAL_GPIO_Init+0x264>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d101      	bne.n	800904e <HAL_GPIO_Init+0x20e>
 800904a:	2309      	movs	r3, #9
 800904c:	e02d      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 800904e:	230a      	movs	r3, #10
 8009050:	e02b      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 8009052:	2308      	movs	r3, #8
 8009054:	e029      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 8009056:	2307      	movs	r3, #7
 8009058:	e027      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 800905a:	2306      	movs	r3, #6
 800905c:	e025      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 800905e:	2305      	movs	r3, #5
 8009060:	e023      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 8009062:	2304      	movs	r3, #4
 8009064:	e021      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 8009066:	2303      	movs	r3, #3
 8009068:	e01f      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 800906a:	2302      	movs	r3, #2
 800906c:	e01d      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 800906e:	2301      	movs	r3, #1
 8009070:	e01b      	b.n	80090aa <HAL_GPIO_Init+0x26a>
 8009072:	bf00      	nop
 8009074:	58000080 	.word	0x58000080
 8009078:	58024400 	.word	0x58024400
 800907c:	58000400 	.word	0x58000400
 8009080:	58020000 	.word	0x58020000
 8009084:	58020400 	.word	0x58020400
 8009088:	58020800 	.word	0x58020800
 800908c:	58020c00 	.word	0x58020c00
 8009090:	58021000 	.word	0x58021000
 8009094:	58021400 	.word	0x58021400
 8009098:	58021800 	.word	0x58021800
 800909c:	58021c00 	.word	0x58021c00
 80090a0:	58022000 	.word	0x58022000
 80090a4:	58022400 	.word	0x58022400
 80090a8:	2300      	movs	r3, #0
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	f002 0203 	and.w	r2, r2, #3
 80090b0:	0092      	lsls	r2, r2, #2
 80090b2:	4093      	lsls	r3, r2
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090ba:	4938      	ldr	r1, [pc, #224]	; (800919c <HAL_GPIO_Init+0x35c>)
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	089b      	lsrs	r3, r3, #2
 80090c0:	3302      	adds	r3, #2
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80090c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	43db      	mvns	r3, r3
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	4013      	ands	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80090ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	43db      	mvns	r3, r3
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	4013      	ands	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	4313      	orrs	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800911c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	43db      	mvns	r3, r3
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	4013      	ands	r3, r2
 8009132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	43db      	mvns	r3, r3
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	4013      	ands	r3, r2
 800915c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	3301      	adds	r3, #1
 800917c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f ae63 	bne.w	8008e54 <HAL_GPIO_Init+0x14>
  }
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	3724      	adds	r7, #36	; 0x24
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	58000400 	.word	0x58000400

080091a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	887b      	ldrh	r3, [r7, #2]
 80091b2:	4013      	ands	r3, r2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091b8:	2301      	movs	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
 80091bc:	e001      	b.n	80091c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
 80091dc:	4613      	mov	r3, r2
 80091de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091e0:	787b      	ldrb	r3, [r7, #1]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091e6:	887a      	ldrh	r2, [r7, #2]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80091ec:	e003      	b.n	80091f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80091ee:	887b      	ldrh	r3, [r7, #2]
 80091f0:	041a      	lsls	r2, r3, #16
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	619a      	str	r2, [r3, #24]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009204:	b08f      	sub	sp, #60	; 0x3c
 8009206:	af0a      	add	r7, sp, #40	; 0x28
 8009208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e054      	b.n	80092be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d106      	bne.n	8009234 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7fb fa76 	bl	8004720 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2203      	movs	r2, #3
 8009238:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f00b faf3 	bl	801483e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	687e      	ldr	r6, [r7, #4]
 8009260:	466d      	mov	r5, sp
 8009262:	f106 0410 	add.w	r4, r6, #16
 8009266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800926a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800926c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800926e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009272:	e885 0003 	stmia.w	r5, {r0, r1}
 8009276:	1d33      	adds	r3, r6, #4
 8009278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800927a:	6838      	ldr	r0, [r7, #0]
 800927c:	f00b fa60 	bl	8014740 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2101      	movs	r1, #1
 8009286:	4618      	mov	r0, r3
 8009288:	f00b faea 	bl	8014860 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	603b      	str	r3, [r7, #0]
 8009292:	687e      	ldr	r6, [r7, #4]
 8009294:	466d      	mov	r5, sp
 8009296:	f106 0410 	add.w	r4, r6, #16
 800929a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800929e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80092aa:	1d33      	adds	r3, r6, #4
 80092ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092ae:	6838      	ldr	r0, [r7, #0]
 80092b0:	f00b fc92 	bl	8014bd8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092c6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092c6:	b590      	push	{r4, r7, lr}
 80092c8:	b089      	sub	sp, #36	; 0x24
 80092ca:	af04      	add	r7, sp, #16
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	4608      	mov	r0, r1
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	70fb      	strb	r3, [r7, #3]
 80092d8:	460b      	mov	r3, r1
 80092da:	70bb      	strb	r3, [r7, #2]
 80092dc:	4613      	mov	r3, r2
 80092de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_HCD_HC_Init+0x28>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e076      	b.n	80093dc <HAL_HCD_HC_Init+0x116>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	212c      	movs	r1, #44	; 0x2c
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
 8009302:	333d      	adds	r3, #61	; 0x3d
 8009304:	2200      	movs	r2, #0
 8009306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	212c      	movs	r1, #44	; 0x2c
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3338      	adds	r3, #56	; 0x38
 8009316:	787a      	ldrb	r2, [r7, #1]
 8009318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	212c      	movs	r1, #44	; 0x2c
 8009320:	fb01 f303 	mul.w	r3, r1, r3
 8009324:	4413      	add	r3, r2
 8009326:	3340      	adds	r3, #64	; 0x40
 8009328:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800932a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	212c      	movs	r1, #44	; 0x2c
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	3339      	adds	r3, #57	; 0x39
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	212c      	movs	r1, #44	; 0x2c
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	4413      	add	r3, r2
 800934a:	333f      	adds	r3, #63	; 0x3f
 800934c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	78ba      	ldrb	r2, [r7, #2]
 8009356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800935a:	b2d0      	uxtb	r0, r2
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	212c      	movs	r1, #44	; 0x2c
 8009360:	fb01 f303 	mul.w	r3, r1, r3
 8009364:	4413      	add	r3, r2
 8009366:	333a      	adds	r3, #58	; 0x3a
 8009368:	4602      	mov	r2, r0
 800936a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800936c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009370:	2b00      	cmp	r3, #0
 8009372:	da09      	bge.n	8009388 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	212c      	movs	r1, #44	; 0x2c
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	4413      	add	r3, r2
 8009380:	333b      	adds	r3, #59	; 0x3b
 8009382:	2201      	movs	r2, #1
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e008      	b.n	800939a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	212c      	movs	r1, #44	; 0x2c
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
 8009394:	333b      	adds	r3, #59	; 0x3b
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	212c      	movs	r1, #44	; 0x2c
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	333c      	adds	r3, #60	; 0x3c
 80093a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80093ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	787c      	ldrb	r4, [r7, #1]
 80093b4:	78ba      	ldrb	r2, [r7, #2]
 80093b6:	78f9      	ldrb	r1, [r7, #3]
 80093b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093ba:	9302      	str	r3, [sp, #8]
 80093bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4623      	mov	r3, r4
 80093ca:	f00b fd87 	bl	8014edc <USB_HC_Init>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_HCD_HC_Halt+0x1e>
 80093fe:	2302      	movs	r3, #2
 8009400:	e00f      	b.n	8009422 <HAL_HCD_HC_Halt+0x3e>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f00b ffd9 	bl	80153ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009420:	7bfb      	ldrb	r3, [r7, #15]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	4603      	mov	r3, r0
 800943c:	70fb      	strb	r3, [r7, #3]
 800943e:	460b      	mov	r3, r1
 8009440:	70bb      	strb	r3, [r7, #2]
 8009442:	4613      	mov	r3, r2
 8009444:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	212c      	movs	r1, #44	; 0x2c
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	333b      	adds	r3, #59	; 0x3b
 8009454:	78ba      	ldrb	r2, [r7, #2]
 8009456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	212c      	movs	r1, #44	; 0x2c
 800945e:	fb01 f303 	mul.w	r3, r1, r3
 8009462:	4413      	add	r3, r2
 8009464:	333f      	adds	r3, #63	; 0x3f
 8009466:	787a      	ldrb	r2, [r7, #1]
 8009468:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800946a:	7c3b      	ldrb	r3, [r7, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d112      	bne.n	8009496 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	212c      	movs	r1, #44	; 0x2c
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	4413      	add	r3, r2
 800947c:	3342      	adds	r3, #66	; 0x42
 800947e:	2203      	movs	r2, #3
 8009480:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	212c      	movs	r1, #44	; 0x2c
 8009488:	fb01 f303 	mul.w	r3, r1, r3
 800948c:	4413      	add	r3, r2
 800948e:	333d      	adds	r3, #61	; 0x3d
 8009490:	7f3a      	ldrb	r2, [r7, #28]
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	e008      	b.n	80094a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009496:	78fb      	ldrb	r3, [r7, #3]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	212c      	movs	r1, #44	; 0x2c
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	3342      	adds	r3, #66	; 0x42
 80094a4:	2202      	movs	r2, #2
 80094a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80094a8:	787b      	ldrb	r3, [r7, #1]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	f200 80c6 	bhi.w	800963c <HAL_HCD_HC_SubmitRequest+0x210>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094c9 	.word	0x080094c9
 80094bc:	08009629 	.word	0x08009629
 80094c0:	0800952d 	.word	0x0800952d
 80094c4:	080095ab 	.word	0x080095ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80094c8:	7c3b      	ldrb	r3, [r7, #16]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	f040 80b8 	bne.w	8009640 <HAL_HCD_HC_SubmitRequest+0x214>
 80094d0:	78bb      	ldrb	r3, [r7, #2]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f040 80b4 	bne.w	8009640 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80094d8:	8b3b      	ldrh	r3, [r7, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	212c      	movs	r1, #44	; 0x2c
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	4413      	add	r3, r2
 80094ea:	3355      	adds	r3, #85	; 0x55
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	212c      	movs	r1, #44	; 0x2c
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	3355      	adds	r3, #85	; 0x55
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	212c      	movs	r1, #44	; 0x2c
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	4413      	add	r3, r2
 8009510:	3342      	adds	r3, #66	; 0x42
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009516:	e093      	b.n	8009640 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	212c      	movs	r1, #44	; 0x2c
 800951e:	fb01 f303 	mul.w	r3, r1, r3
 8009522:	4413      	add	r3, r2
 8009524:	3342      	adds	r3, #66	; 0x42
 8009526:	2202      	movs	r2, #2
 8009528:	701a      	strb	r2, [r3, #0]
      break;
 800952a:	e089      	b.n	8009640 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800952c:	78bb      	ldrb	r3, [r7, #2]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d11d      	bne.n	800956e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	212c      	movs	r1, #44	; 0x2c
 8009538:	fb01 f303 	mul.w	r3, r1, r3
 800953c:	4413      	add	r3, r2
 800953e:	3355      	adds	r3, #85	; 0x55
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	212c      	movs	r1, #44	; 0x2c
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	4413      	add	r3, r2
 8009552:	3342      	adds	r3, #66	; 0x42
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009558:	e073      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	212c      	movs	r1, #44	; 0x2c
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	4413      	add	r3, r2
 8009566:	3342      	adds	r3, #66	; 0x42
 8009568:	2202      	movs	r2, #2
 800956a:	701a      	strb	r2, [r3, #0]
      break;
 800956c:	e069      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	212c      	movs	r1, #44	; 0x2c
 8009574:	fb01 f303 	mul.w	r3, r1, r3
 8009578:	4413      	add	r3, r2
 800957a:	3354      	adds	r3, #84	; 0x54
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	212c      	movs	r1, #44	; 0x2c
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	3342      	adds	r3, #66	; 0x42
 8009590:	2200      	movs	r2, #0
 8009592:	701a      	strb	r2, [r3, #0]
      break;
 8009594:	e055      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	212c      	movs	r1, #44	; 0x2c
 800959c:	fb01 f303 	mul.w	r3, r1, r3
 80095a0:	4413      	add	r3, r2
 80095a2:	3342      	adds	r3, #66	; 0x42
 80095a4:	2202      	movs	r2, #2
 80095a6:	701a      	strb	r2, [r3, #0]
      break;
 80095a8:	e04b      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80095aa:	78bb      	ldrb	r3, [r7, #2]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d11d      	bne.n	80095ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	212c      	movs	r1, #44	; 0x2c
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	3355      	adds	r3, #85	; 0x55
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d109      	bne.n	80095d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	212c      	movs	r1, #44	; 0x2c
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	4413      	add	r3, r2
 80095d0:	3342      	adds	r3, #66	; 0x42
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80095d6:	e034      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	212c      	movs	r1, #44	; 0x2c
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	3342      	adds	r3, #66	; 0x42
 80095e6:	2202      	movs	r2, #2
 80095e8:	701a      	strb	r2, [r3, #0]
      break;
 80095ea:	e02a      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	212c      	movs	r1, #44	; 0x2c
 80095f2:	fb01 f303 	mul.w	r3, r1, r3
 80095f6:	4413      	add	r3, r2
 80095f8:	3354      	adds	r3, #84	; 0x54
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	212c      	movs	r1, #44	; 0x2c
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	3342      	adds	r3, #66	; 0x42
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
      break;
 8009612:	e016      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	212c      	movs	r1, #44	; 0x2c
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	4413      	add	r3, r2
 8009620:	3342      	adds	r3, #66	; 0x42
 8009622:	2202      	movs	r2, #2
 8009624:	701a      	strb	r2, [r3, #0]
      break;
 8009626:	e00c      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	212c      	movs	r1, #44	; 0x2c
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	3342      	adds	r3, #66	; 0x42
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
      break;
 800963a:	e002      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800963c:	bf00      	nop
 800963e:	e000      	b.n	8009642 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009640:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	212c      	movs	r1, #44	; 0x2c
 8009648:	fb01 f303 	mul.w	r3, r1, r3
 800964c:	4413      	add	r3, r2
 800964e:	3344      	adds	r3, #68	; 0x44
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	8b3a      	ldrh	r2, [r7, #24]
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	202c      	movs	r0, #44	; 0x2c
 800965c:	fb00 f303 	mul.w	r3, r0, r3
 8009660:	440b      	add	r3, r1
 8009662:	334c      	adds	r3, #76	; 0x4c
 8009664:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	212c      	movs	r1, #44	; 0x2c
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	3360      	adds	r3, #96	; 0x60
 8009674:	2200      	movs	r2, #0
 8009676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	212c      	movs	r1, #44	; 0x2c
 800967e:	fb01 f303 	mul.w	r3, r1, r3
 8009682:	4413      	add	r3, r2
 8009684:	3350      	adds	r3, #80	; 0x50
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	212c      	movs	r1, #44	; 0x2c
 8009690:	fb01 f303 	mul.w	r3, r1, r3
 8009694:	4413      	add	r3, r2
 8009696:	3339      	adds	r3, #57	; 0x39
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	212c      	movs	r1, #44	; 0x2c
 80096a2:	fb01 f303 	mul.w	r3, r1, r3
 80096a6:	4413      	add	r3, r2
 80096a8:	3361      	adds	r3, #97	; 0x61
 80096aa:	2200      	movs	r2, #0
 80096ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6818      	ldr	r0, [r3, #0]
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	222c      	movs	r2, #44	; 0x2c
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	3338      	adds	r3, #56	; 0x38
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	18d1      	adds	r1, r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	f00b fd2c 	bl	8015124 <USB_HC_StartXfer>
 80096cc:	4603      	mov	r3, r0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop

080096d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f00b fa30 	bl	8014b54 <USB_GetMode>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	f040 80fa 	bne.w	80098f0 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4618      	mov	r0, r3
 8009702:	f00b f9f3 	bl	8014aec <USB_ReadInterrupts>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 80f0 	beq.w	80098ee <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4618      	mov	r0, r3
 8009714:	f00b f9ea 	bl	8014aec <USB_ReadInterrupts>
 8009718:	4603      	mov	r3, r0
 800971a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800971e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009722:	d104      	bne.n	800972e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800972c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f00b f9da 	bl	8014aec <USB_ReadInterrupts>
 8009738:	4603      	mov	r3, r0
 800973a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800973e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009742:	d104      	bne.n	800974e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800974c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f00b f9ca 	bl	8014aec <USB_ReadInterrupts>
 8009758:	4603      	mov	r3, r0
 800975a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800975e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009762:	d104      	bne.n	800976e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800976c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f00b f9ba 	bl	8014aec <USB_ReadInterrupts>
 8009778:	4603      	mov	r3, r0
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b02      	cmp	r3, #2
 8009780:	d103      	bne.n	800978a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2202      	movs	r2, #2
 8009788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4618      	mov	r0, r3
 8009790:	f00b f9ac 	bl	8014aec <USB_ReadInterrupts>
 8009794:	4603      	mov	r3, r0
 8009796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800979a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800979e:	d120      	bne.n	80097e2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d113      	bne.n	80097e2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80097ba:	2110      	movs	r1, #16
 80097bc:	6938      	ldr	r0, [r7, #16]
 80097be:	f00b f89b 	bl	80148f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80097c2:	6938      	ldr	r0, [r7, #16]
 80097c4:	f00b f8cc 	bl	8014960 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d105      	bne.n	80097dc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2101      	movs	r1, #1
 80097d6:	4618      	mov	r0, r3
 80097d8:	f00b fab8 	bl	8014d4c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7fb f81d 	bl	800481c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f00b f980 	bl	8014aec <USB_ReadInterrupts>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80097f6:	d102      	bne.n	80097fe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 f9a3 	bl	800ab44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f00b f972 	bl	8014aec <USB_ReadInterrupts>
 8009808:	4603      	mov	r3, r0
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b08      	cmp	r3, #8
 8009810:	d106      	bne.n	8009820 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fa ffe6 	bl	80047e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2208      	movs	r2, #8
 800981e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4618      	mov	r0, r3
 8009826:	f00b f961 	bl	8014aec <USB_ReadInterrupts>
 800982a:	4603      	mov	r3, r0
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d101      	bne.n	8009838 <HAL_HCD_IRQHandler+0x160>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <HAL_HCD_IRQHandler+0x162>
 8009838:	2300      	movs	r3, #0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d012      	beq.n	8009864 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699a      	ldr	r2, [r3, #24]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0210 	bic.w	r2, r2, #16
 800984c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 f8a6 	bl	800a9a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0210 	orr.w	r2, r2, #16
 8009862:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4618      	mov	r0, r3
 800986a:	f00b f93f 	bl	8014aec <USB_ReadInterrupts>
 800986e:	4603      	mov	r3, r0
 8009870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009878:	d13a      	bne.n	80098f0 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f00b fd92 	bl	80153a8 <USB_HC_ReadInterrupt>
 8009884:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e025      	b.n	80098d8 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b00      	cmp	r3, #0
 800989e:	d018      	beq.n	80098d2 <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b6:	d106      	bne.n	80098c6 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f8ab 	bl	8009a1a <HCD_HC_IN_IRQHandler>
 80098c4:	e005      	b.n	80098d2 <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fcb5 	bl	800a23c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	3301      	adds	r3, #1
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3d4      	bcc.n	800988c <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098ea:	615a      	str	r2, [r3, #20]
 80098ec:	e000      	b.n	80098f0 <HAL_HCD_IRQHandler+0x218>
      return;
 80098ee:	bf00      	nop
    }
  }
}
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_HCD_Start+0x16>
 8009908:	2302      	movs	r3, #2
 800990a:	e013      	b.n	8009934 <HAL_HCD_Start+0x3e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2101      	movs	r1, #1
 800991a:	4618      	mov	r0, r3
 800991c:	f00b fa7d 	bl	8014e1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4618      	mov	r0, r3
 8009926:	f00a ff79 	bl	801481c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_HCD_Stop+0x16>
 800994e:	2302      	movs	r3, #2
 8009950:	e00d      	b.n	800996e <HAL_HCD_Stop+0x32>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f00b fe6c 	bl	801563c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f00b fa1f 	bl	8014dc6 <USB_ResetPort>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	212c      	movs	r1, #44	; 0x2c
 80099a4:	fb01 f303 	mul.w	r3, r1, r3
 80099a8:	4413      	add	r3, r2
 80099aa:	3360      	adds	r3, #96	; 0x60
 80099ac:	781b      	ldrb	r3, [r3, #0]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b083      	sub	sp, #12
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	212c      	movs	r1, #44	; 0x2c
 80099cc:	fb01 f303 	mul.w	r3, r1, r3
 80099d0:	4413      	add	r3, r2
 80099d2:	3350      	adds	r3, #80	; 0x50
 80099d4:	681b      	ldr	r3, [r3, #0]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f00b fa63 	bl	8014eba <USB_GetCurrentFrame>
 80099f4:	4603      	mov	r3, r0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f00b fa3e 	bl	8014e8c <USB_GetHostSpeed>
 8009a10:	4603      	mov	r3, r0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f00b f86a 	bl	8014b12 <USB_ReadChInterrupts>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d119      	bne.n	8009a7c <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a54:	461a      	mov	r2, r3
 8009a56:	2304      	movs	r3, #4
 8009a58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	212c      	movs	r1, #44	; 0x2c
 8009a60:	fb01 f303 	mul.w	r3, r1, r3
 8009a64:	4413      	add	r3, r2
 8009a66:	3361      	adds	r3, #97	; 0x61
 8009a68:	2207      	movs	r2, #7
 8009a6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f00b fca8 	bl	80153ca <USB_HC_Halt>
 8009a7a:	e09a      	b.n	8009bb2 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	78fa      	ldrb	r2, [r7, #3]
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f00b f844 	bl	8014b12 <USB_ReadChInterrupts>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a94:	d11a      	bne.n	8009acc <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	212c      	movs	r1, #44	; 0x2c
 8009ab0:	fb01 f303 	mul.w	r3, r1, r3
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3361      	adds	r3, #97	; 0x61
 8009ab8:	2208      	movs	r2, #8
 8009aba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f00b fc80 	bl	80153ca <USB_HC_Halt>
 8009aca:	e072      	b.n	8009bb2 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f00b f81c 	bl	8014b12 <USB_ReadChInterrupts>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f003 0308 	and.w	r3, r3, #8
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d119      	bne.n	8009b18 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009af0:	461a      	mov	r2, r3
 8009af2:	2308      	movs	r3, #8
 8009af4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	212c      	movs	r1, #44	; 0x2c
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	4413      	add	r3, r2
 8009b02:	3361      	adds	r3, #97	; 0x61
 8009b04:	2206      	movs	r2, #6
 8009b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f00b fc5a 	bl	80153ca <USB_HC_Halt>
 8009b16:	e04c      	b.n	8009bb2 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f00a fff6 	bl	8014b12 <USB_ReadChInterrupts>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b30:	d11a      	bne.n	8009b68 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	212c      	movs	r1, #44	; 0x2c
 8009b4c:	fb01 f303 	mul.w	r3, r1, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	3361      	adds	r3, #97	; 0x61
 8009b54:	2209      	movs	r2, #9
 8009b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	78fa      	ldrb	r2, [r7, #3]
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f00b fc32 	bl	80153ca <USB_HC_Halt>
 8009b66:	e024      	b.n	8009bb2 <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00a ffce 	bl	8014b12 <USB_ReadChInterrupts>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7c:	2b80      	cmp	r3, #128	; 0x80
 8009b7e:	d118      	bne.n	8009bb2 <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2380      	movs	r3, #128	; 0x80
 8009b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	212c      	movs	r1, #44	; 0x2c
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3361      	adds	r3, #97	; 0x61
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f00b fc0c 	bl	80153ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f00a ffa9 	bl	8014b12 <USB_ReadChInterrupts>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bca:	d111      	bne.n	8009bf0 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f00b fbf8 	bl	80153ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be6:	461a      	mov	r2, r3
 8009be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bec:	6093      	str	r3, [r2, #8]
 8009bee:	e322      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f00a ff8a 	bl	8014b12 <USB_ReadChInterrupts>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	f040 80f0 	bne.w	8009dea <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	461a      	mov	r2, r3
 8009c18:	2320      	movs	r3, #32
 8009c1a:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d019      	beq.n	8009c58 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	212c      	movs	r1, #44	; 0x2c
 8009c2a:	fb01 f303 	mul.w	r3, r1, r3
 8009c2e:	4413      	add	r3, r2
 8009c30:	3348      	adds	r3, #72	; 0x48
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	78fb      	ldrb	r3, [r7, #3]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	1a8a      	subs	r2, r1, r2
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	202c      	movs	r0, #44	; 0x2c
 8009c4e:	fb00 f303 	mul.w	r3, r0, r3
 8009c52:	440b      	add	r3, r1
 8009c54:	3350      	adds	r3, #80	; 0x50
 8009c56:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	212c      	movs	r1, #44	; 0x2c
 8009c5e:	fb01 f303 	mul.w	r3, r1, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	3361      	adds	r3, #97	; 0x61
 8009c66:	2201      	movs	r2, #1
 8009c68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	212c      	movs	r1, #44	; 0x2c
 8009c70:	fb01 f303 	mul.w	r3, r1, r3
 8009c74:	4413      	add	r3, r2
 8009c76:	335c      	adds	r3, #92	; 0x5c
 8009c78:	2200      	movs	r2, #0
 8009c7a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c88:	461a      	mov	r2, r3
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	212c      	movs	r1, #44	; 0x2c
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	4413      	add	r3, r2
 8009c9a:	333f      	adds	r3, #63	; 0x3f
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	212c      	movs	r1, #44	; 0x2c
 8009ca8:	fb01 f303 	mul.w	r3, r1, r3
 8009cac:	4413      	add	r3, r2
 8009cae:	333f      	adds	r3, #63	; 0x3f
 8009cb0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d110      	bne.n	8009cd8 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f00b fb83 	bl	80153ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	2310      	movs	r3, #16
 8009cd4:	6093      	str	r3, [r2, #8]
 8009cd6:	e039      	b.n	8009d4c <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	212c      	movs	r1, #44	; 0x2c
 8009cde:	fb01 f303 	mul.w	r3, r1, r3
 8009ce2:	4413      	add	r3, r2
 8009ce4:	333f      	adds	r3, #63	; 0x3f
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d009      	beq.n	8009d00 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	212c      	movs	r1, #44	; 0x2c
 8009cf2:	fb01 f303 	mul.w	r3, r1, r3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	333f      	adds	r3, #63	; 0x3f
 8009cfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d125      	bne.n	8009d4c <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	212c      	movs	r1, #44	; 0x2c
 8009d26:	fb01 f303 	mul.w	r3, r1, r3
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3360      	adds	r3, #96	; 0x60
 8009d2e:	2201      	movs	r2, #1
 8009d30:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	212c      	movs	r1, #44	; 0x2c
 8009d38:	fb01 f303 	mul.w	r3, r1, r3
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3360      	adds	r3, #96	; 0x60
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7fa fd76 	bl	8004838 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d135      	bne.n	8009dc0 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	212c      	movs	r1, #44	; 0x2c
 8009d5a:	fb01 f303 	mul.w	r3, r1, r3
 8009d5e:	4413      	add	r3, r2
 8009d60:	3350      	adds	r3, #80	; 0x50
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	202c      	movs	r0, #44	; 0x2c
 8009d6a:	fb00 f202 	mul.w	r2, r0, r2
 8009d6e:	440a      	add	r2, r1
 8009d70:	3240      	adds	r2, #64	; 0x40
 8009d72:	8812      	ldrh	r2, [r2, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	3b01      	subs	r3, #1
 8009d78:	78fa      	ldrb	r2, [r7, #3]
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	202c      	movs	r0, #44	; 0x2c
 8009d7e:	fb00 f202 	mul.w	r2, r0, r2
 8009d82:	440a      	add	r2, r1
 8009d84:	3240      	adds	r2, #64	; 0x40
 8009d86:	8812      	ldrh	r2, [r2, #0]
 8009d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 8250 	beq.w	800a236 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	212c      	movs	r1, #44	; 0x2c
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	4413      	add	r3, r2
 8009da2:	3354      	adds	r3, #84	; 0x54
 8009da4:	781a      	ldrb	r2, [r3, #0]
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	f082 0201 	eor.w	r2, r2, #1
 8009dac:	b2d0      	uxtb	r0, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	212c      	movs	r1, #44	; 0x2c
 8009db2:	fb01 f303 	mul.w	r3, r1, r3
 8009db6:	4413      	add	r3, r2
 8009db8:	3354      	adds	r3, #84	; 0x54
 8009dba:	4602      	mov	r2, r0
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e23a      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	212c      	movs	r1, #44	; 0x2c
 8009dc6:	fb01 f303 	mul.w	r3, r1, r3
 8009dca:	4413      	add	r3, r2
 8009dcc:	3354      	adds	r3, #84	; 0x54
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	f082 0201 	eor.w	r2, r2, #1
 8009dd6:	b2d0      	uxtb	r0, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	212c      	movs	r1, #44	; 0x2c
 8009ddc:	fb01 f303 	mul.w	r3, r1, r3
 8009de0:	4413      	add	r3, r2
 8009de2:	3354      	adds	r3, #84	; 0x54
 8009de4:	4602      	mov	r2, r0
 8009de6:	701a      	strb	r2, [r3, #0]
 8009de8:	e225      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f00a fe8d 	bl	8014b12 <USB_ReadChInterrupts>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d109      	bne.n	8009e16 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2320      	movs	r3, #32
 8009e12:	6093      	str	r3, [r2, #8]
 8009e14:	e20f      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f00a fe77 	bl	8014b12 <USB_ReadChInterrupts>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	f040 8168 	bne.w	800a100 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2302      	movs	r3, #2
 8009e40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	212c      	movs	r1, #44	; 0x2c
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3361      	adds	r3, #97	; 0x61
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d112      	bne.n	8009e7c <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	212c      	movs	r1, #44	; 0x2c
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	4413      	add	r3, r2
 8009e62:	3361      	adds	r3, #97	; 0x61
 8009e64:	2202      	movs	r2, #2
 8009e66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	212c      	movs	r1, #44	; 0x2c
 8009e6e:	fb01 f303 	mul.w	r3, r1, r3
 8009e72:	4413      	add	r3, r2
 8009e74:	3360      	adds	r3, #96	; 0x60
 8009e76:	2201      	movs	r2, #1
 8009e78:	701a      	strb	r2, [r3, #0]
 8009e7a:	e133      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	212c      	movs	r1, #44	; 0x2c
 8009e82:	fb01 f303 	mul.w	r3, r1, r3
 8009e86:	4413      	add	r3, r2
 8009e88:	3361      	adds	r3, #97	; 0x61
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b06      	cmp	r3, #6
 8009e8e:	d112      	bne.n	8009eb6 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	212c      	movs	r1, #44	; 0x2c
 8009e96:	fb01 f303 	mul.w	r3, r1, r3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3361      	adds	r3, #97	; 0x61
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	212c      	movs	r1, #44	; 0x2c
 8009ea8:	fb01 f303 	mul.w	r3, r1, r3
 8009eac:	4413      	add	r3, r2
 8009eae:	3360      	adds	r3, #96	; 0x60
 8009eb0:	2205      	movs	r2, #5
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e116      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	212c      	movs	r1, #44	; 0x2c
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3361      	adds	r3, #97	; 0x61
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b07      	cmp	r3, #7
 8009ec8:	d009      	beq.n	8009ede <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	212c      	movs	r1, #44	; 0x2c
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3361      	adds	r3, #97	; 0x61
 8009ed8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009eda:	2b09      	cmp	r3, #9
 8009edc:	d158      	bne.n	8009f90 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	212c      	movs	r1, #44	; 0x2c
 8009ee4:	fb01 f303 	mul.w	r3, r1, r3
 8009ee8:	4413      	add	r3, r2
 8009eea:	3361      	adds	r3, #97	; 0x61
 8009eec:	2202      	movs	r2, #2
 8009eee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	222c      	movs	r2, #44	; 0x2c
 8009ef6:	fb03 f202 	mul.w	r2, r3, r2
 8009efa:	440a      	add	r2, r1
 8009efc:	325c      	adds	r2, #92	; 0x5c
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	3201      	adds	r2, #1
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	202c      	movs	r0, #44	; 0x2c
 8009f06:	fb00 f303 	mul.w	r3, r0, r3
 8009f0a:	440b      	add	r3, r1
 8009f0c:	335c      	adds	r3, #92	; 0x5c
 8009f0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	212c      	movs	r1, #44	; 0x2c
 8009f16:	fb01 f303 	mul.w	r3, r1, r3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	335c      	adds	r3, #92	; 0x5c
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d912      	bls.n	8009f4a <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	212c      	movs	r1, #44	; 0x2c
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	335c      	adds	r3, #92	; 0x5c
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009f36:	78fb      	ldrb	r3, [r7, #3]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	212c      	movs	r1, #44	; 0x2c
 8009f3c:	fb01 f303 	mul.w	r3, r1, r3
 8009f40:	4413      	add	r3, r2
 8009f42:	3360      	adds	r3, #96	; 0x60
 8009f44:	2204      	movs	r2, #4
 8009f46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009f48:	e0cc      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	212c      	movs	r1, #44	; 0x2c
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	3360      	adds	r3, #96	; 0x60
 8009f58:	2202      	movs	r2, #2
 8009f5a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	015a      	lsls	r2, r3, #5
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009f8e:	e0a9      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	212c      	movs	r1, #44	; 0x2c
 8009f96:	fb01 f303 	mul.w	r3, r1, r3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	3361      	adds	r3, #97	; 0x61
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	d109      	bne.n	8009fb8 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	212c      	movs	r1, #44	; 0x2c
 8009faa:	fb01 f303 	mul.w	r3, r1, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	3361      	adds	r3, #97	; 0x61
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e095      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	212c      	movs	r1, #44	; 0x2c
 8009fbe:	fb01 f303 	mul.w	r3, r1, r3
 8009fc2:	4413      	add	r3, r2
 8009fc4:	3361      	adds	r3, #97	; 0x61
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d109      	bne.n	8009fe0 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	212c      	movs	r1, #44	; 0x2c
 8009fd2:	fb01 f303 	mul.w	r3, r1, r3
 8009fd6:	4413      	add	r3, r2
 8009fd8:	3361      	adds	r3, #97	; 0x61
 8009fda:	2202      	movs	r2, #2
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e081      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	212c      	movs	r1, #44	; 0x2c
 8009fe6:	fb01 f303 	mul.w	r3, r1, r3
 8009fea:	4413      	add	r3, r2
 8009fec:	3361      	adds	r3, #97	; 0x61
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d13f      	bne.n	800a074 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	212c      	movs	r1, #44	; 0x2c
 8009ffa:	fb01 f303 	mul.w	r3, r1, r3
 8009ffe:	4413      	add	r3, r2
 800a000:	3361      	adds	r3, #97	; 0x61
 800a002:	2202      	movs	r2, #2
 800a004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	212c      	movs	r1, #44	; 0x2c
 800a00c:	fb01 f303 	mul.w	r3, r1, r3
 800a010:	4413      	add	r3, r2
 800a012:	3360      	adds	r3, #96	; 0x60
 800a014:	2202      	movs	r2, #2
 800a016:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	212c      	movs	r1, #44	; 0x2c
 800a01e:	fb01 f303 	mul.w	r3, r1, r3
 800a022:	4413      	add	r3, r2
 800a024:	333f      	adds	r3, #63	; 0x3f
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d009      	beq.n	800a040 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a02c:	78fb      	ldrb	r3, [r7, #3]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	212c      	movs	r1, #44	; 0x2c
 800a032:	fb01 f303 	mul.w	r3, r1, r3
 800a036:	4413      	add	r3, r2
 800a038:	333f      	adds	r3, #63	; 0x3f
 800a03a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d151      	bne.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	4413      	add	r3, r2
 800a048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a056:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a05e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4413      	add	r3, r2
 800a068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06c:	461a      	mov	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e037      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	212c      	movs	r1, #44	; 0x2c
 800a07a:	fb01 f303 	mul.w	r3, r1, r3
 800a07e:	4413      	add	r3, r2
 800a080:	3361      	adds	r3, #97	; 0x61
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b08      	cmp	r3, #8
 800a086:	d122      	bne.n	800a0ce <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	212c      	movs	r1, #44	; 0x2c
 800a08e:	fb01 f303 	mul.w	r3, r1, r3
 800a092:	4413      	add	r3, r2
 800a094:	3361      	adds	r3, #97	; 0x61
 800a096:	2202      	movs	r2, #2
 800a098:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	222c      	movs	r2, #44	; 0x2c
 800a0a0:	fb03 f202 	mul.w	r2, r3, r2
 800a0a4:	440a      	add	r2, r1
 800a0a6:	325c      	adds	r2, #92	; 0x5c
 800a0a8:	6812      	ldr	r2, [r2, #0]
 800a0aa:	3201      	adds	r2, #1
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	202c      	movs	r0, #44	; 0x2c
 800a0b0:	fb00 f303 	mul.w	r3, r0, r3
 800a0b4:	440b      	add	r3, r1
 800a0b6:	335c      	adds	r3, #92	; 0x5c
 800a0b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	212c      	movs	r1, #44	; 0x2c
 800a0c0:	fb01 f303 	mul.w	r3, r1, r3
 800a0c4:	4413      	add	r3, r2
 800a0c6:	3360      	adds	r3, #96	; 0x60
 800a0c8:	2204      	movs	r2, #4
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e00a      	b.n	800a0e4 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	212c      	movs	r1, #44	; 0x2c
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	3361      	adds	r3, #97	; 0x61
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	f000 80a8 	beq.w	800a234 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	212c      	movs	r1, #44	; 0x2c
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	3360      	adds	r3, #96	; 0x60
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7fa fb9d 	bl	8004838 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a0fe:	e09a      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f00a fd02 	bl	8014b12 <USB_ReadChInterrupts>
 800a10e:	4603      	mov	r3, r0
 800a110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a114:	2b40      	cmp	r3, #64	; 0x40
 800a116:	d122      	bne.n	800a15e <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a124:	461a      	mov	r2, r3
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	212c      	movs	r1, #44	; 0x2c
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	4413      	add	r3, r2
 800a136:	3361      	adds	r3, #97	; 0x61
 800a138:	2205      	movs	r2, #5
 800a13a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a13c:	78fb      	ldrb	r3, [r7, #3]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	212c      	movs	r1, #44	; 0x2c
 800a142:	fb01 f303 	mul.w	r3, r1, r3
 800a146:	4413      	add	r3, r2
 800a148:	335c      	adds	r3, #92	; 0x5c
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f00b f937 	bl	80153ca <USB_HC_Halt>
 800a15c:	e06b      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f00a fcd3 	bl	8014b12 <USB_ReadChInterrupts>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f003 0310 	and.w	r3, r3, #16
 800a172:	2b10      	cmp	r3, #16
 800a174:	d15f      	bne.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	212c      	movs	r1, #44	; 0x2c
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
 800a180:	4413      	add	r3, r2
 800a182:	333f      	adds	r3, #63	; 0x3f
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b03      	cmp	r3, #3
 800a188:	d119      	bne.n	800a1be <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	212c      	movs	r1, #44	; 0x2c
 800a190:	fb01 f303 	mul.w	r3, r1, r3
 800a194:	4413      	add	r3, r2
 800a196:	335c      	adds	r3, #92	; 0x5c
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	212c      	movs	r1, #44	; 0x2c
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	3361      	adds	r3, #97	; 0x61
 800a1aa:	2204      	movs	r2, #4
 800a1ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	78fa      	ldrb	r2, [r7, #3]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f00b f907 	bl	80153ca <USB_HC_Halt>
 800a1bc:	e030      	b.n	800a220 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	212c      	movs	r1, #44	; 0x2c
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	333f      	adds	r3, #63	; 0x3f
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	212c      	movs	r1, #44	; 0x2c
 800a1d8:	fb01 f303 	mul.w	r3, r1, r3
 800a1dc:	4413      	add	r3, r2
 800a1de:	333f      	adds	r3, #63	; 0x3f
 800a1e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d11c      	bne.n	800a220 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	212c      	movs	r1, #44	; 0x2c
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	335c      	adds	r3, #92	; 0x5c
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10f      	bne.n	800a220 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	212c      	movs	r1, #44	; 0x2c
 800a206:	fb01 f303 	mul.w	r3, r1, r3
 800a20a:	4413      	add	r3, r2
 800a20c:	3361      	adds	r3, #97	; 0x61
 800a20e:	2204      	movs	r2, #4
 800a210:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f00b f8d5 	bl	80153ca <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	4413      	add	r3, r2
 800a228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a22c:	461a      	mov	r2, r3
 800a22e:	2310      	movs	r3, #16
 800a230:	6093      	str	r3, [r2, #8]
 800a232:	e000      	b.n	800a236 <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a234:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	78fa      	ldrb	r2, [r7, #3]
 800a258:	4611      	mov	r1, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f00a fc59 	bl	8014b12 <USB_ReadChInterrupts>
 800a260:	4603      	mov	r3, r0
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b04      	cmp	r3, #4
 800a268:	d119      	bne.n	800a29e <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	4413      	add	r3, r2
 800a272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a276:	461a      	mov	r2, r3
 800a278:	2304      	movs	r3, #4
 800a27a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	212c      	movs	r1, #44	; 0x2c
 800a282:	fb01 f303 	mul.w	r3, r1, r3
 800a286:	4413      	add	r3, r2
 800a288:	3361      	adds	r3, #97	; 0x61
 800a28a:	2207      	movs	r2, #7
 800a28c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f00b f897 	bl	80153ca <USB_HC_Halt>
 800a29c:	e37d      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f00a fc33 	bl	8014b12 <USB_ReadChInterrupts>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d136      	bne.n	800a324 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	212c      	movs	r1, #44	; 0x2c
 800a2ce:	fb01 f303 	mul.w	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	333d      	adds	r3, #61	; 0x3d
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	f040 835e 	bne.w	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	212c      	movs	r1, #44	; 0x2c
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	333d      	adds	r3, #61	; 0x3d
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	212c      	movs	r1, #44	; 0x2c
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3360      	adds	r3, #96	; 0x60
 800a2fe:	2202      	movs	r2, #2
 800a300:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	212c      	movs	r1, #44	; 0x2c
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	3361      	adds	r3, #97	; 0x61
 800a310:	2203      	movs	r2, #3
 800a312:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f00b f854 	bl	80153ca <USB_HC_Halt>
 800a322:	e33a      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	78fa      	ldrb	r2, [r7, #3]
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f00a fbf0 	bl	8014b12 <USB_ReadChInterrupts>
 800a332:	4603      	mov	r3, r0
 800a334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33c:	d111      	bne.n	800a362 <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34a:	461a      	mov	r2, r3
 800a34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a350:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	4611      	mov	r1, r2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f00b f835 	bl	80153ca <USB_HC_Halt>
 800a360:	e31b      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f00a fbd1 	bl	8014b12 <USB_ReadChInterrupts>
 800a370:	4603      	mov	r3, r0
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b01      	cmp	r3, #1
 800a378:	d140      	bne.n	800a3fc <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	212c      	movs	r1, #44	; 0x2c
 800a380:	fb01 f303 	mul.w	r3, r1, r3
 800a384:	4413      	add	r3, r2
 800a386:	335c      	adds	r3, #92	; 0x5c
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f00a fbbc 	bl	8014b12 <USB_ReadChInterrupts>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a0:	2b40      	cmp	r3, #64	; 0x40
 800a3a2:	d111      	bne.n	800a3c8 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	212c      	movs	r1, #44	; 0x2c
 800a3aa:	fb01 f303 	mul.w	r3, r1, r3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	333d      	adds	r3, #61	; 0x3d
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	212c      	movs	r1, #44	; 0x2c
 800a3e0:	fb01 f303 	mul.w	r3, r1, r3
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3361      	adds	r3, #97	; 0x61
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	78fa      	ldrb	r2, [r7, #3]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f00a ffe8 	bl	80153ca <USB_HC_Halt>
 800a3fa:	e2ce      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	78fa      	ldrb	r2, [r7, #3]
 800a402:	4611      	mov	r1, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f00a fb84 	bl	8014b12 <USB_ReadChInterrupts>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d12b      	bne.n	800a46c <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	212c      	movs	r1, #44	; 0x2c
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	4413      	add	r3, r2
 800a420:	3361      	adds	r3, #97	; 0x61
 800a422:	2205      	movs	r2, #5
 800a424:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a426:	78fb      	ldrb	r3, [r7, #3]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	212c      	movs	r1, #44	; 0x2c
 800a42c:	fb01 f303 	mul.w	r3, r1, r3
 800a430:	4413      	add	r3, r2
 800a432:	333d      	adds	r3, #61	; 0x3d
 800a434:	2201      	movs	r2, #1
 800a436:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	212c      	movs	r1, #44	; 0x2c
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	4413      	add	r3, r2
 800a444:	335c      	adds	r3, #92	; 0x5c
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f00a ffb9 	bl	80153ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a464:	461a      	mov	r2, r3
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	6093      	str	r3, [r2, #8]
 800a46a:	e296      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	78fa      	ldrb	r2, [r7, #3]
 800a472:	4611      	mov	r1, r2
 800a474:	4618      	mov	r0, r3
 800a476:	f00a fb4c 	bl	8014b12 <USB_ReadChInterrupts>
 800a47a:	4603      	mov	r3, r0
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b08      	cmp	r3, #8
 800a482:	d119      	bne.n	800a4b8 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a490:	461a      	mov	r2, r3
 800a492:	2308      	movs	r3, #8
 800a494:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	212c      	movs	r1, #44	; 0x2c
 800a49c:	fb01 f303 	mul.w	r3, r1, r3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3361      	adds	r3, #97	; 0x61
 800a4a4:	2206      	movs	r2, #6
 800a4a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f00a ff8a 	bl	80153ca <USB_HC_Halt>
 800a4b6:	e270      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	78fa      	ldrb	r2, [r7, #3]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f00a fb26 	bl	8014b12 <USB_ReadChInterrupts>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d13f      	bne.n	800a550 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	212c      	movs	r1, #44	; 0x2c
 800a4d6:	fb01 f303 	mul.w	r3, r1, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	335c      	adds	r3, #92	; 0x5c
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	212c      	movs	r1, #44	; 0x2c
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	3361      	adds	r3, #97	; 0x61
 800a4f0:	2204      	movs	r2, #4
 800a4f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	212c      	movs	r1, #44	; 0x2c
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	4413      	add	r3, r2
 800a500:	333d      	adds	r3, #61	; 0x3d
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d112      	bne.n	800a52e <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	212c      	movs	r1, #44	; 0x2c
 800a50e:	fb01 f303 	mul.w	r3, r1, r3
 800a512:	4413      	add	r3, r2
 800a514:	333c      	adds	r3, #60	; 0x3c
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d108      	bne.n	800a52e <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	212c      	movs	r1, #44	; 0x2c
 800a522:	fb01 f303 	mul.w	r3, r1, r3
 800a526:	4413      	add	r3, r2
 800a528:	333d      	adds	r3, #61	; 0x3d
 800a52a:	2201      	movs	r2, #1
 800a52c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	78fa      	ldrb	r2, [r7, #3]
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f00a ff47 	bl	80153ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	4413      	add	r3, r2
 800a544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a548:	461a      	mov	r2, r3
 800a54a:	2310      	movs	r3, #16
 800a54c:	6093      	str	r3, [r2, #8]
 800a54e:	e224      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f00a fada 	bl	8014b12 <USB_ReadChInterrupts>
 800a55e:	4603      	mov	r3, r0
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b80      	cmp	r3, #128	; 0x80
 800a566:	d161      	bne.n	800a62c <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d110      	bne.n	800a592 <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	3361      	adds	r3, #97	; 0x61
 800a57e:	2207      	movs	r2, #7
 800a580:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f00a ff1d 	bl	80153ca <USB_HC_Halt>
 800a590:	e042      	b.n	800a618 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	222c      	movs	r2, #44	; 0x2c
 800a598:	fb03 f202 	mul.w	r2, r3, r2
 800a59c:	440a      	add	r2, r1
 800a59e:	325c      	adds	r2, #92	; 0x5c
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	3201      	adds	r2, #1
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	202c      	movs	r0, #44	; 0x2c
 800a5a8:	fb00 f303 	mul.w	r3, r0, r3
 800a5ac:	440b      	add	r3, r1
 800a5ae:	335c      	adds	r3, #92	; 0x5c
 800a5b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a5b2:	78fb      	ldrb	r3, [r7, #3]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	212c      	movs	r1, #44	; 0x2c
 800a5b8:	fb01 f303 	mul.w	r3, r1, r3
 800a5bc:	4413      	add	r3, r2
 800a5be:	335c      	adds	r3, #92	; 0x5c
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d91f      	bls.n	800a606 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	212c      	movs	r1, #44	; 0x2c
 800a5cc:	fb01 f303 	mul.w	r3, r1, r3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	335c      	adds	r3, #92	; 0x5c
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a5d8:	78fb      	ldrb	r3, [r7, #3]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	212c      	movs	r1, #44	; 0x2c
 800a5de:	fb01 f303 	mul.w	r3, r1, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	3360      	adds	r3, #96	; 0x60
 800a5e6:	2204      	movs	r2, #4
 800a5e8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	212c      	movs	r1, #44	; 0x2c
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3360      	adds	r3, #96	; 0x60
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7fa f91a 	bl	8004838 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a604:	e008      	b.n	800a618 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	212c      	movs	r1, #44	; 0x2c
 800a60c:	fb01 f303 	mul.w	r3, r1, r3
 800a610:	4413      	add	r3, r2
 800a612:	3360      	adds	r3, #96	; 0x60
 800a614:	2202      	movs	r2, #2
 800a616:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a624:	461a      	mov	r2, r3
 800a626:	2380      	movs	r3, #128	; 0x80
 800a628:	6093      	str	r3, [r2, #8]
 800a62a:	e1b6      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f00a fa6c 	bl	8014b12 <USB_ReadChInterrupts>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a644:	d11a      	bne.n	800a67c <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	212c      	movs	r1, #44	; 0x2c
 800a64c:	fb01 f303 	mul.w	r3, r1, r3
 800a650:	4413      	add	r3, r2
 800a652:	3361      	adds	r3, #97	; 0x61
 800a654:	2209      	movs	r2, #9
 800a656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f00a feb2 	bl	80153ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a672:	461a      	mov	r2, r3
 800a674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a678:	6093      	str	r3, [r2, #8]
 800a67a:	e18e      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f00a fa44 	bl	8014b12 <USB_ReadChInterrupts>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b02      	cmp	r3, #2
 800a692:	f040 8182 	bne.w	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	212c      	movs	r1, #44	; 0x2c
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3361      	adds	r3, #97	; 0x61
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	f040 8087 	bne.w	800a7cc <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	212c      	movs	r1, #44	; 0x2c
 800a6c4:	fb01 f303 	mul.w	r3, r1, r3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3361      	adds	r3, #97	; 0x61
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	212c      	movs	r1, #44	; 0x2c
 800a6d6:	fb01 f303 	mul.w	r3, r1, r3
 800a6da:	4413      	add	r3, r2
 800a6dc:	3360      	adds	r3, #96	; 0x60
 800a6de:	2201      	movs	r2, #1
 800a6e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	212c      	movs	r1, #44	; 0x2c
 800a6e8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	333f      	adds	r3, #63	; 0x3f
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d00a      	beq.n	800a70c <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	212c      	movs	r1, #44	; 0x2c
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	4413      	add	r3, r2
 800a702:	333f      	adds	r3, #63	; 0x3f
 800a704:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a706:	2b03      	cmp	r3, #3
 800a708:	f040 8138 	bne.w	800a97c <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d113      	bne.n	800a73c <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	212c      	movs	r1, #44	; 0x2c
 800a71a:	fb01 f303 	mul.w	r3, r1, r3
 800a71e:	4413      	add	r3, r2
 800a720:	3355      	adds	r3, #85	; 0x55
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f082 0201 	eor.w	r2, r2, #1
 800a72a:	b2d0      	uxtb	r0, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	212c      	movs	r1, #44	; 0x2c
 800a730:	fb01 f303 	mul.w	r3, r1, r3
 800a734:	4413      	add	r3, r2
 800a736:	3355      	adds	r3, #85	; 0x55
 800a738:	4602      	mov	r2, r0
 800a73a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b01      	cmp	r3, #1
 800a742:	f040 811b 	bne.w	800a97c <HCD_HC_OUT_IRQHandler+0x740>
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	212c      	movs	r1, #44	; 0x2c
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	4413      	add	r3, r2
 800a752:	334c      	adds	r3, #76	; 0x4c
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8110 	beq.w	800a97c <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a75c:	78fb      	ldrb	r3, [r7, #3]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	212c      	movs	r1, #44	; 0x2c
 800a762:	fb01 f303 	mul.w	r3, r1, r3
 800a766:	4413      	add	r3, r2
 800a768:	334c      	adds	r3, #76	; 0x4c
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	202c      	movs	r0, #44	; 0x2c
 800a772:	fb00 f202 	mul.w	r2, r0, r2
 800a776:	440a      	add	r2, r1
 800a778:	3240      	adds	r2, #64	; 0x40
 800a77a:	8812      	ldrh	r2, [r2, #0]
 800a77c:	4413      	add	r3, r2
 800a77e:	3b01      	subs	r3, #1
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	202c      	movs	r0, #44	; 0x2c
 800a786:	fb00 f202 	mul.w	r2, r0, r2
 800a78a:	440a      	add	r2, r1
 800a78c:	3240      	adds	r2, #64	; 0x40
 800a78e:	8812      	ldrh	r2, [r2, #0]
 800a790:	fbb3 f3f2 	udiv	r3, r3, r2
 800a794:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80ed 	beq.w	800a97c <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	212c      	movs	r1, #44	; 0x2c
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	3355      	adds	r3, #85	; 0x55
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	78fb      	ldrb	r3, [r7, #3]
 800a7b4:	f082 0201 	eor.w	r2, r2, #1
 800a7b8:	b2d0      	uxtb	r0, r2
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	212c      	movs	r1, #44	; 0x2c
 800a7be:	fb01 f303 	mul.w	r3, r1, r3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	3355      	adds	r3, #85	; 0x55
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e0d7      	b.n	800a97c <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a7cc:	78fb      	ldrb	r3, [r7, #3]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	212c      	movs	r1, #44	; 0x2c
 800a7d2:	fb01 f303 	mul.w	r3, r1, r3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3361      	adds	r3, #97	; 0x61
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	d109      	bne.n	800a7f4 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	212c      	movs	r1, #44	; 0x2c
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3361      	adds	r3, #97	; 0x61
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	e0c3      	b.n	800a97c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	212c      	movs	r1, #44	; 0x2c
 800a7fa:	fb01 f303 	mul.w	r3, r1, r3
 800a7fe:	4413      	add	r3, r2
 800a800:	3361      	adds	r3, #97	; 0x61
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b04      	cmp	r3, #4
 800a806:	d112      	bne.n	800a82e <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	212c      	movs	r1, #44	; 0x2c
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	4413      	add	r3, r2
 800a814:	3361      	adds	r3, #97	; 0x61
 800a816:	2202      	movs	r2, #2
 800a818:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	212c      	movs	r1, #44	; 0x2c
 800a820:	fb01 f303 	mul.w	r3, r1, r3
 800a824:	4413      	add	r3, r2
 800a826:	3360      	adds	r3, #96	; 0x60
 800a828:	2202      	movs	r2, #2
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e0a6      	b.n	800a97c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	212c      	movs	r1, #44	; 0x2c
 800a834:	fb01 f303 	mul.w	r3, r1, r3
 800a838:	4413      	add	r3, r2
 800a83a:	3361      	adds	r3, #97	; 0x61
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b05      	cmp	r3, #5
 800a840:	d112      	bne.n	800a868 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	212c      	movs	r1, #44	; 0x2c
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	4413      	add	r3, r2
 800a84e:	3361      	adds	r3, #97	; 0x61
 800a850:	2202      	movs	r2, #2
 800a852:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	212c      	movs	r1, #44	; 0x2c
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	4413      	add	r3, r2
 800a860:	3360      	adds	r3, #96	; 0x60
 800a862:	2202      	movs	r2, #2
 800a864:	701a      	strb	r2, [r3, #0]
 800a866:	e089      	b.n	800a97c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	212c      	movs	r1, #44	; 0x2c
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	4413      	add	r3, r2
 800a874:	3361      	adds	r3, #97	; 0x61
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2b06      	cmp	r3, #6
 800a87a:	d112      	bne.n	800a8a2 <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	212c      	movs	r1, #44	; 0x2c
 800a882:	fb01 f303 	mul.w	r3, r1, r3
 800a886:	4413      	add	r3, r2
 800a888:	3361      	adds	r3, #97	; 0x61
 800a88a:	2202      	movs	r2, #2
 800a88c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	212c      	movs	r1, #44	; 0x2c
 800a894:	fb01 f303 	mul.w	r3, r1, r3
 800a898:	4413      	add	r3, r2
 800a89a:	3360      	adds	r3, #96	; 0x60
 800a89c:	2205      	movs	r2, #5
 800a89e:	701a      	strb	r2, [r3, #0]
 800a8a0:	e06c      	b.n	800a97c <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	212c      	movs	r1, #44	; 0x2c
 800a8a8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ac:	4413      	add	r3, r2
 800a8ae:	3361      	adds	r3, #97	; 0x61
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b07      	cmp	r3, #7
 800a8b4:	d009      	beq.n	800a8ca <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	212c      	movs	r1, #44	; 0x2c
 800a8bc:	fb01 f303 	mul.w	r3, r1, r3
 800a8c0:	4413      	add	r3, r2
 800a8c2:	3361      	adds	r3, #97	; 0x61
 800a8c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a8c6:	2b09      	cmp	r3, #9
 800a8c8:	d166      	bne.n	800a998 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	212c      	movs	r1, #44	; 0x2c
 800a8d0:	fb01 f303 	mul.w	r3, r1, r3
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3361      	adds	r3, #97	; 0x61
 800a8d8:	2202      	movs	r2, #2
 800a8da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	222c      	movs	r2, #44	; 0x2c
 800a8e2:	fb03 f202 	mul.w	r2, r3, r2
 800a8e6:	440a      	add	r2, r1
 800a8e8:	325c      	adds	r2, #92	; 0x5c
 800a8ea:	6812      	ldr	r2, [r2, #0]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	202c      	movs	r0, #44	; 0x2c
 800a8f2:	fb00 f303 	mul.w	r3, r0, r3
 800a8f6:	440b      	add	r3, r1
 800a8f8:	335c      	adds	r3, #92	; 0x5c
 800a8fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	212c      	movs	r1, #44	; 0x2c
 800a902:	fb01 f303 	mul.w	r3, r1, r3
 800a906:	4413      	add	r3, r2
 800a908:	335c      	adds	r3, #92	; 0x5c
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d912      	bls.n	800a936 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	212c      	movs	r1, #44	; 0x2c
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	335c      	adds	r3, #92	; 0x5c
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a922:	78fb      	ldrb	r3, [r7, #3]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	212c      	movs	r1, #44	; 0x2c
 800a928:	fb01 f303 	mul.w	r3, r1, r3
 800a92c:	4413      	add	r3, r2
 800a92e:	3360      	adds	r3, #96	; 0x60
 800a930:	2204      	movs	r2, #4
 800a932:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a934:	e021      	b.n	800a97a <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	212c      	movs	r1, #44	; 0x2c
 800a93c:	fb01 f303 	mul.w	r3, r1, r3
 800a940:	4413      	add	r3, r2
 800a942:	3360      	adds	r3, #96	; 0x60
 800a944:	2202      	movs	r2, #2
 800a946:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a95e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a966:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a974:	461a      	mov	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a97a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	212c      	movs	r1, #44	; 0x2c
 800a982:	fb01 f303 	mul.w	r3, r1, r3
 800a986:	4413      	add	r3, r2
 800a988:	3360      	adds	r3, #96	; 0x60
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	78fb      	ldrb	r3, [r7, #3]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7f9 ff51 	bl	8004838 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a996:	e000      	b.n	800a99a <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800a998:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08a      	sub	sp, #40	; 0x28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	0c5b      	lsrs	r3, r3, #17
 800a9c6:	f003 030f 	and.w	r3, r3, #15
 800a9ca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	091b      	lsrs	r3, r3, #4
 800a9d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d004      	beq.n	800a9e6 <HCD_RXQLVL_IRQHandler+0x46>
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b05      	cmp	r3, #5
 800a9e0:	f000 80a9 	beq.w	800ab36 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a9e4:	e0aa      	b.n	800ab3c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 80a6 	beq.w	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	212c      	movs	r1, #44	; 0x2c
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3344      	adds	r3, #68	; 0x44
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 809b 	beq.w	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	212c      	movs	r1, #44	; 0x2c
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	3350      	adds	r3, #80	; 0x50
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	441a      	add	r2, r3
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	202c      	movs	r0, #44	; 0x2c
 800aa1e:	fb00 f303 	mul.w	r3, r0, r3
 800aa22:	440b      	add	r3, r1
 800aa24:	334c      	adds	r3, #76	; 0x4c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d87a      	bhi.n	800ab22 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	212c      	movs	r1, #44	; 0x2c
 800aa36:	fb01 f303 	mul.w	r3, r1, r3
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3344      	adds	r3, #68	; 0x44
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	b292      	uxth	r2, r2
 800aa44:	4619      	mov	r1, r3
 800aa46:	f009 fff9 	bl	8014a3c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	212c      	movs	r1, #44	; 0x2c
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	4413      	add	r3, r2
 800aa56:	3344      	adds	r3, #68	; 0x44
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	441a      	add	r2, r3
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	202c      	movs	r0, #44	; 0x2c
 800aa64:	fb00 f303 	mul.w	r3, r0, r3
 800aa68:	440b      	add	r3, r1
 800aa6a:	3344      	adds	r3, #68	; 0x44
 800aa6c:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	212c      	movs	r1, #44	; 0x2c
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	4413      	add	r3, r2
 800aa7a:	3350      	adds	r3, #80	; 0x50
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	441a      	add	r2, r3
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	202c      	movs	r0, #44	; 0x2c
 800aa88:	fb00 f303 	mul.w	r3, r0, r3
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3350      	adds	r3, #80	; 0x50
 800aa90:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	0cdb      	lsrs	r3, r3, #19
 800aaa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaa6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	212c      	movs	r1, #44	; 0x2c
 800aaae:	fb01 f303 	mul.w	r3, r1, r3
 800aab2:	4413      	add	r3, r2
 800aab4:	3340      	adds	r3, #64	; 0x40
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d13c      	bne.n	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d039      	beq.n	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aadc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aae4:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	212c      	movs	r1, #44	; 0x2c
 800aafe:	fb01 f303 	mul.w	r3, r1, r3
 800ab02:	4413      	add	r3, r2
 800ab04:	3354      	adds	r3, #84	; 0x54
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f083 0301 	eor.w	r3, r3, #1
 800ab0c:	b2d8      	uxtb	r0, r3
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	212c      	movs	r1, #44	; 0x2c
 800ab14:	fb01 f303 	mul.w	r3, r1, r3
 800ab18:	4413      	add	r3, r2
 800ab1a:	3354      	adds	r3, #84	; 0x54
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	701a      	strb	r2, [r3, #0]
      break;
 800ab20:	e00b      	b.n	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	212c      	movs	r1, #44	; 0x2c
 800ab28:	fb01 f303 	mul.w	r3, r1, r3
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3360      	adds	r3, #96	; 0x60
 800ab30:	2204      	movs	r2, #4
 800ab32:	701a      	strb	r2, [r3, #0]
      break;
 800ab34:	e001      	b.n	800ab3a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ab36:	bf00      	nop
 800ab38:	e000      	b.n	800ab3c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ab3a:	bf00      	nop
  }
}
 800ab3c:	bf00      	nop
 800ab3e:	3728      	adds	r7, #40	; 0x28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f003 0302 	and.w	r3, r3, #2
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d10b      	bne.n	800ab94 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d102      	bne.n	800ab8c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7f9 fe3a 	bl	8004800 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f043 0302 	orr.w	r3, r3, #2
 800ab92:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0308 	and.w	r3, r3, #8
 800ab9a:	2b08      	cmp	r3, #8
 800ab9c:	d132      	bne.n	800ac04 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f043 0308 	orr.w	r3, r3, #8
 800aba4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	2b04      	cmp	r3, #4
 800abae:	d126      	bne.n	800abfe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d113      	bne.n	800abe0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800abbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800abc2:	d106      	bne.n	800abd2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2102      	movs	r1, #2
 800abca:	4618      	mov	r0, r3
 800abcc:	f00a f8be 	bl	8014d4c <USB_InitFSLSPClkSel>
 800abd0:	e011      	b.n	800abf6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2101      	movs	r1, #1
 800abd8:	4618      	mov	r0, r3
 800abda:	f00a f8b7 	bl	8014d4c <USB_InitFSLSPClkSel>
 800abde:	e00a      	b.n	800abf6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d106      	bne.n	800abf6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abee:	461a      	mov	r2, r3
 800abf0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800abf4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7f9 fe2c 	bl	8004854 <HAL_HCD_PortEnabled_Callback>
 800abfc:	e002      	b.n	800ac04 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7f9 fe36 	bl	8004870 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	d103      	bne.n	800ac16 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f043 0320 	orr.w	r3, r3, #32
 800ac14:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	6013      	str	r3, [r2, #0]
}
 800ac22:	bf00      	nop
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e07f      	b.n	800ad3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d106      	bne.n	800ac58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7f7 fda0 	bl	8002798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2224      	movs	r2, #36	; 0x24
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 0201 	bic.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d107      	bne.n	800aca6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	e006      	b.n	800acb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689a      	ldr	r2, [r3, #8]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800acb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d104      	bne.n	800acc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6859      	ldr	r1, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	4b1d      	ldr	r3, [pc, #116]	; (800ad48 <HAL_I2C_Init+0x11c>)
 800acd2:	430b      	orrs	r3, r1
 800acd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68da      	ldr	r2, [r3, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ace4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691a      	ldr	r2, [r3, #16]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	430a      	orrs	r2, r1
 800acfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	69d9      	ldr	r1, [r3, #28]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a1a      	ldr	r2, [r3, #32]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	02008000 	.word	0x02008000

0800ad4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	461a      	mov	r2, r3
 800ad58:	460b      	mov	r3, r1
 800ad5a:	817b      	strh	r3, [r7, #10]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	f040 80da 	bne.w	800af22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d101      	bne.n	800ad7c <HAL_I2C_Master_Transmit+0x30>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	e0d3      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad84:	f7fa f826 	bl	8004dd4 <HAL_GetTick>
 800ad88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	2319      	movs	r3, #25
 800ad90:	2201      	movs	r2, #1
 800ad92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f8f0 	bl	800af7c <I2C_WaitOnFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e0be      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2221      	movs	r2, #33	; 0x21
 800adaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2210      	movs	r2, #16
 800adb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	893a      	ldrh	r2, [r7, #8]
 800adc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800add2:	b29b      	uxth	r3, r3
 800add4:	2bff      	cmp	r3, #255	; 0xff
 800add6:	d90e      	bls.n	800adf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	22ff      	movs	r2, #255	; 0xff
 800addc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	8979      	ldrh	r1, [r7, #10]
 800ade6:	4b51      	ldr	r3, [pc, #324]	; (800af2c <HAL_I2C_Master_Transmit+0x1e0>)
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 fa7e 	bl	800b2f0 <I2C_TransferConfig>
 800adf4:	e06c      	b.n	800aed0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	8979      	ldrh	r1, [r7, #10]
 800ae08:	4b48      	ldr	r3, [pc, #288]	; (800af2c <HAL_I2C_Master_Transmit+0x1e0>)
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 fa6d 	bl	800b2f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ae16:	e05b      	b.n	800aed0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	6a39      	ldr	r1, [r7, #32]
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 f8fc 	bl	800b01a <I2C_WaitOnTXISFlagUntilTimeout>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e07b      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae54:	3b01      	subs	r3, #1
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d034      	beq.n	800aed0 <HAL_I2C_Master_Transmit+0x184>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d130      	bne.n	800aed0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	2200      	movs	r2, #0
 800ae76:	2180      	movs	r1, #128	; 0x80
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 f87f 	bl	800af7c <I2C_WaitOnFlagUntilTimeout>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d001      	beq.n	800ae88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e04d      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	2bff      	cmp	r3, #255	; 0xff
 800ae90:	d90e      	bls.n	800aeb0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	22ff      	movs	r2, #255	; 0xff
 800ae96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	8979      	ldrh	r1, [r7, #10]
 800aea0:	2300      	movs	r3, #0
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 fa21 	bl	800b2f0 <I2C_TransferConfig>
 800aeae:	e00f      	b.n	800aed0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	8979      	ldrh	r1, [r7, #10]
 800aec2:	2300      	movs	r3, #0
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fa10 	bl	800b2f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d19e      	bne.n	800ae18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	6a39      	ldr	r1, [r7, #32]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 f8e2 	bl	800b0a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e01a      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2220      	movs	r2, #32
 800aef4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6859      	ldr	r1, [r3, #4]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <HAL_I2C_Master_Transmit+0x1e4>)
 800af02:	400b      	ands	r3, r1
 800af04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2220      	movs	r2, #32
 800af0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e000      	b.n	800af24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800af22:	2302      	movs	r3, #2
  }
}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	80002000 	.word	0x80002000
 800af30:	fe00e800 	.word	0xfe00e800

0800af34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b02      	cmp	r3, #2
 800af48:	d103      	bne.n	800af52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2200      	movs	r2, #0
 800af50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d007      	beq.n	800af70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f042 0201 	orr.w	r2, r2, #1
 800af6e:	619a      	str	r2, [r3, #24]
  }
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	4613      	mov	r3, r2
 800af8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af8c:	e031      	b.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af94:	d02d      	beq.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af96:	f7f9 ff1d 	bl	8004dd4 <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d302      	bcc.n	800afac <I2C_WaitOnFlagUntilTimeout+0x30>
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d122      	bne.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699a      	ldr	r2, [r3, #24]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	4013      	ands	r3, r2
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	bf0c      	ite	eq
 800afbc:	2301      	moveq	r3, #1
 800afbe:	2300      	movne	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d113      	bne.n	800aff2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	f043 0220 	orr.w	r2, r3, #32
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2220      	movs	r2, #32
 800afda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e00f      	b.n	800b012 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699a      	ldr	r2, [r3, #24]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	4013      	ands	r3, r2
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	bf0c      	ite	eq
 800b002:	2301      	moveq	r3, #1
 800b004:	2300      	movne	r3, #0
 800b006:	b2db      	uxtb	r3, r3
 800b008:	461a      	mov	r2, r3
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d0be      	beq.n	800af8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b026:	e033      	b.n	800b090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f87f 	bl	800b130 <I2C_IsErrorOccurred>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e031      	b.n	800b0a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b042:	d025      	beq.n	800b090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b044:	f7f9 fec6 	bl	8004dd4 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	429a      	cmp	r2, r3
 800b052:	d302      	bcc.n	800b05a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d11a      	bne.n	800b090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b02      	cmp	r3, #2
 800b066:	d013      	beq.n	800b090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06c:	f043 0220 	orr.w	r2, r3, #32
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2220      	movs	r2, #32
 800b078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e007      	b.n	800b0a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d1c4      	bne.n	800b028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0b4:	e02f      	b.n	800b116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f838 	bl	800b130 <I2C_IsErrorOccurred>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e02d      	b.n	800b126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ca:	f7f9 fe83 	bl	8004dd4 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d302      	bcc.n	800b0e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d11a      	bne.n	800b116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	d013      	beq.n	800b116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	f043 0220 	orr.w	r2, r3, #32
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e007      	b.n	800b126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b20      	cmp	r3, #32
 800b122:	d1c8      	bne.n	800b0b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	; 0x28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d068      	beq.n	800b22e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2210      	movs	r2, #16
 800b162:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b164:	e049      	b.n	800b1fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b16c:	d045      	beq.n	800b1fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b16e:	f7f9 fe31 	bl	8004dd4 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d302      	bcc.n	800b184 <I2C_IsErrorOccurred+0x54>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d13a      	bne.n	800b1fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b196:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1a6:	d121      	bne.n	800b1ec <I2C_IsErrorOccurred+0xbc>
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ae:	d01d      	beq.n	800b1ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b1b0:	7cfb      	ldrb	r3, [r7, #19]
 800b1b2:	2b20      	cmp	r3, #32
 800b1b4:	d01a      	beq.n	800b1ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b1c6:	f7f9 fe05 	bl	8004dd4 <HAL_GetTick>
 800b1ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1cc:	e00e      	b.n	800b1ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1ce:	f7f9 fe01 	bl	8004dd4 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b19      	cmp	r3, #25
 800b1da:	d907      	bls.n	800b1ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	f043 0320 	orr.w	r3, r3, #32
 800b1e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b1ea:	e006      	b.n	800b1fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b20      	cmp	r3, #32
 800b1f8:	d1e9      	bne.n	800b1ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f003 0320 	and.w	r3, r3, #32
 800b204:	2b20      	cmp	r3, #32
 800b206:	d003      	beq.n	800b210 <I2C_IsErrorOccurred+0xe0>
 800b208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0aa      	beq.n	800b166 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b214:	2b00      	cmp	r3, #0
 800b216:	d103      	bne.n	800b220 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2220      	movs	r2, #32
 800b21e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	f043 0304 	orr.w	r3, r3, #4
 800b226:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00b      	beq.n	800b27a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	f043 0308 	orr.w	r3, r3, #8
 800b268:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00b      	beq.n	800b29c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	f043 0302 	orr.w	r3, r3, #2
 800b28a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d01c      	beq.n	800b2de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7ff fe45 	bl	800af34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6859      	ldr	r1, [r3, #4]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <I2C_IsErrorOccurred+0x1bc>)
 800b2b6:	400b      	ands	r3, r1
 800b2b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b2de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3728      	adds	r7, #40	; 0x28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	fe00e800 	.word	0xfe00e800

0800b2f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607b      	str	r3, [r7, #4]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	817b      	strh	r3, [r7, #10]
 800b2fe:	4613      	mov	r3, r2
 800b300:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b302:	897b      	ldrh	r3, [r7, #10]
 800b304:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b308:	7a7b      	ldrb	r3, [r7, #9]
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b310:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	4313      	orrs	r3, r2
 800b31a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b31e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	0d5b      	lsrs	r3, r3, #21
 800b32a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b32e:	4b08      	ldr	r3, [pc, #32]	; (800b350 <I2C_TransferConfig+0x60>)
 800b330:	430b      	orrs	r3, r1
 800b332:	43db      	mvns	r3, r3
 800b334:	ea02 0103 	and.w	r1, r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	430a      	orrs	r2, r1
 800b340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b342:	bf00      	nop
 800b344:	371c      	adds	r7, #28
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	03ff63ff 	.word	0x03ff63ff

0800b354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b20      	cmp	r3, #32
 800b368:	d138      	bne.n	800b3dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b374:	2302      	movs	r3, #2
 800b376:	e032      	b.n	800b3de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2224      	movs	r2, #36	; 0x24
 800b384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f022 0201 	bic.w	r2, r2, #1
 800b396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6819      	ldr	r1, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0201 	orr.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2220      	movs	r2, #32
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e000      	b.n	800b3de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3dc:	2302      	movs	r3, #2
  }
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b20      	cmp	r3, #32
 800b3fe:	d139      	bne.n	800b474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e033      	b.n	800b476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2224      	movs	r2, #36	; 0x24
 800b41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0201 	bic.w	r2, r2, #1
 800b42c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b43c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f042 0201 	orr.w	r2, r2, #1
 800b45e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	e000      	b.n	800b476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b474:	2302      	movs	r3, #2
  }
}
 800b476:	4618      	mov	r0, r3
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
	...

0800b484 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b48c:	4b19      	ldr	r3, [pc, #100]	; (800b4f4 <HAL_PWREx_ConfigSupply+0x70>)
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	f003 0304 	and.w	r3, r3, #4
 800b494:	2b04      	cmp	r3, #4
 800b496:	d00a      	beq.n	800b4ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b498:	4b16      	ldr	r3, [pc, #88]	; (800b4f4 <HAL_PWREx_ConfigSupply+0x70>)
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f003 0307 	and.w	r3, r3, #7
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d001      	beq.n	800b4aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e01f      	b.n	800b4ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e01d      	b.n	800b4ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b4ae:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <HAL_PWREx_ConfigSupply+0x70>)
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f023 0207 	bic.w	r2, r3, #7
 800b4b6:	490f      	ldr	r1, [pc, #60]	; (800b4f4 <HAL_PWREx_ConfigSupply+0x70>)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b4be:	f7f9 fc89 	bl	8004dd4 <HAL_GetTick>
 800b4c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4c4:	e009      	b.n	800b4da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b4c6:	f7f9 fc85 	bl	8004dd4 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4d4:	d901      	bls.n	800b4da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e007      	b.n	800b4ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <HAL_PWREx_ConfigSupply+0x70>)
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4e6:	d1ee      	bne.n	800b4c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	58024800 	.word	0x58024800

0800b4f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	4a04      	ldr	r2, [pc, #16]	; (800b514 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b506:	60d3      	str	r3, [r2, #12]
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	58024800 	.word	0x58024800

0800b518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08c      	sub	sp, #48	; 0x30
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d102      	bne.n	800b52c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	f000 bc48 	b.w	800bdbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8088 	beq.w	800b64a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b53a:	4b99      	ldr	r3, [pc, #612]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b542:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b544:	4b96      	ldr	r3, [pc, #600]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54c:	2b10      	cmp	r3, #16
 800b54e:	d007      	beq.n	800b560 <HAL_RCC_OscConfig+0x48>
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	2b18      	cmp	r3, #24
 800b554:	d111      	bne.n	800b57a <HAL_RCC_OscConfig+0x62>
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d10c      	bne.n	800b57a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b560:	4b8f      	ldr	r3, [pc, #572]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d06d      	beq.n	800b648 <HAL_RCC_OscConfig+0x130>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d169      	bne.n	800b648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f000 bc21 	b.w	800bdbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b582:	d106      	bne.n	800b592 <HAL_RCC_OscConfig+0x7a>
 800b584:	4b86      	ldr	r3, [pc, #536]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a85      	ldr	r2, [pc, #532]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b58a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b58e:	6013      	str	r3, [r2, #0]
 800b590:	e02e      	b.n	800b5f0 <HAL_RCC_OscConfig+0xd8>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10c      	bne.n	800b5b4 <HAL_RCC_OscConfig+0x9c>
 800b59a:	4b81      	ldr	r3, [pc, #516]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a80      	ldr	r2, [pc, #512]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	4b7e      	ldr	r3, [pc, #504]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a7d      	ldr	r2, [pc, #500]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	e01d      	b.n	800b5f0 <HAL_RCC_OscConfig+0xd8>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5bc:	d10c      	bne.n	800b5d8 <HAL_RCC_OscConfig+0xc0>
 800b5be:	4b78      	ldr	r3, [pc, #480]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a77      	ldr	r2, [pc, #476]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	4b75      	ldr	r3, [pc, #468]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a74      	ldr	r2, [pc, #464]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	e00b      	b.n	800b5f0 <HAL_RCC_OscConfig+0xd8>
 800b5d8:	4b71      	ldr	r3, [pc, #452]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a70      	ldr	r2, [pc, #448]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	4b6e      	ldr	r3, [pc, #440]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a6d      	ldr	r2, [pc, #436]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d013      	beq.n	800b620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f8:	f7f9 fbec 	bl	8004dd4 <HAL_GetTick>
 800b5fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5fe:	e008      	b.n	800b612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b600:	f7f9 fbe8 	bl	8004dd4 <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	2b64      	cmp	r3, #100	; 0x64
 800b60c:	d901      	bls.n	800b612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e3d4      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b612:	4b63      	ldr	r3, [pc, #396]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0f0      	beq.n	800b600 <HAL_RCC_OscConfig+0xe8>
 800b61e:	e014      	b.n	800b64a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b620:	f7f9 fbd8 	bl	8004dd4 <HAL_GetTick>
 800b624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b626:	e008      	b.n	800b63a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b628:	f7f9 fbd4 	bl	8004dd4 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b64      	cmp	r3, #100	; 0x64
 800b634:	d901      	bls.n	800b63a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e3c0      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b63a:	4b59      	ldr	r3, [pc, #356]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1f0      	bne.n	800b628 <HAL_RCC_OscConfig+0x110>
 800b646:	e000      	b.n	800b64a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 80ca 	beq.w	800b7ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b658:	4b51      	ldr	r3, [pc, #324]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b660:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b662:	4b4f      	ldr	r3, [pc, #316]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b666:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <HAL_RCC_OscConfig+0x166>
 800b66e:	6a3b      	ldr	r3, [r7, #32]
 800b670:	2b18      	cmp	r3, #24
 800b672:	d156      	bne.n	800b722 <HAL_RCC_OscConfig+0x20a>
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d151      	bne.n	800b722 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b67e:	4b48      	ldr	r3, [pc, #288]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	d005      	beq.n	800b696 <HAL_RCC_OscConfig+0x17e>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e392      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b696:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f023 0219 	bic.w	r2, r3, #25
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	493f      	ldr	r1, [pc, #252]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a8:	f7f9 fb94 	bl	8004dd4 <HAL_GetTick>
 800b6ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6ae:	e008      	b.n	800b6c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6b0:	f7f9 fb90 	bl	8004dd4 <HAL_GetTick>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d901      	bls.n	800b6c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b6be:	2303      	movs	r3, #3
 800b6c0:	e37c      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b6c2:	4b37      	ldr	r3, [pc, #220]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0304 	and.w	r3, r3, #4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0f0      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ce:	f7f9 fbb1 	bl	8004e34 <HAL_GetREVID>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f241 0203 	movw	r2, #4099	; 0x1003
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d817      	bhi.n	800b70c <HAL_RCC_OscConfig+0x1f4>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b40      	cmp	r3, #64	; 0x40
 800b6e2:	d108      	bne.n	800b6f6 <HAL_RCC_OscConfig+0x1de>
 800b6e4:	4b2e      	ldr	r3, [pc, #184]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b6ec:	4a2c      	ldr	r2, [pc, #176]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b6ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6f4:	e07a      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6f6:	4b2a      	ldr	r3, [pc, #168]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	031b      	lsls	r3, r3, #12
 800b704:	4926      	ldr	r1, [pc, #152]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b706:	4313      	orrs	r3, r2
 800b708:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b70a:	e06f      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b70c:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	061b      	lsls	r3, r3, #24
 800b71a:	4921      	ldr	r1, [pc, #132]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b720:	e064      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d047      	beq.n	800b7ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b72a:	4b1d      	ldr	r3, [pc, #116]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f023 0219 	bic.w	r2, r3, #25
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	491a      	ldr	r1, [pc, #104]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b73c:	f7f9 fb4a 	bl	8004dd4 <HAL_GetTick>
 800b740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b742:	e008      	b.n	800b756 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b744:	f7f9 fb46 	bl	8004dd4 <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d901      	bls.n	800b756 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e332      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b756:	4b12      	ldr	r3, [pc, #72]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 0304 	and.w	r3, r3, #4
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0f0      	beq.n	800b744 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b762:	f7f9 fb67 	bl	8004e34 <HAL_GetREVID>
 800b766:	4603      	mov	r3, r0
 800b768:	f241 0203 	movw	r2, #4099	; 0x1003
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d819      	bhi.n	800b7a4 <HAL_RCC_OscConfig+0x28c>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2b40      	cmp	r3, #64	; 0x40
 800b776:	d108      	bne.n	800b78a <HAL_RCC_OscConfig+0x272>
 800b778:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b780:	4a07      	ldr	r2, [pc, #28]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b786:	6053      	str	r3, [r2, #4]
 800b788:	e030      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
 800b78a:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	031b      	lsls	r3, r3, #12
 800b798:	4901      	ldr	r1, [pc, #4]	; (800b7a0 <HAL_RCC_OscConfig+0x288>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	604b      	str	r3, [r1, #4]
 800b79e:	e025      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
 800b7a0:	58024400 	.word	0x58024400
 800b7a4:	4b9a      	ldr	r3, [pc, #616]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	061b      	lsls	r3, r3, #24
 800b7b2:	4997      	ldr	r1, [pc, #604]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	604b      	str	r3, [r1, #4]
 800b7b8:	e018      	b.n	800b7ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7ba:	4b95      	ldr	r3, [pc, #596]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a94      	ldr	r2, [pc, #592]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7c0:	f023 0301 	bic.w	r3, r3, #1
 800b7c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c6:	f7f9 fb05 	bl	8004dd4 <HAL_GetTick>
 800b7ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7ce:	f7f9 fb01 	bl	8004dd4 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e2ed      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7e0:	4b8b      	ldr	r3, [pc, #556]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 80a9 	beq.w	800b94c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7fa:	4b85      	ldr	r3, [pc, #532]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b802:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b804:	4b82      	ldr	r3, [pc, #520]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b808:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b08      	cmp	r3, #8
 800b80e:	d007      	beq.n	800b820 <HAL_RCC_OscConfig+0x308>
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b18      	cmp	r3, #24
 800b814:	d13a      	bne.n	800b88c <HAL_RCC_OscConfig+0x374>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f003 0303 	and.w	r3, r3, #3
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d135      	bne.n	800b88c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b820:	4b7b      	ldr	r3, [pc, #492]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <HAL_RCC_OscConfig+0x320>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d001      	beq.n	800b838 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	e2c1      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b838:	f7f9 fafc 	bl	8004e34 <HAL_GetREVID>
 800b83c:	4603      	mov	r3, r0
 800b83e:	f241 0203 	movw	r2, #4099	; 0x1003
 800b842:	4293      	cmp	r3, r2
 800b844:	d817      	bhi.n	800b876 <HAL_RCC_OscConfig+0x35e>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d108      	bne.n	800b860 <HAL_RCC_OscConfig+0x348>
 800b84e:	4b70      	ldr	r3, [pc, #448]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b856:	4a6e      	ldr	r2, [pc, #440]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b85c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b85e:	e075      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b860:	4b6b      	ldr	r3, [pc, #428]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	069b      	lsls	r3, r3, #26
 800b86e:	4968      	ldr	r1, [pc, #416]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b870:	4313      	orrs	r3, r2
 800b872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b874:	e06a      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b876:	4b66      	ldr	r3, [pc, #408]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	061b      	lsls	r3, r3, #24
 800b884:	4962      	ldr	r1, [pc, #392]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b886:	4313      	orrs	r3, r2
 800b888:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b88a:	e05f      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d042      	beq.n	800b91a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b894:	4b5e      	ldr	r3, [pc, #376]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a5d      	ldr	r2, [pc, #372]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b89e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a0:	f7f9 fa98 	bl	8004dd4 <HAL_GetTick>
 800b8a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8a6:	e008      	b.n	800b8ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b8a8:	f7f9 fa94 	bl	8004dd4 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d901      	bls.n	800b8ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e280      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b8ba:	4b55      	ldr	r3, [pc, #340]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0f0      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b8c6:	f7f9 fab5 	bl	8004e34 <HAL_GetREVID>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d817      	bhi.n	800b904 <HAL_RCC_OscConfig+0x3ec>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	d108      	bne.n	800b8ee <HAL_RCC_OscConfig+0x3d6>
 800b8dc:	4b4c      	ldr	r3, [pc, #304]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b8e4:	4a4a      	ldr	r2, [pc, #296]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b8e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8ea:	6053      	str	r3, [r2, #4]
 800b8ec:	e02e      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
 800b8ee:	4b48      	ldr	r3, [pc, #288]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	069b      	lsls	r3, r3, #26
 800b8fc:	4944      	ldr	r1, [pc, #272]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	604b      	str	r3, [r1, #4]
 800b902:	e023      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
 800b904:	4b42      	ldr	r3, [pc, #264]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	061b      	lsls	r3, r3, #24
 800b912:	493f      	ldr	r1, [pc, #252]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b914:	4313      	orrs	r3, r2
 800b916:	60cb      	str	r3, [r1, #12]
 800b918:	e018      	b.n	800b94c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b91a:	4b3d      	ldr	r3, [pc, #244]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a3c      	ldr	r2, [pc, #240]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b926:	f7f9 fa55 	bl	8004dd4 <HAL_GetTick>
 800b92a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b92c:	e008      	b.n	800b940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b92e:	f7f9 fa51 	bl	8004dd4 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d901      	bls.n	800b940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e23d      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b940:	4b33      	ldr	r3, [pc, #204]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f0      	bne.n	800b92e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0308 	and.w	r3, r3, #8
 800b954:	2b00      	cmp	r3, #0
 800b956:	d036      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d019      	beq.n	800b994 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b960:	4b2b      	ldr	r3, [pc, #172]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b964:	4a2a      	ldr	r2, [pc, #168]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b966:	f043 0301 	orr.w	r3, r3, #1
 800b96a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b96c:	f7f9 fa32 	bl	8004dd4 <HAL_GetTick>
 800b970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b972:	e008      	b.n	800b986 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b974:	f7f9 fa2e 	bl	8004dd4 <HAL_GetTick>
 800b978:	4602      	mov	r2, r0
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d901      	bls.n	800b986 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e21a      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b986:	4b22      	ldr	r3, [pc, #136]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98a:	f003 0302 	and.w	r3, r3, #2
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d0f0      	beq.n	800b974 <HAL_RCC_OscConfig+0x45c>
 800b992:	e018      	b.n	800b9c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b994:	4b1e      	ldr	r3, [pc, #120]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b998:	4a1d      	ldr	r2, [pc, #116]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b99a:	f023 0301 	bic.w	r3, r3, #1
 800b99e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9a0:	f7f9 fa18 	bl	8004dd4 <HAL_GetTick>
 800b9a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9a6:	e008      	b.n	800b9ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9a8:	f7f9 fa14 	bl	8004dd4 <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e200      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b9bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1f0      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 0320 	and.w	r3, r3, #32
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d039      	beq.n	800ba46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01c      	beq.n	800ba14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b9da:	4b0d      	ldr	r3, [pc, #52]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	4a0c      	ldr	r2, [pc, #48]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800b9e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b9e6:	f7f9 f9f5 	bl	8004dd4 <HAL_GetTick>
 800b9ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9ec:	e008      	b.n	800ba00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b9ee:	f7f9 f9f1 	bl	8004dd4 <HAL_GetTick>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d901      	bls.n	800ba00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e1dd      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ba00:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <HAL_RCC_OscConfig+0x4f8>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0f0      	beq.n	800b9ee <HAL_RCC_OscConfig+0x4d6>
 800ba0c:	e01b      	b.n	800ba46 <HAL_RCC_OscConfig+0x52e>
 800ba0e:	bf00      	nop
 800ba10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba14:	4b9b      	ldr	r3, [pc, #620]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a9a      	ldr	r2, [pc, #616]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800ba1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ba20:	f7f9 f9d8 	bl	8004dd4 <HAL_GetTick>
 800ba24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba26:	e008      	b.n	800ba3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba28:	f7f9 f9d4 	bl	8004dd4 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d901      	bls.n	800ba3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e1c0      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba3a:	4b92      	ldr	r3, [pc, #584]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f0      	bne.n	800ba28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f000 8081 	beq.w	800bb56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba54:	4b8c      	ldr	r3, [pc, #560]	; (800bc88 <HAL_RCC_OscConfig+0x770>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a8b      	ldr	r2, [pc, #556]	; (800bc88 <HAL_RCC_OscConfig+0x770>)
 800ba5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba60:	f7f9 f9b8 	bl	8004dd4 <HAL_GetTick>
 800ba64:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba66:	e008      	b.n	800ba7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba68:	f7f9 f9b4 	bl	8004dd4 <HAL_GetTick>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b64      	cmp	r3, #100	; 0x64
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e1a0      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba7a:	4b83      	ldr	r3, [pc, #524]	; (800bc88 <HAL_RCC_OscConfig+0x770>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f0      	beq.n	800ba68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d106      	bne.n	800ba9c <HAL_RCC_OscConfig+0x584>
 800ba8e:	4b7d      	ldr	r3, [pc, #500]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800ba90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba92:	4a7c      	ldr	r2, [pc, #496]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800ba94:	f043 0301 	orr.w	r3, r3, #1
 800ba98:	6713      	str	r3, [r2, #112]	; 0x70
 800ba9a:	e02d      	b.n	800baf8 <HAL_RCC_OscConfig+0x5e0>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10c      	bne.n	800babe <HAL_RCC_OscConfig+0x5a6>
 800baa4:	4b77      	ldr	r3, [pc, #476]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800baa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa8:	4a76      	ldr	r2, [pc, #472]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800baaa:	f023 0301 	bic.w	r3, r3, #1
 800baae:	6713      	str	r3, [r2, #112]	; 0x70
 800bab0:	4b74      	ldr	r3, [pc, #464]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab4:	4a73      	ldr	r2, [pc, #460]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bab6:	f023 0304 	bic.w	r3, r3, #4
 800baba:	6713      	str	r3, [r2, #112]	; 0x70
 800babc:	e01c      	b.n	800baf8 <HAL_RCC_OscConfig+0x5e0>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	2b05      	cmp	r3, #5
 800bac4:	d10c      	bne.n	800bae0 <HAL_RCC_OscConfig+0x5c8>
 800bac6:	4b6f      	ldr	r3, [pc, #444]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	4a6e      	ldr	r2, [pc, #440]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bacc:	f043 0304 	orr.w	r3, r3, #4
 800bad0:	6713      	str	r3, [r2, #112]	; 0x70
 800bad2:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad6:	4a6b      	ldr	r2, [pc, #428]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bad8:	f043 0301 	orr.w	r3, r3, #1
 800badc:	6713      	str	r3, [r2, #112]	; 0x70
 800bade:	e00b      	b.n	800baf8 <HAL_RCC_OscConfig+0x5e0>
 800bae0:	4b68      	ldr	r3, [pc, #416]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae4:	4a67      	ldr	r2, [pc, #412]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bae6:	f023 0301 	bic.w	r3, r3, #1
 800baea:	6713      	str	r3, [r2, #112]	; 0x70
 800baec:	4b65      	ldr	r3, [pc, #404]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf0:	4a64      	ldr	r2, [pc, #400]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800baf2:	f023 0304 	bic.w	r3, r3, #4
 800baf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d015      	beq.n	800bb2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb00:	f7f9 f968 	bl	8004dd4 <HAL_GetTick>
 800bb04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb06:	e00a      	b.n	800bb1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb08:	f7f9 f964 	bl	8004dd4 <HAL_GetTick>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e14e      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb1e:	4b59      	ldr	r3, [pc, #356]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	f003 0302 	and.w	r3, r3, #2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0ee      	beq.n	800bb08 <HAL_RCC_OscConfig+0x5f0>
 800bb2a:	e014      	b.n	800bb56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb2c:	f7f9 f952 	bl	8004dd4 <HAL_GetTick>
 800bb30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb32:	e00a      	b.n	800bb4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb34:	f7f9 f94e 	bl	8004dd4 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d901      	bls.n	800bb4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e138      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb4a:	4b4e      	ldr	r3, [pc, #312]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1ee      	bne.n	800bb34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 812d 	beq.w	800bdba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bb60:	4b48      	ldr	r3, [pc, #288]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb68:	2b18      	cmp	r3, #24
 800bb6a:	f000 80bd 	beq.w	800bce8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	f040 809e 	bne.w	800bcb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb78:	4b42      	ldr	r3, [pc, #264]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a41      	ldr	r2, [pc, #260]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bb7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb84:	f7f9 f926 	bl	8004dd4 <HAL_GetTick>
 800bb88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb8a:	e008      	b.n	800bb9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb8c:	f7f9 f922 	bl	8004dd4 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d901      	bls.n	800bb9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e10e      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb9e:	4b39      	ldr	r3, [pc, #228]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1f0      	bne.n	800bb8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbaa:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bbac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbae:	4b37      	ldr	r3, [pc, #220]	; (800bc8c <HAL_RCC_OscConfig+0x774>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bbba:	0112      	lsls	r2, r2, #4
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	4931      	ldr	r1, [pc, #196]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	628b      	str	r3, [r1, #40]	; 0x28
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	025b      	lsls	r3, r3, #9
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	041b      	lsls	r3, r3, #16
 800bbe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbec:	3b01      	subs	r3, #1
 800bbee:	061b      	lsls	r3, r3, #24
 800bbf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bbf4:	4923      	ldr	r1, [pc, #140]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bbfa:	4b22      	ldr	r3, [pc, #136]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	4a21      	ldr	r2, [pc, #132]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc06:	4b1f      	ldr	r3, [pc, #124]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc0a:	4b21      	ldr	r3, [pc, #132]	; (800bc90 <HAL_RCC_OscConfig+0x778>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bc12:	00d2      	lsls	r2, r2, #3
 800bc14:	491b      	ldr	r1, [pc, #108]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1e:	f023 020c 	bic.w	r2, r3, #12
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc26:	4917      	ldr	r1, [pc, #92]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc2c:	4b15      	ldr	r3, [pc, #84]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc30:	f023 0202 	bic.w	r2, r3, #2
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc38:	4912      	ldr	r1, [pc, #72]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc3e:	4b11      	ldr	r3, [pc, #68]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc42:	4a10      	ldr	r2, [pc, #64]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	4a0d      	ldr	r2, [pc, #52]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5a:	4a0a      	ldr	r2, [pc, #40]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bc60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bc62:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc66:	4a07      	ldr	r2, [pc, #28]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc68:	f043 0301 	orr.w	r3, r3, #1
 800bc6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a04      	ldr	r2, [pc, #16]	; (800bc84 <HAL_RCC_OscConfig+0x76c>)
 800bc74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc7a:	f7f9 f8ab 	bl	8004dd4 <HAL_GetTick>
 800bc7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc80:	e011      	b.n	800bca6 <HAL_RCC_OscConfig+0x78e>
 800bc82:	bf00      	nop
 800bc84:	58024400 	.word	0x58024400
 800bc88:	58024800 	.word	0x58024800
 800bc8c:	fffffc0c 	.word	0xfffffc0c
 800bc90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc94:	f7f9 f89e 	bl	8004dd4 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e08a      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bca6:	4b47      	ldr	r3, [pc, #284]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0f0      	beq.n	800bc94 <HAL_RCC_OscConfig+0x77c>
 800bcb2:	e082      	b.n	800bdba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb4:	4b43      	ldr	r3, [pc, #268]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a42      	ldr	r2, [pc, #264]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bcba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7f9 f888 	bl	8004dd4 <HAL_GetTick>
 800bcc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc8:	f7f9 f884 	bl	8004dd4 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e070      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcda:	4b3a      	ldr	r3, [pc, #232]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1f0      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x7b0>
 800bce6:	e068      	b.n	800bdba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bce8:	4b36      	ldr	r3, [pc, #216]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bcee:	4b35      	ldr	r3, [pc, #212]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d031      	beq.n	800bd60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f003 0203 	and.w	r2, r3, #3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d12a      	bne.n	800bd60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	091b      	lsrs	r3, r3, #4
 800bd0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d122      	bne.n	800bd60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d11a      	bne.n	800bd60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	0a5b      	lsrs	r3, r3, #9
 800bd2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d111      	bne.n	800bd60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	0c1b      	lsrs	r3, r3, #16
 800bd40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d108      	bne.n	800bd60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	0e1b      	lsrs	r3, r3, #24
 800bd52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d001      	beq.n	800bd64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e02b      	b.n	800bdbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bd64:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd68:	08db      	lsrs	r3, r3, #3
 800bd6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd74:	693a      	ldr	r2, [r7, #16]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d01f      	beq.n	800bdba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bd7a:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7e:	4a11      	ldr	r2, [pc, #68]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd86:	f7f9 f825 	bl	8004dd4 <HAL_GetTick>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bd8c:	bf00      	nop
 800bd8e:	f7f9 f821 	bl	8004dd4 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d0f9      	beq.n	800bd8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd9e:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <HAL_RCC_OscConfig+0x8b0>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bda6:	00d2      	lsls	r2, r2, #3
 800bda8:	4906      	ldr	r1, [pc, #24]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bdae:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bdb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb2:	4a04      	ldr	r2, [pc, #16]	; (800bdc4 <HAL_RCC_OscConfig+0x8ac>)
 800bdb4:	f043 0301 	orr.w	r3, r3, #1
 800bdb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3730      	adds	r7, #48	; 0x30
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	58024400 	.word	0x58024400
 800bdc8:	ffff0007 	.word	0xffff0007

0800bdcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e19c      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bde0:	4b8a      	ldr	r3, [pc, #552]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 030f 	and.w	r3, r3, #15
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d910      	bls.n	800be10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdee:	4b87      	ldr	r3, [pc, #540]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f023 020f 	bic.w	r2, r3, #15
 800bdf6:	4985      	ldr	r1, [pc, #532]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdfe:	4b83      	ldr	r3, [pc, #524]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 030f 	and.w	r3, r3, #15
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d001      	beq.n	800be10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e184      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d010      	beq.n	800be3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691a      	ldr	r2, [r3, #16]
 800be20:	4b7b      	ldr	r3, [pc, #492]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be28:	429a      	cmp	r2, r3
 800be2a:	d908      	bls.n	800be3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be2c:	4b78      	ldr	r3, [pc, #480]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	4975      	ldr	r1, [pc, #468]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0308 	and.w	r3, r3, #8
 800be46:	2b00      	cmp	r3, #0
 800be48:	d010      	beq.n	800be6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695a      	ldr	r2, [r3, #20]
 800be4e:	4b70      	ldr	r3, [pc, #448]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be56:	429a      	cmp	r2, r3
 800be58:	d908      	bls.n	800be6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be5a:	4b6d      	ldr	r3, [pc, #436]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	496a      	ldr	r1, [pc, #424]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0310 	and.w	r3, r3, #16
 800be74:	2b00      	cmp	r3, #0
 800be76:	d010      	beq.n	800be9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699a      	ldr	r2, [r3, #24]
 800be7c:	4b64      	ldr	r3, [pc, #400]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be84:	429a      	cmp	r2, r3
 800be86:	d908      	bls.n	800be9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be88:	4b61      	ldr	r3, [pc, #388]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	495e      	ldr	r1, [pc, #376]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800be96:	4313      	orrs	r3, r2
 800be98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0320 	and.w	r3, r3, #32
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d010      	beq.n	800bec8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	69da      	ldr	r2, [r3, #28]
 800beaa:	4b59      	ldr	r3, [pc, #356]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d908      	bls.n	800bec8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800beb6:	4b56      	ldr	r3, [pc, #344]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800beb8:	6a1b      	ldr	r3, [r3, #32]
 800beba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	4953      	ldr	r1, [pc, #332]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	4b4d      	ldr	r3, [pc, #308]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	f003 030f 	and.w	r3, r3, #15
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d908      	bls.n	800bef6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bee4:	4b4a      	ldr	r3, [pc, #296]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	f023 020f 	bic.w	r2, r3, #15
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	4947      	ldr	r1, [pc, #284]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d055      	beq.n	800bfae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bf02:	4b43      	ldr	r3, [pc, #268]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	4940      	ldr	r1, [pc, #256]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf10:	4313      	orrs	r3, r2
 800bf12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d107      	bne.n	800bf2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf1c:	4b3c      	ldr	r3, [pc, #240]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d121      	bne.n	800bf6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e0f6      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d107      	bne.n	800bf44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf34:	4b36      	ldr	r3, [pc, #216]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d115      	bne.n	800bf6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e0ea      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d107      	bne.n	800bf5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf4c:	4b30      	ldr	r3, [pc, #192]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e0de      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf5c:	4b2c      	ldr	r3, [pc, #176]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e0d6      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf6c:	4b28      	ldr	r3, [pc, #160]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	f023 0207 	bic.w	r2, r3, #7
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	4925      	ldr	r1, [pc, #148]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf7e:	f7f8 ff29 	bl	8004dd4 <HAL_GetTick>
 800bf82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf84:	e00a      	b.n	800bf9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf86:	f7f8 ff25 	bl	8004dd4 <HAL_GetTick>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d901      	bls.n	800bf9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e0be      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf9c:	4b1c      	ldr	r3, [pc, #112]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d1eb      	bne.n	800bf86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d010      	beq.n	800bfdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	4b14      	ldr	r3, [pc, #80]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	f003 030f 	and.w	r3, r3, #15
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d208      	bcs.n	800bfdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfca:	4b11      	ldr	r3, [pc, #68]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	f023 020f 	bic.w	r2, r3, #15
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	490e      	ldr	r1, [pc, #56]	; (800c010 <HAL_RCC_ClockConfig+0x244>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfdc:	4b0b      	ldr	r3, [pc, #44]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d214      	bcs.n	800c014 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfea:	4b08      	ldr	r3, [pc, #32]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f023 020f 	bic.w	r2, r3, #15
 800bff2:	4906      	ldr	r1, [pc, #24]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bffa:	4b04      	ldr	r3, [pc, #16]	; (800c00c <HAL_RCC_ClockConfig+0x240>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	429a      	cmp	r2, r3
 800c006:	d005      	beq.n	800c014 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e086      	b.n	800c11a <HAL_RCC_ClockConfig+0x34e>
 800c00c:	52002000 	.word	0x52002000
 800c010:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0304 	and.w	r3, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d010      	beq.n	800c042 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691a      	ldr	r2, [r3, #16]
 800c024:	4b3f      	ldr	r3, [pc, #252]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d208      	bcs.n	800c042 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c030:	4b3c      	ldr	r3, [pc, #240]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	4939      	ldr	r1, [pc, #228]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0308 	and.w	r3, r3, #8
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d010      	beq.n	800c070 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695a      	ldr	r2, [r3, #20]
 800c052:	4b34      	ldr	r3, [pc, #208]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d208      	bcs.n	800c070 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c05e:	4b31      	ldr	r3, [pc, #196]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	492e      	ldr	r1, [pc, #184]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d010      	beq.n	800c09e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	699a      	ldr	r2, [r3, #24]
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c082:	69db      	ldr	r3, [r3, #28]
 800c084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c088:	429a      	cmp	r2, r3
 800c08a:	d208      	bcs.n	800c09e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c08c:	4b25      	ldr	r3, [pc, #148]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c08e:	69db      	ldr	r3, [r3, #28]
 800c090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	4922      	ldr	r1, [pc, #136]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d010      	beq.n	800c0cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69da      	ldr	r2, [r3, #28]
 800c0ae:	4b1d      	ldr	r3, [pc, #116]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d208      	bcs.n	800c0cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c0ba:	4b1a      	ldr	r3, [pc, #104]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	4917      	ldr	r1, [pc, #92]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c0cc:	f000 f834 	bl	800c138 <HAL_RCC_GetSysClockFreq>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	4b14      	ldr	r3, [pc, #80]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	4912      	ldr	r1, [pc, #72]	; (800c128 <HAL_RCC_ClockConfig+0x35c>)
 800c0de:	5ccb      	ldrb	r3, [r1, r3]
 800c0e0:	f003 031f 	and.w	r3, r3, #31
 800c0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0ea:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <HAL_RCC_ClockConfig+0x358>)
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	4a0d      	ldr	r2, [pc, #52]	; (800c128 <HAL_RCC_ClockConfig+0x35c>)
 800c0f4:	5cd3      	ldrb	r3, [r2, r3]
 800c0f6:	f003 031f 	and.w	r3, r3, #31
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c100:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <HAL_RCC_ClockConfig+0x360>)
 800c102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c104:	4a0a      	ldr	r2, [pc, #40]	; (800c130 <HAL_RCC_ClockConfig+0x364>)
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c10a:	4b0a      	ldr	r3, [pc, #40]	; (800c134 <HAL_RCC_ClockConfig+0x368>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f8 fe16 	bl	8004d40 <HAL_InitTick>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	58024400 	.word	0x58024400
 800c128:	0801954c 	.word	0x0801954c
 800c12c:	20000010 	.word	0x20000010
 800c130:	2000000c 	.word	0x2000000c
 800c134:	20000034 	.word	0x20000034

0800c138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c138:	b480      	push	{r7}
 800c13a:	b089      	sub	sp, #36	; 0x24
 800c13c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c13e:	4bb3      	ldr	r3, [pc, #716]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c146:	2b18      	cmp	r3, #24
 800c148:	f200 8155 	bhi.w	800c3f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800c14c:	a201      	add	r2, pc, #4	; (adr r2, 800c154 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c152:	bf00      	nop
 800c154:	0800c1b9 	.word	0x0800c1b9
 800c158:	0800c3f7 	.word	0x0800c3f7
 800c15c:	0800c3f7 	.word	0x0800c3f7
 800c160:	0800c3f7 	.word	0x0800c3f7
 800c164:	0800c3f7 	.word	0x0800c3f7
 800c168:	0800c3f7 	.word	0x0800c3f7
 800c16c:	0800c3f7 	.word	0x0800c3f7
 800c170:	0800c3f7 	.word	0x0800c3f7
 800c174:	0800c1df 	.word	0x0800c1df
 800c178:	0800c3f7 	.word	0x0800c3f7
 800c17c:	0800c3f7 	.word	0x0800c3f7
 800c180:	0800c3f7 	.word	0x0800c3f7
 800c184:	0800c3f7 	.word	0x0800c3f7
 800c188:	0800c3f7 	.word	0x0800c3f7
 800c18c:	0800c3f7 	.word	0x0800c3f7
 800c190:	0800c3f7 	.word	0x0800c3f7
 800c194:	0800c1e5 	.word	0x0800c1e5
 800c198:	0800c3f7 	.word	0x0800c3f7
 800c19c:	0800c3f7 	.word	0x0800c3f7
 800c1a0:	0800c3f7 	.word	0x0800c3f7
 800c1a4:	0800c3f7 	.word	0x0800c3f7
 800c1a8:	0800c3f7 	.word	0x0800c3f7
 800c1ac:	0800c3f7 	.word	0x0800c3f7
 800c1b0:	0800c3f7 	.word	0x0800c3f7
 800c1b4:	0800c1eb 	.word	0x0800c1eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1b8:	4b94      	ldr	r3, [pc, #592]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 0320 	and.w	r3, r3, #32
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d009      	beq.n	800c1d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c4:	4b91      	ldr	r3, [pc, #580]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	08db      	lsrs	r3, r3, #3
 800c1ca:	f003 0303 	and.w	r3, r3, #3
 800c1ce:	4a90      	ldr	r2, [pc, #576]	; (800c410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c1d6:	e111      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c1d8:	4b8d      	ldr	r3, [pc, #564]	; (800c410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1da:	61bb      	str	r3, [r7, #24]
      break;
 800c1dc:	e10e      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c1de:	4b8d      	ldr	r3, [pc, #564]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1e0:	61bb      	str	r3, [r7, #24]
      break;
 800c1e2:	e10b      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c1e4:	4b8c      	ldr	r3, [pc, #560]	; (800c418 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c1e6:	61bb      	str	r3, [r7, #24]
      break;
 800c1e8:	e108      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1ea:	4b88      	ldr	r3, [pc, #544]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c1f4:	4b85      	ldr	r3, [pc, #532]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f8:	091b      	lsrs	r3, r3, #4
 800c1fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c200:	4b82      	ldr	r3, [pc, #520]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c20a:	4b80      	ldr	r3, [pc, #512]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20e:	08db      	lsrs	r3, r3, #3
 800c210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c222:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 80e1 	beq.w	800c3f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	2b02      	cmp	r3, #2
 800c232:	f000 8083 	beq.w	800c33c <HAL_RCC_GetSysClockFreq+0x204>
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	f200 80a1 	bhi.w	800c380 <HAL_RCC_GetSysClockFreq+0x248>
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_RCC_GetSysClockFreq+0x114>
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d056      	beq.n	800c2f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c24a:	e099      	b.n	800c380 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c24c:	4b6f      	ldr	r3, [pc, #444]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0320 	and.w	r3, r3, #32
 800c254:	2b00      	cmp	r3, #0
 800c256:	d02d      	beq.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c258:	4b6c      	ldr	r3, [pc, #432]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	08db      	lsrs	r3, r3, #3
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	4a6b      	ldr	r2, [pc, #428]	; (800c410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c264:	fa22 f303 	lsr.w	r3, r2, r3
 800c268:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	ee07 3a90 	vmov	s15, r3
 800c270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	ee07 3a90 	vmov	s15, r3
 800c27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c282:	4b62      	ldr	r3, [pc, #392]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c292:	ed97 6a02 	vldr	s12, [r7, #8]
 800c296:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c41c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c2b2:	e087      	b.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	ee07 3a90 	vmov	s15, r3
 800c2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2be:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c420 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2c6:	4b51      	ldr	r3, [pc, #324]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ce:	ee07 3a90 	vmov	s15, r3
 800c2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c41c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c2f6:	e065      	b.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	ee07 3a90 	vmov	s15, r3
 800c2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c302:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c30a:	4b40      	ldr	r3, [pc, #256]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c312:	ee07 3a90 	vmov	s15, r3
 800c316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c31a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c31e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c41c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c33a:	e043      	b.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	ee07 3a90 	vmov	s15, r3
 800c342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c346:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c428 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c34e:	4b2f      	ldr	r3, [pc, #188]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c356:	ee07 3a90 	vmov	s15, r3
 800c35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c35e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c362:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c41c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c37e:	e021      	b.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	ee07 3a90 	vmov	s15, r3
 800c386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c38a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c424 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c392:	4b1e      	ldr	r3, [pc, #120]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39a:	ee07 3a90 	vmov	s15, r3
 800c39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c41c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c3c4:	4b11      	ldr	r3, [pc, #68]	; (800c40c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c8:	0a5b      	lsrs	r3, r3, #9
 800c3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	ee07 3a90 	vmov	s15, r3
 800c3d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e8:	ee17 3a90 	vmov	r3, s15
 800c3ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c3ee:	e005      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	61bb      	str	r3, [r7, #24]
      break;
 800c3f4:	e002      	b.n	800c3fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c3f6:	4b07      	ldr	r3, [pc, #28]	; (800c414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c3f8:	61bb      	str	r3, [r7, #24]
      break;
 800c3fa:	bf00      	nop
  }

  return sysclockfreq;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3724      	adds	r7, #36	; 0x24
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	58024400 	.word	0x58024400
 800c410:	03d09000 	.word	0x03d09000
 800c414:	003d0900 	.word	0x003d0900
 800c418:	017d7840 	.word	0x017d7840
 800c41c:	46000000 	.word	0x46000000
 800c420:	4c742400 	.word	0x4c742400
 800c424:	4a742400 	.word	0x4a742400
 800c428:	4bbebc20 	.word	0x4bbebc20

0800c42c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c432:	f7ff fe81 	bl	800c138 <HAL_RCC_GetSysClockFreq>
 800c436:	4602      	mov	r2, r0
 800c438:	4b10      	ldr	r3, [pc, #64]	; (800c47c <HAL_RCC_GetHCLKFreq+0x50>)
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	f003 030f 	and.w	r3, r3, #15
 800c442:	490f      	ldr	r1, [pc, #60]	; (800c480 <HAL_RCC_GetHCLKFreq+0x54>)
 800c444:	5ccb      	ldrb	r3, [r1, r3]
 800c446:	f003 031f 	and.w	r3, r3, #31
 800c44a:	fa22 f303 	lsr.w	r3, r2, r3
 800c44e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <HAL_RCC_GetHCLKFreq+0x50>)
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	4a09      	ldr	r2, [pc, #36]	; (800c480 <HAL_RCC_GetHCLKFreq+0x54>)
 800c45a:	5cd3      	ldrb	r3, [r2, r3]
 800c45c:	f003 031f 	and.w	r3, r3, #31
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	fa22 f303 	lsr.w	r3, r2, r3
 800c466:	4a07      	ldr	r2, [pc, #28]	; (800c484 <HAL_RCC_GetHCLKFreq+0x58>)
 800c468:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c46a:	4a07      	ldr	r2, [pc, #28]	; (800c488 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c470:	4b04      	ldr	r3, [pc, #16]	; (800c484 <HAL_RCC_GetHCLKFreq+0x58>)
 800c472:	681b      	ldr	r3, [r3, #0]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	58024400 	.word	0x58024400
 800c480:	0801954c 	.word	0x0801954c
 800c484:	20000010 	.word	0x20000010
 800c488:	2000000c 	.word	0x2000000c

0800c48c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c490:	f7ff ffcc 	bl	800c42c <HAL_RCC_GetHCLKFreq>
 800c494:	4602      	mov	r2, r0
 800c496:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	091b      	lsrs	r3, r3, #4
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	4904      	ldr	r1, [pc, #16]	; (800c4b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c4a2:	5ccb      	ldrb	r3, [r1, r3]
 800c4a4:	f003 031f 	and.w	r3, r3, #31
 800c4a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	0801954c 	.word	0x0801954c

0800c4b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c4bc:	f7ff ffb6 	bl	800c42c <HAL_RCC_GetHCLKFreq>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	4b06      	ldr	r3, [pc, #24]	; (800c4dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	0a1b      	lsrs	r3, r3, #8
 800c4c8:	f003 0307 	and.w	r3, r3, #7
 800c4cc:	4904      	ldr	r1, [pc, #16]	; (800c4e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c4ce:	5ccb      	ldrb	r3, [r1, r3]
 800c4d0:	f003 031f 	and.w	r3, r3, #31
 800c4d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	0801954c 	.word	0x0801954c

0800c4e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4e8:	b0ca      	sub	sp, #296	; 0x128
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c508:	2500      	movs	r5, #0
 800c50a:	ea54 0305 	orrs.w	r3, r4, r5
 800c50e:	d049      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c51a:	d02f      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c51c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c520:	d828      	bhi.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c526:	d01a      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c52c:	d822      	bhi.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c536:	d007      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c538:	e01c      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c53a:	4bb8      	ldr	r3, [pc, #736]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	4ab7      	ldr	r2, [pc, #732]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c546:	e01a      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c54c:	3308      	adds	r3, #8
 800c54e:	2102      	movs	r1, #2
 800c550:	4618      	mov	r0, r3
 800c552:	f002 fb61 	bl	800ec18 <RCCEx_PLL2_Config>
 800c556:	4603      	mov	r3, r0
 800c558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c55c:	e00f      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c562:	3328      	adds	r3, #40	; 0x28
 800c564:	2102      	movs	r1, #2
 800c566:	4618      	mov	r0, r3
 800c568:	f002 fc08 	bl	800ed7c <RCCEx_PLL3_Config>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c572:	e004      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c57a:	e000      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10a      	bne.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c586:	4ba5      	ldr	r3, [pc, #660]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c594:	4aa1      	ldr	r2, [pc, #644]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c596:	430b      	orrs	r3, r1
 800c598:	6513      	str	r3, [r2, #80]	; 0x50
 800c59a:	e003      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c59c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c5b0:	f04f 0900 	mov.w	r9, #0
 800c5b4:	ea58 0309 	orrs.w	r3, r8, r9
 800c5b8:	d047      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d82a      	bhi.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c5c4:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ca:	bf00      	nop
 800c5cc:	0800c5e1 	.word	0x0800c5e1
 800c5d0:	0800c5ef 	.word	0x0800c5ef
 800c5d4:	0800c605 	.word	0x0800c605
 800c5d8:	0800c623 	.word	0x0800c623
 800c5dc:	0800c623 	.word	0x0800c623
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5e0:	4b8e      	ldr	r3, [pc, #568]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e4:	4a8d      	ldr	r2, [pc, #564]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5ec:	e01a      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f2:	3308      	adds	r3, #8
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f002 fb0e 	bl	800ec18 <RCCEx_PLL2_Config>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c602:	e00f      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c608:	3328      	adds	r3, #40	; 0x28
 800c60a:	2100      	movs	r1, #0
 800c60c:	4618      	mov	r0, r3
 800c60e:	f002 fbb5 	bl	800ed7c <RCCEx_PLL3_Config>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c618:	e004      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c620:	e000      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c622:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c62c:	4b7b      	ldr	r3, [pc, #492]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c630:	f023 0107 	bic.w	r1, r3, #7
 800c634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c63a:	4a78      	ldr	r2, [pc, #480]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c63c:	430b      	orrs	r3, r1
 800c63e:	6513      	str	r3, [r2, #80]	; 0x50
 800c640:	e003      	b.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c656:	f04f 0b00 	mov.w	fp, #0
 800c65a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c65e:	d04c      	beq.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c66a:	d030      	beq.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c670:	d829      	bhi.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c672:	2bc0      	cmp	r3, #192	; 0xc0
 800c674:	d02d      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c676:	2bc0      	cmp	r3, #192	; 0xc0
 800c678:	d825      	bhi.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c67a:	2b80      	cmp	r3, #128	; 0x80
 800c67c:	d018      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c67e:	2b80      	cmp	r3, #128	; 0x80
 800c680:	d821      	bhi.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c686:	2b40      	cmp	r3, #64	; 0x40
 800c688:	d007      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c68a:	e01c      	b.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c68c:	4b63      	ldr	r3, [pc, #396]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	4a62      	ldr	r2, [pc, #392]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c698:	e01c      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69e:	3308      	adds	r3, #8
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f002 fab8 	bl	800ec18 <RCCEx_PLL2_Config>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c6ae:	e011      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6b4:	3328      	adds	r3, #40	; 0x28
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f002 fb5f 	bl	800ed7c <RCCEx_PLL3_Config>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c6c4:	e006      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c6cc:	e002      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c6ce:	bf00      	nop
 800c6d0:	e000      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10a      	bne.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c6dc:	4b4f      	ldr	r3, [pc, #316]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ea:	4a4c      	ldr	r2, [pc, #304]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6ec:	430b      	orrs	r3, r1
 800c6ee:	6513      	str	r3, [r2, #80]	; 0x50
 800c6f0:	e003      	b.n	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c70a:	2300      	movs	r3, #0
 800c70c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c710:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c714:	460b      	mov	r3, r1
 800c716:	4313      	orrs	r3, r2
 800c718:	d053      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c726:	d035      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c72c:	d82e      	bhi.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c72e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c732:	d031      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c734:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c738:	d828      	bhi.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c73a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c73e:	d01a      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c744:	d822      	bhi.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c74a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c74e:	d007      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c750:	e01c      	b.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c752:	4b32      	ldr	r3, [pc, #200]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c756:	4a31      	ldr	r2, [pc, #196]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c75c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c75e:	e01c      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c764:	3308      	adds	r3, #8
 800c766:	2100      	movs	r1, #0
 800c768:	4618      	mov	r0, r3
 800c76a:	f002 fa55 	bl	800ec18 <RCCEx_PLL2_Config>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c774:	e011      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c77a:	3328      	adds	r3, #40	; 0x28
 800c77c:	2100      	movs	r1, #0
 800c77e:	4618      	mov	r0, r3
 800c780:	f002 fafc 	bl	800ed7c <RCCEx_PLL3_Config>
 800c784:	4603      	mov	r3, r0
 800c786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c78a:	e006      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c792:	e002      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c794:	bf00      	nop
 800c796:	e000      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10b      	bne.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c7a2:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7b2:	4a1a      	ldr	r2, [pc, #104]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	6593      	str	r3, [r2, #88]	; 0x58
 800c7b8:	e003      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c7ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c7d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	d056      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c7ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7ee:	d038      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c7f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7f4:	d831      	bhi.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c7f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7fa:	d034      	beq.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c7fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c800:	d82b      	bhi.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c806:	d01d      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c80c:	d825      	bhi.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d006      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c816:	d00a      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c818:	e01f      	b.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c81a:	bf00      	nop
 800c81c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c820:	4ba2      	ldr	r3, [pc, #648]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	4aa1      	ldr	r2, [pc, #644]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c82a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c82c:	e01c      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c832:	3308      	adds	r3, #8
 800c834:	2100      	movs	r1, #0
 800c836:	4618      	mov	r0, r3
 800c838:	f002 f9ee 	bl	800ec18 <RCCEx_PLL2_Config>
 800c83c:	4603      	mov	r3, r0
 800c83e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c842:	e011      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c848:	3328      	adds	r3, #40	; 0x28
 800c84a:	2100      	movs	r1, #0
 800c84c:	4618      	mov	r0, r3
 800c84e:	f002 fa95 	bl	800ed7c <RCCEx_PLL3_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c858:	e006      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c860:	e002      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c866:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c868:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10b      	bne.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c870:	4b8e      	ldr	r3, [pc, #568]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c874:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c87c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c880:	4a8a      	ldr	r2, [pc, #552]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c882:	430b      	orrs	r3, r1
 800c884:	6593      	str	r3, [r2, #88]	; 0x58
 800c886:	e003      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c88c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c89c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	d03a      	beq.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b6:	2b30      	cmp	r3, #48	; 0x30
 800c8b8:	d01f      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c8ba:	2b30      	cmp	r3, #48	; 0x30
 800c8bc:	d819      	bhi.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c8be:	2b20      	cmp	r3, #32
 800c8c0:	d00c      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c8c2:	2b20      	cmp	r3, #32
 800c8c4:	d815      	bhi.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d019      	beq.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c8ca:	2b10      	cmp	r3, #16
 800c8cc:	d111      	bne.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8ce:	4b77      	ldr	r3, [pc, #476]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d2:	4a76      	ldr	r2, [pc, #472]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c8da:	e011      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	2102      	movs	r1, #2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f002 f997 	bl	800ec18 <RCCEx_PLL2_Config>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c8f0:	e006      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c8f8:	e002      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c8fa:	bf00      	nop
 800c8fc:	e000      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c8fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c908:	4b68      	ldr	r3, [pc, #416]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c90a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c90c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c916:	4a65      	ldr	r2, [pc, #404]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c918:	430b      	orrs	r3, r1
 800c91a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c91c:	e003      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c922:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c932:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c936:	2300      	movs	r3, #0
 800c938:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c93c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c940:	460b      	mov	r3, r1
 800c942:	4313      	orrs	r3, r2
 800c944:	d051      	beq.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c94c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c950:	d035      	beq.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c956:	d82e      	bhi.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c95c:	d031      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c95e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c962:	d828      	bhi.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c968:	d01a      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c96e:	d822      	bhi.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c978:	d007      	beq.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c97a:	e01c      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c97c:	4b4b      	ldr	r3, [pc, #300]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c980:	4a4a      	ldr	r2, [pc, #296]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c988:	e01c      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c98e:	3308      	adds	r3, #8
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f002 f940 	bl	800ec18 <RCCEx_PLL2_Config>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c99e:	e011      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9a4:	3328      	adds	r3, #40	; 0x28
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f002 f9e7 	bl	800ed7c <RCCEx_PLL3_Config>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9b4:	e006      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c9bc:	e002      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c9be:	bf00      	nop
 800c9c0:	e000      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c9c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10a      	bne.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c9cc:	4b37      	ldr	r3, [pc, #220]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9da:	4a34      	ldr	r2, [pc, #208]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9dc:	430b      	orrs	r3, r1
 800c9de:	6513      	str	r3, [r2, #80]	; 0x50
 800c9e0:	e003      	b.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c9f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ca00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ca04:	460b      	mov	r3, r1
 800ca06:	4313      	orrs	r3, r2
 800ca08:	d056      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca14:	d033      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ca16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca1a:	d82c      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca20:	d02f      	beq.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ca22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca26:	d826      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca2c:	d02b      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ca2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca32:	d820      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca38:	d012      	beq.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ca3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca3e:	d81a      	bhi.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d022      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca48:	d115      	bne.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca4e:	3308      	adds	r3, #8
 800ca50:	2101      	movs	r1, #1
 800ca52:	4618      	mov	r0, r3
 800ca54:	f002 f8e0 	bl	800ec18 <RCCEx_PLL2_Config>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca5e:	e015      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca64:	3328      	adds	r3, #40	; 0x28
 800ca66:	2101      	movs	r1, #1
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f002 f987 	bl	800ed7c <RCCEx_PLL3_Config>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca74:	e00a      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca7c:	e006      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ca7e:	bf00      	nop
 800ca80:	e004      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ca82:	bf00      	nop
 800ca84:	e002      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ca86:	bf00      	nop
 800ca88:	e000      	b.n	800ca8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ca8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10d      	bne.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ca94:	4b05      	ldr	r3, [pc, #20]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ca9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caa2:	4a02      	ldr	r2, [pc, #8]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caa4:	430b      	orrs	r3, r1
 800caa6:	6513      	str	r3, [r2, #80]	; 0x50
 800caa8:	e006      	b.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800caaa:	bf00      	nop
 800caac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cac8:	2300      	movs	r3, #0
 800caca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cace:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d055      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cadc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cae4:	d033      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caea:	d82c      	bhi.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800caec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caf0:	d02f      	beq.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800caf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caf6:	d826      	bhi.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800caf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cafc:	d02b      	beq.n	800cb56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cafe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb02:	d820      	bhi.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb08:	d012      	beq.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0e:	d81a      	bhi.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d022      	beq.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cb14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb18:	d115      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb1e:	3308      	adds	r3, #8
 800cb20:	2101      	movs	r1, #1
 800cb22:	4618      	mov	r0, r3
 800cb24:	f002 f878 	bl	800ec18 <RCCEx_PLL2_Config>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb2e:	e015      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb34:	3328      	adds	r3, #40	; 0x28
 800cb36:	2101      	movs	r1, #1
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f002 f91f 	bl	800ed7c <RCCEx_PLL3_Config>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb44:	e00a      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb4c:	e006      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cb4e:	bf00      	nop
 800cb50:	e004      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cb52:	bf00      	nop
 800cb54:	e002      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cb56:	bf00      	nop
 800cb58:	e000      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cb5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb64:	4ba3      	ldr	r3, [pc, #652]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb68:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb74:	4a9f      	ldr	r2, [pc, #636]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb76:	430b      	orrs	r3, r1
 800cb78:	6593      	str	r3, [r2, #88]	; 0x58
 800cb7a:	e003      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cb90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb94:	2300      	movs	r3, #0
 800cb96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4313      	orrs	r3, r2
 800cba2:	d037      	beq.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbae:	d00e      	beq.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cbb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbb4:	d816      	bhi.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d018      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cbba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbbe:	d111      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbc0:	4b8c      	ldr	r3, [pc, #560]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	4a8b      	ldr	r2, [pc, #556]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cbcc:	e00f      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f002 f81e 	bl	800ec18 <RCCEx_PLL2_Config>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cbe2:	e004      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cbea:	e000      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cbec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10a      	bne.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cbf6:	4b7f      	ldr	r3, [pc, #508]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbfa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc04:	4a7b      	ldr	r2, [pc, #492]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc06:	430b      	orrs	r3, r1
 800cc08:	6513      	str	r3, [r2, #80]	; 0x50
 800cc0a:	e003      	b.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800cc20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc24:	2300      	movs	r3, #0
 800cc26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cc2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	4313      	orrs	r3, r2
 800cc32:	d039      	beq.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d81c      	bhi.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800cc3e:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cc81 	.word	0x0800cc81
 800cc48:	0800cc55 	.word	0x0800cc55
 800cc4c:	0800cc63 	.word	0x0800cc63
 800cc50:	0800cc81 	.word	0x0800cc81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc54:	4b67      	ldr	r3, [pc, #412]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	4a66      	ldr	r2, [pc, #408]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc60:	e00f      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc66:	3308      	adds	r3, #8
 800cc68:	2102      	movs	r1, #2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 ffd4 	bl	800ec18 <RCCEx_PLL2_Config>
 800cc70:	4603      	mov	r3, r0
 800cc72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc76:	e004      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc7e:	e000      	b.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800cc80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10a      	bne.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cc8a:	4b5a      	ldr	r3, [pc, #360]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc8e:	f023 0103 	bic.w	r1, r3, #3
 800cc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc98:	4a56      	ldr	r2, [pc, #344]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc9a:	430b      	orrs	r3, r1
 800cc9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cc9e:	e003      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ccb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ccbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	f000 809f 	beq.w	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccca:	4b4b      	ldr	r3, [pc, #300]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a4a      	ldr	r2, [pc, #296]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ccd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccd6:	f7f8 f87d 	bl	8004dd4 <HAL_GetTick>
 800ccda:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccde:	e00b      	b.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cce0:	f7f8 f878 	bl	8004dd4 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	2b64      	cmp	r3, #100	; 0x64
 800ccee:	d903      	bls.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccf6:	e005      	b.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccf8:	4b3f      	ldr	r3, [pc, #252]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d0ed      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cd04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d179      	bne.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd0c:	4b39      	ldr	r3, [pc, #228]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd18:	4053      	eors	r3, r2
 800cd1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d015      	beq.n	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd22:	4b34      	ldr	r3, [pc, #208]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd2e:	4b31      	ldr	r3, [pc, #196]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd32:	4a30      	ldr	r2, [pc, #192]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd38:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd3a:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3e:	4a2d      	ldr	r2, [pc, #180]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd44:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cd46:	4a2b      	ldr	r2, [pc, #172]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cd4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd5a:	d118      	bne.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5c:	f7f8 f83a 	bl	8004dd4 <HAL_GetTick>
 800cd60:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd64:	e00d      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd66:	f7f8 f835 	bl	8004dd4 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cd70:	1ad2      	subs	r2, r2, r3
 800cd72:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d903      	bls.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800cd80:	e005      	b.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd86:	f003 0302 	and.w	r3, r3, #2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0eb      	beq.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800cd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d129      	bne.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cd9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cda2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cda6:	d10e      	bne.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800cda8:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cdb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cdb8:	091a      	lsrs	r2, r3, #4
 800cdba:	4b10      	ldr	r3, [pc, #64]	; (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	4a0d      	ldr	r2, [pc, #52]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdc0:	430b      	orrs	r3, r1
 800cdc2:	6113      	str	r3, [r2, #16]
 800cdc4:	e005      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	4a0a      	ldr	r2, [pc, #40]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cdd0:	6113      	str	r3, [r2, #16]
 800cdd2:	4b08      	ldr	r3, [pc, #32]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cdde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cde2:	4a04      	ldr	r2, [pc, #16]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cde4:	430b      	orrs	r3, r1
 800cde6:	6713      	str	r3, [r2, #112]	; 0x70
 800cde8:	e00e      	b.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800cdf2:	e009      	b.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	58024800 	.word	0x58024800
 800cdfc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	f002 0301 	and.w	r3, r2, #1
 800ce14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4313      	orrs	r3, r2
 800ce26:	f000 8089 	beq.w	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce30:	2b28      	cmp	r3, #40	; 0x28
 800ce32:	d86b      	bhi.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ce34:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3a:	bf00      	nop
 800ce3c:	0800cf15 	.word	0x0800cf15
 800ce40:	0800cf0d 	.word	0x0800cf0d
 800ce44:	0800cf0d 	.word	0x0800cf0d
 800ce48:	0800cf0d 	.word	0x0800cf0d
 800ce4c:	0800cf0d 	.word	0x0800cf0d
 800ce50:	0800cf0d 	.word	0x0800cf0d
 800ce54:	0800cf0d 	.word	0x0800cf0d
 800ce58:	0800cf0d 	.word	0x0800cf0d
 800ce5c:	0800cee1 	.word	0x0800cee1
 800ce60:	0800cf0d 	.word	0x0800cf0d
 800ce64:	0800cf0d 	.word	0x0800cf0d
 800ce68:	0800cf0d 	.word	0x0800cf0d
 800ce6c:	0800cf0d 	.word	0x0800cf0d
 800ce70:	0800cf0d 	.word	0x0800cf0d
 800ce74:	0800cf0d 	.word	0x0800cf0d
 800ce78:	0800cf0d 	.word	0x0800cf0d
 800ce7c:	0800cef7 	.word	0x0800cef7
 800ce80:	0800cf0d 	.word	0x0800cf0d
 800ce84:	0800cf0d 	.word	0x0800cf0d
 800ce88:	0800cf0d 	.word	0x0800cf0d
 800ce8c:	0800cf0d 	.word	0x0800cf0d
 800ce90:	0800cf0d 	.word	0x0800cf0d
 800ce94:	0800cf0d 	.word	0x0800cf0d
 800ce98:	0800cf0d 	.word	0x0800cf0d
 800ce9c:	0800cf15 	.word	0x0800cf15
 800cea0:	0800cf0d 	.word	0x0800cf0d
 800cea4:	0800cf0d 	.word	0x0800cf0d
 800cea8:	0800cf0d 	.word	0x0800cf0d
 800ceac:	0800cf0d 	.word	0x0800cf0d
 800ceb0:	0800cf0d 	.word	0x0800cf0d
 800ceb4:	0800cf0d 	.word	0x0800cf0d
 800ceb8:	0800cf0d 	.word	0x0800cf0d
 800cebc:	0800cf15 	.word	0x0800cf15
 800cec0:	0800cf0d 	.word	0x0800cf0d
 800cec4:	0800cf0d 	.word	0x0800cf0d
 800cec8:	0800cf0d 	.word	0x0800cf0d
 800cecc:	0800cf0d 	.word	0x0800cf0d
 800ced0:	0800cf0d 	.word	0x0800cf0d
 800ced4:	0800cf0d 	.word	0x0800cf0d
 800ced8:	0800cf0d 	.word	0x0800cf0d
 800cedc:	0800cf15 	.word	0x0800cf15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cee4:	3308      	adds	r3, #8
 800cee6:	2101      	movs	r1, #1
 800cee8:	4618      	mov	r0, r3
 800ceea:	f001 fe95 	bl	800ec18 <RCCEx_PLL2_Config>
 800ceee:	4603      	mov	r3, r0
 800cef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cef4:	e00f      	b.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cefa:	3328      	adds	r3, #40	; 0x28
 800cefc:	2101      	movs	r1, #1
 800cefe:	4618      	mov	r0, r3
 800cf00:	f001 ff3c 	bl	800ed7c <RCCEx_PLL3_Config>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf0a:	e004      	b.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf12:	e000      	b.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cf14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10a      	bne.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf1e:	4bbf      	ldr	r3, [pc, #764]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf22:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800cf26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf2c:	4abb      	ldr	r2, [pc, #748]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf2e:	430b      	orrs	r3, r1
 800cf30:	6553      	str	r3, [r2, #84]	; 0x54
 800cf32:	e003      	b.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	f002 0302 	and.w	r3, r2, #2
 800cf48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cf52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cf56:	460b      	mov	r3, r1
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	d041      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d824      	bhi.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800cf66:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cfb9 	.word	0x0800cfb9
 800cf70:	0800cf85 	.word	0x0800cf85
 800cf74:	0800cf9b 	.word	0x0800cf9b
 800cf78:	0800cfb9 	.word	0x0800cfb9
 800cf7c:	0800cfb9 	.word	0x0800cfb9
 800cf80:	0800cfb9 	.word	0x0800cfb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf88:	3308      	adds	r3, #8
 800cf8a:	2101      	movs	r1, #1
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f001 fe43 	bl	800ec18 <RCCEx_PLL2_Config>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cf98:	e00f      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf9e:	3328      	adds	r3, #40	; 0x28
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f001 feea 	bl	800ed7c <RCCEx_PLL3_Config>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cfae:	e004      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfb6:	e000      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800cfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10a      	bne.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cfc2:	4b96      	ldr	r3, [pc, #600]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfc6:	f023 0107 	bic.w	r1, r3, #7
 800cfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfd0:	4a92      	ldr	r2, [pc, #584]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cfd2:	430b      	orrs	r3, r1
 800cfd4:	6553      	str	r3, [r2, #84]	; 0x54
 800cfd6:	e003      	b.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe8:	f002 0304 	and.w	r3, r2, #4
 800cfec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cff0:	2300      	movs	r3, #0
 800cff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cff6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4313      	orrs	r3, r2
 800cffe:	d044      	beq.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d008:	2b05      	cmp	r3, #5
 800d00a:	d825      	bhi.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d00c:	a201      	add	r2, pc, #4	; (adr r2, 800d014 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d061 	.word	0x0800d061
 800d018:	0800d02d 	.word	0x0800d02d
 800d01c:	0800d043 	.word	0x0800d043
 800d020:	0800d061 	.word	0x0800d061
 800d024:	0800d061 	.word	0x0800d061
 800d028:	0800d061 	.word	0x0800d061
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d030:	3308      	adds	r3, #8
 800d032:	2101      	movs	r1, #1
 800d034:	4618      	mov	r0, r3
 800d036:	f001 fdef 	bl	800ec18 <RCCEx_PLL2_Config>
 800d03a:	4603      	mov	r3, r0
 800d03c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d040:	e00f      	b.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d046:	3328      	adds	r3, #40	; 0x28
 800d048:	2101      	movs	r1, #1
 800d04a:	4618      	mov	r0, r3
 800d04c:	f001 fe96 	bl	800ed7c <RCCEx_PLL3_Config>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d056:	e004      	b.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d05e:	e000      	b.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d060:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10b      	bne.n	800d082 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d06a:	4b6c      	ldr	r3, [pc, #432]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06e:	f023 0107 	bic.w	r1, r3, #7
 800d072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d07a:	4a68      	ldr	r2, [pc, #416]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d07c:	430b      	orrs	r3, r1
 800d07e:	6593      	str	r3, [r2, #88]	; 0x58
 800d080:	e003      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d092:	f002 0320 	and.w	r3, r2, #32
 800d096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d09a:	2300      	movs	r3, #0
 800d09c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d0a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	d055      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0b6:	d033      	beq.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0bc:	d82c      	bhi.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d0be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c2:	d02f      	beq.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0c8:	d826      	bhi.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d0ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0ce:	d02b      	beq.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d0d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d0d4:	d820      	bhi.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0da:	d012      	beq.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d0dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0e0:	d81a      	bhi.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d022      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0ea:	d115      	bne.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f001 fd8f 	bl	800ec18 <RCCEx_PLL2_Config>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d100:	e015      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d106:	3328      	adds	r3, #40	; 0x28
 800d108:	2102      	movs	r1, #2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f001 fe36 	bl	800ed7c <RCCEx_PLL3_Config>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d116:	e00a      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d11e:	e006      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d120:	bf00      	nop
 800d122:	e004      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d124:	bf00      	nop
 800d126:	e002      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d128:	bf00      	nop
 800d12a:	e000      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d136:	4b39      	ldr	r3, [pc, #228]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d146:	4a35      	ldr	r2, [pc, #212]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d148:	430b      	orrs	r3, r1
 800d14a:	6553      	str	r3, [r2, #84]	; 0x54
 800d14c:	e003      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d166:	2300      	movs	r3, #0
 800d168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d16c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d170:	460b      	mov	r3, r1
 800d172:	4313      	orrs	r3, r2
 800d174:	d058      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d17a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d17e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d182:	d033      	beq.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d184:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d188:	d82c      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d18e:	d02f      	beq.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d194:	d826      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d196:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d19a:	d02b      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d19c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1a0:	d820      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d1a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1a6:	d012      	beq.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d1a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1ac:	d81a      	bhi.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d022      	beq.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d1b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1b6:	d115      	bne.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1bc:	3308      	adds	r3, #8
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 fd29 	bl	800ec18 <RCCEx_PLL2_Config>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d1cc:	e015      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1d2:	3328      	adds	r3, #40	; 0x28
 800d1d4:	2102      	movs	r1, #2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 fdd0 	bl	800ed7c <RCCEx_PLL3_Config>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d1e2:	e00a      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1ea:	e006      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d1ec:	bf00      	nop
 800d1ee:	e004      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d1f0:	bf00      	nop
 800d1f2:	e002      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d1f4:	bf00      	nop
 800d1f6:	e000      	b.n	800d1fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d10e      	bne.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d202:	4b06      	ldr	r3, [pc, #24]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d206:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d20e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d212:	4a02      	ldr	r2, [pc, #8]	; (800d21c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d214:	430b      	orrs	r3, r1
 800d216:	6593      	str	r3, [r2, #88]	; 0x58
 800d218:	e006      	b.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d21a:	bf00      	nop
 800d21c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d238:	2300      	movs	r3, #0
 800d23a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d23e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d242:	460b      	mov	r3, r1
 800d244:	4313      	orrs	r3, r2
 800d246:	d055      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d24c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d250:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d254:	d033      	beq.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d256:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d25a:	d82c      	bhi.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d260:	d02f      	beq.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d266:	d826      	bhi.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d26c:	d02b      	beq.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d26e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d272:	d820      	bhi.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d278:	d012      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d27a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d27e:	d81a      	bhi.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d280:	2b00      	cmp	r3, #0
 800d282:	d022      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d288:	d115      	bne.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d28e:	3308      	adds	r3, #8
 800d290:	2100      	movs	r1, #0
 800d292:	4618      	mov	r0, r3
 800d294:	f001 fcc0 	bl	800ec18 <RCCEx_PLL2_Config>
 800d298:	4603      	mov	r3, r0
 800d29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d29e:	e015      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2a4:	3328      	adds	r3, #40	; 0x28
 800d2a6:	2102      	movs	r1, #2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f001 fd67 	bl	800ed7c <RCCEx_PLL3_Config>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2b4:	e00a      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d2bc:	e006      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d2be:	bf00      	nop
 800d2c0:	e004      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d2c2:	bf00      	nop
 800d2c4:	e002      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d2c6:	bf00      	nop
 800d2c8:	e000      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d2ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10b      	bne.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d2d4:	4ba1      	ldr	r3, [pc, #644]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d2e4:	4a9d      	ldr	r2, [pc, #628]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2e6:	430b      	orrs	r3, r1
 800d2e8:	6593      	str	r3, [r2, #88]	; 0x58
 800d2ea:	e003      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f002 0308 	and.w	r3, r2, #8
 800d300:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d304:	2300      	movs	r3, #0
 800d306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d30a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d30e:	460b      	mov	r3, r1
 800d310:	4313      	orrs	r3, r2
 800d312:	d01e      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d31c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d320:	d10c      	bne.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d326:	3328      	adds	r3, #40	; 0x28
 800d328:	2102      	movs	r1, #2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f001 fd26 	bl	800ed7c <RCCEx_PLL3_Config>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d33c:	4b87      	ldr	r3, [pc, #540]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d34c:	4a83      	ldr	r2, [pc, #524]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d34e:	430b      	orrs	r3, r1
 800d350:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	f002 0310 	and.w	r3, r2, #16
 800d35e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d362:	2300      	movs	r3, #0
 800d364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d368:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d36c:	460b      	mov	r3, r1
 800d36e:	4313      	orrs	r3, r2
 800d370:	d01e      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d37e:	d10c      	bne.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d384:	3328      	adds	r3, #40	; 0x28
 800d386:	2102      	movs	r1, #2
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 fcf7 	bl	800ed7c <RCCEx_PLL3_Config>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d39a:	4b70      	ldr	r3, [pc, #448]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d39e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d3aa:	4a6c      	ldr	r2, [pc, #432]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3ac:	430b      	orrs	r3, r1
 800d3ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d3bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	d03e      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d3d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3dc:	d022      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3e2:	d81b      	bhi.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d003      	beq.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3ec:	d00b      	beq.n	800d406 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d3ee:	e015      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3f4:	3308      	adds	r3, #8
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f001 fc0d 	bl	800ec18 <RCCEx_PLL2_Config>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d404:	e00f      	b.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d40a:	3328      	adds	r3, #40	; 0x28
 800d40c:	2102      	movs	r1, #2
 800d40e:	4618      	mov	r0, r3
 800d410:	f001 fcb4 	bl	800ed7c <RCCEx_PLL3_Config>
 800d414:	4603      	mov	r3, r0
 800d416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d41a:	e004      	b.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d41c:	2301      	movs	r3, #1
 800d41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d422:	e000      	b.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d424:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10b      	bne.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d42e:	4b4b      	ldr	r3, [pc, #300]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d432:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d43a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d43e:	4a47      	ldr	r2, [pc, #284]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d440:	430b      	orrs	r3, r1
 800d442:	6593      	str	r3, [r2, #88]	; 0x58
 800d444:	e003      	b.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d44a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d456:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d45a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d45c:	2300      	movs	r3, #0
 800d45e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d460:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d464:	460b      	mov	r3, r1
 800d466:	4313      	orrs	r3, r2
 800d468:	d03b      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d476:	d01f      	beq.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d47c:	d818      	bhi.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d47e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d482:	d003      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d488:	d007      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d48a:	e011      	b.n	800d4b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d48c:	4b33      	ldr	r3, [pc, #204]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	4a32      	ldr	r2, [pc, #200]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d498:	e00f      	b.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d49e:	3328      	adds	r3, #40	; 0x28
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f001 fc6a 	bl	800ed7c <RCCEx_PLL3_Config>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4ae:	e004      	b.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d4b6:	e000      	b.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4c2:	4b26      	ldr	r3, [pc, #152]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4d2:	4a22      	ldr	r2, [pc, #136]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4d4:	430b      	orrs	r3, r1
 800d4d6:	6553      	str	r3, [r2, #84]	; 0x54
 800d4d8:	e003      	b.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d4ee:	673b      	str	r3, [r7, #112]	; 0x70
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	677b      	str	r3, [r7, #116]	; 0x74
 800d4f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	d034      	beq.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d50c:	d007      	beq.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d50e:	e011      	b.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d510:	4b12      	ldr	r3, [pc, #72]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d514:	4a11      	ldr	r2, [pc, #68]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d51a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d51c:	e00e      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d522:	3308      	adds	r3, #8
 800d524:	2102      	movs	r1, #2
 800d526:	4618      	mov	r0, r3
 800d528:	f001 fb76 	bl	800ec18 <RCCEx_PLL2_Config>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d532:	e003      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d534:	2301      	movs	r3, #1
 800d536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d53c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10d      	bne.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d544:	4b05      	ldr	r3, [pc, #20]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d552:	4a02      	ldr	r2, [pc, #8]	; (800d55c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d554:	430b      	orrs	r3, r1
 800d556:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d558:	e006      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d55a:	bf00      	nop
 800d55c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d574:	66bb      	str	r3, [r7, #104]	; 0x68
 800d576:	2300      	movs	r3, #0
 800d578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d57a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d57e:	460b      	mov	r3, r1
 800d580:	4313      	orrs	r3, r2
 800d582:	d00c      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d588:	3328      	adds	r3, #40	; 0x28
 800d58a:	2102      	movs	r1, #2
 800d58c:	4618      	mov	r0, r3
 800d58e:	f001 fbf5 	bl	800ed7c <RCCEx_PLL3_Config>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d5aa:	663b      	str	r3, [r7, #96]	; 0x60
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	667b      	str	r3, [r7, #100]	; 0x64
 800d5b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	d038      	beq.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5c6:	d018      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d5c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5cc:	d811      	bhi.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d5ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5d2:	d014      	beq.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d5d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5d8:	d80b      	bhi.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d011      	beq.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5e2:	d106      	bne.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5e4:	4bc3      	ldr	r3, [pc, #780]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e8:	4ac2      	ldr	r2, [pc, #776]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d5f0:	e008      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5f8:	e004      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d5fa:	bf00      	nop
 800d5fc:	e002      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d5fe:	bf00      	nop
 800d600:	e000      	b.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d602:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10b      	bne.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d60c:	4bb9      	ldr	r3, [pc, #740]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d610:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d61c:	4ab5      	ldr	r2, [pc, #724]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d61e:	430b      	orrs	r3, r1
 800d620:	6553      	str	r3, [r2, #84]	; 0x54
 800d622:	e003      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d638:	65bb      	str	r3, [r7, #88]	; 0x58
 800d63a:	2300      	movs	r3, #0
 800d63c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d63e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d642:	460b      	mov	r3, r1
 800d644:	4313      	orrs	r3, r2
 800d646:	d009      	beq.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d648:	4baa      	ldr	r3, [pc, #680]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d64c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d656:	4aa7      	ldr	r2, [pc, #668]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d658:	430b      	orrs	r3, r1
 800d65a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d664:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d668:	653b      	str	r3, [r7, #80]	; 0x50
 800d66a:	2300      	movs	r3, #0
 800d66c:	657b      	str	r3, [r7, #84]	; 0x54
 800d66e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d672:	460b      	mov	r3, r1
 800d674:	4313      	orrs	r3, r2
 800d676:	d00a      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d678:	4b9e      	ldr	r3, [pc, #632]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d684:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d688:	4a9a      	ldr	r2, [pc, #616]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d68a:	430b      	orrs	r3, r1
 800d68c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d696:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d69a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d69c:	2300      	movs	r3, #0
 800d69e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	d009      	beq.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6aa:	4b92      	ldr	r3, [pc, #584]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b8:	4a8e      	ldr	r2, [pc, #568]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d6ca:	643b      	str	r3, [r7, #64]	; 0x40
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d6d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	d00e      	beq.n	800d6f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d6da:	4b86      	ldr	r3, [pc, #536]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	4a85      	ldr	r2, [pc, #532]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d6e4:	6113      	str	r3, [r2, #16]
 800d6e6:	4b83      	ldr	r3, [pc, #524]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6e8:	6919      	ldr	r1, [r3, #16]
 800d6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d6f2:	4a80      	ldr	r2, [pc, #512]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6f4:	430b      	orrs	r3, r1
 800d6f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d704:	63bb      	str	r3, [r7, #56]	; 0x38
 800d706:	2300      	movs	r3, #0
 800d708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d70a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d70e:	460b      	mov	r3, r1
 800d710:	4313      	orrs	r3, r2
 800d712:	d009      	beq.n	800d728 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d714:	4b77      	ldr	r3, [pc, #476]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d718:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d722:	4a74      	ldr	r2, [pc, #464]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d724:	430b      	orrs	r3, r1
 800d726:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d734:	633b      	str	r3, [r7, #48]	; 0x30
 800d736:	2300      	movs	r3, #0
 800d738:	637b      	str	r3, [r7, #52]	; 0x34
 800d73a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d73e:	460b      	mov	r3, r1
 800d740:	4313      	orrs	r3, r2
 800d742:	d00a      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d744:	4b6b      	ldr	r3, [pc, #428]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d748:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d754:	4a67      	ldr	r2, [pc, #412]	; (800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d756:	430b      	orrs	r3, r1
 800d758:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d762:	2100      	movs	r1, #0
 800d764:	62b9      	str	r1, [r7, #40]	; 0x28
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d76c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d770:	460b      	mov	r3, r1
 800d772:	4313      	orrs	r3, r2
 800d774:	d011      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d77a:	3308      	adds	r3, #8
 800d77c:	2100      	movs	r1, #0
 800d77e:	4618      	mov	r0, r3
 800d780:	f001 fa4a 	bl	800ec18 <RCCEx_PLL2_Config>
 800d784:	4603      	mov	r3, r0
 800d786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d78a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	6239      	str	r1, [r7, #32]
 800d7a6:	f003 0302 	and.w	r3, r3, #2
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	d011      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	2101      	movs	r1, #1
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f001 fa2a 	bl	800ec18 <RCCEx_PLL2_Config>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	61b9      	str	r1, [r7, #24]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	61fb      	str	r3, [r7, #28]
 800d7ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	d011      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	2102      	movs	r1, #2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fa0a 	bl	800ec18 <RCCEx_PLL2_Config>
 800d804:	4603      	mov	r3, r0
 800d806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d80a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	2100      	movs	r1, #0
 800d824:	6139      	str	r1, [r7, #16]
 800d826:	f003 0308 	and.w	r3, r3, #8
 800d82a:	617b      	str	r3, [r7, #20]
 800d82c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d830:	460b      	mov	r3, r1
 800d832:	4313      	orrs	r3, r2
 800d834:	d011      	beq.n	800d85a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d83a:	3328      	adds	r3, #40	; 0x28
 800d83c:	2100      	movs	r1, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f001 fa9c 	bl	800ed7c <RCCEx_PLL3_Config>
 800d844:	4603      	mov	r3, r0
 800d846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800d84a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	2100      	movs	r1, #0
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	f003 0310 	and.w	r3, r3, #16
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d870:	460b      	mov	r3, r1
 800d872:	4313      	orrs	r3, r2
 800d874:	d011      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d87a:	3328      	adds	r3, #40	; 0x28
 800d87c:	2101      	movs	r1, #1
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 fa7c 	bl	800ed7c <RCCEx_PLL3_Config>
 800d884:	4603      	mov	r3, r0
 800d886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d88a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d003      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	f003 0320 	and.w	r3, r3, #32
 800d8aa:	607b      	str	r3, [r7, #4]
 800d8ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	d011      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ba:	3328      	adds	r3, #40	; 0x28
 800d8bc:	2102      	movs	r1, #2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f001 fa5c 	bl	800ed7c <RCCEx_PLL3_Config>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800d8da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	e000      	b.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8f4:	58024400 	.word	0x58024400

0800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b090      	sub	sp, #64	; 0x40
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d906:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800d90a:	430b      	orrs	r3, r1
 800d90c:	f040 8094 	bne.w	800da38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d910:	4b9e      	ldr	r3, [pc, #632]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d914:	f003 0307 	and.w	r3, r3, #7
 800d918:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	f200 8087 	bhi.w	800da30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d922:	a201      	add	r2, pc, #4	; (adr r2, 800d928 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d928:	0800d93d 	.word	0x0800d93d
 800d92c:	0800d965 	.word	0x0800d965
 800d930:	0800d98d 	.word	0x0800d98d
 800d934:	0800da29 	.word	0x0800da29
 800d938:	0800d9b5 	.word	0x0800d9b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d93c:	4b93      	ldr	r3, [pc, #588]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d948:	d108      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d94a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d94e:	4618      	mov	r0, r3
 800d950:	f001 f810 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d958:	f000 bd45 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d960:	f000 bd41 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d964:	4b89      	ldr	r3, [pc, #548]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d96c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d970:	d108      	bne.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d972:	f107 0318 	add.w	r3, r7, #24
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fd54 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d980:	f000 bd31 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d988:	f000 bd2d 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d98c:	4b7f      	ldr	r3, [pc, #508]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d998:	d108      	bne.n	800d9ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d99a:	f107 030c 	add.w	r3, r7, #12
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 fe94 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9a8:	f000 bd1d 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9b0:	f000 bd19 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d9b4:	4b75      	ldr	r3, [pc, #468]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d9bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d9be:	4b73      	ldr	r3, [pc, #460]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f003 0304 	and.w	r3, r3, #4
 800d9c6:	2b04      	cmp	r3, #4
 800d9c8:	d10c      	bne.n	800d9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d109      	bne.n	800d9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9d0:	4b6e      	ldr	r3, [pc, #440]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	08db      	lsrs	r3, r3, #3
 800d9d6:	f003 0303 	and.w	r3, r3, #3
 800d9da:	4a6d      	ldr	r2, [pc, #436]	; (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9e2:	e01f      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d9e4:	4b69      	ldr	r3, [pc, #420]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9f0:	d106      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9f8:	d102      	bne.n	800da00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d9fa:	4b66      	ldr	r3, [pc, #408]	; (800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9fe:	e011      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da00:	4b62      	ldr	r3, [pc, #392]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da0c:	d106      	bne.n	800da1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800da0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da14:	d102      	bne.n	800da1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800da16:	4b60      	ldr	r3, [pc, #384]	; (800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800da18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da1a:	e003      	b.n	800da24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800da20:	f000 bce1 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800da24:	f000 bcdf 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800da28:	4b5c      	ldr	r3, [pc, #368]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da2c:	f000 bcdb 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800da30:	2300      	movs	r3, #0
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da34:	f000 bcd7 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800da38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da3c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800da40:	430b      	orrs	r3, r1
 800da42:	f040 80ad 	bne.w	800dba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800da46:	4b51      	ldr	r3, [pc, #324]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800da4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da56:	d056      	beq.n	800db06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da5e:	f200 8090 	bhi.w	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	2bc0      	cmp	r3, #192	; 0xc0
 800da66:	f000 8088 	beq.w	800db7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	2bc0      	cmp	r3, #192	; 0xc0
 800da6e:	f200 8088 	bhi.w	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800da72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da74:	2b80      	cmp	r3, #128	; 0x80
 800da76:	d032      	beq.n	800dade <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	2b80      	cmp	r3, #128	; 0x80
 800da7c:	f200 8081 	bhi.w	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	2b40      	cmp	r3, #64	; 0x40
 800da8a:	d014      	beq.n	800dab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800da8c:	e079      	b.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da8e:	4b3f      	ldr	r3, [pc, #252]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da9a:	d108      	bne.n	800daae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 ff67 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daaa:	f000 bc9c 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dab2:	f000 bc98 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dab6:	4b35      	ldr	r3, [pc, #212]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dabe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dac2:	d108      	bne.n	800dad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dac4:	f107 0318 	add.w	r3, r7, #24
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fcab 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dad2:	f000 bc88 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dada:	f000 bc84 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dade:	4b2b      	ldr	r3, [pc, #172]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800daea:	d108      	bne.n	800dafe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daec:	f107 030c 	add.w	r3, r7, #12
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 fdeb 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dafa:	f000 bc74 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db02:	f000 bc70 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db06:	4b21      	ldr	r3, [pc, #132]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800db0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db10:	4b1e      	ldr	r3, [pc, #120]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b04      	cmp	r3, #4
 800db1a:	d10c      	bne.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800db1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d109      	bne.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db22:	4b1a      	ldr	r3, [pc, #104]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	08db      	lsrs	r3, r3, #3
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	4a18      	ldr	r2, [pc, #96]	; (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800db2e:	fa22 f303 	lsr.w	r3, r2, r3
 800db32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db34:	e01f      	b.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db42:	d106      	bne.n	800db52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800db44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db4a:	d102      	bne.n	800db52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db4c:	4b11      	ldr	r3, [pc, #68]	; (800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db50:	e011      	b.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db52:	4b0e      	ldr	r3, [pc, #56]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db5e:	d106      	bne.n	800db6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800db60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db66:	d102      	bne.n	800db6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db68:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800db6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db6c:	e003      	b.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800db72:	f000 bc38 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800db76:	f000 bc36 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db7a:	4b08      	ldr	r3, [pc, #32]	; (800db9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800db7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db7e:	f000 bc32 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db86:	f000 bc2e 	b.w	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800db8a:	bf00      	nop
 800db8c:	58024400 	.word	0x58024400
 800db90:	03d09000 	.word	0x03d09000
 800db94:	003d0900 	.word	0x003d0900
 800db98:	017d7840 	.word	0x017d7840
 800db9c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800dba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800dba8:	430b      	orrs	r3, r1
 800dbaa:	f040 809c 	bne.w	800dce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800dbae:	4b9e      	ldr	r3, [pc, #632]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dbbe:	d054      	beq.n	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dbc6:	f200 808b 	bhi.w	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dbd0:	f000 8083 	beq.w	800dcda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dbda:	f200 8081 	bhi.w	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbe4:	d02f      	beq.n	800dc46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800dbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbec:	d878      	bhi.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d004      	beq.n	800dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800dbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbfa:	d012      	beq.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800dbfc:	e070      	b.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbfe:	4b8a      	ldr	r3, [pc, #552]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc0a:	d107      	bne.n	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 feaf 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc1a:	e3e4      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc20:	e3e1      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc22:	4b81      	ldr	r3, [pc, #516]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc2e:	d107      	bne.n	800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc30:	f107 0318 	add.w	r3, r7, #24
 800dc34:	4618      	mov	r0, r3
 800dc36:	f000 fbf5 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc3e:	e3d2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc44:	e3cf      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc46:	4b78      	ldr	r3, [pc, #480]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc52:	d107      	bne.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc54:	f107 030c 	add.w	r3, r7, #12
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 fd37 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc62:	e3c0      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc68:	e3bd      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc6a:	4b6f      	ldr	r3, [pc, #444]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dc72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc74:	4b6c      	ldr	r3, [pc, #432]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d10c      	bne.n	800dc9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800dc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d109      	bne.n	800dc9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc86:	4b68      	ldr	r3, [pc, #416]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	08db      	lsrs	r3, r3, #3
 800dc8c:	f003 0303 	and.w	r3, r3, #3
 800dc90:	4a66      	ldr	r2, [pc, #408]	; (800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800dc92:	fa22 f303 	lsr.w	r3, r2, r3
 800dc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc98:	e01e      	b.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc9a:	4b63      	ldr	r3, [pc, #396]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dca6:	d106      	bne.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800dca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcae:	d102      	bne.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dcb0:	4b5f      	ldr	r3, [pc, #380]	; (800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800dcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcb4:	e010      	b.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dcb6:	4b5c      	ldr	r3, [pc, #368]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dcc2:	d106      	bne.n	800dcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcca:	d102      	bne.n	800dcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dccc:	4b59      	ldr	r3, [pc, #356]	; (800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800dcce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcd0:	e002      	b.n	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dcd6:	e386      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dcd8:	e385      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dcda:	4b57      	ldr	r3, [pc, #348]	; (800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800dcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcde:	e382      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dce4:	e37f      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800dce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800dcee:	430b      	orrs	r3, r1
 800dcf0:	f040 80a7 	bne.w	800de42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800dcf4:	4b4c      	ldr	r3, [pc, #304]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dcf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcf8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800dcfc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd04:	d055      	beq.n	800ddb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dd0c:	f200 8096 	bhi.w	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dd16:	f000 8084 	beq.w	800de22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dd20:	f200 808c 	bhi.w	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd2a:	d030      	beq.n	800dd8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd32:	f200 8083 	bhi.w	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d004      	beq.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dd42:	d012      	beq.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800dd44:	e07a      	b.n	800de3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd46:	4b38      	ldr	r3, [pc, #224]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd52:	d107      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fe0b 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd62:	e340      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd68:	e33d      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd6a:	4b2f      	ldr	r3, [pc, #188]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd76:	d107      	bne.n	800dd88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd78:	f107 0318 	add.w	r3, r7, #24
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fb51 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd86:	e32e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd8c:	e32b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd8e:	4b26      	ldr	r3, [pc, #152]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd9a:	d107      	bne.n	800ddac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd9c:	f107 030c 	add.w	r3, r7, #12
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 fc93 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddaa:	e31c      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddb0:	e319      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ddb2:	4b1d      	ldr	r3, [pc, #116]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ddba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ddbc:	4b1a      	ldr	r3, [pc, #104]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	2b04      	cmp	r3, #4
 800ddc6:	d10c      	bne.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d109      	bne.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	08db      	lsrs	r3, r3, #3
 800ddd4:	f003 0303 	and.w	r3, r3, #3
 800ddd8:	4a14      	ldr	r2, [pc, #80]	; (800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ddda:	fa22 f303 	lsr.w	r3, r2, r3
 800ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dde0:	e01e      	b.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dde2:	4b11      	ldr	r3, [pc, #68]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddee:	d106      	bne.n	800ddfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ddf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ddf6:	d102      	bne.n	800ddfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	; (800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddfc:	e010      	b.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ddfe:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de0a:	d106      	bne.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800de0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de12:	d102      	bne.n	800de1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800de14:	4b07      	ldr	r3, [pc, #28]	; (800de34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800de16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de18:	e002      	b.n	800de20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800de1e:	e2e2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800de20:	e2e1      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800de22:	4b05      	ldr	r3, [pc, #20]	; (800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800de24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de26:	e2de      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800de28:	58024400 	.word	0x58024400
 800de2c:	03d09000 	.word	0x03d09000
 800de30:	003d0900 	.word	0x003d0900
 800de34:	017d7840 	.word	0x017d7840
 800de38:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de40:	e2d1      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800de42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de46:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800de4a:	430b      	orrs	r3, r1
 800de4c:	f040 809c 	bne.w	800df88 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800de50:	4b93      	ldr	r3, [pc, #588]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800de52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800de58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800de5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de60:	d054      	beq.n	800df0c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800de62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de68:	f200 808b 	bhi.w	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de72:	f000 8083 	beq.w	800df7c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800de76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800de7c:	f200 8081 	bhi.w	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800de80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de86:	d02f      	beq.n	800dee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800de88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de8e:	d878      	bhi.n	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	2b00      	cmp	r3, #0
 800de94:	d004      	beq.n	800dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800de96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de9c:	d012      	beq.n	800dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800de9e:	e070      	b.n	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dea0:	4b7f      	ldr	r3, [pc, #508]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800deac:	d107      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800deae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fd5e 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800debc:	e293      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec2:	e290      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dec4:	4b76      	ldr	r3, [pc, #472]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800decc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ded0:	d107      	bne.n	800dee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ded2:	f107 0318 	add.w	r3, r7, #24
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 faa4 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dee0:	e281      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dee2:	2300      	movs	r3, #0
 800dee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee6:	e27e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dee8:	4b6d      	ldr	r3, [pc, #436]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800def0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800def4:	d107      	bne.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800def6:	f107 030c 	add.w	r3, r7, #12
 800defa:	4618      	mov	r0, r3
 800defc:	f000 fbe6 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df04:	e26f      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df0a:	e26c      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df0c:	4b64      	ldr	r3, [pc, #400]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800df14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df16:	4b62      	ldr	r3, [pc, #392]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 0304 	and.w	r3, r3, #4
 800df1e:	2b04      	cmp	r3, #4
 800df20:	d10c      	bne.n	800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	2b00      	cmp	r3, #0
 800df26:	d109      	bne.n	800df3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df28:	4b5d      	ldr	r3, [pc, #372]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	08db      	lsrs	r3, r3, #3
 800df2e:	f003 0303 	and.w	r3, r3, #3
 800df32:	4a5c      	ldr	r2, [pc, #368]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800df34:	fa22 f303 	lsr.w	r3, r2, r3
 800df38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df3a:	e01e      	b.n	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800df3c:	4b58      	ldr	r3, [pc, #352]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df48:	d106      	bne.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800df4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df50:	d102      	bne.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df52:	4b55      	ldr	r3, [pc, #340]	; (800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800df54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df56:	e010      	b.n	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df58:	4b51      	ldr	r3, [pc, #324]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df64:	d106      	bne.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800df66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df6c:	d102      	bne.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800df6e:	4b4f      	ldr	r3, [pc, #316]	; (800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800df70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df72:	e002      	b.n	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800df78:	e235      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df7a:	e234      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800df7c:	4b4c      	ldr	r3, [pc, #304]	; (800e0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df80:	e231      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df86:	e22e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800df88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df8c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800df90:	430b      	orrs	r3, r1
 800df92:	f040 808f 	bne.w	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800df96:	4b42      	ldr	r3, [pc, #264]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800df9e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dfa6:	d06b      	beq.n	800e080 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dfae:	d874      	bhi.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfb6:	d056      	beq.n	800e066 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dfbe:	d86c      	bhi.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dfc6:	d03b      	beq.n	800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dfce:	d864      	bhi.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfd6:	d021      	beq.n	800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfde:	d85c      	bhi.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d004      	beq.n	800dff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfec:	d004      	beq.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800dfee:	e054      	b.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800dff0:	f7fe fa4c 	bl	800c48c <HAL_RCC_GetPCLK1Freq>
 800dff4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dff6:	e1f6      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dff8:	4b29      	ldr	r3, [pc, #164]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e004:	d107      	bne.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e006:	f107 0318 	add.w	r3, r7, #24
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 fa0a 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e014:	e1e7      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e01a:	e1e4      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e01c:	4b20      	ldr	r3, [pc, #128]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e028:	d107      	bne.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e02a:	f107 030c 	add.w	r3, r7, #12
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fb4c 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e038:	e1d5      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e03e:	e1d2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e040:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 0304 	and.w	r3, r3, #4
 800e048:	2b04      	cmp	r3, #4
 800e04a:	d109      	bne.n	800e060 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e04c:	4b14      	ldr	r3, [pc, #80]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	08db      	lsrs	r3, r3, #3
 800e052:	f003 0303 	and.w	r3, r3, #3
 800e056:	4a13      	ldr	r2, [pc, #76]	; (800e0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e058:	fa22 f303 	lsr.w	r3, r2, r3
 800e05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e05e:	e1c2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e064:	e1bf      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e066:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e072:	d102      	bne.n	800e07a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e074:	4b0c      	ldr	r3, [pc, #48]	; (800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e078:	e1b5      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e07e:	e1b2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e08c:	d102      	bne.n	800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e08e:	4b07      	ldr	r3, [pc, #28]	; (800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e092:	e1a8      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e098:	e1a5      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e09e:	e1a2      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e0a0:	58024400 	.word	0x58024400
 800e0a4:	03d09000 	.word	0x03d09000
 800e0a8:	003d0900 	.word	0x003d0900
 800e0ac:	017d7840 	.word	0x017d7840
 800e0b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e0b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e0bc:	430b      	orrs	r3, r1
 800e0be:	d173      	bne.n	800e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e0c0:	4b9c      	ldr	r3, [pc, #624]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e0c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0d0:	d02f      	beq.n	800e132 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0d8:	d863      	bhi.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0e6:	d012      	beq.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e0e8:	e05b      	b.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0ea:	4b92      	ldr	r3, [pc, #584]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0f6:	d107      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0f8:	f107 0318 	add.w	r3, r7, #24
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 f991 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e106:	e16e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e10c:	e16b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e10e:	4b89      	ldr	r3, [pc, #548]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e11a:	d107      	bne.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e11c:	f107 030c 	add.w	r3, r7, #12
 800e120:	4618      	mov	r0, r3
 800e122:	f000 fad3 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e12a:	e15c      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e130:	e159      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e132:	4b80      	ldr	r3, [pc, #512]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e13a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e13c:	4b7d      	ldr	r3, [pc, #500]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b04      	cmp	r3, #4
 800e146:	d10c      	bne.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d109      	bne.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e14e:	4b79      	ldr	r3, [pc, #484]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	08db      	lsrs	r3, r3, #3
 800e154:	f003 0303 	and.w	r3, r3, #3
 800e158:	4a77      	ldr	r2, [pc, #476]	; (800e338 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e15a:	fa22 f303 	lsr.w	r3, r2, r3
 800e15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e160:	e01e      	b.n	800e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e162:	4b74      	ldr	r3, [pc, #464]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e16e:	d106      	bne.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e176:	d102      	bne.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e178:	4b70      	ldr	r3, [pc, #448]	; (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e17c:	e010      	b.n	800e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e17e:	4b6d      	ldr	r3, [pc, #436]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e18a:	d106      	bne.n	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e192:	d102      	bne.n	800e19a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e194:	4b6a      	ldr	r3, [pc, #424]	; (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e198:	e002      	b.n	800e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e19e:	e122      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e1a0:	e121      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a6:	e11e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1ac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e1b0:	430b      	orrs	r3, r1
 800e1b2:	d133      	bne.n	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e1b4:	4b5f      	ldr	r3, [pc, #380]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d004      	beq.n	800e1ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1ca:	d012      	beq.n	800e1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e1cc:	e023      	b.n	800e216 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1ce:	4b59      	ldr	r3, [pc, #356]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1da:	d107      	bne.n	800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 fbc7 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1ea:	e0fc      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f0:	e0f9      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1f2:	4b50      	ldr	r3, [pc, #320]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1fe:	d107      	bne.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e200:	f107 0318 	add.w	r3, r7, #24
 800e204:	4618      	mov	r0, r3
 800e206:	f000 f90d 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e20e:	e0ea      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e210:	2300      	movs	r3, #0
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e214:	e0e7      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21a:	e0e4      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e21c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e220:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e224:	430b      	orrs	r3, r1
 800e226:	f040 808d 	bne.w	800e344 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e22a:	4b42      	ldr	r3, [pc, #264]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e22e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e232:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e23a:	d06b      	beq.n	800e314 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e242:	d874      	bhi.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e24a:	d056      	beq.n	800e2fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e252:	d86c      	bhi.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e25a:	d03b      	beq.n	800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e262:	d864      	bhi.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e26a:	d021      	beq.n	800e2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e272:	d85c      	bhi.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e280:	d004      	beq.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e282:	e054      	b.n	800e32e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e284:	f000 f8b8 	bl	800e3f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e288:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e28a:	e0ac      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e28c:	4b29      	ldr	r3, [pc, #164]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e298:	d107      	bne.n	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e29a:	f107 0318 	add.w	r3, r7, #24
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f8c0 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2a8:	e09d      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ae:	e09a      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e2b0:	4b20      	ldr	r3, [pc, #128]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2bc:	d107      	bne.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2be:	f107 030c 	add.w	r3, r7, #12
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 fa02 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2cc:	e08b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2d2:	e088      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e2d4:	4b17      	ldr	r3, [pc, #92]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d109      	bne.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e2e0:	4b14      	ldr	r3, [pc, #80]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	08db      	lsrs	r3, r3, #3
 800e2e6:	f003 0303 	and.w	r3, r3, #3
 800e2ea:	4a13      	ldr	r2, [pc, #76]	; (800e338 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e2ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2f2:	e078      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2f8:	e075      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e2fa:	4b0e      	ldr	r3, [pc, #56]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e306:	d102      	bne.n	800e30e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e308:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e30c:	e06b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e312:	e068      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e314:	4b07      	ldr	r3, [pc, #28]	; (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e31c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e320:	d102      	bne.n	800e328 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e322:	4b07      	ldr	r3, [pc, #28]	; (800e340 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e326:	e05e      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e32c:	e05b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e332:	e058      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e334:	58024400 	.word	0x58024400
 800e338:	03d09000 	.word	0x03d09000
 800e33c:	003d0900 	.word	0x003d0900
 800e340:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e348:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e34c:	430b      	orrs	r3, r1
 800e34e:	d148      	bne.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e350:	4b27      	ldr	r3, [pc, #156]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e358:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e360:	d02a      	beq.n	800e3b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e368:	d838      	bhi.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d004      	beq.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e376:	d00d      	beq.n	800e394 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e378:	e030      	b.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e37a:	4b1d      	ldr	r3, [pc, #116]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e386:	d102      	bne.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e388:	4b1a      	ldr	r3, [pc, #104]	; (800e3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e38c:	e02b      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e392:	e028      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e394:	4b16      	ldr	r3, [pc, #88]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e39c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3a0:	d107      	bne.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 fae4 	bl	800e974 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3b0:	e019      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b6:	e016      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3b8:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3c4:	d107      	bne.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3c6:	f107 0318 	add.w	r3, r7, #24
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 f82a 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3d4:	e007      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3da:	e004      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e0:	e001      	b.n	800e3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3740      	adds	r7, #64	; 0x40
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	58024400 	.word	0x58024400
 800e3f4:	017d7840 	.word	0x017d7840

0800e3f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e3fc:	f7fe f816 	bl	800c42c <HAL_RCC_GetHCLKFreq>
 800e400:	4602      	mov	r2, r0
 800e402:	4b06      	ldr	r3, [pc, #24]	; (800e41c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	091b      	lsrs	r3, r3, #4
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	4904      	ldr	r1, [pc, #16]	; (800e420 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e40e:	5ccb      	ldrb	r3, [r1, r3]
 800e410:	f003 031f 	and.w	r3, r3, #31
 800e414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e418:	4618      	mov	r0, r3
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	58024400 	.word	0x58024400
 800e420:	0801954c 	.word	0x0801954c

0800e424 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e424:	b480      	push	{r7}
 800e426:	b089      	sub	sp, #36	; 0x24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e42c:	4ba1      	ldr	r3, [pc, #644]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e430:	f003 0303 	and.w	r3, r3, #3
 800e434:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e436:	4b9f      	ldr	r3, [pc, #636]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43a:	0b1b      	lsrs	r3, r3, #12
 800e43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e440:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e442:	4b9c      	ldr	r3, [pc, #624]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	091b      	lsrs	r3, r3, #4
 800e448:	f003 0301 	and.w	r3, r3, #1
 800e44c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e44e:	4b99      	ldr	r3, [pc, #612]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e452:	08db      	lsrs	r3, r3, #3
 800e454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	fb02 f303 	mul.w	r3, r2, r3
 800e45e:	ee07 3a90 	vmov	s15, r3
 800e462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f000 8111 	beq.w	800e694 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	2b02      	cmp	r3, #2
 800e476:	f000 8083 	beq.w	800e580 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	f200 80a1 	bhi.w	800e5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d003      	beq.n	800e490 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d056      	beq.n	800e53c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e48e:	e099      	b.n	800e5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e490:	4b88      	ldr	r3, [pc, #544]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0320 	and.w	r3, r3, #32
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d02d      	beq.n	800e4f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e49c:	4b85      	ldr	r3, [pc, #532]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	08db      	lsrs	r3, r3, #3
 800e4a2:	f003 0303 	and.w	r3, r3, #3
 800e4a6:	4a84      	ldr	r2, [pc, #528]	; (800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	ee07 3a90 	vmov	s15, r3
 800e4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	ee07 3a90 	vmov	s15, r3
 800e4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4c6:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ce:	ee07 3a90 	vmov	s15, r3
 800e4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e4f6:	e087      	b.n	800e608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	ee07 3a90 	vmov	s15, r3
 800e4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e50a:	4b6a      	ldr	r3, [pc, #424]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e512:	ee07 3a90 	vmov	s15, r3
 800e516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e51a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e51e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e53a:	e065      	b.n	800e608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	ee07 3a90 	vmov	s15, r3
 800e542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e54e:	4b59      	ldr	r3, [pc, #356]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e556:	ee07 3a90 	vmov	s15, r3
 800e55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e55e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e562:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e57e:	e043      	b.n	800e608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	ee07 3a90 	vmov	s15, r3
 800e586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e592:	4b48      	ldr	r3, [pc, #288]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59a:	ee07 3a90 	vmov	s15, r3
 800e59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5c2:	e021      	b.n	800e608 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	ee07 3a90 	vmov	s15, r3
 800e5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5d6:	4b37      	ldr	r3, [pc, #220]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5de:	ee07 3a90 	vmov	s15, r3
 800e5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e6bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e606:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e608:	4b2a      	ldr	r3, [pc, #168]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60c:	0a5b      	lsrs	r3, r3, #9
 800e60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e612:	ee07 3a90 	vmov	s15, r3
 800e616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e61a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e61e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e622:	edd7 6a07 	vldr	s13, [r7, #28]
 800e626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e62a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e62e:	ee17 2a90 	vmov	r2, s15
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e636:	4b1f      	ldr	r3, [pc, #124]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63a:	0c1b      	lsrs	r3, r3, #16
 800e63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e640:	ee07 3a90 	vmov	s15, r3
 800e644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e64c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e650:	edd7 6a07 	vldr	s13, [r7, #28]
 800e654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e65c:	ee17 2a90 	vmov	r2, s15
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e664:	4b13      	ldr	r3, [pc, #76]	; (800e6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	0e1b      	lsrs	r3, r3, #24
 800e66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e66e:	ee07 3a90 	vmov	s15, r3
 800e672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68a:	ee17 2a90 	vmov	r2, s15
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e692:	e008      	b.n	800e6a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	609a      	str	r2, [r3, #8]
}
 800e6a6:	bf00      	nop
 800e6a8:	3724      	adds	r7, #36	; 0x24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	58024400 	.word	0x58024400
 800e6b8:	03d09000 	.word	0x03d09000
 800e6bc:	46000000 	.word	0x46000000
 800e6c0:	4c742400 	.word	0x4c742400
 800e6c4:	4a742400 	.word	0x4a742400
 800e6c8:	4bbebc20 	.word	0x4bbebc20

0800e6cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b089      	sub	sp, #36	; 0x24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e6d4:	4ba1      	ldr	r3, [pc, #644]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d8:	f003 0303 	and.w	r3, r3, #3
 800e6dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e6de:	4b9f      	ldr	r3, [pc, #636]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e2:	0d1b      	lsrs	r3, r3, #20
 800e6e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e6ea:	4b9c      	ldr	r3, [pc, #624]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ee:	0a1b      	lsrs	r3, r3, #8
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e6f6:	4b99      	ldr	r3, [pc, #612]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6fa:	08db      	lsrs	r3, r3, #3
 800e6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e700:	693a      	ldr	r2, [r7, #16]
 800e702:	fb02 f303 	mul.w	r3, r2, r3
 800e706:	ee07 3a90 	vmov	s15, r3
 800e70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e70e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 8111 	beq.w	800e93c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	f000 8083 	beq.w	800e828 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	2b02      	cmp	r3, #2
 800e726:	f200 80a1 	bhi.w	800e86c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d056      	beq.n	800e7e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e736:	e099      	b.n	800e86c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e738:	4b88      	ldr	r3, [pc, #544]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0320 	and.w	r3, r3, #32
 800e740:	2b00      	cmp	r3, #0
 800e742:	d02d      	beq.n	800e7a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e744:	4b85      	ldr	r3, [pc, #532]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	08db      	lsrs	r3, r3, #3
 800e74a:	f003 0303 	and.w	r3, r3, #3
 800e74e:	4a84      	ldr	r2, [pc, #528]	; (800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e750:	fa22 f303 	lsr.w	r3, r2, r3
 800e754:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	ee07 3a90 	vmov	s15, r3
 800e75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	ee07 3a90 	vmov	s15, r3
 800e766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e76e:	4b7b      	ldr	r3, [pc, #492]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e776:	ee07 3a90 	vmov	s15, r3
 800e77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e782:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e79a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e79e:	e087      	b.n	800e8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	ee07 3a90 	vmov	s15, r3
 800e7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7b2:	4b6a      	ldr	r3, [pc, #424]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ba:	ee07 3a90 	vmov	s15, r3
 800e7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7e2:	e065      	b.n	800e8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	ee07 3a90 	vmov	s15, r3
 800e7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e96c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7f6:	4b59      	ldr	r3, [pc, #356]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fe:	ee07 3a90 	vmov	s15, r3
 800e802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e806:	ed97 6a03 	vldr	s12, [r7, #12]
 800e80a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e826:	e043      	b.n	800e8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	ee07 3a90 	vmov	s15, r3
 800e82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e83a:	4b48      	ldr	r3, [pc, #288]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e84e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e86a:	e021      	b.n	800e8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	ee07 3a90 	vmov	s15, r3
 800e872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e96c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e87e:	4b37      	ldr	r3, [pc, #220]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e886:	ee07 3a90 	vmov	s15, r3
 800e88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e892:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e964 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e8b0:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b4:	0a5b      	lsrs	r3, r3, #9
 800e8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ba:	ee07 3a90 	vmov	s15, r3
 800e8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8d6:	ee17 2a90 	vmov	r2, s15
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e8de:	4b1f      	ldr	r3, [pc, #124]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e2:	0c1b      	lsrs	r3, r3, #16
 800e8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8e8:	ee07 3a90 	vmov	s15, r3
 800e8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e904:	ee17 2a90 	vmov	r2, s15
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e90c:	4b13      	ldr	r3, [pc, #76]	; (800e95c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	0e1b      	lsrs	r3, r3, #24
 800e912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e916:	ee07 3a90 	vmov	s15, r3
 800e91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e926:	edd7 6a07 	vldr	s13, [r7, #28]
 800e92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e932:	ee17 2a90 	vmov	r2, s15
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e93a:	e008      	b.n	800e94e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	609a      	str	r2, [r3, #8]
}
 800e94e:	bf00      	nop
 800e950:	3724      	adds	r7, #36	; 0x24
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop
 800e95c:	58024400 	.word	0x58024400
 800e960:	03d09000 	.word	0x03d09000
 800e964:	46000000 	.word	0x46000000
 800e968:	4c742400 	.word	0x4c742400
 800e96c:	4a742400 	.word	0x4a742400
 800e970:	4bbebc20 	.word	0x4bbebc20

0800e974 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e974:	b480      	push	{r7}
 800e976:	b089      	sub	sp, #36	; 0x24
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e97c:	4ba0      	ldr	r3, [pc, #640]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e980:	f003 0303 	and.w	r3, r3, #3
 800e984:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e986:	4b9e      	ldr	r3, [pc, #632]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98a:	091b      	lsrs	r3, r3, #4
 800e98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e990:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e992:	4b9b      	ldr	r3, [pc, #620]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e99c:	4b98      	ldr	r3, [pc, #608]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a0:	08db      	lsrs	r3, r3, #3
 800e9a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	fb02 f303 	mul.w	r3, r2, r3
 800e9ac:	ee07 3a90 	vmov	s15, r3
 800e9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	f000 8111 	beq.w	800ebe2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	f000 8083 	beq.w	800eace <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	f200 80a1 	bhi.w	800eb12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d056      	beq.n	800ea8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e9dc:	e099      	b.n	800eb12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9de:	4b88      	ldr	r3, [pc, #544]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f003 0320 	and.w	r3, r3, #32
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d02d      	beq.n	800ea46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e9ea:	4b85      	ldr	r3, [pc, #532]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	08db      	lsrs	r3, r3, #3
 800e9f0:	f003 0303 	and.w	r3, r3, #3
 800e9f4:	4a83      	ldr	r2, [pc, #524]	; (800ec04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	ee07 3a90 	vmov	s15, r3
 800ea02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	ee07 3a90 	vmov	s15, r3
 800ea0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea14:	4b7a      	ldr	r3, [pc, #488]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea1c:	ee07 3a90 	vmov	s15, r3
 800ea20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea24:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea28:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ea44:	e087      	b.n	800eb56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	ee07 3a90 	vmov	s15, r3
 800ea4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea50:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ea54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea58:	4b69      	ldr	r3, [pc, #420]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea60:	ee07 3a90 	vmov	s15, r3
 800ea64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea68:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea6c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea88:	e065      	b.n	800eb56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	ee07 3a90 	vmov	s15, r3
 800ea90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea94:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ec10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ea98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea9c:	4b58      	ldr	r3, [pc, #352]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa4:	ee07 3a90 	vmov	s15, r3
 800eaa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eaac:	ed97 6a03 	vldr	s12, [r7, #12]
 800eab0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eabc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eacc:	e043      	b.n	800eb56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	ee07 3a90 	vmov	s15, r3
 800ead4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ead8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ec14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800eadc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eae0:	4b47      	ldr	r3, [pc, #284]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eae8:	ee07 3a90 	vmov	s15, r3
 800eaec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eaf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800eaf4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eaf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eafc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb10:	e021      	b.n	800eb56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	ee07 3a90 	vmov	s15, r3
 800eb18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ec0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eb20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb24:	4b36      	ldr	r3, [pc, #216]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb2c:	ee07 3a90 	vmov	s15, r3
 800eb30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb34:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb38:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ec08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800eb56:	4b2a      	ldr	r3, [pc, #168]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb5a:	0a5b      	lsrs	r3, r3, #9
 800eb5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb60:	ee07 3a90 	vmov	s15, r3
 800eb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb70:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb7c:	ee17 2a90 	vmov	r2, s15
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800eb84:	4b1e      	ldr	r3, [pc, #120]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb88:	0c1b      	lsrs	r3, r3, #16
 800eb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb8e:	ee07 3a90 	vmov	s15, r3
 800eb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebaa:	ee17 2a90 	vmov	r2, s15
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ebb2:	4b13      	ldr	r3, [pc, #76]	; (800ec00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb6:	0e1b      	lsrs	r3, r3, #24
 800ebb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebbc:	ee07 3a90 	vmov	s15, r3
 800ebc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ebcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ebd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebd8:	ee17 2a90 	vmov	r2, s15
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ebe0:	e008      	b.n	800ebf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	609a      	str	r2, [r3, #8]
}
 800ebf4:	bf00      	nop
 800ebf6:	3724      	adds	r7, #36	; 0x24
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	58024400 	.word	0x58024400
 800ec04:	03d09000 	.word	0x03d09000
 800ec08:	46000000 	.word	0x46000000
 800ec0c:	4c742400 	.word	0x4c742400
 800ec10:	4a742400 	.word	0x4a742400
 800ec14:	4bbebc20 	.word	0x4bbebc20

0800ec18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec26:	4b53      	ldr	r3, [pc, #332]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2a:	f003 0303 	and.w	r3, r3, #3
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d101      	bne.n	800ec36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	e099      	b.n	800ed6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ec36:	4b4f      	ldr	r3, [pc, #316]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a4e      	ldr	r2, [pc, #312]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec42:	f7f6 f8c7 	bl	8004dd4 <HAL_GetTick>
 800ec46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec48:	e008      	b.n	800ec5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ec4a:	f7f6 f8c3 	bl	8004dd4 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d901      	bls.n	800ec5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	e086      	b.n	800ed6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec5c:	4b45      	ldr	r3, [pc, #276]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1f0      	bne.n	800ec4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ec68:	4b42      	ldr	r3, [pc, #264]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	031b      	lsls	r3, r3, #12
 800ec76:	493f      	ldr	r1, [pc, #252]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	628b      	str	r3, [r1, #40]	; 0x28
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	025b      	lsls	r3, r3, #9
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	431a      	orrs	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	041b      	lsls	r3, r3, #16
 800ec9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ec9e:	431a      	orrs	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	3b01      	subs	r3, #1
 800eca6:	061b      	lsls	r3, r3, #24
 800eca8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ecac:	4931      	ldr	r1, [pc, #196]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ecb2:	4b30      	ldr	r3, [pc, #192]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	492d      	ldr	r1, [pc, #180]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ecc4:	4b2b      	ldr	r3, [pc, #172]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc8:	f023 0220 	bic.w	r2, r3, #32
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	4928      	ldr	r1, [pc, #160]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ecd6:	4b27      	ldr	r3, [pc, #156]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecda:	4a26      	ldr	r2, [pc, #152]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecdc:	f023 0310 	bic.w	r3, r3, #16
 800ece0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ece2:	4b24      	ldr	r3, [pc, #144]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ece4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ece6:	4b24      	ldr	r3, [pc, #144]	; (800ed78 <RCCEx_PLL2_Config+0x160>)
 800ece8:	4013      	ands	r3, r2
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	69d2      	ldr	r2, [r2, #28]
 800ecee:	00d2      	lsls	r2, r2, #3
 800ecf0:	4920      	ldr	r1, [pc, #128]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ecf6:	4b1f      	ldr	r3, [pc, #124]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfa:	4a1e      	ldr	r2, [pc, #120]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ecfc:	f043 0310 	orr.w	r3, r3, #16
 800ed00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d106      	bne.n	800ed16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ed08:	4b1a      	ldr	r3, [pc, #104]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	4a19      	ldr	r2, [pc, #100]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ed14:	e00f      	b.n	800ed36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d106      	bne.n	800ed2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ed1c:	4b15      	ldr	r3, [pc, #84]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed20:	4a14      	ldr	r2, [pc, #80]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ed28:	e005      	b.n	800ed36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ed2a:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	4a11      	ldr	r2, [pc, #68]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a0e      	ldr	r2, [pc, #56]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed42:	f7f6 f847 	bl	8004dd4 <HAL_GetTick>
 800ed46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed48:	e008      	b.n	800ed5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed4a:	f7f6 f843 	bl	8004dd4 <HAL_GetTick>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d901      	bls.n	800ed5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	e006      	b.n	800ed6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <RCCEx_PLL2_Config+0x15c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d0f0      	beq.n	800ed4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	58024400 	.word	0x58024400
 800ed78:	ffff0007 	.word	0xffff0007

0800ed7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ed8a:	4b53      	ldr	r3, [pc, #332]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ed8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d101      	bne.n	800ed9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	e099      	b.n	800eece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ed9a:	4b4f      	ldr	r3, [pc, #316]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a4e      	ldr	r2, [pc, #312]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800eda0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eda4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eda6:	f7f6 f815 	bl	8004dd4 <HAL_GetTick>
 800edaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800edac:	e008      	b.n	800edc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800edae:	f7f6 f811 	bl	8004dd4 <HAL_GetTick>
 800edb2:	4602      	mov	r2, r0
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d901      	bls.n	800edc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800edbc:	2303      	movs	r3, #3
 800edbe:	e086      	b.n	800eece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800edc0:	4b45      	ldr	r3, [pc, #276]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f0      	bne.n	800edae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800edcc:	4b42      	ldr	r3, [pc, #264]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800edce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	051b      	lsls	r3, r3, #20
 800edda:	493f      	ldr	r1, [pc, #252]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800eddc:	4313      	orrs	r3, r2
 800edde:	628b      	str	r3, [r1, #40]	; 0x28
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	3b01      	subs	r3, #1
 800ede6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	3b01      	subs	r3, #1
 800edf0:	025b      	lsls	r3, r3, #9
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	431a      	orrs	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	3b01      	subs	r3, #1
 800edfc:	041b      	lsls	r3, r3, #16
 800edfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ee02:	431a      	orrs	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	061b      	lsls	r3, r3, #24
 800ee0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ee10:	4931      	ldr	r1, [pc, #196]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee12:	4313      	orrs	r3, r2
 800ee14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ee16:	4b30      	ldr	r3, [pc, #192]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	492d      	ldr	r1, [pc, #180]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee24:	4313      	orrs	r3, r2
 800ee26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ee28:	4b2b      	ldr	r3, [pc, #172]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	4928      	ldr	r1, [pc, #160]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee36:	4313      	orrs	r3, r2
 800ee38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ee3a:	4b27      	ldr	r3, [pc, #156]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	4a26      	ldr	r2, [pc, #152]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ee46:	4b24      	ldr	r3, [pc, #144]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee4a:	4b24      	ldr	r3, [pc, #144]	; (800eedc <RCCEx_PLL3_Config+0x160>)
 800ee4c:	4013      	ands	r3, r2
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	69d2      	ldr	r2, [r2, #28]
 800ee52:	00d2      	lsls	r2, r2, #3
 800ee54:	4920      	ldr	r1, [pc, #128]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee56:	4313      	orrs	r3, r2
 800ee58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ee5a:	4b1f      	ldr	r3, [pc, #124]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5e:	4a1e      	ldr	r2, [pc, #120]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d106      	bne.n	800ee7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ee6c:	4b1a      	ldr	r3, [pc, #104]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee70:	4a19      	ldr	r2, [pc, #100]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ee76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ee78:	e00f      	b.n	800ee9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d106      	bne.n	800ee8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ee80:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee84:	4a14      	ldr	r2, [pc, #80]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ee8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ee8c:	e005      	b.n	800ee9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ee8e:	4b12      	ldr	r3, [pc, #72]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee92:	4a11      	ldr	r2, [pc, #68]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ee9a:	4b0f      	ldr	r3, [pc, #60]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a0e      	ldr	r2, [pc, #56]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800eea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eea6:	f7f5 ff95 	bl	8004dd4 <HAL_GetTick>
 800eeaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eeac:	e008      	b.n	800eec0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eeae:	f7f5 ff91 	bl	8004dd4 <HAL_GetTick>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	d901      	bls.n	800eec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	e006      	b.n	800eece <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eec0:	4b05      	ldr	r3, [pc, #20]	; (800eed8 <RCCEx_PLL3_Config+0x15c>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d0f0      	beq.n	800eeae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	58024400 	.word	0x58024400
 800eedc:	ffff0007 	.word	0xffff0007

0800eee0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e054      	b.n	800ef9c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7a5b      	ldrb	r3, [r3, #9]
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d105      	bne.n	800ef08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7f3 ff52 	bl	8002dac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f023 0120 	bic.w	r1, r3, #32
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685a      	ldr	r2, [r3, #4]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	430a      	orrs	r2, r1
 800ef22:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f042 0204 	orr.w	r2, r2, #4
 800ef32:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef3e:	2b40      	cmp	r3, #64	; 0x40
 800ef40:	d104      	bne.n	800ef4c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2204      	movs	r2, #4
 800ef46:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e027      	b.n	800ef9c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800ef4c:	f7f5 ff42 	bl	8004dd4 <HAL_GetTick>
 800ef50:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ef52:	e015      	b.n	800ef80 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ef54:	f7f5 ff3e 	bl	8004dd4 <HAL_GetTick>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d90e      	bls.n	800ef80 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	f003 0304 	and.w	r3, r3, #4
 800ef6c:	2b04      	cmp	r3, #4
 800ef6e:	d107      	bne.n	800ef80 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2204      	movs	r2, #4
 800ef74:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2202      	movs	r2, #2
 800ef7a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e00d      	b.n	800ef9c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f003 0304 	and.w	r3, r3, #4
 800ef8a:	2b04      	cmp	r3, #4
 800ef8c:	d0e2      	beq.n	800ef54 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2201      	movs	r2, #1
 800ef92:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	7a1b      	ldrb	r3, [r3, #8]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d101      	bne.n	800efbe <HAL_RNG_GenerateRandomNumber+0x1a>
 800efba:	2302      	movs	r3, #2
 800efbc:	e044      	b.n	800f048 <HAL_RNG_GenerateRandomNumber+0xa4>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	7a5b      	ldrb	r3, [r3, #9]
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d133      	bne.n	800f036 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2202      	movs	r2, #2
 800efd2:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800efd4:	f7f5 fefe 	bl	8004dd4 <HAL_GetTick>
 800efd8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800efda:	e018      	b.n	800f00e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800efdc:	f7f5 fefa 	bl	8004dd4 <HAL_GetTick>
 800efe0:	4602      	mov	r2, r0
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d911      	bls.n	800f00e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d00a      	beq.n	800f00e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2202      	movs	r2, #2
 800f002:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f00a:	2301      	movs	r3, #1
 800f00c:	e01c      	b.n	800f048 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d1df      	bne.n	800efdc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	689a      	ldr	r2, [r3, #8]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	691a      	ldr	r2, [r3, #16]
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	725a      	strb	r2, [r3, #9]
 800f034:	e004      	b.n	800f040 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2204      	movs	r2, #4
 800f03a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2200      	movs	r2, #0
 800f044:	721a      	strb	r2, [r3, #8]

  return status;
 800f046:	7bfb      	ldrb	r3, [r7, #15]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	2b02      	cmp	r3, #2
 800f062:	d904      	bls.n	800f06e <HAL_SAI_InitProtocol+0x1e>
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	3b03      	subs	r3, #3
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d812      	bhi.n	800f092 <HAL_SAI_InitProtocol+0x42>
 800f06c:	e008      	b.n	800f080 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	68b9      	ldr	r1, [r7, #8]
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f000 fc11 	bl	800f89c <SAI_InitI2S>
 800f07a:	4603      	mov	r3, r0
 800f07c:	75fb      	strb	r3, [r7, #23]
      break;
 800f07e:	e00b      	b.n	800f098 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	68b9      	ldr	r1, [r7, #8]
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f000 fcba 	bl	800fa00 <SAI_InitPCM>
 800f08c:	4603      	mov	r3, r0
 800f08e:	75fb      	strb	r3, [r7, #23]
      break;
 800f090:	e002      	b.n	800f098 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f092:	2301      	movs	r3, #1
 800f094:	75fb      	strb	r3, [r7, #23]
      break;
 800f096:	bf00      	nop
  }

  if (status == HAL_OK)
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f000 f808 	bl	800f0b4 <HAL_SAI_Init>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
	...

0800f0b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b08a      	sub	sp, #40	; 0x28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e28e      	b.n	800f5e4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f0c6:	f7f5 feb5 	bl	8004e34 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d113      	bne.n	800f0fc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a96      	ldr	r2, [pc, #600]	; (800f334 <HAL_SAI_Init+0x280>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d004      	beq.n	800f0e8 <HAL_SAI_Init+0x34>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a95      	ldr	r2, [pc, #596]	; (800f338 <HAL_SAI_Init+0x284>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d107      	bne.n	800f0f8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d103      	bne.n	800f0f8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e273      	b.n	800f5e4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a8c      	ldr	r2, [pc, #560]	; (800f334 <HAL_SAI_Init+0x280>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d004      	beq.n	800f110 <HAL_SAI_Init+0x5c>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a8c      	ldr	r2, [pc, #560]	; (800f33c <HAL_SAI_Init+0x288>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d102      	bne.n	800f116 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f110:	4b8b      	ldr	r3, [pc, #556]	; (800f340 <HAL_SAI_Init+0x28c>)
 800f112:	61bb      	str	r3, [r7, #24]
 800f114:	e028      	b.n	800f168 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a8a      	ldr	r2, [pc, #552]	; (800f344 <HAL_SAI_Init+0x290>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d004      	beq.n	800f12a <HAL_SAI_Init+0x76>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a88      	ldr	r2, [pc, #544]	; (800f348 <HAL_SAI_Init+0x294>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d102      	bne.n	800f130 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f12a:	4b88      	ldr	r3, [pc, #544]	; (800f34c <HAL_SAI_Init+0x298>)
 800f12c:	61bb      	str	r3, [r7, #24]
 800f12e:	e01b      	b.n	800f168 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a86      	ldr	r2, [pc, #536]	; (800f350 <HAL_SAI_Init+0x29c>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d004      	beq.n	800f144 <HAL_SAI_Init+0x90>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a85      	ldr	r2, [pc, #532]	; (800f354 <HAL_SAI_Init+0x2a0>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d102      	bne.n	800f14a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f144:	4b84      	ldr	r3, [pc, #528]	; (800f358 <HAL_SAI_Init+0x2a4>)
 800f146:	61bb      	str	r3, [r7, #24]
 800f148:	e00e      	b.n	800f168 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4a7a      	ldr	r2, [pc, #488]	; (800f338 <HAL_SAI_Init+0x284>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d004      	beq.n	800f15e <HAL_SAI_Init+0xaa>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a80      	ldr	r2, [pc, #512]	; (800f35c <HAL_SAI_Init+0x2a8>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d102      	bne.n	800f164 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f15e:	4b80      	ldr	r3, [pc, #512]	; (800f360 <HAL_SAI_Init+0x2ac>)
 800f160:	61bb      	str	r3, [r7, #24]
 800f162:	e001      	b.n	800f168 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	e23d      	b.n	800f5e4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7f3 feaf 	bl	8002ee0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fcf6 	bl	800fb74 <SAI_Disable>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	e228      	b.n	800f5e4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2202      	movs	r2, #2
 800f196:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d00c      	beq.n	800f1bc <HAL_SAI_Init+0x108>
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d80d      	bhi.n	800f1c2 <HAL_SAI_Init+0x10e>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <HAL_SAI_Init+0xfc>
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d003      	beq.n	800f1b6 <HAL_SAI_Init+0x102>
 800f1ae:	e008      	b.n	800f1c2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f1b4:	e008      	b.n	800f1c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f1b6:	2310      	movs	r3, #16
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f1ba:	e005      	b.n	800f1c8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f1bc:	2320      	movs	r3, #32
 800f1be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f1c0:	e002      	b.n	800f1c8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f1c6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	2b05      	cmp	r3, #5
 800f1ce:	d832      	bhi.n	800f236 <HAL_SAI_Init+0x182>
 800f1d0:	a201      	add	r2, pc, #4	; (adr r2, 800f1d8 <HAL_SAI_Init+0x124>)
 800f1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d6:	bf00      	nop
 800f1d8:	0800f1f1 	.word	0x0800f1f1
 800f1dc:	0800f1f7 	.word	0x0800f1f7
 800f1e0:	0800f1ff 	.word	0x0800f1ff
 800f1e4:	0800f207 	.word	0x0800f207
 800f1e8:	0800f217 	.word	0x0800f217
 800f1ec:	0800f227 	.word	0x0800f227
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	61fb      	str	r3, [r7, #28]
      break;
 800f1f4:	e022      	b.n	800f23c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1fa:	61fb      	str	r3, [r7, #28]
      break;
 800f1fc:	e01e      	b.n	800f23c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f1fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f202:	61fb      	str	r3, [r7, #28]
      break;
 800f204:	e01a      	b.n	800f23c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f20a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	f043 0301 	orr.w	r3, r3, #1
 800f212:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f214:	e012      	b.n	800f23c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f21a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21e:	f043 0302 	orr.w	r3, r3, #2
 800f222:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f224:	e00a      	b.n	800f23c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f22a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	f043 0303 	orr.w	r3, r3, #3
 800f232:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f234:	e002      	b.n	800f23c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	61fb      	str	r3, [r7, #28]
      break;
 800f23a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f240:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 80c5 	beq.w	800f3d6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a37      	ldr	r2, [pc, #220]	; (800f334 <HAL_SAI_Init+0x280>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d004      	beq.n	800f264 <HAL_SAI_Init+0x1b0>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4a37      	ldr	r2, [pc, #220]	; (800f33c <HAL_SAI_Init+0x288>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d106      	bne.n	800f272 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f264:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f268:	f04f 0100 	mov.w	r1, #0
 800f26c:	f7fe fb44 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f270:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a33      	ldr	r2, [pc, #204]	; (800f344 <HAL_SAI_Init+0x290>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d004      	beq.n	800f286 <HAL_SAI_Init+0x1d2>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a31      	ldr	r2, [pc, #196]	; (800f348 <HAL_SAI_Init+0x294>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d106      	bne.n	800f294 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f28a:	f04f 0100 	mov.w	r1, #0
 800f28e:	f7fe fb33 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f292:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a2d      	ldr	r2, [pc, #180]	; (800f350 <HAL_SAI_Init+0x29c>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d004      	beq.n	800f2a8 <HAL_SAI_Init+0x1f4>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4a2c      	ldr	r2, [pc, #176]	; (800f354 <HAL_SAI_Init+0x2a0>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d106      	bne.n	800f2b6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f2a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f2ac:	f04f 0100 	mov.w	r1, #0
 800f2b0:	f7fe fb22 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f2b4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4a1f      	ldr	r2, [pc, #124]	; (800f338 <HAL_SAI_Init+0x284>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d106      	bne.n	800f2ce <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f2c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f2c4:	f04f 0100 	mov.w	r1, #0
 800f2c8:	f7fe fb16 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f2cc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4a22      	ldr	r2, [pc, #136]	; (800f35c <HAL_SAI_Init+0x2a8>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d106      	bne.n	800f2e6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f2d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f2dc:	f04f 0100 	mov.w	r1, #0
 800f2e0:	f7fe fb0a 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800f2e4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f2ee:	d139      	bne.n	800f364 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f4:	2b04      	cmp	r3, #4
 800f2f6:	d102      	bne.n	800f2fe <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f2f8:	2340      	movs	r3, #64	; 0x40
 800f2fa:	60fb      	str	r3, [r7, #12]
 800f2fc:	e00a      	b.n	800f314 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f302:	2b08      	cmp	r3, #8
 800f304:	d103      	bne.n	800f30e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	e002      	b.n	800f314 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f312:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	4613      	mov	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4413      	add	r3, r2
 800f31c:	005b      	lsls	r3, r3, #1
 800f31e:	4619      	mov	r1, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a1b      	ldr	r3, [r3, #32]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	fb02 f303 	mul.w	r3, r2, r3
 800f32a:	fbb1 f3f3 	udiv	r3, r1, r3
 800f32e:	613b      	str	r3, [r7, #16]
 800f330:	e030      	b.n	800f394 <HAL_SAI_Init+0x2e0>
 800f332:	bf00      	nop
 800f334:	40015804 	.word	0x40015804
 800f338:	58005404 	.word	0x58005404
 800f33c:	40015824 	.word	0x40015824
 800f340:	40015800 	.word	0x40015800
 800f344:	40015c04 	.word	0x40015c04
 800f348:	40015c24 	.word	0x40015c24
 800f34c:	40015c00 	.word	0x40015c00
 800f350:	40016004 	.word	0x40016004
 800f354:	40016024 	.word	0x40016024
 800f358:	40016000 	.word	0x40016000
 800f35c:	58005424 	.word	0x58005424
 800f360:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f36c:	d101      	bne.n	800f372 <HAL_SAI_Init+0x2be>
 800f36e:	2302      	movs	r3, #2
 800f370:	e000      	b.n	800f374 <HAL_SAI_Init+0x2c0>
 800f372:	2301      	movs	r3, #1
 800f374:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	4613      	mov	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	4619      	mov	r1, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	fb02 f303 	mul.w	r3, r2, r3
 800f38c:	021b      	lsls	r3, r3, #8
 800f38e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f392:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	4a95      	ldr	r2, [pc, #596]	; (800f5ec <HAL_SAI_Init+0x538>)
 800f398:	fba2 2303 	umull	r2, r3, r2, r3
 800f39c:	08da      	lsrs	r2, r3, #3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f3a2:	6939      	ldr	r1, [r7, #16]
 800f3a4:	4b91      	ldr	r3, [pc, #580]	; (800f5ec <HAL_SAI_Init+0x538>)
 800f3a6:	fba3 2301 	umull	r2, r3, r3, r1
 800f3aa:	08da      	lsrs	r2, r3, #3
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	1aca      	subs	r2, r1, r3
 800f3b6:	2a08      	cmp	r2, #8
 800f3b8:	d904      	bls.n	800f3c4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c8:	2b04      	cmp	r3, #4
 800f3ca:	d104      	bne.n	800f3d6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d0:	085a      	lsrs	r2, r3, #1
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <HAL_SAI_Init+0x332>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d109      	bne.n	800f3fa <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d101      	bne.n	800f3f2 <HAL_SAI_Init+0x33e>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e001      	b.n	800f3f6 <HAL_SAI_Init+0x342>
 800f3f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3f6:	623b      	str	r3, [r7, #32]
 800f3f8:	e008      	b.n	800f40c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d102      	bne.n	800f408 <HAL_SAI_Init+0x354>
 800f402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f406:	e000      	b.n	800f40a <HAL_SAI_Init+0x356>
 800f408:	2300      	movs	r3, #0
 800f40a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f40c:	f7f5 fd12 	bl	8004e34 <HAL_GetREVID>
 800f410:	4603      	mov	r3, r0
 800f412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f416:	d331      	bcc.n	800f47c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6819      	ldr	r1, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4b73      	ldr	r3, [pc, #460]	; (800f5f0 <HAL_SAI_Init+0x53c>)
 800f424:	400b      	ands	r3, r1
 800f426:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6819      	ldr	r1, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f436:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f43c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f442:	431a      	orrs	r2, r3
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f450:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f45c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f462:	051b      	lsls	r3, r3, #20
 800f464:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f46a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	430a      	orrs	r2, r1
 800f478:	601a      	str	r2, [r3, #0]
 800f47a:	e02d      	b.n	800f4d8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6819      	ldr	r1, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	4b5b      	ldr	r3, [pc, #364]	; (800f5f4 <HAL_SAI_Init+0x540>)
 800f488:	400b      	ands	r3, r1
 800f48a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6819      	ldr	r1, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f49a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f4a0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4a6:	431a      	orrs	r2, r3
 800f4a8:	6a3b      	ldr	r3, [r7, #32]
 800f4aa:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f4b4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f4c0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c6:	051b      	lsls	r3, r3, #20
 800f4c8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f4ce:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	430a      	orrs	r2, r1
 800f4d6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6859      	ldr	r1, [r3, #4]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	4b45      	ldr	r3, [pc, #276]	; (800f5f8 <HAL_SAI_Init+0x544>)
 800f4e4:	400b      	ands	r3, r1
 800f4e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6859      	ldr	r1, [r3, #4]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	69da      	ldr	r2, [r3, #28]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f6:	431a      	orrs	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	430a      	orrs	r2, r1
 800f504:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	6899      	ldr	r1, [r3, #8]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	4b3a      	ldr	r3, [pc, #232]	; (800f5fc <HAL_SAI_Init+0x548>)
 800f512:	400b      	ands	r3, r1
 800f514:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6899      	ldr	r1, [r3, #8]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f520:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f526:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f52c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f532:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f538:	3b01      	subs	r3, #1
 800f53a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f53c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	430a      	orrs	r2, r1
 800f544:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	68d9      	ldr	r1, [r3, #12]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f554:	400b      	ands	r3, r1
 800f556:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68d9      	ldr	r1, [r3, #12]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f566:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f56c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f56e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f574:	3b01      	subs	r3, #1
 800f576:	021b      	lsls	r3, r3, #8
 800f578:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	430a      	orrs	r2, r1
 800f580:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a1e      	ldr	r2, [pc, #120]	; (800f600 <HAL_SAI_Init+0x54c>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d004      	beq.n	800f596 <HAL_SAI_Init+0x4e2>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	4a1c      	ldr	r2, [pc, #112]	; (800f604 <HAL_SAI_Init+0x550>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d119      	bne.n	800f5ca <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f59a:	f023 0201 	bic.w	r2, r3, #1
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d10e      	bne.n	800f5ca <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5c2:	f043 0201 	orr.w	r2, r3, #1
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f5e2:	2300      	movs	r3, #0
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3728      	adds	r7, #40	; 0x28
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	cccccccd 	.word	0xcccccccd
 800f5f0:	f005c010 	.word	0xf005c010
 800f5f4:	f805c010 	.word	0xf805c010
 800f5f8:	ffff1ff0 	.word	0xffff1ff0
 800f5fc:	fff88000 	.word	0xfff88000
 800f600:	40015804 	.word	0x40015804
 800f604:	58005404 	.word	0x58005404

0800f608 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	4613      	mov	r3, r2
 800f614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f616:	f7f5 fbdd 	bl	8004dd4 <HAL_GetTick>
 800f61a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d002      	beq.n	800f628 <HAL_SAI_Transmit_DMA+0x20>
 800f622:	88fb      	ldrh	r3, [r7, #6]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d101      	bne.n	800f62c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	e098      	b.n	800f75e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b01      	cmp	r3, #1
 800f636:	f040 8091 	bne.w	800f75c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f640:	2b01      	cmp	r3, #1
 800f642:	d101      	bne.n	800f648 <HAL_SAI_Transmit_DMA+0x40>
 800f644:	2302      	movs	r3, #2
 800f646:	e08a      	b.n	800f75e <HAL_SAI_Transmit_DMA+0x156>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2201      	movs	r2, #1
 800f64c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	88fa      	ldrh	r2, [r7, #6]
 800f65a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	88fa      	ldrh	r2, [r7, #6]
 800f662:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2212      	movs	r2, #18
 800f672:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f67c:	4a3a      	ldr	r2, [pc, #232]	; (800f768 <HAL_SAI_Transmit_DMA+0x160>)
 800f67e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f686:	4a39      	ldr	r2, [pc, #228]	; (800f76c <HAL_SAI_Transmit_DMA+0x164>)
 800f688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f690:	4a37      	ldr	r2, [pc, #220]	; (800f770 <HAL_SAI_Transmit_DMA+0x168>)
 800f692:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f69a:	2200      	movs	r2, #0
 800f69c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	331c      	adds	r3, #28
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f6b8:	f7f7 fe3a 	bl	8007330 <HAL_DMA_Start_IT>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d005      	beq.n	800f6ce <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e047      	b.n	800f75e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f000 fa17 	bl	800fb04 <SAI_InterruptFlag>
 800f6d6:	4601      	mov	r1, r0
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	691a      	ldr	r2, [r3, #16]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	430a      	orrs	r2, r1
 800f6e4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f6f4:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f6f6:	e015      	b.n	800f724 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f6f8:	f7f5 fb6c 	bl	8004dd4 <HAL_GetTick>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	1ad3      	subs	r3, r2, r3
 800f702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f706:	d90d      	bls.n	800f724 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f70e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800f720:	2303      	movs	r3, #3
 800f722:	e01c      	b.n	800f75e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d0e2      	beq.n	800f6f8 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d107      	bne.n	800f750 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	681a      	ldr	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f74e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	e000      	b.n	800f75e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800f75c:	2302      	movs	r3, #2
  }
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	0800fc49 	.word	0x0800fc49
 800f76c:	0800fbe9 	.word	0x0800fbe9
 800f770:	0800fce1 	.word	0x0800fce1

0800f774 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	4613      	mov	r3, r2
 800f780:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <HAL_SAI_Receive_DMA+0x1a>
 800f788:	88fb      	ldrh	r3, [r7, #6]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e079      	b.n	800f886 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d172      	bne.n	800f884 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d101      	bne.n	800f7ac <HAL_SAI_Receive_DMA+0x38>
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	e06c      	b.n	800f886 <HAL_SAI_Receive_DMA+0x112>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	88fa      	ldrh	r2, [r7, #6]
 800f7be:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	88fa      	ldrh	r2, [r7, #6]
 800f7c6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2222      	movs	r2, #34	; 0x22
 800f7d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7e0:	4a2b      	ldr	r2, [pc, #172]	; (800f890 <HAL_SAI_Receive_DMA+0x11c>)
 800f7e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7ea:	4a2a      	ldr	r2, [pc, #168]	; (800f894 <HAL_SAI_Receive_DMA+0x120>)
 800f7ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7f4:	4a28      	ldr	r2, [pc, #160]	; (800f898 <HAL_SAI_Receive_DMA+0x124>)
 800f7f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7fe:	2200      	movs	r2, #0
 800f800:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	331c      	adds	r3, #28
 800f80e:	4619      	mov	r1, r3
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f814:	461a      	mov	r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f81c:	f7f7 fd88 	bl	8007330 <HAL_DMA_Start_IT>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d005      	beq.n	800f832 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	e029      	b.n	800f886 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f832:	2100      	movs	r1, #0
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f000 f965 	bl	800fb04 <SAI_InterruptFlag>
 800f83a:	4601      	mov	r1, r0
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	691a      	ldr	r2, [r3, #16]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	430a      	orrs	r2, r1
 800f848:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f858:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f864:	2b00      	cmp	r3, #0
 800f866:	d107      	bne.n	800f878 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f876:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f880:	2300      	movs	r3, #0
 800f882:	e000      	b.n	800f886 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800f884:	2302      	movs	r3, #2
  }
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	0800fcc5 	.word	0x0800fcc5
 800f894:	0800fc65 	.word	0x0800fc65
 800f898:	0800fce1 	.word	0x0800fce1

0800f89c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b087      	sub	sp, #28
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
 800f8a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d003      	beq.n	800f8ca <SAI_InitI2S+0x2e>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	2b02      	cmp	r3, #2
 800f8c8:	d103      	bne.n	800f8d2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	651a      	str	r2, [r3, #80]	; 0x50
 800f8d0:	e002      	b.n	800f8d8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f8de:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8e6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	f003 0301 	and.w	r3, r3, #1
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e077      	b.n	800f9f2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d107      	bne.n	800f918 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f914:	665a      	str	r2, [r3, #100]	; 0x64
 800f916:	e006      	b.n	800f926 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f91e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b03      	cmp	r3, #3
 800f92a:	d84f      	bhi.n	800f9cc <SAI_InitI2S+0x130>
 800f92c:	a201      	add	r2, pc, #4	; (adr r2, 800f934 <SAI_InitI2S+0x98>)
 800f92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f932:	bf00      	nop
 800f934:	0800f945 	.word	0x0800f945
 800f938:	0800f967 	.word	0x0800f967
 800f93c:	0800f989 	.word	0x0800f989
 800f940:	0800f9ab 	.word	0x0800f9ab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2280      	movs	r2, #128	; 0x80
 800f948:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	085b      	lsrs	r3, r3, #1
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	085b      	lsrs	r3, r3, #1
 800f958:	011a      	lsls	r2, r3, #4
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2240      	movs	r2, #64	; 0x40
 800f962:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f964:	e035      	b.n	800f9d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2280      	movs	r2, #128	; 0x80
 800f96a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	085b      	lsrs	r3, r3, #1
 800f970:	019a      	lsls	r2, r3, #6
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	085b      	lsrs	r3, r3, #1
 800f97a:	015a      	lsls	r2, r3, #5
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2280      	movs	r2, #128	; 0x80
 800f984:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f986:	e024      	b.n	800f9d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	22c0      	movs	r2, #192	; 0xc0
 800f98c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	085b      	lsrs	r3, r3, #1
 800f992:	019a      	lsls	r2, r3, #6
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	085b      	lsrs	r3, r3, #1
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2280      	movs	r2, #128	; 0x80
 800f9a6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f9a8:	e013      	b.n	800f9d2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	22e0      	movs	r2, #224	; 0xe0
 800f9ae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	085b      	lsrs	r3, r3, #1
 800f9b4:	019a      	lsls	r2, r3, #6
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	085b      	lsrs	r3, r3, #1
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2280      	movs	r2, #128	; 0x80
 800f9c8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f9ca:	e002      	b.n	800f9d2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	75fb      	strb	r3, [r7, #23]
      break;
 800f9d0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d10b      	bne.n	800f9f0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d102      	bne.n	800f9e4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2210      	movs	r2, #16
 800f9e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d102      	bne.n	800f9f0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2208      	movs	r2, #8
 800f9ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800f9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	371c      	adds	r7, #28
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop

0800fa00 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b087      	sub	sp, #28
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d003      	beq.n	800fa2e <SAI_InitPCM+0x2e>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d103      	bne.n	800fa36 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2201      	movs	r2, #1
 800fa32:	651a      	str	r2, [r3, #80]	; 0x50
 800fa34:	e002      	b.n	800fa3c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa48:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fa50:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2200      	movs	r2, #0
 800fa56:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa64:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	d103      	bne.n	800fa74 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	659a      	str	r2, [r3, #88]	; 0x58
 800fa72:	e002      	b.n	800fa7a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	220d      	movs	r2, #13
 800fa78:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	d837      	bhi.n	800faf0 <SAI_InitPCM+0xf0>
 800fa80:	a201      	add	r2, pc, #4	; (adr r2, 800fa88 <SAI_InitPCM+0x88>)
 800fa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa86:	bf00      	nop
 800fa88:	0800fa99 	.word	0x0800fa99
 800fa8c:	0800faaf 	.word	0x0800faaf
 800fa90:	0800fac5 	.word	0x0800fac5
 800fa94:	0800fadb 	.word	0x0800fadb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2280      	movs	r2, #128	; 0x80
 800fa9c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	011a      	lsls	r2, r3, #4
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2240      	movs	r2, #64	; 0x40
 800faaa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800faac:	e023      	b.n	800faf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2280      	movs	r2, #128	; 0x80
 800fab2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	015a      	lsls	r2, r3, #5
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2280      	movs	r2, #128	; 0x80
 800fac0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fac2:	e018      	b.n	800faf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	22c0      	movs	r2, #192	; 0xc0
 800fac8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2280      	movs	r2, #128	; 0x80
 800fad6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fad8:	e00d      	b.n	800faf6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	22e0      	movs	r2, #224	; 0xe0
 800fade:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2280      	movs	r2, #128	; 0x80
 800faec:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800faee:	e002      	b.n	800faf6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	75fb      	strb	r3, [r7, #23]
      break;
 800faf4:	bf00      	nop
  }

  return status;
 800faf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	371c      	adds	r7, #28
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800fb14:	78fb      	ldrb	r3, [r7, #3]
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d103      	bne.n	800fb22 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f043 0308 	orr.w	r3, r3, #8
 800fb20:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	d10b      	bne.n	800fb42 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fb2e:	2b03      	cmp	r3, #3
 800fb30:	d003      	beq.n	800fb3a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d103      	bne.n	800fb42 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f043 0310 	orr.w	r3, r3, #16
 800fb40:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	2b03      	cmp	r3, #3
 800fb48:	d003      	beq.n	800fb52 <SAI_InterruptFlag+0x4e>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d104      	bne.n	800fb5c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	e003      	b.n	800fb64 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f043 0304 	orr.w	r3, r3, #4
 800fb62:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fb64:	68fb      	ldr	r3, [r7, #12]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
	...

0800fb74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800fb7c:	4b18      	ldr	r3, [pc, #96]	; (800fbe0 <SAI_Disable+0x6c>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a18      	ldr	r2, [pc, #96]	; (800fbe4 <SAI_Disable+0x70>)
 800fb82:	fba2 2303 	umull	r2, r3, r2, r3
 800fb86:	0b1b      	lsrs	r3, r3, #12
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fb9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10a      	bne.n	800fbbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800fbb6:	2303      	movs	r3, #3
 800fbb8:	72fb      	strb	r3, [r7, #11]
      break;
 800fbba:	e009      	b.n	800fbd0 <SAI_Disable+0x5c>
    }
    count--;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1e7      	bne.n	800fba0 <SAI_Disable+0x2c>

  return status;
 800fbd0:	7afb      	ldrb	r3, [r7, #11]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3714      	adds	r7, #20
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	2000000c 	.word	0x2000000c
 800fbe4:	95cbec1b 	.word	0x95cbec1b

0800fbe8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	69db      	ldr	r3, [r3, #28]
 800fbfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbfe:	d01c      	beq.n	800fc3a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fc16:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fc18:	2100      	movs	r1, #0
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f7ff ff72 	bl	800fb04 <SAI_InterruptFlag>
 800fc20:	4603      	mov	r3, r0
 800fc22:	43d9      	mvns	r1, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	691a      	ldr	r2, [r3, #16]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	400a      	ands	r2, r1
 800fc30:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7f2 f92c 	bl	8001e98 <HAL_SAI_TxCpltCallback>
#endif
}
 800fc40:	bf00      	nop
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f7f2 f928 	bl	8001eac <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800fc5c:	bf00      	nop
 800fc5e:	3710      	adds	r7, #16
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc70:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	69db      	ldr	r3, [r3, #28]
 800fc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7a:	d01c      	beq.n	800fcb6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fc8a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fc94:	2100      	movs	r1, #0
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f7ff ff34 	bl	800fb04 <SAI_InterruptFlag>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	43d9      	mvns	r1, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	691a      	ldr	r2, [r3, #16]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	400a      	ands	r2, r1
 800fcac:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7f2 f902 	bl	8001ec0 <HAL_SAI_RxCpltCallback>
#endif
}
 800fcbc:	bf00      	nop
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7f2 f8ff 	bl	8001ed6 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800fcd8:	bf00      	nop
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcec:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7f8 fcb2 	bl	8008658 <HAL_DMA_GetError>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d01d      	beq.n	800fd36 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fd18:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f7ff ff2a 	bl	800fb74 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f7f2 f8a7 	bl	8001e84 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800fd36:	bf00      	nop
 800fd38:	3710      	adds	r7, #16
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b08a      	sub	sp, #40	; 0x28
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d101      	bne.n	800fd50 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e075      	b.n	800fe3c <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd56:	b2db      	uxtb	r3, r3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d105      	bne.n	800fd68 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7f3 fac6 	bl	80032f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2204      	movs	r2, #4
 800fd6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 f867 	bl	800fe44 <HAL_SD_InitCard>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e05d      	b.n	800fe3c <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800fd80:	f107 0308 	add.w	r3, r7, #8
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fdb4 	bl	80108f4 <HAL_SD_GetCardStatus>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e052      	b.n	800fe3c <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800fd96:	7e3b      	ldrb	r3, [r7, #24]
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800fd9c:	7e7b      	ldrb	r3, [r7, #25]
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d10a      	bne.n	800fdc0 <HAL_SD_Init+0x82>
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d102      	bne.n	800fdb6 <HAL_SD_Init+0x78>
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d004      	beq.n	800fdc0 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdbc:	659a      	str	r2, [r3, #88]	; 0x58
 800fdbe:	e00b      	b.n	800fdd8 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d104      	bne.n	800fdd2 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdce:	659a      	str	r2, [r3, #88]	; 0x58
 800fdd0:	e002      	b.n	800fdd8 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	4619      	mov	r1, r3
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fe72 	bl	8010ac8 <HAL_SD_ConfigWideBusOperation>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800fdea:	2301      	movs	r3, #1
 800fdec:	e026      	b.n	800fe3c <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800fdee:	f7f4 fff1 	bl	8004dd4 <HAL_GetTick>
 800fdf2:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fdf4:	e011      	b.n	800fe1a <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fdf6:	f7f4 ffed 	bl	8004dd4 <HAL_GetTick>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe04:	d109      	bne.n	800fe1a <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe0c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800fe16:	2303      	movs	r3, #3
 800fe18:	e010      	b.n	800fe3c <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 ff66 	bl	8010cec <HAL_SD_GetCardState>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b04      	cmp	r3, #4
 800fe24:	d1e7      	bne.n	800fdf6 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2201      	movs	r2, #1
 800fe36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800fe3a:	2300      	movs	r3, #0
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3728      	adds	r7, #40	; 0x28
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fe44:	b590      	push	{r4, r7, lr}
 800fe46:	b08d      	sub	sp, #52	; 0x34
 800fe48:	af02      	add	r7, sp, #8
 800fe4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fe50:	2300      	movs	r3, #0
 800fe52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fe54:	2300      	movs	r3, #0
 800fe56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fe58:	2300      	movs	r3, #0
 800fe5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800fe5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800fe60:	f04f 0100 	mov.w	r1, #0
 800fe64:	f7fd fd48 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800fe68:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d109      	bne.n	800fe84 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2201      	movs	r2, #1
 800fe74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fe7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fe80:	2301      	movs	r3, #1
 800fe82:	e070      	b.n	800ff66 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	0a1b      	lsrs	r3, r3, #8
 800fe88:	4a39      	ldr	r2, [pc, #228]	; (800ff70 <HAL_SD_InitCard+0x12c>)
 800fe8a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe8e:	091b      	lsrs	r3, r3, #4
 800fe90:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681c      	ldr	r4, [r3, #0]
 800fe96:	466a      	mov	r2, sp
 800fe98:	f107 0318 	add.w	r3, r7, #24
 800fe9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fea0:	e882 0003 	stmia.w	r2, {r0, r1}
 800fea4:	f107 030c 	add.w	r3, r7, #12
 800fea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800feaa:	4620      	mov	r0, r4
 800feac:	f003 fe7e 	bl	8013bac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f003 fec1 	bl	8013c3c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d005      	beq.n	800fecc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800feca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d007      	beq.n	800fee2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800fed2:	4a28      	ldr	r2, [pc, #160]	; (800ff74 <HAL_SD_InitCard+0x130>)
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800feda:	3301      	adds	r3, #1
 800fedc:	4618      	mov	r0, r3
 800fede:	f7f4 ff85 	bl	8004dec <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fff0 	bl	8010ec8 <SD_PowerON>
 800fee8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800feea:	6a3b      	ldr	r3, [r7, #32]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00b      	beq.n	800ff08 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fefc:	6a3b      	ldr	r3, [r7, #32]
 800fefe:	431a      	orrs	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ff04:	2301      	movs	r3, #1
 800ff06:	e02e      	b.n	800ff66 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 ff0f 	bl	8010d2c <SD_InitCard>
 800ff0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00b      	beq.n	800ff2e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	431a      	orrs	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e01b      	b.n	800ff66 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ff36:	4618      	mov	r0, r3
 800ff38:	f003 ff16 	bl	8013d68 <SDMMC_CmdBlockLength>
 800ff3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ff3e:	6a3b      	ldr	r3, [r7, #32]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d00f      	beq.n	800ff64 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a0b      	ldr	r2, [pc, #44]	; (800ff78 <HAL_SD_InitCard+0x134>)
 800ff4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff50:	6a3b      	ldr	r3, [r7, #32]
 800ff52:	431a      	orrs	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e000      	b.n	800ff66 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	372c      	adds	r7, #44	; 0x2c
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd90      	pop	{r4, r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	014f8b59 	.word	0x014f8b59
 800ff74:	00012110 	.word	0x00012110
 800ff78:	1fe00fff 	.word	0x1fe00fff

0800ff7c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b092      	sub	sp, #72	; 0x48
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	607a      	str	r2, [r7, #4]
 800ff88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ff8a:	f7f4 ff23 	bl	8004dd4 <HAL_GetTick>
 800ff8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d107      	bne.n	800ffae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e167      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	f040 815a 	bne.w	8010270 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ffc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	441a      	add	r2, r3
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d907      	bls.n	800ffe0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e14e      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2203      	movs	r2, #3
 800ffe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2200      	movs	r2, #0
 800ffee:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d002      	beq.n	800fffe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	025b      	lsls	r3, r3, #9
 800fffc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010002:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	025b      	lsls	r3, r3, #9
 8010008:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801000a:	2390      	movs	r3, #144	; 0x90
 801000c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801000e:	2302      	movs	r3, #2
 8010010:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010012:	2300      	movs	r3, #0
 8010014:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010016:	2300      	movs	r3, #0
 8010018:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f107 0214 	add.w	r2, r7, #20
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f003 fe73 	bl	8013d10 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68da      	ldr	r2, [r3, #12]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010038:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d90a      	bls.n	8010056 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2202      	movs	r2, #2
 8010044:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801004c:	4618      	mov	r0, r3
 801004e:	f003 fed1 	bl	8013df4 <SDMMC_CmdReadMultiBlock>
 8010052:	6478      	str	r0, [r7, #68]	; 0x44
 8010054:	e009      	b.n	801006a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010062:	4618      	mov	r0, r3
 8010064:	f003 fea3 	bl	8013dae <SDMMC_CmdReadSingleBlock>
 8010068:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801006a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801006c:	2b00      	cmp	r3, #0
 801006e:	d012      	beq.n	8010096 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a84      	ldr	r2, [pc, #528]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 8010076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801007c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007e:	431a      	orrs	r2, r3
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010092:	2301      	movs	r3, #1
 8010094:	e0f3      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801009a:	e058      	b.n	801014e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d033      	beq.n	8010112 <HAL_SD_ReadBlocks+0x196>
 80100aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ac:	2b1f      	cmp	r3, #31
 80100ae:	d930      	bls.n	8010112 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80100b0:	2300      	movs	r3, #0
 80100b2:	643b      	str	r3, [r7, #64]	; 0x40
 80100b4:	e027      	b.n	8010106 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f003 fda0 	bl	8013c00 <SDMMC_ReadFIFO>
 80100c0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80100c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80100ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100cc:	3301      	adds	r3, #1
 80100ce:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80100d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d2:	0a1b      	lsrs	r3, r3, #8
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80100da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100dc:	3301      	adds	r3, #1
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80100e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e2:	0c1b      	lsrs	r3, r3, #16
 80100e4:	b2da      	uxtb	r2, r3
 80100e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80100ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ec:	3301      	adds	r3, #1
 80100ee:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80100f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f2:	0e1b      	lsrs	r3, r3, #24
 80100f4:	b2da      	uxtb	r2, r3
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80100fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fc:	3301      	adds	r3, #1
 80100fe:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8010100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010102:	3301      	adds	r3, #1
 8010104:	643b      	str	r3, [r7, #64]	; 0x40
 8010106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010108:	2b07      	cmp	r3, #7
 801010a:	d9d4      	bls.n	80100b6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 801010c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801010e:	3b20      	subs	r3, #32
 8010110:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8010112:	f7f4 fe5f 	bl	8004dd4 <HAL_GetTick>
 8010116:	4602      	mov	r2, r0
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801011e:	429a      	cmp	r2, r3
 8010120:	d902      	bls.n	8010128 <HAL_SD_ReadBlocks+0x1ac>
 8010122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010124:	2b00      	cmp	r3, #0
 8010126:	d112      	bne.n	801014e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a56      	ldr	r2, [pc, #344]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 801012e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2201      	movs	r2, #1
 8010140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2200      	movs	r2, #0
 8010148:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 801014a:	2303      	movs	r3, #3
 801014c:	e097      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010154:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010158:	2b00      	cmp	r3, #0
 801015a:	d09f      	beq.n	801009c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68da      	ldr	r2, [r3, #12]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801016a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010176:	2b00      	cmp	r3, #0
 8010178:	d022      	beq.n	80101c0 <HAL_SD_ReadBlocks+0x244>
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d91f      	bls.n	80101c0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010184:	2b03      	cmp	r3, #3
 8010186:	d01b      	beq.n	80101c0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4618      	mov	r0, r3
 801018e:	f003 fe9b 	bl	8013ec8 <SDMMC_CmdStopTransfer>
 8010192:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8010194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010196:	2b00      	cmp	r3, #0
 8010198:	d012      	beq.n	80101c0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a3a      	ldr	r2, [pc, #232]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 80101a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101a8:	431a      	orrs	r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2201      	movs	r2, #1
 80101b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2200      	movs	r2, #0
 80101ba:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80101bc:	2301      	movs	r3, #1
 80101be:	e05e      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c6:	f003 0308 	and.w	r3, r3, #8
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d012      	beq.n	80101f4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a2d      	ldr	r2, [pc, #180]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 80101d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101da:	f043 0208 	orr.w	r2, r3, #8
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	2200      	movs	r2, #0
 80101ee:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80101f0:	2301      	movs	r3, #1
 80101f2:	e044      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fa:	f003 0302 	and.w	r3, r3, #2
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d012      	beq.n	8010228 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a20      	ldr	r2, [pc, #128]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 8010208:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020e:	f043 0202 	orr.w	r2, r3, #2
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2201      	movs	r2, #1
 801021a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2200      	movs	r2, #0
 8010222:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010224:	2301      	movs	r3, #1
 8010226:	e02a      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801022e:	f003 0320 	and.w	r3, r3, #32
 8010232:	2b00      	cmp	r3, #0
 8010234:	d012      	beq.n	801025c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	4a13      	ldr	r2, [pc, #76]	; (8010288 <HAL_SD_ReadBlocks+0x30c>)
 801023c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010242:	f043 0220 	orr.w	r2, r3, #32
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2201      	movs	r2, #1
 801024e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2200      	movs	r2, #0
 8010256:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	e010      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4a0a      	ldr	r2, [pc, #40]	; (801028c <HAL_SD_ReadBlocks+0x310>)
 8010262:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2201      	movs	r2, #1
 8010268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	e006      	b.n	801027e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010274:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801027c:	2301      	movs	r3, #1
  }
}
 801027e:	4618      	mov	r0, r3
 8010280:	3748      	adds	r7, #72	; 0x48
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	1fe00fff 	.word	0x1fe00fff
 801028c:	18000f3a 	.word	0x18000f3a

08010290 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b092      	sub	sp, #72	; 0x48
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	607a      	str	r2, [r7, #4]
 801029c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801029e:	f7f4 fd99 	bl	8004dd4 <HAL_GetTick>
 80102a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d107      	bne.n	80102c2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80102be:	2301      	movs	r3, #1
 80102c0:	e16b      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	f040 815e 	bne.w	801058c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2200      	movs	r2, #0
 80102d4:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80102d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	441a      	add	r2, r3
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d907      	bls.n	80102f4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	e152      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2203      	movs	r2, #3
 80102f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2200      	movs	r2, #0
 8010302:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010308:	2b01      	cmp	r3, #1
 801030a:	d002      	beq.n	8010312 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	025b      	lsls	r3, r3, #9
 8010310:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010316:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	025b      	lsls	r3, r3, #9
 801031c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801031e:	2390      	movs	r3, #144	; 0x90
 8010320:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8010322:	2300      	movs	r3, #0
 8010324:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010326:	2300      	movs	r3, #0
 8010328:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801032a:	2300      	movs	r3, #0
 801032c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f107 0218 	add.w	r2, r7, #24
 8010336:	4611      	mov	r1, r2
 8010338:	4618      	mov	r0, r3
 801033a:	f003 fce9 	bl	8013d10 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	68da      	ldr	r2, [r3, #12]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801034c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d90a      	bls.n	801036a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2220      	movs	r2, #32
 8010358:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010360:	4618      	mov	r0, r3
 8010362:	f003 fd8d 	bl	8013e80 <SDMMC_CmdWriteMultiBlock>
 8010366:	6478      	str	r0, [r7, #68]	; 0x44
 8010368:	e009      	b.n	801037e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2210      	movs	r2, #16
 801036e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010376:	4618      	mov	r0, r3
 8010378:	f003 fd5f 	bl	8013e3a <SDMMC_CmdWriteSingleBlock>
 801037c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801037e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010380:	2b00      	cmp	r3, #0
 8010382:	d012      	beq.n	80103aa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4a86      	ldr	r2, [pc, #536]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 801038a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010392:	431a      	orrs	r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80103a6:	2301      	movs	r3, #1
 80103a8:	e0f7      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80103ae:	e05c      	b.n	801046a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d037      	beq.n	801042e <HAL_SD_WriteBlocks+0x19e>
 80103be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c0:	2b1f      	cmp	r3, #31
 80103c2:	d934      	bls.n	801042e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80103c4:	2300      	movs	r3, #0
 80103c6:	643b      	str	r3, [r7, #64]	; 0x40
 80103c8:	e02b      	b.n	8010422 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80103ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80103d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d2:	3301      	adds	r3, #1
 80103d4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80103d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	021a      	lsls	r2, r3, #8
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	4313      	orrs	r3, r2
 80103e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80103e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e4:	3301      	adds	r3, #1
 80103e6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80103e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	041a      	lsls	r2, r3, #16
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	4313      	orrs	r3, r2
 80103f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80103f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f6:	3301      	adds	r3, #1
 80103f8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80103fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	061a      	lsls	r2, r3, #24
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	4313      	orrs	r3, r2
 8010404:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010408:	3301      	adds	r3, #1
 801040a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f107 0214 	add.w	r2, r7, #20
 8010414:	4611      	mov	r1, r2
 8010416:	4618      	mov	r0, r3
 8010418:	f003 fbff 	bl	8013c1a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 801041c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801041e:	3301      	adds	r3, #1
 8010420:	643b      	str	r3, [r7, #64]	; 0x40
 8010422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010424:	2b07      	cmp	r3, #7
 8010426:	d9d0      	bls.n	80103ca <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042a:	3b20      	subs	r3, #32
 801042c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801042e:	f7f4 fcd1 	bl	8004dd4 <HAL_GetTick>
 8010432:	4602      	mov	r2, r0
 8010434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801043a:	429a      	cmp	r2, r3
 801043c:	d902      	bls.n	8010444 <HAL_SD_WriteBlocks+0x1b4>
 801043e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010440:	2b00      	cmp	r3, #0
 8010442:	d112      	bne.n	801046a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a56      	ldr	r2, [pc, #344]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 801044a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010452:	431a      	orrs	r2, r3
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2201      	movs	r2, #1
 801045c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2200      	movs	r2, #0
 8010464:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010466:	2303      	movs	r3, #3
 8010468:	e097      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010470:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8010474:	2b00      	cmp	r3, #0
 8010476:	d09b      	beq.n	80103b0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010486:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801048e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010492:	2b00      	cmp	r3, #0
 8010494:	d022      	beq.n	80104dc <HAL_SD_WriteBlocks+0x24c>
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d91f      	bls.n	80104dc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	d01b      	beq.n	80104dc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f003 fd0d 	bl	8013ec8 <SDMMC_CmdStopTransfer>
 80104ae:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80104b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d012      	beq.n	80104dc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a3a      	ldr	r2, [pc, #232]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 80104bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104c4:	431a      	orrs	r2, r3
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2201      	movs	r2, #1
 80104ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2200      	movs	r2, #0
 80104d6:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	e05e      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104e2:	f003 0308 	and.w	r3, r3, #8
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d012      	beq.n	8010510 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	4a2d      	ldr	r2, [pc, #180]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 80104f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f6:	f043 0208 	orr.w	r2, r3, #8
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2201      	movs	r2, #1
 8010502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2200      	movs	r2, #0
 801050a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	e044      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010516:	f003 0302 	and.w	r3, r3, #2
 801051a:	2b00      	cmp	r3, #0
 801051c:	d012      	beq.n	8010544 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a20      	ldr	r2, [pc, #128]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 8010524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801052a:	f043 0202 	orr.w	r2, r3, #2
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2201      	movs	r2, #1
 8010536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010540:	2301      	movs	r3, #1
 8010542:	e02a      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801054a:	f003 0310 	and.w	r3, r3, #16
 801054e:	2b00      	cmp	r3, #0
 8010550:	d012      	beq.n	8010578 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a13      	ldr	r2, [pc, #76]	; (80105a4 <HAL_SD_WriteBlocks+0x314>)
 8010558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801055e:	f043 0210 	orr.w	r2, r3, #16
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2201      	movs	r2, #1
 801056a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010574:	2301      	movs	r3, #1
 8010576:	e010      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4a0a      	ldr	r2, [pc, #40]	; (80105a8 <HAL_SD_WriteBlocks+0x318>)
 801057e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	2201      	movs	r2, #1
 8010584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010588:	2300      	movs	r3, #0
 801058a:	e006      	b.n	801059a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010590:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010598:	2301      	movs	r3, #1
  }
}
 801059a:	4618      	mov	r0, r3
 801059c:	3748      	adds	r7, #72	; 0x48
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	1fe00fff 	.word	0x1fe00fff
 80105a8:	18000f3a 	.word	0x18000f3a

080105ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ba:	0f9b      	lsrs	r3, r3, #30
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105c6:	0e9b      	lsrs	r3, r3, #26
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	f003 030f 	and.w	r3, r3, #15
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105d8:	0e1b      	lsrs	r3, r3, #24
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	f003 0303 	and.w	r3, r3, #3
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ea:	0c1b      	lsrs	r3, r3, #16
 80105ec:	b2da      	uxtb	r2, r3
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105f6:	0a1b      	lsrs	r3, r3, #8
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010602:	b2da      	uxtb	r2, r3
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801060c:	0d1b      	lsrs	r3, r3, #20
 801060e:	b29a      	uxth	r2, r3
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010618:	0c1b      	lsrs	r3, r3, #16
 801061a:	b2db      	uxtb	r3, r3
 801061c:	f003 030f 	and.w	r3, r3, #15
 8010620:	b2da      	uxtb	r2, r3
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801062a:	0bdb      	lsrs	r3, r3, #15
 801062c:	b2db      	uxtb	r3, r3
 801062e:	f003 0301 	and.w	r3, r3, #1
 8010632:	b2da      	uxtb	r2, r3
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801063c:	0b9b      	lsrs	r3, r3, #14
 801063e:	b2db      	uxtb	r3, r3
 8010640:	f003 0301 	and.w	r3, r3, #1
 8010644:	b2da      	uxtb	r2, r3
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801064e:	0b5b      	lsrs	r3, r3, #13
 8010650:	b2db      	uxtb	r3, r3
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	b2da      	uxtb	r2, r3
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010660:	0b1b      	lsrs	r3, r3, #12
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	b2da      	uxtb	r2, r3
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2200      	movs	r2, #0
 8010672:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010678:	2b00      	cmp	r3, #0
 801067a:	d163      	bne.n	8010744 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010680:	009a      	lsls	r2, r3, #2
 8010682:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010686:	4013      	ands	r3, r2
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801068c:	0f92      	lsrs	r2, r2, #30
 801068e:	431a      	orrs	r2, r3
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010698:	0edb      	lsrs	r3, r3, #27
 801069a:	b2db      	uxtb	r3, r3
 801069c:	f003 0307 	and.w	r3, r3, #7
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106aa:	0e1b      	lsrs	r3, r3, #24
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	f003 0307 	and.w	r3, r3, #7
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106bc:	0d5b      	lsrs	r3, r3, #21
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	f003 0307 	and.w	r3, r3, #7
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106ce:	0c9b      	lsrs	r3, r3, #18
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	f003 0307 	and.w	r3, r3, #7
 80106d6:	b2da      	uxtb	r2, r3
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106e0:	0bdb      	lsrs	r3, r3, #15
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	f003 0307 	and.w	r3, r3, #7
 80106e8:	b2da      	uxtb	r2, r3
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	691b      	ldr	r3, [r3, #16]
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	7e1b      	ldrb	r3, [r3, #24]
 80106fc:	b2db      	uxtb	r3, r3
 80106fe:	f003 0307 	and.w	r3, r3, #7
 8010702:	3302      	adds	r3, #2
 8010704:	2201      	movs	r2, #1
 8010706:	fa02 f303 	lsl.w	r3, r2, r3
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801070e:	fb03 f202 	mul.w	r2, r3, r2
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	7a1b      	ldrb	r3, [r3, #8]
 801071a:	b2db      	uxtb	r3, r3
 801071c:	f003 030f 	and.w	r3, r3, #15
 8010720:	2201      	movs	r2, #1
 8010722:	409a      	lsls	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010730:	0a52      	lsrs	r2, r2, #9
 8010732:	fb03 f202 	mul.w	r2, r3, r2
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010740:	655a      	str	r2, [r3, #84]	; 0x54
 8010742:	e031      	b.n	80107a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010748:	2b01      	cmp	r3, #1
 801074a:	d11d      	bne.n	8010788 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010750:	041b      	lsls	r3, r3, #16
 8010752:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801075a:	0c1b      	lsrs	r3, r3, #16
 801075c:	431a      	orrs	r2, r3
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	3301      	adds	r3, #1
 8010768:	029a      	lsls	r2, r3, #10
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f44f 7200 	mov.w	r2, #512	; 0x200
 801077c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	655a      	str	r2, [r3, #84]	; 0x54
 8010786:	e00f      	b.n	80107a8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4a58      	ldr	r2, [pc, #352]	; (80108f0 <HAL_SD_GetCardCSD+0x344>)
 801078e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80107a4:	2301      	movs	r3, #1
 80107a6:	e09d      	b.n	80108e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107ac:	0b9b      	lsrs	r3, r3, #14
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	f003 0301 	and.w	r3, r3, #1
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107be:	09db      	lsrs	r3, r3, #7
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c6:	b2da      	uxtb	r2, r3
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107e0:	0fdb      	lsrs	r3, r3, #31
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107ec:	0f5b      	lsrs	r3, r3, #29
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	f003 0303 	and.w	r3, r3, #3
 80107f4:	b2da      	uxtb	r2, r3
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107fe:	0e9b      	lsrs	r3, r3, #26
 8010800:	b2db      	uxtb	r3, r3
 8010802:	f003 0307 	and.w	r3, r3, #7
 8010806:	b2da      	uxtb	r2, r3
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010810:	0d9b      	lsrs	r3, r3, #22
 8010812:	b2db      	uxtb	r3, r3
 8010814:	f003 030f 	and.w	r3, r3, #15
 8010818:	b2da      	uxtb	r2, r3
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010822:	0d5b      	lsrs	r3, r3, #21
 8010824:	b2db      	uxtb	r3, r3
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	b2da      	uxtb	r2, r3
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2200      	movs	r2, #0
 8010836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801083e:	0c1b      	lsrs	r3, r3, #16
 8010840:	b2db      	uxtb	r3, r3
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	b2da      	uxtb	r2, r3
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010852:	0bdb      	lsrs	r3, r3, #15
 8010854:	b2db      	uxtb	r3, r3
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	b2da      	uxtb	r2, r3
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010866:	0b9b      	lsrs	r3, r3, #14
 8010868:	b2db      	uxtb	r3, r3
 801086a:	f003 0301 	and.w	r3, r3, #1
 801086e:	b2da      	uxtb	r2, r3
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801087a:	0b5b      	lsrs	r3, r3, #13
 801087c:	b2db      	uxtb	r3, r3
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	b2da      	uxtb	r2, r3
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801088e:	0b1b      	lsrs	r3, r3, #12
 8010890:	b2db      	uxtb	r3, r3
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	b2da      	uxtb	r2, r3
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108a2:	0a9b      	lsrs	r3, r3, #10
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	f003 0303 	and.w	r3, r3, #3
 80108aa:	b2da      	uxtb	r2, r3
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108b6:	0a1b      	lsrs	r3, r3, #8
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	f003 0303 	and.w	r3, r3, #3
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108ca:	085b      	lsrs	r3, r3, #1
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108d2:	b2da      	uxtb	r2, r3
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	2201      	movs	r2, #1
 80108de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80108e2:	2300      	movs	r3, #0
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr
 80108f0:	1fe00fff 	.word	0x1fe00fff

080108f4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b094      	sub	sp, #80	; 0x50
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b03      	cmp	r3, #3
 801090e:	d101      	bne.n	8010914 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	e0a7      	b.n	8010a64 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010914:	f107 0308 	add.w	r3, r7, #8
 8010918:	4619      	mov	r1, r3
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fb62 	bl	8010fe4 <SD_SendSDStatus>
 8010920:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010924:	2b00      	cmp	r3, #0
 8010926:	d011      	beq.n	801094c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a4f      	ldr	r2, [pc, #316]	; (8010a6c <HAL_SD_GetCardStatus+0x178>)
 801092e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010936:	431a      	orrs	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010944:	2301      	movs	r3, #1
 8010946:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801094a:	e070      	b.n	8010a2e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	099b      	lsrs	r3, r3, #6
 8010950:	b2db      	uxtb	r3, r3
 8010952:	f003 0303 	and.w	r3, r3, #3
 8010956:	b2da      	uxtb	r2, r3
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	095b      	lsrs	r3, r3, #5
 8010960:	b2db      	uxtb	r3, r3
 8010962:	f003 0301 	and.w	r3, r3, #1
 8010966:	b2da      	uxtb	r2, r3
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	0a1b      	lsrs	r3, r3, #8
 8010970:	b29b      	uxth	r3, r3
 8010972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010976:	b29a      	uxth	r2, r3
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	0e1b      	lsrs	r3, r3, #24
 801097c:	b29b      	uxth	r3, r3
 801097e:	4313      	orrs	r3, r2
 8010980:	b29a      	uxth	r2, r3
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	061a      	lsls	r2, r3, #24
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	021b      	lsls	r3, r3, #8
 801098e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010992:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	0a1b      	lsrs	r3, r3, #8
 8010998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801099c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	0e1b      	lsrs	r3, r3, #24
 80109a2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	0a1b      	lsrs	r3, r3, #8
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	0d1b      	lsrs	r3, r3, #20
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	f003 030f 	and.w	r3, r3, #15
 80109c4:	b2da      	uxtb	r2, r3
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	0c1b      	lsrs	r3, r3, #16
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	b29b      	uxth	r3, r3
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	b29b      	uxth	r3, r3
 80109de:	4313      	orrs	r3, r2
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	0a9b      	lsrs	r3, r3, #10
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109f0:	b2da      	uxtb	r2, r3
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80109f6:	697b      	ldr	r3, [r7, #20]
 80109f8:	0a1b      	lsrs	r3, r3, #8
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0303 	and.w	r3, r3, #3
 8010a00:	b2da      	uxtb	r2, r3
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	091b      	lsrs	r3, r3, #4
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	f003 030f 	and.w	r3, r3, #15
 8010a10:	b2da      	uxtb	r2, r3
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	f003 030f 	and.w	r3, r3, #15
 8010a1e:	b2da      	uxtb	r2, r3
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	0e1b      	lsrs	r3, r3, #24
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010a36:	4618      	mov	r0, r3
 8010a38:	f003 f996 	bl	8013d68 <SDMMC_CmdBlockLength>
 8010a3c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d00d      	beq.n	8010a60 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4a08      	ldr	r2, [pc, #32]	; (8010a6c <HAL_SD_GetCardStatus+0x178>)
 8010a4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a50:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8010a60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3750      	adds	r7, #80	; 0x50
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	1fe00fff 	.word	0x1fe00fff

08010a70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b08d      	sub	sp, #52	; 0x34
 8010acc:	af02      	add	r7, sp, #8
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2203      	movs	r2, #3
 8010adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae4:	2b03      	cmp	r3, #3
 8010ae6:	d02e      	beq.n	8010b46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aee:	d106      	bne.n	8010afe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	635a      	str	r2, [r3, #52]	; 0x34
 8010afc:	e029      	b.n	8010b52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010b04:	d10a      	bne.n	8010b1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fb64 	bl	80111d4 <SD_WideBus_Enable>
 8010b0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b12:	6a3b      	ldr	r3, [r7, #32]
 8010b14:	431a      	orrs	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	635a      	str	r2, [r3, #52]	; 0x34
 8010b1a:	e01a      	b.n	8010b52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d10a      	bne.n	8010b38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fba1 	bl	801126a <SD_WideBus_Disable>
 8010b28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b2e:	6a3b      	ldr	r3, [r7, #32]
 8010b30:	431a      	orrs	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	635a      	str	r2, [r3, #52]	; 0x34
 8010b36:	e00c      	b.n	8010b52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	635a      	str	r2, [r3, #52]	; 0x34
 8010b44:	e005      	b.n	8010b52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d007      	beq.n	8010b6a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4a5f      	ldr	r2, [pc, #380]	; (8010cdc <HAL_SD_ConfigWideBusOperation+0x214>)
 8010b60:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010b62:	2301      	movs	r3, #1
 8010b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b68:	e096      	b.n	8010c98 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010b6a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010b6e:	f04f 0100 	mov.w	r1, #0
 8010b72:	f7fc fec1 	bl	800d8f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8010b76:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f000 8083 	beq.w	8010c86 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	695a      	ldr	r2, [r3, #20]
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	4950      	ldr	r1, [pc, #320]	; (8010ce0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010b9e:	fba1 1303 	umull	r1, r3, r1, r3
 8010ba2:	0e1b      	lsrs	r3, r3, #24
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d303      	bcc.n	8010bb0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	695b      	ldr	r3, [r3, #20]
 8010bac:	61bb      	str	r3, [r7, #24]
 8010bae:	e05a      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bb8:	d103      	bne.n	8010bc2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	695b      	ldr	r3, [r3, #20]
 8010bbe:	61bb      	str	r3, [r7, #24]
 8010bc0:	e051      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bca:	d126      	bne.n	8010c1a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d10e      	bne.n	8010bf2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	4a43      	ldr	r2, [pc, #268]	; (8010ce4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d906      	bls.n	8010bea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	4a40      	ldr	r2, [pc, #256]	; (8010ce0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010be0:	fba2 2303 	umull	r2, r3, r2, r3
 8010be4:	0e5b      	lsrs	r3, r3, #25
 8010be6:	61bb      	str	r3, [r7, #24]
 8010be8:	e03d      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	695b      	ldr	r3, [r3, #20]
 8010bee:	61bb      	str	r3, [r7, #24]
 8010bf0:	e039      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	695b      	ldr	r3, [r3, #20]
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	69fa      	ldr	r2, [r7, #28]
 8010bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bfe:	4a39      	ldr	r2, [pc, #228]	; (8010ce4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d906      	bls.n	8010c12 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	4a36      	ldr	r2, [pc, #216]	; (8010ce0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010c08:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0c:	0e5b      	lsrs	r3, r3, #25
 8010c0e:	61bb      	str	r3, [r7, #24]
 8010c10:	e029      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	61bb      	str	r3, [r7, #24]
 8010c18:	e025      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	695b      	ldr	r3, [r3, #20]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10e      	bne.n	8010c40 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	4a30      	ldr	r2, [pc, #192]	; (8010ce8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d906      	bls.n	8010c38 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	4a2c      	ldr	r2, [pc, #176]	; (8010ce0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c32:	0e1b      	lsrs	r3, r3, #24
 8010c34:	61bb      	str	r3, [r7, #24]
 8010c36:	e016      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	695b      	ldr	r3, [r3, #20]
 8010c3c:	61bb      	str	r3, [r7, #24]
 8010c3e:	e012      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	69fa      	ldr	r2, [r7, #28]
 8010c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c4c:	4a26      	ldr	r2, [pc, #152]	; (8010ce8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d906      	bls.n	8010c60 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	4a22      	ldr	r2, [pc, #136]	; (8010ce0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010c56:	fba2 2303 	umull	r2, r3, r2, r3
 8010c5a:	0e1b      	lsrs	r3, r3, #24
 8010c5c:	61bb      	str	r3, [r7, #24]
 8010c5e:	e002      	b.n	8010c66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	695b      	ldr	r3, [r3, #20]
 8010c64:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681c      	ldr	r4, [r3, #0]
 8010c6a:	466a      	mov	r2, sp
 8010c6c:	f107 0314 	add.w	r3, r7, #20
 8010c70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c74:	e882 0003 	stmia.w	r2, {r0, r1}
 8010c78:	f107 0308 	add.w	r3, r7, #8
 8010c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f002 ff94 	bl	8013bac <SDMMC_Init>
 8010c84:	e008      	b.n	8010c98 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8010c92:	2301      	movs	r3, #1
 8010c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f003 f861 	bl	8013d68 <SDMMC_CmdBlockLength>
 8010ca6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ca8:	6a3b      	ldr	r3, [r7, #32]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00c      	beq.n	8010cc8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a0a      	ldr	r2, [pc, #40]	; (8010cdc <HAL_SD_ConfigWideBusOperation+0x214>)
 8010cb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	431a      	orrs	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	372c      	adds	r7, #44	; 0x2c
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd90      	pop	{r4, r7, pc}
 8010cdc:	1fe00fff 	.word	0x1fe00fff
 8010ce0:	55e63b89 	.word	0x55e63b89
 8010ce4:	02faf080 	.word	0x02faf080
 8010ce8:	017d7840 	.word	0x017d7840

08010cec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010cf8:	f107 030c 	add.w	r3, r7, #12
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 fa40 	bl	8011184 <SD_SendStatus>
 8010d04:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d005      	beq.n	8010d18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	431a      	orrs	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	0a5b      	lsrs	r3, r3, #9
 8010d1c:	f003 030f 	and.w	r3, r3, #15
 8010d20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010d22:	693b      	ldr	r3, [r7, #16]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3718      	adds	r7, #24
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b090      	sub	sp, #64	; 0x40
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010d34:	2300      	movs	r3, #0
 8010d36:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010d38:	f7f4 f84c 	bl	8004dd4 <HAL_GetTick>
 8010d3c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f002 ff8b 	bl	8013c5e <SDMMC_GetPowerState>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d102      	bne.n	8010d54 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010d52:	e0b5      	b.n	8010ec0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d58:	2b03      	cmp	r3, #3
 8010d5a:	d02e      	beq.n	8010dba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f003 f9d6 	bl	8014112 <SDMMC_CmdSendCID>
 8010d66:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <SD_InitCard+0x46>
    {
      return errorstate;
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d70:	e0a6      	b.n	8010ec0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2100      	movs	r1, #0
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f002 ffb6 	bl	8013cea <SDMMC_GetResponse>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	2104      	movs	r1, #4
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f002 ffad 	bl	8013cea <SDMMC_GetResponse>
 8010d90:	4602      	mov	r2, r0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2108      	movs	r1, #8
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f002 ffa4 	bl	8013cea <SDMMC_GetResponse>
 8010da2:	4602      	mov	r2, r0
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	210c      	movs	r1, #12
 8010dae:	4618      	mov	r0, r3
 8010db0:	f002 ff9b 	bl	8013cea <SDMMC_GetResponse>
 8010db4:	4602      	mov	r2, r0
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d01d      	beq.n	8010dfe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010dc2:	e019      	b.n	8010df8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f107 020a 	add.w	r2, r7, #10
 8010dcc:	4611      	mov	r1, r2
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f003 f9de 	bl	8014190 <SDMMC_CmdSetRelAdd>
 8010dd4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	e06f      	b.n	8010ec0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010de0:	f7f3 fff8 	bl	8004dd4 <HAL_GetTick>
 8010de4:	4602      	mov	r2, r0
 8010de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	f241 3287 	movw	r2, #4999	; 0x1387
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d902      	bls.n	8010df8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010df2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010df6:	e063      	b.n	8010ec0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8010df8:	897b      	ldrh	r3, [r7, #10]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d0e2      	beq.n	8010dc4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d036      	beq.n	8010e74 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010e06:	897b      	ldrh	r3, [r7, #10]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e16:	041b      	lsls	r3, r3, #16
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	f003 f998 	bl	8014150 <SDMMC_CmdSendCSD>
 8010e20:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <SD_InitCard+0x100>
    {
      return errorstate;
 8010e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2a:	e049      	b.n	8010ec0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2100      	movs	r1, #0
 8010e32:	4618      	mov	r0, r3
 8010e34:	f002 ff59 	bl	8013cea <SDMMC_GetResponse>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2104      	movs	r1, #4
 8010e44:	4618      	mov	r0, r3
 8010e46:	f002 ff50 	bl	8013cea <SDMMC_GetResponse>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2108      	movs	r1, #8
 8010e56:	4618      	mov	r0, r3
 8010e58:	f002 ff47 	bl	8013cea <SDMMC_GetResponse>
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	210c      	movs	r1, #12
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f002 ff3e 	bl	8013cea <SDMMC_GetResponse>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2104      	movs	r1, #4
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f002 ff35 	bl	8013cea <SDMMC_GetResponse>
 8010e80:	4603      	mov	r3, r0
 8010e82:	0d1a      	lsrs	r2, r3, #20
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010e88:	f107 030c 	add.w	r3, r7, #12
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff fb8c 	bl	80105ac <HAL_SD_GetCardCSD>
 8010e94:	4603      	mov	r3, r0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d002      	beq.n	8010ea0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010e9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010e9e:	e00f      	b.n	8010ec0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	4619      	mov	r1, r3
 8010eac:	4610      	mov	r0, r2
 8010eae:	f003 f847 	bl	8013f40 <SDMMC_CmdSelDesel>
 8010eb2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d001      	beq.n	8010ebe <SD_InitCard+0x192>
  {
    return errorstate;
 8010eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ebc:	e000      	b.n	8010ec0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3740      	adds	r7, #64	; 0x40
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b086      	sub	sp, #24
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f003 f850 	bl	8013f86 <SDMMC_CmdGoIdleState>
 8010ee6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d001      	beq.n	8010ef2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	e072      	b.n	8010fd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f003 f863 	bl	8013fc2 <SDMMC_CmdOperCond>
 8010efc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f04:	d10d      	bne.n	8010f22 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f003 f838 	bl	8013f86 <SDMMC_CmdGoIdleState>
 8010f16:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d004      	beq.n	8010f28 <SD_PowerON+0x60>
    {
      return errorstate;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	e05a      	b.n	8010fd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2c:	2b01      	cmp	r3, #1
 8010f2e:	d137      	bne.n	8010fa0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2100      	movs	r1, #0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f003 f863 	bl	8014002 <SDMMC_CmdAppCommand>
 8010f3c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d02d      	beq.n	8010fa0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f48:	e046      	b.n	8010fd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2100      	movs	r1, #0
 8010f50:	4618      	mov	r0, r3
 8010f52:	f003 f856 	bl	8014002 <SDMMC_CmdAppCommand>
 8010f56:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d001      	beq.n	8010f62 <SD_PowerON+0x9a>
    {
      return errorstate;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	e03a      	b.n	8010fd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	491e      	ldr	r1, [pc, #120]	; (8010fe0 <SD_PowerON+0x118>)
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f003 f86d 	bl	8014048 <SDMMC_CmdAppOperCommand>
 8010f6e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d002      	beq.n	8010f7c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010f76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010f7a:	e02d      	b.n	8010fd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2100      	movs	r1, #0
 8010f82:	4618      	mov	r0, r3
 8010f84:	f002 feb1 	bl	8013cea <SDMMC_GetResponse>
 8010f88:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	0fdb      	lsrs	r3, r3, #31
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d101      	bne.n	8010f96 <SD_PowerON+0xce>
 8010f92:	2301      	movs	r3, #1
 8010f94:	e000      	b.n	8010f98 <SD_PowerON+0xd0>
 8010f96:	2300      	movs	r3, #0
 8010f98:	613b      	str	r3, [r7, #16]

    count++;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d802      	bhi.n	8010fb0 <SD_PowerON+0xe8>
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d0cc      	beq.n	8010f4a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d902      	bls.n	8010fc0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010fbe:	e00b      	b.n	8010fd8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	3718      	adds	r7, #24
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	c1100000 	.word	0xc1100000

08010fe4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b08c      	sub	sp, #48	; 0x30
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010fee:	f7f3 fef1 	bl	8004dd4 <HAL_GetTick>
 8010ff2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	4618      	mov	r0, r3
 8011000:	f002 fe73 	bl	8013cea <SDMMC_GetResponse>
 8011004:	4603      	mov	r3, r0
 8011006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801100a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801100e:	d102      	bne.n	8011016 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011014:	e0b0      	b.n	8011178 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2140      	movs	r1, #64	; 0x40
 801101c:	4618      	mov	r0, r3
 801101e:	f002 fea3 	bl	8013d68 <SDMMC_CmdBlockLength>
 8011022:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d005      	beq.n	8011036 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011032:	6a3b      	ldr	r3, [r7, #32]
 8011034:	e0a0      	b.n	8011178 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801103e:	041b      	lsls	r3, r3, #16
 8011040:	4619      	mov	r1, r3
 8011042:	4610      	mov	r0, r2
 8011044:	f002 ffdd 	bl	8014002 <SDMMC_CmdAppCommand>
 8011048:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801104a:	6a3b      	ldr	r3, [r7, #32]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d005      	beq.n	801105c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	e08d      	b.n	8011178 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801105c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011060:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8011062:	2340      	movs	r3, #64	; 0x40
 8011064:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8011066:	2360      	movs	r3, #96	; 0x60
 8011068:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801106a:	2302      	movs	r3, #2
 801106c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801106e:	2300      	movs	r3, #0
 8011070:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011072:	2301      	movs	r3, #1
 8011074:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f107 0208 	add.w	r2, r7, #8
 801107e:	4611      	mov	r1, r2
 8011080:	4618      	mov	r0, r3
 8011082:	f002 fe45 	bl	8013d10 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4618      	mov	r0, r3
 801108c:	f003 f8c5 	bl	801421a <SDMMC_CmdStatusRegister>
 8011090:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d02b      	beq.n	80110f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80110a0:	6a3b      	ldr	r3, [r7, #32]
 80110a2:	e069      	b.n	8011178 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d013      	beq.n	80110da <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80110b2:	2300      	movs	r3, #0
 80110b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110b6:	e00d      	b.n	80110d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	4618      	mov	r0, r3
 80110be:	f002 fd9f 	bl	8013c00 <SDMMC_ReadFIFO>
 80110c2:	4602      	mov	r2, r0
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	601a      	str	r2, [r3, #0]
        pData++;
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	3304      	adds	r3, #4
 80110cc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80110ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d0:	3301      	adds	r3, #1
 80110d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	2b07      	cmp	r3, #7
 80110d8:	d9ee      	bls.n	80110b8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80110da:	f7f3 fe7b 	bl	8004dd4 <HAL_GetTick>
 80110de:	4602      	mov	r2, r0
 80110e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110e8:	d102      	bne.n	80110f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80110ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110ee:	e043      	b.n	8011178 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d0d2      	beq.n	80110a4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011104:	f003 0308 	and.w	r3, r3, #8
 8011108:	2b00      	cmp	r3, #0
 801110a:	d001      	beq.n	8011110 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 801110c:	2308      	movs	r3, #8
 801110e:	e033      	b.n	8011178 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011116:	f003 0302 	and.w	r3, r3, #2
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801111e:	2302      	movs	r3, #2
 8011120:	e02a      	b.n	8011178 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011128:	f003 0320 	and.w	r3, r3, #32
 801112c:	2b00      	cmp	r3, #0
 801112e:	d017      	beq.n	8011160 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8011130:	2320      	movs	r3, #32
 8011132:	e021      	b.n	8011178 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4618      	mov	r0, r3
 801113a:	f002 fd61 	bl	8013c00 <SDMMC_ReadFIFO>
 801113e:	4602      	mov	r2, r0
 8011140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011142:	601a      	str	r2, [r3, #0]
    pData++;
 8011144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011146:	3304      	adds	r3, #4
 8011148:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801114a:	f7f3 fe43 	bl	8004dd4 <HAL_GetTick>
 801114e:	4602      	mov	r2, r0
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011158:	d102      	bne.n	8011160 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801115a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801115e:	e00b      	b.n	8011178 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801116a:	2b00      	cmp	r3, #0
 801116c:	d1e2      	bne.n	8011134 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a03      	ldr	r2, [pc, #12]	; (8011180 <SD_SendSDStatus+0x19c>)
 8011174:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8011176:	2300      	movs	r3, #0
}
 8011178:	4618      	mov	r0, r3
 801117a:	3730      	adds	r7, #48	; 0x30
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	18000f3a 	.word	0x18000f3a

08011184 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d102      	bne.n	801119a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011198:	e018      	b.n	80111cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111a2:	041b      	lsls	r3, r3, #16
 80111a4:	4619      	mov	r1, r3
 80111a6:	4610      	mov	r0, r2
 80111a8:	f003 f814 	bl	80141d4 <SDMMC_CmdSendStatus>
 80111ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d001      	beq.n	80111b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	e009      	b.n	80111cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	2100      	movs	r1, #0
 80111be:	4618      	mov	r0, r3
 80111c0:	f002 fd93 	bl	8013cea <SDMMC_GetResponse>
 80111c4:	4602      	mov	r2, r0
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80111ca:	2300      	movs	r3, #0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3710      	adds	r7, #16
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80111dc:	2300      	movs	r3, #0
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	2300      	movs	r3, #0
 80111e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2100      	movs	r1, #0
 80111ea:	4618      	mov	r0, r3
 80111ec:	f002 fd7d 	bl	8013cea <SDMMC_GetResponse>
 80111f0:	4603      	mov	r3, r0
 80111f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80111fa:	d102      	bne.n	8011202 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80111fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011200:	e02f      	b.n	8011262 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011202:	f107 030c 	add.w	r3, r7, #12
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 f879 	bl	8011300 <SD_FindSCR>
 801120e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	e023      	b.n	8011262 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d01c      	beq.n	801125e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801122c:	041b      	lsls	r3, r3, #16
 801122e:	4619      	mov	r1, r3
 8011230:	4610      	mov	r0, r2
 8011232:	f002 fee6 	bl	8014002 <SDMMC_CmdAppCommand>
 8011236:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	e00f      	b.n	8011262 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2102      	movs	r1, #2
 8011248:	4618      	mov	r0, r3
 801124a:	f002 ff1d 	bl	8014088 <SDMMC_CmdBusWidth>
 801124e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	e003      	b.n	8011262 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801125a:	2300      	movs	r3, #0
 801125c:	e001      	b.n	8011262 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801125e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011262:	4618      	mov	r0, r3
 8011264:	3718      	adds	r7, #24
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b086      	sub	sp, #24
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011272:	2300      	movs	r3, #0
 8011274:	60fb      	str	r3, [r7, #12]
 8011276:	2300      	movs	r3, #0
 8011278:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2100      	movs	r1, #0
 8011280:	4618      	mov	r0, r3
 8011282:	f002 fd32 	bl	8013cea <SDMMC_GetResponse>
 8011286:	4603      	mov	r3, r0
 8011288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801128c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011290:	d102      	bne.n	8011298 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011296:	e02f      	b.n	80112f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011298:	f107 030c 	add.w	r3, r7, #12
 801129c:	4619      	mov	r1, r3
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 f82e 	bl	8011300 <SD_FindSCR>
 80112a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d001      	beq.n	80112b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	e023      	b.n	80112f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01c      	beq.n	80112f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681a      	ldr	r2, [r3, #0]
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112c2:	041b      	lsls	r3, r3, #16
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f002 fe9b 	bl	8014002 <SDMMC_CmdAppCommand>
 80112cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d001      	beq.n	80112d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	e00f      	b.n	80112f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	2100      	movs	r1, #0
 80112de:	4618      	mov	r0, r3
 80112e0:	f002 fed2 	bl	8014088 <SDMMC_CmdBusWidth>
 80112e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d001      	beq.n	80112f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	e003      	b.n	80112f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80112f0:	2300      	movs	r3, #0
 80112f2:	e001      	b.n	80112f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80112f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3718      	adds	r7, #24
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b08e      	sub	sp, #56	; 0x38
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
 8011308:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801130a:	f7f3 fd63 	bl	8004dd4 <HAL_GetTick>
 801130e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011310:	2300      	movs	r3, #0
 8011312:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8011314:	2300      	movs	r3, #0
 8011316:	60bb      	str	r3, [r7, #8]
 8011318:	2300      	movs	r3, #0
 801131a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2108      	movs	r1, #8
 8011326:	4618      	mov	r0, r3
 8011328:	f002 fd1e 	bl	8013d68 <SDMMC_CmdBlockLength>
 801132c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011336:	e0ad      	b.n	8011494 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011340:	041b      	lsls	r3, r3, #16
 8011342:	4619      	mov	r1, r3
 8011344:	4610      	mov	r0, r2
 8011346:	f002 fe5c 	bl	8014002 <SDMMC_CmdAppCommand>
 801134a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <SD_FindSCR+0x56>
  {
    return errorstate;
 8011352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011354:	e09e      	b.n	8011494 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801135a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801135c:	2308      	movs	r3, #8
 801135e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011360:	2330      	movs	r3, #48	; 0x30
 8011362:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011364:	2302      	movs	r3, #2
 8011366:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011368:	2300      	movs	r3, #0
 801136a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801136c:	2301      	movs	r3, #1
 801136e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f107 0210 	add.w	r2, r7, #16
 8011378:	4611      	mov	r1, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f002 fcc8 	bl	8013d10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4618      	mov	r0, r3
 8011386:	f002 fea2 	bl	80140ce <SDMMC_CmdSendSCR>
 801138a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138e:	2b00      	cmp	r3, #0
 8011390:	d027      	beq.n	80113e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	e07e      	b.n	8011494 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d113      	bne.n	80113cc <SD_FindSCR+0xcc>
 80113a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d110      	bne.n	80113cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f002 fc26 	bl	8013c00 <SDMMC_ReadFIFO>
 80113b4:	4603      	mov	r3, r0
 80113b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	4618      	mov	r0, r3
 80113be:	f002 fc1f 	bl	8013c00 <SDMMC_ReadFIFO>
 80113c2:	4603      	mov	r3, r0
 80113c4:	60fb      	str	r3, [r7, #12]
      index++;
 80113c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c8:	3301      	adds	r3, #1
 80113ca:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80113cc:	f7f3 fd02 	bl	8004dd4 <HAL_GetTick>
 80113d0:	4602      	mov	r2, r0
 80113d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d4:	1ad3      	subs	r3, r2, r3
 80113d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113da:	d102      	bne.n	80113e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80113dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80113e0:	e058      	b.n	8011494 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113e8:	f240 532a 	movw	r3, #1322	; 0x52a
 80113ec:	4013      	ands	r3, r2
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d0d1      	beq.n	8011396 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113f8:	f003 0308 	and.w	r3, r3, #8
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d005      	beq.n	801140c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2208      	movs	r2, #8
 8011406:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011408:	2308      	movs	r3, #8
 801140a:	e043      	b.n	8011494 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011412:	f003 0302 	and.w	r3, r3, #2
 8011416:	2b00      	cmp	r3, #0
 8011418:	d005      	beq.n	8011426 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2202      	movs	r2, #2
 8011420:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011422:	2302      	movs	r3, #2
 8011424:	e036      	b.n	8011494 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801142c:	f003 0320 	and.w	r3, r3, #32
 8011430:	2b00      	cmp	r3, #0
 8011432:	d005      	beq.n	8011440 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2220      	movs	r2, #32
 801143a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801143c:	2320      	movs	r3, #32
 801143e:	e029      	b.n	8011494 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a15      	ldr	r2, [pc, #84]	; (801149c <SD_FindSCR+0x19c>)
 8011446:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	061a      	lsls	r2, r3, #24
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	021b      	lsls	r3, r3, #8
 8011450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011454:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	0a1b      	lsrs	r3, r3, #8
 801145a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801145e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	0e1b      	lsrs	r3, r3, #24
 8011464:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	601a      	str	r2, [r3, #0]
    scr++;
 801146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146c:	3304      	adds	r3, #4
 801146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	061a      	lsls	r2, r3, #24
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	021b      	lsls	r3, r3, #8
 8011478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801147c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	0a1b      	lsrs	r3, r3, #8
 8011482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011486:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	0e1b      	lsrs	r3, r3, #24
 801148c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3738      	adds	r7, #56	; 0x38
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	18000f3a 	.word	0x18000f3a

080114a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d101      	bne.n	80114b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80114b0:	2301      	movs	r3, #1
 80114b2:	e02b      	b.n	801150c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d106      	bne.n	80114ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7f0 ffcd 	bl	8002468 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2202      	movs	r2, #2
 80114d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3304      	adds	r3, #4
 80114de:	4619      	mov	r1, r3
 80114e0:	4610      	mov	r0, r2
 80114e2:	f002 fa61 	bl	80139a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6818      	ldr	r0, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	461a      	mov	r2, r3
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	f002 fab5 	bl	8013a60 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80114f6:	4b07      	ldr	r3, [pc, #28]	; (8011514 <HAL_SDRAM_Init+0x74>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4a06      	ldr	r2, [pc, #24]	; (8011514 <HAL_SDRAM_Init+0x74>)
 80114fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011500:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2201      	movs	r2, #1
 8011506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801150a:	2300      	movs	r3, #0
}
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	52004000 	.word	0x52004000

08011518 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801152a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 801152c:	7dfb      	ldrb	r3, [r7, #23]
 801152e:	2b02      	cmp	r3, #2
 8011530:	d101      	bne.n	8011536 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8011532:	2302      	movs	r3, #2
 8011534:	e021      	b.n	801157a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8011536:	7dfb      	ldrb	r3, [r7, #23]
 8011538:	2b01      	cmp	r3, #1
 801153a:	d002      	beq.n	8011542 <HAL_SDRAM_SendCommand+0x2a>
 801153c:	7dfb      	ldrb	r3, [r7, #23]
 801153e:	2b05      	cmp	r3, #5
 8011540:	d118      	bne.n	8011574 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2202      	movs	r2, #2
 8011546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	68b9      	ldr	r1, [r7, #8]
 8011552:	4618      	mov	r0, r3
 8011554:	f002 faee 	bl	8013b34 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b02      	cmp	r3, #2
 801155e:	d104      	bne.n	801156a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2205      	movs	r2, #5
 8011564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011568:	e006      	b.n	8011578 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2201      	movs	r2, #1
 801156e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011572:	e001      	b.n	8011578 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	e000      	b.n	801157a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011578:	2300      	movs	r3, #0
}
 801157a:	4618      	mov	r0, r3
 801157c:	3718      	adds	r7, #24
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}

08011582 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8011582:	b580      	push	{r7, lr}
 8011584:	b082      	sub	sp, #8
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011592:	b2db      	uxtb	r3, r3
 8011594:	2b02      	cmp	r3, #2
 8011596:	d101      	bne.n	801159c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011598:	2302      	movs	r3, #2
 801159a:	e016      	b.n	80115ca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d10f      	bne.n	80115c8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2202      	movs	r2, #2
 80115ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f002 fae0 	bl	8013b7c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2201      	movs	r2, #1
 80115c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	e000      	b.n	80115ca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80115c8:	2301      	movs	r3, #1
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80115e2:	2301      	movs	r3, #1
 80115e4:	e10f      	b.n	8011806 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4a87      	ldr	r2, [pc, #540]	; (8011810 <HAL_SPI_Init+0x23c>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d00f      	beq.n	8011616 <HAL_SPI_Init+0x42>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4a86      	ldr	r2, [pc, #536]	; (8011814 <HAL_SPI_Init+0x240>)
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d00a      	beq.n	8011616 <HAL_SPI_Init+0x42>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	4a84      	ldr	r2, [pc, #528]	; (8011818 <HAL_SPI_Init+0x244>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d005      	beq.n	8011616 <HAL_SPI_Init+0x42>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	2b0f      	cmp	r3, #15
 8011610:	d901      	bls.n	8011616 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e0f7      	b.n	8011806 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011616:	6878      	ldr	r0, [r7, #4]
 8011618:	f000 f900 	bl	801181c <SPI_GetPacketSize>
 801161c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4a7b      	ldr	r2, [pc, #492]	; (8011810 <HAL_SPI_Init+0x23c>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d00c      	beq.n	8011642 <HAL_SPI_Init+0x6e>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a79      	ldr	r2, [pc, #484]	; (8011814 <HAL_SPI_Init+0x240>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d007      	beq.n	8011642 <HAL_SPI_Init+0x6e>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4a78      	ldr	r2, [pc, #480]	; (8011818 <HAL_SPI_Init+0x244>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d002      	beq.n	8011642 <HAL_SPI_Init+0x6e>
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b08      	cmp	r3, #8
 8011640:	d811      	bhi.n	8011666 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011646:	4a72      	ldr	r2, [pc, #456]	; (8011810 <HAL_SPI_Init+0x23c>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d009      	beq.n	8011660 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4a70      	ldr	r2, [pc, #448]	; (8011814 <HAL_SPI_Init+0x240>)
 8011652:	4293      	cmp	r3, r2
 8011654:	d004      	beq.n	8011660 <HAL_SPI_Init+0x8c>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4a6f      	ldr	r2, [pc, #444]	; (8011818 <HAL_SPI_Init+0x244>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d104      	bne.n	801166a <HAL_SPI_Init+0x96>
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2b10      	cmp	r3, #16
 8011664:	d901      	bls.n	801166a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011666:	2301      	movs	r3, #1
 8011668:	e0cd      	b.n	8011806 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011670:	b2db      	uxtb	r3, r3
 8011672:	2b00      	cmp	r3, #0
 8011674:	d106      	bne.n	8011684 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2200      	movs	r2, #0
 801167a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7f1 ff0a 	bl	8003498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2202      	movs	r2, #2
 8011688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f022 0201 	bic.w	r2, r2, #1
 801169a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80116a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	699b      	ldr	r3, [r3, #24]
 80116ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80116b0:	d119      	bne.n	80116e6 <HAL_SPI_Init+0x112>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80116ba:	d103      	bne.n	80116c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d008      	beq.n	80116d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10c      	bne.n	80116e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80116d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116d4:	d107      	bne.n	80116e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80116e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00f      	beq.n	8011712 <HAL_SPI_Init+0x13e>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	2b06      	cmp	r3, #6
 80116f8:	d90b      	bls.n	8011712 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	430a      	orrs	r2, r1
 801170e:	601a      	str	r2, [r3, #0]
 8011710:	e007      	b.n	8011722 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011720:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	69da      	ldr	r2, [r3, #28]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801172a:	431a      	orrs	r2, r3
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	431a      	orrs	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011734:	ea42 0103 	orr.w	r1, r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68da      	ldr	r2, [r3, #12]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	430a      	orrs	r2, r1
 8011742:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174c:	431a      	orrs	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011752:	431a      	orrs	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	431a      	orrs	r2, r3
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	431a      	orrs	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	695b      	ldr	r3, [r3, #20]
 8011764:	431a      	orrs	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a1b      	ldr	r3, [r3, #32]
 801176a:	431a      	orrs	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	431a      	orrs	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011776:	431a      	orrs	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	689b      	ldr	r3, [r3, #8]
 801177c:	431a      	orrs	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011782:	ea42 0103 	orr.w	r1, r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	430a      	orrs	r2, r1
 8011790:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d113      	bne.n	80117c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80117c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f022 0201 	bic.w	r2, r2, #1
 80117d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00a      	beq.n	80117f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	430a      	orrs	r2, r1
 80117f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2201      	movs	r2, #1
 8011800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3710      	adds	r7, #16
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	40013000 	.word	0x40013000
 8011814:	40003800 	.word	0x40003800
 8011818:	40003c00 	.word	0x40003c00

0801181c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801181c:	b480      	push	{r7}
 801181e:	b085      	sub	sp, #20
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011828:	095b      	lsrs	r3, r3, #5
 801182a:	3301      	adds	r3, #1
 801182c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	3301      	adds	r3, #1
 8011834:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	3307      	adds	r3, #7
 801183a:	08db      	lsrs	r3, r3, #3
 801183c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	68fa      	ldr	r2, [r7, #12]
 8011842:	fb02 f303 	mul.w	r3, r2, r3
}
 8011846:	4618      	mov	r0, r3
 8011848:	3714      	adds	r7, #20
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr

08011852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b082      	sub	sp, #8
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d101      	bne.n	8011864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	e049      	b.n	80118f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d106      	bne.n	801187e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2200      	movs	r2, #0
 8011874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7f2 f9a5 	bl	8003bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2202      	movs	r2, #2
 8011882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681a      	ldr	r2, [r3, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	3304      	adds	r3, #4
 801188e:	4619      	mov	r1, r3
 8011890:	4610      	mov	r0, r2
 8011892:	f000 fa99 	bl	8011dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2201      	movs	r2, #1
 801189a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2201      	movs	r2, #1
 80118a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2201      	movs	r2, #1
 80118aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2201      	movs	r2, #1
 80118ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2201      	movs	r2, #1
 80118c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2201      	movs	r2, #1
 80118ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2201      	movs	r2, #1
 80118d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2201      	movs	r2, #1
 80118da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2201      	movs	r2, #1
 80118e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2201      	movs	r2, #1
 80118ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2201      	movs	r2, #1
 80118f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d101      	bne.n	8011912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801190e:	2301      	movs	r3, #1
 8011910:	e049      	b.n	80119a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011918:	b2db      	uxtb	r3, r3
 801191a:	2b00      	cmp	r3, #0
 801191c:	d106      	bne.n	801192c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f7f2 f92c 	bl	8003b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2202      	movs	r2, #2
 8011930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3304      	adds	r3, #4
 801193c:	4619      	mov	r1, r3
 801193e:	4610      	mov	r0, r2
 8011940:	f000 fa42 	bl	8011dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2201      	movs	r2, #1
 8011948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2201      	movs	r2, #1
 8011950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2201      	movs	r2, #1
 8011958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2201      	movs	r2, #1
 8011960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2201      	movs	r2, #1
 8011968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2201      	movs	r2, #1
 8011970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2201      	movs	r2, #1
 8011978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2201      	movs	r2, #1
 8011980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2201      	movs	r2, #1
 8011988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2201      	movs	r2, #1
 8011990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2201      	movs	r2, #1
 8011998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2201      	movs	r2, #1
 80119a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80119a4:	2300      	movs	r3, #0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
	...

080119b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119bc:	2300      	movs	r3, #0
 80119be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d101      	bne.n	80119ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80119ca:	2302      	movs	r3, #2
 80119cc:	e0ff      	b.n	8011bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2201      	movs	r2, #1
 80119d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2b14      	cmp	r3, #20
 80119da:	f200 80f0 	bhi.w	8011bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80119de:	a201      	add	r2, pc, #4	; (adr r2, 80119e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80119e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e4:	08011a39 	.word	0x08011a39
 80119e8:	08011bbf 	.word	0x08011bbf
 80119ec:	08011bbf 	.word	0x08011bbf
 80119f0:	08011bbf 	.word	0x08011bbf
 80119f4:	08011a79 	.word	0x08011a79
 80119f8:	08011bbf 	.word	0x08011bbf
 80119fc:	08011bbf 	.word	0x08011bbf
 8011a00:	08011bbf 	.word	0x08011bbf
 8011a04:	08011abb 	.word	0x08011abb
 8011a08:	08011bbf 	.word	0x08011bbf
 8011a0c:	08011bbf 	.word	0x08011bbf
 8011a10:	08011bbf 	.word	0x08011bbf
 8011a14:	08011afb 	.word	0x08011afb
 8011a18:	08011bbf 	.word	0x08011bbf
 8011a1c:	08011bbf 	.word	0x08011bbf
 8011a20:	08011bbf 	.word	0x08011bbf
 8011a24:	08011b3d 	.word	0x08011b3d
 8011a28:	08011bbf 	.word	0x08011bbf
 8011a2c:	08011bbf 	.word	0x08011bbf
 8011a30:	08011bbf 	.word	0x08011bbf
 8011a34:	08011b7d 	.word	0x08011b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	68b9      	ldr	r1, [r7, #8]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f000 fa5c 	bl	8011efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	699a      	ldr	r2, [r3, #24]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f042 0208 	orr.w	r2, r2, #8
 8011a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	699a      	ldr	r2, [r3, #24]
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f022 0204 	bic.w	r2, r2, #4
 8011a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	6999      	ldr	r1, [r3, #24]
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	691a      	ldr	r2, [r3, #16]
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	430a      	orrs	r2, r1
 8011a74:	619a      	str	r2, [r3, #24]
      break;
 8011a76:	e0a5      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	68b9      	ldr	r1, [r7, #8]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f000 facc 	bl	801201c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	699a      	ldr	r2, [r3, #24]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	699a      	ldr	r2, [r3, #24]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6999      	ldr	r1, [r3, #24]
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	691b      	ldr	r3, [r3, #16]
 8011aae:	021a      	lsls	r2, r3, #8
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	430a      	orrs	r2, r1
 8011ab6:	619a      	str	r2, [r3, #24]
      break;
 8011ab8:	e084      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	68b9      	ldr	r1, [r7, #8]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f000 fb35 	bl	8012130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	69da      	ldr	r2, [r3, #28]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f042 0208 	orr.w	r2, r2, #8
 8011ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	69da      	ldr	r2, [r3, #28]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	f022 0204 	bic.w	r2, r2, #4
 8011ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	69d9      	ldr	r1, [r3, #28]
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	691a      	ldr	r2, [r3, #16]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	430a      	orrs	r2, r1
 8011af6:	61da      	str	r2, [r3, #28]
      break;
 8011af8:	e064      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68b9      	ldr	r1, [r7, #8]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f000 fb9d 	bl	8012240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	69da      	ldr	r2, [r3, #28]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	69da      	ldr	r2, [r3, #28]
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	69d9      	ldr	r1, [r3, #28]
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	691b      	ldr	r3, [r3, #16]
 8011b30:	021a      	lsls	r2, r3, #8
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	430a      	orrs	r2, r1
 8011b38:	61da      	str	r2, [r3, #28]
      break;
 8011b3a:	e043      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	68b9      	ldr	r1, [r7, #8]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 fbe6 	bl	8012314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f042 0208 	orr.w	r2, r2, #8
 8011b56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f022 0204 	bic.w	r2, r2, #4
 8011b66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	691a      	ldr	r2, [r3, #16]
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	430a      	orrs	r2, r1
 8011b78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011b7a:	e023      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	68b9      	ldr	r1, [r7, #8]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f000 fc2a 	bl	80123dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	691b      	ldr	r3, [r3, #16]
 8011bb2:	021a      	lsls	r2, r3, #8
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	430a      	orrs	r2, r1
 8011bba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011bbc:	e002      	b.n	8011bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8011bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3718      	adds	r7, #24
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop

08011bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d101      	bne.n	8011bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	e0dc      	b.n	8011dae <HAL_TIM_ConfigClockSource+0x1d6>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2202      	movs	r2, #2
 8011c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	689b      	ldr	r3, [r3, #8]
 8011c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	4b6a      	ldr	r3, [pc, #424]	; (8011db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011c10:	4013      	ands	r3, r2
 8011c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	68ba      	ldr	r2, [r7, #8]
 8011c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4a64      	ldr	r2, [pc, #400]	; (8011dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	f000 80a9 	beq.w	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011c30:	4a62      	ldr	r2, [pc, #392]	; (8011dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	f200 80ae 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c38:	4a61      	ldr	r2, [pc, #388]	; (8011dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	f000 80a1 	beq.w	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011c40:	4a5f      	ldr	r2, [pc, #380]	; (8011dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	f200 80a6 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c48:	4a5e      	ldr	r2, [pc, #376]	; (8011dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	f000 8099 	beq.w	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011c50:	4a5c      	ldr	r2, [pc, #368]	; (8011dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	f200 809e 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011c5c:	f000 8091 	beq.w	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011c60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011c64:	f200 8096 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c6c:	f000 8089 	beq.w	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c74:	f200 808e 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c7c:	d03e      	beq.n	8011cfc <HAL_TIM_ConfigClockSource+0x124>
 8011c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c82:	f200 8087 	bhi.w	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c8a:	f000 8086 	beq.w	8011d9a <HAL_TIM_ConfigClockSource+0x1c2>
 8011c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c92:	d87f      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c94:	2b70      	cmp	r3, #112	; 0x70
 8011c96:	d01a      	beq.n	8011cce <HAL_TIM_ConfigClockSource+0xf6>
 8011c98:	2b70      	cmp	r3, #112	; 0x70
 8011c9a:	d87b      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011c9c:	2b60      	cmp	r3, #96	; 0x60
 8011c9e:	d050      	beq.n	8011d42 <HAL_TIM_ConfigClockSource+0x16a>
 8011ca0:	2b60      	cmp	r3, #96	; 0x60
 8011ca2:	d877      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011ca4:	2b50      	cmp	r3, #80	; 0x50
 8011ca6:	d03c      	beq.n	8011d22 <HAL_TIM_ConfigClockSource+0x14a>
 8011ca8:	2b50      	cmp	r3, #80	; 0x50
 8011caa:	d873      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011cac:	2b40      	cmp	r3, #64	; 0x40
 8011cae:	d058      	beq.n	8011d62 <HAL_TIM_ConfigClockSource+0x18a>
 8011cb0:	2b40      	cmp	r3, #64	; 0x40
 8011cb2:	d86f      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011cb4:	2b30      	cmp	r3, #48	; 0x30
 8011cb6:	d064      	beq.n	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011cb8:	2b30      	cmp	r3, #48	; 0x30
 8011cba:	d86b      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011cbc:	2b20      	cmp	r3, #32
 8011cbe:	d060      	beq.n	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011cc0:	2b20      	cmp	r3, #32
 8011cc2:	d867      	bhi.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d05c      	beq.n	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011cc8:	2b10      	cmp	r3, #16
 8011cca:	d05a      	beq.n	8011d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8011ccc:	e062      	b.n	8011d94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011cde:	f000 fc61 	bl	80125a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	68ba      	ldr	r2, [r7, #8]
 8011cf8:	609a      	str	r2, [r3, #8]
      break;
 8011cfa:	e04f      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011d0c:	f000 fc4a 	bl	80125a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	689a      	ldr	r2, [r3, #8]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011d1e:	609a      	str	r2, [r3, #8]
      break;
 8011d20:	e03c      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d2e:	461a      	mov	r2, r3
 8011d30:	f000 fbba 	bl	80124a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2150      	movs	r1, #80	; 0x50
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 fc14 	bl	8012568 <TIM_ITRx_SetConfig>
      break;
 8011d40:	e02c      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011d4e:	461a      	mov	r2, r3
 8011d50:	f000 fbd9 	bl	8012506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2160      	movs	r1, #96	; 0x60
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f000 fc04 	bl	8012568 <TIM_ITRx_SetConfig>
      break;
 8011d60:	e01c      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011d6e:	461a      	mov	r2, r3
 8011d70:	f000 fb9a 	bl	80124a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2140      	movs	r1, #64	; 0x40
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f000 fbf4 	bl	8012568 <TIM_ITRx_SetConfig>
      break;
 8011d80:	e00c      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	f000 fbeb 	bl	8012568 <TIM_ITRx_SetConfig>
      break;
 8011d92:	e003      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011d94:	2301      	movs	r3, #1
 8011d96:	73fb      	strb	r3, [r7, #15]
      break;
 8011d98:	e000      	b.n	8011d9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	ffceff88 	.word	0xffceff88
 8011dbc:	00100040 	.word	0x00100040
 8011dc0:	00100030 	.word	0x00100030
 8011dc4:	00100020 	.word	0x00100020

08011dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b085      	sub	sp, #20
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4a40      	ldr	r2, [pc, #256]	; (8011edc <TIM_Base_SetConfig+0x114>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d013      	beq.n	8011e08 <TIM_Base_SetConfig+0x40>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011de6:	d00f      	beq.n	8011e08 <TIM_Base_SetConfig+0x40>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	4a3d      	ldr	r2, [pc, #244]	; (8011ee0 <TIM_Base_SetConfig+0x118>)
 8011dec:	4293      	cmp	r3, r2
 8011dee:	d00b      	beq.n	8011e08 <TIM_Base_SetConfig+0x40>
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	4a3c      	ldr	r2, [pc, #240]	; (8011ee4 <TIM_Base_SetConfig+0x11c>)
 8011df4:	4293      	cmp	r3, r2
 8011df6:	d007      	beq.n	8011e08 <TIM_Base_SetConfig+0x40>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	4a3b      	ldr	r2, [pc, #236]	; (8011ee8 <TIM_Base_SetConfig+0x120>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d003      	beq.n	8011e08 <TIM_Base_SetConfig+0x40>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	4a3a      	ldr	r2, [pc, #232]	; (8011eec <TIM_Base_SetConfig+0x124>)
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d108      	bne.n	8011e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	68fa      	ldr	r2, [r7, #12]
 8011e16:	4313      	orrs	r3, r2
 8011e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4a2f      	ldr	r2, [pc, #188]	; (8011edc <TIM_Base_SetConfig+0x114>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d01f      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e28:	d01b      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a2c      	ldr	r2, [pc, #176]	; (8011ee0 <TIM_Base_SetConfig+0x118>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d017      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4a2b      	ldr	r2, [pc, #172]	; (8011ee4 <TIM_Base_SetConfig+0x11c>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d013      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a2a      	ldr	r2, [pc, #168]	; (8011ee8 <TIM_Base_SetConfig+0x120>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d00f      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4a29      	ldr	r2, [pc, #164]	; (8011eec <TIM_Base_SetConfig+0x124>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d00b      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a28      	ldr	r2, [pc, #160]	; (8011ef0 <TIM_Base_SetConfig+0x128>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d007      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4a27      	ldr	r2, [pc, #156]	; (8011ef4 <TIM_Base_SetConfig+0x12c>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d003      	beq.n	8011e62 <TIM_Base_SetConfig+0x9a>
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4a26      	ldr	r2, [pc, #152]	; (8011ef8 <TIM_Base_SetConfig+0x130>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d108      	bne.n	8011e74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	4313      	orrs	r3, r2
 8011e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	695b      	ldr	r3, [r3, #20]
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	689a      	ldr	r2, [r3, #8]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	4a10      	ldr	r2, [pc, #64]	; (8011edc <TIM_Base_SetConfig+0x114>)
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	d00f      	beq.n	8011ec0 <TIM_Base_SetConfig+0xf8>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4a12      	ldr	r2, [pc, #72]	; (8011eec <TIM_Base_SetConfig+0x124>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d00b      	beq.n	8011ec0 <TIM_Base_SetConfig+0xf8>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	4a11      	ldr	r2, [pc, #68]	; (8011ef0 <TIM_Base_SetConfig+0x128>)
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d007      	beq.n	8011ec0 <TIM_Base_SetConfig+0xf8>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	4a10      	ldr	r2, [pc, #64]	; (8011ef4 <TIM_Base_SetConfig+0x12c>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d003      	beq.n	8011ec0 <TIM_Base_SetConfig+0xf8>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	4a0f      	ldr	r2, [pc, #60]	; (8011ef8 <TIM_Base_SetConfig+0x130>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d103      	bne.n	8011ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	691a      	ldr	r2, [r3, #16]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	615a      	str	r2, [r3, #20]
}
 8011ece:	bf00      	nop
 8011ed0:	3714      	adds	r7, #20
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	40010000 	.word	0x40010000
 8011ee0:	40000400 	.word	0x40000400
 8011ee4:	40000800 	.word	0x40000800
 8011ee8:	40000c00 	.word	0x40000c00
 8011eec:	40010400 	.word	0x40010400
 8011ef0:	40014000 	.word	0x40014000
 8011ef4:	40014400 	.word	0x40014400
 8011ef8:	40014800 	.word	0x40014800

08011efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b087      	sub	sp, #28
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a1b      	ldr	r3, [r3, #32]
 8011f0a:	f023 0201 	bic.w	r2, r3, #1
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6a1b      	ldr	r3, [r3, #32]
 8011f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	699b      	ldr	r3, [r3, #24]
 8011f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011f24:	68fa      	ldr	r2, [r7, #12]
 8011f26:	4b37      	ldr	r3, [pc, #220]	; (8012004 <TIM_OC1_SetConfig+0x108>)
 8011f28:	4013      	ands	r3, r2
 8011f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f023 0303 	bic.w	r3, r3, #3
 8011f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	f023 0302 	bic.w	r3, r3, #2
 8011f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	697a      	ldr	r2, [r7, #20]
 8011f4c:	4313      	orrs	r3, r2
 8011f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	4a2d      	ldr	r2, [pc, #180]	; (8012008 <TIM_OC1_SetConfig+0x10c>)
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d00f      	beq.n	8011f78 <TIM_OC1_SetConfig+0x7c>
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4a2c      	ldr	r2, [pc, #176]	; (801200c <TIM_OC1_SetConfig+0x110>)
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d00b      	beq.n	8011f78 <TIM_OC1_SetConfig+0x7c>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	4a2b      	ldr	r2, [pc, #172]	; (8012010 <TIM_OC1_SetConfig+0x114>)
 8011f64:	4293      	cmp	r3, r2
 8011f66:	d007      	beq.n	8011f78 <TIM_OC1_SetConfig+0x7c>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	4a2a      	ldr	r2, [pc, #168]	; (8012014 <TIM_OC1_SetConfig+0x118>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d003      	beq.n	8011f78 <TIM_OC1_SetConfig+0x7c>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	4a29      	ldr	r2, [pc, #164]	; (8012018 <TIM_OC1_SetConfig+0x11c>)
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d10c      	bne.n	8011f92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	f023 0308 	bic.w	r3, r3, #8
 8011f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	697a      	ldr	r2, [r7, #20]
 8011f86:	4313      	orrs	r3, r2
 8011f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	f023 0304 	bic.w	r3, r3, #4
 8011f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4a1c      	ldr	r2, [pc, #112]	; (8012008 <TIM_OC1_SetConfig+0x10c>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d00f      	beq.n	8011fba <TIM_OC1_SetConfig+0xbe>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4a1b      	ldr	r2, [pc, #108]	; (801200c <TIM_OC1_SetConfig+0x110>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d00b      	beq.n	8011fba <TIM_OC1_SetConfig+0xbe>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4a1a      	ldr	r2, [pc, #104]	; (8012010 <TIM_OC1_SetConfig+0x114>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d007      	beq.n	8011fba <TIM_OC1_SetConfig+0xbe>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4a19      	ldr	r2, [pc, #100]	; (8012014 <TIM_OC1_SetConfig+0x118>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d003      	beq.n	8011fba <TIM_OC1_SetConfig+0xbe>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	4a18      	ldr	r2, [pc, #96]	; (8012018 <TIM_OC1_SetConfig+0x11c>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d111      	bne.n	8011fde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	695b      	ldr	r3, [r3, #20]
 8011fce:	693a      	ldr	r2, [r7, #16]
 8011fd0:	4313      	orrs	r3, r2
 8011fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	693a      	ldr	r2, [r7, #16]
 8011fda:	4313      	orrs	r3, r2
 8011fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	693a      	ldr	r2, [r7, #16]
 8011fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	685a      	ldr	r2, [r3, #4]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	697a      	ldr	r2, [r7, #20]
 8011ff6:	621a      	str	r2, [r3, #32]
}
 8011ff8:	bf00      	nop
 8011ffa:	371c      	adds	r7, #28
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	fffeff8f 	.word	0xfffeff8f
 8012008:	40010000 	.word	0x40010000
 801200c:	40010400 	.word	0x40010400
 8012010:	40014000 	.word	0x40014000
 8012014:	40014400 	.word	0x40014400
 8012018:	40014800 	.word	0x40014800

0801201c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801201c:	b480      	push	{r7}
 801201e:	b087      	sub	sp, #28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6a1b      	ldr	r3, [r3, #32]
 801202a:	f023 0210 	bic.w	r2, r3, #16
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a1b      	ldr	r3, [r3, #32]
 8012036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	699b      	ldr	r3, [r3, #24]
 8012042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	4b34      	ldr	r3, [pc, #208]	; (8012118 <TIM_OC2_SetConfig+0xfc>)
 8012048:	4013      	ands	r3, r2
 801204a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	021b      	lsls	r3, r3, #8
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	4313      	orrs	r3, r2
 801205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	f023 0320 	bic.w	r3, r3, #32
 8012066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	011b      	lsls	r3, r3, #4
 801206e:	697a      	ldr	r2, [r7, #20]
 8012070:	4313      	orrs	r3, r2
 8012072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4a29      	ldr	r2, [pc, #164]	; (801211c <TIM_OC2_SetConfig+0x100>)
 8012078:	4293      	cmp	r3, r2
 801207a:	d003      	beq.n	8012084 <TIM_OC2_SetConfig+0x68>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	4a28      	ldr	r2, [pc, #160]	; (8012120 <TIM_OC2_SetConfig+0x104>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d10d      	bne.n	80120a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801208a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	011b      	lsls	r3, r3, #4
 8012092:	697a      	ldr	r2, [r7, #20]
 8012094:	4313      	orrs	r3, r2
 8012096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801209e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4a1e      	ldr	r2, [pc, #120]	; (801211c <TIM_OC2_SetConfig+0x100>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d00f      	beq.n	80120c8 <TIM_OC2_SetConfig+0xac>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	4a1d      	ldr	r2, [pc, #116]	; (8012120 <TIM_OC2_SetConfig+0x104>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d00b      	beq.n	80120c8 <TIM_OC2_SetConfig+0xac>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	4a1c      	ldr	r2, [pc, #112]	; (8012124 <TIM_OC2_SetConfig+0x108>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d007      	beq.n	80120c8 <TIM_OC2_SetConfig+0xac>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4a1b      	ldr	r2, [pc, #108]	; (8012128 <TIM_OC2_SetConfig+0x10c>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d003      	beq.n	80120c8 <TIM_OC2_SetConfig+0xac>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	4a1a      	ldr	r2, [pc, #104]	; (801212c <TIM_OC2_SetConfig+0x110>)
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d113      	bne.n	80120f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80120ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	695b      	ldr	r3, [r3, #20]
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	693a      	ldr	r2, [r7, #16]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	693a      	ldr	r2, [r7, #16]
 80120ec:	4313      	orrs	r3, r2
 80120ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	693a      	ldr	r2, [r7, #16]
 80120f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	68fa      	ldr	r2, [r7, #12]
 80120fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	685a      	ldr	r2, [r3, #4]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	697a      	ldr	r2, [r7, #20]
 8012108:	621a      	str	r2, [r3, #32]
}
 801210a:	bf00      	nop
 801210c:	371c      	adds	r7, #28
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop
 8012118:	feff8fff 	.word	0xfeff8fff
 801211c:	40010000 	.word	0x40010000
 8012120:	40010400 	.word	0x40010400
 8012124:	40014000 	.word	0x40014000
 8012128:	40014400 	.word	0x40014400
 801212c:	40014800 	.word	0x40014800

08012130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012130:	b480      	push	{r7}
 8012132:	b087      	sub	sp, #28
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6a1b      	ldr	r3, [r3, #32]
 801213e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a1b      	ldr	r3, [r3, #32]
 801214a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	69db      	ldr	r3, [r3, #28]
 8012156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	4b33      	ldr	r3, [pc, #204]	; (8012228 <TIM_OC3_SetConfig+0xf8>)
 801215c:	4013      	ands	r3, r2
 801215e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f023 0303 	bic.w	r3, r3, #3
 8012166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	4313      	orrs	r3, r2
 8012170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	021b      	lsls	r3, r3, #8
 8012180:	697a      	ldr	r2, [r7, #20]
 8012182:	4313      	orrs	r3, r2
 8012184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a28      	ldr	r2, [pc, #160]	; (801222c <TIM_OC3_SetConfig+0xfc>)
 801218a:	4293      	cmp	r3, r2
 801218c:	d003      	beq.n	8012196 <TIM_OC3_SetConfig+0x66>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a27      	ldr	r2, [pc, #156]	; (8012230 <TIM_OC3_SetConfig+0x100>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d10d      	bne.n	80121b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801219c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	021b      	lsls	r3, r3, #8
 80121a4:	697a      	ldr	r2, [r7, #20]
 80121a6:	4313      	orrs	r3, r2
 80121a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80121b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4a1d      	ldr	r2, [pc, #116]	; (801222c <TIM_OC3_SetConfig+0xfc>)
 80121b6:	4293      	cmp	r3, r2
 80121b8:	d00f      	beq.n	80121da <TIM_OC3_SetConfig+0xaa>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4a1c      	ldr	r2, [pc, #112]	; (8012230 <TIM_OC3_SetConfig+0x100>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d00b      	beq.n	80121da <TIM_OC3_SetConfig+0xaa>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4a1b      	ldr	r2, [pc, #108]	; (8012234 <TIM_OC3_SetConfig+0x104>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d007      	beq.n	80121da <TIM_OC3_SetConfig+0xaa>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4a1a      	ldr	r2, [pc, #104]	; (8012238 <TIM_OC3_SetConfig+0x108>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d003      	beq.n	80121da <TIM_OC3_SetConfig+0xaa>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4a19      	ldr	r2, [pc, #100]	; (801223c <TIM_OC3_SetConfig+0x10c>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d113      	bne.n	8012202 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80121e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80121e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	695b      	ldr	r3, [r3, #20]
 80121ee:	011b      	lsls	r3, r3, #4
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	4313      	orrs	r3, r2
 80121f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	699b      	ldr	r3, [r3, #24]
 80121fa:	011b      	lsls	r3, r3, #4
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	4313      	orrs	r3, r2
 8012200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	693a      	ldr	r2, [r7, #16]
 8012206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	685a      	ldr	r2, [r3, #4]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	621a      	str	r2, [r3, #32]
}
 801221c:	bf00      	nop
 801221e:	371c      	adds	r7, #28
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	fffeff8f 	.word	0xfffeff8f
 801222c:	40010000 	.word	0x40010000
 8012230:	40010400 	.word	0x40010400
 8012234:	40014000 	.word	0x40014000
 8012238:	40014400 	.word	0x40014400
 801223c:	40014800 	.word	0x40014800

08012240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012240:	b480      	push	{r7}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6a1b      	ldr	r3, [r3, #32]
 801224e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a1b      	ldr	r3, [r3, #32]
 801225a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	69db      	ldr	r3, [r3, #28]
 8012266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012268:	68fa      	ldr	r2, [r7, #12]
 801226a:	4b24      	ldr	r3, [pc, #144]	; (80122fc <TIM_OC4_SetConfig+0xbc>)
 801226c:	4013      	ands	r3, r2
 801226e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	021b      	lsls	r3, r3, #8
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	4313      	orrs	r3, r2
 8012282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801228a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	031b      	lsls	r3, r3, #12
 8012292:	693a      	ldr	r2, [r7, #16]
 8012294:	4313      	orrs	r3, r2
 8012296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4a19      	ldr	r2, [pc, #100]	; (8012300 <TIM_OC4_SetConfig+0xc0>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d00f      	beq.n	80122c0 <TIM_OC4_SetConfig+0x80>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	4a18      	ldr	r2, [pc, #96]	; (8012304 <TIM_OC4_SetConfig+0xc4>)
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d00b      	beq.n	80122c0 <TIM_OC4_SetConfig+0x80>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	4a17      	ldr	r2, [pc, #92]	; (8012308 <TIM_OC4_SetConfig+0xc8>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d007      	beq.n	80122c0 <TIM_OC4_SetConfig+0x80>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4a16      	ldr	r2, [pc, #88]	; (801230c <TIM_OC4_SetConfig+0xcc>)
 80122b4:	4293      	cmp	r3, r2
 80122b6:	d003      	beq.n	80122c0 <TIM_OC4_SetConfig+0x80>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	4a15      	ldr	r2, [pc, #84]	; (8012310 <TIM_OC4_SetConfig+0xd0>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d109      	bne.n	80122d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80122c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	695b      	ldr	r3, [r3, #20]
 80122cc:	019b      	lsls	r3, r3, #6
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	4313      	orrs	r3, r2
 80122d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	685a      	ldr	r2, [r3, #4]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	693a      	ldr	r2, [r7, #16]
 80122ec:	621a      	str	r2, [r3, #32]
}
 80122ee:	bf00      	nop
 80122f0:	371c      	adds	r7, #28
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	feff8fff 	.word	0xfeff8fff
 8012300:	40010000 	.word	0x40010000
 8012304:	40010400 	.word	0x40010400
 8012308:	40014000 	.word	0x40014000
 801230c:	40014400 	.word	0x40014400
 8012310:	40014800 	.word	0x40014800

08012314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012314:	b480      	push	{r7}
 8012316:	b087      	sub	sp, #28
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a1b      	ldr	r3, [r3, #32]
 8012322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6a1b      	ldr	r3, [r3, #32]
 801232e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801233a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	4b21      	ldr	r3, [pc, #132]	; (80123c4 <TIM_OC5_SetConfig+0xb0>)
 8012340:	4013      	ands	r3, r2
 8012342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	4313      	orrs	r3, r2
 801234c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	041b      	lsls	r3, r3, #16
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	4313      	orrs	r3, r2
 8012360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4a18      	ldr	r2, [pc, #96]	; (80123c8 <TIM_OC5_SetConfig+0xb4>)
 8012366:	4293      	cmp	r3, r2
 8012368:	d00f      	beq.n	801238a <TIM_OC5_SetConfig+0x76>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	4a17      	ldr	r2, [pc, #92]	; (80123cc <TIM_OC5_SetConfig+0xb8>)
 801236e:	4293      	cmp	r3, r2
 8012370:	d00b      	beq.n	801238a <TIM_OC5_SetConfig+0x76>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4a16      	ldr	r2, [pc, #88]	; (80123d0 <TIM_OC5_SetConfig+0xbc>)
 8012376:	4293      	cmp	r3, r2
 8012378:	d007      	beq.n	801238a <TIM_OC5_SetConfig+0x76>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	4a15      	ldr	r2, [pc, #84]	; (80123d4 <TIM_OC5_SetConfig+0xc0>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d003      	beq.n	801238a <TIM_OC5_SetConfig+0x76>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	4a14      	ldr	r2, [pc, #80]	; (80123d8 <TIM_OC5_SetConfig+0xc4>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d109      	bne.n	801239e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	695b      	ldr	r3, [r3, #20]
 8012396:	021b      	lsls	r3, r3, #8
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	4313      	orrs	r3, r2
 801239c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	697a      	ldr	r2, [r7, #20]
 80123a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	685a      	ldr	r2, [r3, #4]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	693a      	ldr	r2, [r7, #16]
 80123b6:	621a      	str	r2, [r3, #32]
}
 80123b8:	bf00      	nop
 80123ba:	371c      	adds	r7, #28
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr
 80123c4:	fffeff8f 	.word	0xfffeff8f
 80123c8:	40010000 	.word	0x40010000
 80123cc:	40010400 	.word	0x40010400
 80123d0:	40014000 	.word	0x40014000
 80123d4:	40014400 	.word	0x40014400
 80123d8:	40014800 	.word	0x40014800

080123dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80123dc:	b480      	push	{r7}
 80123de:	b087      	sub	sp, #28
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6a1b      	ldr	r3, [r3, #32]
 80123ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	4b22      	ldr	r3, [pc, #136]	; (8012490 <TIM_OC6_SetConfig+0xb4>)
 8012408:	4013      	ands	r3, r2
 801240a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	021b      	lsls	r3, r3, #8
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	4313      	orrs	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801241e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	051b      	lsls	r3, r3, #20
 8012426:	693a      	ldr	r2, [r7, #16]
 8012428:	4313      	orrs	r3, r2
 801242a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	4a19      	ldr	r2, [pc, #100]	; (8012494 <TIM_OC6_SetConfig+0xb8>)
 8012430:	4293      	cmp	r3, r2
 8012432:	d00f      	beq.n	8012454 <TIM_OC6_SetConfig+0x78>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4a18      	ldr	r2, [pc, #96]	; (8012498 <TIM_OC6_SetConfig+0xbc>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d00b      	beq.n	8012454 <TIM_OC6_SetConfig+0x78>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a17      	ldr	r2, [pc, #92]	; (801249c <TIM_OC6_SetConfig+0xc0>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d007      	beq.n	8012454 <TIM_OC6_SetConfig+0x78>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4a16      	ldr	r2, [pc, #88]	; (80124a0 <TIM_OC6_SetConfig+0xc4>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d003      	beq.n	8012454 <TIM_OC6_SetConfig+0x78>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a15      	ldr	r2, [pc, #84]	; (80124a4 <TIM_OC6_SetConfig+0xc8>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d109      	bne.n	8012468 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801245a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	695b      	ldr	r3, [r3, #20]
 8012460:	029b      	lsls	r3, r3, #10
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	4313      	orrs	r3, r2
 8012466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	697a      	ldr	r2, [r7, #20]
 801246c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	685a      	ldr	r2, [r3, #4]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	693a      	ldr	r2, [r7, #16]
 8012480:	621a      	str	r2, [r3, #32]
}
 8012482:	bf00      	nop
 8012484:	371c      	adds	r7, #28
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	feff8fff 	.word	0xfeff8fff
 8012494:	40010000 	.word	0x40010000
 8012498:	40010400 	.word	0x40010400
 801249c:	40014000 	.word	0x40014000
 80124a0:	40014400 	.word	0x40014400
 80124a4:	40014800 	.word	0x40014800

080124a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	6a1b      	ldr	r3, [r3, #32]
 80124b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	f023 0201 	bic.w	r2, r3, #1
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	699b      	ldr	r3, [r3, #24]
 80124ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80124d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	011b      	lsls	r3, r3, #4
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	4313      	orrs	r3, r2
 80124dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	f023 030a 	bic.w	r3, r3, #10
 80124e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80124e6:	697a      	ldr	r2, [r7, #20]
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	4313      	orrs	r3, r2
 80124ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	693a      	ldr	r2, [r7, #16]
 80124f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	697a      	ldr	r2, [r7, #20]
 80124f8:	621a      	str	r2, [r3, #32]
}
 80124fa:	bf00      	nop
 80124fc:	371c      	adds	r7, #28
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012506:	b480      	push	{r7}
 8012508:	b087      	sub	sp, #28
 801250a:	af00      	add	r7, sp, #0
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	6a1b      	ldr	r3, [r3, #32]
 8012516:	f023 0210 	bic.w	r2, r3, #16
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	699b      	ldr	r3, [r3, #24]
 8012522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6a1b      	ldr	r3, [r3, #32]
 8012528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	031b      	lsls	r3, r3, #12
 8012536:	697a      	ldr	r2, [r7, #20]
 8012538:	4313      	orrs	r3, r2
 801253a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	011b      	lsls	r3, r3, #4
 8012548:	693a      	ldr	r2, [r7, #16]
 801254a:	4313      	orrs	r3, r2
 801254c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	693a      	ldr	r2, [r7, #16]
 8012558:	621a      	str	r2, [r3, #32]
}
 801255a:	bf00      	nop
 801255c:	371c      	adds	r7, #28
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
	...

08012568 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	689b      	ldr	r3, [r3, #8]
 8012576:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	4b09      	ldr	r3, [pc, #36]	; (80125a0 <TIM_ITRx_SetConfig+0x38>)
 801257c:	4013      	ands	r3, r2
 801257e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012580:	683a      	ldr	r2, [r7, #0]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	4313      	orrs	r3, r2
 8012586:	f043 0307 	orr.w	r3, r3, #7
 801258a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	609a      	str	r2, [r3, #8]
}
 8012592:	bf00      	nop
 8012594:	3714      	adds	r7, #20
 8012596:	46bd      	mov	sp, r7
 8012598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop
 80125a0:	ffcfff8f 	.word	0xffcfff8f

080125a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b087      	sub	sp, #28
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
 80125b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80125be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	021a      	lsls	r2, r3, #8
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	431a      	orrs	r2, r3
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	4313      	orrs	r3, r2
 80125cc:	697a      	ldr	r2, [r7, #20]
 80125ce:	4313      	orrs	r3, r2
 80125d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	697a      	ldr	r2, [r7, #20]
 80125d6:	609a      	str	r2, [r3, #8]
}
 80125d8:	bf00      	nop
 80125da:	371c      	adds	r7, #28
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d101      	bne.n	80125fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80125f8:	2302      	movs	r3, #2
 80125fa:	e06d      	b.n	80126d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2201      	movs	r2, #1
 8012600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2202      	movs	r2, #2
 8012608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a30      	ldr	r2, [pc, #192]	; (80126e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d004      	beq.n	8012630 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a2f      	ldr	r2, [pc, #188]	; (80126e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d108      	bne.n	8012642 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012636:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	4313      	orrs	r3, r2
 8012640:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012648:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	68fa      	ldr	r2, [r7, #12]
 8012650:	4313      	orrs	r3, r2
 8012652:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a20      	ldr	r2, [pc, #128]	; (80126e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d022      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801266e:	d01d      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a1d      	ldr	r2, [pc, #116]	; (80126ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d018      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a1c      	ldr	r2, [pc, #112]	; (80126f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d013      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a1a      	ldr	r2, [pc, #104]	; (80126f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d00e      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a15      	ldr	r2, [pc, #84]	; (80126e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d009      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4a16      	ldr	r2, [pc, #88]	; (80126f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d004      	beq.n	80126ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a15      	ldr	r2, [pc, #84]	; (80126fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d10c      	bne.n	80126c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	68ba      	ldr	r2, [r7, #8]
 80126ba:	4313      	orrs	r3, r2
 80126bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2200      	movs	r2, #0
 80126d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80126d6:	2300      	movs	r3, #0
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3714      	adds	r7, #20
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr
 80126e4:	40010000 	.word	0x40010000
 80126e8:	40010400 	.word	0x40010400
 80126ec:	40000400 	.word	0x40000400
 80126f0:	40000800 	.word	0x40000800
 80126f4:	40000c00 	.word	0x40000c00
 80126f8:	40001800 	.word	0x40001800
 80126fc:	40014000 	.word	0x40014000

08012700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012700:	b480      	push	{r7}
 8012702:	b085      	sub	sp, #20
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801270a:	2300      	movs	r3, #0
 801270c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012714:	2b01      	cmp	r3, #1
 8012716:	d101      	bne.n	801271c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012718:	2302      	movs	r3, #2
 801271a:	e065      	b.n	80127e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2201      	movs	r2, #1
 8012720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	4313      	orrs	r3, r2
 8012730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	4313      	orrs	r3, r2
 801273e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4313      	orrs	r3, r2
 801274c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4313      	orrs	r3, r2
 801275a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	691b      	ldr	r3, [r3, #16]
 8012766:	4313      	orrs	r3, r2
 8012768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	695b      	ldr	r3, [r3, #20]
 8012774:	4313      	orrs	r3, r2
 8012776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012782:	4313      	orrs	r3, r2
 8012784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	699b      	ldr	r3, [r3, #24]
 8012790:	041b      	lsls	r3, r3, #16
 8012792:	4313      	orrs	r3, r2
 8012794:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a16      	ldr	r2, [pc, #88]	; (80127f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d004      	beq.n	80127aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a14      	ldr	r2, [pc, #80]	; (80127f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d115      	bne.n	80127d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b4:	051b      	lsls	r3, r3, #20
 80127b6:	4313      	orrs	r3, r2
 80127b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	69db      	ldr	r3, [r3, #28]
 80127c4:	4313      	orrs	r3, r2
 80127c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	4313      	orrs	r3, r2
 80127d4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr
 80127f4:	40010000 	.word	0x40010000
 80127f8:	40010400 	.word	0x40010400

080127fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d101      	bne.n	801280e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801280a:	2301      	movs	r3, #1
 801280c:	e042      	b.n	8012894 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012814:	2b00      	cmp	r3, #0
 8012816:	d106      	bne.n	8012826 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f7f1 fb93 	bl	8003f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2224      	movs	r2, #36	; 0x24
 801282a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f022 0201 	bic.w	r2, r2, #1
 801283c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 f82c 	bl	801289c <UART_SetConfig>
 8012844:	4603      	mov	r3, r0
 8012846:	2b01      	cmp	r3, #1
 8012848:	d101      	bne.n	801284e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801284a:	2301      	movs	r3, #1
 801284c:	e022      	b.n	8012894 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012852:	2b00      	cmp	r3, #0
 8012854:	d002      	beq.n	801285c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 fd88 	bl	801336c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	685a      	ldr	r2, [r3, #4]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801286a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	689a      	ldr	r2, [r3, #8]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801287a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f042 0201 	orr.w	r2, r2, #1
 801288a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f000 fe0f 	bl	80134b0 <UART_CheckIdleState>
 8012892:	4603      	mov	r3, r0
}
 8012894:	4618      	mov	r0, r3
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801289c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80128a0:	b092      	sub	sp, #72	; 0x48
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	689a      	ldr	r2, [r3, #8]
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	691b      	ldr	r3, [r3, #16]
 80128b4:	431a      	orrs	r2, r3
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	431a      	orrs	r2, r3
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	69db      	ldr	r3, [r3, #28]
 80128c0:	4313      	orrs	r3, r2
 80128c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	4bbe      	ldr	r3, [pc, #760]	; (8012bc4 <UART_SetConfig+0x328>)
 80128cc:	4013      	ands	r3, r2
 80128ce:	697a      	ldr	r2, [r7, #20]
 80128d0:	6812      	ldr	r2, [r2, #0]
 80128d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80128d4:	430b      	orrs	r3, r1
 80128d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	68da      	ldr	r2, [r3, #12]
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	430a      	orrs	r2, r1
 80128ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	699b      	ldr	r3, [r3, #24]
 80128f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4ab3      	ldr	r2, [pc, #716]	; (8012bc8 <UART_SetConfig+0x32c>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d004      	beq.n	8012908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	6a1b      	ldr	r3, [r3, #32]
 8012902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012904:	4313      	orrs	r3, r2
 8012906:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	689a      	ldr	r2, [r3, #8]
 801290e:	4baf      	ldr	r3, [pc, #700]	; (8012bcc <UART_SetConfig+0x330>)
 8012910:	4013      	ands	r3, r2
 8012912:	697a      	ldr	r2, [r7, #20]
 8012914:	6812      	ldr	r2, [r2, #0]
 8012916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012918:	430b      	orrs	r3, r1
 801291a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012922:	f023 010f 	bic.w	r1, r3, #15
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	430a      	orrs	r2, r1
 8012930:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4aa6      	ldr	r2, [pc, #664]	; (8012bd0 <UART_SetConfig+0x334>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d177      	bne.n	8012a2c <UART_SetConfig+0x190>
 801293c:	4ba5      	ldr	r3, [pc, #660]	; (8012bd4 <UART_SetConfig+0x338>)
 801293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012944:	2b28      	cmp	r3, #40	; 0x28
 8012946:	d86d      	bhi.n	8012a24 <UART_SetConfig+0x188>
 8012948:	a201      	add	r2, pc, #4	; (adr r2, 8012950 <UART_SetConfig+0xb4>)
 801294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801294e:	bf00      	nop
 8012950:	080129f5 	.word	0x080129f5
 8012954:	08012a25 	.word	0x08012a25
 8012958:	08012a25 	.word	0x08012a25
 801295c:	08012a25 	.word	0x08012a25
 8012960:	08012a25 	.word	0x08012a25
 8012964:	08012a25 	.word	0x08012a25
 8012968:	08012a25 	.word	0x08012a25
 801296c:	08012a25 	.word	0x08012a25
 8012970:	080129fd 	.word	0x080129fd
 8012974:	08012a25 	.word	0x08012a25
 8012978:	08012a25 	.word	0x08012a25
 801297c:	08012a25 	.word	0x08012a25
 8012980:	08012a25 	.word	0x08012a25
 8012984:	08012a25 	.word	0x08012a25
 8012988:	08012a25 	.word	0x08012a25
 801298c:	08012a25 	.word	0x08012a25
 8012990:	08012a05 	.word	0x08012a05
 8012994:	08012a25 	.word	0x08012a25
 8012998:	08012a25 	.word	0x08012a25
 801299c:	08012a25 	.word	0x08012a25
 80129a0:	08012a25 	.word	0x08012a25
 80129a4:	08012a25 	.word	0x08012a25
 80129a8:	08012a25 	.word	0x08012a25
 80129ac:	08012a25 	.word	0x08012a25
 80129b0:	08012a0d 	.word	0x08012a0d
 80129b4:	08012a25 	.word	0x08012a25
 80129b8:	08012a25 	.word	0x08012a25
 80129bc:	08012a25 	.word	0x08012a25
 80129c0:	08012a25 	.word	0x08012a25
 80129c4:	08012a25 	.word	0x08012a25
 80129c8:	08012a25 	.word	0x08012a25
 80129cc:	08012a25 	.word	0x08012a25
 80129d0:	08012a15 	.word	0x08012a15
 80129d4:	08012a25 	.word	0x08012a25
 80129d8:	08012a25 	.word	0x08012a25
 80129dc:	08012a25 	.word	0x08012a25
 80129e0:	08012a25 	.word	0x08012a25
 80129e4:	08012a25 	.word	0x08012a25
 80129e8:	08012a25 	.word	0x08012a25
 80129ec:	08012a25 	.word	0x08012a25
 80129f0:	08012a1d 	.word	0x08012a1d
 80129f4:	2301      	movs	r3, #1
 80129f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129fa:	e222      	b.n	8012e42 <UART_SetConfig+0x5a6>
 80129fc:	2304      	movs	r3, #4
 80129fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a02:	e21e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a04:	2308      	movs	r3, #8
 8012a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a0a:	e21a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a0c:	2310      	movs	r3, #16
 8012a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a12:	e216      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a14:	2320      	movs	r3, #32
 8012a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a1a:	e212      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a1c:	2340      	movs	r3, #64	; 0x40
 8012a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a22:	e20e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a24:	2380      	movs	r3, #128	; 0x80
 8012a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a2a:	e20a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a69      	ldr	r2, [pc, #420]	; (8012bd8 <UART_SetConfig+0x33c>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d130      	bne.n	8012a98 <UART_SetConfig+0x1fc>
 8012a36:	4b67      	ldr	r3, [pc, #412]	; (8012bd4 <UART_SetConfig+0x338>)
 8012a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a3a:	f003 0307 	and.w	r3, r3, #7
 8012a3e:	2b05      	cmp	r3, #5
 8012a40:	d826      	bhi.n	8012a90 <UART_SetConfig+0x1f4>
 8012a42:	a201      	add	r2, pc, #4	; (adr r2, 8012a48 <UART_SetConfig+0x1ac>)
 8012a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a48:	08012a61 	.word	0x08012a61
 8012a4c:	08012a69 	.word	0x08012a69
 8012a50:	08012a71 	.word	0x08012a71
 8012a54:	08012a79 	.word	0x08012a79
 8012a58:	08012a81 	.word	0x08012a81
 8012a5c:	08012a89 	.word	0x08012a89
 8012a60:	2300      	movs	r3, #0
 8012a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a66:	e1ec      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a68:	2304      	movs	r3, #4
 8012a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a6e:	e1e8      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a70:	2308      	movs	r3, #8
 8012a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a76:	e1e4      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a78:	2310      	movs	r3, #16
 8012a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a7e:	e1e0      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a80:	2320      	movs	r3, #32
 8012a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a86:	e1dc      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a88:	2340      	movs	r3, #64	; 0x40
 8012a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a8e:	e1d8      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a90:	2380      	movs	r3, #128	; 0x80
 8012a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a96:	e1d4      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4a4f      	ldr	r2, [pc, #316]	; (8012bdc <UART_SetConfig+0x340>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d130      	bne.n	8012b04 <UART_SetConfig+0x268>
 8012aa2:	4b4c      	ldr	r3, [pc, #304]	; (8012bd4 <UART_SetConfig+0x338>)
 8012aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012aa6:	f003 0307 	and.w	r3, r3, #7
 8012aaa:	2b05      	cmp	r3, #5
 8012aac:	d826      	bhi.n	8012afc <UART_SetConfig+0x260>
 8012aae:	a201      	add	r2, pc, #4	; (adr r2, 8012ab4 <UART_SetConfig+0x218>)
 8012ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab4:	08012acd 	.word	0x08012acd
 8012ab8:	08012ad5 	.word	0x08012ad5
 8012abc:	08012add 	.word	0x08012add
 8012ac0:	08012ae5 	.word	0x08012ae5
 8012ac4:	08012aed 	.word	0x08012aed
 8012ac8:	08012af5 	.word	0x08012af5
 8012acc:	2300      	movs	r3, #0
 8012ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ad2:	e1b6      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012ad4:	2304      	movs	r3, #4
 8012ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ada:	e1b2      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012adc:	2308      	movs	r3, #8
 8012ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ae2:	e1ae      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012ae4:	2310      	movs	r3, #16
 8012ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012aea:	e1aa      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012aec:	2320      	movs	r3, #32
 8012aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012af2:	e1a6      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012af4:	2340      	movs	r3, #64	; 0x40
 8012af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012afa:	e1a2      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012afc:	2380      	movs	r3, #128	; 0x80
 8012afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b02:	e19e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a35      	ldr	r2, [pc, #212]	; (8012be0 <UART_SetConfig+0x344>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d130      	bne.n	8012b70 <UART_SetConfig+0x2d4>
 8012b0e:	4b31      	ldr	r3, [pc, #196]	; (8012bd4 <UART_SetConfig+0x338>)
 8012b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b12:	f003 0307 	and.w	r3, r3, #7
 8012b16:	2b05      	cmp	r3, #5
 8012b18:	d826      	bhi.n	8012b68 <UART_SetConfig+0x2cc>
 8012b1a:	a201      	add	r2, pc, #4	; (adr r2, 8012b20 <UART_SetConfig+0x284>)
 8012b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b20:	08012b39 	.word	0x08012b39
 8012b24:	08012b41 	.word	0x08012b41
 8012b28:	08012b49 	.word	0x08012b49
 8012b2c:	08012b51 	.word	0x08012b51
 8012b30:	08012b59 	.word	0x08012b59
 8012b34:	08012b61 	.word	0x08012b61
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b3e:	e180      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b40:	2304      	movs	r3, #4
 8012b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b46:	e17c      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b48:	2308      	movs	r3, #8
 8012b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b4e:	e178      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b50:	2310      	movs	r3, #16
 8012b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b56:	e174      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b58:	2320      	movs	r3, #32
 8012b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b5e:	e170      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b60:	2340      	movs	r3, #64	; 0x40
 8012b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b66:	e16c      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b68:	2380      	movs	r3, #128	; 0x80
 8012b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b6e:	e168      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	4a1b      	ldr	r2, [pc, #108]	; (8012be4 <UART_SetConfig+0x348>)
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d142      	bne.n	8012c00 <UART_SetConfig+0x364>
 8012b7a:	4b16      	ldr	r3, [pc, #88]	; (8012bd4 <UART_SetConfig+0x338>)
 8012b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b7e:	f003 0307 	and.w	r3, r3, #7
 8012b82:	2b05      	cmp	r3, #5
 8012b84:	d838      	bhi.n	8012bf8 <UART_SetConfig+0x35c>
 8012b86:	a201      	add	r2, pc, #4	; (adr r2, 8012b8c <UART_SetConfig+0x2f0>)
 8012b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b8c:	08012ba5 	.word	0x08012ba5
 8012b90:	08012bad 	.word	0x08012bad
 8012b94:	08012bb5 	.word	0x08012bb5
 8012b98:	08012bbd 	.word	0x08012bbd
 8012b9c:	08012be9 	.word	0x08012be9
 8012ba0:	08012bf1 	.word	0x08012bf1
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012baa:	e14a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bac:	2304      	movs	r3, #4
 8012bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bb2:	e146      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bb4:	2308      	movs	r3, #8
 8012bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bba:	e142      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bbc:	2310      	movs	r3, #16
 8012bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bc2:	e13e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bc4:	cfff69f3 	.word	0xcfff69f3
 8012bc8:	58000c00 	.word	0x58000c00
 8012bcc:	11fff4ff 	.word	0x11fff4ff
 8012bd0:	40011000 	.word	0x40011000
 8012bd4:	58024400 	.word	0x58024400
 8012bd8:	40004400 	.word	0x40004400
 8012bdc:	40004800 	.word	0x40004800
 8012be0:	40004c00 	.word	0x40004c00
 8012be4:	40005000 	.word	0x40005000
 8012be8:	2320      	movs	r3, #32
 8012bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bee:	e128      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bf0:	2340      	movs	r3, #64	; 0x40
 8012bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bf6:	e124      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012bf8:	2380      	movs	r3, #128	; 0x80
 8012bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bfe:	e120      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4acb      	ldr	r2, [pc, #812]	; (8012f34 <UART_SetConfig+0x698>)
 8012c06:	4293      	cmp	r3, r2
 8012c08:	d176      	bne.n	8012cf8 <UART_SetConfig+0x45c>
 8012c0a:	4bcb      	ldr	r3, [pc, #812]	; (8012f38 <UART_SetConfig+0x69c>)
 8012c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c12:	2b28      	cmp	r3, #40	; 0x28
 8012c14:	d86c      	bhi.n	8012cf0 <UART_SetConfig+0x454>
 8012c16:	a201      	add	r2, pc, #4	; (adr r2, 8012c1c <UART_SetConfig+0x380>)
 8012c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c1c:	08012cc1 	.word	0x08012cc1
 8012c20:	08012cf1 	.word	0x08012cf1
 8012c24:	08012cf1 	.word	0x08012cf1
 8012c28:	08012cf1 	.word	0x08012cf1
 8012c2c:	08012cf1 	.word	0x08012cf1
 8012c30:	08012cf1 	.word	0x08012cf1
 8012c34:	08012cf1 	.word	0x08012cf1
 8012c38:	08012cf1 	.word	0x08012cf1
 8012c3c:	08012cc9 	.word	0x08012cc9
 8012c40:	08012cf1 	.word	0x08012cf1
 8012c44:	08012cf1 	.word	0x08012cf1
 8012c48:	08012cf1 	.word	0x08012cf1
 8012c4c:	08012cf1 	.word	0x08012cf1
 8012c50:	08012cf1 	.word	0x08012cf1
 8012c54:	08012cf1 	.word	0x08012cf1
 8012c58:	08012cf1 	.word	0x08012cf1
 8012c5c:	08012cd1 	.word	0x08012cd1
 8012c60:	08012cf1 	.word	0x08012cf1
 8012c64:	08012cf1 	.word	0x08012cf1
 8012c68:	08012cf1 	.word	0x08012cf1
 8012c6c:	08012cf1 	.word	0x08012cf1
 8012c70:	08012cf1 	.word	0x08012cf1
 8012c74:	08012cf1 	.word	0x08012cf1
 8012c78:	08012cf1 	.word	0x08012cf1
 8012c7c:	08012cd9 	.word	0x08012cd9
 8012c80:	08012cf1 	.word	0x08012cf1
 8012c84:	08012cf1 	.word	0x08012cf1
 8012c88:	08012cf1 	.word	0x08012cf1
 8012c8c:	08012cf1 	.word	0x08012cf1
 8012c90:	08012cf1 	.word	0x08012cf1
 8012c94:	08012cf1 	.word	0x08012cf1
 8012c98:	08012cf1 	.word	0x08012cf1
 8012c9c:	08012ce1 	.word	0x08012ce1
 8012ca0:	08012cf1 	.word	0x08012cf1
 8012ca4:	08012cf1 	.word	0x08012cf1
 8012ca8:	08012cf1 	.word	0x08012cf1
 8012cac:	08012cf1 	.word	0x08012cf1
 8012cb0:	08012cf1 	.word	0x08012cf1
 8012cb4:	08012cf1 	.word	0x08012cf1
 8012cb8:	08012cf1 	.word	0x08012cf1
 8012cbc:	08012ce9 	.word	0x08012ce9
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cc6:	e0bc      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012cc8:	2304      	movs	r3, #4
 8012cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cce:	e0b8      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012cd0:	2308      	movs	r3, #8
 8012cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cd6:	e0b4      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012cd8:	2310      	movs	r3, #16
 8012cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cde:	e0b0      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012ce0:	2320      	movs	r3, #32
 8012ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ce6:	e0ac      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012ce8:	2340      	movs	r3, #64	; 0x40
 8012cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cee:	e0a8      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012cf0:	2380      	movs	r3, #128	; 0x80
 8012cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cf6:	e0a4      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	4a8f      	ldr	r2, [pc, #572]	; (8012f3c <UART_SetConfig+0x6a0>)
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d130      	bne.n	8012d64 <UART_SetConfig+0x4c8>
 8012d02:	4b8d      	ldr	r3, [pc, #564]	; (8012f38 <UART_SetConfig+0x69c>)
 8012d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d06:	f003 0307 	and.w	r3, r3, #7
 8012d0a:	2b05      	cmp	r3, #5
 8012d0c:	d826      	bhi.n	8012d5c <UART_SetConfig+0x4c0>
 8012d0e:	a201      	add	r2, pc, #4	; (adr r2, 8012d14 <UART_SetConfig+0x478>)
 8012d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d14:	08012d2d 	.word	0x08012d2d
 8012d18:	08012d35 	.word	0x08012d35
 8012d1c:	08012d3d 	.word	0x08012d3d
 8012d20:	08012d45 	.word	0x08012d45
 8012d24:	08012d4d 	.word	0x08012d4d
 8012d28:	08012d55 	.word	0x08012d55
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d32:	e086      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d34:	2304      	movs	r3, #4
 8012d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d3a:	e082      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d3c:	2308      	movs	r3, #8
 8012d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d42:	e07e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d44:	2310      	movs	r3, #16
 8012d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d4a:	e07a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d4c:	2320      	movs	r3, #32
 8012d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d52:	e076      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d54:	2340      	movs	r3, #64	; 0x40
 8012d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d5a:	e072      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d5c:	2380      	movs	r3, #128	; 0x80
 8012d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d62:	e06e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4a75      	ldr	r2, [pc, #468]	; (8012f40 <UART_SetConfig+0x6a4>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d130      	bne.n	8012dd0 <UART_SetConfig+0x534>
 8012d6e:	4b72      	ldr	r3, [pc, #456]	; (8012f38 <UART_SetConfig+0x69c>)
 8012d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d72:	f003 0307 	and.w	r3, r3, #7
 8012d76:	2b05      	cmp	r3, #5
 8012d78:	d826      	bhi.n	8012dc8 <UART_SetConfig+0x52c>
 8012d7a:	a201      	add	r2, pc, #4	; (adr r2, 8012d80 <UART_SetConfig+0x4e4>)
 8012d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d80:	08012d99 	.word	0x08012d99
 8012d84:	08012da1 	.word	0x08012da1
 8012d88:	08012da9 	.word	0x08012da9
 8012d8c:	08012db1 	.word	0x08012db1
 8012d90:	08012db9 	.word	0x08012db9
 8012d94:	08012dc1 	.word	0x08012dc1
 8012d98:	2300      	movs	r3, #0
 8012d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d9e:	e050      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012da0:	2304      	movs	r3, #4
 8012da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012da6:	e04c      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012da8:	2308      	movs	r3, #8
 8012daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dae:	e048      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012db0:	2310      	movs	r3, #16
 8012db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012db6:	e044      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012db8:	2320      	movs	r3, #32
 8012dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dbe:	e040      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012dc0:	2340      	movs	r3, #64	; 0x40
 8012dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dc6:	e03c      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012dc8:	2380      	movs	r3, #128	; 0x80
 8012dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dce:	e038      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a5b      	ldr	r2, [pc, #364]	; (8012f44 <UART_SetConfig+0x6a8>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d130      	bne.n	8012e3c <UART_SetConfig+0x5a0>
 8012dda:	4b57      	ldr	r3, [pc, #348]	; (8012f38 <UART_SetConfig+0x69c>)
 8012ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012dde:	f003 0307 	and.w	r3, r3, #7
 8012de2:	2b05      	cmp	r3, #5
 8012de4:	d826      	bhi.n	8012e34 <UART_SetConfig+0x598>
 8012de6:	a201      	add	r2, pc, #4	; (adr r2, 8012dec <UART_SetConfig+0x550>)
 8012de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dec:	08012e05 	.word	0x08012e05
 8012df0:	08012e0d 	.word	0x08012e0d
 8012df4:	08012e15 	.word	0x08012e15
 8012df8:	08012e1d 	.word	0x08012e1d
 8012dfc:	08012e25 	.word	0x08012e25
 8012e00:	08012e2d 	.word	0x08012e2d
 8012e04:	2302      	movs	r3, #2
 8012e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0a:	e01a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e0c:	2304      	movs	r3, #4
 8012e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e12:	e016      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e14:	2308      	movs	r3, #8
 8012e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1a:	e012      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e1c:	2310      	movs	r3, #16
 8012e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e22:	e00e      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e24:	2320      	movs	r3, #32
 8012e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e2a:	e00a      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e2c:	2340      	movs	r3, #64	; 0x40
 8012e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e32:	e006      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e34:	2380      	movs	r3, #128	; 0x80
 8012e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e3a:	e002      	b.n	8012e42 <UART_SetConfig+0x5a6>
 8012e3c:	2380      	movs	r3, #128	; 0x80
 8012e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	4a3f      	ldr	r2, [pc, #252]	; (8012f44 <UART_SetConfig+0x6a8>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	f040 80f8 	bne.w	801303e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012e52:	2b20      	cmp	r3, #32
 8012e54:	dc46      	bgt.n	8012ee4 <UART_SetConfig+0x648>
 8012e56:	2b02      	cmp	r3, #2
 8012e58:	f2c0 8082 	blt.w	8012f60 <UART_SetConfig+0x6c4>
 8012e5c:	3b02      	subs	r3, #2
 8012e5e:	2b1e      	cmp	r3, #30
 8012e60:	d87e      	bhi.n	8012f60 <UART_SetConfig+0x6c4>
 8012e62:	a201      	add	r2, pc, #4	; (adr r2, 8012e68 <UART_SetConfig+0x5cc>)
 8012e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e68:	08012eeb 	.word	0x08012eeb
 8012e6c:	08012f61 	.word	0x08012f61
 8012e70:	08012ef3 	.word	0x08012ef3
 8012e74:	08012f61 	.word	0x08012f61
 8012e78:	08012f61 	.word	0x08012f61
 8012e7c:	08012f61 	.word	0x08012f61
 8012e80:	08012f03 	.word	0x08012f03
 8012e84:	08012f61 	.word	0x08012f61
 8012e88:	08012f61 	.word	0x08012f61
 8012e8c:	08012f61 	.word	0x08012f61
 8012e90:	08012f61 	.word	0x08012f61
 8012e94:	08012f61 	.word	0x08012f61
 8012e98:	08012f61 	.word	0x08012f61
 8012e9c:	08012f61 	.word	0x08012f61
 8012ea0:	08012f13 	.word	0x08012f13
 8012ea4:	08012f61 	.word	0x08012f61
 8012ea8:	08012f61 	.word	0x08012f61
 8012eac:	08012f61 	.word	0x08012f61
 8012eb0:	08012f61 	.word	0x08012f61
 8012eb4:	08012f61 	.word	0x08012f61
 8012eb8:	08012f61 	.word	0x08012f61
 8012ebc:	08012f61 	.word	0x08012f61
 8012ec0:	08012f61 	.word	0x08012f61
 8012ec4:	08012f61 	.word	0x08012f61
 8012ec8:	08012f61 	.word	0x08012f61
 8012ecc:	08012f61 	.word	0x08012f61
 8012ed0:	08012f61 	.word	0x08012f61
 8012ed4:	08012f61 	.word	0x08012f61
 8012ed8:	08012f61 	.word	0x08012f61
 8012edc:	08012f61 	.word	0x08012f61
 8012ee0:	08012f53 	.word	0x08012f53
 8012ee4:	2b40      	cmp	r3, #64	; 0x40
 8012ee6:	d037      	beq.n	8012f58 <UART_SetConfig+0x6bc>
 8012ee8:	e03a      	b.n	8012f60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012eea:	f7fb fa85 	bl	800e3f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8012eee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012ef0:	e03c      	b.n	8012f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fb fa94 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f00:	e034      	b.n	8012f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f02:	f107 0318 	add.w	r3, r7, #24
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7fb fbe0 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f10:	e02c      	b.n	8012f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012f12:	4b09      	ldr	r3, [pc, #36]	; (8012f38 <UART_SetConfig+0x69c>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f003 0320 	and.w	r3, r3, #32
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d016      	beq.n	8012f4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012f1e:	4b06      	ldr	r3, [pc, #24]	; (8012f38 <UART_SetConfig+0x69c>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	08db      	lsrs	r3, r3, #3
 8012f24:	f003 0303 	and.w	r3, r3, #3
 8012f28:	4a07      	ldr	r2, [pc, #28]	; (8012f48 <UART_SetConfig+0x6ac>)
 8012f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8012f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012f30:	e01c      	b.n	8012f6c <UART_SetConfig+0x6d0>
 8012f32:	bf00      	nop
 8012f34:	40011400 	.word	0x40011400
 8012f38:	58024400 	.word	0x58024400
 8012f3c:	40007800 	.word	0x40007800
 8012f40:	40007c00 	.word	0x40007c00
 8012f44:	58000c00 	.word	0x58000c00
 8012f48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8012f4c:	4b9d      	ldr	r3, [pc, #628]	; (80131c4 <UART_SetConfig+0x928>)
 8012f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f50:	e00c      	b.n	8012f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012f52:	4b9d      	ldr	r3, [pc, #628]	; (80131c8 <UART_SetConfig+0x92c>)
 8012f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f56:	e009      	b.n	8012f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f5e:	e005      	b.n	8012f6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012f60:	2300      	movs	r3, #0
 8012f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012f64:	2301      	movs	r3, #1
 8012f66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012f6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f000 81de 	beq.w	8013330 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f78:	4a94      	ldr	r2, [pc, #592]	; (80131cc <UART_SetConfig+0x930>)
 8012f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f86:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	685a      	ldr	r2, [r3, #4]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	4413      	add	r3, r2
 8012f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d305      	bcc.n	8012fa4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d903      	bls.n	8012fac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012faa:	e1c1      	b.n	8013330 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fae:	2200      	movs	r2, #0
 8012fb0:	60bb      	str	r3, [r7, #8]
 8012fb2:	60fa      	str	r2, [r7, #12]
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb8:	4a84      	ldr	r2, [pc, #528]	; (80131cc <UART_SetConfig+0x930>)
 8012fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	603b      	str	r3, [r7, #0]
 8012fc4:	607a      	str	r2, [r7, #4]
 8012fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012fce:	f7ed f983 	bl	80002d8 <__aeabi_uldivmod>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	4619      	mov	r1, r3
 8012fda:	f04f 0200 	mov.w	r2, #0
 8012fde:	f04f 0300 	mov.w	r3, #0
 8012fe2:	020b      	lsls	r3, r1, #8
 8012fe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012fe8:	0202      	lsls	r2, r0, #8
 8012fea:	6979      	ldr	r1, [r7, #20]
 8012fec:	6849      	ldr	r1, [r1, #4]
 8012fee:	0849      	lsrs	r1, r1, #1
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	eb12 0804 	adds.w	r8, r2, r4
 8012ffa:	eb43 0905 	adc.w	r9, r3, r5
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	2200      	movs	r2, #0
 8013004:	469a      	mov	sl, r3
 8013006:	4693      	mov	fp, r2
 8013008:	4652      	mov	r2, sl
 801300a:	465b      	mov	r3, fp
 801300c:	4640      	mov	r0, r8
 801300e:	4649      	mov	r1, r9
 8013010:	f7ed f962 	bl	80002d8 <__aeabi_uldivmod>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4613      	mov	r3, r2
 801301a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013022:	d308      	bcc.n	8013036 <UART_SetConfig+0x79a>
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801302a:	d204      	bcs.n	8013036 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013032:	60da      	str	r2, [r3, #12]
 8013034:	e17c      	b.n	8013330 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801303c:	e178      	b.n	8013330 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	69db      	ldr	r3, [r3, #28]
 8013042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013046:	f040 80c5 	bne.w	80131d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801304a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801304e:	2b20      	cmp	r3, #32
 8013050:	dc48      	bgt.n	80130e4 <UART_SetConfig+0x848>
 8013052:	2b00      	cmp	r3, #0
 8013054:	db7b      	blt.n	801314e <UART_SetConfig+0x8b2>
 8013056:	2b20      	cmp	r3, #32
 8013058:	d879      	bhi.n	801314e <UART_SetConfig+0x8b2>
 801305a:	a201      	add	r2, pc, #4	; (adr r2, 8013060 <UART_SetConfig+0x7c4>)
 801305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013060:	080130eb 	.word	0x080130eb
 8013064:	080130f3 	.word	0x080130f3
 8013068:	0801314f 	.word	0x0801314f
 801306c:	0801314f 	.word	0x0801314f
 8013070:	080130fb 	.word	0x080130fb
 8013074:	0801314f 	.word	0x0801314f
 8013078:	0801314f 	.word	0x0801314f
 801307c:	0801314f 	.word	0x0801314f
 8013080:	0801310b 	.word	0x0801310b
 8013084:	0801314f 	.word	0x0801314f
 8013088:	0801314f 	.word	0x0801314f
 801308c:	0801314f 	.word	0x0801314f
 8013090:	0801314f 	.word	0x0801314f
 8013094:	0801314f 	.word	0x0801314f
 8013098:	0801314f 	.word	0x0801314f
 801309c:	0801314f 	.word	0x0801314f
 80130a0:	0801311b 	.word	0x0801311b
 80130a4:	0801314f 	.word	0x0801314f
 80130a8:	0801314f 	.word	0x0801314f
 80130ac:	0801314f 	.word	0x0801314f
 80130b0:	0801314f 	.word	0x0801314f
 80130b4:	0801314f 	.word	0x0801314f
 80130b8:	0801314f 	.word	0x0801314f
 80130bc:	0801314f 	.word	0x0801314f
 80130c0:	0801314f 	.word	0x0801314f
 80130c4:	0801314f 	.word	0x0801314f
 80130c8:	0801314f 	.word	0x0801314f
 80130cc:	0801314f 	.word	0x0801314f
 80130d0:	0801314f 	.word	0x0801314f
 80130d4:	0801314f 	.word	0x0801314f
 80130d8:	0801314f 	.word	0x0801314f
 80130dc:	0801314f 	.word	0x0801314f
 80130e0:	08013141 	.word	0x08013141
 80130e4:	2b40      	cmp	r3, #64	; 0x40
 80130e6:	d02e      	beq.n	8013146 <UART_SetConfig+0x8aa>
 80130e8:	e031      	b.n	801314e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80130ea:	f7f9 f9cf 	bl	800c48c <HAL_RCC_GetPCLK1Freq>
 80130ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80130f0:	e033      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80130f2:	f7f9 f9e1 	bl	800c4b8 <HAL_RCC_GetPCLK2Freq>
 80130f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80130f8:	e02f      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80130fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fb f990 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013108:	e027      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801310a:	f107 0318 	add.w	r3, r7, #24
 801310e:	4618      	mov	r0, r3
 8013110:	f7fb fadc 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013118:	e01f      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801311a:	4b2d      	ldr	r3, [pc, #180]	; (80131d0 <UART_SetConfig+0x934>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f003 0320 	and.w	r3, r3, #32
 8013122:	2b00      	cmp	r3, #0
 8013124:	d009      	beq.n	801313a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013126:	4b2a      	ldr	r3, [pc, #168]	; (80131d0 <UART_SetConfig+0x934>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	08db      	lsrs	r3, r3, #3
 801312c:	f003 0303 	and.w	r3, r3, #3
 8013130:	4a24      	ldr	r2, [pc, #144]	; (80131c4 <UART_SetConfig+0x928>)
 8013132:	fa22 f303 	lsr.w	r3, r2, r3
 8013136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013138:	e00f      	b.n	801315a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801313a:	4b22      	ldr	r3, [pc, #136]	; (80131c4 <UART_SetConfig+0x928>)
 801313c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801313e:	e00c      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013140:	4b21      	ldr	r3, [pc, #132]	; (80131c8 <UART_SetConfig+0x92c>)
 8013142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013144:	e009      	b.n	801315a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801314a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801314c:	e005      	b.n	801315a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801314e:	2300      	movs	r3, #0
 8013150:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013152:	2301      	movs	r3, #1
 8013154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801315c:	2b00      	cmp	r3, #0
 801315e:	f000 80e7 	beq.w	8013330 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013166:	4a19      	ldr	r2, [pc, #100]	; (80131cc <UART_SetConfig+0x930>)
 8013168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801316c:	461a      	mov	r2, r3
 801316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013170:	fbb3 f3f2 	udiv	r3, r3, r2
 8013174:	005a      	lsls	r2, r3, #1
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	085b      	lsrs	r3, r3, #1
 801317c:	441a      	add	r2, r3
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	fbb2 f3f3 	udiv	r3, r2, r3
 8013186:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	2b0f      	cmp	r3, #15
 801318c:	d916      	bls.n	80131bc <UART_SetConfig+0x920>
 801318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013194:	d212      	bcs.n	80131bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013198:	b29b      	uxth	r3, r3
 801319a:	f023 030f 	bic.w	r3, r3, #15
 801319e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80131a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a2:	085b      	lsrs	r3, r3, #1
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	f003 0307 	and.w	r3, r3, #7
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80131ae:	4313      	orrs	r3, r2
 80131b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80131b8:	60da      	str	r2, [r3, #12]
 80131ba:	e0b9      	b.n	8013330 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80131bc:	2301      	movs	r3, #1
 80131be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80131c2:	e0b5      	b.n	8013330 <UART_SetConfig+0xa94>
 80131c4:	03d09000 	.word	0x03d09000
 80131c8:	003d0900 	.word	0x003d0900
 80131cc:	08019570 	.word	0x08019570
 80131d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80131d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80131d8:	2b20      	cmp	r3, #32
 80131da:	dc49      	bgt.n	8013270 <UART_SetConfig+0x9d4>
 80131dc:	2b00      	cmp	r3, #0
 80131de:	db7c      	blt.n	80132da <UART_SetConfig+0xa3e>
 80131e0:	2b20      	cmp	r3, #32
 80131e2:	d87a      	bhi.n	80132da <UART_SetConfig+0xa3e>
 80131e4:	a201      	add	r2, pc, #4	; (adr r2, 80131ec <UART_SetConfig+0x950>)
 80131e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ea:	bf00      	nop
 80131ec:	08013277 	.word	0x08013277
 80131f0:	0801327f 	.word	0x0801327f
 80131f4:	080132db 	.word	0x080132db
 80131f8:	080132db 	.word	0x080132db
 80131fc:	08013287 	.word	0x08013287
 8013200:	080132db 	.word	0x080132db
 8013204:	080132db 	.word	0x080132db
 8013208:	080132db 	.word	0x080132db
 801320c:	08013297 	.word	0x08013297
 8013210:	080132db 	.word	0x080132db
 8013214:	080132db 	.word	0x080132db
 8013218:	080132db 	.word	0x080132db
 801321c:	080132db 	.word	0x080132db
 8013220:	080132db 	.word	0x080132db
 8013224:	080132db 	.word	0x080132db
 8013228:	080132db 	.word	0x080132db
 801322c:	080132a7 	.word	0x080132a7
 8013230:	080132db 	.word	0x080132db
 8013234:	080132db 	.word	0x080132db
 8013238:	080132db 	.word	0x080132db
 801323c:	080132db 	.word	0x080132db
 8013240:	080132db 	.word	0x080132db
 8013244:	080132db 	.word	0x080132db
 8013248:	080132db 	.word	0x080132db
 801324c:	080132db 	.word	0x080132db
 8013250:	080132db 	.word	0x080132db
 8013254:	080132db 	.word	0x080132db
 8013258:	080132db 	.word	0x080132db
 801325c:	080132db 	.word	0x080132db
 8013260:	080132db 	.word	0x080132db
 8013264:	080132db 	.word	0x080132db
 8013268:	080132db 	.word	0x080132db
 801326c:	080132cd 	.word	0x080132cd
 8013270:	2b40      	cmp	r3, #64	; 0x40
 8013272:	d02e      	beq.n	80132d2 <UART_SetConfig+0xa36>
 8013274:	e031      	b.n	80132da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013276:	f7f9 f909 	bl	800c48c <HAL_RCC_GetPCLK1Freq>
 801327a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801327c:	e033      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801327e:	f7f9 f91b 	bl	800c4b8 <HAL_RCC_GetPCLK2Freq>
 8013282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013284:	e02f      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801328a:	4618      	mov	r0, r3
 801328c:	f7fb f8ca 	bl	800e424 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013294:	e027      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013296:	f107 0318 	add.w	r3, r7, #24
 801329a:	4618      	mov	r0, r3
 801329c:	f7fb fa16 	bl	800e6cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132a4:	e01f      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132a6:	4b2d      	ldr	r3, [pc, #180]	; (801335c <UART_SetConfig+0xac0>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f003 0320 	and.w	r3, r3, #32
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d009      	beq.n	80132c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80132b2:	4b2a      	ldr	r3, [pc, #168]	; (801335c <UART_SetConfig+0xac0>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	08db      	lsrs	r3, r3, #3
 80132b8:	f003 0303 	and.w	r3, r3, #3
 80132bc:	4a28      	ldr	r2, [pc, #160]	; (8013360 <UART_SetConfig+0xac4>)
 80132be:	fa22 f303 	lsr.w	r3, r2, r3
 80132c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80132c4:	e00f      	b.n	80132e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80132c6:	4b26      	ldr	r3, [pc, #152]	; (8013360 <UART_SetConfig+0xac4>)
 80132c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132ca:	e00c      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80132cc:	4b25      	ldr	r3, [pc, #148]	; (8013364 <UART_SetConfig+0xac8>)
 80132ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132d0:	e009      	b.n	80132e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80132d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132d8:	e005      	b.n	80132e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80132da:	2300      	movs	r3, #0
 80132dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80132de:	2301      	movs	r3, #1
 80132e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80132e4:	bf00      	nop
    }

    if (pclk != 0U)
 80132e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d021      	beq.n	8013330 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f0:	4a1d      	ldr	r2, [pc, #116]	; (8013368 <UART_SetConfig+0xacc>)
 80132f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132f6:	461a      	mov	r2, r3
 80132f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	085b      	lsrs	r3, r3, #1
 8013304:	441a      	add	r2, r3
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	fbb2 f3f3 	udiv	r3, r2, r3
 801330e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013312:	2b0f      	cmp	r3, #15
 8013314:	d909      	bls.n	801332a <UART_SetConfig+0xa8e>
 8013316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801331c:	d205      	bcs.n	801332a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013320:	b29a      	uxth	r2, r3
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	60da      	str	r2, [r3, #12]
 8013328:	e002      	b.n	8013330 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801332a:	2301      	movs	r3, #1
 801332c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	2201      	movs	r2, #1
 8013334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2201      	movs	r2, #1
 801333c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	2200      	movs	r2, #0
 8013344:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	2200      	movs	r2, #0
 801334a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801334c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013350:	4618      	mov	r0, r3
 8013352:	3748      	adds	r7, #72	; 0x48
 8013354:	46bd      	mov	sp, r7
 8013356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801335a:	bf00      	nop
 801335c:	58024400 	.word	0x58024400
 8013360:	03d09000 	.word	0x03d09000
 8013364:	003d0900 	.word	0x003d0900
 8013368:	08019570 	.word	0x08019570

0801336c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013378:	f003 0301 	and.w	r3, r3, #1
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00a      	beq.n	8013396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	430a      	orrs	r2, r1
 8013394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801339a:	f003 0302 	and.w	r3, r3, #2
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d00a      	beq.n	80133b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	430a      	orrs	r2, r1
 80133b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133bc:	f003 0304 	and.w	r3, r3, #4
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d00a      	beq.n	80133da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	430a      	orrs	r2, r1
 80133d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133de:	f003 0308 	and.w	r3, r3, #8
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d00a      	beq.n	80133fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	430a      	orrs	r2, r1
 80133fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013400:	f003 0310 	and.w	r3, r3, #16
 8013404:	2b00      	cmp	r3, #0
 8013406:	d00a      	beq.n	801341e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	689b      	ldr	r3, [r3, #8]
 801340e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	430a      	orrs	r2, r1
 801341c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013422:	f003 0320 	and.w	r3, r3, #32
 8013426:	2b00      	cmp	r3, #0
 8013428:	d00a      	beq.n	8013440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	430a      	orrs	r2, r1
 801343e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013448:	2b00      	cmp	r3, #0
 801344a:	d01a      	beq.n	8013482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	430a      	orrs	r2, r1
 8013460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801346a:	d10a      	bne.n	8013482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	430a      	orrs	r2, r1
 8013480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801348a:	2b00      	cmp	r3, #0
 801348c:	d00a      	beq.n	80134a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	430a      	orrs	r2, r1
 80134a2:	605a      	str	r2, [r3, #4]
  }
}
 80134a4:	bf00      	nop
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b098      	sub	sp, #96	; 0x60
 80134b4:	af02      	add	r7, sp, #8
 80134b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2200      	movs	r2, #0
 80134bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80134c0:	f7f1 fc88 	bl	8004dd4 <HAL_GetTick>
 80134c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	f003 0308 	and.w	r3, r3, #8
 80134d0:	2b08      	cmp	r3, #8
 80134d2:	d12f      	bne.n	8013534 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80134d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134dc:	2200      	movs	r2, #0
 80134de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 f88e 	bl	8013604 <UART_WaitOnFlagUntilTimeout>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d022      	beq.n	8013534 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f6:	e853 3f00 	ldrex	r3, [r3]
 80134fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80134fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013502:	653b      	str	r3, [r7, #80]	; 0x50
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	461a      	mov	r2, r3
 801350a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801350c:	647b      	str	r3, [r7, #68]	; 0x44
 801350e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013514:	e841 2300 	strex	r3, r2, [r1]
 8013518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801351c:	2b00      	cmp	r3, #0
 801351e:	d1e6      	bne.n	80134ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2220      	movs	r2, #32
 8013524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2200      	movs	r2, #0
 801352c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013530:	2303      	movs	r3, #3
 8013532:	e063      	b.n	80135fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	f003 0304 	and.w	r3, r3, #4
 801353e:	2b04      	cmp	r3, #4
 8013540:	d149      	bne.n	80135d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013542:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801354a:	2200      	movs	r2, #0
 801354c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f000 f857 	bl	8013604 <UART_WaitOnFlagUntilTimeout>
 8013556:	4603      	mov	r3, r0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d03c      	beq.n	80135d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013564:	e853 3f00 	ldrex	r3, [r3]
 8013568:	623b      	str	r3, [r7, #32]
   return(result);
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	461a      	mov	r2, r3
 8013578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801357a:	633b      	str	r3, [r7, #48]	; 0x30
 801357c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801357e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013582:	e841 2300 	strex	r3, r2, [r1]
 8013586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358a:	2b00      	cmp	r3, #0
 801358c:	d1e6      	bne.n	801355c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	3308      	adds	r3, #8
 8013594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	e853 3f00 	ldrex	r3, [r3]
 801359c:	60fb      	str	r3, [r7, #12]
   return(result);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f023 0301 	bic.w	r3, r3, #1
 80135a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	3308      	adds	r3, #8
 80135ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135ae:	61fa      	str	r2, [r7, #28]
 80135b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135b2:	69b9      	ldr	r1, [r7, #24]
 80135b4:	69fa      	ldr	r2, [r7, #28]
 80135b6:	e841 2300 	strex	r3, r2, [r1]
 80135ba:	617b      	str	r3, [r7, #20]
   return(result);
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1e5      	bne.n	801358e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2220      	movs	r2, #32
 80135c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2200      	movs	r2, #0
 80135ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e012      	b.n	80135fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2220      	movs	r2, #32
 80135da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2220      	movs	r2, #32
 80135e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2200      	movs	r2, #0
 80135ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2200      	movs	r2, #0
 80135f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3758      	adds	r7, #88	; 0x58
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b084      	sub	sp, #16
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	603b      	str	r3, [r7, #0]
 8013610:	4613      	mov	r3, r2
 8013612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013614:	e049      	b.n	80136aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801361c:	d045      	beq.n	80136aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801361e:	f7f1 fbd9 	bl	8004dd4 <HAL_GetTick>
 8013622:	4602      	mov	r2, r0
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	1ad3      	subs	r3, r2, r3
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	429a      	cmp	r2, r3
 801362c:	d302      	bcc.n	8013634 <UART_WaitOnFlagUntilTimeout+0x30>
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d101      	bne.n	8013638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013634:	2303      	movs	r3, #3
 8013636:	e048      	b.n	80136ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f003 0304 	and.w	r3, r3, #4
 8013642:	2b00      	cmp	r3, #0
 8013644:	d031      	beq.n	80136aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	69db      	ldr	r3, [r3, #28]
 801364c:	f003 0308 	and.w	r3, r3, #8
 8013650:	2b08      	cmp	r3, #8
 8013652:	d110      	bne.n	8013676 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2208      	movs	r2, #8
 801365a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801365c:	68f8      	ldr	r0, [r7, #12]
 801365e:	f000 f839 	bl	80136d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2208      	movs	r2, #8
 8013666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	2200      	movs	r2, #0
 801366e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013672:	2301      	movs	r3, #1
 8013674:	e029      	b.n	80136ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	69db      	ldr	r3, [r3, #28]
 801367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013684:	d111      	bne.n	80136aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801368e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f000 f81f 	bl	80136d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2220      	movs	r2, #32
 801369a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2200      	movs	r2, #0
 80136a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80136a6:	2303      	movs	r3, #3
 80136a8:	e00f      	b.n	80136ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	69da      	ldr	r2, [r3, #28]
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	4013      	ands	r3, r2
 80136b4:	68ba      	ldr	r2, [r7, #8]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	bf0c      	ite	eq
 80136ba:	2301      	moveq	r3, #1
 80136bc:	2300      	movne	r3, #0
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	461a      	mov	r2, r3
 80136c2:	79fb      	ldrb	r3, [r7, #7]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d0a6      	beq.n	8013616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
	...

080136d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b095      	sub	sp, #84	; 0x54
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e4:	e853 3f00 	ldrex	r3, [r3]
 80136e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80136ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	461a      	mov	r2, r3
 80136f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136fa:	643b      	str	r3, [r7, #64]	; 0x40
 80136fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013702:	e841 2300 	strex	r3, r2, [r1]
 8013706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1e6      	bne.n	80136dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	3308      	adds	r3, #8
 8013714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013716:	6a3b      	ldr	r3, [r7, #32]
 8013718:	e853 3f00 	ldrex	r3, [r3]
 801371c:	61fb      	str	r3, [r7, #28]
   return(result);
 801371e:	69fa      	ldr	r2, [r7, #28]
 8013720:	4b1e      	ldr	r3, [pc, #120]	; (801379c <UART_EndRxTransfer+0xc8>)
 8013722:	4013      	ands	r3, r2
 8013724:	64bb      	str	r3, [r7, #72]	; 0x48
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	3308      	adds	r3, #8
 801372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801372e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013736:	e841 2300 	strex	r3, r2, [r1]
 801373a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1e5      	bne.n	801370e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013746:	2b01      	cmp	r3, #1
 8013748:	d118      	bne.n	801377c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	e853 3f00 	ldrex	r3, [r3]
 8013756:	60bb      	str	r3, [r7, #8]
   return(result);
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	f023 0310 	bic.w	r3, r3, #16
 801375e:	647b      	str	r3, [r7, #68]	; 0x44
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	461a      	mov	r2, r3
 8013766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013768:	61bb      	str	r3, [r7, #24]
 801376a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801376c:	6979      	ldr	r1, [r7, #20]
 801376e:	69ba      	ldr	r2, [r7, #24]
 8013770:	e841 2300 	strex	r3, r2, [r1]
 8013774:	613b      	str	r3, [r7, #16]
   return(result);
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d1e6      	bne.n	801374a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2220      	movs	r2, #32
 8013780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2200      	movs	r2, #0
 801378e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013790:	bf00      	nop
 8013792:	3754      	adds	r7, #84	; 0x54
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr
 801379c:	effffffe 	.word	0xeffffffe

080137a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b085      	sub	sp, #20
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80137ae:	2b01      	cmp	r3, #1
 80137b0:	d101      	bne.n	80137b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80137b2:	2302      	movs	r3, #2
 80137b4:	e027      	b.n	8013806 <HAL_UARTEx_DisableFifoMode+0x66>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2201      	movs	r2, #1
 80137ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2224      	movs	r2, #36	; 0x24
 80137c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	f022 0201 	bic.w	r2, r2, #1
 80137dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80137e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2220      	movs	r2, #32
 80137f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2200      	movs	r2, #0
 8013800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3714      	adds	r7, #20
 801380a:	46bd      	mov	sp, r7
 801380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013810:	4770      	bx	lr

08013812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013812:	b580      	push	{r7, lr}
 8013814:	b084      	sub	sp, #16
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
 801381a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013822:	2b01      	cmp	r3, #1
 8013824:	d101      	bne.n	801382a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013826:	2302      	movs	r3, #2
 8013828:	e02d      	b.n	8013886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2201      	movs	r2, #1
 801382e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2224      	movs	r2, #36	; 0x24
 8013836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	681a      	ldr	r2, [r3, #0]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f022 0201 	bic.w	r2, r2, #1
 8013850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	683a      	ldr	r2, [r7, #0]
 8013862:	430a      	orrs	r2, r1
 8013864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f000 f850 	bl	801390c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	68fa      	ldr	r2, [r7, #12]
 8013872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2220      	movs	r2, #32
 8013878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2200      	movs	r2, #0
 8013880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b084      	sub	sp, #16
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
 8013896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d101      	bne.n	80138a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80138a2:	2302      	movs	r3, #2
 80138a4:	e02d      	b.n	8013902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2201      	movs	r2, #1
 80138aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2224      	movs	r2, #36	; 0x24
 80138b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f022 0201 	bic.w	r2, r2, #1
 80138cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	689b      	ldr	r3, [r3, #8]
 80138d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	683a      	ldr	r2, [r7, #0]
 80138de:	430a      	orrs	r2, r1
 80138e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 f812 	bl	801390c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	68fa      	ldr	r2, [r7, #12]
 80138ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2220      	movs	r2, #32
 80138f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2200      	movs	r2, #0
 80138fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013900:	2300      	movs	r3, #0
}
 8013902:	4618      	mov	r0, r3
 8013904:	3710      	adds	r7, #16
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
	...

0801390c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013918:	2b00      	cmp	r3, #0
 801391a:	d108      	bne.n	801392e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2201      	movs	r2, #1
 8013920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2201      	movs	r2, #1
 8013928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801392c:	e031      	b.n	8013992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801392e:	2310      	movs	r3, #16
 8013930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013932:	2310      	movs	r3, #16
 8013934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	0e5b      	lsrs	r3, r3, #25
 801393e:	b2db      	uxtb	r3, r3
 8013940:	f003 0307 	and.w	r3, r3, #7
 8013944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	0f5b      	lsrs	r3, r3, #29
 801394e:	b2db      	uxtb	r3, r3
 8013950:	f003 0307 	and.w	r3, r3, #7
 8013954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013956:	7bbb      	ldrb	r3, [r7, #14]
 8013958:	7b3a      	ldrb	r2, [r7, #12]
 801395a:	4911      	ldr	r1, [pc, #68]	; (80139a0 <UARTEx_SetNbDataToProcess+0x94>)
 801395c:	5c8a      	ldrb	r2, [r1, r2]
 801395e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013962:	7b3a      	ldrb	r2, [r7, #12]
 8013964:	490f      	ldr	r1, [pc, #60]	; (80139a4 <UARTEx_SetNbDataToProcess+0x98>)
 8013966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013968:	fb93 f3f2 	sdiv	r3, r3, r2
 801396c:	b29a      	uxth	r2, r3
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	7b7a      	ldrb	r2, [r7, #13]
 8013978:	4909      	ldr	r1, [pc, #36]	; (80139a0 <UARTEx_SetNbDataToProcess+0x94>)
 801397a:	5c8a      	ldrb	r2, [r1, r2]
 801397c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013980:	7b7a      	ldrb	r2, [r7, #13]
 8013982:	4908      	ldr	r1, [pc, #32]	; (80139a4 <UARTEx_SetNbDataToProcess+0x98>)
 8013984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013986:	fb93 f3f2 	sdiv	r3, r3, r2
 801398a:	b29a      	uxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013992:	bf00      	nop
 8013994:	3714      	adds	r7, #20
 8013996:	46bd      	mov	sp, r7
 8013998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	08019588 	.word	0x08019588
 80139a4:	08019590 	.word	0x08019590

080139a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d121      	bne.n	80139fe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	4b27      	ldr	r3, [pc, #156]	; (8013a5c <FMC_SDRAM_Init+0xb4>)
 80139c0:	4013      	ands	r3, r2
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	6851      	ldr	r1, [r2, #4]
 80139c6:	683a      	ldr	r2, [r7, #0]
 80139c8:	6892      	ldr	r2, [r2, #8]
 80139ca:	4311      	orrs	r1, r2
 80139cc:	683a      	ldr	r2, [r7, #0]
 80139ce:	68d2      	ldr	r2, [r2, #12]
 80139d0:	4311      	orrs	r1, r2
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	6912      	ldr	r2, [r2, #16]
 80139d6:	4311      	orrs	r1, r2
 80139d8:	683a      	ldr	r2, [r7, #0]
 80139da:	6952      	ldr	r2, [r2, #20]
 80139dc:	4311      	orrs	r1, r2
 80139de:	683a      	ldr	r2, [r7, #0]
 80139e0:	6992      	ldr	r2, [r2, #24]
 80139e2:	4311      	orrs	r1, r2
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	69d2      	ldr	r2, [r2, #28]
 80139e8:	4311      	orrs	r1, r2
 80139ea:	683a      	ldr	r2, [r7, #0]
 80139ec:	6a12      	ldr	r2, [r2, #32]
 80139ee:	4311      	orrs	r1, r2
 80139f0:	683a      	ldr	r2, [r7, #0]
 80139f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80139f4:	430a      	orrs	r2, r1
 80139f6:	431a      	orrs	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	e026      	b.n	8013a4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	69d9      	ldr	r1, [r3, #28]
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	6a1b      	ldr	r3, [r3, #32]
 8013a0e:	4319      	orrs	r1, r3
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a14:	430b      	orrs	r3, r1
 8013a16:	431a      	orrs	r2, r3
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	4b0e      	ldr	r3, [pc, #56]	; (8013a5c <FMC_SDRAM_Init+0xb4>)
 8013a22:	4013      	ands	r3, r2
 8013a24:	683a      	ldr	r2, [r7, #0]
 8013a26:	6851      	ldr	r1, [r2, #4]
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	6892      	ldr	r2, [r2, #8]
 8013a2c:	4311      	orrs	r1, r2
 8013a2e:	683a      	ldr	r2, [r7, #0]
 8013a30:	68d2      	ldr	r2, [r2, #12]
 8013a32:	4311      	orrs	r1, r2
 8013a34:	683a      	ldr	r2, [r7, #0]
 8013a36:	6912      	ldr	r2, [r2, #16]
 8013a38:	4311      	orrs	r1, r2
 8013a3a:	683a      	ldr	r2, [r7, #0]
 8013a3c:	6952      	ldr	r2, [r2, #20]
 8013a3e:	4311      	orrs	r1, r2
 8013a40:	683a      	ldr	r2, [r7, #0]
 8013a42:	6992      	ldr	r2, [r2, #24]
 8013a44:	430a      	orrs	r2, r1
 8013a46:	431a      	orrs	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	370c      	adds	r7, #12
 8013a52:	46bd      	mov	sp, r7
 8013a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a58:	4770      	bx	lr
 8013a5a:	bf00      	nop
 8013a5c:	ffff8000 	.word	0xffff8000

08013a60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013a60:	b480      	push	{r7}
 8013a62:	b085      	sub	sp, #20
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d128      	bne.n	8013ac4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	689b      	ldr	r3, [r3, #8]
 8013a76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	1e59      	subs	r1, r3, #1
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	3b01      	subs	r3, #1
 8013a86:	011b      	lsls	r3, r3, #4
 8013a88:	4319      	orrs	r1, r3
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	021b      	lsls	r3, r3, #8
 8013a92:	4319      	orrs	r1, r3
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	031b      	lsls	r3, r3, #12
 8013a9c:	4319      	orrs	r1, r3
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	691b      	ldr	r3, [r3, #16]
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	041b      	lsls	r3, r3, #16
 8013aa6:	4319      	orrs	r1, r3
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	695b      	ldr	r3, [r3, #20]
 8013aac:	3b01      	subs	r3, #1
 8013aae:	051b      	lsls	r3, r3, #20
 8013ab0:	4319      	orrs	r1, r3
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	699b      	ldr	r3, [r3, #24]
 8013ab6:	3b01      	subs	r3, #1
 8013ab8:	061b      	lsls	r3, r3, #24
 8013aba:	430b      	orrs	r3, r1
 8013abc:	431a      	orrs	r2, r3
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	609a      	str	r2, [r3, #8]
 8013ac2:	e02d      	b.n	8013b20 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	689a      	ldr	r2, [r3, #8]
 8013ac8:	4b19      	ldr	r3, [pc, #100]	; (8013b30 <FMC_SDRAM_Timing_Init+0xd0>)
 8013aca:	4013      	ands	r3, r2
 8013acc:	68ba      	ldr	r2, [r7, #8]
 8013ace:	68d2      	ldr	r2, [r2, #12]
 8013ad0:	3a01      	subs	r2, #1
 8013ad2:	0311      	lsls	r1, r2, #12
 8013ad4:	68ba      	ldr	r2, [r7, #8]
 8013ad6:	6952      	ldr	r2, [r2, #20]
 8013ad8:	3a01      	subs	r2, #1
 8013ada:	0512      	lsls	r2, r2, #20
 8013adc:	430a      	orrs	r2, r1
 8013ade:	431a      	orrs	r2, r3
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	1e59      	subs	r1, r3, #1
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	3b01      	subs	r3, #1
 8013af8:	011b      	lsls	r3, r3, #4
 8013afa:	4319      	orrs	r1, r3
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	3b01      	subs	r3, #1
 8013b02:	021b      	lsls	r3, r3, #8
 8013b04:	4319      	orrs	r1, r3
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	691b      	ldr	r3, [r3, #16]
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	041b      	lsls	r3, r3, #16
 8013b0e:	4319      	orrs	r1, r3
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	699b      	ldr	r3, [r3, #24]
 8013b14:	3b01      	subs	r3, #1
 8013b16:	061b      	lsls	r3, r3, #24
 8013b18:	430b      	orrs	r3, r1
 8013b1a:	431a      	orrs	r2, r3
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013b20:	2300      	movs	r3, #0
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3714      	adds	r7, #20
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr
 8013b2e:	bf00      	nop
 8013b30:	ff0f0fff 	.word	0xff0f0fff

08013b34 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	691a      	ldr	r2, [r3, #16]
 8013b44:	4b0c      	ldr	r3, [pc, #48]	; (8013b78 <FMC_SDRAM_SendCommand+0x44>)
 8013b46:	4013      	ands	r3, r2
 8013b48:	68ba      	ldr	r2, [r7, #8]
 8013b4a:	6811      	ldr	r1, [r2, #0]
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	6852      	ldr	r2, [r2, #4]
 8013b50:	4311      	orrs	r1, r2
 8013b52:	68ba      	ldr	r2, [r7, #8]
 8013b54:	6892      	ldr	r2, [r2, #8]
 8013b56:	3a01      	subs	r2, #1
 8013b58:	0152      	lsls	r2, r2, #5
 8013b5a:	4311      	orrs	r1, r2
 8013b5c:	68ba      	ldr	r2, [r7, #8]
 8013b5e:	68d2      	ldr	r2, [r2, #12]
 8013b60:	0252      	lsls	r2, r2, #9
 8013b62:	430a      	orrs	r2, r1
 8013b64:	431a      	orrs	r2, r3
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3714      	adds	r7, #20
 8013b70:	46bd      	mov	sp, r7
 8013b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b76:	4770      	bx	lr
 8013b78:	ffc00000 	.word	0xffc00000

08013b7c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	695a      	ldr	r2, [r3, #20]
 8013b8a:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8013b8c:	4013      	ands	r3, r2
 8013b8e:	683a      	ldr	r2, [r7, #0]
 8013b90:	0052      	lsls	r2, r2, #1
 8013b92:	431a      	orrs	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	370c      	adds	r7, #12
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr
 8013ba6:	bf00      	nop
 8013ba8:	ffffc001 	.word	0xffffc001

08013bac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013bac:	b084      	sub	sp, #16
 8013bae:	b480      	push	{r7}
 8013bb0:	b085      	sub	sp, #20
 8013bb2:	af00      	add	r7, sp, #0
 8013bb4:	6078      	str	r0, [r7, #4]
 8013bb6:	f107 001c 	add.w	r0, r7, #28
 8013bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8013bc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013bc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013bc6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8013bca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8013bce:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8013bd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	685a      	ldr	r2, [r3, #4]
 8013bde:	4b07      	ldr	r3, [pc, #28]	; (8013bfc <SDMMC_Init+0x50>)
 8013be0:	4013      	ands	r3, r2
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	431a      	orrs	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013bea:	2300      	movs	r3, #0
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3714      	adds	r7, #20
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	b004      	add	sp, #16
 8013bf8:	4770      	bx	lr
 8013bfa:	bf00      	nop
 8013bfc:	ffc02c00 	.word	0xffc02c00

08013c00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	370c      	adds	r7, #12
 8013c12:	46bd      	mov	sp, r7
 8013c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c18:	4770      	bx	lr

08013c1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013c1a:	b480      	push	{r7}
 8013c1c:	b083      	sub	sp, #12
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	681a      	ldr	r2, [r3, #0]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013c2e:	2300      	movs	r3, #0
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	370c      	adds	r7, #12
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f043 0203 	orr.w	r2, r3, #3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	370c      	adds	r7, #12
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr

08013c5e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8013c5e:	b480      	push	{r7}
 8013c60:	b083      	sub	sp, #12
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	f003 0303 	and.w	r3, r3, #3
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	370c      	adds	r7, #12
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
	...

08013c7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b085      	sub	sp, #20
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013c86:	2300      	movs	r3, #0
 8013c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013c9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013ca0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013ca6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	4313      	orrs	r3, r2
 8013cac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	68da      	ldr	r2, [r3, #12]
 8013cb2:	4b06      	ldr	r3, [pc, #24]	; (8013ccc <SDMMC_SendCommand+0x50>)
 8013cb4:	4013      	ands	r3, r2
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	431a      	orrs	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	fffee0c0 	.word	0xfffee0c0

08013cd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	691b      	ldr	r3, [r3, #16]
 8013cdc:	b2db      	uxtb	r3, r3
}
 8013cde:	4618      	mov	r0, r3
 8013ce0:	370c      	adds	r7, #12
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce8:	4770      	bx	lr

08013cea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013cea:	b480      	push	{r7}
 8013cec:	b085      	sub	sp, #20
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	3314      	adds	r3, #20
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3714      	adds	r7, #20
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b085      	sub	sp, #20
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	685a      	ldr	r2, [r3, #4]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013d36:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013d3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013d42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013d44:	68fa      	ldr	r2, [r7, #12]
 8013d46:	4313      	orrs	r3, r2
 8013d48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	431a      	orrs	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013d5a:	2300      	movs	r3, #0

}
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3714      	adds	r7, #20
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b088      	sub	sp, #32
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013d76:	2310      	movs	r3, #16
 8013d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d80:	2300      	movs	r3, #0
 8013d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d8a:	f107 0308 	add.w	r3, r7, #8
 8013d8e:	4619      	mov	r1, r3
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ff ff73 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d9a:	2110      	movs	r1, #16
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f000 fa5f 	bl	8014260 <SDMMC_GetCmdResp1>
 8013da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013da4:	69fb      	ldr	r3, [r7, #28]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3720      	adds	r7, #32
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b088      	sub	sp, #32
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	6078      	str	r0, [r7, #4]
 8013db6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013dbc:	2311      	movs	r3, #17
 8013dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013dd0:	f107 0308 	add.w	r3, r7, #8
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7ff ff50 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013de0:	2111      	movs	r1, #17
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f000 fa3c 	bl	8014260 <SDMMC_GetCmdResp1>
 8013de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dea:	69fb      	ldr	r3, [r7, #28]
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3720      	adds	r7, #32
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b088      	sub	sp, #32
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013e02:	2312      	movs	r3, #18
 8013e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e16:	f107 0308 	add.w	r3, r7, #8
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f7ff ff2d 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e26:	2112      	movs	r1, #18
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 fa19 	bl	8014260 <SDMMC_GetCmdResp1>
 8013e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e30:	69fb      	ldr	r3, [r7, #28]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3720      	adds	r7, #32
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b088      	sub	sp, #32
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	6078      	str	r0, [r7, #4]
 8013e42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013e48:	2318      	movs	r3, #24
 8013e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e52:	2300      	movs	r3, #0
 8013e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e5c:	f107 0308 	add.w	r3, r7, #8
 8013e60:	4619      	mov	r1, r3
 8013e62:	6878      	ldr	r0, [r7, #4]
 8013e64:	f7ff ff0a 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e6c:	2118      	movs	r1, #24
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 f9f6 	bl	8014260 <SDMMC_GetCmdResp1>
 8013e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e76:	69fb      	ldr	r3, [r7, #28]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3720      	adds	r7, #32
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b088      	sub	sp, #32
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013e8e:	2319      	movs	r3, #25
 8013e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ea2:	f107 0308 	add.w	r3, r7, #8
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f7ff fee7 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8013eb2:	2119      	movs	r1, #25
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 f9d3 	bl	8014260 <SDMMC_GetCmdResp1>
 8013eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ebc:	69fb      	ldr	r3, [r7, #28]
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3720      	adds	r7, #32
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
	...

08013ec8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b088      	sub	sp, #32
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013ed4:	230c      	movs	r3, #12
 8013ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ee6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f00:	f107 0308 	add.w	r3, r7, #8
 8013f04:	4619      	mov	r1, r3
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f7ff feb8 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013f0c:	4a0b      	ldr	r2, [pc, #44]	; (8013f3c <SDMMC_CmdStopTransfer+0x74>)
 8013f0e:	210c      	movs	r1, #12
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f9a5 	bl	8014260 <SDMMC_GetCmdResp1>
 8013f16:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013f2a:	d101      	bne.n	8013f30 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013f30:	69fb      	ldr	r3, [r7, #28]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3720      	adds	r7, #32
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	05f5e100 	.word	0x05f5e100

08013f40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b088      	sub	sp, #32
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013f4e:	2307      	movs	r3, #7
 8013f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f58:	2300      	movs	r3, #0
 8013f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f62:	f107 0308 	add.w	r3, r7, #8
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff fe87 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f72:	2107      	movs	r1, #7
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 f973 	bl	8014260 <SDMMC_GetCmdResp1>
 8013f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f7c:	69fb      	ldr	r3, [r7, #28]
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3720      	adds	r7, #32
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013f86:	b580      	push	{r7, lr}
 8013f88:	b088      	sub	sp, #32
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013f92:	2300      	movs	r3, #0
 8013f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013f96:	2300      	movs	r3, #0
 8013f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013fa4:	f107 0308 	add.w	r3, r7, #8
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f7ff fe66 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f000 fb97 	bl	80146e4 <SDMMC_GetCmdError>
 8013fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fb8:	69fb      	ldr	r3, [r7, #28]
}
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3720      	adds	r7, #32
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}

08013fc2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013fc2:	b580      	push	{r7, lr}
 8013fc4:	b088      	sub	sp, #32
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013fca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013fd0:	2308      	movs	r3, #8
 8013fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013fe4:	f107 0308 	add.w	r3, r7, #8
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7ff fe46 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f000 fb29 	bl	8014648 <SDMMC_GetCmdResp7>
 8013ff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ff8:	69fb      	ldr	r3, [r7, #28]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3720      	adds	r7, #32
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b088      	sub	sp, #32
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
 801400a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014010:	2337      	movs	r3, #55	; 0x37
 8014012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801401a:	2300      	movs	r3, #0
 801401c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801401e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014024:	f107 0308 	add.w	r3, r7, #8
 8014028:	4619      	mov	r1, r3
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f7ff fe26 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014030:	f241 3288 	movw	r2, #5000	; 0x1388
 8014034:	2137      	movs	r1, #55	; 0x37
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f000 f912 	bl	8014260 <SDMMC_GetCmdResp1>
 801403c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801403e:	69fb      	ldr	r3, [r7, #28]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3720      	adds	r7, #32
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b088      	sub	sp, #32
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
 8014050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014056:	2329      	movs	r3, #41	; 0x29
 8014058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801405a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801405e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014060:	2300      	movs	r3, #0
 8014062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014068:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801406a:	f107 0308 	add.w	r3, r7, #8
 801406e:	4619      	mov	r1, r3
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f7ff fe03 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fa2e 	bl	80144d8 <SDMMC_GetCmdResp3>
 801407c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801407e:	69fb      	ldr	r3, [r7, #28]
}
 8014080:	4618      	mov	r0, r3
 8014082:	3720      	adds	r7, #32
 8014084:	46bd      	mov	sp, r7
 8014086:	bd80      	pop	{r7, pc}

08014088 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b088      	sub	sp, #32
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014096:	2306      	movs	r3, #6
 8014098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801409a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801409e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140a0:	2300      	movs	r3, #0
 80140a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80140a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140aa:	f107 0308 	add.w	r3, r7, #8
 80140ae:	4619      	mov	r1, r3
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	f7ff fde3 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80140b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80140ba:	2106      	movs	r1, #6
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 f8cf 	bl	8014260 <SDMMC_GetCmdResp1>
 80140c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140c4:	69fb      	ldr	r3, [r7, #28]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3720      	adds	r7, #32
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80140ce:	b580      	push	{r7, lr}
 80140d0:	b088      	sub	sp, #32
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80140d6:	2300      	movs	r3, #0
 80140d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80140da:	2333      	movs	r3, #51	; 0x33
 80140dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80140de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80140e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140e4:	2300      	movs	r3, #0
 80140e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80140ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140ee:	f107 0308 	add.w	r3, r7, #8
 80140f2:	4619      	mov	r1, r3
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f7ff fdc1 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80140fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80140fe:	2133      	movs	r1, #51	; 0x33
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f000 f8ad 	bl	8014260 <SDMMC_GetCmdResp1>
 8014106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014108:	69fb      	ldr	r3, [r7, #28]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3720      	adds	r7, #32
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}

08014112 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b088      	sub	sp, #32
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801411a:	2300      	movs	r3, #0
 801411c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801411e:	2302      	movs	r3, #2
 8014120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014122:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014128:	2300      	movs	r3, #0
 801412a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801412c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014132:	f107 0308 	add.w	r3, r7, #8
 8014136:	4619      	mov	r1, r3
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f7ff fd9f 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 f980 	bl	8014444 <SDMMC_GetCmdResp2>
 8014144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014146:	69fb      	ldr	r3, [r7, #28]
}
 8014148:	4618      	mov	r0, r3
 801414a:	3720      	adds	r7, #32
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b088      	sub	sp, #32
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801415e:	2309      	movs	r3, #9
 8014160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014168:	2300      	movs	r3, #0
 801416a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801416c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014170:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014172:	f107 0308 	add.w	r3, r7, #8
 8014176:	4619      	mov	r1, r3
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f7ff fd7f 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f000 f960 	bl	8014444 <SDMMC_GetCmdResp2>
 8014184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014186:	69fb      	ldr	r3, [r7, #28]
}
 8014188:	4618      	mov	r0, r3
 801418a:	3720      	adds	r7, #32
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b088      	sub	sp, #32
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801419a:	2300      	movs	r3, #0
 801419c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801419e:	2303      	movs	r3, #3
 80141a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141a8:	2300      	movs	r3, #0
 80141aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141b2:	f107 0308 	add.w	r3, r7, #8
 80141b6:	4619      	mov	r1, r3
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff fd5f 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80141be:	683a      	ldr	r2, [r7, #0]
 80141c0:	2103      	movs	r1, #3
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f9c8 	bl	8014558 <SDMMC_GetCmdResp6>
 80141c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141ca:	69fb      	ldr	r3, [r7, #28]
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3720      	adds	r7, #32
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b088      	sub	sp, #32
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80141e2:	230d      	movs	r3, #13
 80141e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141ec:	2300      	movs	r3, #0
 80141ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141f6:	f107 0308 	add.w	r3, r7, #8
 80141fa:	4619      	mov	r1, r3
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7ff fd3d 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8014202:	f241 3288 	movw	r2, #5000	; 0x1388
 8014206:	210d      	movs	r1, #13
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 f829 	bl	8014260 <SDMMC_GetCmdResp1>
 801420e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014210:	69fb      	ldr	r3, [r7, #28]
}
 8014212:	4618      	mov	r0, r3
 8014214:	3720      	adds	r7, #32
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b088      	sub	sp, #32
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014222:	2300      	movs	r3, #0
 8014224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8014226:	230d      	movs	r3, #13
 8014228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801422a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801422e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014230:	2300      	movs	r3, #0
 8014232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801423a:	f107 0308 	add.w	r3, r7, #8
 801423e:	4619      	mov	r1, r3
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f7ff fd1b 	bl	8013c7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8014246:	f241 3288 	movw	r2, #5000	; 0x1388
 801424a:	210d      	movs	r1, #13
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 f807 	bl	8014260 <SDMMC_GetCmdResp1>
 8014252:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014254:	69fb      	ldr	r3, [r7, #28]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3720      	adds	r7, #32
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
	...

08014260 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b088      	sub	sp, #32
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	460b      	mov	r3, r1
 801426a:	607a      	str	r2, [r7, #4]
 801426c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801426e:	4b70      	ldr	r3, [pc, #448]	; (8014430 <SDMMC_GetCmdResp1+0x1d0>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4a70      	ldr	r2, [pc, #448]	; (8014434 <SDMMC_GetCmdResp1+0x1d4>)
 8014274:	fba2 2303 	umull	r2, r3, r2, r3
 8014278:	0a5a      	lsrs	r2, r3, #9
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	fb02 f303 	mul.w	r3, r2, r3
 8014280:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	1e5a      	subs	r2, r3, #1
 8014286:	61fa      	str	r2, [r7, #28]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d102      	bne.n	8014292 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801428c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014290:	e0c9      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014296:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8014298:	69ba      	ldr	r2, [r7, #24]
 801429a:	4b67      	ldr	r3, [pc, #412]	; (8014438 <SDMMC_GetCmdResp1+0x1d8>)
 801429c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d0ef      	beq.n	8014282 <SDMMC_GetCmdResp1+0x22>
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d1ea      	bne.n	8014282 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142b0:	f003 0304 	and.w	r3, r3, #4
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d004      	beq.n	80142c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	2204      	movs	r2, #4
 80142bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80142be:	2304      	movs	r3, #4
 80142c0:	e0b1      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142c6:	f003 0301 	and.w	r3, r3, #1
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d004      	beq.n	80142d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2201      	movs	r2, #1
 80142d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80142d4:	2301      	movs	r3, #1
 80142d6:	e0a6      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	4a58      	ldr	r2, [pc, #352]	; (801443c <SDMMC_GetCmdResp1+0x1dc>)
 80142dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80142de:	68f8      	ldr	r0, [r7, #12]
 80142e0:	f7ff fcf6 	bl	8013cd0 <SDMMC_GetCommandResponse>
 80142e4:	4603      	mov	r3, r0
 80142e6:	461a      	mov	r2, r3
 80142e8:	7afb      	ldrb	r3, [r7, #11]
 80142ea:	4293      	cmp	r3, r2
 80142ec:	d001      	beq.n	80142f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80142ee:	2301      	movs	r3, #1
 80142f0:	e099      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80142f2:	2100      	movs	r1, #0
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	f7ff fcf8 	bl	8013cea <SDMMC_GetResponse>
 80142fa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80142fc:	697a      	ldr	r2, [r7, #20]
 80142fe:	4b50      	ldr	r3, [pc, #320]	; (8014440 <SDMMC_GetCmdResp1+0x1e0>)
 8014300:	4013      	ands	r3, r2
 8014302:	2b00      	cmp	r3, #0
 8014304:	d101      	bne.n	801430a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014306:	2300      	movs	r3, #0
 8014308:	e08d      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2b00      	cmp	r3, #0
 801430e:	da02      	bge.n	8014316 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014314:	e087      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801431c:	2b00      	cmp	r3, #0
 801431e:	d001      	beq.n	8014324 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014320:	2340      	movs	r3, #64	; 0x40
 8014322:	e080      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801432a:	2b00      	cmp	r3, #0
 801432c:	d001      	beq.n	8014332 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801432e:	2380      	movs	r3, #128	; 0x80
 8014330:	e079      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801433c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014340:	e071      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014348:	2b00      	cmp	r3, #0
 801434a:	d002      	beq.n	8014352 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801434c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014350:	e069      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014358:	2b00      	cmp	r3, #0
 801435a:	d002      	beq.n	8014362 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801435c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014360:	e061      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014368:	2b00      	cmp	r3, #0
 801436a:	d002      	beq.n	8014372 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801436c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014370:	e059      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014378:	2b00      	cmp	r3, #0
 801437a:	d002      	beq.n	8014382 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801437c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014380:	e051      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014388:	2b00      	cmp	r3, #0
 801438a:	d002      	beq.n	8014392 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801438c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014390:	e049      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014398:	2b00      	cmp	r3, #0
 801439a:	d002      	beq.n	80143a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801439c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80143a0:	e041      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d002      	beq.n	80143b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80143ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143b0:	e039      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80143bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80143c0:	e031      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d002      	beq.n	80143d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80143cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80143d0:	e029      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d002      	beq.n	80143e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80143dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80143e0:	e021      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80143ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80143f0:	e019      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80143fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014400:	e011      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014408:	2b00      	cmp	r3, #0
 801440a:	d002      	beq.n	8014412 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801440c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014410:	e009      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	f003 0308 	and.w	r3, r3, #8
 8014418:	2b00      	cmp	r3, #0
 801441a:	d002      	beq.n	8014422 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801441c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014420:	e001      	b.n	8014426 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014426:	4618      	mov	r0, r3
 8014428:	3720      	adds	r7, #32
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	2000000c 	.word	0x2000000c
 8014434:	10624dd3 	.word	0x10624dd3
 8014438:	00200045 	.word	0x00200045
 801443c:	002000c5 	.word	0x002000c5
 8014440:	fdffe008 	.word	0xfdffe008

08014444 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801444c:	4b1f      	ldr	r3, [pc, #124]	; (80144cc <SDMMC_GetCmdResp2+0x88>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4a1f      	ldr	r2, [pc, #124]	; (80144d0 <SDMMC_GetCmdResp2+0x8c>)
 8014452:	fba2 2303 	umull	r2, r3, r2, r3
 8014456:	0a5b      	lsrs	r3, r3, #9
 8014458:	f241 3288 	movw	r2, #5000	; 0x1388
 801445c:	fb02 f303 	mul.w	r3, r2, r3
 8014460:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	1e5a      	subs	r2, r3, #1
 8014466:	60fa      	str	r2, [r7, #12]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801446c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014470:	e026      	b.n	80144c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014476:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801447e:	2b00      	cmp	r3, #0
 8014480:	d0ef      	beq.n	8014462 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014488:	2b00      	cmp	r3, #0
 801448a:	d1ea      	bne.n	8014462 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014490:	f003 0304 	and.w	r3, r3, #4
 8014494:	2b00      	cmp	r3, #0
 8014496:	d004      	beq.n	80144a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2204      	movs	r2, #4
 801449c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801449e:	2304      	movs	r3, #4
 80144a0:	e00e      	b.n	80144c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144a6:	f003 0301 	and.w	r3, r3, #1
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d004      	beq.n	80144b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2201      	movs	r2, #1
 80144b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144b4:	2301      	movs	r3, #1
 80144b6:	e003      	b.n	80144c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4a06      	ldr	r2, [pc, #24]	; (80144d4 <SDMMC_GetCmdResp2+0x90>)
 80144bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80144be:	2300      	movs	r3, #0
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3714      	adds	r7, #20
 80144c4:	46bd      	mov	sp, r7
 80144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ca:	4770      	bx	lr
 80144cc:	2000000c 	.word	0x2000000c
 80144d0:	10624dd3 	.word	0x10624dd3
 80144d4:	002000c5 	.word	0x002000c5

080144d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80144d8:	b480      	push	{r7}
 80144da:	b085      	sub	sp, #20
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80144e0:	4b1a      	ldr	r3, [pc, #104]	; (801454c <SDMMC_GetCmdResp3+0x74>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	4a1a      	ldr	r2, [pc, #104]	; (8014550 <SDMMC_GetCmdResp3+0x78>)
 80144e6:	fba2 2303 	umull	r2, r3, r2, r3
 80144ea:	0a5b      	lsrs	r3, r3, #9
 80144ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80144f0:	fb02 f303 	mul.w	r3, r2, r3
 80144f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	1e5a      	subs	r2, r3, #1
 80144fa:	60fa      	str	r2, [r7, #12]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d102      	bne.n	8014506 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014504:	e01b      	b.n	801453e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801450a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014512:	2b00      	cmp	r3, #0
 8014514:	d0ef      	beq.n	80144f6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801451c:	2b00      	cmp	r3, #0
 801451e:	d1ea      	bne.n	80144f6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014524:	f003 0304 	and.w	r3, r3, #4
 8014528:	2b00      	cmp	r3, #0
 801452a:	d004      	beq.n	8014536 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2204      	movs	r2, #4
 8014530:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014532:	2304      	movs	r3, #4
 8014534:	e003      	b.n	801453e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	4a06      	ldr	r2, [pc, #24]	; (8014554 <SDMMC_GetCmdResp3+0x7c>)
 801453a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801453c:	2300      	movs	r3, #0
}
 801453e:	4618      	mov	r0, r3
 8014540:	3714      	adds	r7, #20
 8014542:	46bd      	mov	sp, r7
 8014544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014548:	4770      	bx	lr
 801454a:	bf00      	nop
 801454c:	2000000c 	.word	0x2000000c
 8014550:	10624dd3 	.word	0x10624dd3
 8014554:	002000c5 	.word	0x002000c5

08014558 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b088      	sub	sp, #32
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	460b      	mov	r3, r1
 8014562:	607a      	str	r2, [r7, #4]
 8014564:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014566:	4b35      	ldr	r3, [pc, #212]	; (801463c <SDMMC_GetCmdResp6+0xe4>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a35      	ldr	r2, [pc, #212]	; (8014640 <SDMMC_GetCmdResp6+0xe8>)
 801456c:	fba2 2303 	umull	r2, r3, r2, r3
 8014570:	0a5b      	lsrs	r3, r3, #9
 8014572:	f241 3288 	movw	r2, #5000	; 0x1388
 8014576:	fb02 f303 	mul.w	r3, r2, r3
 801457a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801457c:	69fb      	ldr	r3, [r7, #28]
 801457e:	1e5a      	subs	r2, r3, #1
 8014580:	61fa      	str	r2, [r7, #28]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d102      	bne.n	801458c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014586:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801458a:	e052      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014590:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014598:	2b00      	cmp	r3, #0
 801459a:	d0ef      	beq.n	801457c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801459c:	69bb      	ldr	r3, [r7, #24]
 801459e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1ea      	bne.n	801457c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145aa:	f003 0304 	and.w	r3, r3, #4
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d004      	beq.n	80145bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	2204      	movs	r2, #4
 80145b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80145b8:	2304      	movs	r3, #4
 80145ba:	e03a      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145c0:	f003 0301 	and.w	r3, r3, #1
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d004      	beq.n	80145d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	2201      	movs	r2, #1
 80145cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80145ce:	2301      	movs	r3, #1
 80145d0:	e02f      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f7ff fb7c 	bl	8013cd0 <SDMMC_GetCommandResponse>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	7afb      	ldrb	r3, [r7, #11]
 80145de:	4293      	cmp	r3, r2
 80145e0:	d001      	beq.n	80145e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80145e2:	2301      	movs	r3, #1
 80145e4:	e025      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	4a16      	ldr	r2, [pc, #88]	; (8014644 <SDMMC_GetCmdResp6+0xec>)
 80145ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80145ec:	2100      	movs	r1, #0
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f7ff fb7b 	bl	8013cea <SDMMC_GetResponse>
 80145f4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d106      	bne.n	801460e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	0c1b      	lsrs	r3, r3, #16
 8014604:	b29a      	uxth	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801460a:	2300      	movs	r3, #0
 801460c:	e011      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014614:	2b00      	cmp	r3, #0
 8014616:	d002      	beq.n	801461e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801461c:	e009      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014624:	2b00      	cmp	r3, #0
 8014626:	d002      	beq.n	801462e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801462c:	e001      	b.n	8014632 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801462e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014632:	4618      	mov	r0, r3
 8014634:	3720      	adds	r7, #32
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	2000000c 	.word	0x2000000c
 8014640:	10624dd3 	.word	0x10624dd3
 8014644:	002000c5 	.word	0x002000c5

08014648 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014650:	4b22      	ldr	r3, [pc, #136]	; (80146dc <SDMMC_GetCmdResp7+0x94>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4a22      	ldr	r2, [pc, #136]	; (80146e0 <SDMMC_GetCmdResp7+0x98>)
 8014656:	fba2 2303 	umull	r2, r3, r2, r3
 801465a:	0a5b      	lsrs	r3, r3, #9
 801465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014660:	fb02 f303 	mul.w	r3, r2, r3
 8014664:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	1e5a      	subs	r2, r3, #1
 801466a:	60fa      	str	r2, [r7, #12]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d102      	bne.n	8014676 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014674:	e02c      	b.n	80146d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801467a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8014682:	2b00      	cmp	r3, #0
 8014684:	d0ef      	beq.n	8014666 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801468c:	2b00      	cmp	r3, #0
 801468e:	d1ea      	bne.n	8014666 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014694:	f003 0304 	and.w	r3, r3, #4
 8014698:	2b00      	cmp	r3, #0
 801469a:	d004      	beq.n	80146a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2204      	movs	r2, #4
 80146a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80146a2:	2304      	movs	r3, #4
 80146a4:	e014      	b.n	80146d0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146aa:	f003 0301 	and.w	r3, r3, #1
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d004      	beq.n	80146bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2201      	movs	r2, #1
 80146b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80146b8:	2301      	movs	r3, #1
 80146ba:	e009      	b.n	80146d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d002      	beq.n	80146ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2240      	movs	r2, #64	; 0x40
 80146cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80146ce:	2300      	movs	r3, #0

}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3714      	adds	r7, #20
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr
 80146dc:	2000000c 	.word	0x2000000c
 80146e0:	10624dd3 	.word	0x10624dd3

080146e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80146ec:	4b11      	ldr	r3, [pc, #68]	; (8014734 <SDMMC_GetCmdError+0x50>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4a11      	ldr	r2, [pc, #68]	; (8014738 <SDMMC_GetCmdError+0x54>)
 80146f2:	fba2 2303 	umull	r2, r3, r2, r3
 80146f6:	0a5b      	lsrs	r3, r3, #9
 80146f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80146fc:	fb02 f303 	mul.w	r3, r2, r3
 8014700:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	1e5a      	subs	r2, r3, #1
 8014706:	60fa      	str	r2, [r7, #12]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d102      	bne.n	8014712 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801470c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014710:	e009      	b.n	8014726 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801471a:	2b00      	cmp	r3, #0
 801471c:	d0f1      	beq.n	8014702 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	4a06      	ldr	r2, [pc, #24]	; (801473c <SDMMC_GetCmdError+0x58>)
 8014722:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014724:	2300      	movs	r3, #0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	2000000c 	.word	0x2000000c
 8014738:	10624dd3 	.word	0x10624dd3
 801473c:	002000c5 	.word	0x002000c5

08014740 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014740:	b084      	sub	sp, #16
 8014742:	b580      	push	{r7, lr}
 8014744:	b084      	sub	sp, #16
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	f107 001c 	add.w	r0, r7, #28
 801474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014754:	2b01      	cmp	r3, #1
 8014756:	d120      	bne.n	801479a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801475c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	68da      	ldr	r2, [r3, #12]
 8014768:	4b2a      	ldr	r3, [pc, #168]	; (8014814 <USB_CoreInit+0xd4>)
 801476a:	4013      	ands	r3, r2
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801477e:	2b01      	cmp	r3, #1
 8014780:	d105      	bne.n	801478e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 f9ee 	bl	8014b70 <USB_CoreReset>
 8014794:	4603      	mov	r3, r0
 8014796:	73fb      	strb	r3, [r7, #15]
 8014798:	e01a      	b.n	80147d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f000 f9e2 	bl	8014b70 <USB_CoreReset>
 80147ac:	4603      	mov	r3, r0
 80147ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80147b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d106      	bne.n	80147c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	639a      	str	r2, [r3, #56]	; 0x38
 80147c2:	e005      	b.n	80147d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80147d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d116      	bne.n	8014804 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80147e4:	4b0c      	ldr	r3, [pc, #48]	; (8014818 <USB_CoreInit+0xd8>)
 80147e6:	4313      	orrs	r3, r2
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	689b      	ldr	r3, [r3, #8]
 80147f0:	f043 0206 	orr.w	r2, r3, #6
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	f043 0220 	orr.w	r2, r3, #32
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014804:	7bfb      	ldrb	r3, [r7, #15]
}
 8014806:	4618      	mov	r0, r3
 8014808:	3710      	adds	r7, #16
 801480a:	46bd      	mov	sp, r7
 801480c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014810:	b004      	add	sp, #16
 8014812:	4770      	bx	lr
 8014814:	ffbdffbf 	.word	0xffbdffbf
 8014818:	03ee0000 	.word	0x03ee0000

0801481c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	689b      	ldr	r3, [r3, #8]
 8014828:	f043 0201 	orr.w	r2, r3, #1
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	370c      	adds	r7, #12
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr

0801483e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801483e:	b480      	push	{r7}
 8014840:	b083      	sub	sp, #12
 8014842:	af00      	add	r7, sp, #0
 8014844:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	689b      	ldr	r3, [r3, #8]
 801484a:	f023 0201 	bic.w	r2, r3, #1
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	4618      	mov	r0, r3
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801486c:	2300      	movs	r3, #0
 801486e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801487c:	78fb      	ldrb	r3, [r7, #3]
 801487e:	2b01      	cmp	r3, #1
 8014880:	d115      	bne.n	80148ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801488e:	2001      	movs	r0, #1
 8014890:	f7f0 faac 	bl	8004dec <HAL_Delay>
      ms++;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	3301      	adds	r3, #1
 8014898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f000 f95a 	bl	8014b54 <USB_GetMode>
 80148a0:	4603      	mov	r3, r0
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d01e      	beq.n	80148e4 <USB_SetCurrentMode+0x84>
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2b31      	cmp	r3, #49	; 0x31
 80148aa:	d9f0      	bls.n	801488e <USB_SetCurrentMode+0x2e>
 80148ac:	e01a      	b.n	80148e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80148ae:	78fb      	ldrb	r3, [r7, #3]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d115      	bne.n	80148e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80148c0:	2001      	movs	r0, #1
 80148c2:	f7f0 fa93 	bl	8004dec <HAL_Delay>
      ms++;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	3301      	adds	r3, #1
 80148ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 f941 	bl	8014b54 <USB_GetMode>
 80148d2:	4603      	mov	r3, r0
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d005      	beq.n	80148e4 <USB_SetCurrentMode+0x84>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b31      	cmp	r3, #49	; 0x31
 80148dc:	d9f0      	bls.n	80148c0 <USB_SetCurrentMode+0x60>
 80148de:	e001      	b.n	80148e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80148e0:	2301      	movs	r3, #1
 80148e2:	e005      	b.n	80148f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b32      	cmp	r3, #50	; 0x32
 80148e8:	d101      	bne.n	80148ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80148ea:	2301      	movs	r3, #1
 80148ec:	e000      	b.n	80148f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014902:	2300      	movs	r3, #0
 8014904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3301      	adds	r3, #1
 801490a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	4a13      	ldr	r2, [pc, #76]	; (801495c <USB_FlushTxFifo+0x64>)
 8014910:	4293      	cmp	r3, r2
 8014912:	d901      	bls.n	8014918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014914:	2303      	movs	r3, #3
 8014916:	e01b      	b.n	8014950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	691b      	ldr	r3, [r3, #16]
 801491c:	2b00      	cmp	r3, #0
 801491e:	daf2      	bge.n	8014906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014920:	2300      	movs	r3, #0
 8014922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	019b      	lsls	r3, r3, #6
 8014928:	f043 0220 	orr.w	r2, r3, #32
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	3301      	adds	r3, #1
 8014934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	4a08      	ldr	r2, [pc, #32]	; (801495c <USB_FlushTxFifo+0x64>)
 801493a:	4293      	cmp	r3, r2
 801493c:	d901      	bls.n	8014942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801493e:	2303      	movs	r3, #3
 8014940:	e006      	b.n	8014950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	691b      	ldr	r3, [r3, #16]
 8014946:	f003 0320 	and.w	r3, r3, #32
 801494a:	2b20      	cmp	r3, #32
 801494c:	d0f0      	beq.n	8014930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3714      	adds	r7, #20
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr
 801495c:	00030d40 	.word	0x00030d40

08014960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014960:	b480      	push	{r7}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014968:	2300      	movs	r3, #0
 801496a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3301      	adds	r3, #1
 8014970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	4a11      	ldr	r2, [pc, #68]	; (80149bc <USB_FlushRxFifo+0x5c>)
 8014976:	4293      	cmp	r3, r2
 8014978:	d901      	bls.n	801497e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801497a:	2303      	movs	r3, #3
 801497c:	e018      	b.n	80149b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	691b      	ldr	r3, [r3, #16]
 8014982:	2b00      	cmp	r3, #0
 8014984:	daf2      	bge.n	801496c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014986:	2300      	movs	r3, #0
 8014988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2210      	movs	r2, #16
 801498e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	3301      	adds	r3, #1
 8014994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	4a08      	ldr	r2, [pc, #32]	; (80149bc <USB_FlushRxFifo+0x5c>)
 801499a:	4293      	cmp	r3, r2
 801499c:	d901      	bls.n	80149a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801499e:	2303      	movs	r3, #3
 80149a0:	e006      	b.n	80149b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	691b      	ldr	r3, [r3, #16]
 80149a6:	f003 0310 	and.w	r3, r3, #16
 80149aa:	2b10      	cmp	r3, #16
 80149ac:	d0f0      	beq.n	8014990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3714      	adds	r7, #20
 80149b4:	46bd      	mov	sp, r7
 80149b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ba:	4770      	bx	lr
 80149bc:	00030d40 	.word	0x00030d40

080149c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b089      	sub	sp, #36	; 0x24
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	4611      	mov	r1, r2
 80149cc:	461a      	mov	r2, r3
 80149ce:	460b      	mov	r3, r1
 80149d0:	71fb      	strb	r3, [r7, #7]
 80149d2:	4613      	mov	r3, r2
 80149d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80149de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d123      	bne.n	8014a2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80149e6:	88bb      	ldrh	r3, [r7, #4]
 80149e8:	3303      	adds	r3, #3
 80149ea:	089b      	lsrs	r3, r3, #2
 80149ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80149ee:	2300      	movs	r3, #0
 80149f0:	61bb      	str	r3, [r7, #24]
 80149f2:	e018      	b.n	8014a26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80149f4:	79fb      	ldrb	r3, [r7, #7]
 80149f6:	031a      	lsls	r2, r3, #12
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	4413      	add	r3, r2
 80149fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a00:	461a      	mov	r2, r3
 8014a02:	69fb      	ldr	r3, [r7, #28]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	3301      	adds	r3, #1
 8014a12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a14:	69fb      	ldr	r3, [r7, #28]
 8014a16:	3301      	adds	r3, #1
 8014a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	3301      	adds	r3, #1
 8014a24:	61bb      	str	r3, [r7, #24]
 8014a26:	69ba      	ldr	r2, [r7, #24]
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d3e2      	bcc.n	80149f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3724      	adds	r7, #36	; 0x24
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr

08014a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b08b      	sub	sp, #44	; 0x2c
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014a52:	88fb      	ldrh	r3, [r7, #6]
 8014a54:	089b      	lsrs	r3, r3, #2
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014a5a:	88fb      	ldrh	r3, [r7, #6]
 8014a5c:	f003 0303 	and.w	r3, r3, #3
 8014a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014a62:	2300      	movs	r3, #0
 8014a64:	623b      	str	r3, [r7, #32]
 8014a66:	e014      	b.n	8014a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a6e:	681a      	ldr	r2, [r3, #0]
 8014a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8014a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a76:	3301      	adds	r3, #1
 8014a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a82:	3301      	adds	r3, #1
 8014a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a88:	3301      	adds	r3, #1
 8014a8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014a8c:	6a3b      	ldr	r3, [r7, #32]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	623b      	str	r3, [r7, #32]
 8014a92:	6a3a      	ldr	r2, [r7, #32]
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d3e6      	bcc.n	8014a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014a9a:	8bfb      	ldrh	r3, [r7, #30]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d01e      	beq.n	8014ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014aaa:	461a      	mov	r2, r3
 8014aac:	f107 0310 	add.w	r3, r7, #16
 8014ab0:	6812      	ldr	r2, [r2, #0]
 8014ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014ab4:	693a      	ldr	r2, [r7, #16]
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	00db      	lsls	r3, r3, #3
 8014abc:	fa22 f303 	lsr.w	r3, r2, r3
 8014ac0:	b2da      	uxtb	r2, r3
 8014ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8014ac6:	6a3b      	ldr	r3, [r7, #32]
 8014ac8:	3301      	adds	r3, #1
 8014aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8014acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ace:	3301      	adds	r3, #1
 8014ad0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014ad2:	8bfb      	ldrh	r3, [r7, #30]
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014ad8:	8bfb      	ldrh	r3, [r7, #30]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1ea      	bne.n	8014ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	372c      	adds	r7, #44	; 0x2c
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b085      	sub	sp, #20
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	695b      	ldr	r3, [r3, #20]
 8014af8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	699b      	ldr	r3, [r3, #24]
 8014afe:	68fa      	ldr	r2, [r7, #12]
 8014b00:	4013      	ands	r3, r2
 8014b02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014b04:	68fb      	ldr	r3, [r7, #12]
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3714      	adds	r7, #20
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b10:	4770      	bx	lr

08014b12 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014b12:	b480      	push	{r7}
 8014b14:	b085      	sub	sp, #20
 8014b16:	af00      	add	r7, sp, #0
 8014b18:	6078      	str	r0, [r7, #4]
 8014b1a:	460b      	mov	r3, r1
 8014b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014b22:	78fb      	ldrb	r3, [r7, #3]
 8014b24:	015a      	lsls	r2, r3, #5
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	4413      	add	r3, r2
 8014b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014b32:	78fb      	ldrb	r3, [r7, #3]
 8014b34:	015a      	lsls	r2, r3, #5
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	4413      	add	r3, r2
 8014b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	68ba      	ldr	r2, [r7, #8]
 8014b42:	4013      	ands	r3, r2
 8014b44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014b46:	68bb      	ldr	r3, [r7, #8]
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	3714      	adds	r7, #20
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b52:	4770      	bx	lr

08014b54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	695b      	ldr	r3, [r3, #20]
 8014b60:	f003 0301 	and.w	r3, r3, #1
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	370c      	adds	r7, #12
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr

08014b70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	4a13      	ldr	r2, [pc, #76]	; (8014bd4 <USB_CoreReset+0x64>)
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d901      	bls.n	8014b8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014b8a:	2303      	movs	r3, #3
 8014b8c:	e01b      	b.n	8014bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	691b      	ldr	r3, [r3, #16]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	daf2      	bge.n	8014b7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014b96:	2300      	movs	r3, #0
 8014b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	f043 0201 	orr.w	r2, r3, #1
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	4a09      	ldr	r2, [pc, #36]	; (8014bd4 <USB_CoreReset+0x64>)
 8014bb0:	4293      	cmp	r3, r2
 8014bb2:	d901      	bls.n	8014bb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	e006      	b.n	8014bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	691b      	ldr	r3, [r3, #16]
 8014bbc:	f003 0301 	and.w	r3, r3, #1
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d0f0      	beq.n	8014ba6 <USB_CoreReset+0x36>

  return HAL_OK;
 8014bc4:	2300      	movs	r3, #0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3714      	adds	r7, #20
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	00030d40 	.word	0x00030d40

08014bd8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014bd8:	b084      	sub	sp, #16
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b086      	sub	sp, #24
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
 8014be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d018      	beq.n	8014c54 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8014c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d10a      	bne.n	8014c3e <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	68fa      	ldr	r2, [r7, #12]
 8014c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014c36:	f043 0304 	orr.w	r3, r3, #4
 8014c3a:	6013      	str	r3, [r2, #0]
 8014c3c:	e014      	b.n	8014c68 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	68fa      	ldr	r2, [r7, #12]
 8014c48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014c4c:	f023 0304 	bic.w	r3, r3, #4
 8014c50:	6013      	str	r3, [r2, #0]
 8014c52:	e009      	b.n	8014c68 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	68fa      	ldr	r2, [r7, #12]
 8014c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014c62:	f023 0304 	bic.w	r3, r3, #4
 8014c66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014c68:	2110      	movs	r1, #16
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7ff fe44 	bl	80148f8 <USB_FlushTxFifo>
 8014c70:	4603      	mov	r3, r0
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d001      	beq.n	8014c7a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8014c76:	2301      	movs	r3, #1
 8014c78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f7ff fe70 	bl	8014960 <USB_FlushRxFifo>
 8014c80:	4603      	mov	r3, r0
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d001      	beq.n	8014c8a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8014c86:	2301      	movs	r3, #1
 8014c88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	613b      	str	r3, [r7, #16]
 8014c8e:	e015      	b.n	8014cbc <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	015a      	lsls	r2, r3, #5
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4413      	add	r3, r2
 8014c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ca2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	015a      	lsls	r2, r3, #5
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	4413      	add	r3, r2
 8014cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014cb0:	461a      	mov	r2, r3
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	613b      	str	r3, [r7, #16]
 8014cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbe:	693a      	ldr	r2, [r7, #16]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d3e5      	bcc.n	8014c90 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014cd0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d00b      	beq.n	8014cf6 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ce4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4a13      	ldr	r2, [pc, #76]	; (8014d38 <USB_HostInit+0x160>)
 8014cea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4a13      	ldr	r2, [pc, #76]	; (8014d3c <USB_HostInit+0x164>)
 8014cf0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8014cf4:	e009      	b.n	8014d0a <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2280      	movs	r2, #128	; 0x80
 8014cfa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	4a10      	ldr	r2, [pc, #64]	; (8014d40 <USB_HostInit+0x168>)
 8014d00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4a0f      	ldr	r2, [pc, #60]	; (8014d44 <USB_HostInit+0x16c>)
 8014d06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d105      	bne.n	8014d1c <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	699b      	ldr	r3, [r3, #24]
 8014d14:	f043 0210 	orr.w	r2, r3, #16
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	699a      	ldr	r2, [r3, #24]
 8014d20:	4b09      	ldr	r3, [pc, #36]	; (8014d48 <USB_HostInit+0x170>)
 8014d22:	4313      	orrs	r3, r2
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8014d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3718      	adds	r7, #24
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d34:	b004      	add	sp, #16
 8014d36:	4770      	bx	lr
 8014d38:	01000200 	.word	0x01000200
 8014d3c:	00e00300 	.word	0x00e00300
 8014d40:	00600080 	.word	0x00600080
 8014d44:	004000e0 	.word	0x004000e0
 8014d48:	a3200008 	.word	0xa3200008

08014d4c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b085      	sub	sp, #20
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	460b      	mov	r3, r1
 8014d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014d6a:	f023 0303 	bic.w	r3, r3, #3
 8014d6e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	78fb      	ldrb	r3, [r7, #3]
 8014d7a:	f003 0303 	and.w	r3, r3, #3
 8014d7e:	68f9      	ldr	r1, [r7, #12]
 8014d80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014d84:	4313      	orrs	r3, r2
 8014d86:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014d88:	78fb      	ldrb	r3, [r7, #3]
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d107      	bne.n	8014d9e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d94:	461a      	mov	r2, r3
 8014d96:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8014d9a:	6053      	str	r3, [r2, #4]
 8014d9c:	e00c      	b.n	8014db8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8014d9e:	78fb      	ldrb	r3, [r7, #3]
 8014da0:	2b02      	cmp	r3, #2
 8014da2:	d107      	bne.n	8014db4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014daa:	461a      	mov	r2, r3
 8014dac:	f241 7370 	movw	r3, #6000	; 0x1770
 8014db0:	6053      	str	r3, [r2, #4]
 8014db2:	e001      	b.n	8014db8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3714      	adds	r7, #20
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr

08014dc6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014de6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	68fa      	ldr	r2, [r7, #12]
 8014dec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014df4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8014df6:	2064      	movs	r0, #100	; 0x64
 8014df8:	f7ef fff8 	bl	8004dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e08:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8014e0a:	200a      	movs	r0, #10
 8014e0c:	f7ef ffee 	bl	8004dec <HAL_Delay>

  return HAL_OK;
 8014e10:	2300      	movs	r3, #0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}

08014e1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8014e1a:	b480      	push	{r7}
 8014e1c:	b085      	sub	sp, #20
 8014e1e:	af00      	add	r7, sp, #0
 8014e20:	6078      	str	r0, [r7, #4]
 8014e22:	460b      	mov	r3, r1
 8014e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014e3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d109      	bne.n	8014e5e <USB_DriveVbus+0x44>
 8014e4a:	78fb      	ldrb	r3, [r7, #3]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d106      	bne.n	8014e5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	68fa      	ldr	r2, [r7, #12]
 8014e54:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014e58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014e5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e68:	d109      	bne.n	8014e7e <USB_DriveVbus+0x64>
 8014e6a:	78fb      	ldrb	r3, [r7, #3]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d106      	bne.n	8014e7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	68fa      	ldr	r2, [r7, #12]
 8014e74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014e7e:	2300      	movs	r3, #0
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3714      	adds	r7, #20
 8014e84:	46bd      	mov	sp, r7
 8014e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8a:	4770      	bx	lr

08014e8c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b085      	sub	sp, #20
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	0c5b      	lsrs	r3, r3, #17
 8014eaa:	f003 0303 	and.w	r3, r3, #3
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3714      	adds	r7, #20
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr

08014eba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8014eba:	b480      	push	{r7}
 8014ebc:	b085      	sub	sp, #20
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ecc:	689b      	ldr	r3, [r3, #8]
 8014ece:	b29b      	uxth	r3, r3
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3714      	adds	r7, #20
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b088      	sub	sp, #32
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	4608      	mov	r0, r1
 8014ee6:	4611      	mov	r1, r2
 8014ee8:	461a      	mov	r2, r3
 8014eea:	4603      	mov	r3, r0
 8014eec:	70fb      	strb	r3, [r7, #3]
 8014eee:	460b      	mov	r3, r1
 8014ef0:	70bb      	strb	r3, [r7, #2]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8014efe:	78fb      	ldrb	r3, [r7, #3]
 8014f00:	015a      	lsls	r2, r3, #5
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	4413      	add	r3, r2
 8014f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8014f12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014f16:	2b03      	cmp	r3, #3
 8014f18:	d87e      	bhi.n	8015018 <USB_HC_Init+0x13c>
 8014f1a:	a201      	add	r2, pc, #4	; (adr r2, 8014f20 <USB_HC_Init+0x44>)
 8014f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f20:	08014f31 	.word	0x08014f31
 8014f24:	08014fdb 	.word	0x08014fdb
 8014f28:	08014f31 	.word	0x08014f31
 8014f2c:	08014f9d 	.word	0x08014f9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014f30:	78fb      	ldrb	r3, [r7, #3]
 8014f32:	015a      	lsls	r2, r3, #5
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	4413      	add	r3, r2
 8014f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8014f42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8014f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	da10      	bge.n	8014f6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014f4c:	78fb      	ldrb	r3, [r7, #3]
 8014f4e:	015a      	lsls	r2, r3, #5
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	4413      	add	r3, r2
 8014f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	78fa      	ldrb	r2, [r7, #3]
 8014f5c:	0151      	lsls	r1, r2, #5
 8014f5e:	693a      	ldr	r2, [r7, #16]
 8014f60:	440a      	add	r2, r1
 8014f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8014f6c:	e057      	b.n	801501e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d051      	beq.n	801501e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8014f7a:	78fb      	ldrb	r3, [r7, #3]
 8014f7c:	015a      	lsls	r2, r3, #5
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	4413      	add	r3, r2
 8014f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	78fa      	ldrb	r2, [r7, #3]
 8014f8a:	0151      	lsls	r1, r2, #5
 8014f8c:	693a      	ldr	r2, [r7, #16]
 8014f8e:	440a      	add	r2, r1
 8014f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014f94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8014f98:	60d3      	str	r3, [r2, #12]
      break;
 8014f9a:	e040      	b.n	801501e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014f9c:	78fb      	ldrb	r3, [r7, #3]
 8014f9e:	015a      	lsls	r2, r3, #5
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fa8:	461a      	mov	r2, r3
 8014faa:	f240 639d 	movw	r3, #1693	; 0x69d
 8014fae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014fb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	da34      	bge.n	8015022 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014fb8:	78fb      	ldrb	r3, [r7, #3]
 8014fba:	015a      	lsls	r2, r3, #5
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	4413      	add	r3, r2
 8014fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fc4:	68db      	ldr	r3, [r3, #12]
 8014fc6:	78fa      	ldrb	r2, [r7, #3]
 8014fc8:	0151      	lsls	r1, r2, #5
 8014fca:	693a      	ldr	r2, [r7, #16]
 8014fcc:	440a      	add	r2, r1
 8014fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fd6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8014fd8:	e023      	b.n	8015022 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014fda:	78fb      	ldrb	r3, [r7, #3]
 8014fdc:	015a      	lsls	r2, r3, #5
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	f240 2325 	movw	r3, #549	; 0x225
 8014fec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014fee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	da17      	bge.n	8015026 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8014ff6:	78fb      	ldrb	r3, [r7, #3]
 8014ff8:	015a      	lsls	r2, r3, #5
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	78fa      	ldrb	r2, [r7, #3]
 8015006:	0151      	lsls	r1, r2, #5
 8015008:	693a      	ldr	r2, [r7, #16]
 801500a:	440a      	add	r2, r1
 801500c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015010:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8015014:	60d3      	str	r3, [r2, #12]
      }
      break;
 8015016:	e006      	b.n	8015026 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8015018:	2301      	movs	r3, #1
 801501a:	77fb      	strb	r3, [r7, #31]
      break;
 801501c:	e004      	b.n	8015028 <USB_HC_Init+0x14c>
      break;
 801501e:	bf00      	nop
 8015020:	e002      	b.n	8015028 <USB_HC_Init+0x14c>
      break;
 8015022:	bf00      	nop
 8015024:	e000      	b.n	8015028 <USB_HC_Init+0x14c>
      break;
 8015026:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8015028:	78fb      	ldrb	r3, [r7, #3]
 801502a:	015a      	lsls	r2, r3, #5
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	4413      	add	r3, r2
 8015030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	78fa      	ldrb	r2, [r7, #3]
 8015038:	0151      	lsls	r1, r2, #5
 801503a:	693a      	ldr	r2, [r7, #16]
 801503c:	440a      	add	r2, r1
 801503e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015042:	f043 0302 	orr.w	r3, r3, #2
 8015046:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801504e:	699a      	ldr	r2, [r3, #24]
 8015050:	78fb      	ldrb	r3, [r7, #3]
 8015052:	f003 030f 	and.w	r3, r3, #15
 8015056:	2101      	movs	r1, #1
 8015058:	fa01 f303 	lsl.w	r3, r1, r3
 801505c:	6939      	ldr	r1, [r7, #16]
 801505e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8015062:	4313      	orrs	r3, r2
 8015064:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	699b      	ldr	r3, [r3, #24]
 801506a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8015072:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015076:	2b00      	cmp	r3, #0
 8015078:	da03      	bge.n	8015082 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 801507a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801507e:	61bb      	str	r3, [r7, #24]
 8015080:	e001      	b.n	8015086 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8015082:	2300      	movs	r3, #0
 8015084:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f7ff ff00 	bl	8014e8c <USB_GetHostSpeed>
 801508c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801508e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015092:	2b02      	cmp	r3, #2
 8015094:	d106      	bne.n	80150a4 <USB_HC_Init+0x1c8>
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2b02      	cmp	r3, #2
 801509a:	d003      	beq.n	80150a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801509c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80150a0:	617b      	str	r3, [r7, #20]
 80150a2:	e001      	b.n	80150a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80150a4:	2300      	movs	r3, #0
 80150a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80150a8:	787b      	ldrb	r3, [r7, #1]
 80150aa:	059b      	lsls	r3, r3, #22
 80150ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80150b0:	78bb      	ldrb	r3, [r7, #2]
 80150b2:	02db      	lsls	r3, r3, #11
 80150b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80150b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80150ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150be:	049b      	lsls	r3, r3, #18
 80150c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80150c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80150c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80150c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80150cc:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80150ce:	69bb      	ldr	r3, [r7, #24]
 80150d0:	431a      	orrs	r2, r3
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80150d6:	78fa      	ldrb	r2, [r7, #3]
 80150d8:	0151      	lsls	r1, r2, #5
 80150da:	693a      	ldr	r2, [r7, #16]
 80150dc:	440a      	add	r2, r1
 80150de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80150e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80150e6:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80150e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150ec:	2b03      	cmp	r3, #3
 80150ee:	d003      	beq.n	80150f8 <USB_HC_Init+0x21c>
 80150f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d10f      	bne.n	8015118 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80150f8:	78fb      	ldrb	r3, [r7, #3]
 80150fa:	015a      	lsls	r2, r3, #5
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	4413      	add	r3, r2
 8015100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	78fa      	ldrb	r2, [r7, #3]
 8015108:	0151      	lsls	r1, r2, #5
 801510a:	693a      	ldr	r2, [r7, #16]
 801510c:	440a      	add	r2, r1
 801510e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015116:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8015118:	7ffb      	ldrb	r3, [r7, #31]
}
 801511a:	4618      	mov	r0, r3
 801511c:	3720      	adds	r7, #32
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop

08015124 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b08c      	sub	sp, #48	; 0x30
 8015128:	af02      	add	r7, sp, #8
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	4613      	mov	r3, r2
 8015130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	785b      	ldrb	r3, [r3, #1]
 801513a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 801513c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015140:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801514a:	2b00      	cmp	r3, #0
 801514c:	d02d      	beq.n	80151aa <USB_HC_StartXfer+0x86>
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	791b      	ldrb	r3, [r3, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d129      	bne.n	80151aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8015156:	79fb      	ldrb	r3, [r7, #7]
 8015158:	2b01      	cmp	r3, #1
 801515a:	d117      	bne.n	801518c <USB_HC_StartXfer+0x68>
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	79db      	ldrb	r3, [r3, #7]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d003      	beq.n	801516c <USB_HC_StartXfer+0x48>
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	79db      	ldrb	r3, [r3, #7]
 8015168:	2b02      	cmp	r3, #2
 801516a:	d10f      	bne.n	801518c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	015a      	lsls	r2, r3, #5
 8015170:	6a3b      	ldr	r3, [r7, #32]
 8015172:	4413      	add	r3, r2
 8015174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	69fa      	ldr	r2, [r7, #28]
 801517c:	0151      	lsls	r1, r2, #5
 801517e:	6a3a      	ldr	r2, [r7, #32]
 8015180:	440a      	add	r2, r1
 8015182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801518a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 801518c:	79fb      	ldrb	r3, [r7, #7]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d10b      	bne.n	80151aa <USB_HC_StartXfer+0x86>
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	795b      	ldrb	r3, [r3, #5]
 8015196:	2b01      	cmp	r3, #1
 8015198:	d107      	bne.n	80151aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	785b      	ldrb	r3, [r3, #1]
 801519e:	4619      	mov	r1, r3
 80151a0:	68f8      	ldr	r0, [r7, #12]
 80151a2:	f000 fa0f 	bl	80155c4 <USB_DoPing>
      return HAL_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	e0f8      	b.n	801539c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	695b      	ldr	r3, [r3, #20]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d018      	beq.n	80151e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	695b      	ldr	r3, [r3, #20]
 80151b6:	68ba      	ldr	r2, [r7, #8]
 80151b8:	8912      	ldrh	r2, [r2, #8]
 80151ba:	4413      	add	r3, r2
 80151bc:	3b01      	subs	r3, #1
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	8912      	ldrh	r2, [r2, #8]
 80151c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80151c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80151c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80151ca:	8b7b      	ldrh	r3, [r7, #26]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d90b      	bls.n	80151e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80151d0:	8b7b      	ldrh	r3, [r7, #26]
 80151d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80151d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80151d6:	68ba      	ldr	r2, [r7, #8]
 80151d8:	8912      	ldrh	r2, [r2, #8]
 80151da:	fb03 f202 	mul.w	r2, r3, r2
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	611a      	str	r2, [r3, #16]
 80151e2:	e001      	b.n	80151e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80151e4:	2301      	movs	r3, #1
 80151e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	78db      	ldrb	r3, [r3, #3]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d007      	beq.n	8015200 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80151f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	8912      	ldrh	r2, [r2, #8]
 80151f6:	fb03 f202 	mul.w	r2, r3, r2
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	611a      	str	r2, [r3, #16]
 80151fe:	e003      	b.n	8015208 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	695a      	ldr	r2, [r3, #20]
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	691b      	ldr	r3, [r3, #16]
 801520c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015212:	04d9      	lsls	r1, r3, #19
 8015214:	4b63      	ldr	r3, [pc, #396]	; (80153a4 <USB_HC_StartXfer+0x280>)
 8015216:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015218:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	7a9b      	ldrb	r3, [r3, #10]
 801521e:	075b      	lsls	r3, r3, #29
 8015220:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015224:	69f9      	ldr	r1, [r7, #28]
 8015226:	0148      	lsls	r0, r1, #5
 8015228:	6a39      	ldr	r1, [r7, #32]
 801522a:	4401      	add	r1, r0
 801522c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015230:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015232:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8015234:	79fb      	ldrb	r3, [r7, #7]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d009      	beq.n	801524e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	68d9      	ldr	r1, [r3, #12]
 801523e:	69fb      	ldr	r3, [r7, #28]
 8015240:	015a      	lsls	r2, r3, #5
 8015242:	6a3b      	ldr	r3, [r7, #32]
 8015244:	4413      	add	r3, r2
 8015246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801524a:	460a      	mov	r2, r1
 801524c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801524e:	6a3b      	ldr	r3, [r7, #32]
 8015250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	f003 0301 	and.w	r3, r3, #1
 801525a:	2b00      	cmp	r3, #0
 801525c:	bf0c      	ite	eq
 801525e:	2301      	moveq	r3, #1
 8015260:	2300      	movne	r3, #0
 8015262:	b2db      	uxtb	r3, r3
 8015264:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	015a      	lsls	r2, r3, #5
 801526a:	6a3b      	ldr	r3, [r7, #32]
 801526c:	4413      	add	r3, r2
 801526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	69fa      	ldr	r2, [r7, #28]
 8015276:	0151      	lsls	r1, r2, #5
 8015278:	6a3a      	ldr	r2, [r7, #32]
 801527a:	440a      	add	r2, r1
 801527c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015280:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015284:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	015a      	lsls	r2, r3, #5
 801528a:	6a3b      	ldr	r3, [r7, #32]
 801528c:	4413      	add	r3, r2
 801528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	7e7b      	ldrb	r3, [r7, #25]
 8015296:	075b      	lsls	r3, r3, #29
 8015298:	69f9      	ldr	r1, [r7, #28]
 801529a:	0148      	lsls	r0, r1, #5
 801529c:	6a39      	ldr	r1, [r7, #32]
 801529e:	4401      	add	r1, r0
 80152a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80152a4:	4313      	orrs	r3, r2
 80152a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	015a      	lsls	r2, r3, #5
 80152ac:	6a3b      	ldr	r3, [r7, #32]
 80152ae:	4413      	add	r3, r2
 80152b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80152b8:	693b      	ldr	r3, [r7, #16]
 80152ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80152be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	78db      	ldrb	r3, [r3, #3]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d004      	beq.n	80152d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80152ce:	613b      	str	r3, [r7, #16]
 80152d0:	e003      	b.n	80152da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80152d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80152e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	015a      	lsls	r2, r3, #5
 80152e6:	6a3b      	ldr	r3, [r7, #32]
 80152e8:	4413      	add	r3, r2
 80152ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152ee:	461a      	mov	r2, r3
 80152f0:	693b      	ldr	r3, [r7, #16]
 80152f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80152f4:	79fb      	ldrb	r3, [r7, #7]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d001      	beq.n	80152fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80152fa:	2300      	movs	r3, #0
 80152fc:	e04e      	b.n	801539c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	78db      	ldrb	r3, [r3, #3]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d149      	bne.n	801539a <USB_HC_StartXfer+0x276>
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d045      	beq.n	801539a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	79db      	ldrb	r3, [r3, #7]
 8015312:	2b03      	cmp	r3, #3
 8015314:	d830      	bhi.n	8015378 <USB_HC_StartXfer+0x254>
 8015316:	a201      	add	r2, pc, #4	; (adr r2, 801531c <USB_HC_StartXfer+0x1f8>)
 8015318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801531c:	0801532d 	.word	0x0801532d
 8015320:	08015351 	.word	0x08015351
 8015324:	0801532d 	.word	0x0801532d
 8015328:	08015351 	.word	0x08015351
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	695b      	ldr	r3, [r3, #20]
 8015330:	3303      	adds	r3, #3
 8015332:	089b      	lsrs	r3, r3, #2
 8015334:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015336:	8afa      	ldrh	r2, [r7, #22]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801533c:	b29b      	uxth	r3, r3
 801533e:	429a      	cmp	r2, r3
 8015340:	d91c      	bls.n	801537c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	699b      	ldr	r3, [r3, #24]
 8015346:	f043 0220 	orr.w	r2, r3, #32
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	619a      	str	r2, [r3, #24]
        }
        break;
 801534e:	e015      	b.n	801537c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	695b      	ldr	r3, [r3, #20]
 8015354:	3303      	adds	r3, #3
 8015356:	089b      	lsrs	r3, r3, #2
 8015358:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801535a:	8afa      	ldrh	r2, [r7, #22]
 801535c:	6a3b      	ldr	r3, [r7, #32]
 801535e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015362:	691b      	ldr	r3, [r3, #16]
 8015364:	b29b      	uxth	r3, r3
 8015366:	429a      	cmp	r2, r3
 8015368:	d90a      	bls.n	8015380 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	699b      	ldr	r3, [r3, #24]
 801536e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	619a      	str	r2, [r3, #24]
        }
        break;
 8015376:	e003      	b.n	8015380 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015378:	bf00      	nop
 801537a:	e002      	b.n	8015382 <USB_HC_StartXfer+0x25e>
        break;
 801537c:	bf00      	nop
 801537e:	e000      	b.n	8015382 <USB_HC_StartXfer+0x25e>
        break;
 8015380:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	68d9      	ldr	r1, [r3, #12]
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	785a      	ldrb	r2, [r3, #1]
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	695b      	ldr	r3, [r3, #20]
 801538e:	b29b      	uxth	r3, r3
 8015390:	2000      	movs	r0, #0
 8015392:	9000      	str	r0, [sp, #0]
 8015394:	68f8      	ldr	r0, [r7, #12]
 8015396:	f7ff fb13 	bl	80149c0 <USB_WritePacket>
  }

  return HAL_OK;
 801539a:	2300      	movs	r3, #0
}
 801539c:	4618      	mov	r0, r3
 801539e:	3728      	adds	r7, #40	; 0x28
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	1ff80000 	.word	0x1ff80000

080153a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b085      	sub	sp, #20
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80153ba:	695b      	ldr	r3, [r3, #20]
 80153bc:	b29b      	uxth	r3, r3
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3714      	adds	r7, #20
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80153ca:	b480      	push	{r7}
 80153cc:	b089      	sub	sp, #36	; 0x24
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	460b      	mov	r3, r1
 80153d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80153da:	78fb      	ldrb	r3, [r7, #3]
 80153dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80153de:	2300      	movs	r3, #0
 80153e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	015a      	lsls	r2, r3, #5
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	4413      	add	r3, r2
 80153ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	0c9b      	lsrs	r3, r3, #18
 80153f2:	f003 0303 	and.w	r3, r3, #3
 80153f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	015a      	lsls	r2, r3, #5
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	4413      	add	r3, r2
 8015400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	0fdb      	lsrs	r3, r3, #31
 8015408:	f003 0301 	and.w	r3, r3, #1
 801540c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	689b      	ldr	r3, [r3, #8]
 8015412:	f003 0320 	and.w	r3, r3, #32
 8015416:	2b20      	cmp	r3, #32
 8015418:	d104      	bne.n	8015424 <USB_HC_Halt+0x5a>
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d101      	bne.n	8015424 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	e0c8      	b.n	80155b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d002      	beq.n	8015430 <USB_HC_Halt+0x66>
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	2b02      	cmp	r3, #2
 801542e:	d163      	bne.n	80154f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	015a      	lsls	r2, r3, #5
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	4413      	add	r3, r2
 8015438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	69ba      	ldr	r2, [r7, #24]
 8015440:	0151      	lsls	r1, r2, #5
 8015442:	69fa      	ldr	r2, [r7, #28]
 8015444:	440a      	add	r2, r1
 8015446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801544a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801544e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	f003 0320 	and.w	r3, r3, #32
 8015458:	2b00      	cmp	r3, #0
 801545a:	f040 80ab 	bne.w	80155b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015462:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015466:	2b00      	cmp	r3, #0
 8015468:	d133      	bne.n	80154d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801546a:	69bb      	ldr	r3, [r7, #24]
 801546c:	015a      	lsls	r2, r3, #5
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	4413      	add	r3, r2
 8015472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	69ba      	ldr	r2, [r7, #24]
 801547a:	0151      	lsls	r1, r2, #5
 801547c:	69fa      	ldr	r2, [r7, #28]
 801547e:	440a      	add	r2, r1
 8015480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015488:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	015a      	lsls	r2, r3, #5
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	4413      	add	r3, r2
 8015492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	69ba      	ldr	r2, [r7, #24]
 801549a:	0151      	lsls	r1, r2, #5
 801549c:	69fa      	ldr	r2, [r7, #28]
 801549e:	440a      	add	r2, r1
 80154a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80154a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	3301      	adds	r3, #1
 80154ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80154b6:	d81d      	bhi.n	80154f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	015a      	lsls	r2, r3, #5
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	4413      	add	r3, r2
 80154c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80154ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80154ce:	d0ec      	beq.n	80154aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80154d0:	e070      	b.n	80155b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	015a      	lsls	r2, r3, #5
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	4413      	add	r3, r2
 80154da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	69ba      	ldr	r2, [r7, #24]
 80154e2:	0151      	lsls	r1, r2, #5
 80154e4:	69fa      	ldr	r2, [r7, #28]
 80154e6:	440a      	add	r2, r1
 80154e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80154f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80154f2:	e05f      	b.n	80155b4 <USB_HC_Halt+0x1ea>
            break;
 80154f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80154f6:	e05d      	b.n	80155b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80154f8:	69bb      	ldr	r3, [r7, #24]
 80154fa:	015a      	lsls	r2, r3, #5
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	4413      	add	r3, r2
 8015500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	69ba      	ldr	r2, [r7, #24]
 8015508:	0151      	lsls	r1, r2, #5
 801550a:	69fa      	ldr	r2, [r7, #28]
 801550c:	440a      	add	r2, r1
 801550e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015516:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801551e:	691b      	ldr	r3, [r3, #16]
 8015520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015524:	2b00      	cmp	r3, #0
 8015526:	d133      	bne.n	8015590 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	015a      	lsls	r2, r3, #5
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	4413      	add	r3, r2
 8015530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	69ba      	ldr	r2, [r7, #24]
 8015538:	0151      	lsls	r1, r2, #5
 801553a:	69fa      	ldr	r2, [r7, #28]
 801553c:	440a      	add	r2, r1
 801553e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015546:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	015a      	lsls	r2, r3, #5
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	4413      	add	r3, r2
 8015550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	69ba      	ldr	r2, [r7, #24]
 8015558:	0151      	lsls	r1, r2, #5
 801555a:	69fa      	ldr	r2, [r7, #28]
 801555c:	440a      	add	r2, r1
 801555e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015566:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	3301      	adds	r3, #1
 801556c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015574:	d81d      	bhi.n	80155b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	015a      	lsls	r2, r3, #5
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	4413      	add	r3, r2
 801557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801558c:	d0ec      	beq.n	8015568 <USB_HC_Halt+0x19e>
 801558e:	e011      	b.n	80155b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	015a      	lsls	r2, r3, #5
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	4413      	add	r3, r2
 8015598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	69ba      	ldr	r2, [r7, #24]
 80155a0:	0151      	lsls	r1, r2, #5
 80155a2:	69fa      	ldr	r2, [r7, #28]
 80155a4:	440a      	add	r2, r1
 80155a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80155ae:	6013      	str	r3, [r2, #0]
 80155b0:	e000      	b.n	80155b4 <USB_HC_Halt+0x1ea>
          break;
 80155b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80155b4:	2300      	movs	r3, #0
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3724      	adds	r7, #36	; 0x24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
	...

080155c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b087      	sub	sp, #28
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	460b      	mov	r3, r1
 80155ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80155d4:	78fb      	ldrb	r3, [r7, #3]
 80155d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80155d8:	2301      	movs	r3, #1
 80155da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	04da      	lsls	r2, r3, #19
 80155e0:	4b15      	ldr	r3, [pc, #84]	; (8015638 <USB_DoPing+0x74>)
 80155e2:	4013      	ands	r3, r2
 80155e4:	693a      	ldr	r2, [r7, #16]
 80155e6:	0151      	lsls	r1, r2, #5
 80155e8:	697a      	ldr	r2, [r7, #20]
 80155ea:	440a      	add	r2, r1
 80155ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80155f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	015a      	lsls	r2, r3, #5
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	4413      	add	r3, r2
 80155fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801560c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015614:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	015a      	lsls	r2, r3, #5
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	4413      	add	r3, r2
 801561e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015622:	461a      	mov	r2, r3
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015628:	2300      	movs	r3, #0
}
 801562a:	4618      	mov	r0, r3
 801562c:	371c      	adds	r7, #28
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr
 8015636:	bf00      	nop
 8015638:	1ff80000 	.word	0x1ff80000

0801563c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b088      	sub	sp, #32
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 801564c:	2300      	movs	r3, #0
 801564e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7ff f8f4 	bl	801483e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015656:	2110      	movs	r1, #16
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7ff f94d 	bl	80148f8 <USB_FlushTxFifo>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d001      	beq.n	8015668 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8015664:	2301      	movs	r3, #1
 8015666:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f7ff f979 	bl	8014960 <USB_FlushRxFifo>
 801566e:	4603      	mov	r3, r0
 8015670:	2b00      	cmp	r3, #0
 8015672:	d001      	beq.n	8015678 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8015674:	2301      	movs	r3, #1
 8015676:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015678:	2300      	movs	r3, #0
 801567a:	61bb      	str	r3, [r7, #24]
 801567c:	e01f      	b.n	80156be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	015a      	lsls	r2, r3, #5
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	4413      	add	r3, r2
 8015686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801569c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80156a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	015a      	lsls	r2, r3, #5
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	4413      	add	r3, r2
 80156ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156b2:	461a      	mov	r2, r3
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	3301      	adds	r3, #1
 80156bc:	61bb      	str	r3, [r7, #24]
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	2b0f      	cmp	r3, #15
 80156c2:	d9dc      	bls.n	801567e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80156c4:	2300      	movs	r3, #0
 80156c6:	61bb      	str	r3, [r7, #24]
 80156c8:	e034      	b.n	8015734 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80156ca:	69bb      	ldr	r3, [r7, #24]
 80156cc:	015a      	lsls	r2, r3, #5
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	4413      	add	r3, r2
 80156d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80156e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80156e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80156f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	015a      	lsls	r2, r3, #5
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	4413      	add	r3, r2
 80156fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156fe:	461a      	mov	r2, r3
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	3301      	adds	r3, #1
 8015708:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015710:	d80c      	bhi.n	801572c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	015a      	lsls	r2, r3, #5
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	4413      	add	r3, r2
 801571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015728:	d0ec      	beq.n	8015704 <USB_StopHost+0xc8>
 801572a:	e000      	b.n	801572e <USB_StopHost+0xf2>
        break;
 801572c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801572e:	69bb      	ldr	r3, [r7, #24]
 8015730:	3301      	adds	r3, #1
 8015732:	61bb      	str	r3, [r7, #24]
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	2b0f      	cmp	r3, #15
 8015738:	d9c7      	bls.n	80156ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015740:	461a      	mov	r2, r3
 8015742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015746:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801574e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f7ff f863 	bl	801481c <USB_EnableGlobalInt>

  return ret;
 8015756:	7ffb      	ldrb	r3, [r7, #31]
}
 8015758:	4618      	mov	r0, r3
 801575a:	3720      	adds	r7, #32
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	60b9      	str	r1, [r7, #8]
 801576a:	4613      	mov	r3, r2
 801576c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d101      	bne.n	8015778 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8015774:	2302      	movs	r3, #2
 8015776:	e029      	b.n	80157cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	79fa      	ldrb	r2, [r7, #7]
 801577c:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2200      	movs	r2, #0
 8015784:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	2200      	movs	r2, #0
 801578c:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f000 f81f 	bl	80157d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2200      	movs	r2, #0
 801579a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2200      	movs	r2, #0
 80157a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2200      	movs	r2, #0
 80157aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	2200      	movs	r2, #0
 80157b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d003      	beq.n	80157c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	68ba      	ldr	r2, [r7, #8]
 80157c0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f7ef f861 	bl	800488c <USBH_LL_Init>

  return USBH_OK;
 80157ca:	2300      	movs	r3, #0
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3710      	adds	r7, #16
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80157dc:	2300      	movs	r3, #0
 80157de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80157e0:	2300      	movs	r3, #0
 80157e2:	60fb      	str	r3, [r7, #12]
 80157e4:	e00a      	b.n	80157fc <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 80157e6:	687a      	ldr	r2, [r7, #4]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	4413      	add	r3, r2
 80157f2:	2200      	movs	r2, #0
 80157f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3301      	adds	r3, #1
 80157fa:	60fb      	str	r3, [r7, #12]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2b0f      	cmp	r3, #15
 8015800:	d9f1      	bls.n	80157e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015802:	2300      	movs	r3, #0
 8015804:	60fb      	str	r3, [r7, #12]
 8015806:	e009      	b.n	801581c <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	4413      	add	r3, r2
 801580e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015812:	2200      	movs	r2, #0
 8015814:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	3301      	adds	r3, #1
 801581a:	60fb      	str	r3, [r7, #12]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015822:	d3f1      	bcc.n	8015808 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2200      	movs	r2, #0
 8015828:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2200      	movs	r2, #0
 801582e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2201      	movs	r2, #1
 8015834:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2200      	movs	r2, #0
 801583a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2201      	movs	r2, #1
 8015842:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2240      	movs	r2, #64	; 0x40
 8015848:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2200      	movs	r2, #0
 801584e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2200      	movs	r2, #0
 8015854:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2201      	movs	r2, #1
 801585c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2200      	movs	r2, #0
 8015864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	331c      	adds	r3, #28
 8015874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015878:	2100      	movs	r1, #0
 801587a:	4618      	mov	r0, r3
 801587c:	f001 fd96 	bl	80173ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015886:	f44f 7200 	mov.w	r2, #512	; 0x200
 801588a:	2100      	movs	r1, #0
 801588c:	4618      	mov	r0, r3
 801588e:	f001 fd8d 	bl	80173ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015898:	2212      	movs	r2, #18
 801589a:	2100      	movs	r1, #0
 801589c:	4618      	mov	r0, r3
 801589e:	f001 fd85 	bl	80173ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80158a8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80158ac:	2100      	movs	r1, #0
 80158ae:	4618      	mov	r0, r3
 80158b0:	f001 fd7c 	bl	80173ac <memset>

  return USBH_OK;
 80158b4:	2300      	movs	r3, #0
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	3710      	adds	r7, #16
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}

080158be <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80158be:	b480      	push	{r7}
 80158c0:	b085      	sub	sp, #20
 80158c2:	af00      	add	r7, sp, #0
 80158c4:	6078      	str	r0, [r7, #4]
 80158c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80158c8:	2300      	movs	r3, #0
 80158ca:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d017      	beq.n	8015902 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10f      	bne.n	80158fc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80158e2:	1c59      	adds	r1, r3, #1
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80158f0:	6839      	ldr	r1, [r7, #0]
 80158f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80158f6:	2300      	movs	r3, #0
 80158f8:	73fb      	strb	r3, [r7, #15]
 80158fa:	e004      	b.n	8015906 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80158fc:	2302      	movs	r3, #2
 80158fe:	73fb      	strb	r3, [r7, #15]
 8015900:	e001      	b.n	8015906 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015902:	2302      	movs	r3, #2
 8015904:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015906:	7bfb      	ldrb	r3, [r7, #15]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3714      	adds	r7, #20
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015914:	b480      	push	{r7}
 8015916:	b085      	sub	sp, #20
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	460b      	mov	r3, r1
 801591e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015920:	2300      	movs	r3, #0
 8015922:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801592a:	78fa      	ldrb	r2, [r7, #3]
 801592c:	429a      	cmp	r2, r3
 801592e:	d204      	bcs.n	801593a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	78fa      	ldrb	r2, [r7, #3]
 8015934:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015938:	e001      	b.n	801593e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801593a:	2302      	movs	r3, #2
 801593c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015940:	4618      	mov	r0, r3
 8015942:	3714      	adds	r7, #20
 8015944:	46bd      	mov	sp, r7
 8015946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594a:	4770      	bx	lr

0801594c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801594c:	b480      	push	{r7}
 801594e:	b087      	sub	sp, #28
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	4608      	mov	r0, r1
 8015956:	4611      	mov	r1, r2
 8015958:	461a      	mov	r2, r3
 801595a:	4603      	mov	r3, r0
 801595c:	70fb      	strb	r3, [r7, #3]
 801595e:	460b      	mov	r3, r1
 8015960:	70bb      	strb	r3, [r7, #2]
 8015962:	4613      	mov	r3, r2
 8015964:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015966:	2300      	movs	r3, #0
 8015968:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 801596a:	2300      	movs	r3, #0
 801596c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015974:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015976:	e025      	b.n	80159c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015978:	7dfb      	ldrb	r3, [r7, #23]
 801597a:	221a      	movs	r2, #26
 801597c:	fb02 f303 	mul.w	r3, r2, r3
 8015980:	3308      	adds	r3, #8
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	4413      	add	r3, r2
 8015986:	3302      	adds	r3, #2
 8015988:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	795b      	ldrb	r3, [r3, #5]
 801598e:	78fa      	ldrb	r2, [r7, #3]
 8015990:	429a      	cmp	r2, r3
 8015992:	d002      	beq.n	801599a <USBH_FindInterface+0x4e>
 8015994:	78fb      	ldrb	r3, [r7, #3]
 8015996:	2bff      	cmp	r3, #255	; 0xff
 8015998:	d111      	bne.n	80159be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801599e:	78ba      	ldrb	r2, [r7, #2]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d002      	beq.n	80159aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80159a4:	78bb      	ldrb	r3, [r7, #2]
 80159a6:	2bff      	cmp	r3, #255	; 0xff
 80159a8:	d109      	bne.n	80159be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80159ae:	787a      	ldrb	r2, [r7, #1]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d002      	beq.n	80159ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80159b4:	787b      	ldrb	r3, [r7, #1]
 80159b6:	2bff      	cmp	r3, #255	; 0xff
 80159b8:	d101      	bne.n	80159be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80159ba:	7dfb      	ldrb	r3, [r7, #23]
 80159bc:	e006      	b.n	80159cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80159be:	7dfb      	ldrb	r3, [r7, #23]
 80159c0:	3301      	adds	r3, #1
 80159c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80159c4:	7dfb      	ldrb	r3, [r7, #23]
 80159c6:	2b09      	cmp	r3, #9
 80159c8:	d9d6      	bls.n	8015978 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80159ca:	23ff      	movs	r3, #255	; 0xff
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	371c      	adds	r7, #28
 80159d0:	46bd      	mov	sp, r7
 80159d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d6:	4770      	bx	lr

080159d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f7ee ff8f 	bl	8004904 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80159e6:	2101      	movs	r1, #1
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f7ef f8a8 	bl	8004b3e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80159ee:	2300      	movs	r3, #0
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3708      	adds	r7, #8
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8015a00:	2100      	movs	r1, #0
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f7ef f89b 	bl	8004b3e <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7ee ff96 	bl	800493a <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	791b      	ldrb	r3, [r3, #4]
 8015a12:	4619      	mov	r1, r3
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f001 fb6c 	bl	80170f2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	795b      	ldrb	r3, [r3, #5]
 8015a1e:	4619      	mov	r1, r3
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f001 fb66 	bl	80170f2 <USBH_FreePipe>

  return USBH_OK;
 8015a26:	2300      	movs	r3, #0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b088      	sub	sp, #32
 8015a34:	af04      	add	r7, sp, #16
 8015a36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015a38:	2302      	movs	r3, #2
 8015a3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015a46:	b2db      	uxtb	r3, r3
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d102      	bne.n	8015a52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2203      	movs	r2, #3
 8015a50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	2b0b      	cmp	r3, #11
 8015a5a:	f200 81c0 	bhi.w	8015dde <USBH_Process+0x3ae>
 8015a5e:	a201      	add	r2, pc, #4	; (adr r2, 8015a64 <USBH_Process+0x34>)
 8015a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a64:	08015a95 	.word	0x08015a95
 8015a68:	08015ac7 	.word	0x08015ac7
 8015a6c:	08015b2f 	.word	0x08015b2f
 8015a70:	08015d79 	.word	0x08015d79
 8015a74:	08015ddf 	.word	0x08015ddf
 8015a78:	08015bd3 	.word	0x08015bd3
 8015a7c:	08015d1f 	.word	0x08015d1f
 8015a80:	08015c09 	.word	0x08015c09
 8015a84:	08015c29 	.word	0x08015c29
 8015a88:	08015c49 	.word	0x08015c49
 8015a8c:	08015c8d 	.word	0x08015c8d
 8015a90:	08015d61 	.word	0x08015d61
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015a9a:	b2db      	uxtb	r3, r3
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f000 81a0 	beq.w	8015de2 <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015aa8:	20c8      	movs	r0, #200	; 0xc8
 8015aaa:	f7ef f88f 	bl	8004bcc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ee ff85 	bl	80049be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015ac4:	e18d      	b.n	8015de2 <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d107      	bne.n	8015ae0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2202      	movs	r2, #2
 8015adc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015ade:	e18f      	b.n	8015e00 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015aea:	d914      	bls.n	8015b16 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015af2:	3301      	adds	r3, #1
 8015af4:	b2da      	uxtb	r2, r3
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015b02:	2b03      	cmp	r3, #3
 8015b04:	d903      	bls.n	8015b0e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	220d      	movs	r2, #13
 8015b0a:	701a      	strb	r2, [r3, #0]
      break;
 8015b0c:	e178      	b.n	8015e00 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2200      	movs	r2, #0
 8015b12:	701a      	strb	r2, [r3, #0]
      break;
 8015b14:	e174      	b.n	8015e00 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015b1c:	f103 020a 	add.w	r2, r3, #10
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015b26:	200a      	movs	r0, #10
 8015b28:	f7ef f850 	bl	8004bcc <USBH_Delay>
      break;
 8015b2c:	e168      	b.n	8015e00 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d005      	beq.n	8015b44 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015b3e:	2104      	movs	r1, #4
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015b44:	2064      	movs	r0, #100	; 0x64
 8015b46:	f7ef f841 	bl	8004bcc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f7ee ff10 	bl	8004970 <USBH_LL_GetSpeed>
 8015b50:	4603      	mov	r3, r0
 8015b52:	461a      	mov	r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	2205      	movs	r2, #5
 8015b5e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8015b60:	2100      	movs	r1, #0
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f001 faa3 	bl	80170ae <USBH_AllocPipe>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8015b70:	2180      	movs	r1, #128	; 0x80
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f001 fa9b 	bl	80170ae <USBH_AllocPipe>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	7919      	ldrb	r1, [r3, #4]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015b90:	687a      	ldr	r2, [r7, #4]
 8015b92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015b94:	b292      	uxth	r2, r2
 8015b96:	9202      	str	r2, [sp, #8]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	9201      	str	r2, [sp, #4]
 8015b9c:	9300      	str	r3, [sp, #0]
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2280      	movs	r2, #128	; 0x80
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f001 fa54 	bl	8017050 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7959      	ldrb	r1, [r3, #5]
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015bbc:	b292      	uxth	r2, r2
 8015bbe:	9202      	str	r2, [sp, #8]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	9201      	str	r2, [sp, #4]
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2200      	movs	r2, #0
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f001 fa40 	bl	8017050 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015bd0:	e116      	b.n	8015e00 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f000 f91a 	bl	8015e0c <USBH_HandleEnum>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015bdc:	7bbb      	ldrb	r3, [r7, #14]
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f040 8100 	bne.w	8015de6 <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2200      	movs	r2, #0
 8015bea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d103      	bne.n	8015c00 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2208      	movs	r2, #8
 8015bfc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015bfe:	e0f2      	b.n	8015de6 <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2207      	movs	r2, #7
 8015c04:	701a      	strb	r2, [r3, #0]
      break;
 8015c06:	e0ee      	b.n	8015de6 <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	f000 80eb 	beq.w	8015dea <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2208      	movs	r2, #8
 8015c24:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8015c26:	e0e0      	b.n	8015dea <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	4619      	mov	r1, r3
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f000 fc41 	bl	80164ba <USBH_SetCfg>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f040 80d7 	bne.w	8015dee <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2209      	movs	r2, #9
 8015c44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015c46:	e0d2      	b.n	8015dee <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8015c4e:	f003 0320 	and.w	r3, r3, #32
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d016      	beq.n	8015c84 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8015c56:	2101      	movs	r1, #1
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 fc51 	bl	8016500 <USBH_SetFeature>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015c62:	7bbb      	ldrb	r3, [r7, #14]
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d103      	bne.n	8015c72 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	220a      	movs	r2, #10
 8015c6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015c70:	e0bf      	b.n	8015df2 <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 8015c72:	7bbb      	ldrb	r3, [r7, #14]
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	2b03      	cmp	r3, #3
 8015c78:	f040 80bb 	bne.w	8015df2 <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	220a      	movs	r2, #10
 8015c80:	701a      	strb	r2, [r3, #0]
      break;
 8015c82:	e0b6      	b.n	8015df2 <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	220a      	movs	r2, #10
 8015c88:	701a      	strb	r2, [r3, #0]
      break;
 8015c8a:	e0b2      	b.n	8015df2 <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f000 80af 	beq.w	8015df6 <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73fb      	strb	r3, [r7, #15]
 8015ca4:	e018      	b.n	8015cd8 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015ca6:	7bfa      	ldrb	r2, [r7, #15]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb2:	791a      	ldrb	r2, [r3, #4]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d109      	bne.n	8015cd2 <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8015cbe:	7bfa      	ldrb	r2, [r7, #15]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015cc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8015cd0:	e005      	b.n	8015cde <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	73fb      	strb	r3, [r7, #15]
 8015cd8:	7bfb      	ldrb	r3, [r7, #15]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d0e3      	beq.n	8015ca6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d016      	beq.n	8015d16 <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015cee:	689b      	ldr	r3, [r3, #8]
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	4798      	blx	r3
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d109      	bne.n	8015d0e <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2206      	movs	r2, #6
 8015cfe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d06:	2103      	movs	r1, #3
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015d0c:	e073      	b.n	8015df6 <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	220d      	movs	r2, #13
 8015d12:	701a      	strb	r2, [r3, #0]
      break;
 8015d14:	e06f      	b.n	8015df6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	220d      	movs	r2, #13
 8015d1a:	701a      	strb	r2, [r3, #0]
      break;
 8015d1c:	e06b      	b.n	8015df6 <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d017      	beq.n	8015d58 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d2e:	691b      	ldr	r3, [r3, #16]
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	4798      	blx	r3
 8015d34:	4603      	mov	r3, r0
 8015d36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015d38:	7bbb      	ldrb	r3, [r7, #14]
 8015d3a:	b2db      	uxtb	r3, r3
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d103      	bne.n	8015d48 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	220b      	movs	r2, #11
 8015d44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015d46:	e058      	b.n	8015dfa <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8015d48:	7bbb      	ldrb	r3, [r7, #14]
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	2b02      	cmp	r3, #2
 8015d4e:	d154      	bne.n	8015dfa <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	220d      	movs	r2, #13
 8015d54:	701a      	strb	r2, [r3, #0]
      break;
 8015d56:	e050      	b.n	8015dfa <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	220d      	movs	r2, #13
 8015d5c:	701a      	strb	r2, [r3, #0]
      break;
 8015d5e:	e04c      	b.n	8015dfa <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d049      	beq.n	8015dfe <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	4798      	blx	r3
      }
      break;
 8015d76:	e042      	b.n	8015dfe <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7ff fd27 	bl	80157d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d009      	beq.n	8015da4 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d005      	beq.n	8015dba <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015db4:	2105      	movs	r1, #5
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d107      	bne.n	8015dd6 <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7ff fe02 	bl	80159d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015dd4:	e014      	b.n	8015e00 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f7ee fd94 	bl	8004904 <USBH_LL_Start>
      break;
 8015ddc:	e010      	b.n	8015e00 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8015dde:	bf00      	nop
 8015de0:	e00e      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015de2:	bf00      	nop
 8015de4:	e00c      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015de6:	bf00      	nop
 8015de8:	e00a      	b.n	8015e00 <USBH_Process+0x3d0>
    break;
 8015dea:	bf00      	nop
 8015dec:	e008      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015dee:	bf00      	nop
 8015df0:	e006      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015df2:	bf00      	nop
 8015df4:	e004      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015df6:	bf00      	nop
 8015df8:	e002      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015dfa:	bf00      	nop
 8015dfc:	e000      	b.n	8015e00 <USBH_Process+0x3d0>
      break;
 8015dfe:	bf00      	nop
  }
  return USBH_OK;
 8015e00:	2300      	movs	r3, #0
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	3710      	adds	r7, #16
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bd80      	pop	{r7, pc}
 8015e0a:	bf00      	nop

08015e0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b088      	sub	sp, #32
 8015e10:	af04      	add	r7, sp, #16
 8015e12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015e14:	2301      	movs	r3, #1
 8015e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015e18:	2301      	movs	r3, #1
 8015e1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	785b      	ldrb	r3, [r3, #1]
 8015e20:	2b07      	cmp	r3, #7
 8015e22:	f200 81c1 	bhi.w	80161a8 <USBH_HandleEnum+0x39c>
 8015e26:	a201      	add	r2, pc, #4	; (adr r2, 8015e2c <USBH_HandleEnum+0x20>)
 8015e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e2c:	08015e4d 	.word	0x08015e4d
 8015e30:	08015f0b 	.word	0x08015f0b
 8015e34:	08015f75 	.word	0x08015f75
 8015e38:	08016003 	.word	0x08016003
 8015e3c:	0801606d 	.word	0x0801606d
 8015e40:	080160dd 	.word	0x080160dd
 8015e44:	08016123 	.word	0x08016123
 8015e48:	08016169 	.word	0x08016169
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8015e4c:	2108      	movs	r1, #8
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 fa50 	bl	80162f4 <USBH_Get_DevDesc>
 8015e54:	4603      	mov	r3, r0
 8015e56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015e58:	7bbb      	ldrb	r3, [r7, #14]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d130      	bne.n	8015ec0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	7919      	ldrb	r1, [r3, #4]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015e7e:	687a      	ldr	r2, [r7, #4]
 8015e80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015e82:	b292      	uxth	r2, r2
 8015e84:	9202      	str	r2, [sp, #8]
 8015e86:	2200      	movs	r2, #0
 8015e88:	9201      	str	r2, [sp, #4]
 8015e8a:	9300      	str	r3, [sp, #0]
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2280      	movs	r2, #128	; 0x80
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f001 f8dd 	bl	8017050 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	7959      	ldrb	r1, [r3, #5]
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015eaa:	b292      	uxth	r2, r2
 8015eac:	9202      	str	r2, [sp, #8]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	9201      	str	r2, [sp, #4]
 8015eb2:	9300      	str	r3, [sp, #0]
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f001 f8c9 	bl	8017050 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015ebe:	e175      	b.n	80161ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015ec0:	7bbb      	ldrb	r3, [r7, #14]
 8015ec2:	2b03      	cmp	r3, #3
 8015ec4:	f040 8172 	bne.w	80161ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015ece:	3301      	adds	r3, #1
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015ede:	2b03      	cmp	r3, #3
 8015ee0:	d903      	bls.n	8015eea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	220d      	movs	r2, #13
 8015ee6:	701a      	strb	r2, [r3, #0]
      break;
 8015ee8:	e160      	b.n	80161ac <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	795b      	ldrb	r3, [r3, #5]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f001 f8fe 	bl	80170f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	791b      	ldrb	r3, [r3, #4]
 8015efa:	4619      	mov	r1, r3
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f001 f8f8 	bl	80170f2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2200      	movs	r2, #0
 8015f06:	701a      	strb	r2, [r3, #0]
      break;
 8015f08:	e150      	b.n	80161ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8015f0a:	2112      	movs	r1, #18
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 f9f1 	bl	80162f4 <USBH_Get_DevDesc>
 8015f12:	4603      	mov	r3, r0
 8015f14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015f16:	7bbb      	ldrb	r3, [r7, #14]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d103      	bne.n	8015f24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2202      	movs	r2, #2
 8015f20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015f22:	e145      	b.n	80161b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015f24:	7bbb      	ldrb	r3, [r7, #14]
 8015f26:	2b03      	cmp	r3, #3
 8015f28:	f040 8142 	bne.w	80161b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015f32:	3301      	adds	r3, #1
 8015f34:	b2da      	uxtb	r2, r3
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015f42:	2b03      	cmp	r3, #3
 8015f44:	d903      	bls.n	8015f4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	220d      	movs	r2, #13
 8015f4a:	701a      	strb	r2, [r3, #0]
      break;
 8015f4c:	e130      	b.n	80161b0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	795b      	ldrb	r3, [r3, #5]
 8015f52:	4619      	mov	r1, r3
 8015f54:	6878      	ldr	r0, [r7, #4]
 8015f56:	f001 f8cc 	bl	80170f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	791b      	ldrb	r3, [r3, #4]
 8015f5e:	4619      	mov	r1, r3
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f001 f8c6 	bl	80170f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	701a      	strb	r2, [r3, #0]
      break;
 8015f72:	e11d      	b.n	80161b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015f74:	2101      	movs	r1, #1
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f000 fa7b 	bl	8016472 <USBH_SetAddress>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015f80:	7bbb      	ldrb	r3, [r7, #14]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d132      	bne.n	8015fec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015f86:	2002      	movs	r0, #2
 8015f88:	f7ee fe20 	bl	8004bcc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2201      	movs	r2, #1
 8015f90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2203      	movs	r2, #3
 8015f98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	7919      	ldrb	r1, [r3, #4]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015fae:	b292      	uxth	r2, r2
 8015fb0:	9202      	str	r2, [sp, #8]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	9201      	str	r2, [sp, #4]
 8015fb6:	9300      	str	r3, [sp, #0]
 8015fb8:	4603      	mov	r3, r0
 8015fba:	2280      	movs	r2, #128	; 0x80
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f001 f847 	bl	8017050 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	7959      	ldrb	r1, [r3, #5]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015fd6:	b292      	uxth	r2, r2
 8015fd8:	9202      	str	r2, [sp, #8]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	9201      	str	r2, [sp, #4]
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f001 f833 	bl	8017050 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015fea:	e0e3      	b.n	80161b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015fec:	7bbb      	ldrb	r3, [r7, #14]
 8015fee:	2b03      	cmp	r3, #3
 8015ff0:	f040 80e0 	bne.w	80161b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	220d      	movs	r2, #13
 8015ff8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	705a      	strb	r2, [r3, #1]
      break;
 8016000:	e0d8      	b.n	80161b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8016002:	2109      	movs	r1, #9
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 f9a1 	bl	801634c <USBH_Get_CfgDesc>
 801600a:	4603      	mov	r3, r0
 801600c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801600e:	7bbb      	ldrb	r3, [r7, #14]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d103      	bne.n	801601c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2204      	movs	r2, #4
 8016018:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801601a:	e0cd      	b.n	80161b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801601c:	7bbb      	ldrb	r3, [r7, #14]
 801601e:	2b03      	cmp	r3, #3
 8016020:	f040 80ca 	bne.w	80161b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801602a:	3301      	adds	r3, #1
 801602c:	b2da      	uxtb	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801603a:	2b03      	cmp	r3, #3
 801603c:	d903      	bls.n	8016046 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	220d      	movs	r2, #13
 8016042:	701a      	strb	r2, [r3, #0]
      break;
 8016044:	e0b8      	b.n	80161b8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	795b      	ldrb	r3, [r3, #5]
 801604a:	4619      	mov	r1, r3
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f001 f850 	bl	80170f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	791b      	ldrb	r3, [r3, #4]
 8016056:	4619      	mov	r1, r3
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f001 f84a 	bl	80170f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2200      	movs	r2, #0
 8016062:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2200      	movs	r2, #0
 8016068:	701a      	strb	r2, [r3, #0]
      break;
 801606a:	e0a5      	b.n	80161b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8016072:	4619      	mov	r1, r3
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f000 f969 	bl	801634c <USBH_Get_CfgDesc>
 801607a:	4603      	mov	r3, r0
 801607c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801607e:	7bbb      	ldrb	r3, [r7, #14]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d103      	bne.n	801608c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	2205      	movs	r2, #5
 8016088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801608a:	e097      	b.n	80161bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801608c:	7bbb      	ldrb	r3, [r7, #14]
 801608e:	2b03      	cmp	r3, #3
 8016090:	f040 8094 	bne.w	80161bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801609a:	3301      	adds	r3, #1
 801609c:	b2da      	uxtb	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80160aa:	2b03      	cmp	r3, #3
 80160ac:	d903      	bls.n	80160b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	220d      	movs	r2, #13
 80160b2:	701a      	strb	r2, [r3, #0]
      break;
 80160b4:	e082      	b.n	80161bc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	795b      	ldrb	r3, [r3, #5]
 80160ba:	4619      	mov	r1, r3
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f001 f818 	bl	80170f2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	791b      	ldrb	r3, [r3, #4]
 80160c6:	4619      	mov	r1, r3
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f001 f812 	bl	80170f2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2200      	movs	r2, #0
 80160d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2200      	movs	r2, #0
 80160d8:	701a      	strb	r2, [r3, #0]
      break;
 80160da:	e06f      	b.n	80161bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d019      	beq.n	801611a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80160f2:	23ff      	movs	r3, #255	; 0xff
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 f953 	bl	80163a0 <USBH_Get_StringDesc>
 80160fa:	4603      	mov	r3, r0
 80160fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80160fe:	7bbb      	ldrb	r3, [r7, #14]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d103      	bne.n	801610c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2206      	movs	r2, #6
 8016108:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801610a:	e059      	b.n	80161c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801610c:	7bbb      	ldrb	r3, [r7, #14]
 801610e:	2b03      	cmp	r3, #3
 8016110:	d156      	bne.n	80161c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2206      	movs	r2, #6
 8016116:	705a      	strb	r2, [r3, #1]
      break;
 8016118:	e052      	b.n	80161c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2206      	movs	r2, #6
 801611e:	705a      	strb	r2, [r3, #1]
      break;
 8016120:	e04e      	b.n	80161c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8016128:	2b00      	cmp	r3, #0
 801612a:	d019      	beq.n	8016160 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016138:	23ff      	movs	r3, #255	; 0xff
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 f930 	bl	80163a0 <USBH_Get_StringDesc>
 8016140:	4603      	mov	r3, r0
 8016142:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016144:	7bbb      	ldrb	r3, [r7, #14]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d103      	bne.n	8016152 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2207      	movs	r2, #7
 801614e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016150:	e038      	b.n	80161c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016152:	7bbb      	ldrb	r3, [r7, #14]
 8016154:	2b03      	cmp	r3, #3
 8016156:	d135      	bne.n	80161c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2207      	movs	r2, #7
 801615c:	705a      	strb	r2, [r3, #1]
      break;
 801615e:	e031      	b.n	80161c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2207      	movs	r2, #7
 8016164:	705a      	strb	r2, [r3, #1]
      break;
 8016166:	e02d      	b.n	80161c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801616e:	2b00      	cmp	r3, #0
 8016170:	d017      	beq.n	80161a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801617e:	23ff      	movs	r3, #255	; 0xff
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f000 f90d 	bl	80163a0 <USBH_Get_StringDesc>
 8016186:	4603      	mov	r3, r0
 8016188:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801618a:	7bbb      	ldrb	r3, [r7, #14]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d102      	bne.n	8016196 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8016190:	2300      	movs	r3, #0
 8016192:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8016194:	e018      	b.n	80161c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016196:	7bbb      	ldrb	r3, [r7, #14]
 8016198:	2b03      	cmp	r3, #3
 801619a:	d115      	bne.n	80161c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 801619c:	2300      	movs	r3, #0
 801619e:	73fb      	strb	r3, [r7, #15]
      break;
 80161a0:	e012      	b.n	80161c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80161a2:	2300      	movs	r3, #0
 80161a4:	73fb      	strb	r3, [r7, #15]
      break;
 80161a6:	e00f      	b.n	80161c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80161a8:	bf00      	nop
 80161aa:	e00e      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161ac:	bf00      	nop
 80161ae:	e00c      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161b0:	bf00      	nop
 80161b2:	e00a      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161b4:	bf00      	nop
 80161b6:	e008      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161b8:	bf00      	nop
 80161ba:	e006      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161bc:	bf00      	nop
 80161be:	e004      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161c0:	bf00      	nop
 80161c2:	e002      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161c4:	bf00      	nop
 80161c6:	e000      	b.n	80161ca <USBH_HandleEnum+0x3be>
      break;
 80161c8:	bf00      	nop
  }
  return Status;
 80161ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3710      	adds	r7, #16
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80161d4:	b480      	push	{r7}
 80161d6:	b083      	sub	sp, #12
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	683a      	ldr	r2, [r7, #0]
 80161e2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 80161e6:	bf00      	nop
 80161e8:	370c      	adds	r7, #12
 80161ea:	46bd      	mov	sp, r7
 80161ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f0:	4770      	bx	lr

080161f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b082      	sub	sp, #8
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016200:	1c5a      	adds	r2, r3, #1
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 f804 	bl	8016216 <USBH_HandleSof>
}
 801620e:	bf00      	nop
 8016210:	3708      	adds	r7, #8
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}

08016216 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8016216:	b580      	push	{r7, lr}
 8016218:	b082      	sub	sp, #8
 801621a:	af00      	add	r7, sp, #0
 801621c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	b2db      	uxtb	r3, r3
 8016224:	2b0b      	cmp	r3, #11
 8016226:	d10a      	bne.n	801623e <USBH_HandleSof+0x28>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 801622e:	2b00      	cmp	r3, #0
 8016230:	d005      	beq.n	801623e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016238:	699b      	ldr	r3, [r3, #24]
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	4798      	blx	r3
  }
}
 801623e:	bf00      	nop
 8016240:	3708      	adds	r7, #8
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}

08016246 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8016246:	b480      	push	{r7}
 8016248:	b083      	sub	sp, #12
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2201      	movs	r2, #1
 8016252:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8016256:	bf00      	nop
}
 8016258:	370c      	adds	r7, #12
 801625a:	46bd      	mov	sp, r7
 801625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016260:	4770      	bx	lr

08016262 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8016262:	b480      	push	{r7}
 8016264:	b083      	sub	sp, #12
 8016266:	af00      	add	r7, sp, #0
 8016268:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	2200      	movs	r2, #0
 801626e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8016272:	bf00      	nop
}
 8016274:	370c      	adds	r7, #12
 8016276:	46bd      	mov	sp, r7
 8016278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627c:	4770      	bx	lr

0801627e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801627e:	b480      	push	{r7}
 8016280:	b083      	sub	sp, #12
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2201      	movs	r2, #1
 801628a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801629e:	2300      	movs	r3, #0
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	370c      	adds	r7, #12
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr

080162ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2201      	movs	r2, #1
 80162b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2200      	movs	r2, #0
 80162c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7ee fb34 	bl	800493a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	791b      	ldrb	r3, [r3, #4]
 80162d6:	4619      	mov	r1, r3
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f000 ff0a 	bl	80170f2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	795b      	ldrb	r3, [r3, #5]
 80162e2:	4619      	mov	r1, r3
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f000 ff04 	bl	80170f2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80162ea:	2300      	movs	r3, #0
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af02      	add	r7, sp, #8
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	460b      	mov	r3, r1
 80162fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016300:	887b      	ldrh	r3, [r7, #2]
 8016302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016306:	d901      	bls.n	801630c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016308:	2303      	movs	r3, #3
 801630a:	e01b      	b.n	8016344 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016312:	887b      	ldrh	r3, [r7, #2]
 8016314:	9300      	str	r3, [sp, #0]
 8016316:	4613      	mov	r3, r2
 8016318:	f44f 7280 	mov.w	r2, #256	; 0x100
 801631c:	2100      	movs	r1, #0
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 f872 	bl	8016408 <USBH_GetDescriptor>
 8016324:	4603      	mov	r3, r0
 8016326:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016328:	7bfb      	ldrb	r3, [r7, #15]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d109      	bne.n	8016342 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016334:	887a      	ldrh	r2, [r7, #2]
 8016336:	4619      	mov	r1, r3
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 f929 	bl	8016590 <USBH_ParseDevDesc>
 801633e:	4603      	mov	r3, r0
 8016340:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016342:	7bfb      	ldrb	r3, [r7, #15]
}
 8016344:	4618      	mov	r0, r3
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af02      	add	r7, sp, #8
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	460b      	mov	r3, r1
 8016356:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	331c      	adds	r3, #28
 801635c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 801635e:	887b      	ldrh	r3, [r7, #2]
 8016360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016364:	d901      	bls.n	801636a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016366:	2303      	movs	r3, #3
 8016368:	e016      	b.n	8016398 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801636a:	887b      	ldrh	r3, [r7, #2]
 801636c:	9300      	str	r3, [sp, #0]
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016374:	2100      	movs	r1, #0
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	f000 f846 	bl	8016408 <USBH_GetDescriptor>
 801637c:	4603      	mov	r3, r0
 801637e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8016380:	7bfb      	ldrb	r3, [r7, #15]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d107      	bne.n	8016396 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8016386:	887b      	ldrh	r3, [r7, #2]
 8016388:	461a      	mov	r2, r3
 801638a:	68b9      	ldr	r1, [r7, #8]
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f000 f9b3 	bl	80166f8 <USBH_ParseCfgDesc>
 8016392:	4603      	mov	r3, r0
 8016394:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016396:	7bfb      	ldrb	r3, [r7, #15]
}
 8016398:	4618      	mov	r0, r3
 801639a:	3710      	adds	r7, #16
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b088      	sub	sp, #32
 80163a4:	af02      	add	r7, sp, #8
 80163a6:	60f8      	str	r0, [r7, #12]
 80163a8:	607a      	str	r2, [r7, #4]
 80163aa:	461a      	mov	r2, r3
 80163ac:	460b      	mov	r3, r1
 80163ae:	72fb      	strb	r3, [r7, #11]
 80163b0:	4613      	mov	r3, r2
 80163b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80163b4:	893b      	ldrh	r3, [r7, #8]
 80163b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163ba:	d802      	bhi.n	80163c2 <USBH_Get_StringDesc+0x22>
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d101      	bne.n	80163c6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80163c2:	2303      	movs	r3, #3
 80163c4:	e01c      	b.n	8016400 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80163c6:	7afb      	ldrb	r3, [r7, #11]
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80163ce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80163d6:	893b      	ldrh	r3, [r7, #8]
 80163d8:	9300      	str	r3, [sp, #0]
 80163da:	460b      	mov	r3, r1
 80163dc:	2100      	movs	r1, #0
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	f000 f812 	bl	8016408 <USBH_GetDescriptor>
 80163e4:	4603      	mov	r3, r0
 80163e6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80163e8:	7dfb      	ldrb	r3, [r7, #23]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d107      	bne.n	80163fe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80163f4:	893a      	ldrh	r2, [r7, #8]
 80163f6:	6879      	ldr	r1, [r7, #4]
 80163f8:	4618      	mov	r0, r3
 80163fa:	f000 fb8a 	bl	8016b12 <USBH_ParseStringDesc>
  }

  return status;
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016400:	4618      	mov	r0, r3
 8016402:	3718      	adds	r7, #24
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}

08016408 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	607b      	str	r3, [r7, #4]
 8016412:	460b      	mov	r3, r1
 8016414:	72fb      	strb	r3, [r7, #11]
 8016416:	4613      	mov	r3, r2
 8016418:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	789b      	ldrb	r3, [r3, #2]
 801641e:	2b01      	cmp	r3, #1
 8016420:	d11c      	bne.n	801645c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8016422:	7afb      	ldrb	r3, [r7, #11]
 8016424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016428:	b2da      	uxtb	r2, r3
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2206      	movs	r2, #6
 8016432:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	893a      	ldrh	r2, [r7, #8]
 8016438:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801643a:	893b      	ldrh	r3, [r7, #8]
 801643c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016444:	d104      	bne.n	8016450 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	f240 4209 	movw	r2, #1033	; 0x409
 801644c:	829a      	strh	r2, [r3, #20]
 801644e:	e002      	b.n	8016456 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	2200      	movs	r2, #0
 8016454:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	8b3a      	ldrh	r2, [r7, #24]
 801645a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801645c:	8b3b      	ldrh	r3, [r7, #24]
 801645e:	461a      	mov	r2, r3
 8016460:	6879      	ldr	r1, [r7, #4]
 8016462:	68f8      	ldr	r0, [r7, #12]
 8016464:	f000 fba3 	bl	8016bae <USBH_CtlReq>
 8016468:	4603      	mov	r3, r0
}
 801646a:	4618      	mov	r0, r3
 801646c:	3710      	adds	r7, #16
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b082      	sub	sp, #8
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
 801647a:	460b      	mov	r3, r1
 801647c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	789b      	ldrb	r3, [r3, #2]
 8016482:	2b01      	cmp	r3, #1
 8016484:	d10f      	bne.n	80164a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2200      	movs	r2, #0
 801648a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2205      	movs	r2, #5
 8016490:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8016492:	78fb      	ldrb	r3, [r7, #3]
 8016494:	b29a      	uxth	r2, r3
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2200      	movs	r2, #0
 801649e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2200      	movs	r2, #0
 80164a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80164a6:	2200      	movs	r2, #0
 80164a8:	2100      	movs	r1, #0
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f000 fb7f 	bl	8016bae <USBH_CtlReq>
 80164b0:	4603      	mov	r3, r0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3708      	adds	r7, #8
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b082      	sub	sp, #8
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
 80164c2:	460b      	mov	r3, r1
 80164c4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	789b      	ldrb	r3, [r3, #2]
 80164ca:	2b01      	cmp	r3, #1
 80164cc:	d10e      	bne.n	80164ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	2200      	movs	r2, #0
 80164d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2209      	movs	r2, #9
 80164d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	887a      	ldrh	r2, [r7, #2]
 80164de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2200      	movs	r2, #0
 80164e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2200      	movs	r2, #0
 80164ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80164ec:	2200      	movs	r2, #0
 80164ee:	2100      	movs	r1, #0
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f000 fb5c 	bl	8016bae <USBH_CtlReq>
 80164f6:	4603      	mov	r3, r0
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	3708      	adds	r7, #8
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b082      	sub	sp, #8
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	460b      	mov	r3, r1
 801650a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	789b      	ldrb	r3, [r3, #2]
 8016510:	2b01      	cmp	r3, #1
 8016512:	d10f      	bne.n	8016534 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2200      	movs	r2, #0
 8016518:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	2203      	movs	r2, #3
 801651e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016520:	78fb      	ldrb	r3, [r7, #3]
 8016522:	b29a      	uxth	r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2200      	movs	r2, #0
 801652c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2200      	movs	r2, #0
 8016532:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016534:	2200      	movs	r2, #0
 8016536:	2100      	movs	r1, #0
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f000 fb38 	bl	8016bae <USBH_CtlReq>
 801653e:	4603      	mov	r3, r0
}
 8016540:	4618      	mov	r0, r3
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	460b      	mov	r3, r1
 8016552:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	789b      	ldrb	r3, [r3, #2]
 8016558:	2b01      	cmp	r3, #1
 801655a:	d10f      	bne.n	801657c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2202      	movs	r2, #2
 8016560:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2201      	movs	r2, #1
 8016566:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2200      	movs	r2, #0
 801656c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801656e:	78fb      	ldrb	r3, [r7, #3]
 8016570:	b29a      	uxth	r2, r3
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2200      	movs	r2, #0
 801657a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801657c:	2200      	movs	r2, #0
 801657e:	2100      	movs	r1, #0
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f000 fb14 	bl	8016bae <USBH_CtlReq>
 8016586:	4603      	mov	r3, r0
}
 8016588:	4618      	mov	r0, r3
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016590:	b480      	push	{r7}
 8016592:	b087      	sub	sp, #28
 8016594:	af00      	add	r7, sp, #0
 8016596:	60f8      	str	r0, [r7, #12]
 8016598:	60b9      	str	r1, [r7, #8]
 801659a:	4613      	mov	r3, r2
 801659c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f203 3326 	addw	r3, r3, #806	; 0x326
 80165a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80165a6:	2300      	movs	r3, #0
 80165a8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80165b0:	2302      	movs	r3, #2
 80165b2:	e098      	b.n	80166e6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	781a      	ldrb	r2, [r3, #0]
 80165b8:	693b      	ldr	r3, [r7, #16]
 80165ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	785a      	ldrb	r2, [r3, #1]
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	3302      	adds	r3, #2
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	3303      	adds	r3, #3
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	021b      	lsls	r3, r3, #8
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	4313      	orrs	r3, r2
 80165da:	b29a      	uxth	r2, r3
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	791a      	ldrb	r2, [r3, #4]
 80165e4:	693b      	ldr	r3, [r7, #16]
 80165e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	795a      	ldrb	r2, [r3, #5]
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	799a      	ldrb	r2, [r3, #6]
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	79da      	ldrb	r2, [r3, #7]
 80165fc:	693b      	ldr	r3, [r7, #16]
 80165fe:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016606:	2b00      	cmp	r3, #0
 8016608:	d004      	beq.n	8016614 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016610:	2b01      	cmp	r3, #1
 8016612:	d11b      	bne.n	801664c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	79db      	ldrb	r3, [r3, #7]
 8016618:	2b20      	cmp	r3, #32
 801661a:	dc0f      	bgt.n	801663c <USBH_ParseDevDesc+0xac>
 801661c:	2b08      	cmp	r3, #8
 801661e:	db0f      	blt.n	8016640 <USBH_ParseDevDesc+0xb0>
 8016620:	3b08      	subs	r3, #8
 8016622:	4a34      	ldr	r2, [pc, #208]	; (80166f4 <USBH_ParseDevDesc+0x164>)
 8016624:	fa22 f303 	lsr.w	r3, r2, r3
 8016628:	f003 0301 	and.w	r3, r3, #1
 801662c:	2b00      	cmp	r3, #0
 801662e:	bf14      	ite	ne
 8016630:	2301      	movne	r3, #1
 8016632:	2300      	moveq	r3, #0
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d106      	bne.n	8016648 <USBH_ParseDevDesc+0xb8>
 801663a:	e001      	b.n	8016640 <USBH_ParseDevDesc+0xb0>
 801663c:	2b40      	cmp	r3, #64	; 0x40
 801663e:	d003      	beq.n	8016648 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	2208      	movs	r2, #8
 8016644:	71da      	strb	r2, [r3, #7]
        break;
 8016646:	e000      	b.n	801664a <USBH_ParseDevDesc+0xba>
        break;
 8016648:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 801664a:	e00e      	b.n	801666a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016652:	2b02      	cmp	r3, #2
 8016654:	d107      	bne.n	8016666 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	79db      	ldrb	r3, [r3, #7]
 801665a:	2b08      	cmp	r3, #8
 801665c:	d005      	beq.n	801666a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	2208      	movs	r2, #8
 8016662:	71da      	strb	r2, [r3, #7]
 8016664:	e001      	b.n	801666a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016666:	2303      	movs	r3, #3
 8016668:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801666a:	88fb      	ldrh	r3, [r7, #6]
 801666c:	2b08      	cmp	r3, #8
 801666e:	d939      	bls.n	80166e4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	3308      	adds	r3, #8
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	b29a      	uxth	r2, r3
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	3309      	adds	r3, #9
 801667c:	781b      	ldrb	r3, [r3, #0]
 801667e:	b29b      	uxth	r3, r3
 8016680:	021b      	lsls	r3, r3, #8
 8016682:	b29b      	uxth	r3, r3
 8016684:	4313      	orrs	r3, r2
 8016686:	b29a      	uxth	r2, r3
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	330a      	adds	r3, #10
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	b29a      	uxth	r2, r3
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	330b      	adds	r3, #11
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	b29b      	uxth	r3, r3
 801669c:	021b      	lsls	r3, r3, #8
 801669e:	b29b      	uxth	r3, r3
 80166a0:	4313      	orrs	r3, r2
 80166a2:	b29a      	uxth	r2, r3
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	330c      	adds	r3, #12
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	330d      	adds	r3, #13
 80166b4:	781b      	ldrb	r3, [r3, #0]
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	021b      	lsls	r3, r3, #8
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	4313      	orrs	r3, r2
 80166be:	b29a      	uxth	r2, r3
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	7b9a      	ldrb	r2, [r3, #14]
 80166c8:	693b      	ldr	r3, [r7, #16]
 80166ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	7bda      	ldrb	r2, [r3, #15]
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	7c1a      	ldrb	r2, [r3, #16]
 80166d8:	693b      	ldr	r3, [r7, #16]
 80166da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	7c5a      	ldrb	r2, [r3, #17]
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80166e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	371c      	adds	r7, #28
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr
 80166f2:	bf00      	nop
 80166f4:	01000101 	.word	0x01000101

080166f8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b08c      	sub	sp, #48	; 0x30
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	4613      	mov	r3, r2
 8016704:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801670c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801670e:	2300      	movs	r3, #0
 8016710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016714:	2300      	movs	r3, #0
 8016716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801671a:	2300      	movs	r3, #0
 801671c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d101      	bne.n	801672a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016726:	2302      	movs	r3, #2
 8016728:	e0d7      	b.n	80168da <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	781a      	ldrb	r2, [r3, #0]
 8016732:	6a3b      	ldr	r3, [r7, #32]
 8016734:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	785a      	ldrb	r2, [r3, #1]
 801673a:	6a3b      	ldr	r3, [r7, #32]
 801673c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 801673e:	68bb      	ldr	r3, [r7, #8]
 8016740:	3302      	adds	r3, #2
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	b29a      	uxth	r2, r3
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	3303      	adds	r3, #3
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	b29b      	uxth	r3, r3
 801674e:	021b      	lsls	r3, r3, #8
 8016750:	b29b      	uxth	r3, r3
 8016752:	4313      	orrs	r3, r2
 8016754:	b29b      	uxth	r3, r3
 8016756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801675a:	bf28      	it	cs
 801675c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016760:	b29a      	uxth	r2, r3
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	791a      	ldrb	r2, [r3, #4]
 801676a:	6a3b      	ldr	r3, [r7, #32]
 801676c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	795a      	ldrb	r2, [r3, #5]
 8016772:	6a3b      	ldr	r3, [r7, #32]
 8016774:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	799a      	ldrb	r2, [r3, #6]
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	79da      	ldrb	r2, [r3, #7]
 8016782:	6a3b      	ldr	r3, [r7, #32]
 8016784:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	7a1a      	ldrb	r2, [r3, #8]
 801678a:	6a3b      	ldr	r3, [r7, #32]
 801678c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801678e:	6a3b      	ldr	r3, [r7, #32]
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	2b09      	cmp	r3, #9
 8016794:	d002      	beq.n	801679c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	2209      	movs	r2, #9
 801679a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801679c:	88fb      	ldrh	r3, [r7, #6]
 801679e:	2b09      	cmp	r3, #9
 80167a0:	f240 8099 	bls.w	80168d6 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80167a4:	2309      	movs	r3, #9
 80167a6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80167a8:	2300      	movs	r3, #0
 80167aa:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80167ac:	e07d      	b.n	80168aa <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80167ae:	f107 0316 	add.w	r3, r7, #22
 80167b2:	4619      	mov	r1, r3
 80167b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167b6:	f000 f9df 	bl	8016b78 <USBH_GetNextDesc>
 80167ba:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80167bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167be:	785b      	ldrb	r3, [r3, #1]
 80167c0:	2b04      	cmp	r3, #4
 80167c2:	d172      	bne.n	80168aa <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80167c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	2b09      	cmp	r3, #9
 80167ca:	d002      	beq.n	80167d2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80167cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ce:	2209      	movs	r2, #9
 80167d0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80167d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167d6:	221a      	movs	r2, #26
 80167d8:	fb02 f303 	mul.w	r3, r2, r3
 80167dc:	3308      	adds	r3, #8
 80167de:	6a3a      	ldr	r2, [r7, #32]
 80167e0:	4413      	add	r3, r2
 80167e2:	3302      	adds	r3, #2
 80167e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80167e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80167e8:	69f8      	ldr	r0, [r7, #28]
 80167ea:	f000 f87a 	bl	80168e2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80167ee:	2300      	movs	r3, #0
 80167f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80167f4:	2300      	movs	r3, #0
 80167f6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80167f8:	e03f      	b.n	801687a <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80167fa:	f107 0316 	add.w	r3, r7, #22
 80167fe:	4619      	mov	r1, r3
 8016800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016802:	f000 f9b9 	bl	8016b78 <USBH_GetNextDesc>
 8016806:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801680a:	785b      	ldrb	r3, [r3, #1]
 801680c:	2b05      	cmp	r3, #5
 801680e:	d134      	bne.n	801687a <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	795b      	ldrb	r3, [r3, #5]
 8016814:	2b01      	cmp	r3, #1
 8016816:	d10f      	bne.n	8016838 <USBH_ParseCfgDesc+0x140>
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	799b      	ldrb	r3, [r3, #6]
 801681c:	2b02      	cmp	r3, #2
 801681e:	d10b      	bne.n	8016838 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	79db      	ldrb	r3, [r3, #7]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d10b      	bne.n	8016840 <USBH_ParseCfgDesc+0x148>
 8016828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	2b09      	cmp	r3, #9
 801682e:	d007      	beq.n	8016840 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016832:	2209      	movs	r2, #9
 8016834:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016836:	e003      	b.n	8016840 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683a:	2207      	movs	r2, #7
 801683c:	701a      	strb	r2, [r3, #0]
 801683e:	e000      	b.n	8016842 <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016840:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016846:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801684a:	3201      	adds	r2, #1
 801684c:	00d2      	lsls	r2, r2, #3
 801684e:	211a      	movs	r1, #26
 8016850:	fb01 f303 	mul.w	r3, r1, r3
 8016854:	4413      	add	r3, r2
 8016856:	3308      	adds	r3, #8
 8016858:	6a3a      	ldr	r2, [r7, #32]
 801685a:	4413      	add	r3, r2
 801685c:	3304      	adds	r3, #4
 801685e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016862:	69b9      	ldr	r1, [r7, #24]
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f000 f86b 	bl	8016940 <USBH_ParseEPDesc>
 801686a:	4603      	mov	r3, r0
 801686c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016874:	3301      	adds	r3, #1
 8016876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	791b      	ldrb	r3, [r3, #4]
 801687e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016882:	429a      	cmp	r2, r3
 8016884:	d204      	bcs.n	8016890 <USBH_ParseCfgDesc+0x198>
 8016886:	6a3b      	ldr	r3, [r7, #32]
 8016888:	885a      	ldrh	r2, [r3, #2]
 801688a:	8afb      	ldrh	r3, [r7, #22]
 801688c:	429a      	cmp	r2, r3
 801688e:	d8b4      	bhi.n	80167fa <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	791b      	ldrb	r3, [r3, #4]
 8016894:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016898:	429a      	cmp	r2, r3
 801689a:	d201      	bcs.n	80168a0 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 801689c:	2303      	movs	r3, #3
 801689e:	e01c      	b.n	80168da <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80168a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168a4:	3301      	adds	r3, #1
 80168a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80168aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168ae:	2b09      	cmp	r3, #9
 80168b0:	d805      	bhi.n	80168be <USBH_ParseCfgDesc+0x1c6>
 80168b2:	6a3b      	ldr	r3, [r7, #32]
 80168b4:	885a      	ldrh	r2, [r3, #2]
 80168b6:	8afb      	ldrh	r3, [r7, #22]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	f63f af78 	bhi.w	80167ae <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80168be:	6a3b      	ldr	r3, [r7, #32]
 80168c0:	791b      	ldrb	r3, [r3, #4]
 80168c2:	2b0a      	cmp	r3, #10
 80168c4:	bf28      	it	cs
 80168c6:	230a      	movcs	r3, #10
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80168ce:	429a      	cmp	r2, r3
 80168d0:	d201      	bcs.n	80168d6 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 80168d2:	2303      	movs	r3, #3
 80168d4:	e001      	b.n	80168da <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 80168d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3730      	adds	r7, #48	; 0x30
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80168e2:	b480      	push	{r7}
 80168e4:	b083      	sub	sp, #12
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	781a      	ldrb	r2, [r3, #0]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	785a      	ldrb	r2, [r3, #1]
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	789a      	ldrb	r2, [r3, #2]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	78da      	ldrb	r2, [r3, #3]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	791a      	ldrb	r2, [r3, #4]
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	795a      	ldrb	r2, [r3, #5]
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	799a      	ldrb	r2, [r3, #6]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	79da      	ldrb	r2, [r3, #7]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	7a1a      	ldrb	r2, [r3, #8]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	721a      	strb	r2, [r3, #8]
}
 8016934:	bf00      	nop
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016940:	b480      	push	{r7}
 8016942:	b087      	sub	sp, #28
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801694c:	2300      	movs	r3, #0
 801694e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	781a      	ldrb	r2, [r3, #0]
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	785a      	ldrb	r2, [r3, #1]
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	789a      	ldrb	r2, [r3, #2]
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	78da      	ldrb	r2, [r3, #3]
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	3304      	adds	r3, #4
 8016974:	781b      	ldrb	r3, [r3, #0]
 8016976:	b29a      	uxth	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	3305      	adds	r3, #5
 801697c:	781b      	ldrb	r3, [r3, #0]
 801697e:	b29b      	uxth	r3, r3
 8016980:	021b      	lsls	r3, r3, #8
 8016982:	b29b      	uxth	r3, r3
 8016984:	4313      	orrs	r3, r2
 8016986:	b29a      	uxth	r2, r3
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	799a      	ldrb	r2, [r3, #6]
 8016990:	68bb      	ldr	r3, [r7, #8]
 8016992:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	889b      	ldrh	r3, [r3, #4]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d009      	beq.n	80169b0 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80169a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80169a4:	d804      	bhi.n	80169b0 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80169aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80169ae:	d901      	bls.n	80169b4 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80169b0:	2303      	movs	r3, #3
 80169b2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d136      	bne.n	8016a2c <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	78db      	ldrb	r3, [r3, #3]
 80169c2:	f003 0303 	and.w	r3, r3, #3
 80169c6:	2b02      	cmp	r3, #2
 80169c8:	d108      	bne.n	80169dc <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	889b      	ldrh	r3, [r3, #4]
 80169ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80169d2:	f240 8097 	bls.w	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80169d6:	2303      	movs	r3, #3
 80169d8:	75fb      	strb	r3, [r7, #23]
 80169da:	e093      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	78db      	ldrb	r3, [r3, #3]
 80169e0:	f003 0303 	and.w	r3, r3, #3
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d107      	bne.n	80169f8 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	889b      	ldrh	r3, [r3, #4]
 80169ec:	2b40      	cmp	r3, #64	; 0x40
 80169ee:	f240 8089 	bls.w	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80169f2:	2303      	movs	r3, #3
 80169f4:	75fb      	strb	r3, [r7, #23]
 80169f6:	e085      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	78db      	ldrb	r3, [r3, #3]
 80169fc:	f003 0303 	and.w	r3, r3, #3
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d005      	beq.n	8016a10 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	78db      	ldrb	r3, [r3, #3]
 8016a08:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016a0c:	2b03      	cmp	r3, #3
 8016a0e:	d10a      	bne.n	8016a26 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	799b      	ldrb	r3, [r3, #6]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d003      	beq.n	8016a20 <USBH_ParseEPDesc+0xe0>
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	799b      	ldrb	r3, [r3, #6]
 8016a1c:	2b10      	cmp	r3, #16
 8016a1e:	d970      	bls.n	8016b02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8016a20:	2303      	movs	r3, #3
 8016a22:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016a24:	e06d      	b.n	8016b02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016a26:	2303      	movs	r3, #3
 8016a28:	75fb      	strb	r3, [r7, #23]
 8016a2a:	e06b      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016a32:	2b01      	cmp	r3, #1
 8016a34:	d13c      	bne.n	8016ab0 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	78db      	ldrb	r3, [r3, #3]
 8016a3a:	f003 0303 	and.w	r3, r3, #3
 8016a3e:	2b02      	cmp	r3, #2
 8016a40:	d005      	beq.n	8016a4e <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	78db      	ldrb	r3, [r3, #3]
 8016a46:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d106      	bne.n	8016a5c <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	889b      	ldrh	r3, [r3, #4]
 8016a52:	2b40      	cmp	r3, #64	; 0x40
 8016a54:	d956      	bls.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016a56:	2303      	movs	r3, #3
 8016a58:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016a5a:	e053      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	78db      	ldrb	r3, [r3, #3]
 8016a60:	f003 0303 	and.w	r3, r3, #3
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d10e      	bne.n	8016a86 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	799b      	ldrb	r3, [r3, #6]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d007      	beq.n	8016a80 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8016a74:	2b10      	cmp	r3, #16
 8016a76:	d803      	bhi.n	8016a80 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8016a7c:	2b40      	cmp	r3, #64	; 0x40
 8016a7e:	d941      	bls.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016a80:	2303      	movs	r3, #3
 8016a82:	75fb      	strb	r3, [r7, #23]
 8016a84:	e03e      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	78db      	ldrb	r3, [r3, #3]
 8016a8a:	f003 0303 	and.w	r3, r3, #3
 8016a8e:	2b03      	cmp	r3, #3
 8016a90:	d10b      	bne.n	8016aaa <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	799b      	ldrb	r3, [r3, #6]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d004      	beq.n	8016aa4 <USBH_ParseEPDesc+0x164>
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	889b      	ldrh	r3, [r3, #4]
 8016a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016aa2:	d32f      	bcc.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016aa4:	2303      	movs	r3, #3
 8016aa6:	75fb      	strb	r3, [r7, #23]
 8016aa8:	e02c      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016aaa:	2303      	movs	r3, #3
 8016aac:	75fb      	strb	r3, [r7, #23]
 8016aae:	e029      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d120      	bne.n	8016afc <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	78db      	ldrb	r3, [r3, #3]
 8016abe:	f003 0303 	and.w	r3, r3, #3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	889b      	ldrh	r3, [r3, #4]
 8016aca:	2b08      	cmp	r3, #8
 8016acc:	d01a      	beq.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016ace:	2303      	movs	r3, #3
 8016ad0:	75fb      	strb	r3, [r7, #23]
 8016ad2:	e017      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	78db      	ldrb	r3, [r3, #3]
 8016ad8:	f003 0303 	and.w	r3, r3, #3
 8016adc:	2b03      	cmp	r3, #3
 8016ade:	d10a      	bne.n	8016af6 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8016ae0:	68bb      	ldr	r3, [r7, #8]
 8016ae2:	799b      	ldrb	r3, [r3, #6]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d003      	beq.n	8016af0 <USBH_ParseEPDesc+0x1b0>
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	889b      	ldrh	r3, [r3, #4]
 8016aec:	2b08      	cmp	r3, #8
 8016aee:	d909      	bls.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016af0:	2303      	movs	r3, #3
 8016af2:	75fb      	strb	r3, [r7, #23]
 8016af4:	e006      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016af6:	2303      	movs	r3, #3
 8016af8:	75fb      	strb	r3, [r7, #23]
 8016afa:	e003      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016afc:	2303      	movs	r3, #3
 8016afe:	75fb      	strb	r3, [r7, #23]
 8016b00:	e000      	b.n	8016b04 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016b02:	bf00      	nop
  }

  return status;
 8016b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	371c      	adds	r7, #28
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b10:	4770      	bx	lr

08016b12 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016b12:	b480      	push	{r7}
 8016b14:	b087      	sub	sp, #28
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	60f8      	str	r0, [r7, #12]
 8016b1a:	60b9      	str	r1, [r7, #8]
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	3301      	adds	r3, #1
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	2b03      	cmp	r3, #3
 8016b28:	d120      	bne.n	8016b6c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	1e9a      	subs	r2, r3, #2
 8016b30:	88fb      	ldrh	r3, [r7, #6]
 8016b32:	4293      	cmp	r3, r2
 8016b34:	bf28      	it	cs
 8016b36:	4613      	movcs	r3, r2
 8016b38:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	3302      	adds	r3, #2
 8016b3e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016b40:	2300      	movs	r3, #0
 8016b42:	82fb      	strh	r3, [r7, #22]
 8016b44:	e00b      	b.n	8016b5e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016b46:	8afb      	ldrh	r3, [r7, #22]
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	4413      	add	r3, r2
 8016b4c:	781a      	ldrb	r2, [r3, #0]
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	3301      	adds	r3, #1
 8016b56:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016b58:	8afb      	ldrh	r3, [r7, #22]
 8016b5a:	3302      	adds	r3, #2
 8016b5c:	82fb      	strh	r3, [r7, #22]
 8016b5e:	8afa      	ldrh	r2, [r7, #22]
 8016b60:	8abb      	ldrh	r3, [r7, #20]
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d3ef      	bcc.n	8016b46 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	701a      	strb	r2, [r3, #0]
  }
}
 8016b6c:	bf00      	nop
 8016b6e:	371c      	adds	r7, #28
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016b78:	b480      	push	{r7}
 8016b7a:	b085      	sub	sp, #20
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	881a      	ldrh	r2, [r3, #0]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	4413      	add	r3, r2
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	4413      	add	r3, r2
 8016b9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3714      	adds	r7, #20
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016bae:	b580      	push	{r7, lr}
 8016bb0:	b086      	sub	sp, #24
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	60f8      	str	r0, [r7, #12]
 8016bb6:	60b9      	str	r1, [r7, #8]
 8016bb8:	4613      	mov	r3, r2
 8016bba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	789b      	ldrb	r3, [r3, #2]
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d002      	beq.n	8016bce <USBH_CtlReq+0x20>
 8016bc8:	2b02      	cmp	r3, #2
 8016bca:	d00f      	beq.n	8016bec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8016bcc:	e027      	b.n	8016c1e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	68ba      	ldr	r2, [r7, #8]
 8016bd2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	88fa      	ldrh	r2, [r7, #6]
 8016bd8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	2201      	movs	r2, #1
 8016bde:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	2202      	movs	r2, #2
 8016be4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8016be6:	2301      	movs	r3, #1
 8016be8:	75fb      	strb	r3, [r7, #23]
      break;
 8016bea:	e018      	b.n	8016c1e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f000 f81b 	bl	8016c28 <USBH_HandleControl>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8016bf6:	7dfb      	ldrb	r3, [r7, #23]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d002      	beq.n	8016c02 <USBH_CtlReq+0x54>
 8016bfc:	7dfb      	ldrb	r3, [r7, #23]
 8016bfe:	2b03      	cmp	r3, #3
 8016c00:	d106      	bne.n	8016c10 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2201      	movs	r2, #1
 8016c06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	761a      	strb	r2, [r3, #24]
      break;
 8016c0e:	e005      	b.n	8016c1c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8016c10:	7dfb      	ldrb	r3, [r7, #23]
 8016c12:	2b02      	cmp	r3, #2
 8016c14:	d102      	bne.n	8016c1c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	2201      	movs	r2, #1
 8016c1a:	709a      	strb	r2, [r3, #2]
      break;
 8016c1c:	bf00      	nop
  }
  return status;
 8016c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3718      	adds	r7, #24
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b086      	sub	sp, #24
 8016c2c:	af02      	add	r7, sp, #8
 8016c2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016c30:	2301      	movs	r3, #1
 8016c32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016c34:	2300      	movs	r3, #0
 8016c36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	7e1b      	ldrb	r3, [r3, #24]
 8016c3c:	3b01      	subs	r3, #1
 8016c3e:	2b0a      	cmp	r3, #10
 8016c40:	f200 8156 	bhi.w	8016ef0 <USBH_HandleControl+0x2c8>
 8016c44:	a201      	add	r2, pc, #4	; (adr r2, 8016c4c <USBH_HandleControl+0x24>)
 8016c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c4a:	bf00      	nop
 8016c4c:	08016c79 	.word	0x08016c79
 8016c50:	08016c93 	.word	0x08016c93
 8016c54:	08016cfd 	.word	0x08016cfd
 8016c58:	08016d23 	.word	0x08016d23
 8016c5c:	08016d5b 	.word	0x08016d5b
 8016c60:	08016d85 	.word	0x08016d85
 8016c64:	08016dd7 	.word	0x08016dd7
 8016c68:	08016df9 	.word	0x08016df9
 8016c6c:	08016e35 	.word	0x08016e35
 8016c70:	08016e5b 	.word	0x08016e5b
 8016c74:	08016e99 	.word	0x08016e99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	f103 0110 	add.w	r1, r3, #16
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	795b      	ldrb	r3, [r3, #5]
 8016c82:	461a      	mov	r2, r3
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 f943 	bl	8016f10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	2202      	movs	r2, #2
 8016c8e:	761a      	strb	r2, [r3, #24]
      break;
 8016c90:	e139      	b.n	8016f06 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	795b      	ldrb	r3, [r3, #5]
 8016c96:	4619      	mov	r1, r3
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f7ed ff3d 	bl	8004b18 <USBH_LL_GetURBState>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016ca2:	7bbb      	ldrb	r3, [r7, #14]
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d11e      	bne.n	8016ce6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	7c1b      	ldrb	r3, [r3, #16]
 8016cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016cb0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	8adb      	ldrh	r3, [r3, #22]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d00a      	beq.n	8016cd0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016cba:	7b7b      	ldrb	r3, [r7, #13]
 8016cbc:	2b80      	cmp	r3, #128	; 0x80
 8016cbe:	d103      	bne.n	8016cc8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2203      	movs	r2, #3
 8016cc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016cc6:	e115      	b.n	8016ef4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	2205      	movs	r2, #5
 8016ccc:	761a      	strb	r2, [r3, #24]
      break;
 8016cce:	e111      	b.n	8016ef4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8016cd0:	7b7b      	ldrb	r3, [r7, #13]
 8016cd2:	2b80      	cmp	r3, #128	; 0x80
 8016cd4:	d103      	bne.n	8016cde <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2209      	movs	r2, #9
 8016cda:	761a      	strb	r2, [r3, #24]
      break;
 8016cdc:	e10a      	b.n	8016ef4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2207      	movs	r2, #7
 8016ce2:	761a      	strb	r2, [r3, #24]
      break;
 8016ce4:	e106      	b.n	8016ef4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016ce6:	7bbb      	ldrb	r3, [r7, #14]
 8016ce8:	2b04      	cmp	r3, #4
 8016cea:	d003      	beq.n	8016cf4 <USBH_HandleControl+0xcc>
 8016cec:	7bbb      	ldrb	r3, [r7, #14]
 8016cee:	2b02      	cmp	r3, #2
 8016cf0:	f040 8100 	bne.w	8016ef4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	220b      	movs	r2, #11
 8016cf8:	761a      	strb	r2, [r3, #24]
      break;
 8016cfa:	e0fb      	b.n	8016ef4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016d02:	b29a      	uxth	r2, r3
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6899      	ldr	r1, [r3, #8]
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	899a      	ldrh	r2, [r3, #12]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	791b      	ldrb	r3, [r3, #4]
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f000 f93a 	bl	8016f8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2204      	movs	r2, #4
 8016d1e:	761a      	strb	r2, [r3, #24]
      break;
 8016d20:	e0f1      	b.n	8016f06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	791b      	ldrb	r3, [r3, #4]
 8016d26:	4619      	mov	r1, r3
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7ed fef5 	bl	8004b18 <USBH_LL_GetURBState>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016d32:	7bbb      	ldrb	r3, [r7, #14]
 8016d34:	2b01      	cmp	r3, #1
 8016d36:	d102      	bne.n	8016d3e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	2209      	movs	r2, #9
 8016d3c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016d3e:	7bbb      	ldrb	r3, [r7, #14]
 8016d40:	2b05      	cmp	r3, #5
 8016d42:	d102      	bne.n	8016d4a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016d44:	2303      	movs	r3, #3
 8016d46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016d48:	e0d6      	b.n	8016ef8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8016d4a:	7bbb      	ldrb	r3, [r7, #14]
 8016d4c:	2b04      	cmp	r3, #4
 8016d4e:	f040 80d3 	bne.w	8016ef8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	220b      	movs	r2, #11
 8016d56:	761a      	strb	r2, [r3, #24]
      break;
 8016d58:	e0ce      	b.n	8016ef8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6899      	ldr	r1, [r3, #8]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	899a      	ldrh	r2, [r3, #12]
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	795b      	ldrb	r3, [r3, #5]
 8016d66:	2001      	movs	r0, #1
 8016d68:	9000      	str	r0, [sp, #0]
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f000 f8ea 	bl	8016f44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016d76:	b29a      	uxth	r2, r3
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2206      	movs	r2, #6
 8016d80:	761a      	strb	r2, [r3, #24]
      break;
 8016d82:	e0c0      	b.n	8016f06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	795b      	ldrb	r3, [r3, #5]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f7ed fec4 	bl	8004b18 <USBH_LL_GetURBState>
 8016d90:	4603      	mov	r3, r0
 8016d92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016d94:	7bbb      	ldrb	r3, [r7, #14]
 8016d96:	2b01      	cmp	r3, #1
 8016d98:	d103      	bne.n	8016da2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2207      	movs	r2, #7
 8016d9e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016da0:	e0ac      	b.n	8016efc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8016da2:	7bbb      	ldrb	r3, [r7, #14]
 8016da4:	2b05      	cmp	r3, #5
 8016da6:	d105      	bne.n	8016db4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	220c      	movs	r2, #12
 8016dac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016dae:	2303      	movs	r3, #3
 8016db0:	73fb      	strb	r3, [r7, #15]
      break;
 8016db2:	e0a3      	b.n	8016efc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016db4:	7bbb      	ldrb	r3, [r7, #14]
 8016db6:	2b02      	cmp	r3, #2
 8016db8:	d103      	bne.n	8016dc2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2205      	movs	r2, #5
 8016dbe:	761a      	strb	r2, [r3, #24]
      break;
 8016dc0:	e09c      	b.n	8016efc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8016dc2:	7bbb      	ldrb	r3, [r7, #14]
 8016dc4:	2b04      	cmp	r3, #4
 8016dc6:	f040 8099 	bne.w	8016efc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	220b      	movs	r2, #11
 8016dce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016dd0:	2302      	movs	r3, #2
 8016dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8016dd4:	e092      	b.n	8016efc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	791b      	ldrb	r3, [r3, #4]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	2100      	movs	r1, #0
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f000 f8d5 	bl	8016f8e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016dea:	b29a      	uxth	r2, r3
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2208      	movs	r2, #8
 8016df4:	761a      	strb	r2, [r3, #24]

      break;
 8016df6:	e086      	b.n	8016f06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	791b      	ldrb	r3, [r3, #4]
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f7ed fe8a 	bl	8004b18 <USBH_LL_GetURBState>
 8016e04:	4603      	mov	r3, r0
 8016e06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016e08:	7bbb      	ldrb	r3, [r7, #14]
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	d105      	bne.n	8016e1a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	220d      	movs	r2, #13
 8016e12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8016e14:	2300      	movs	r3, #0
 8016e16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016e18:	e072      	b.n	8016f00 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8016e1a:	7bbb      	ldrb	r3, [r7, #14]
 8016e1c:	2b04      	cmp	r3, #4
 8016e1e:	d103      	bne.n	8016e28 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	220b      	movs	r2, #11
 8016e24:	761a      	strb	r2, [r3, #24]
      break;
 8016e26:	e06b      	b.n	8016f00 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8016e28:	7bbb      	ldrb	r3, [r7, #14]
 8016e2a:	2b05      	cmp	r3, #5
 8016e2c:	d168      	bne.n	8016f00 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8016e2e:	2303      	movs	r3, #3
 8016e30:	73fb      	strb	r3, [r7, #15]
      break;
 8016e32:	e065      	b.n	8016f00 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	795b      	ldrb	r3, [r3, #5]
 8016e38:	2201      	movs	r2, #1
 8016e3a:	9200      	str	r2, [sp, #0]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	2100      	movs	r1, #0
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f000 f87f 	bl	8016f44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016e4c:	b29a      	uxth	r2, r3
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	220a      	movs	r2, #10
 8016e56:	761a      	strb	r2, [r3, #24]
      break;
 8016e58:	e055      	b.n	8016f06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	795b      	ldrb	r3, [r3, #5]
 8016e5e:	4619      	mov	r1, r3
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f7ed fe59 	bl	8004b18 <USBH_LL_GetURBState>
 8016e66:	4603      	mov	r3, r0
 8016e68:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016e6a:	7bbb      	ldrb	r3, [r7, #14]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d105      	bne.n	8016e7c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8016e70:	2300      	movs	r3, #0
 8016e72:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	220d      	movs	r2, #13
 8016e78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016e7a:	e043      	b.n	8016f04 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016e7c:	7bbb      	ldrb	r3, [r7, #14]
 8016e7e:	2b02      	cmp	r3, #2
 8016e80:	d103      	bne.n	8016e8a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	2209      	movs	r2, #9
 8016e86:	761a      	strb	r2, [r3, #24]
      break;
 8016e88:	e03c      	b.n	8016f04 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8016e8a:	7bbb      	ldrb	r3, [r7, #14]
 8016e8c:	2b04      	cmp	r3, #4
 8016e8e:	d139      	bne.n	8016f04 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	220b      	movs	r2, #11
 8016e94:	761a      	strb	r2, [r3, #24]
      break;
 8016e96:	e035      	b.n	8016f04 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	7e5b      	ldrb	r3, [r3, #25]
 8016e9c:	3301      	adds	r3, #1
 8016e9e:	b2da      	uxtb	r2, r3
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	765a      	strb	r2, [r3, #25]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	7e5b      	ldrb	r3, [r3, #25]
 8016ea8:	2b02      	cmp	r3, #2
 8016eaa:	d806      	bhi.n	8016eba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2201      	movs	r2, #1
 8016eb0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8016eb8:	e025      	b.n	8016f06 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ec0:	2106      	movs	r1, #6
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	795b      	ldrb	r3, [r3, #5]
 8016ed0:	4619      	mov	r1, r3
 8016ed2:	6878      	ldr	r0, [r7, #4]
 8016ed4:	f000 f90d 	bl	80170f2 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	791b      	ldrb	r3, [r3, #4]
 8016edc:	4619      	mov	r1, r3
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 f907 	bl	80170f2 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016eea:	2302      	movs	r3, #2
 8016eec:	73fb      	strb	r3, [r7, #15]
      break;
 8016eee:	e00a      	b.n	8016f06 <USBH_HandleControl+0x2de>

    default:
      break;
 8016ef0:	bf00      	nop
 8016ef2:	e008      	b.n	8016f06 <USBH_HandleControl+0x2de>
      break;
 8016ef4:	bf00      	nop
 8016ef6:	e006      	b.n	8016f06 <USBH_HandleControl+0x2de>
      break;
 8016ef8:	bf00      	nop
 8016efa:	e004      	b.n	8016f06 <USBH_HandleControl+0x2de>
      break;
 8016efc:	bf00      	nop
 8016efe:	e002      	b.n	8016f06 <USBH_HandleControl+0x2de>
      break;
 8016f00:	bf00      	nop
 8016f02:	e000      	b.n	8016f06 <USBH_HandleControl+0x2de>
      break;
 8016f04:	bf00      	nop
  }

  return status;
 8016f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3710      	adds	r7, #16
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b088      	sub	sp, #32
 8016f14:	af04      	add	r7, sp, #16
 8016f16:	60f8      	str	r0, [r7, #12]
 8016f18:	60b9      	str	r1, [r7, #8]
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016f1e:	79f9      	ldrb	r1, [r7, #7]
 8016f20:	2300      	movs	r3, #0
 8016f22:	9303      	str	r3, [sp, #12]
 8016f24:	2308      	movs	r3, #8
 8016f26:	9302      	str	r3, [sp, #8]
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	9301      	str	r3, [sp, #4]
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	9300      	str	r3, [sp, #0]
 8016f30:	2300      	movs	r3, #0
 8016f32:	2200      	movs	r2, #0
 8016f34:	68f8      	ldr	r0, [r7, #12]
 8016f36:	f7ed fdbe 	bl	8004ab6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8016f3a:	2300      	movs	r3, #0
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3710      	adds	r7, #16
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}

08016f44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b088      	sub	sp, #32
 8016f48:	af04      	add	r7, sp, #16
 8016f4a:	60f8      	str	r0, [r7, #12]
 8016f4c:	60b9      	str	r1, [r7, #8]
 8016f4e:	4611      	mov	r1, r2
 8016f50:	461a      	mov	r2, r3
 8016f52:	460b      	mov	r3, r1
 8016f54:	80fb      	strh	r3, [r7, #6]
 8016f56:	4613      	mov	r3, r2
 8016f58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d001      	beq.n	8016f68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8016f64:	2300      	movs	r3, #0
 8016f66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016f68:	7979      	ldrb	r1, [r7, #5]
 8016f6a:	7e3b      	ldrb	r3, [r7, #24]
 8016f6c:	9303      	str	r3, [sp, #12]
 8016f6e:	88fb      	ldrh	r3, [r7, #6]
 8016f70:	9302      	str	r3, [sp, #8]
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	9301      	str	r3, [sp, #4]
 8016f76:	2301      	movs	r3, #1
 8016f78:	9300      	str	r3, [sp, #0]
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	68f8      	ldr	r0, [r7, #12]
 8016f80:	f7ed fd99 	bl	8004ab6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8016f84:	2300      	movs	r3, #0
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3710      	adds	r7, #16
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b088      	sub	sp, #32
 8016f92:	af04      	add	r7, sp, #16
 8016f94:	60f8      	str	r0, [r7, #12]
 8016f96:	60b9      	str	r1, [r7, #8]
 8016f98:	4611      	mov	r1, r2
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	80fb      	strh	r3, [r7, #6]
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016fa4:	7979      	ldrb	r1, [r7, #5]
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9303      	str	r3, [sp, #12]
 8016faa:	88fb      	ldrh	r3, [r7, #6]
 8016fac:	9302      	str	r3, [sp, #8]
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	9301      	str	r3, [sp, #4]
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	2201      	movs	r2, #1
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	f7ed fd7b 	bl	8004ab6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8016fc0:	2300      	movs	r3, #0

}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}

08016fca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016fca:	b580      	push	{r7, lr}
 8016fcc:	b088      	sub	sp, #32
 8016fce:	af04      	add	r7, sp, #16
 8016fd0:	60f8      	str	r0, [r7, #12]
 8016fd2:	60b9      	str	r1, [r7, #8]
 8016fd4:	4611      	mov	r1, r2
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	460b      	mov	r3, r1
 8016fda:	80fb      	strh	r3, [r7, #6]
 8016fdc:	4613      	mov	r3, r2
 8016fde:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d001      	beq.n	8016fee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016fea:	2300      	movs	r3, #0
 8016fec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016fee:	7979      	ldrb	r1, [r7, #5]
 8016ff0:	7e3b      	ldrb	r3, [r7, #24]
 8016ff2:	9303      	str	r3, [sp, #12]
 8016ff4:	88fb      	ldrh	r3, [r7, #6]
 8016ff6:	9302      	str	r3, [sp, #8]
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	9301      	str	r3, [sp, #4]
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	2302      	movs	r3, #2
 8017002:	2200      	movs	r2, #0
 8017004:	68f8      	ldr	r0, [r7, #12]
 8017006:	f7ed fd56 	bl	8004ab6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801700a:	2300      	movs	r3, #0
}
 801700c:	4618      	mov	r0, r3
 801700e:	3710      	adds	r7, #16
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b088      	sub	sp, #32
 8017018:	af04      	add	r7, sp, #16
 801701a:	60f8      	str	r0, [r7, #12]
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	4611      	mov	r1, r2
 8017020:	461a      	mov	r2, r3
 8017022:	460b      	mov	r3, r1
 8017024:	80fb      	strh	r3, [r7, #6]
 8017026:	4613      	mov	r3, r2
 8017028:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801702a:	7979      	ldrb	r1, [r7, #5]
 801702c:	2300      	movs	r3, #0
 801702e:	9303      	str	r3, [sp, #12]
 8017030:	88fb      	ldrh	r3, [r7, #6]
 8017032:	9302      	str	r3, [sp, #8]
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	2301      	movs	r3, #1
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	2302      	movs	r3, #2
 801703e:	2201      	movs	r2, #1
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f7ed fd38 	bl	8004ab6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3710      	adds	r7, #16
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b086      	sub	sp, #24
 8017054:	af04      	add	r7, sp, #16
 8017056:	6078      	str	r0, [r7, #4]
 8017058:	4608      	mov	r0, r1
 801705a:	4611      	mov	r1, r2
 801705c:	461a      	mov	r2, r3
 801705e:	4603      	mov	r3, r0
 8017060:	70fb      	strb	r3, [r7, #3]
 8017062:	460b      	mov	r3, r1
 8017064:	70bb      	strb	r3, [r7, #2]
 8017066:	4613      	mov	r3, r2
 8017068:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801706a:	7878      	ldrb	r0, [r7, #1]
 801706c:	78ba      	ldrb	r2, [r7, #2]
 801706e:	78f9      	ldrb	r1, [r7, #3]
 8017070:	8b3b      	ldrh	r3, [r7, #24]
 8017072:	9302      	str	r3, [sp, #8]
 8017074:	7d3b      	ldrb	r3, [r7, #20]
 8017076:	9301      	str	r3, [sp, #4]
 8017078:	7c3b      	ldrb	r3, [r7, #16]
 801707a:	9300      	str	r3, [sp, #0]
 801707c:	4603      	mov	r3, r0
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f7ed fccb 	bl	8004a1a <USBH_LL_OpenPipe>

  return USBH_OK;
 8017084:	2300      	movs	r3, #0
}
 8017086:	4618      	mov	r0, r3
 8017088:	3708      	adds	r7, #8
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}

0801708e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801708e:	b580      	push	{r7, lr}
 8017090:	b082      	sub	sp, #8
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
 8017096:	460b      	mov	r3, r1
 8017098:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801709a:	78fb      	ldrb	r3, [r7, #3]
 801709c:	4619      	mov	r1, r3
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f7ed fcea 	bl	8004a78 <USBH_LL_ClosePipe>

  return USBH_OK;
 80170a4:	2300      	movs	r3, #0
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3708      	adds	r7, #8
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}

080170ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b084      	sub	sp, #16
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
 80170b6:	460b      	mov	r3, r1
 80170b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 f839 	bl	8017132 <USBH_GetFreePipe>
 80170c0:	4603      	mov	r3, r0
 80170c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80170c4:	89fb      	ldrh	r3, [r7, #14]
 80170c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170ca:	4293      	cmp	r3, r2
 80170cc:	d00b      	beq.n	80170e6 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80170ce:	78fa      	ldrb	r2, [r7, #3]
 80170d0:	89fb      	ldrh	r3, [r7, #14]
 80170d2:	f003 030f 	and.w	r3, r3, #15
 80170d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80170da:	6879      	ldr	r1, [r7, #4]
 80170dc:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	440b      	add	r3, r1
 80170e4:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80170e6:	89fb      	ldrh	r3, [r7, #14]
 80170e8:	b2db      	uxtb	r3, r3
}
 80170ea:	4618      	mov	r0, r3
 80170ec:	3710      	adds	r7, #16
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}

080170f2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80170f2:	b480      	push	{r7}
 80170f4:	b083      	sub	sp, #12
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	6078      	str	r0, [r7, #4]
 80170fa:	460b      	mov	r3, r1
 80170fc:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80170fe:	78fb      	ldrb	r3, [r7, #3]
 8017100:	2b0f      	cmp	r3, #15
 8017102:	d80f      	bhi.n	8017124 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8017104:	78fb      	ldrb	r3, [r7, #3]
 8017106:	687a      	ldr	r2, [r7, #4]
 8017108:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	4413      	add	r3, r2
 8017110:	685a      	ldr	r2, [r3, #4]
 8017112:	78fb      	ldrb	r3, [r7, #3]
 8017114:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017118:	6879      	ldr	r1, [r7, #4]
 801711a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801711e:	009b      	lsls	r3, r3, #2
 8017120:	440b      	add	r3, r1
 8017122:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8017124:	2300      	movs	r3, #0
}
 8017126:	4618      	mov	r0, r3
 8017128:	370c      	adds	r7, #12
 801712a:	46bd      	mov	sp, r7
 801712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017130:	4770      	bx	lr

08017132 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8017132:	b480      	push	{r7}
 8017134:	b085      	sub	sp, #20
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801713a:	2300      	movs	r3, #0
 801713c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801713e:	2300      	movs	r3, #0
 8017140:	73fb      	strb	r3, [r7, #15]
 8017142:	e010      	b.n	8017166 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8017144:	7bfb      	ldrb	r3, [r7, #15]
 8017146:	687a      	ldr	r2, [r7, #4]
 8017148:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801714c:	009b      	lsls	r3, r3, #2
 801714e:	4413      	add	r3, r2
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017156:	2b00      	cmp	r3, #0
 8017158:	d102      	bne.n	8017160 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 801715a:	7bfb      	ldrb	r3, [r7, #15]
 801715c:	b29b      	uxth	r3, r3
 801715e:	e007      	b.n	8017170 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017160:	7bfb      	ldrb	r3, [r7, #15]
 8017162:	3301      	adds	r3, #1
 8017164:	73fb      	strb	r3, [r7, #15]
 8017166:	7bfb      	ldrb	r3, [r7, #15]
 8017168:	2b0f      	cmp	r3, #15
 801716a:	d9eb      	bls.n	8017144 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801716c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8017170:	4618      	mov	r0, r3
 8017172:	3714      	adds	r7, #20
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr

0801717c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801717c:	b480      	push	{r7}
 801717e:	b087      	sub	sp, #28
 8017180:	af00      	add	r7, sp, #0
 8017182:	60f8      	str	r0, [r7, #12]
 8017184:	60b9      	str	r1, [r7, #8]
 8017186:	4613      	mov	r3, r2
 8017188:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801718a:	2301      	movs	r3, #1
 801718c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801718e:	2300      	movs	r3, #0
 8017190:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017192:	4b1f      	ldr	r3, [pc, #124]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 8017194:	7a5b      	ldrb	r3, [r3, #9]
 8017196:	b2db      	uxtb	r3, r3
 8017198:	2b00      	cmp	r3, #0
 801719a:	d131      	bne.n	8017200 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801719c:	4b1c      	ldr	r3, [pc, #112]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 801719e:	7a5b      	ldrb	r3, [r3, #9]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	461a      	mov	r2, r3
 80171a4:	4b1a      	ldr	r3, [pc, #104]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171a6:	2100      	movs	r1, #0
 80171a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80171aa:	4b19      	ldr	r3, [pc, #100]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171ac:	7a5b      	ldrb	r3, [r3, #9]
 80171ae:	b2db      	uxtb	r3, r3
 80171b0:	4a17      	ldr	r2, [pc, #92]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	4413      	add	r3, r2
 80171b6:	68fa      	ldr	r2, [r7, #12]
 80171b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80171ba:	4b15      	ldr	r3, [pc, #84]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171bc:	7a5b      	ldrb	r3, [r3, #9]
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	461a      	mov	r2, r3
 80171c2:	4b13      	ldr	r3, [pc, #76]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171c4:	4413      	add	r3, r2
 80171c6:	79fa      	ldrb	r2, [r7, #7]
 80171c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80171ca:	4b11      	ldr	r3, [pc, #68]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171cc:	7a5b      	ldrb	r3, [r3, #9]
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	1c5a      	adds	r2, r3, #1
 80171d2:	b2d1      	uxtb	r1, r2
 80171d4:	4a0e      	ldr	r2, [pc, #56]	; (8017210 <FATFS_LinkDriverEx+0x94>)
 80171d6:	7251      	strb	r1, [r2, #9]
 80171d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80171da:	7dbb      	ldrb	r3, [r7, #22]
 80171dc:	3330      	adds	r3, #48	; 0x30
 80171de:	b2da      	uxtb	r2, r3
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	3301      	adds	r3, #1
 80171e8:	223a      	movs	r2, #58	; 0x3a
 80171ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	3302      	adds	r3, #2
 80171f0:	222f      	movs	r2, #47	; 0x2f
 80171f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	3303      	adds	r3, #3
 80171f8:	2200      	movs	r2, #0
 80171fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017200:	7dfb      	ldrb	r3, [r7, #23]
}
 8017202:	4618      	mov	r0, r3
 8017204:	371c      	adds	r7, #28
 8017206:	46bd      	mov	sp, r7
 8017208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720c:	4770      	bx	lr
 801720e:	bf00      	nop
 8017210:	20001fb0 	.word	0x20001fb0

08017214 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801721e:	2200      	movs	r2, #0
 8017220:	6839      	ldr	r1, [r7, #0]
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f7ff ffaa 	bl	801717c <FATFS_LinkDriverEx>
 8017228:	4603      	mov	r3, r0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3708      	adds	r7, #8
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
	...

08017234 <malloc>:
 8017234:	4b02      	ldr	r3, [pc, #8]	; (8017240 <malloc+0xc>)
 8017236:	4601      	mov	r1, r0
 8017238:	6818      	ldr	r0, [r3, #0]
 801723a:	f000 b82b 	b.w	8017294 <_malloc_r>
 801723e:	bf00      	nop
 8017240:	20000088 	.word	0x20000088

08017244 <free>:
 8017244:	4b02      	ldr	r3, [pc, #8]	; (8017250 <free+0xc>)
 8017246:	4601      	mov	r1, r0
 8017248:	6818      	ldr	r0, [r3, #0]
 801724a:	f000 b8f3 	b.w	8017434 <_free_r>
 801724e:	bf00      	nop
 8017250:	20000088 	.word	0x20000088

08017254 <sbrk_aligned>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	4e0e      	ldr	r6, [pc, #56]	; (8017290 <sbrk_aligned+0x3c>)
 8017258:	460c      	mov	r4, r1
 801725a:	6831      	ldr	r1, [r6, #0]
 801725c:	4605      	mov	r5, r0
 801725e:	b911      	cbnz	r1, 8017266 <sbrk_aligned+0x12>
 8017260:	f000 f8ac 	bl	80173bc <_sbrk_r>
 8017264:	6030      	str	r0, [r6, #0]
 8017266:	4621      	mov	r1, r4
 8017268:	4628      	mov	r0, r5
 801726a:	f000 f8a7 	bl	80173bc <_sbrk_r>
 801726e:	1c43      	adds	r3, r0, #1
 8017270:	d00a      	beq.n	8017288 <sbrk_aligned+0x34>
 8017272:	1cc4      	adds	r4, r0, #3
 8017274:	f024 0403 	bic.w	r4, r4, #3
 8017278:	42a0      	cmp	r0, r4
 801727a:	d007      	beq.n	801728c <sbrk_aligned+0x38>
 801727c:	1a21      	subs	r1, r4, r0
 801727e:	4628      	mov	r0, r5
 8017280:	f000 f89c 	bl	80173bc <_sbrk_r>
 8017284:	3001      	adds	r0, #1
 8017286:	d101      	bne.n	801728c <sbrk_aligned+0x38>
 8017288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801728c:	4620      	mov	r0, r4
 801728e:	bd70      	pop	{r4, r5, r6, pc}
 8017290:	20001fc0 	.word	0x20001fc0

08017294 <_malloc_r>:
 8017294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017298:	1ccd      	adds	r5, r1, #3
 801729a:	f025 0503 	bic.w	r5, r5, #3
 801729e:	3508      	adds	r5, #8
 80172a0:	2d0c      	cmp	r5, #12
 80172a2:	bf38      	it	cc
 80172a4:	250c      	movcc	r5, #12
 80172a6:	2d00      	cmp	r5, #0
 80172a8:	4607      	mov	r7, r0
 80172aa:	db01      	blt.n	80172b0 <_malloc_r+0x1c>
 80172ac:	42a9      	cmp	r1, r5
 80172ae:	d905      	bls.n	80172bc <_malloc_r+0x28>
 80172b0:	230c      	movs	r3, #12
 80172b2:	603b      	str	r3, [r7, #0]
 80172b4:	2600      	movs	r6, #0
 80172b6:	4630      	mov	r0, r6
 80172b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017390 <_malloc_r+0xfc>
 80172c0:	f000 f868 	bl	8017394 <__malloc_lock>
 80172c4:	f8d8 3000 	ldr.w	r3, [r8]
 80172c8:	461c      	mov	r4, r3
 80172ca:	bb5c      	cbnz	r4, 8017324 <_malloc_r+0x90>
 80172cc:	4629      	mov	r1, r5
 80172ce:	4638      	mov	r0, r7
 80172d0:	f7ff ffc0 	bl	8017254 <sbrk_aligned>
 80172d4:	1c43      	adds	r3, r0, #1
 80172d6:	4604      	mov	r4, r0
 80172d8:	d155      	bne.n	8017386 <_malloc_r+0xf2>
 80172da:	f8d8 4000 	ldr.w	r4, [r8]
 80172de:	4626      	mov	r6, r4
 80172e0:	2e00      	cmp	r6, #0
 80172e2:	d145      	bne.n	8017370 <_malloc_r+0xdc>
 80172e4:	2c00      	cmp	r4, #0
 80172e6:	d048      	beq.n	801737a <_malloc_r+0xe6>
 80172e8:	6823      	ldr	r3, [r4, #0]
 80172ea:	4631      	mov	r1, r6
 80172ec:	4638      	mov	r0, r7
 80172ee:	eb04 0903 	add.w	r9, r4, r3
 80172f2:	f000 f863 	bl	80173bc <_sbrk_r>
 80172f6:	4581      	cmp	r9, r0
 80172f8:	d13f      	bne.n	801737a <_malloc_r+0xe6>
 80172fa:	6821      	ldr	r1, [r4, #0]
 80172fc:	1a6d      	subs	r5, r5, r1
 80172fe:	4629      	mov	r1, r5
 8017300:	4638      	mov	r0, r7
 8017302:	f7ff ffa7 	bl	8017254 <sbrk_aligned>
 8017306:	3001      	adds	r0, #1
 8017308:	d037      	beq.n	801737a <_malloc_r+0xe6>
 801730a:	6823      	ldr	r3, [r4, #0]
 801730c:	442b      	add	r3, r5
 801730e:	6023      	str	r3, [r4, #0]
 8017310:	f8d8 3000 	ldr.w	r3, [r8]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d038      	beq.n	801738a <_malloc_r+0xf6>
 8017318:	685a      	ldr	r2, [r3, #4]
 801731a:	42a2      	cmp	r2, r4
 801731c:	d12b      	bne.n	8017376 <_malloc_r+0xe2>
 801731e:	2200      	movs	r2, #0
 8017320:	605a      	str	r2, [r3, #4]
 8017322:	e00f      	b.n	8017344 <_malloc_r+0xb0>
 8017324:	6822      	ldr	r2, [r4, #0]
 8017326:	1b52      	subs	r2, r2, r5
 8017328:	d41f      	bmi.n	801736a <_malloc_r+0xd6>
 801732a:	2a0b      	cmp	r2, #11
 801732c:	d917      	bls.n	801735e <_malloc_r+0xca>
 801732e:	1961      	adds	r1, r4, r5
 8017330:	42a3      	cmp	r3, r4
 8017332:	6025      	str	r5, [r4, #0]
 8017334:	bf18      	it	ne
 8017336:	6059      	strne	r1, [r3, #4]
 8017338:	6863      	ldr	r3, [r4, #4]
 801733a:	bf08      	it	eq
 801733c:	f8c8 1000 	streq.w	r1, [r8]
 8017340:	5162      	str	r2, [r4, r5]
 8017342:	604b      	str	r3, [r1, #4]
 8017344:	4638      	mov	r0, r7
 8017346:	f104 060b 	add.w	r6, r4, #11
 801734a:	f000 f829 	bl	80173a0 <__malloc_unlock>
 801734e:	f026 0607 	bic.w	r6, r6, #7
 8017352:	1d23      	adds	r3, r4, #4
 8017354:	1af2      	subs	r2, r6, r3
 8017356:	d0ae      	beq.n	80172b6 <_malloc_r+0x22>
 8017358:	1b9b      	subs	r3, r3, r6
 801735a:	50a3      	str	r3, [r4, r2]
 801735c:	e7ab      	b.n	80172b6 <_malloc_r+0x22>
 801735e:	42a3      	cmp	r3, r4
 8017360:	6862      	ldr	r2, [r4, #4]
 8017362:	d1dd      	bne.n	8017320 <_malloc_r+0x8c>
 8017364:	f8c8 2000 	str.w	r2, [r8]
 8017368:	e7ec      	b.n	8017344 <_malloc_r+0xb0>
 801736a:	4623      	mov	r3, r4
 801736c:	6864      	ldr	r4, [r4, #4]
 801736e:	e7ac      	b.n	80172ca <_malloc_r+0x36>
 8017370:	4634      	mov	r4, r6
 8017372:	6876      	ldr	r6, [r6, #4]
 8017374:	e7b4      	b.n	80172e0 <_malloc_r+0x4c>
 8017376:	4613      	mov	r3, r2
 8017378:	e7cc      	b.n	8017314 <_malloc_r+0x80>
 801737a:	230c      	movs	r3, #12
 801737c:	603b      	str	r3, [r7, #0]
 801737e:	4638      	mov	r0, r7
 8017380:	f000 f80e 	bl	80173a0 <__malloc_unlock>
 8017384:	e797      	b.n	80172b6 <_malloc_r+0x22>
 8017386:	6025      	str	r5, [r4, #0]
 8017388:	e7dc      	b.n	8017344 <_malloc_r+0xb0>
 801738a:	605b      	str	r3, [r3, #4]
 801738c:	deff      	udf	#255	; 0xff
 801738e:	bf00      	nop
 8017390:	20001fbc 	.word	0x20001fbc

08017394 <__malloc_lock>:
 8017394:	4801      	ldr	r0, [pc, #4]	; (801739c <__malloc_lock+0x8>)
 8017396:	f000 b84b 	b.w	8017430 <__retarget_lock_acquire_recursive>
 801739a:	bf00      	nop
 801739c:	200020fc 	.word	0x200020fc

080173a0 <__malloc_unlock>:
 80173a0:	4801      	ldr	r0, [pc, #4]	; (80173a8 <__malloc_unlock+0x8>)
 80173a2:	f000 b846 	b.w	8017432 <__retarget_lock_release_recursive>
 80173a6:	bf00      	nop
 80173a8:	200020fc 	.word	0x200020fc

080173ac <memset>:
 80173ac:	4402      	add	r2, r0
 80173ae:	4603      	mov	r3, r0
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d100      	bne.n	80173b6 <memset+0xa>
 80173b4:	4770      	bx	lr
 80173b6:	f803 1b01 	strb.w	r1, [r3], #1
 80173ba:	e7f9      	b.n	80173b0 <memset+0x4>

080173bc <_sbrk_r>:
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	4d06      	ldr	r5, [pc, #24]	; (80173d8 <_sbrk_r+0x1c>)
 80173c0:	2300      	movs	r3, #0
 80173c2:	4604      	mov	r4, r0
 80173c4:	4608      	mov	r0, r1
 80173c6:	602b      	str	r3, [r5, #0]
 80173c8:	f7ec f982 	bl	80036d0 <_sbrk>
 80173cc:	1c43      	adds	r3, r0, #1
 80173ce:	d102      	bne.n	80173d6 <_sbrk_r+0x1a>
 80173d0:	682b      	ldr	r3, [r5, #0]
 80173d2:	b103      	cbz	r3, 80173d6 <_sbrk_r+0x1a>
 80173d4:	6023      	str	r3, [r4, #0]
 80173d6:	bd38      	pop	{r3, r4, r5, pc}
 80173d8:	20002100 	.word	0x20002100

080173dc <__errno>:
 80173dc:	4b01      	ldr	r3, [pc, #4]	; (80173e4 <__errno+0x8>)
 80173de:	6818      	ldr	r0, [r3, #0]
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	20000088 	.word	0x20000088

080173e8 <__libc_init_array>:
 80173e8:	b570      	push	{r4, r5, r6, lr}
 80173ea:	4d0d      	ldr	r5, [pc, #52]	; (8017420 <__libc_init_array+0x38>)
 80173ec:	4c0d      	ldr	r4, [pc, #52]	; (8017424 <__libc_init_array+0x3c>)
 80173ee:	1b64      	subs	r4, r4, r5
 80173f0:	10a4      	asrs	r4, r4, #2
 80173f2:	2600      	movs	r6, #0
 80173f4:	42a6      	cmp	r6, r4
 80173f6:	d109      	bne.n	801740c <__libc_init_array+0x24>
 80173f8:	4d0b      	ldr	r5, [pc, #44]	; (8017428 <__libc_init_array+0x40>)
 80173fa:	4c0c      	ldr	r4, [pc, #48]	; (801742c <__libc_init_array+0x44>)
 80173fc:	f000 f88c 	bl	8017518 <_init>
 8017400:	1b64      	subs	r4, r4, r5
 8017402:	10a4      	asrs	r4, r4, #2
 8017404:	2600      	movs	r6, #0
 8017406:	42a6      	cmp	r6, r4
 8017408:	d105      	bne.n	8017416 <__libc_init_array+0x2e>
 801740a:	bd70      	pop	{r4, r5, r6, pc}
 801740c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017410:	4798      	blx	r3
 8017412:	3601      	adds	r6, #1
 8017414:	e7ee      	b.n	80173f4 <__libc_init_array+0xc>
 8017416:	f855 3b04 	ldr.w	r3, [r5], #4
 801741a:	4798      	blx	r3
 801741c:	3601      	adds	r6, #1
 801741e:	e7f2      	b.n	8017406 <__libc_init_array+0x1e>
 8017420:	080195a0 	.word	0x080195a0
 8017424:	080195a0 	.word	0x080195a0
 8017428:	080195a0 	.word	0x080195a0
 801742c:	080195a4 	.word	0x080195a4

08017430 <__retarget_lock_acquire_recursive>:
 8017430:	4770      	bx	lr

08017432 <__retarget_lock_release_recursive>:
 8017432:	4770      	bx	lr

08017434 <_free_r>:
 8017434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017436:	2900      	cmp	r1, #0
 8017438:	d044      	beq.n	80174c4 <_free_r+0x90>
 801743a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801743e:	9001      	str	r0, [sp, #4]
 8017440:	2b00      	cmp	r3, #0
 8017442:	f1a1 0404 	sub.w	r4, r1, #4
 8017446:	bfb8      	it	lt
 8017448:	18e4      	addlt	r4, r4, r3
 801744a:	f7ff ffa3 	bl	8017394 <__malloc_lock>
 801744e:	4a1e      	ldr	r2, [pc, #120]	; (80174c8 <_free_r+0x94>)
 8017450:	9801      	ldr	r0, [sp, #4]
 8017452:	6813      	ldr	r3, [r2, #0]
 8017454:	b933      	cbnz	r3, 8017464 <_free_r+0x30>
 8017456:	6063      	str	r3, [r4, #4]
 8017458:	6014      	str	r4, [r2, #0]
 801745a:	b003      	add	sp, #12
 801745c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017460:	f7ff bf9e 	b.w	80173a0 <__malloc_unlock>
 8017464:	42a3      	cmp	r3, r4
 8017466:	d908      	bls.n	801747a <_free_r+0x46>
 8017468:	6825      	ldr	r5, [r4, #0]
 801746a:	1961      	adds	r1, r4, r5
 801746c:	428b      	cmp	r3, r1
 801746e:	bf01      	itttt	eq
 8017470:	6819      	ldreq	r1, [r3, #0]
 8017472:	685b      	ldreq	r3, [r3, #4]
 8017474:	1949      	addeq	r1, r1, r5
 8017476:	6021      	streq	r1, [r4, #0]
 8017478:	e7ed      	b.n	8017456 <_free_r+0x22>
 801747a:	461a      	mov	r2, r3
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	b10b      	cbz	r3, 8017484 <_free_r+0x50>
 8017480:	42a3      	cmp	r3, r4
 8017482:	d9fa      	bls.n	801747a <_free_r+0x46>
 8017484:	6811      	ldr	r1, [r2, #0]
 8017486:	1855      	adds	r5, r2, r1
 8017488:	42a5      	cmp	r5, r4
 801748a:	d10b      	bne.n	80174a4 <_free_r+0x70>
 801748c:	6824      	ldr	r4, [r4, #0]
 801748e:	4421      	add	r1, r4
 8017490:	1854      	adds	r4, r2, r1
 8017492:	42a3      	cmp	r3, r4
 8017494:	6011      	str	r1, [r2, #0]
 8017496:	d1e0      	bne.n	801745a <_free_r+0x26>
 8017498:	681c      	ldr	r4, [r3, #0]
 801749a:	685b      	ldr	r3, [r3, #4]
 801749c:	6053      	str	r3, [r2, #4]
 801749e:	440c      	add	r4, r1
 80174a0:	6014      	str	r4, [r2, #0]
 80174a2:	e7da      	b.n	801745a <_free_r+0x26>
 80174a4:	d902      	bls.n	80174ac <_free_r+0x78>
 80174a6:	230c      	movs	r3, #12
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	e7d6      	b.n	801745a <_free_r+0x26>
 80174ac:	6825      	ldr	r5, [r4, #0]
 80174ae:	1961      	adds	r1, r4, r5
 80174b0:	428b      	cmp	r3, r1
 80174b2:	bf04      	itt	eq
 80174b4:	6819      	ldreq	r1, [r3, #0]
 80174b6:	685b      	ldreq	r3, [r3, #4]
 80174b8:	6063      	str	r3, [r4, #4]
 80174ba:	bf04      	itt	eq
 80174bc:	1949      	addeq	r1, r1, r5
 80174be:	6021      	streq	r1, [r4, #0]
 80174c0:	6054      	str	r4, [r2, #4]
 80174c2:	e7ca      	b.n	801745a <_free_r+0x26>
 80174c4:	b003      	add	sp, #12
 80174c6:	bd30      	pop	{r4, r5, pc}
 80174c8:	20001fbc 	.word	0x20001fbc
 80174cc:	00000000 	.word	0x00000000

080174d0 <sqrt>:
 80174d0:	b508      	push	{r3, lr}
 80174d2:	ed2d 8b04 	vpush	{d8-d9}
 80174d6:	eeb0 8b40 	vmov.f64	d8, d0
 80174da:	f000 f819 	bl	8017510 <__ieee754_sqrt>
 80174de:	eeb4 8b48 	vcmp.f64	d8, d8
 80174e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e6:	d60c      	bvs.n	8017502 <sqrt+0x32>
 80174e8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8017508 <sqrt+0x38>
 80174ec:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80174f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f4:	d505      	bpl.n	8017502 <sqrt+0x32>
 80174f6:	f7ff ff71 	bl	80173dc <__errno>
 80174fa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80174fe:	2321      	movs	r3, #33	; 0x21
 8017500:	6003      	str	r3, [r0, #0]
 8017502:	ecbd 8b04 	vpop	{d8-d9}
 8017506:	bd08      	pop	{r3, pc}
	...

08017510 <__ieee754_sqrt>:
 8017510:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8017514:	4770      	bx	lr
	...

08017518 <_init>:
 8017518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801751a:	bf00      	nop
 801751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801751e:	bc08      	pop	{r3}
 8017520:	469e      	mov	lr, r3
 8017522:	4770      	bx	lr

08017524 <_fini>:
 8017524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017526:	bf00      	nop
 8017528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801752a:	bc08      	pop	{r3}
 801752c:	469e      	mov	lr, r3
 801752e:	4770      	bx	lr
