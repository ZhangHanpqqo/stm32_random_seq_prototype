
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017988  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001918  08017c20  08017c20  00027c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019538  08019538  00029538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019540  08019540  00029540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019544  08019544  00029544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08019548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002104  20000098  080195e0  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000219c  080195e0  0003219c  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004990e  00000000  00000000  00030109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000093af  00000000  00000000  00079a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003988  00000000  00000000  00082dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002cd4  00000000  00000000  00086750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00046608  00000000  00000000  00089424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ffb8  00000000  00000000  000cfa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195e58  00000000  00000000  0011f9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000fda4  00000000  00000000  002b583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c55e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000098 	.word	0x20000098
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017c08 	.word	0x08017c08

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	08017c08 	.word	0x08017c08

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tDelayExt_initToPool>:
    * you know you will write some comments one day, right
    */


void    tDelayExt_initToPool   (tDelayExt* const dlext, uint32_t* delays, uint32_t maxDelay, uint32_t numPoint, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
//	_tMempool* m = *mp;
    _tDelayExt* d = *dlext = (_tDelayExt*) malloc(sizeof(_tDelayExt));
 80005e2:	2010      	movs	r0, #16
 80005e4:	f016 fec2 	bl	801736c <malloc>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]

    tDelay_initToPool(&(d->tdelay), delays[0], maxDelay, mp);
 80005f6:	6938      	ldr	r0, [r7, #16]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	f000 f8ea 	bl	80007d8 <tDelay_initToPool>
    d->numPoint = numPoint;
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	605a      	str	r2, [r3, #4]
    d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f016 feac 	bl	801736c <malloc>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	609a      	str	r2, [r3, #8]
    d->lastOuts = (Lfloat *) malloc(sizeof(Lfloat) * numPoint);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f016 fea3 	bl	801736c <malloc>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < numPoint; i++){
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e015      	b.n	8000660 <tDelayExt_initToPool+0x8c>
    	d->delays[i] = delays[i];
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	441a      	add	r2, r3
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	6899      	ldr	r1, [r3, #8]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	601a      	str	r2, [r3, #0]
    	d->lastOuts[i] = 0.0f;
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < numPoint; i++){
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d8e5      	bhi.n	8000634 <tDelayExt_initToPool+0x60>
    }

}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <tDelayExt_tick>:
	_tDelayExt* d = *dlext;
//	_tDelay* dt = &(d->tdelay);
	for (unsigned i = 0; i < (d->tdelay)->maxDelay; i++) (d->tdelay)->buff[i] = 0;
}

void tDelayExt_tick(tDelayExt* const dlext, Lfloat input){
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	ed87 0a00 	vstr	s0, [r7]
	_tDelayExt* d = *dlext;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	60bb      	str	r3, [r7, #8]
//	_tDelay* dt = (d->tdelay);
	tDelay_tick(&(d->tdelay), input);
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	ed97 0a00 	vldr	s0, [r7]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f8e6 	bl	800085c <tDelay_tick>
	d->lastOuts[0] = (d->tdelay)->lastOut;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	68d2      	ldr	r2, [r2, #12]
 800069a:	601a      	str	r2, [r3, #0]

	for(int i = 1; i < d->numPoint; i++){
 800069c:	2301      	movs	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e014      	b.n	80006cc <tDelayExt_tick+0x5a>
		d->lastOuts[i] = tDelay_tapOut(&(d->tdelay), d->delays[i]);
 80006a2:	68b8      	ldr	r0, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	689a      	ldr	r2, [r3, #8]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	6819      	ldr	r1, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	18d4      	adds	r4, r2, r3
 80006ba:	f000 f95b 	bl	8000974 <tDelay_tapOut>
 80006be:	eef0 7a40 	vmov.f32	s15, s0
 80006c2:	edc4 7a00 	vstr	s15, [r4]
	for(int i = 1; i < d->numPoint; i++){
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3301      	adds	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d8e5      	bhi.n	80006a2 <tDelayExt_tick+0x30>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <tDelayExt_setDelay>:

void tDelayExt_setDelay(tDelayExt* const dlext, uint32_t* delays){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	_tDelayExt* d = *dlext;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	60bb      	str	r3, [r7, #8]
//	_tDelay* dt = &(d->tdelay);
	tDelay_setDelay(&(d->tdelay), delays[0]);
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4610      	mov	r0, r2
 80006fa:	f000 f8fb 	bl	80008f4 <tDelay_setDelay>
	for (int i = 0; i < d->numPoint; i++){
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e00d      	b.n	8000720 <tDelayExt_setDelay+0x40>
	    	d->delays[i] = delays[i];
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	441a      	add	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	6899      	ldr	r1, [r3, #8]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	440b      	add	r3, r1
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < d->numPoint; i++){
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	429a      	cmp	r2, r3
 8000728:	d8ec      	bhi.n	8000704 <tDelayExt_setDelay+0x24>
	    }
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <tDelayExt_setNumPoint>:

void tDelayExt_setNumPoint(tDelayExt* const dlext, int numPoint){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	_tDelayExt* d = *dlext;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	60fb      	str	r3, [r7, #12]
	uint32_t* t = &(d->tdelay);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	60bb      	str	r3, [r7, #8]
	d->delays = (uint32_t *) malloc(sizeof(uint32_t) * numPoint);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4618      	mov	r0, r3
 800074e:	f016 fe0d 	bl	801736c <malloc>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	609a      	str	r2, [r3, #8]
	memcpy( &(d->tdelay), t, ((numPoint < d->numPoint) ? numPoint:d->numPoint) * sizeof(uint32_t));
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	4293      	cmp	r3, r2
 8000764:	bf28      	it	cs
 8000766:	4613      	movcs	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	461a      	mov	r2, r3
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	f016 fefd 	bl	801756c <memcpy>
	d->numPoint = numPoint;
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	605a      	str	r2, [r3, #4]
	free(t);
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f016 fdff 	bl	801737c <free>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_LEAF_clip>:

#endif

// cannot find things in delay_math.h
Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000790:	edc7 0a02 	vstr	s1, [r7, #8]
 8000794:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 8000798:	ed97 7a02 	vldr	s14, [r7, #8]
 800079c:	edd7 7a03 	vldr	s15, [r7, #12]
 80007a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	d501      	bpl.n	80007ae <_LEAF_clip+0x28>
    {
        return min;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	e00b      	b.n	80007c6 <_LEAF_clip+0x40>
    }
    else if (val > max)
 80007ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80007b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007be:	dd01      	ble.n	80007c4 <_LEAF_clip+0x3e>
    {
        return max;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	e000      	b.n	80007c6 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 80007c4:	68bb      	ldr	r3, [r7, #8]
    }
}
 80007c6:	ee07 3a90 	vmov	s15, r3
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <tDelay_initToPool>:
{
    tDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void    tDelay_initToPool   (tDelay* const dl, uint32_t delay, uint32_t maxDelay, tMempool* const mp)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
    _tMempool* m = *mp;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	617b      	str	r3, [r7, #20]
    _tDelay* d = *dl = (_tDelay*) mpool_alloc(sizeof(_tDelay), m);
 80007ec:	6979      	ldr	r1, [r7, #20]
 80007ee:	2024      	movs	r0, #36	; 0x24
 80007f0:	f000 fa27 	bl	8000c42 <mpool_alloc>
 80007f4:	4602      	mov	r2, r0
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	621a      	str	r2, [r3, #32]

    d->delay = delay;
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	61da      	str	r2, [r3, #28]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	6979      	ldr	r1, [r7, #20]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa12 	bl	8000c42 <mpool_alloc>
 800081e:	4602      	mov	r2, r0
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	609a      	str	r2, [r3, #8]
    
    d->inPoint = 0;
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
    d->outPoint = 0;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
    
    d->lastIn = 0.0f;
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	f04f 0200 	mov.w	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    
    d->gain = 1.0f;
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000846:	605a      	str	r2, [r3, #4]
    
    tDelay_setDelay(dl, d->delay);
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4619      	mov	r1, r3
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f000 f850 	bl	80008f4 <tDelay_setDelay>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <tDelay_tick>:
        d->buff[i] = 0;
    }
}

Lfloat   tDelay_tick (tDelay* const dl, Lfloat input)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	ed87 0a00 	vstr	s0, [r7]
    _tDelay* d = *dl;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]

    // Input
    d->lastIn = input;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	611a      	str	r2, [r3, #16]
    d->buff[d->inPoint] = input * d->gain;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ed93 7a01 	vldr	s14, [r3, #4]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	edd7 7a00 	vldr	s15, [r7]
 800088a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088e:	edc3 7a00 	vstr	s15, [r3]
    if (++(d->inPoint) == d->maxDelay)     d->inPoint = 0;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	6a1b      	ldr	r3, [r3, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d102      	bne.n	80008ae <tDelay_tick+0x52>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]

    // Output
    d->lastOut = d->buff[d->outPoint];
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	60da      	str	r2, [r3, #12]
    if (++(d->outPoint) == d->maxDelay)    d->outPoint = 0;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	619a      	str	r2, [r3, #24]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6a1b      	ldr	r3, [r3, #32]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d102      	bne.n	80008dc <tDelay_tick+0x80>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]

    return d->lastOut;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	ee07 3a90 	vmov	s15, r3
}
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <tDelay_setDelay>:



void     tDelay_setDelay (tDelay* const dl, uint32_t delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
    _tDelay* d = *dl;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	60fb      	str	r3, [r7, #12]

    d->delay = _LEAF_clip(0.0f, delay,  d->maxDelay);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	ee07 3a10 	vmov	s14, r3
 8000916:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800091a:	eeb0 1a47 	vmov.f32	s2, s14
 800091e:	eef0 0a67 	vmov.f32	s1, s15
 8000922:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000970 <tDelay_setDelay+0x7c>
 8000926:	f7ff ff2e 	bl	8000786 <_LEAF_clip>
 800092a:	eef0 7a40 	vmov.f32	s15, s0
 800092e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000932:	ee17 2a90 	vmov	r2, s15
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	61da      	str	r2, [r3, #28]

    // read chases write
    if ( d->inPoint >= delay )  d->outPoint = d->inPoint - d->delay;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d807      	bhi.n	8000954 <tDelay_setDelay+0x60>
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	619a      	str	r2, [r3, #24]
    else                        d->outPoint = d->maxDelay + d->inPoint - d->delay;
}
 8000952:	e009      	b.n	8000968 <tDelay_setDelay+0x74>
    else                        d->outPoint = d->maxDelay + d->inPoint - d->delay;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a1a      	ldr	r2, [r3, #32]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	441a      	add	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	1ad2      	subs	r2, r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	619a      	str	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	00000000 	.word	0x00000000

08000974 <tDelay_tapOut>:

Lfloat tDelay_tapOut (tDelay* const dl, uint32_t tapDelay)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
    _tDelay* d = *dl;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	60bb      	str	r3, [r7, #8]

    int32_t tap = d->inPoint - tapDelay - 1;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	3b01      	subs	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 8000990:	e004      	b.n	800099c <tDelay_tapOut+0x28>
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	6a1a      	ldr	r2, [r3, #32]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dbf7      	blt.n	8000992 <tDelay_tapOut+0x1e>

    return d->buff[tap];
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	ee07 3a90 	vmov	s15, r3

}
 80009b2:	eeb0 0a67 	vmov.f32	s0, s15
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80009cc:	6079      	str	r1, [r7, #4]
 80009ce:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80009d6:	69f9      	ldr	r1, [r7, #28]
 80009d8:	2028      	movs	r0, #40	; 0x28
 80009da:	f000 f932 	bl	8000c42 <mpool_alloc>
 80009de:	4602      	mov	r2, r0
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	69fa      	ldr	r2, [r7, #28]
 80009ee:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8000a06:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000ac8 <tRamp_initToPool+0x108>
 8000a0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a58:	d504      	bpl.n	8000a64 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	61da      	str	r2, [r3, #28]
 8000a62:	e002      	b.n	8000a6a <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	edd3 7a07 	vldr	s15, [r3, #28]
 8000a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000aaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	3a83126f 	.word	0x3a83126f

08000acc <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ed93 7a06 	vldr	s14, [r3, #24]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	edd3 7a05 	vldr	s15, [r3, #20]
 8000af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	edd3 7a08 	vldr	s15, [r3, #32]
 8000afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	db07      	blt.n	8000b5a <tRamp_tick+0x4a>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	dc12      	bgt.n	8000b80 <tRamp_tick+0x70>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6e:	d80f      	bhi.n	8000b90 <tRamp_tick+0x80>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7e:	d507      	bpl.n	8000b90 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	699a      	ldr	r2, [r3, #24]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	ee07 3a90 	vmov	s15, r3
}
 8000b98:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000ba6:	b590      	push	{r4, r7, lr}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685c      	ldr	r4, [r3, #4]
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f000 f902 	bl	8000dc0 <mpool_align>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d203      	bcs.n	8000be0 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6898      	ldr	r0, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf4:	1ad2      	subs	r2, r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	f000 f8ea 	bl	8000ddc <create_node>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	615a      	str	r2, [r3, #20]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}

08000c16 <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	331c      	adds	r3, #28
 8000c26:	461a      	mov	r2, r3
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	68b8      	ldr	r0, [r7, #8]
 8000c2c:	f7ff ffbb 	bl	8000ba6 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f103 021c 	add.w	r2, r3, #28
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	619a      	str	r2, [r3, #24]
}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000c42:	b590      	push	{r4, r7, lr}
 8000c44:	b08d      	sub	sp, #52	; 0x34
 8000c46:	af02      	add	r7, sp, #8
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c52:	3201      	adds	r2, #1
 8000c54:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d206      	bcs.n	8000c7c <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f9f9 	bl	800106c <LEAF_internalErrorCallback>
 8000c7a:	e005      	b.n	8000c88 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f9f2 	bl	800106c <LEAF_internalErrorCallback>
        }
        return NULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e095      	b.n	8000db8 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f897 	bl	8000dc0 <mpool_align>
 8000c92:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000c9a:	e01c      	b.n	8000cd6 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d116      	bne.n	8000cd6 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d206      	bcs.n	8000cc6 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f9d4 	bl	800106c <LEAF_internalErrorCallback>
 8000cc4:	e005      	b.n	8000cd2 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f9cd 	bl	800106c <LEAF_internalErrorCallback>
            }
            return NULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e070      	b.n	8000db8 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8dd      	bhi.n	8000c9c <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d924      	bls.n	8000d46 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	441a      	add	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4413      	add	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	4622      	mov	r2, r4
 8000d3e:	f000 f84d 	bl	8000ddc <create_node>
 8000d42:	6238      	str	r0, [r7, #32]
 8000d44:	e008      	b.n	8000d58 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d102      	bne.n	8000d68 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	6a3a      	ldr	r2, [r7, #32]
 8000d66:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8000d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d6a:	f000 f855 	bl	8000e18 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	441a      	add	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dd12      	ble.n	8000db4 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e007      	b.n	8000daa <mpool_alloc+0x168>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f2      	bhi.n	8000d9a <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	681b      	ldr	r3, [r3, #0]
#endif
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	372c      	adds	r7, #44	; 0x2c
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}

08000dc0 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3307      	adds	r3, #7
 8000dcc:	f023 0307 	bic.w	r3, r3, #7
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	441a      	add	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]
    node->next = next;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
    node->size = size;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	60da      	str	r2, [r3, #12]
    return node;
 8000e0a:	697b      	ldr	r3, [r7, #20]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d004      	beq.n	8000e32 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6892      	ldr	r2, [r2, #8]
 8000e30:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6852      	ldr	r2, [r2, #4]
 8000e42:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	3318      	adds	r3, #24
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f000 f804 	bl	8000e80 <tMempool_initToPool>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8000e94:	6979      	ldr	r1, [r7, #20]
 8000e96:	2018      	movs	r0, #24
 8000e98:	f7ff fed3 	bl	8000c42 <mpool_alloc>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68b8      	ldr	r0, [r7, #8]
 8000eb6:	f7ff fe76 	bl	8000ba6 <mpool_create>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8000ed4:	6979      	ldr	r1, [r7, #20]
 8000ed6:	2018      	movs	r0, #24
 8000ed8:	f7ff feb3 	bl	8000c42 <mpool_alloc>
 8000edc:	4602      	mov	r2, r0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f08:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f28 <tCycle_initToPool+0x64>
 8000f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f1c:	615a      	str	r2, [r3, #20]
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	4f800000 	.word	0x4f800000

08000f2c <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f4a:	edd7 7a00 	vldr	s15, [r7]
 8000f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f56:	ee17 2a90 	vmov	r2, s15
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b088      	sub	sp, #32
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	460b      	mov	r3, r1
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8000f7e:	69f9      	ldr	r1, [r7, #28]
 8000f80:	2018      	movs	r0, #24
 8000f82:	f7ff fe5e 	bl	8000c42 <mpool_alloc>
 8000f86:	4602      	mov	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	7afa      	ldrb	r2, [r7, #11]
 8000fa4:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	615a      	str	r2, [r3, #20]
}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6178      	str	r0, [r7, #20]
 8000fc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fc4:	60f9      	str	r1, [r7, #12]
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	68f9      	ldr	r1, [r7, #12]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff fe1e 	bl	8000c16 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8000fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fe4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800104c <LEAF_init+0x94>
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LEAF_init+0x98>)
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	e009      	b.n	8001032 <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	330e      	adds	r3, #14
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	3301      	adds	r3, #1
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2b02      	cmp	r3, #2
 8001036:	ddf2      	ble.n	800101e <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2200      	movs	r2, #0
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2200      	movs	r2, #0
 8001042:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40c90fdb 	.word	0x40c90fdb
 8001050:	08001055 	.word	0x08001055

08001054 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	330e      	adds	r3, #14
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	2201      	movs	r2, #1
 8001084:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	78fa      	ldrb	r2, [r7, #3]
 800108c:	4611      	mov	r1, r2
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MIDI_Application+0x54>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d111      	bne.n	80010cc <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MIDI_Application+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d10d      	bne.n	80010cc <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	4911      	ldr	r1, [pc, #68]	; (80010f8 <MIDI_Application+0x5c>)
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <MIDI_Application+0x60>)
 80010b6:	f003 fac8 	bl	800464a <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MIDI_Application+0x58>)
 80010bc:	2203      	movs	r2, #3
 80010be:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MIDI_Application+0x64>)
 80010c8:	f008 f91e 	bl	8009308 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MIDI_Application+0x54>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d10b      	bne.n	80010ec <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MIDI_Application+0x58>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <MIDI_Application+0x60>)
 80010dc:	f003 fa4f 	bl	800457e <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MIDI_Application+0x64>)
 80010e8:	f008 f90e 	bl	8009308 <HAL_GPIO_WritePin>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20001d38 	.word	0x20001d38
 80010f4:	20000000 	.word	0x20000000
 80010f8:	30000000 	.word	0x30000000
 80010fc:	30000460 	.word	0x30000460
 8001100:	58020400 	.word	0x58020400

08001104 <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 800110c:	4bab      	ldr	r3, [pc, #684]	; (80013bc <ProcessReceivedMidiDatas+0x2b8>)
 800110e:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 814a 	beq.w	80013b2 <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 800111e:	e142      	b.n	80013a6 <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	4ba6      	ldr	r3, [pc, #664]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	4ba3      	ldr	r3, [pc, #652]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 8001134:	705a      	strb	r2, [r3, #1]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3301      	adds	r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 8001142:	709a      	strb	r2, [r3, #2]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3301      	adds	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	781a      	ldrb	r2, [r3, #0]
 800114e:	4b9c      	ldr	r3, [pc, #624]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 8001150:	70da      	strb	r2, [r3, #3]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8001158:	4b99      	ldr	r3, [pc, #612]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2bf0      	cmp	r3, #240	; 0xf0
 8001160:	f000 8120 	beq.w	80013a4 <ProcessReceivedMidiDatas+0x2a0>
 8001164:	2bf0      	cmp	r3, #240	; 0xf0
 8001166:	f300 811e 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 800116a:	2be0      	cmp	r3, #224	; 0xe0
 800116c:	f000 811b 	beq.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001170:	2be0      	cmp	r3, #224	; 0xe0
 8001172:	f300 8118 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001176:	2bd0      	cmp	r3, #208	; 0xd0
 8001178:	f000 8115 	beq.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 800117c:	2bd0      	cmp	r3, #208	; 0xd0
 800117e:	f300 8112 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001182:	2bc0      	cmp	r3, #192	; 0xc0
 8001184:	f000 810f 	beq.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001188:	2bc0      	cmp	r3, #192	; 0xc0
 800118a:	f300 810c 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 800118e:	2bb0      	cmp	r3, #176	; 0xb0
 8001190:	d02f      	beq.n	80011f2 <ProcessReceivedMidiDatas+0xee>
 8001192:	2bb0      	cmp	r3, #176	; 0xb0
 8001194:	f300 8107 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001198:	2ba0      	cmp	r3, #160	; 0xa0
 800119a:	f000 8104 	beq.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 800119e:	2ba0      	cmp	r3, #160	; 0xa0
 80011a0:	f300 8101 	bgt.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 80011a4:	2b80      	cmp	r3, #128	; 0x80
 80011a6:	d002      	beq.n	80011ae <ProcessReceivedMidiDatas+0xaa>
 80011a8:	2b90      	cmp	r3, #144	; 0x90
 80011aa:	d011      	beq.n	80011d0 <ProcessReceivedMidiDatas+0xcc>
 80011ac:	e0fb      	b.n	80013a6 <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 80011ae:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b83      	ldr	r3, [pc, #524]	; (80013c4 <ProcessReceivedMidiDatas+0x2c0>)
 80011b6:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011ba:	78db      	ldrb	r3, [r3, #3]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <ProcessReceivedMidiDatas+0x2c4>)
 80011c0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4880      	ldr	r0, [pc, #512]	; (80013cc <ProcessReceivedMidiDatas+0x2c8>)
 80011ca:	f008 f89d 	bl	8009308 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 80011ce:	e0ea      	b.n	80013a6 <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 80011d0:	4b7b      	ldr	r3, [pc, #492]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011d2:	789b      	ldrb	r3, [r3, #2]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <ProcessReceivedMidiDatas+0x2c0>)
 80011d8:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 80011da:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <ProcessReceivedMidiDatas+0x2c4>)
 80011e2:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ea:	4878      	ldr	r0, [pc, #480]	; (80013cc <ProcessReceivedMidiDatas+0x2c8>)
 80011ec:	f008 f88c 	bl	8009308 <HAL_GPIO_WritePin>

					break;
 80011f0:	e0d9      	b.n	80013a6 <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 80011f2:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b75      	ldr	r3, [pc, #468]	; (80013d0 <ProcessReceivedMidiDatas+0x2cc>)
 80011fa:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <ProcessReceivedMidiDatas+0x2bc>)
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <ProcessReceivedMidiDatas+0x2d0>)
 8001204:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <ProcessReceivedMidiDatas+0x2cc>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <ProcessReceivedMidiDatas+0x2d0>)
 800120e:	7819      	ldrb	r1, [r3, #0]
 8001210:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <ProcessReceivedMidiDatas+0x2d4>)
 8001212:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8001214:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <ProcessReceivedMidiDatas+0x2cc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	2b5e      	cmp	r3, #94	; 0x5e
 800121c:	f200 80c3 	bhi.w	80013a6 <ProcessReceivedMidiDatas+0x2a2>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <ProcessReceivedMidiDatas+0x124>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	080013a7 	.word	0x080013a7
 800122c:	080013a7 	.word	0x080013a7
 8001230:	080013a7 	.word	0x080013a7
 8001234:	080013a7 	.word	0x080013a7
 8001238:	080013a7 	.word	0x080013a7
 800123c:	080013a7 	.word	0x080013a7
 8001240:	080013a7 	.word	0x080013a7
 8001244:	080013a7 	.word	0x080013a7
 8001248:	080013a7 	.word	0x080013a7
 800124c:	080013a7 	.word	0x080013a7
 8001250:	080013a7 	.word	0x080013a7
 8001254:	080013a7 	.word	0x080013a7
 8001258:	080013a7 	.word	0x080013a7
 800125c:	080013a7 	.word	0x080013a7
 8001260:	080013a7 	.word	0x080013a7
 8001264:	080013a7 	.word	0x080013a7
 8001268:	080013a7 	.word	0x080013a7
 800126c:	080013a7 	.word	0x080013a7
 8001270:	080013a7 	.word	0x080013a7
 8001274:	080013a7 	.word	0x080013a7
 8001278:	080013a7 	.word	0x080013a7
 800127c:	080013a7 	.word	0x080013a7
 8001280:	080013a7 	.word	0x080013a7
 8001284:	080013a7 	.word	0x080013a7
 8001288:	080013a7 	.word	0x080013a7
 800128c:	080013a7 	.word	0x080013a7
 8001290:	080013a7 	.word	0x080013a7
 8001294:	080013a7 	.word	0x080013a7
 8001298:	080013a7 	.word	0x080013a7
 800129c:	080013a7 	.word	0x080013a7
 80012a0:	080013a7 	.word	0x080013a7
 80012a4:	080013a7 	.word	0x080013a7
 80012a8:	080013a7 	.word	0x080013a7
 80012ac:	080013a7 	.word	0x080013a7
 80012b0:	080013a7 	.word	0x080013a7
 80012b4:	080013a7 	.word	0x080013a7
 80012b8:	080013a7 	.word	0x080013a7
 80012bc:	080013a7 	.word	0x080013a7
 80012c0:	080013a7 	.word	0x080013a7
 80012c4:	080013a7 	.word	0x080013a7
 80012c8:	080013a7 	.word	0x080013a7
 80012cc:	080013a7 	.word	0x080013a7
 80012d0:	080013a7 	.word	0x080013a7
 80012d4:	080013a7 	.word	0x080013a7
 80012d8:	080013a7 	.word	0x080013a7
 80012dc:	080013a7 	.word	0x080013a7
 80012e0:	080013a7 	.word	0x080013a7
 80012e4:	080013a7 	.word	0x080013a7
 80012e8:	080013a7 	.word	0x080013a7
 80012ec:	080013a7 	.word	0x080013a7
 80012f0:	080013a7 	.word	0x080013a7
 80012f4:	080013a7 	.word	0x080013a7
 80012f8:	080013a7 	.word	0x080013a7
 80012fc:	080013a7 	.word	0x080013a7
 8001300:	080013a7 	.word	0x080013a7
 8001304:	080013a7 	.word	0x080013a7
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	080013a7 	.word	0x080013a7
 8001340:	080013a7 	.word	0x080013a7
 8001344:	080013a7 	.word	0x080013a7
 8001348:	080013a7 	.word	0x080013a7
 800134c:	080013a7 	.word	0x080013a7
 8001350:	080013a7 	.word	0x080013a7
 8001354:	080013a7 	.word	0x080013a7
 8001358:	080013a7 	.word	0x080013a7
 800135c:	080013a7 	.word	0x080013a7
 8001360:	080013a7 	.word	0x080013a7
 8001364:	080013a7 	.word	0x080013a7
 8001368:	080013a7 	.word	0x080013a7
 800136c:	080013a7 	.word	0x080013a7
 8001370:	080013a7 	.word	0x080013a7
 8001374:	080013a7 	.word	0x080013a7
 8001378:	080013a7 	.word	0x080013a7
 800137c:	080013a7 	.word	0x080013a7
 8001380:	080013a7 	.word	0x080013a7
 8001384:	080013a7 	.word	0x080013a7
 8001388:	080013a7 	.word	0x080013a7
 800138c:	080013a7 	.word	0x080013a7
 8001390:	080013a7 	.word	0x080013a7
 8001394:	080013a7 	.word	0x080013a7
 8001398:	080013a7 	.word	0x080013a7
 800139c:	080013a7 	.word	0x080013a7
 80013a0:	080013a7 	.word	0x080013a7
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 80013a4:	bf00      	nop
		while(numberOfPackets--)
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	81fa      	strh	r2, [r7, #14]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f47f aeb7 	bne.w	8001120 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	30000000 	.word	0x30000000
 80013c0:	20000138 	.word	0x20000138
 80013c4:	200000b4 	.word	0x200000b4
 80013c8:	200000b5 	.word	0x200000b5
 80013cc:	58020000 	.word	0x58020000
 80013d0:	200000b6 	.word	0x200000b6
 80013d4:	200000b7 	.word	0x200000b7
 80013d8:	200000b8 	.word	0x200000b8

080013dc <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f7ff fe8c 	bl	8001104 <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	4904      	ldr	r1, [pc, #16]	; (8001400 <USBH_MIDI_ReceiveCallback+0x24>)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <USBH_MIDI_ReceiveCallback+0x28>)
 80013f2:	f003 f92a 	bl	800464a <USBH_MIDI_Receive>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	30000000 	.word	0x30000000
 8001404:	30000460 	.word	0x30000460

08001408 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]
 800142a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142c:	4b7b      	ldr	r3, [pc, #492]	; (800161c <MX_ADC1_Init+0x214>)
 800142e:	4a7c      	ldr	r2, [pc, #496]	; (8001620 <MX_ADC1_Init+0x218>)
 8001430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8001432:	4b7a      	ldr	r3, [pc, #488]	; (800161c <MX_ADC1_Init+0x214>)
 8001434:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <MX_ADC1_Init+0x214>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001440:	4b76      	ldr	r3, [pc, #472]	; (800161c <MX_ADC1_Init+0x214>)
 8001442:	2201      	movs	r2, #1
 8001444:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001446:	4b75      	ldr	r3, [pc, #468]	; (800161c <MX_ADC1_Init+0x214>)
 8001448:	2208      	movs	r2, #8
 800144a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800144c:	4b73      	ldr	r3, [pc, #460]	; (800161c <MX_ADC1_Init+0x214>)
 800144e:	2200      	movs	r2, #0
 8001450:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <MX_ADC1_Init+0x214>)
 8001454:	2201      	movs	r2, #1
 8001456:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 8001458:	4b70      	ldr	r3, [pc, #448]	; (800161c <MX_ADC1_Init+0x214>)
 800145a:	220a      	movs	r2, #10
 800145c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <MX_ADC1_Init+0x214>)
 8001460:	2200      	movs	r2, #0
 8001462:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001464:	4b6d      	ldr	r3, [pc, #436]	; (800161c <MX_ADC1_Init+0x214>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <MX_ADC1_Init+0x214>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <MX_ADC1_Init+0x214>)
 8001472:	2203      	movs	r2, #3
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001476:	4b69      	ldr	r3, [pc, #420]	; (800161c <MX_ADC1_Init+0x214>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800147c:	4b67      	ldr	r3, [pc, #412]	; (800161c <MX_ADC1_Init+0x214>)
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001482:	4b66      	ldr	r3, [pc, #408]	; (800161c <MX_ADC1_Init+0x214>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148a:	4864      	ldr	r0, [pc, #400]	; (800161c <MX_ADC1_Init+0x214>)
 800148c:	f003 ff96 	bl	80053bc <HAL_ADC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001496:	f001 fda5 	bl	8002fe4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	485d      	ldr	r0, [pc, #372]	; (800161c <MX_ADC1_Init+0x214>)
 80014a6:	f005 fa19 	bl	80068dc <HAL_ADCEx_MultiModeConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014b0:	f001 fd98 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014b4:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <MX_ADC1_Init+0x21c>)
 80014b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b8:	2306      	movs	r3, #6
 80014ba:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014c6:	2304      	movs	r3, #4
 80014c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d2:	463b      	mov	r3, r7
 80014d4:	4619      	mov	r1, r3
 80014d6:	4851      	ldr	r0, [pc, #324]	; (800161c <MX_ADC1_Init+0x214>)
 80014d8:	f004 fc2e 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014e2:	f001 fd7f 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <MX_ADC1_Init+0x220>)
 80014e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014ea:	230c      	movs	r3, #12
 80014ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4849      	ldr	r0, [pc, #292]	; (800161c <MX_ADC1_Init+0x214>)
 80014f8:	f004 fc1e 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001502:	f001 fd6f 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <MX_ADC1_Init+0x224>)
 8001508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800150a:	2312      	movs	r3, #18
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	4619      	mov	r1, r3
 8001516:	4841      	ldr	r0, [pc, #260]	; (800161c <MX_ADC1_Init+0x214>)
 8001518:	f004 fc0e 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8001522:	f001 fd5f 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <MX_ADC1_Init+0x228>)
 8001528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800152a:	2318      	movs	r3, #24
 800152c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4839      	ldr	r0, [pc, #228]	; (800161c <MX_ADC1_Init+0x214>)
 8001538:	f004 fbfe 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8001542:	f001 fd4f 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <MX_ADC1_Init+0x22c>)
 8001548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800154a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	4619      	mov	r1, r3
 8001558:	4830      	ldr	r0, [pc, #192]	; (800161c <MX_ADC1_Init+0x214>)
 800155a:	f004 fbed 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001564:	f001 fd3e 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001568:	4b33      	ldr	r3, [pc, #204]	; (8001638 <MX_ADC1_Init+0x230>)
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800156c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001570:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	4619      	mov	r1, r3
 800157a:	4828      	ldr	r0, [pc, #160]	; (800161c <MX_ADC1_Init+0x214>)
 800157c:	f004 fbdc 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 8001586:	f001 fd2d 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <MX_ADC1_Init+0x234>)
 800158c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800158e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001592:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	4619      	mov	r1, r3
 800159c:	481f      	ldr	r0, [pc, #124]	; (800161c <MX_ADC1_Init+0x214>)
 800159e:	f004 fbcb 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 80015a8:	f001 fd1c 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <MX_ADC1_Init+0x238>)
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80015b0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80015b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <MX_ADC1_Init+0x214>)
 80015c0:	f004 fbba 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 80015ca:	f001 fd0b 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC1_Init+0x23c>)
 80015d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80015d2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80015d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	4619      	mov	r1, r3
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <MX_ADC1_Init+0x214>)
 80015e2:	f004 fba9 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80015ec:	f001 fcfa 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_ADC1_Init+0x240>)
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80015f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_ADC1_Init+0x214>)
 8001604:	f004 fb98 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 800160e:	f001 fce9 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000013c 	.word	0x2000013c
 8001620:	40022000 	.word	0x40022000
 8001624:	1d500080 	.word	0x1d500080
 8001628:	4fb80000 	.word	0x4fb80000
 800162c:	3ef08000 	.word	0x3ef08000
 8001630:	0c900008 	.word	0x0c900008
 8001634:	4b840000 	.word	0x4b840000
 8001638:	3ac04000 	.word	0x3ac04000
 800163c:	10c00010 	.word	0x10c00010
 8001640:	21800100 	.word	0x21800100
 8001644:	25b00200 	.word	0x25b00200
 8001648:	14f00020 	.word	0x14f00020

0800164c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001664:	4b42      	ldr	r3, [pc, #264]	; (8001770 <MX_ADC3_Init+0x124>)
 8001666:	4a43      	ldr	r2, [pc, #268]	; (8001774 <MX_ADC3_Init+0x128>)
 8001668:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <MX_ADC3_Init+0x124>)
 800166c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8001670:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001672:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <MX_ADC3_Init+0x124>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001678:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <MX_ADC3_Init+0x124>)
 800167a:	2201      	movs	r2, #1
 800167c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <MX_ADC3_Init+0x124>)
 8001680:	2204      	movs	r2, #4
 8001682:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <MX_ADC3_Init+0x124>)
 8001686:	2200      	movs	r2, #0
 8001688:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <MX_ADC3_Init+0x124>)
 800168c:	2201      	movs	r2, #1
 800168e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 8001690:	4b37      	ldr	r3, [pc, #220]	; (8001770 <MX_ADC3_Init+0x124>)
 8001692:	2205      	movs	r2, #5
 8001694:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <MX_ADC3_Init+0x124>)
 8001698:	2200      	movs	r2, #0
 800169a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b34      	ldr	r3, [pc, #208]	; (8001770 <MX_ADC3_Init+0x124>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b33      	ldr	r3, [pc, #204]	; (8001770 <MX_ADC3_Init+0x124>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <MX_ADC3_Init+0x124>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <MX_ADC3_Init+0x124>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <MX_ADC3_Init+0x124>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_ADC3_Init+0x124>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016c2:	482b      	ldr	r0, [pc, #172]	; (8001770 <MX_ADC3_Init+0x124>)
 80016c4:	f003 fe7a 	bl	80053bc <HAL_ADC_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80016ce:	f001 fc89 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <MX_ADC3_Init+0x12c>)
 80016d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d6:	2306      	movs	r3, #6
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e4:	2304      	movs	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	481e      	ldr	r0, [pc, #120]	; (8001770 <MX_ADC3_Init+0x124>)
 80016f6:	f004 fb1f 	bl	8005d38 <HAL_ADC_ConfigChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001700:	f001 fc70 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001704:	230c      	movs	r3, #12
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <MX_ADC3_Init+0x124>)
 800170e:	f004 fb13 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001718:	f001 fc64 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800171c:	2312      	movs	r3, #18
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <MX_ADC3_Init+0x124>)
 8001726:	f004 fb07 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001730:	f001 fc58 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001734:	2318      	movs	r3, #24
 8001736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_ADC3_Init+0x124>)
 800173e:	f004 fafb 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8001748:	f001 fc4c 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <MX_ADC3_Init+0x124>)
 8001758:	f004 faee 	bl	8005d38 <HAL_ADC_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8001762:	f001 fc3f 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001a0 	.word	0x200001a0
 8001774:	58026000 	.word	0x58026000
 8001778:	08600004 	.word	0x08600004

0800177c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6d      	ldr	r2, [pc, #436]	; (8001950 <HAL_ADC_MspInit+0x1d4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 80a3 	bne.w	80018e6 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017a0:	4b6c      	ldr	r3, [pc, #432]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017a6:	4a6b      	ldr	r2, [pc, #428]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80017fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001818:	2332      	movs	r3, #50	; 0x32
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181c:	2303      	movs	r3, #3
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	484b      	ldr	r0, [pc, #300]	; (8001958 <HAL_ADC_MspInit+0x1dc>)
 800182c:	f007 fba4 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001830:	23ff      	movs	r3, #255	; 0xff
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4846      	ldr	r0, [pc, #280]	; (800195c <HAL_ADC_MspInit+0x1e0>)
 8001844:	f007 fb98 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001848:	2303      	movs	r3, #3
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184c:	2303      	movs	r3, #3
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	4841      	ldr	r0, [pc, #260]	; (8001960 <HAL_ADC_MspInit+0x1e4>)
 800185c:	f007 fb8c 	bl	8008f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001860:	4b40      	ldr	r3, [pc, #256]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 8001862:	4a41      	ldr	r2, [pc, #260]	; (8001968 <HAL_ADC_MspInit+0x1ec>)
 8001864:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 8001868:	2209      	movs	r2, #9
 800186a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186c:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 800187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 8001882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001886:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 800188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 800189a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018ba:	f005 fa79 	bl	8006db0 <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80018c4:	f001 fb8e 	bl	8002fe4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_ADC_MspInit+0x1e8>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2012      	movs	r0, #18
 80018da:	f005 f9b8 	bl	8006c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018de:	2012      	movs	r0, #18
 80018e0:	f005 f9cf 	bl	8006c82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80018e4:	e02f      	b.n	8001946 <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a20      	ldr	r2, [pc, #128]	; (800196c <HAL_ADC_MspInit+0x1f0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d12a      	bne.n	8001946 <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 80018f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_ADC_MspInit+0x1d8>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800192c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <HAL_ADC_MspInit+0x1f4>)
 8001942:	f007 fb19 	bl	8008f78 <HAL_GPIO_Init>
}
 8001946:	bf00      	nop
 8001948:	3738      	adds	r7, #56	; 0x38
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000
 8001954:	58024400 	.word	0x58024400
 8001958:	58020800 	.word	0x58020800
 800195c:	58020000 	.word	0x58020000
 8001960:	58020400 	.word	0x58020400
 8001964:	20000204 	.word	0x20000204
 8001968:	40020010 	.word	0x40020010
 800196c:	58026000 	.word	0x58026000
 8001970:	58021400 	.word	0x58021400

08001974 <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	; 0x30
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <audioInit+0x18c>)
 8001982:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <audioInit+0x190>)
 8001984:	4960      	ldr	r1, [pc, #384]	; (8001b08 <audioInit+0x194>)
 8001986:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001b0c <audioInit+0x198>
 800198a:	4861      	ldr	r0, [pc, #388]	; (8001b10 <audioInit+0x19c>)
 800198c:	f7ff fb14 	bl	8000fb8 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 8001990:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <audioInit+0x19c>)
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	495f      	ldr	r1, [pc, #380]	; (8001b14 <audioInit+0x1a0>)
 8001998:	485f      	ldr	r0, [pc, #380]	; (8001b18 <audioInit+0x1a4>)
 800199a:	f7ff fa5f 	bl	8000e5c <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <audioInit+0x19c>)
 80019a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a4:	495d      	ldr	r1, [pc, #372]	; (8001b1c <audioInit+0x1a8>)
 80019a6:	485e      	ldr	r0, [pc, #376]	; (8001b20 <audioInit+0x1ac>)
 80019a8:	f7ff fa58 	bl	8000e5c <tMempool_init>


	for (int i = 0; i < 6; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e00d      	b.n	80019ce <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4a5b      	ldr	r2, [pc, #364]	; (8001b24 <audioInit+0x1b0>)
 80019b8:	4413      	add	r3, r2
 80019ba:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <audioInit+0x1a4>)
 80019bc:	2101      	movs	r1, #1
 80019be:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fffc 	bl	80009c0 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3301      	adds	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	ddee      	ble.n	80019b2 <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	e009      	b.n	80019ee <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 80019da:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <audioInit+0x1a4>)
 80019dc:	2101      	movs	r1, #1
 80019de:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80019e2:	4851      	ldr	r0, [pc, #324]	; (8001b28 <audioInit+0x1b4>)
 80019e4:	f7fe ffec 	bl	80009c0 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	3301      	adds	r3, #1
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	ddf2      	ble.n	80019da <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 80019f4:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <audioInit+0x1a4>)
 80019f6:	2100      	movs	r1, #0
 80019f8:	484c      	ldr	r0, [pc, #304]	; (8001b2c <audioInit+0x1b8>)
 80019fa:	f7ff fab6 	bl	8000f6a <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e013      	b.n	8001a2c <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <audioInit+0x1bc>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4942      	ldr	r1, [pc, #264]	; (8001b18 <audioInit+0x1a4>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa58 	bl	8000ec4 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <audioInit+0x1bc>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001b34 <audioInit+0x1c0>
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fa83 	bl	8000f2c <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	dde8      	ble.n	8001a04 <audioInit+0x90>

//	for(int i = 0; i < 2; i++)
//	{
//		tTapeDelay_initToPool(&delT[i], SAMPLE_RATE, MAX_DELAY, &largePool);
//	}
	uint32_t* temp = (uint32_t *) malloc(sizeof(uint32_t) );
 8001a32:	2004      	movs	r0, #4
 8001a34:	f015 fc9a 	bl	801736c <malloc>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]
	*temp = SAMPLE_RATE;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a42:	601a      	str	r2, [r3, #0]
	tDelayExt_initToPool(&delE, temp, MAX_DELAY, 1, &largePool);
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <audioInit+0x1ac>)
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <audioInit+0x1c4>)
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	483b      	ldr	r0, [pc, #236]	; (8001b3c <audioInit+0x1c8>)
 8001a50:	f7fe fdc0 	bl	80005d4 <tDelayExt_initToPool>
	free(temp);
 8001a54:	6938      	ldr	r0, [r7, #16]
 8001a56:	f015 fc91 	bl	801737c <free>


	HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f003 fa62 	bl	8004f24 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	e007      	b.n	8001a76 <audioInit+0x102>
	{
		audioOutBuffer[i] = 0;
 8001a66:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <audioInit+0x1cc>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7a:	ddf4      	ble.n	8001a66 <audioInit+0xf2>
	}



	HAL_Delay(1);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f003 fa51 	bl	8004f24 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	492e      	ldr	r1, [pc, #184]	; (8001b40 <audioInit+0x1cc>)
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f00d fe5a 	bl	800f740 <HAL_SAI_Transmit_DMA>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <audioInit+0x1d0>)
 8001a92:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	492c      	ldr	r1, [pc, #176]	; (8001b48 <audioInit+0x1d4>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f00d ff07 	bl	800f8ac <HAL_SAI_Receive_DMA>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <audioInit+0x1d8>)
 8001aa4:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 fbec 	bl	8002284 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e01e      	b.n	8001af0 <audioInit+0x17c>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 8001ab2:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <audioInit+0x1dc>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <audioInit+0x1e0>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <audioInit+0x1e4>)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	; (8001b5c <audioInit+0x1e8>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	dddd      	ble.n	8001ab2 <audioInit+0x13e>
	}

}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08002f21 	.word	0x08002f21
 8001b04:	0007a120 	.word	0x0007a120
 8001b08:	24000000 	.word	0x24000000
 8001b0c:	473b8000 	.word	0x473b8000
 8001b10:	200016c0 	.word	0x200016c0
 8001b14:	20000338 	.word	0x20000338
 8001b18:	20001710 	.word	0x20001710
 8001b1c:	60000000 	.word	0x60000000
 8001b20:	20001714 	.word	0x20001714
 8001b24:	200002c0 	.word	0x200002c0
 8001b28:	200002f8 	.word	0x200002f8
 8001b2c:	200002d8 	.word	0x200002d8
 8001b30:	200002dc 	.word	0x200002dc
 8001b34:	43dc0000 	.word	0x43dc0000
 8001b38:	0003a980 	.word	0x0003a980
 8001b3c:	200002f4 	.word	0x200002f4
 8001b40:	30000040 	.word	0x30000040
 8001b44:	2000027c 	.word	0x2000027c
 8001b48:	30000240 	.word	0x30000240
 8001b4c:	2000027d 	.word	0x2000027d
 8001b50:	20001718 	.word	0x20001718
 8001b54:	20001738 	.word	0x20001738
 8001b58:	20001758 	.word	0x20001758
 8001b5c:	20001778 	.word	0x20001778

08001b60 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]

	frameCounter++;
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <audioFrame+0x128>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <audioFrame+0x128>)
 8001b78:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <audioFrame+0x128>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d904      	bls.n	8001b8c <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <audioFrame+0x128>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 8001b88:	f000 f964 	bl	8001e54 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e017      	b.n	8001bc2 <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <audioFrame+0x12c>)
 8001b98:	441a      	add	r2, r3
 8001b9a:	493d      	ldr	r1, [pc, #244]	; (8001c90 <audioFrame+0x130>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001c94 <audioFrame+0x134>
 8001bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7fe ff88 	bl	8000acc <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	dde4      	ble.n	8001b92 <audioFrame+0x32>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <audioFrame+0x138>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d057      	beq.n	8001c80 <audioFrame+0x120>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e051      	b.n	8001c7a <audioFrame+0x11a>
		{

			if ((i & 1) == 0)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d11e      	bne.n	8001c1e <audioFrame+0xbe>
			{
				current_sample = (int32_t)(audioTickR(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <audioFrame+0x13c>)
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001ca0 <audioFrame+0x140>
 8001bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	f000 f911 	bl	8001e28 <audioTickR>
 8001c06:	eef0 7a40 	vmov.f32	s15, s0
 8001c0a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ca4 <audioFrame+0x144>
 8001c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c16:	ee17 3a90 	vmov	r3, s15
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	e01d      	b.n	8001c5a <audioFrame+0xfa>
			}
			else
			{
				current_sample = (int32_t)(audioTickL(((float) (audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31) * TWO_TO_23);
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <audioFrame+0x13c>)
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ca0 <audioFrame+0x140>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f000 f836 	bl	8001cb0 <audioTickL>
 8001c44:	eef0 7a40 	vmov.f32	s15, s0
 8001c48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ca4 <audioFrame+0x144>
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c54:	ee17 3a90 	vmov	r3, s15
 8001c58:	60bb      	str	r3, [r7, #8]
			}

			if (LED_States[2] == 1){		//mute
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <audioFrame+0x148>)
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <audioFrame+0x106>
				current_sample *= 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	490f      	ldr	r1, [pc, #60]	; (8001cac <audioFrame+0x14c>)
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c7e:	ddaa      	ble.n	8001bd6 <audioFrame+0x76>

		}
	}
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200002bc 	.word	0x200002bc
 8001c8c:	200002c0 	.word	0x200002c0
 8001c90:	30000440 	.word	0x30000440
 8001c94:	377ffff6 	.word	0x377ffff6
 8001c98:	2000027e 	.word	0x2000027e
 8001c9c:	30000240 	.word	0x30000240
 8001ca0:	2ffffff6 	.word	0x2ffffff6
 8001ca4:	4b000000 	.word	0x4b000000
 8001ca8:	200002b8 	.word	0x200002b8
 8001cac:	30000040 	.word	0x30000040

08001cb0 <audioTickL>:
int num_delX = 4, num_delY = 4;
//int* delaysX, delaysY;
float a0 = 0.0f, a1 = 0.0f, a2 = 0.0f, b1 = 0.0f, b2 = 0.0f;

float audioTickL(float audioIn)
{
 8001cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cbc:	466b      	mov	r3, sp
 8001cbe:	461e      	mov	r6, r3
//	y1L = tTapeDelay_tick(&delT[1], sampleL);

	/*>-<*/

	/* multi delay */
	if (num_delX != delE->numPoint)
 8001cc0:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <audioTickL+0x164>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <audioTickL+0x168>)
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d005      	beq.n	8001cda <audioTickL+0x2a>
	{
		tDelayExt_setNumPoint(&delE, num_delX);
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <audioTickL+0x168>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	484f      	ldr	r0, [pc, #316]	; (8001e14 <audioTickL+0x164>)
 8001cd6:	f7fe fd2d 	bl	8000734 <tDelayExt_setNumPoint>
	}

	del_lenX = (int)(pow(8, (9 * tRamp_tick(&adc[2]) - 3)) + 1);
 8001cda:	4850      	ldr	r0, [pc, #320]	; (8001e1c <audioTickL+0x16c>)
 8001cdc:	f7fe ff18 	bl	8000b10 <tRamp_tick>
 8001ce0:	eef0 7a40 	vmov.f32	s15, s0
 8001ce4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001cf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf8:	eeb0 1b47 	vmov.f64	d1, d7
 8001cfc:	eeb2 0b00 	vmov.f64	d0, #32	; 0x41000000  8.0
 8001d00:	f015 fd32 	bl	8017768 <pow>
 8001d04:	eeb0 7b40 	vmov.f64	d7, d0
 8001d08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d10:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001d14:	ee17 2a90 	vmov	r2, s15
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <audioTickL+0x170>)
 8001d1a:	601a      	str	r2, [r3, #0]
	uint32_t delaysX[num_delX];
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <audioTickL+0x168>)
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	1e4b      	subs	r3, r1, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	460a      	mov	r2, r1
 8001d26:	2300      	movs	r3, #0
 8001d28:	4690      	mov	r8, r2
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001d38:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001d3c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001d40:	460a      	mov	r2, r1
 8001d42:	2300      	movs	r3, #0
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	016b      	lsls	r3, r5, #5
 8001d52:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001d56:	0162      	lsls	r2, r4, #5
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	3307      	adds	r3, #7
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	ebad 0d03 	sub.w	sp, sp, r3
 8001d66:	466b      	mov	r3, sp
 8001d68:	3303      	adds	r3, #3
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < num_delX; i++) delaysX[i] = (uint32_t)(i+1) * del_lenX;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00d      	b.n	8001d92 <audioTickL+0xe2>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <audioTickL+0x170>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fb03 f102 	mul.w	r1, r3, r2
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <audioTickL+0x168>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbec      	blt.n	8001d76 <audioTickL+0xc6>
	tDelayExt_setDelay(&delE, &delaysX[0]);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481c      	ldr	r0, [pc, #112]	; (8001e14 <audioTickL+0x164>)
 8001da2:	f7fe fc9d 	bl	80006e0 <tDelayExt_setDelay>

	tDelayExt_tick(&delE, audioIn);
 8001da6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001daa:	481a      	ldr	r0, [pc, #104]	; (8001e14 <audioTickL+0x164>)
 8001dac:	f7fe fc61 	bl	8000672 <tDelayExt_tick>
	sampleL = 0.0f;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <audioTickL+0x174>)
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < num_delX; i++) sampleL += delE->lastOuts[i] / num_delX;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e01a      	b.n	8001df4 <audioTickL+0x144>
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <audioTickL+0x164>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <audioTickL+0x168>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <audioTickL+0x174>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <audioTickL+0x174>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <audioTickL+0x168>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dbdf      	blt.n	8001dbe <audioTickL+0x10e>

	return sampleL;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <audioTickL+0x174>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	46b5      	mov	sp, r6
 8001e04:	ee07 3a90 	vmov	s15, r3
}
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e14:	200002f4 	.word	0x200002f4
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200002c8 	.word	0x200002c8
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20001798 	.word	0x20001798

08001e28 <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <audioTickR+0x28>)
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
	return sampleR;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <audioTickR+0x28>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	ee07 3a90 	vmov	s15, r3
}
 8001e42:	eeb0 0a67 	vmov.f32	s0, s15
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	2000179c 	.word	0x2000179c

08001e54 <buttonCheck>:

void buttonCheck(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8001e5a:	2140      	movs	r1, #64	; 0x40
 8001e5c:	489b      	ldr	r0, [pc, #620]	; (80020cc <buttonCheck+0x278>)
 8001e5e:	f007 fa3b 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b97      	ldr	r3, [pc, #604]	; (80020d0 <buttonCheck+0x27c>)
 8001e72:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	4895      	ldr	r0, [pc, #596]	; (80020cc <buttonCheck+0x278>)
 8001e78:	f007 fa2e 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <buttonCheck+0x27c>)
 8001e8c:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001e8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e92:	4890      	ldr	r0, [pc, #576]	; (80020d4 <buttonCheck+0x280>)
 8001e94:	f007 fa20 	bl	80092d8 <HAL_GPIO_ReadPin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b8a      	ldr	r3, [pc, #552]	; (80020d0 <buttonCheck+0x27c>)
 8001ea8:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	e09e      	b.n	8001fee <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8001eb0:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <buttonCheck+0x27c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	4987      	ldr	r1, [pc, #540]	; (80020d8 <buttonCheck+0x284>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	440b      	add	r3, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d00e      	beq.n	8001ee2 <buttonCheck+0x8e>
 8001ec4:	4a85      	ldr	r2, [pc, #532]	; (80020dc <buttonCheck+0x288>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d808      	bhi.n	8001ee2 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8001ed0:	4a82      	ldr	r2, [pc, #520]	; (80020dc <buttonCheck+0x288>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4980      	ldr	r1, [pc, #512]	; (80020dc <buttonCheck+0x288>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8001ee2:	4a7b      	ldr	r2, [pc, #492]	; (80020d0 <buttonCheck+0x27c>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	497b      	ldr	r1, [pc, #492]	; (80020d8 <buttonCheck+0x284>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	440b      	add	r3, r1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d01e      	beq.n	8001f34 <buttonCheck+0xe0>
 8001ef6:	4a79      	ldr	r2, [pc, #484]	; (80020dc <buttonCheck+0x288>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	d918      	bls.n	8001f34 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8001f02:	4a73      	ldr	r2, [pc, #460]	; (80020d0 <buttonCheck+0x27c>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d104      	bne.n	8001f18 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8001f0e:	4a74      	ldr	r2, [pc, #464]	; (80020e0 <buttonCheck+0x28c>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2101      	movs	r1, #1
 8001f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8001f18:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <buttonCheck+0x27c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	7819      	ldrb	r1, [r3, #0]
 8001f20:	4a6d      	ldr	r2, [pc, #436]	; (80020d8 <buttonCheck+0x284>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	460a      	mov	r2, r1
 8001f28:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <buttonCheck+0x288>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8001f34:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <buttonCheck+0x290>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d12d      	bne.n	8001f9c <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <buttonCheck+0x27c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <buttonCheck+0x118>
 8001f4c:	4a66      	ldr	r2, [pc, #408]	; (80020e8 <buttonCheck+0x294>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f58:	d208      	bcs.n	8001f6c <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 8001f5a:	4a63      	ldr	r2, [pc, #396]	; (80020e8 <buttonCheck+0x294>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	4960      	ldr	r1, [pc, #384]	; (80020e8 <buttonCheck+0x294>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <buttonCheck+0x27c>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d037      	beq.n	8001fe8 <buttonCheck+0x194>
 8001f78:	4a5b      	ldr	r2, [pc, #364]	; (80020e8 <buttonCheck+0x294>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f84:	d330      	bcc.n	8001fe8 <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 8001f86:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <buttonCheck+0x290>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 8001f90:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <buttonCheck+0x294>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2100      	movs	r1, #0
 8001f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f9a:	e025      	b.n	8001fe8 <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <buttonCheck+0x27c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <buttonCheck+0x174>
 8001fa8:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <buttonCheck+0x294>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	2b31      	cmp	r3, #49	; 0x31
 8001fb2:	d809      	bhi.n	8001fc8 <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <buttonCheck+0x294>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	494a      	ldr	r1, [pc, #296]	; (80020e8 <buttonCheck+0x294>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001fc6:	e00f      	b.n	8001fe8 <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <buttonCheck+0x27c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <buttonCheck+0x290>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 8001fde:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <buttonCheck+0x294>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f77f af5d 	ble.w	8001eb0 <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <buttonCheck+0x28c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d119      	bne.n	8002032 <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <buttonCheck+0x298>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200c:	4838      	ldr	r0, [pc, #224]	; (80020f0 <buttonCheck+0x29c>)
 800200e:	f007 f97b 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <buttonCheck+0x298>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e008      	b.n	800202c <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002020:	4833      	ldr	r0, [pc, #204]	; (80020f0 <buttonCheck+0x29c>)
 8002022:	f007 f971 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8002026:	4b31      	ldr	r3, [pc, #196]	; (80020ec <buttonCheck+0x298>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <buttonCheck+0x28c>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <buttonCheck+0x28c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d116      	bne.n	8002068 <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <buttonCheck+0x298>)
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002048:	4829      	ldr	r0, [pc, #164]	; (80020f0 <buttonCheck+0x29c>)
 800204a:	f007 f95d 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <buttonCheck+0x298>)
 8002050:	2201      	movs	r2, #1
 8002052:	705a      	strb	r2, [r3, #1]
 8002054:	e008      	b.n	8002068 <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205c:	4824      	ldr	r0, [pc, #144]	; (80020f0 <buttonCheck+0x29c>)
 800205e:	f007 f953 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <buttonCheck+0x298>)
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <buttonCheck+0x28c>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d119      	bne.n	80020a4 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <buttonCheck+0x298>)
 8002072:	789b      	ldrb	r3, [r3, #2]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <buttonCheck+0x280>)
 8002080:	f007 f942 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <buttonCheck+0x298>)
 8002086:	2201      	movs	r2, #1
 8002088:	709a      	strb	r2, [r3, #2]
 800208a:	e008      	b.n	800209e <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002092:	4810      	ldr	r0, [pc, #64]	; (80020d4 <buttonCheck+0x280>)
 8002094:	f007 f938 	bl	8009308 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <buttonCheck+0x298>)
 800209a:	2200      	movs	r2, #0
 800209c:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <buttonCheck+0x28c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <buttonCheck+0x290>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	4810      	ldr	r0, [pc, #64]	; (80020f4 <buttonCheck+0x2a0>)
 80020b2:	f007 f929 	bl	8009308 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 80020b6:	e004      	b.n	80020c2 <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <buttonCheck+0x2a0>)
 80020be:	f007 f923 	bl	8009308 <HAL_GPIO_WritePin>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	58021800 	.word	0x58021800
 80020d0:	20000280 	.word	0x20000280
 80020d4:	58020c00 	.word	0x58020c00
 80020d8:	20000284 	.word	0x20000284
 80020dc:	20000288 	.word	0x20000288
 80020e0:	20000294 	.word	0x20000294
 80020e4:	200002ac 	.word	0x200002ac
 80020e8:	200002a0 	.word	0x200002a0
 80020ec:	200002b8 	.word	0x200002b8
 80020f0:	58020000 	.word	0x58020000
 80020f4:	58020800 	.word	0x58020800

080020f8 <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	;
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	;
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  ;
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 800213c:	2040      	movs	r0, #64	; 0x40
 800213e:	f7ff fd0f 	bl	8001b60 <audioFrame>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fd04 	bl	8001b60 <audioFrame>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800216a:	f000 f879 	bl	8002260 <BSP_SD_IsDetected>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002174:	2302      	movs	r3, #2
 8002176:	e012      	b.n	800219e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8002178:	480b      	ldr	r0, [pc, #44]	; (80021a8 <BSP_SD_Init+0x48>)
 800217a:	f00d fe7c 	bl	800fe76 <HAL_SD_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800218c:	4806      	ldr	r0, [pc, #24]	; (80021a8 <BSP_SD_Init+0x48>)
 800218e:	f00e fd37 	bl	8010c00 <HAL_SD_ConfigWideBusOperation>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800219c:	79fb      	ldrb	r3, [r7, #7]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20001a6c 	.word	0x20001a6c

080021ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <BSP_SD_ReadBlocks+0x38>)
 80021ca:	f00d ff73 	bl	80100b4 <HAL_SD_ReadBlocks>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20001a6c 	.word	0x20001a6c

080021e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	4806      	ldr	r0, [pc, #24]	; (8002220 <BSP_SD_WriteBlocks+0x38>)
 8002206:	f00e f8df 	bl	80103c8 <HAL_SD_WriteBlocks>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002214:	7dfb      	ldrb	r3, [r7, #23]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20001a6c 	.word	0x20001a6c

08002224 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <BSP_SD_GetCardState+0x1c>)
 800222a:	f00e fdfb 	bl	8010e24 <HAL_SD_GetCardState>
 800222e:	4603      	mov	r3, r0
 8002230:	2b04      	cmp	r3, #4
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20001a6c 	.word	0x20001a6c

08002244 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4803      	ldr	r0, [pc, #12]	; (800225c <BSP_SD_GetCardInfo+0x18>)
 8002250:	f00e fcaa 	bl	8010ba8 <HAL_SD_GetCardInfo>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001a6c 	.word	0x20001a6c

08002260 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002266:	2301      	movs	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800226a:	f000 f911 	bl	8002490 <BSP_PlatformIsDetected>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	b2db      	uxtb	r3, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af02      	add	r7, sp, #8
 800228a:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002292:	4858      	ldr	r0, [pc, #352]	; (80023f4 <AudioCodec_init+0x170>)
 8002294:	f007 f838 	bl	8009308 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8002298:	2002      	movs	r0, #2
 800229a:	f002 fe43 	bl	8004f24 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800229e:	4b56      	ldr	r3, [pc, #344]	; (80023f8 <AudioCodec_init+0x174>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 80022a4:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <AudioCodec_init+0x174>)
 80022a6:	2203      	movs	r2, #3
 80022a8:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <AudioCodec_init+0x178>)
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <AudioCodec_init+0x17c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <AudioCodec_init+0x174>)
 80022b8:	2120      	movs	r1, #32
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f008 fde2 	bl	800ae84 <HAL_I2C_Master_Transmit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <AudioCodec_init+0x180>)
 80022c6:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <AudioCodec_init+0x174>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 80022ce:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <AudioCodec_init+0x174>)
 80022d0:	2241      	movs	r2, #65	; 0x41
 80022d2:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80022d4:	4b49      	ldr	r3, [pc, #292]	; (80023fc <AudioCodec_init+0x178>)
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <AudioCodec_init+0x17c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	4a45      	ldr	r2, [pc, #276]	; (80023f8 <AudioCodec_init+0x174>)
 80022e2:	2120      	movs	r1, #32
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f008 fdcd 	bl	800ae84 <HAL_I2C_Master_Transmit>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b45      	ldr	r3, [pc, #276]	; (8002404 <AudioCodec_init+0x180>)
 80022f0:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 80022f2:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <AudioCodec_init+0x174>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 80022f8:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <AudioCodec_init+0x174>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80022fe:	4b3f      	ldr	r3, [pc, #252]	; (80023fc <AudioCodec_init+0x178>)
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <AudioCodec_init+0x17c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <AudioCodec_init+0x174>)
 800230c:	2120      	movs	r1, #32
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f008 fdb8 	bl	800ae84 <HAL_I2C_Master_Transmit>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <AudioCodec_init+0x180>)
 800231a:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <AudioCodec_init+0x174>)
 800231e:	2203      	movs	r2, #3
 8002320:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <AudioCodec_init+0x174>)
 8002324:	2279      	movs	r2, #121	; 0x79
 8002326:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <AudioCodec_init+0x178>)
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <AudioCodec_init+0x17c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <AudioCodec_init+0x174>)
 8002336:	2120      	movs	r1, #32
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f008 fda3 	bl	800ae84 <HAL_I2C_Master_Transmit>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <AudioCodec_init+0x180>)
 8002344:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <AudioCodec_init+0x174>)
 8002348:	2204      	movs	r2, #4
 800234a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <AudioCodec_init+0x174>)
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <AudioCodec_init+0x178>)
 8002354:	881a      	ldrh	r2, [r3, #0]
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <AudioCodec_init+0x17c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <AudioCodec_init+0x174>)
 8002360:	2120      	movs	r1, #32
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f008 fd8e 	bl	800ae84 <HAL_I2C_Master_Transmit>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <AudioCodec_init+0x180>)
 800236e:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <AudioCodec_init+0x174>)
 8002372:	2205      	movs	r2, #5
 8002374:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <AudioCodec_init+0x174>)
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <AudioCodec_init+0x178>)
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <AudioCodec_init+0x17c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <AudioCodec_init+0x174>)
 800238a:	2120      	movs	r1, #32
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f008 fd79 	bl	800ae84 <HAL_I2C_Master_Transmit>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <AudioCodec_init+0x180>)
 8002398:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <AudioCodec_init+0x174>)
 800239c:	2206      	movs	r2, #6
 800239e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <AudioCodec_init+0x174>)
 80023a2:	2210      	movs	r2, #16
 80023a4:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <AudioCodec_init+0x178>)
 80023a8:	881a      	ldrh	r2, [r3, #0]
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <AudioCodec_init+0x17c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <AudioCodec_init+0x174>)
 80023b4:	2120      	movs	r1, #32
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f008 fd64 	bl	800ae84 <HAL_I2C_Master_Transmit>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <AudioCodec_init+0x180>)
 80023c2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <AudioCodec_init+0x174>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <AudioCodec_init+0x174>)
 80023cc:	2202      	movs	r2, #2
 80023ce:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <AudioCodec_init+0x178>)
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <AudioCodec_init+0x17c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <AudioCodec_init+0x174>)
 80023de:	2120      	movs	r1, #32
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f008 fd4f 	bl	800ae84 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <AudioCodec_init+0x184>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]

}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	58020800 	.word	0x58020800
 80023f8:	200017a0 	.word	0x200017a0
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	20000010 	.word	0x20000010
 8002404:	200017a2 	.word	0x200017a2
 8002408:	2000027e 	.word	0x2000027e

0800240c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <MX_DMA_Init+0x5c>)
 8002414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <MX_DMA_Init+0x5c>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_DMA_Init+0x5c>)
 8002424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	200b      	movs	r0, #11
 8002436:	f004 fc0a 	bl	8006c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800243a:	200b      	movs	r0, #11
 800243c:	f004 fc21 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	200c      	movs	r0, #12
 8002446:	f004 fc02 	bl	8006c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800244a:	200c      	movs	r0, #12
 800244c:	f004 fc19 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	200d      	movs	r0, #13
 8002456:	f004 fbfa 	bl	8006c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800245a:	200d      	movs	r0, #13
 800245c:	f004 fc11 	bl	8006c82 <HAL_NVIC_EnableIRQ>

}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024400 	.word	0x58024400

0800246c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <MX_FATFS_Init+0x18>)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_FATFS_Init+0x1c>)
 8002474:	f014 ff6a 	bl	801734c <FATFS_LinkDriver>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <MX_FATFS_Init+0x20>)
 800247e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200017a4 	.word	0x200017a4
 8002488:	08017c28 	.word	0x08017c28
 800248c:	200017a3 	.word	0x200017a3

08002490 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8002496:	2301      	movs	r3, #1
 8002498:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800249a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <BSP_PlatformIsDetected+0x28>)
 80024a0:	f006 ff1a 	bl	80092d8 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80024ae:	79fb      	ldrb	r3, [r7, #7]
}  
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	58020800 	.word	0x58020800

080024bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <MX_FMC_Init+0xa0>)
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <MX_FMC_Init+0xa4>)
 80024d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <MX_FMC_Init+0xa0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <MX_FMC_Init+0xa0>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_FMC_Init+0xa0>)
 80024e8:	2208      	movs	r2, #8
 80024ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <MX_FMC_Init+0xa0>)
 80024ee:	2210      	movs	r2, #16
 80024f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_FMC_Init+0xa0>)
 80024f4:	2240      	movs	r2, #64	; 0x40
 80024f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_FMC_Init+0xa0>)
 80024fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <MX_FMC_Init+0xa0>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_FMC_Init+0xa0>)
 8002508:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800250c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <MX_FMC_Init+0xa0>)
 8002510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_FMC_Init+0xa0>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800251c:	2302      	movs	r3, #2
 800251e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002520:	2306      	movs	r3, #6
 8002522:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002524:	2304      	movs	r3, #4
 8002526:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8002528:	2306      	movs	r3, #6
 800252a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800252c:	2302      	movs	r3, #2
 800252e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002530:	2302      	movs	r3, #2
 8002532:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002534:	2302      	movs	r3, #2
 8002536:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <MX_FMC_Init+0xa0>)
 800253e:	f00f f84b 	bl	80115d8 <HAL_SDRAM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002548:	f000 fd4c 	bl	8002fe4 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800254c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002550:	f002 fd18 	bl	8004f84 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200017a8 	.word	0x200017a8
 8002560:	52004140 	.word	0x52004140

08002564 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002564:	b580      	push	{r7, lr}
 8002566:	b0b8      	sub	sp, #224	; 0xe0
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_FMC_MspInit+0x15c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8099 	bne.w	80026b6 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002584:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <HAL_FMC_MspInit+0x15c>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	22c0      	movs	r2, #192	; 0xc0
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f014 ffa6 	bl	80174e4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00a f835 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80025b8:	f000 fd14 	bl	8002fe4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025bc:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_FMC_MspInit+0x160>)
 80025be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025c2:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <HAL_FMC_MspInit+0x160>)
 80025c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_FMC_MspInit+0x160>)
 80025ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025f4:	230c      	movs	r3, #12
 80025f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025fe:	4619      	mov	r1, r3
 8002600:	4831      	ldr	r0, [pc, #196]	; (80026c8 <HAL_FMC_MspInit+0x164>)
 8002602:	f006 fcb9 	bl	8008f78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002606:	230d      	movs	r3, #13
 8002608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800261e:	230c      	movs	r3, #12
 8002620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002628:	4619      	mov	r1, r3
 800262a:	4828      	ldr	r0, [pc, #160]	; (80026cc <HAL_FMC_MspInit+0x168>)
 800262c:	f006 fca4 	bl	8008f78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002630:	f248 1337 	movw	r3, #33079	; 0x8137
 8002634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800264a:	230c      	movs	r3, #12
 800264c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002650:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002654:	4619      	mov	r1, r3
 8002656:	481e      	ldr	r0, [pc, #120]	; (80026d0 <HAL_FMC_MspInit+0x16c>)
 8002658:	f006 fc8e 	bl	8008f78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800265c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002676:	230c      	movs	r3, #12
 8002678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002680:	4619      	mov	r1, r3
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <HAL_FMC_MspInit+0x170>)
 8002684:	f006 fc78 	bl	8008f78 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002688:	f24c 7303 	movw	r3, #50947	; 0xc703
 800268c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a2:	230c      	movs	r3, #12
 80026a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026ac:	4619      	mov	r1, r3
 80026ae:	480a      	ldr	r0, [pc, #40]	; (80026d8 <HAL_FMC_MspInit+0x174>)
 80026b0:	f006 fc62 	bl	8008f78 <HAL_GPIO_Init>
 80026b4:	e000      	b.n	80026b8 <HAL_FMC_MspInit+0x154>
    return;
 80026b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026b8:	37e0      	adds	r7, #224	; 0xe0
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200017dc 	.word	0x200017dc
 80026c4:	58024400 	.word	0x58024400
 80026c8:	58021400 	.word	0x58021400
 80026cc:	58020800 	.word	0x58020800
 80026d0:	58021800 	.word	0x58021800
 80026d4:	58021000 	.word	0x58021000
 80026d8:	58020c00 	.word	0x58020c00

080026dc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026e4:	f7ff ff3e 	bl	8002564 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08e      	sub	sp, #56	; 0x38
 80026f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002706:	4b9b      	ldr	r3, [pc, #620]	; (8002974 <MX_GPIO_Init+0x284>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	4a99      	ldr	r2, [pc, #612]	; (8002974 <MX_GPIO_Init+0x284>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002716:	4b97      	ldr	r3, [pc, #604]	; (8002974 <MX_GPIO_Init+0x284>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	623b      	str	r3, [r7, #32]
 8002722:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002724:	4b93      	ldr	r3, [pc, #588]	; (8002974 <MX_GPIO_Init+0x284>)
 8002726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272a:	4a92      	ldr	r2, [pc, #584]	; (8002974 <MX_GPIO_Init+0x284>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <MX_GPIO_Init+0x284>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002742:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <MX_GPIO_Init+0x284>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002748:	4a8a      	ldr	r2, [pc, #552]	; (8002974 <MX_GPIO_Init+0x284>)
 800274a:	f043 0320 	orr.w	r3, r3, #32
 800274e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <MX_GPIO_Init+0x284>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002760:	4b84      	ldr	r3, [pc, #528]	; (8002974 <MX_GPIO_Init+0x284>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002766:	4a83      	ldr	r2, [pc, #524]	; (8002974 <MX_GPIO_Init+0x284>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <MX_GPIO_Init+0x284>)
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <MX_GPIO_Init+0x284>)
 8002780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002784:	4a7b      	ldr	r2, [pc, #492]	; (8002974 <MX_GPIO_Init+0x284>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800278e:	4b79      	ldr	r3, [pc, #484]	; (8002974 <MX_GPIO_Init+0x284>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <MX_GPIO_Init+0x284>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	4a74      	ldr	r2, [pc, #464]	; (8002974 <MX_GPIO_Init+0x284>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ac:	4b71      	ldr	r3, [pc, #452]	; (8002974 <MX_GPIO_Init+0x284>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ba:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <MX_GPIO_Init+0x284>)
 80027bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c0:	4a6c      	ldr	r2, [pc, #432]	; (8002974 <MX_GPIO_Init+0x284>)
 80027c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027ca:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <MX_GPIO_Init+0x284>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d8:	4b66      	ldr	r3, [pc, #408]	; (8002974 <MX_GPIO_Init+0x284>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	4a65      	ldr	r2, [pc, #404]	; (8002974 <MX_GPIO_Init+0x284>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <MX_GPIO_Init+0x284>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 80027f6:	2200      	movs	r2, #0
 80027f8:	f244 0140 	movw	r1, #16448	; 0x4040
 80027fc:	485e      	ldr	r0, [pc, #376]	; (8002978 <MX_GPIO_Init+0x288>)
 80027fe:	f006 fd83 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002802:	2200      	movs	r2, #0
 8002804:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002808:	485c      	ldr	r0, [pc, #368]	; (800297c <MX_GPIO_Init+0x28c>)
 800280a:	f006 fd7d 	bl	8009308 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002814:	485a      	ldr	r0, [pc, #360]	; (8002980 <MX_GPIO_Init+0x290>)
 8002816:	f006 fd77 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002820:	4858      	ldr	r0, [pc, #352]	; (8002984 <MX_GPIO_Init+0x294>)
 8002822:	f006 fd71 	bl	8009308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002838:	4619      	mov	r1, r3
 800283a:	484f      	ldr	r0, [pc, #316]	; (8002978 <MX_GPIO_Init+0x288>)
 800283c:	f006 fb9c 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002840:	f244 0340 	movw	r3, #16448	; 0x4040
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	4619      	mov	r1, r3
 8002858:	4847      	ldr	r0, [pc, #284]	; (8002978 <MX_GPIO_Init+0x288>)
 800285a:	f006 fb8d 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002872:	4619      	mov	r1, r3
 8002874:	4840      	ldr	r0, [pc, #256]	; (8002978 <MX_GPIO_Init+0x288>)
 8002876:	f006 fb7f 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800287a:	2304      	movs	r3, #4
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	4619      	mov	r1, r3
 800288c:	483b      	ldr	r0, [pc, #236]	; (800297c <MX_GPIO_Init+0x28c>)
 800288e:	f006 fb73 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002892:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	2301      	movs	r3, #1
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a8:	4619      	mov	r1, r3
 80028aa:	4834      	ldr	r0, [pc, #208]	; (800297c <MX_GPIO_Init+0x28c>)
 80028ac:	f006 fb64 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	482e      	ldr	r0, [pc, #184]	; (8002980 <MX_GPIO_Init+0x290>)
 80028c6:	f006 fb57 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	4827      	ldr	r0, [pc, #156]	; (8002980 <MX_GPIO_Init+0x290>)
 80028e4:	f006 fb48 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80028e8:	f242 0378 	movw	r3, #8312	; 0x2078
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ee:	2303      	movs	r3, #3
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	4619      	mov	r1, r3
 80028fc:	4820      	ldr	r0, [pc, #128]	; (8002980 <MX_GPIO_Init+0x290>)
 80028fe:	f006 fb3b 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 8002902:	f243 0308 	movw	r3, #12296	; 0x3008
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002908:	2303      	movs	r3, #3
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002914:	4619      	mov	r1, r3
 8002916:	481c      	ldr	r0, [pc, #112]	; (8002988 <MX_GPIO_Init+0x298>)
 8002918:	f006 fb2e 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291c:	23c0      	movs	r3, #192	; 0xc0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	4816      	ldr	r0, [pc, #88]	; (8002988 <MX_GPIO_Init+0x298>)
 8002930:	f006 fb22 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293a:	2301      	movs	r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	4619      	mov	r1, r3
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <MX_GPIO_Init+0x294>)
 800294e:	f006 fb13 	bl	8008f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002958:	2303      	movs	r3, #3
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4807      	ldr	r0, [pc, #28]	; (8002984 <MX_GPIO_Init+0x294>)
 8002968:	f006 fb06 	bl	8008f78 <HAL_GPIO_Init>

}
 800296c:	bf00      	nop
 800296e:	3738      	adds	r7, #56	; 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	58024400 	.word	0x58024400
 8002978:	58020800 	.word	0x58020800
 800297c:	58020400 	.word	0x58020400
 8002980:	58020c00 	.word	0x58020c00
 8002984:	58020000 	.word	0x58020000
 8002988:	58021800 	.word	0x58021800

0800298c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_I2C2_Init+0x74>)
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <MX_I2C2_Init+0x78>)
 8002994:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_I2C2_Init+0x74>)
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <MX_I2C2_Init+0x7c>)
 800299a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_I2C2_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029c6:	480e      	ldr	r0, [pc, #56]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029c8:	f008 f9cc 	bl	800ad64 <HAL_I2C_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80029d2:	f000 fb07 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029d6:	2100      	movs	r1, #0
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029da:	f008 fd57 	bl	800b48c <HAL_I2CEx_ConfigAnalogFilter>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029e4:	f000 fafe 	bl	8002fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029e8:	2100      	movs	r1, #0
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_I2C2_Init+0x74>)
 80029ec:	f008 fd99 	bl	800b522 <HAL_I2CEx_ConfigDigitalFilter>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029f6:	f000 faf5 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200017e0 	.word	0x200017e0
 8002a04:	40005800 	.word	0x40005800
 8002a08:	505097f4 	.word	0x505097f4

08002a0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	22c0      	movs	r2, #192	; 0xc0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f014 fd59 	bl	80174e4 <memset>
  if(i2cHandle->Instance==I2C2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a27      	ldr	r2, [pc, #156]	; (8002ad4 <HAL_I2C_MspInit+0xc8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d146      	bne.n	8002aca <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a3c:	f04f 0208 	mov.w	r2, #8
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4618      	mov	r0, r3
 8002a54:	f009 fde2 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a5e:	f000 fac1 	bl	8002fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480d      	ldr	r0, [pc, #52]	; (8002adc <HAL_I2C_MspInit+0xd0>)
 8002aa8:	f006 fa66 	bl	8008f78 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_I2C_MspInit+0xcc>)
 8002abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002aca:	bf00      	nop
 8002acc:	37e8      	adds	r7, #232	; 0xe8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40005800 	.word	0x40005800
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020400 	.word	0x58020400

08002ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8002ae6:	f000 fa3b 	bl	8002f60 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <main+0x17c>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11b      	bne.n	8002b2e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af6:	f3bf 8f4f 	dsb	sy
}
 8002afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002afc:	f3bf 8f6f 	isb	sy
}
 8002b00:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002b02:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <main+0x17c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002b0a:	f3bf 8f4f 	dsb	sy
}
 8002b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b10:	f3bf 8f6f 	isb	sy
}
 8002b14:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <main+0x17c>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <main+0x17c>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b22:	f3bf 8f4f 	dsb	sy
}
 8002b26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b28:	f3bf 8f6f 	isb	sy
}
 8002b2c:	e000      	b.n	8002b30 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002b2e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <main+0x17c>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d138      	bne.n	8002bae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <main+0x17c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b44:	f3bf 8f4f 	dsb	sy
}
 8002b48:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002b4a:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <main+0x17c>)
 8002b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b50:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0b5b      	lsrs	r3, r3, #13
 8002b56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b5a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b64:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002b6e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <main+0x17c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ef      	bne.n	8002b66 <main+0x86>
    } while(sets-- != 0U);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1e5a      	subs	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e5      	bne.n	8002b5c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b90:	f3bf 8f4f 	dsb	sy
}
 8002b94:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <main+0x17c>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <main+0x17c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ba2:	f3bf 8f4f 	dsb	sy
}
 8002ba6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ba8:	f3bf 8f6f 	isb	sy
}
 8002bac:	e000      	b.n	8002bb0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002bae:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb0:	f002 f926 	bl	8004e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bb4:	f000 f860 	bl	8002c78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002bb8:	f000 f90e 	bl	8002dd8 <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bbc:	f7ff fd98 	bl	80026f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bc0:	f7ff fc24 	bl	800240c <MX_DMA_Init>
  MX_FMC_Init();
 8002bc4:	f7ff fc7a 	bl	80024bc <MX_FMC_Init>
  MX_ADC1_Init();
 8002bc8:	f7fe fc1e 	bl	8001408 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002bcc:	f7fe fd3e 	bl	800164c <MX_ADC3_Init>
  MX_I2C2_Init();
 8002bd0:	f7ff fedc 	bl	800298c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002bd4:	f000 fca6 	bl	8003524 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002bd8:	f000 fd3e 	bl	8003658 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002bdc:	f7ff fc46 	bl	800246c <MX_FATFS_Init>
  MX_SAI1_Init();
 8002be0:	f000 fa54 	bl	800308c <MX_SAI1_Init>
  MX_TIM3_Init();
 8002be4:	f000 ffc8 	bl	8003b78 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002be8:	f001 f83e 	bl	8003c68 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002bec:	f001 f8ca 	bl	8003d84 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002bf0:	f000 ff32 	bl	8003a58 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002bf4:	f001 f9fa 	bl	8003fec <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002bf8:	f000 f9f8 	bl	8002fec <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002bfc:	f001 fad2 	bl	80041a4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002c00:	2200      	movs	r2, #0
 8002c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c06:	4816      	ldr	r0, [pc, #88]	; (8002c60 <main+0x180>)
 8002c08:	f006 fb7e 	bl	8009308 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002c0c:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8002c10:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	eee1 3a10 	vmsr	fpscr, r3
}
 8002c24:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8002c26:	220a      	movs	r2, #10
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <main+0x184>)
 8002c2a:	480f      	ldr	r0, [pc, #60]	; (8002c68 <main+0x188>)
 8002c2c:	f002 fd68 	bl	8005700 <HAL_ADC_Start_DMA>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <main+0x15a>
	{
	  Error_Handler();
 8002c36:	f000 f9d5 	bl	8002fe4 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 8002c3a:	200a      	movs	r0, #10
 8002c3c:	f002 f972 	bl	8004f24 <HAL_Delay>

  SDRAM_Initialization_sequence();
 8002c40:	f000 f90a 	bl	8002e58 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f002 f96d 	bl	8004f24 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <main+0x18c>)
 8002c4c:	4908      	ldr	r1, [pc, #32]	; (8002c70 <main+0x190>)
 8002c4e:	4809      	ldr	r0, [pc, #36]	; (8002c74 <main+0x194>)
 8002c50:	f7fe fe90 	bl	8001974 <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002c54:	f001 face 	bl	80041f4 <MX_USB_HOST_Process>
 8002c58:	e7fc      	b.n	8002c54 <main+0x174>
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	58020800 	.word	0x58020800
 8002c64:	30000440 	.word	0x30000440
 8002c68:	2000013c 	.word	0x2000013c
 8002c6c:	200018e0 	.word	0x200018e0
 8002c70:	20001848 	.word	0x20001848
 8002c74:	200017e0 	.word	0x200017e0

08002c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b09e      	sub	sp, #120	; 0x78
 8002c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c82:	224c      	movs	r2, #76	; 0x4c
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f014 fc2c 	bl	80174e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2220      	movs	r2, #32
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f014 fc25 	bl	80174e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f008 fc8e 	bl	800b5bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <SystemClock_Config+0x154>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <SystemClock_Config+0x154>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <SystemClock_Config+0x154>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b45      	ldr	r3, [pc, #276]	; (8002dd0 <SystemClock_Config+0x158>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4a44      	ldr	r2, [pc, #272]	; (8002dd0 <SystemClock_Config+0x158>)
 8002cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc4:	6193      	str	r3, [r2, #24]
 8002cc6:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <SystemClock_Config+0x158>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002cd2:	bf00      	nop
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <SystemClock_Config+0x158>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce0:	d1f8      	bne.n	8002cd4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <SystemClock_Config+0x15c>)
 8002ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <SystemClock_Config+0x15c>)
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cf2:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <SystemClock_Config+0x15c>)
 8002cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002d00:	2300      	movs	r3, #0
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <SystemClock_Config+0x158>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <SystemClock_Config+0x158>)
 8002d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <SystemClock_Config+0x158>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <SystemClock_Config+0x154>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	4a2b      	ldr	r2, [pc, #172]	; (8002dcc <SystemClock_Config+0x154>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <SystemClock_Config+0x154>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d32:	bf00      	nop
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <SystemClock_Config+0x158>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d1f8      	bne.n	8002d34 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002d42:	2321      	movs	r3, #33	; 0x21
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d50:	2302      	movs	r3, #2
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d54:	2302      	movs	r3, #2
 8002d56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002d58:	2305      	movs	r3, #5
 8002d5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002d5c:	23c0      	movs	r3, #192	; 0xc0
 8002d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f008 fc67 	bl	800b650 <HAL_RCC_OscConfig>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002d88:	f000 f92c 	bl	8002fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8c:	233f      	movs	r3, #63	; 0x3f
 8002d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d90:	2303      	movs	r3, #3
 8002d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002d9c:	2340      	movs	r3, #64	; 0x40
 8002d9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002da0:	2340      	movs	r3, #64	; 0x40
 8002da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002daa:	2340      	movs	r3, #64	; 0x40
 8002dac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	2104      	movs	r1, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f009 f8a5 	bl	800bf04 <HAL_RCC_ClockConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8002dc0:	f000 f910 	bl	8002fe4 <Error_Handler>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3778      	adds	r7, #120	; 0x78
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	58000400 	.word	0x58000400
 8002dd0:	58024800 	.word	0x58024800
 8002dd4:	58024400 	.word	0x58024400

08002dd8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0b0      	sub	sp, #192	; 0xc0
 8002ddc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dde:	463b      	mov	r3, r7
 8002de0:	22c0      	movs	r2, #192	; 0xc0
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f014 fb7d 	bl	80174e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <PeriphCommonClock_Config+0x68>)
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002df4:	2319      	movs	r3, #25
 8002df6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8002df8:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002dfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002e02:	2302      	movs	r3, #2
 8002e04:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f009 fbf7 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002e34:	f000 f8d6 	bl	8002fe4 <Error_Handler>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	37c0      	adds	r7, #192	; 0xc0
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	00090100 	.word	0x00090100

08002e44 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	;
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e66:	2310      	movs	r3, #16
 8002e68:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4828      	ldr	r0, [pc, #160]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002e7c:	f00e fbe8 	bl	8011650 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f002 f84f 	bl	8004f24 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002e86:	2302      	movs	r3, #2
 8002e88:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481f      	ldr	r0, [pc, #124]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002ea0:	f00e fbd6 	bl	8011650 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8002ea4:	f240 2322 	movw	r3, #546	; 0x222
 8002ea8:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4816      	ldr	r0, [pc, #88]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002ec4:	f00e fbc4 	bl	8011650 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ecc:	2310      	movs	r3, #16
 8002ece:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480e      	ldr	r0, [pc, #56]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002ee2:	f00e fbb5 	bl	8011650 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f002 f81c 	bl	8004f24 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002eec:	2303      	movs	r3, #3
 8002eee:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f02:	4619      	mov	r1, r3
 8002f04:	4805      	ldr	r0, [pc, #20]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002f06:	f00e fba3 	bl	8011650 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8002f0a:	f240 5169 	movw	r1, #1385	; 0x569
 8002f0e:	4803      	ldr	r0, [pc, #12]	; (8002f1c <SDRAM_Initialization_sequence+0xc4>)
 8002f10:	f00e fbd3 	bl	80116ba <HAL_SDRAM_ProgramRefreshRate>
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200017a8 	.word	0x200017a8

08002f20 <randomNumber>:


float randomNumber(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002f26:	463b      	mov	r3, r7
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480b      	ldr	r0, [pc, #44]	; (8002f58 <randomNumber+0x38>)
 8002f2c:	f00c f8d6 	bl	800f0dc <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f5c <randomNumber+0x3c>
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	ee07 3a90 	vmov	s15, r3
}
 8002f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20001834 	.word	0x20001834
 8002f5c:	2f80000d 	.word	0x2f80000d

08002f60 <MPU_Conf>:


void MPU_Conf(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8002f66:	f003 fea7 	bl	8006cb8 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8002f6e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002f72:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002f74:	2311      	movs	r3, #17
 8002f76:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002f98:	463b      	mov	r3, r7
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fec4 	bl	8006d28 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8002fa4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002fa8:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002faa:	230f      	movs	r3, #15
 8002fac:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002fce:	463b      	mov	r3, r7
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fea9 	bl	8006d28 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f003 fe86 	bl	8006ce8 <HAL_MPU_Enable>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 8002fe8:	e7fe      	b.n	8002fe8 <Error_Handler+0x4>
	...

08002fec <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <MX_RNG_Init+0x24>)
 8002ff2:	4a08      	ldr	r2, [pc, #32]	; (8003014 <MX_RNG_Init+0x28>)
 8002ff4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_RNG_Init+0x24>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <MX_RNG_Init+0x24>)
 8002ffe:	f00c f80b 	bl	800f018 <HAL_RNG_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003008:	f7ff ffec 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20001834 	.word	0x20001834
 8003014:	48021800 	.word	0x48021800

08003018 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0b4      	sub	sp, #208	; 0xd0
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	22c0      	movs	r2, #192	; 0xc0
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f014 fa5b 	bl	80174e4 <memset>
  if(rngHandle->Instance==RNG)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_RNG_MspInit+0x6c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d121      	bne.n	800307c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304a:	f107 0310 	add.w	r3, r7, #16
 800304e:	4618      	mov	r0, r3
 8003050:	f009 fae4 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800305a:	f7ff ffc3 	bl	8002fe4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_RNG_MspInit+0x70>)
 8003060:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_RNG_MspInit+0x70>)
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RNG_MspInit+0x70>)
 8003070:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800307c:	bf00      	nop
 800307e:	37d0      	adds	r7, #208	; 0xd0
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	48021800 	.word	0x48021800
 8003088:	58024400 	.word	0x58024400

0800308c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <MX_SAI1_Init+0xb0>)
 8003092:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <MX_SAI1_Init+0xb4>)
 8003094:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <MX_SAI1_Init+0xb0>)
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800309c:	4b27      	ldr	r3, [pc, #156]	; (800313c <MX_SAI1_Init+0xb0>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <MX_SAI1_Init+0xb0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80030a8:	4b24      	ldr	r3, [pc, #144]	; (800313c <MX_SAI1_Init+0xb0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80030ae:	4b23      	ldr	r3, [pc, #140]	; (800313c <MX_SAI1_Init+0xb0>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <MX_SAI1_Init+0xb0>)
 80030b6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80030ba:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80030bc:	4b1f      	ldr	r3, [pc, #124]	; (800313c <MX_SAI1_Init+0xb0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <MX_SAI1_Init+0xb0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <MX_SAI1_Init+0xb0>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <MX_SAI1_Init+0xb0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80030d4:	2302      	movs	r3, #2
 80030d6:	2202      	movs	r2, #2
 80030d8:	2100      	movs	r1, #0
 80030da:	4818      	ldr	r0, [pc, #96]	; (800313c <MX_SAI1_Init+0xb0>)
 80030dc:	f00c f854 	bl	800f188 <HAL_SAI_InitProtocol>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80030e6:	f7ff ff7d 	bl	8002fe4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <MX_SAI1_Init+0xb8>)
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <MX_SAI1_Init+0xbc>)
 80030ee:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <MX_SAI1_Init+0xb8>)
 80030f2:	2203      	movs	r2, #3
 80030f4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <MX_SAI1_Init+0xb8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <MX_SAI1_Init+0xb8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <MX_SAI1_Init+0xb8>)
 8003104:	2201      	movs	r2, #1
 8003106:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <MX_SAI1_Init+0xb8>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <MX_SAI1_Init+0xb8>)
 8003110:	2200      	movs	r2, #0
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <MX_SAI1_Init+0xb8>)
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <MX_SAI1_Init+0xb8>)
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003120:	2302      	movs	r3, #2
 8003122:	2202      	movs	r2, #2
 8003124:	2100      	movs	r1, #0
 8003126:	4807      	ldr	r0, [pc, #28]	; (8003144 <MX_SAI1_Init+0xb8>)
 8003128:	f00c f82e 	bl	800f188 <HAL_SAI_InitProtocol>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8003132:	f7ff ff57 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20001848 	.word	0x20001848
 8003140:	40015804 	.word	0x40015804
 8003144:	200018e0 	.word	0x200018e0
 8003148:	40015824 	.word	0x40015824

0800314c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <HAL_SAI_MspInit+0x1ec>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d179      	bne.n	8003252 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800315e:	4b77      	ldr	r3, [pc, #476]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003166:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 8003168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800316c:	4a74      	ldr	r2, [pc, #464]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 800316e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003176:	4b72      	ldr	r3, [pc, #456]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 8003178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003184:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	4a6c      	ldr	r2, [pc, #432]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 800318c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800318e:	2324      	movs	r3, #36	; 0x24
 8003190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800319e:	2306      	movs	r3, #6
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	4866      	ldr	r0, [pc, #408]	; (8003344 <HAL_SAI_MspInit+0x1f8>)
 80031aa:	f005 fee5 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80031ae:	2350      	movs	r3, #80	; 0x50
 80031b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ba:	2302      	movs	r3, #2
 80031bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80031be:	2306      	movs	r3, #6
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	485e      	ldr	r0, [pc, #376]	; (8003344 <HAL_SAI_MspInit+0x1f8>)
 80031ca:	f005 fed5 	bl	8008f78 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031d0:	4a5e      	ldr	r2, [pc, #376]	; (800334c <HAL_SAI_MspInit+0x200>)
 80031d2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80031d4:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031d6:	2257      	movs	r2, #87	; 0x57
 80031d8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031da:	4b5b      	ldr	r3, [pc, #364]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ec:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031f4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031f6:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 80031f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80031fe:	4b52      	ldr	r3, [pc, #328]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003204:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003206:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003208:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800320c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800320e:	4b4e      	ldr	r3, [pc, #312]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003210:	2204      	movs	r2, #4
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003214:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800321a:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 800321c:	2200      	movs	r2, #0
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003226:	4848      	ldr	r0, [pc, #288]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003228:	f003 fdc2 	bl	8006db0 <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8003232:	f7ff fed7 	bl	8002fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a43      	ldr	r2, [pc, #268]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 800323a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800323e:	4a42      	ldr	r2, [pc, #264]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a40      	ldr	r2, [pc, #256]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 8003248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800324c:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <HAL_SAI_MspInit+0x1fc>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a3e      	ldr	r2, [pc, #248]	; (8003350 <HAL_SAI_MspInit+0x204>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d169      	bne.n	8003330 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003264:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 8003266:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 800326c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003270:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_SAI_MspInit+0x1f4>)
 8003276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8003282:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a2c      	ldr	r2, [pc, #176]	; (800333c <HAL_SAI_MspInit+0x1f0>)
 800328a:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800328c:	2308      	movs	r3, #8
 800328e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800329c:	2306      	movs	r3, #6
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4619      	mov	r1, r3
 80032a6:	4827      	ldr	r0, [pc, #156]	; (8003344 <HAL_SAI_MspInit+0x1f8>)
 80032a8:	f005 fe66 	bl	8008f78 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <HAL_SAI_MspInit+0x20c>)
 80032b0:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032b4:	2258      	movs	r2, #88	; 0x58
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b8:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ca:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d2:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032da:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032ea:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032ee:	2204      	movs	r2, #4
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_SAI_MspInit+0x208>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_SAI_MspInit+0x208>)
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8003304:	4813      	ldr	r0, [pc, #76]	; (8003354 <HAL_SAI_MspInit+0x208>)
 8003306:	f003 fd53 	bl	8006db0 <HAL_DMA_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 8003310:	f7ff fe68 	bl	8002fe4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_SAI_MspInit+0x208>)
 8003318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_SAI_MspInit+0x208>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_SAI_MspInit+0x208>)
 8003326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_SAI_MspInit+0x208>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8003330:	bf00      	nop
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40015804 	.word	0x40015804
 800333c:	20001a68 	.word	0x20001a68
 8003340:	58024400 	.word	0x58024400
 8003344:	58021000 	.word	0x58021000
 8003348:	20001978 	.word	0x20001978
 800334c:	40020028 	.word	0x40020028
 8003350:	40015824 	.word	0x40015824
 8003354:	200019f0 	.word	0x200019f0
 8003358:	40020040 	.word	0x40020040

0800335c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <SD_CheckStatus+0x38>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800336c:	f7fe ff5a 	bl	8002224 <BSP_SD_GetCardState>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003376:	4b07      	ldr	r3, [pc, #28]	; (8003394 <SD_CheckStatus+0x38>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <SD_CheckStatus+0x38>)
 8003384:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <SD_CheckStatus+0x38>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000014 	.word	0x20000014

08003398 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <SD_initialize+0x38>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80033a8:	f7fe feda 	bl	8002160 <BSP_SD_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ffd1 	bl	800335c <SD_CheckStatus>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <SD_initialize+0x38>)
 80033c0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80033c2:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <SD_initialize+0x38>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000014 	.word	0x20000014

080033d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffbb 	bl	800335c <SD_CheckStatus>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68b8      	ldr	r0, [r7, #8]
 800340e:	f7fe fecd 	bl	80021ac <BSP_SD_ReadBlocks>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003418:	bf00      	nop
 800341a:	f7fe ff03 	bl	8002224 <BSP_SD_GetCardState>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1fa      	bne.n	800341a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4603      	mov	r3, r0
 8003440:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	f7fe feca 	bl	80021e8 <BSP_SD_WriteBlocks>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800345a:	bf00      	nop
 800345c:	f7fe fee2 	bl	8002224 <BSP_SD_GetCardState>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1fa      	bne.n	800345c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	603a      	str	r2, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
 8003480:	460b      	mov	r3, r1
 8003482:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <SD_ioctl+0xac>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <SD_ioctl+0x28>
 8003498:	2303      	movs	r3, #3
 800349a:	e03c      	b.n	8003516 <SD_ioctl+0xa2>

  switch (cmd)
 800349c:	79bb      	ldrb	r3, [r7, #6]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d834      	bhi.n	800350c <SD_ioctl+0x98>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <SD_ioctl+0x34>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034c1 	.word	0x080034c1
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034f3 	.word	0x080034f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034be:	e028      	b.n	8003512 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80034c0:	f107 0308 	add.w	r3, r7, #8
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe febd 	bl	8002244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034d6:	e01c      	b.n	8003512 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe feb1 	bl	8002244 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034f0:	e00f      	b.n	8003512 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fea4 	bl	8002244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	0a5a      	lsrs	r2, r3, #9
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800350a:	e002      	b.n	8003512 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800350c:	2304      	movs	r3, #4
 800350e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003516:	4618      	mov	r0, r3
 8003518:	3730      	adds	r7, #48	; 0x30
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000014 	.word	0x20000014

08003524 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <MX_SDMMC1_SD_Init+0x38>)
 800352c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 800353c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003540:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 8003544:	2200      	movs	r2, #0
 8003546:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <MX_SDMMC1_SD_Init+0x34>)
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20001a6c 	.word	0x20001a6c
 800355c:	52007000 	.word	0x52007000

08003560 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a32      	ldr	r2, [pc, #200]	; (8003648 <HAL_SD_MspInit+0xe8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d15e      	bne.n	8003640 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <HAL_SD_MspInit+0xec>)
 8003584:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003588:	4a30      	ldr	r2, [pc, #192]	; (800364c <HAL_SD_MspInit+0xec>)
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_SD_MspInit+0xec>)
 8003594:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_SD_MspInit+0xec>)
 80035a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_SD_MspInit+0xec>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_SD_MspInit+0xec>)
 80035b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <HAL_SD_MspInit+0xec>)
 80035c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c4:	4a21      	ldr	r2, [pc, #132]	; (800364c <HAL_SD_MspInit+0xec>)
 80035c6:	f043 0308 	orr.w	r3, r3, #8
 80035ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ce:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_SD_MspInit+0xec>)
 80035d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80035dc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035ee:	230c      	movs	r3, #12
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4815      	ldr	r0, [pc, #84]	; (8003650 <HAL_SD_MspInit+0xf0>)
 80035fa:	f005 fcbd 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360c:	2303      	movs	r3, #3
 800360e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003610:	230c      	movs	r3, #12
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4619      	mov	r1, r3
 800361a:	480d      	ldr	r0, [pc, #52]	; (8003650 <HAL_SD_MspInit+0xf0>)
 800361c:	f005 fcac 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003620:	2304      	movs	r3, #4
 8003622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003628:	2301      	movs	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003630:	230c      	movs	r3, #12
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	; (8003654 <HAL_SD_MspInit+0xf4>)
 800363c:	f005 fc9c 	bl	8008f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	52007000 	.word	0x52007000
 800364c:	58024400 	.word	0x58024400
 8003650:	58020800 	.word	0x58020800
 8003654:	58020c00 	.word	0x58020c00

08003658 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <MX_SPI1_Init+0xa4>)
 800365e:	4a28      	ldr	r2, [pc, #160]	; (8003700 <MX_SPI1_Init+0xa8>)
 8003660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <MX_SPI1_Init+0xa4>)
 8003664:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <MX_SPI1_Init+0xa4>)
 800366c:	2200      	movs	r2, #0
 800366e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <MX_SPI1_Init+0xa4>)
 8003672:	2207      	movs	r2, #7
 8003674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <MX_SPI1_Init+0xa4>)
 8003678:	2200      	movs	r2, #0
 800367a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <MX_SPI1_Init+0xa4>)
 800367e:	2200      	movs	r2, #0
 8003680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <MX_SPI1_Init+0xa4>)
 8003684:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <MX_SPI1_Init+0xa4>)
 800368c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003690:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <MX_SPI1_Init+0xa4>)
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <MX_SPI1_Init+0xa4>)
 800369a:	2200      	movs	r2, #0
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <MX_SPI1_Init+0xa4>)
 80036ea:	f00e f80f 	bl	801170c <HAL_SPI_Init>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80036f4:	f7ff fc76 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20001ae8 	.word	0x20001ae8
 8003700:	40013000 	.word	0x40013000

08003704 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b0bc      	sub	sp, #240	; 0xf0
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800371c:	f107 0318 	add.w	r3, r7, #24
 8003720:	22c0      	movs	r2, #192	; 0xc0
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f013 fedd 	bl	80174e4 <memset>
  if(spiHandle->Instance==SPI1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a38      	ldr	r2, [pc, #224]	; (8003810 <HAL_SPI_MspInit+0x10c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d169      	bne.n	8003808 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003740:	2300      	movs	r3, #0
 8003742:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003744:	f107 0318 	add.w	r3, r7, #24
 8003748:	4618      	mov	r0, r3
 800374a:	f008 ff67 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003754:	f7ff fc46 	bl	8002fe4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003758:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_SPI_MspInit+0x110>)
 800375a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <HAL_SPI_MspInit+0x110>)
 8003760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003764:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_SPI_MspInit+0x110>)
 800376a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800376e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_SPI_MspInit+0x110>)
 8003778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_SPI_MspInit+0x110>)
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_SPI_MspInit+0x110>)
 8003788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_SPI_MspInit+0x110>)
 8003796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379a:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_SPI_MspInit+0x110>)
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_SPI_MspInit+0x110>)
 80037a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ca:	2305      	movs	r3, #5
 80037cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037d4:	4619      	mov	r1, r3
 80037d6:	4810      	ldr	r0, [pc, #64]	; (8003818 <HAL_SPI_MspInit+0x114>)
 80037d8:	f005 fbce 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80037dc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80037e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037f6:	2305      	movs	r3, #5
 80037f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003800:	4619      	mov	r1, r3
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <HAL_SPI_MspInit+0x118>)
 8003804:	f005 fbb8 	bl	8008f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003808:	bf00      	nop
 800380a:	37f0      	adds	r7, #240	; 0xf0
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40013000 	.word	0x40013000
 8003814:	58024400 	.word	0x58024400
 8003818:	58020c00 	.word	0x58020c00
 800381c:	58021800 	.word	0x58021800

08003820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_MspInit+0x30>)
 8003828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <HAL_MspInit+0x30>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_MspInit+0x30>)
 8003838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	58024400 	.word	0x58024400

08003854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <HardFault_Handler+0x4>

08003868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <MemManage_Handler+0x4>

0800386e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <BusFault_Handler+0x4>

08003874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <UsageFault_Handler+0x4>

0800387a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a8:	f001 fb1c 	bl	8004ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream0_IRQHandler+0x10>)
 80038b6:	f004 f841 	bl	800793c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000204 	.word	0x20000204

080038c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA1_Stream1_IRQHandler+0x10>)
 80038ca:	f004 f837 	bl	800793c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20001978 	.word	0x20001978

080038d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA1_Stream2_IRQHandler+0x10>)
 80038de:	f004 f82d 	bl	800793c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200019f0 	.word	0x200019f0

080038ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <ADC_IRQHandler+0x10>)
 80038f2:	f001 ffc9 	bl	8005888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	2000013c 	.word	0x2000013c

08003900 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003906:	f005 ff83 	bl	8009810 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20001d40 	.word	0x20001d40

08003914 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800391a:	f005 ff79 	bl	8009810 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20001d40 	.word	0x20001d40

08003928 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <OTG_FS_IRQHandler+0x10>)
 800392e:	f005 ff6f 	bl	8009810 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20001d40 	.word	0x20001d40

0800393c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <_sbrk+0x50>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <_sbrk+0x16>
		heap_end = &end;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <_sbrk+0x50>)
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <_sbrk+0x54>)
 8003950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <_sbrk+0x50>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <_sbrk+0x50>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4413      	add	r3, r2
 8003960:	466a      	mov	r2, sp
 8003962:	4293      	cmp	r3, r2
 8003964:	d907      	bls.n	8003976 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003966:	f013 fdd5 	bl	8017514 <__errno>
 800396a:	4603      	mov	r3, r0
 800396c:	220c      	movs	r2, #12
 800396e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003974:	e006      	b.n	8003984 <_sbrk+0x48>
	}

	heap_end += incr;
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <_sbrk+0x50>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	4a03      	ldr	r2, [pc, #12]	; (800398c <_sbrk+0x50>)
 8003980:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003982:	68fb      	ldr	r3, [r7, #12]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20001b70 	.word	0x20001b70
 8003990:	200021a0 	.word	0x200021a0

08003994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003998:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <SystemInit+0xac>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <SystemInit+0xac>)
 80039a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80039a8:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <SystemInit+0xb0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <SystemInit+0xb0>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039b4:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <SystemInit+0xb0>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <SystemInit+0xb0>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <SystemInit+0xb0>)
 80039c0:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <SystemInit+0xb4>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <SystemInit+0xb0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <SystemInit+0xb0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <SystemInit+0xb0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <SystemInit+0xb0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <SystemInit+0xb0>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80039e4:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <SystemInit+0xb0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <SystemInit+0xb0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <SystemInit+0xb0>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <SystemInit+0xb0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <SystemInit+0xb0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <SystemInit+0xb0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <SystemInit+0xb0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <SystemInit+0xb0>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <SystemInit+0xb0>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <SystemInit+0xb8>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <SystemInit+0xbc>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a26:	d202      	bcs.n	8003a2e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <SystemInit+0xc0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SystemInit+0xac>)
 8003a30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a34:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a36:	bf00      	nop
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00
 8003a44:	58024400 	.word	0x58024400
 8003a48:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a4c:	5c001000 	.word	0x5c001000
 8003a50:	ffff0000 	.word	0xffff0000
 8003a54:	51008108 	.word	0x51008108

08003a58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b096      	sub	sp, #88	; 0x58
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	615a      	str	r2, [r3, #20]
 8003a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	222c      	movs	r2, #44	; 0x2c
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f013 fd2d 	bl	80174e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003a8c:	4a39      	ldr	r2, [pc, #228]	; (8003b74 <MX_TIM1_Init+0x11c>)
 8003a8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a90:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a9c:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ab6:	482e      	ldr	r0, [pc, #184]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003ab8:	f00d ffbe 	bl	8011a38 <HAL_TIM_PWM_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003ac2:	f7ff fa8f 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4825      	ldr	r0, [pc, #148]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003ada:	f00e fe1f 	bl	801271c <HAL_TIMEx_MasterConfigSynchronization>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003ae4:	f7ff fa7e 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ae8:	2360      	movs	r3, #96	; 0x60
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003af0:	2300      	movs	r3, #0
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003af4:	2300      	movs	r3, #0
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003afc:	2300      	movs	r3, #0
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b08:	2208      	movs	r2, #8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4818      	ldr	r0, [pc, #96]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003b0e:	f00d ffeb 	bl	8011ae8 <HAL_TIM_PWM_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b18:	f7ff fa64 	bl	8002fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003b52:	f00e fe71 	bl	8012838 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003b5c:	f7ff fa42 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b60:	4803      	ldr	r0, [pc, #12]	; (8003b70 <MX_TIM1_Init+0x118>)
 8003b62:	f000 f9b7 	bl	8003ed4 <HAL_TIM_MspPostInit>

}
 8003b66:	bf00      	nop
 8003b68:	3758      	adds	r7, #88	; 0x58
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20001b74 	.word	0x20001b74
 8003b74:	40010000 	.word	0x40010000

08003b78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b98:	463b      	mov	r3, r7
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	615a      	str	r2, [r3, #20]
 8003ba8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bac:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <MX_TIM3_Init+0xec>)
 8003bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bd0:	4823      	ldr	r0, [pc, #140]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bd2:	f00d feda 	bl	801198a <HAL_TIM_Base_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003bdc:	f7ff fa02 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bea:	4619      	mov	r1, r3
 8003bec:	481c      	ldr	r0, [pc, #112]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bee:	f00e f88f 	bl	8011d10 <HAL_TIM_ConfigClockSource>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003bf8:	f7ff f9f4 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003bfc:	4818      	ldr	r0, [pc, #96]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003bfe:	f00d ff1b 	bl	8011a38 <HAL_TIM_PWM_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003c08:	f7ff f9ec 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4811      	ldr	r0, [pc, #68]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003c1c:	f00e fd7e 	bl	801271c <HAL_TIMEx_MasterConfigSynchronization>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003c26:	f7ff f9dd 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c2a:	2360      	movs	r3, #96	; 0x60
 8003c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4807      	ldr	r0, [pc, #28]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003c42:	f00d ff51 	bl	8011ae8 <HAL_TIM_PWM_ConfigChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003c4c:	f7ff f9ca 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c50:	4803      	ldr	r0, [pc, #12]	; (8003c60 <MX_TIM3_Init+0xe8>)
 8003c52:	f000 f93f 	bl	8003ed4 <HAL_TIM_MspPostInit>

}
 8003c56:	bf00      	nop
 8003c58:	3738      	adds	r7, #56	; 0x38
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20001bc0 	.word	0x20001bc0
 8003c64:	40000400 	.word	0x40000400

08003c68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	; 0x38
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c88:	463b      	mov	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	611a      	str	r2, [r3, #16]
 8003c96:	615a      	str	r2, [r3, #20]
 8003c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c9a:	4b38      	ldr	r3, [pc, #224]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003c9c:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <MX_TIM4_Init+0x118>)
 8003c9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b35      	ldr	r3, [pc, #212]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cc0:	482e      	ldr	r0, [pc, #184]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cc2:	f00d fe62 	bl	801198a <HAL_TIM_Base_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003ccc:	f7ff f98a 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4827      	ldr	r0, [pc, #156]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cde:	f00e f817 	bl	8011d10 <HAL_TIM_ConfigClockSource>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003ce8:	f7ff f97c 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003cec:	4823      	ldr	r0, [pc, #140]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003cee:	f00d fea3 	bl	8011a38 <HAL_TIM_PWM_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003cf8:	f7ff f974 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	481c      	ldr	r0, [pc, #112]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003d0c:	f00e fd06 	bl	801271c <HAL_TIMEx_MasterConfigSynchronization>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003d16:	f7ff f965 	bl	8002fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d1a:	2360      	movs	r3, #96	; 0x60
 8003d1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4812      	ldr	r0, [pc, #72]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003d32:	f00d fed9 	bl	8011ae8 <HAL_TIM_PWM_ConfigChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003d3c:	f7ff f952 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d40:	463b      	mov	r3, r7
 8003d42:	2204      	movs	r2, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	480d      	ldr	r0, [pc, #52]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003d48:	f00d fece 	bl	8011ae8 <HAL_TIM_PWM_ConfigChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003d52:	f7ff f947 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d56:	463b      	mov	r3, r7
 8003d58:	220c      	movs	r2, #12
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4807      	ldr	r0, [pc, #28]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003d5e:	f00d fec3 	bl	8011ae8 <HAL_TIM_PWM_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003d68:	f7ff f93c 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003d6c:	4803      	ldr	r0, [pc, #12]	; (8003d7c <MX_TIM4_Init+0x114>)
 8003d6e:	f000 f8b1 	bl	8003ed4 <HAL_TIM_MspPostInit>

}
 8003d72:	bf00      	nop
 8003d74:	3738      	adds	r7, #56	; 0x38
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20001c0c 	.word	0x20001c0c
 8003d80:	40000800 	.word	0x40000800

08003d84 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <MX_TIM7_Init+0x68>)
 8003d98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003db4:	480c      	ldr	r0, [pc, #48]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003db6:	f00d fde8 	bl	801198a <HAL_TIM_Base_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003dc0:	f7ff f910 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4805      	ldr	r0, [pc, #20]	; (8003de8 <MX_TIM7_Init+0x64>)
 8003dd2:	f00e fca3 	bl	801271c <HAL_TIMEx_MasterConfigSynchronization>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003ddc:	f7ff f902 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20001c58 	.word	0x20001c58
 8003dec:	40001400 	.word	0x40001400

08003df0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0b      	ldr	r2, [pc, #44]	; (8003e2c <HAL_TIM_PWM_MspInit+0x3c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10e      	bne.n	8003e20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_TIM_PWM_MspInit+0x40>)
 8003e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	58024400 	.word	0x58024400

08003e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <HAL_TIM_Base_MspInit+0x90>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10f      	bne.n	8003e66 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003e64:	e028      	b.n	8003eb8 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_TIM_Base_MspInit+0x98>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10f      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
}
 8003e8e:	e013      	b.n	8003eb8 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <HAL_TIM_Base_MspInit+0x9c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ea0:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003ea2:	f043 0320 	orr.w	r3, r3, #32
 8003ea6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_TIM_Base_MspInit+0x94>)
 8003eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40001400 	.word	0x40001400

08003ed4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <HAL_TIM_MspPostInit+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d120      	bne.n	8003f38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f06:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	482a      	ldr	r0, [pc, #168]	; (8003fdc <HAL_TIM_MspPostInit+0x108>)
 8003f32:	f005 f821 	bl	8008f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003f36:	e049      	b.n	8003fcc <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a28      	ldr	r2, [pc, #160]	; (8003fe0 <HAL_TIM_MspPostInit+0x10c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d11f      	bne.n	8003f82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f60:	2320      	movs	r3, #32
 8003f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f70:	2302      	movs	r3, #2
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481a      	ldr	r0, [pc, #104]	; (8003fe4 <HAL_TIM_MspPostInit+0x110>)
 8003f7c:	f004 fffc 	bl	8008f78 <HAL_GPIO_Init>
}
 8003f80:	e024      	b.n	8003fcc <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIM_MspPostInit+0x114>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d11f      	bne.n	8003fcc <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_TIM_MspPostInit+0x104>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003faa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <HAL_TIM_MspPostInit+0x110>)
 8003fc8:	f004 ffd6 	bl	8008f78 <HAL_GPIO_Init>
}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58020000 	.word	0x58020000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	58020400 	.word	0x58020400
 8003fe8:	40000800 	.word	0x40000800

08003fec <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <MX_USART6_UART_Init+0x90>)
 8003ff2:	4a23      	ldr	r2, [pc, #140]	; (8004080 <MX_USART6_UART_Init+0x94>)
 8003ff4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <MX_USART6_UART_Init+0x90>)
 8003ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ffc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <MX_USART6_UART_Init+0x90>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004012:	2204      	movs	r2, #4
 8004014:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004016:	4b19      	ldr	r3, [pc, #100]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <MX_USART6_UART_Init+0x90>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004028:	4b14      	ldr	r3, [pc, #80]	; (800407c <MX_USART6_UART_Init+0x90>)
 800402a:	2200      	movs	r2, #0
 800402c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004030:	2200      	movs	r2, #0
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004034:	4811      	ldr	r0, [pc, #68]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004036:	f00e fc7d 	bl	8012934 <HAL_UART_Init>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004040:	f7fe ffd0 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004044:	2100      	movs	r1, #0
 8004046:	480d      	ldr	r0, [pc, #52]	; (800407c <MX_USART6_UART_Init+0x90>)
 8004048:	f00f fc7f 	bl	801394a <HAL_UARTEx_SetTxFifoThreshold>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004052:	f7fe ffc7 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004056:	2100      	movs	r1, #0
 8004058:	4808      	ldr	r0, [pc, #32]	; (800407c <MX_USART6_UART_Init+0x90>)
 800405a:	f00f fcb4 	bl	80139c6 <HAL_UARTEx_SetRxFifoThreshold>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004064:	f7fe ffbe 	bl	8002fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004068:	4804      	ldr	r0, [pc, #16]	; (800407c <MX_USART6_UART_Init+0x90>)
 800406a:	f00f fc35 	bl	80138d8 <HAL_UARTEx_DisableFifoMode>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004074:	f7fe ffb6 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20001ca4 	.word	0x20001ca4
 8004080:	40011400 	.word	0x40011400

08004084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b0bc      	sub	sp, #240	; 0xf0
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800409c:	f107 0318 	add.w	r3, r7, #24
 80040a0:	22c0      	movs	r2, #192	; 0xc0
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f013 fa1d 	bl	80174e4 <memset>
  if(uartHandle->Instance==USART6)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a39      	ldr	r2, [pc, #228]	; (8004194 <HAL_UART_MspInit+0x110>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d16a      	bne.n	800418a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80040b4:	f04f 0201 	mov.w	r2, #1
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040c6:	f107 0318 	add.w	r3, r7, #24
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 faa6 	bl	800c61c <HAL_RCCEx_PeriphCLKConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040d6:	f7fe ff85 	bl	8002fe4 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80040da:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_UART_MspInit+0x114>)
 80040dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e0:	4a2d      	ldr	r2, [pc, #180]	; (8004198 <HAL_UART_MspInit+0x114>)
 80040e2:	f043 0320 	orr.w	r3, r3, #32
 80040e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040ea:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_UART_MspInit+0x114>)
 80040ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_UART_MspInit+0x114>)
 80040fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040fe:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_UART_MspInit+0x114>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004108:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_UART_MspInit+0x114>)
 800410a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_UART_MspInit+0x114>)
 8004118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800411c:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_UART_MspInit+0x114>)
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_UART_MspInit+0x114>)
 8004128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413a:	2302      	movs	r3, #2
 800413c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004146:	2300      	movs	r3, #0
 8004148:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800414c:	2307      	movs	r3, #7
 800414e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004152:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004156:	4619      	mov	r1, r3
 8004158:	4810      	ldr	r0, [pc, #64]	; (800419c <HAL_UART_MspInit+0x118>)
 800415a:	f004 ff0d 	bl	8008f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800415e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	2302      	movs	r3, #2
 8004168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004178:	2307      	movs	r3, #7
 800417a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800417e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004182:	4619      	mov	r1, r3
 8004184:	4806      	ldr	r0, [pc, #24]	; (80041a0 <HAL_UART_MspInit+0x11c>)
 8004186:	f004 fef7 	bl	8008f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800418a:	bf00      	nop
 800418c:	37f0      	adds	r7, #240	; 0xf0
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40011400 	.word	0x40011400
 8004198:	58024400 	.word	0x58024400
 800419c:	58020800 	.word	0x58020800
 80041a0:	58021800 	.word	0x58021800

080041a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80041a8:	2201      	movs	r2, #1
 80041aa:	490f      	ldr	r1, [pc, #60]	; (80041e8 <MX_USB_HOST_Init+0x44>)
 80041ac:	480f      	ldr	r0, [pc, #60]	; (80041ec <MX_USB_HOST_Init+0x48>)
 80041ae:	f011 fb73 	bl	8015898 <USBH_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80041b8:	f7fe ff14 	bl	8002fe4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 80041bc:	490c      	ldr	r1, [pc, #48]	; (80041f0 <MX_USB_HOST_Init+0x4c>)
 80041be:	480b      	ldr	r0, [pc, #44]	; (80041ec <MX_USB_HOST_Init+0x48>)
 80041c0:	f011 fc19 	bl	80159f6 <USBH_RegisterClass>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80041ca:	f7fe ff0b 	bl	8002fe4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80041ce:	4807      	ldr	r0, [pc, #28]	; (80041ec <MX_USB_HOST_Init+0x48>)
 80041d0:	f011 fc9e 	bl	8015b10 <USBH_Start>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80041da:	f7fe ff03 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80041de:	f007 fa27 	bl	800b630 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	30000460 	.word	0x30000460
 80041f0:	20000020 	.word	0x20000020

080041f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80041f8:	4803      	ldr	r0, [pc, #12]	; (8004208 <MX_USB_HOST_Process+0x14>)
 80041fa:	f011 fcb5 	bl	8015b68 <USBH_Process>
  MIDI_Application();
 80041fe:	f7fc ff4d 	bl	800109c <MIDI_Application>
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	30000460 	.word	0x30000460

0800420c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	3b01      	subs	r3, #1
 800421c:	2b04      	cmp	r3, #4
 800421e:	d839      	bhi.n	8004294 <USBH_UserProcess+0x88>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <USBH_UserProcess+0x1c>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004295 	.word	0x08004295
 800422c:	0800427f 	.word	0x0800427f
 8004230:	08004295 	.word	0x08004295
 8004234:	0800428d 	.word	0x0800428d
 8004238:	0800423d 	.word	0x0800423d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <USBH_UserProcess+0x94>)
 800423e:	2203      	movs	r2, #3
 8004240:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 8004242:	4818      	ldr	r0, [pc, #96]	; (80042a4 <USBH_UserProcess+0x98>)
 8004244:	f011 fc74 	bl	8015b30 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e007      	b.n	800425e <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <USBH_UserProcess+0x9c>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b3f      	cmp	r3, #63	; 0x3f
 8004262:	ddf4      	ble.n	800424e <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8004264:	2201      	movs	r2, #1
 8004266:	4911      	ldr	r1, [pc, #68]	; (80042ac <USBH_UserProcess+0xa0>)
 8004268:	480e      	ldr	r0, [pc, #56]	; (80042a4 <USBH_UserProcess+0x98>)
 800426a:	f011 fb15 	bl	8015898 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 800426e:	4910      	ldr	r1, [pc, #64]	; (80042b0 <USBH_UserProcess+0xa4>)
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <USBH_UserProcess+0x98>)
 8004272:	f011 fbc0 	bl	80159f6 <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 8004276:	480b      	ldr	r0, [pc, #44]	; (80042a4 <USBH_UserProcess+0x98>)
 8004278:	f011 fc4a 	bl	8015b10 <USBH_Start>
	break;
 800427c:	e00b      	b.n	8004296 <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <USBH_UserProcess+0x94>)
 8004280:	2202      	movs	r2, #2
 8004282:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <USBH_UserProcess+0xa8>)
 8004286:	2202      	movs	r2, #2
 8004288:	701a      	strb	r2, [r3, #0]
  break;
 800428a:	e004      	b.n	8004296 <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <USBH_UserProcess+0x94>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
  break;
 8004292:	e000      	b.n	8004296 <USBH_UserProcess+0x8a>

  default:
  break;
 8004294:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20001d38 	.word	0x20001d38
 80042a4:	30000460 	.word	0x30000460
 80042a8:	30000000 	.word	0x30000000
 80042ac:	0800420d 	.word	0x0800420d
 80042b0:	20000020 	.word	0x20000020
 80042b4:	20000000 	.word	0x20000000

080042b8 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80042b8:	b590      	push	{r4, r7, lr}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af04      	add	r7, sp, #16
 80042be:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 80042c0:	2302      	movs	r3, #2
 80042c2:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 80042c8:	23ff      	movs	r3, #255	; 0xff
 80042ca:	2203      	movs	r2, #3
 80042cc:	2101      	movs	r1, #1
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f011 fbd8 	bl	8015a84 <USBH_FindInterface>
 80042d4:	4603      	mov	r3, r0
 80042d6:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	2bff      	cmp	r3, #255	; 0xff
 80042dc:	d102      	bne.n	80042e4 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 80042de:	2302      	movs	r3, #2
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	e0f2      	b.n	80044ca <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f011 fbaf 	bl	8015a4c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80042f4:	201c      	movs	r0, #28
 80042f6:	f013 f839 	bl	801736c <malloc>
 80042fa:	4603      	mov	r3, r0
 80042fc:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800430e:	4619      	mov	r1, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	231a      	movs	r3, #26
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b25b      	sxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	da1c      	bge.n	8004360 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800432c:	4619      	mov	r1, r3
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	231a      	movs	r3, #26
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004348:	4619      	mov	r1, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	231a      	movs	r3, #26
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	811a      	strh	r2, [r3, #8]
 800435e:	e01b      	b.n	8004398 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004366:	4619      	mov	r1, r3
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	231a      	movs	r3, #26
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004376:	781a      	ldrb	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004382:	4619      	mov	r1, r3
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	231a      	movs	r3, #26
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800439e:	4619      	mov	r1, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	231a      	movs	r3, #26
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	da1c      	bge.n	80043f0 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80043bc:	4619      	mov	r1, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	231a      	movs	r3, #26
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80043d8:	4619      	mov	r1, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	231a      	movs	r3, #26
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	811a      	strh	r2, [r3, #8]
 80043ee:	e01b      	b.n	8004428 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80043f6:	4619      	mov	r1, r3
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	231a      	movs	r3, #26
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004412:	4619      	mov	r1, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	231a      	movs	r3, #26
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	78db      	ldrb	r3, [r3, #3]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f012 fed9 	bl	80171e6 <USBH_AllocPipe>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f012 fecf 	bl	80171e6 <USBH_AllocPipe>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	7899      	ldrb	r1, [r3, #2]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	78d8      	ldrb	r0, [r3, #3]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	88d2      	ldrh	r2, [r2, #6]
 8004468:	9202      	str	r2, [sp, #8]
 800446a:	2202      	movs	r2, #2
 800446c:	9201      	str	r2, [sp, #4]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4623      	mov	r3, r4
 8004472:	4602      	mov	r2, r0
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f012 fe87 	bl	8017188 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	7859      	ldrb	r1, [r3, #1]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	7918      	ldrb	r0, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	8912      	ldrh	r2, [r2, #8]
 8004492:	9202      	str	r2, [sp, #8]
 8004494:	2202      	movs	r2, #2
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4623      	mov	r3, r4
 800449c:	4602      	mov	r2, r0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f012 fe72 	bl	8017188 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2200      	movs	r2, #0
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fbf6 	bl	8004ca4 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	789b      	ldrb	r3, [r3, #2]
 80044bc:	2200      	movs	r2, #0
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fbef 	bl	8004ca4 <USBH_LL_SetToggle>
		status = USBH_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd90      	pop	{r4, r7, pc}

080044d4 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	789b      	ldrb	r3, [r3, #2]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	789b      	ldrb	r3, [r3, #2]
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f012 fe66 	bl	80171c6 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	789b      	ldrb	r3, [r3, #2]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f012 fe92 	bl	801722a <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	785b      	ldrb	r3, [r3, #1]
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f012 fe53 	bl	80171c6 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f012 fe7f 	bl	801722a <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4618      	mov	r0, r3
 8004548:	f012 ff18 	bl	801737c <free>
		phost->pActiveClass->pData = 0;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004552:	2200      	movs	r2, #0
 8004554:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800456e:	2102      	movs	r1, #2
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3

	return USBH_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d10e      	bne.n	80045b8 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f012 fe0d 	bl	80171c6 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f012 fe07 	bl	80171c6 <USBH_ClosePipe>
  }
  return USBH_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d012      	beq.n	800460a <USBH_MIDI_Process+0x48>
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	dc1d      	bgt.n	8004624 <USBH_MIDI_Process+0x62>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <USBH_MIDI_Process+0x30>
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d003      	beq.n	80045f8 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80045f0:	e018      	b.n	8004624 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
		break;
 80045f6:	e018      	b.n	800462a <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f851 	bl	80046a0 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8c0 	bl	8004784 <MIDI_ProcessReception>
		status = USBH_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]
		break;
 8004608:	e00f      	b.n	800462a <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 800460a:	2100      	movs	r1, #0
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f012 f837 	bl	8016680 <USBH_ClrFeature>
 8004612:	4603      	mov	r3, r0
 8004614:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8004616:	7bbb      	ldrb	r3, [r7, #14]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
		break;
 8004622:	e001      	b.n	8004628 <USBH_MIDI_Process+0x66>
		break;
 8004624:	bf00      	nop
 8004626:	e000      	b.n	800462a <USBH_MIDI_Process+0x68>
		break;
 8004628:	bf00      	nop

	}

	return status;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8004658:	2301      	movs	r3, #1
 800465a:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <USBH_MIDI_Receive+0x2c>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10d      	bne.n	8004692 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2203      	movs	r2, #3
 800468c:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	7e1b      	ldrb	r3, [r3, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d002      	beq.n	80046c4 <MIDI_ProcessTransmission+0x24>
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d021      	beq.n	8004706 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80046c2:	e05a      	b.n	800477a <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8a9a      	ldrh	r2, [r3, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88db      	ldrh	r3, [r3, #6]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d90b      	bls.n	80046e8 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68d9      	ldr	r1, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88da      	ldrh	r2, [r3, #6]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	789b      	ldrb	r3, [r3, #2]
 80046dc:	2001      	movs	r0, #1
 80046de:	9000      	str	r0, [sp, #0]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f012 fd0e 	bl	8017102 <USBH_BulkSendData>
 80046e6:	e00a      	b.n	80046fe <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68d9      	ldr	r1, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8a9a      	ldrh	r2, [r3, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	2001      	movs	r0, #1
 80046f6:	9000      	str	r0, [sp, #0]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f012 fd02 	bl	8017102 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2202      	movs	r2, #2
 8004702:	761a      	strb	r2, [r3, #24]
		break;
 8004704:	e039      	b.n	800477a <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	789b      	ldrb	r3, [r3, #2]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa9f 	bl	8004c50 <USBH_LL_GetURBState>
 8004712:	4603      	mov	r3, r0
 8004714:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004716:	7afb      	ldrb	r3, [r7, #11]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d127      	bne.n	800476c <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8a9a      	ldrh	r2, [r3, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	88db      	ldrh	r3, [r3, #6]
 8004724:	429a      	cmp	r2, r3
 8004726:	d90f      	bls.n	8004748 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8a9a      	ldrh	r2, [r3, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88db      	ldrh	r3, [r3, #6]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	88d2      	ldrh	r2, [r2, #6]
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	e002      	b.n	800474e <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8a9b      	ldrh	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	761a      	strb	r2, [r3, #24]
		break;
 800475c:	e00c      	b.n	8004778 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f86d 	bl	8004844 <USBH_MIDI_TransmitCallback>
		break;
 800476a:	e005      	b.n	8004778 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 800476c:	7afb      	ldrb	r3, [r7, #11]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d102      	bne.n	8004778 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	761a      	strb	r2, [r3, #24]
		break;
 8004778:	bf00      	nop
	}
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004796:	2300      	movs	r3, #0
 8004798:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	7e5b      	ldrb	r3, [r3, #25]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d002      	beq.n	80047a8 <MIDI_ProcessReception+0x24>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d00d      	beq.n	80047c2 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 80047a6:	e047      	b.n	8004838 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2204      	movs	r2, #4
 80047ac:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	6919      	ldr	r1, [r3, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	891a      	ldrh	r2, [r3, #8]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f012 fcc6 	bl	801714c <USBH_BulkReceiveData>
		break;
 80047c0:	e03a      	b.n	8004838 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa41 	bl	8004c50 <USBH_LL_GetURBState>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d12e      	bne.n	8004836 <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <MIDI_ProcessReception+0xbc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	785b      	ldrb	r3, [r3, #1]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f9a1 	bl	8004b2c <USBH_LL_GetLastXferSize>
 80047ea:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	8adb      	ldrh	r3, [r3, #22]
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d017      	beq.n	8004828 <MIDI_ProcessReception+0xa4>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	891b      	ldrh	r3, [r3, #8]
 80047fc:	461a      	mov	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4293      	cmp	r3, r2
 8004802:	d911      	bls.n	8004828 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	8ada      	ldrh	r2, [r3, #22]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	b29b      	uxth	r3, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	b29a      	uxth	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	441a      	add	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2203      	movs	r2, #3
 8004824:	765a      	strb	r2, [r3, #25]
		break;
 8004826:	e006      	b.n	8004836 <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2200      	movs	r2, #0
 800482c:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fc fdd3 	bl	80013dc <USBH_MIDI_ReceiveCallback>
		break;
 8004836:	bf00      	nop
	}
}
 8004838:	bf00      	nop
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20001d3c 	.word	0x20001d3c

08004844 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_HCD_MspInit+0xb8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d146      	bne.n	8004908 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487a:	4b26      	ldr	r3, [pc, #152]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 800487c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 800488c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004898:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800489c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489e:	2302      	movs	r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a6:	2303      	movs	r3, #3
 80048a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80048aa:	230a      	movs	r3, #10
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ae:	f107 0314 	add.w	r3, r7, #20
 80048b2:	4619      	mov	r1, r3
 80048b4:	4818      	ldr	r0, [pc, #96]	; (8004918 <HAL_HCD_MspInit+0xc0>)
 80048b6:	f004 fb5f 	bl	8008f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80048ba:	4b16      	ldr	r3, [pc, #88]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 80048bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 80048c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_HCD_MspInit+0xbc>)
 80048cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 80048d8:	2200      	movs	r2, #0
 80048da:	2106      	movs	r1, #6
 80048dc:	2062      	movs	r0, #98	; 0x62
 80048de:	f002 f9b6 	bl	8006c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80048e2:	2062      	movs	r0, #98	; 0x62
 80048e4:	f002 f9cd 	bl	8006c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 80048e8:	2200      	movs	r2, #0
 80048ea:	2106      	movs	r1, #6
 80048ec:	2063      	movs	r0, #99	; 0x63
 80048ee:	f002 f9ae 	bl	8006c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80048f2:	2063      	movs	r0, #99	; 0x63
 80048f4:	f002 f9c5 	bl	8006c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80048f8:	2200      	movs	r2, #0
 80048fa:	2100      	movs	r1, #0
 80048fc:	2065      	movs	r0, #101	; 0x65
 80048fe:	f002 f9a6 	bl	8006c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004902:	2065      	movs	r0, #101	; 0x65
 8004904:	f002 f9bd 	bl	8006c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004908:	bf00      	nop
 800490a:	3728      	adds	r7, #40	; 0x28
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40080000 	.word	0x40080000
 8004914:	58024400 	.word	0x58024400
 8004918:	58020000 	.word	0x58020000

0800491c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800492a:	4618      	mov	r0, r3
 800492c:	f011 fcfd 	bl	801632a <USBH_LL_IncTimer>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004946:	4618      	mov	r0, r3
 8004948:	f011 fd35 	bl	80163b6 <USBH_LL_Connect>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004962:	4618      	mov	r0, r3
 8004964:	f011 fd3e 	bl	80163e4 <USBH_LL_Disconnect>
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
 800497c:	4613      	mov	r3, r2
 800497e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800499a:	4618      	mov	r0, r3
 800499c:	f011 fcef 	bl	801637e <USBH_LL_PortEnabled>
} 
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80049b6:	4618      	mov	r0, r3
 80049b8:	f011 fcef 	bl	801639a <USBH_LL_PortDisabled>
} 
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d129      	bne.n	8004a2a <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80049d6:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <USBH_LL_Init+0x70>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <USBH_LL_Init+0x70>)
 80049e2:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <USBH_LL_Init+0x70>)
 80049e8:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <USBH_LL_Init+0x74>)
 80049ea:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <USBH_LL_Init+0x70>)
 80049ee:	2210      	movs	r2, #16
 80049f0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <USBH_LL_Init+0x70>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <USBH_LL_Init+0x70>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <USBH_LL_Init+0x70>)
 8004a00:	2202      	movs	r2, #2
 8004a02:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <USBH_LL_Init+0x70>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004a0a:	480a      	ldr	r0, [pc, #40]	; (8004a34 <USBH_LL_Init+0x70>)
 8004a0c:	f004 fc95 	bl	800933a <HAL_HCD_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004a16:	f7fe fae5 	bl	8002fe4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004a1a:	4806      	ldr	r0, [pc, #24]	; (8004a34 <USBH_LL_Init+0x70>)
 8004a1c:	f005 f87d 	bl	8009b1a <HAL_HCD_GetCurrentFrame>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f011 fc71 	bl	801630c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20001d40 	.word	0x20001d40
 8004a38:	40080000 	.word	0x40080000

08004a3c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 ffeb 	bl	8009a2e <HAL_HCD_Start>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f95c 	bl	8004d1c <USBH_Get_USB_Status>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f004 fff3 	bl	8009a74 <HAL_HCD_Stop>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f941 	bl	8004d1c <USBH_Get_USB_Status>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f005 f83b 	bl	8009b36 <HAL_HCD_GetCurrentSpeed>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d00c      	beq.n	8004ae0 <USBH_LL_GetSpeed+0x38>
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d80d      	bhi.n	8004ae6 <USBH_LL_GetSpeed+0x3e>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <USBH_LL_GetSpeed+0x2c>
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d003      	beq.n	8004ada <USBH_LL_GetSpeed+0x32>
 8004ad2:	e008      	b.n	8004ae6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ad8:	e008      	b.n	8004aec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
    break;
 8004ade:	e005      	b.n	8004aec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ae4:	e002      	b.n	8004aec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8004aea:	bf00      	nop
  }
  return  speed;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f004 ffce 	bl	8009aae <HAL_HCD_ResetPort>
 8004b12:	4603      	mov	r3, r0
 8004b14:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f8ff 	bl	8004d1c <USBH_Get_USB_Status>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 ffd5 	bl	8009af2 <HAL_HCD_HC_GetXferCount>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b52:	b590      	push	{r4, r7, lr}
 8004b54:	b089      	sub	sp, #36	; 0x24
 8004b56:	af04      	add	r7, sp, #16
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	70fb      	strb	r3, [r7, #3]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70bb      	strb	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004b7a:	787c      	ldrb	r4, [r7, #1]
 8004b7c:	78ba      	ldrb	r2, [r7, #2]
 8004b7e:	78f9      	ldrb	r1, [r7, #3]
 8004b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4623      	mov	r3, r4
 8004b92:	f004 fc34 	bl	80093fe <HAL_HCD_HC_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f8bd 	bl	8004d1c <USBH_Get_USB_Status>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd90      	pop	{r4, r7, pc}

08004bb0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f004 fca4 	bl	800951c <HAL_HCD_HC_Halt>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f89e 	bl	8004d1c <USBH_Get_USB_Status>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004bee:	b590      	push	{r4, r7, lr}
 8004bf0:	b089      	sub	sp, #36	; 0x24
 8004bf2:	af04      	add	r7, sp, #16
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	70fb      	strb	r3, [r7, #3]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70bb      	strb	r3, [r7, #2]
 8004c04:	4613      	mov	r3, r2
 8004c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004c16:	787c      	ldrb	r4, [r7, #1]
 8004c18:	78ba      	ldrb	r2, [r7, #2]
 8004c1a:	78f9      	ldrb	r1, [r7, #3]
 8004c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c20:	9303      	str	r3, [sp, #12]
 8004c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c24:	9302      	str	r3, [sp, #8]
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4623      	mov	r3, r4
 8004c32:	f004 fc97 	bl	8009564 <HAL_HCD_HC_SubmitRequest>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f86d 	bl	8004d1c <USBH_Get_USB_Status>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}

08004c50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f004 ff2f 	bl	8009aca <HAL_HCD_HC_GetURBState>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d103      	bne.n	8004c94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f870 	bl	8004d74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004c94:	20c8      	movs	r0, #200	; 0xc8
 8004c96:	f000 f945 	bl	8004f24 <HAL_Delay>
  return USBH_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004cba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	212c      	movs	r1, #44	; 0x2c
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	333b      	adds	r3, #59	; 0x3b
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	212c      	movs	r1, #44	; 0x2c
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	3354      	adds	r3, #84	; 0x54
 8004cde:	78ba      	ldrb	r2, [r7, #2]
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e008      	b.n	8004cf6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3355      	adds	r3, #85	; 0x55
 8004cf2:	78ba      	ldrb	r2, [r7, #2]
 8004cf4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f909 	bl	8004f24 <HAL_Delay>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d817      	bhi.n	8004d60 <USBH_Get_USB_Status+0x44>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <USBH_Get_USB_Status+0x1c>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d4f 	.word	0x08004d4f
 8004d40:	08004d55 	.word	0x08004d55
 8004d44:	08004d5b 	.word	0x08004d5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8004d4c:	e00b      	b.n	8004d66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	73fb      	strb	r3, [r7, #15]
    break;
 8004d52:	e008      	b.n	8004d66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
    break;
 8004d58:	e005      	b.n	8004d66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8004d5e:	e002      	b.n	8004d66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004d60:	2302      	movs	r3, #2
 8004d62:	73fb      	strb	r3, [r7, #15]
    break;
 8004d64:	bf00      	nop
  }
  return usb_status;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e001      	b.n	8004d92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d9a:	4803      	ldr	r0, [pc, #12]	; (8004da8 <MX_DriverVbusFS+0x34>)
 8004d9c:	f004 fab4 	bl	8009308 <HAL_GPIO_WritePin>
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	58020400 	.word	0x58020400

08004dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004de4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004db2:	e003      	b.n	8004dbc <LoopCopyDataInit>

08004db4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dba:	3104      	adds	r1, #4

08004dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004dc4:	d3f6      	bcc.n	8004db4 <CopyDataInit>
  ldr  r2, =_sbss
 8004dc6:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004dc8:	e002      	b.n	8004dd0 <LoopFillZerobss>

08004dca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004dcc:	f842 3b04 	str.w	r3, [r2], #4

08004dd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dd4:	d3f9      	bcc.n	8004dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004dd6:	f7fe fddd 	bl	8003994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dda:	f012 fba1 	bl	8017520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dde:	f7fd fe7f 	bl	8002ae0 <main>
  bx  lr    
 8004de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004de4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004de8:	08019548 	.word	0x08019548
  ldr  r0, =_sdata
 8004dec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004df0:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8004df4:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8004df8:	2000219c 	.word	0x2000219c

08004dfc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dfc:	e7fe      	b.n	8004dfc <ADC3_IRQHandler>
	...

08004e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e06:	2003      	movs	r0, #3
 8004e08:	f001 ff16 	bl	8006c38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e0c:	f007 fa30 	bl	800c270 <HAL_RCC_GetSysClockFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_Init+0x68>)
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	4913      	ldr	r1, [pc, #76]	; (8004e6c <HAL_Init+0x6c>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_Init+0x68>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_Init+0x6c>)
 8004e34:	5cd3      	ldrb	r3, [r2, r3]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e40:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <HAL_Init+0x70>)
 8004e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e44:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <HAL_Init+0x74>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f000 f814 	bl	8004e78 <HAL_InitTick>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e002      	b.n	8004e60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004e5a:	f7fe fce1 	bl	8003820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	08017c3c 	.word	0x08017c3c
 8004e70:	2000001c 	.word	0x2000001c
 8004e74:	20000018 	.word	0x20000018

08004e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004e80:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <HAL_InitTick+0x60>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e021      	b.n	8004ed0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <HAL_InitTick+0x64>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_InitTick+0x60>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
 8004e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fefb 	bl	8006c9e <HAL_SYSTICK_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e00e      	b.n	8004ed0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d80a      	bhi.n	8004ece <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec0:	f001 fec5 	bl	8006c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ec4:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <HAL_InitTick+0x68>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000044 	.word	0x20000044
 8004edc:	20000018 	.word	0x20000018
 8004ee0:	20000040 	.word	0x20000040

08004ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <HAL_IncTick+0x20>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_IncTick+0x24>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_IncTick+0x24>)
 8004ef6:	6013      	str	r3, [r2, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000044 	.word	0x20000044
 8004f08:	20002044 	.word	0x20002044

08004f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_GetTick+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20002044 	.word	0x20002044

08004f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f2c:	f7ff ffee 	bl	8004f0c <HAL_GetTick>
 8004f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d005      	beq.n	8004f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_Delay+0x44>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f4a:	bf00      	nop
 8004f4c:	f7ff ffde 	bl	8004f0c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d8f7      	bhi.n	8004f4c <HAL_Delay+0x28>
  {
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000044 	.word	0x20000044

08004f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_GetREVID+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	0c1b      	lsrs	r3, r3, #16
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	5c001000 	.word	0x5c001000

08004f84 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f94:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	52004000 	.word	0x52004000

08004fac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3360      	adds	r3, #96	; 0x60
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	431a      	orrs	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	611a      	str	r2, [r3, #16]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3360      	adds	r3, #96	; 0x60
 8005096:	461a      	mov	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	601a      	str	r2, [r3, #0]
  }
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3330      	adds	r3, #48	; 0x30
 80050f2:	461a      	mov	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	4413      	add	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	211f      	movs	r1, #31
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	401a      	ands	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0e9b      	lsrs	r3, r3, #26
 800511a:	f003 011f 	and.w	r1, r3, #31
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	431a      	orrs	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	60da      	str	r2, [r3, #12]
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005186:	b480      	push	{r7}
 8005188:	b087      	sub	sp, #28
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3314      	adds	r3, #20
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	0e5b      	lsrs	r3, r3, #25
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	4413      	add	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	0d1b      	lsrs	r3, r3, #20
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2107      	movs	r1, #7
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	0d1b      	lsrs	r3, r3, #20
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	431a      	orrs	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80051d0:	bf00      	nop
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f4:	43db      	mvns	r3, r3
 80051f6:	401a      	ands	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0318 	and.w	r3, r3, #24
 80051fe:	4908      	ldr	r1, [pc, #32]	; (8005220 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005200:	40d9      	lsrs	r1, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	400b      	ands	r3, r1
 8005206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800520a:	431a      	orrs	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	000fffff 	.word	0x000fffff

08005224 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 031f 	and.w	r3, r3, #31
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <LL_ADC_DisableDeepPowerDown+0x20>)
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6093      	str	r3, [r2, #8]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	5fffffc0 	.word	0x5fffffc0

08005280 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005294:	d101      	bne.n	800529a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <LL_ADC_EnableInternalRegulator+0x24>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	6fffffc0 	.word	0x6fffffc0

080052d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e4:	d101      	bne.n	80052ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <LL_ADC_Enable+0x24>)
 8005306:	4013      	ands	r3, r2
 8005308:	f043 0201 	orr.w	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	7fffffc0 	.word	0x7fffffc0

08005320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <LL_ADC_IsEnabled+0x18>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <LL_ADC_IsEnabled+0x1a>
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <LL_ADC_REG_StartConversion+0x24>)
 8005356:	4013      	ands	r3, r2
 8005358:	f043 0204 	orr.w	r2, r3, #4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	7fffffc0 	.word	0x7fffffc0

08005370 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d101      	bne.n	8005388 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d101      	bne.n	80053ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e18f      	b.n	80056f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fc f9c9 	bl	800177c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff3f 	bl	8005280 <LL_ADC_IsDeepPowerDownEnabled>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff25 	bl	800525c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff5a 	bl	80052d0 <LL_ADC_IsInternalRegulatorEnabled>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d114      	bne.n	800544c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff ff3e 	bl	80052a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800542c:	4b87      	ldr	r3, [pc, #540]	; (800564c <HAL_ADC_Init+0x290>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	099b      	lsrs	r3, r3, #6
 8005432:	4a87      	ldr	r2, [pc, #540]	; (8005650 <HAL_ADC_Init+0x294>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	3301      	adds	r3, #1
 800543c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800543e:	e002      	b.n	8005446 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f9      	bne.n	8005440 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff ff3d 	bl	80052d0 <LL_ADC_IsInternalRegulatorEnabled>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	f043 0210 	orr.w	r2, r3, #16
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff77 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 8005482:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8129 	bne.w	80056e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 8125 	bne.w	80056e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054a2:	f043 0202 	orr.w	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff36 	bl	8005320 <LL_ADC_IsEnabled>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d136      	bne.n	8005528 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_ADC_Init+0x298>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_ADC_Init+0x112>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a63      	ldr	r2, [pc, #396]	; (8005658 <HAL_ADC_Init+0x29c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10e      	bne.n	80054ec <HAL_ADC_Init+0x130>
 80054ce:	4861      	ldr	r0, [pc, #388]	; (8005654 <HAL_ADC_Init+0x298>)
 80054d0:	f7ff ff26 	bl	8005320 <LL_ADC_IsEnabled>
 80054d4:	4604      	mov	r4, r0
 80054d6:	4860      	ldr	r0, [pc, #384]	; (8005658 <HAL_ADC_Init+0x29c>)
 80054d8:	f7ff ff22 	bl	8005320 <LL_ADC_IsEnabled>
 80054dc:	4603      	mov	r3, r0
 80054de:	4323      	orrs	r3, r4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e008      	b.n	80054fe <HAL_ADC_Init+0x142>
 80054ec:	485b      	ldr	r0, [pc, #364]	; (800565c <HAL_ADC_Init+0x2a0>)
 80054ee:	f7ff ff17 	bl	8005320 <LL_ADC_IsEnabled>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d012      	beq.n	8005528 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a53      	ldr	r2, [pc, #332]	; (8005654 <HAL_ADC_Init+0x298>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_ADC_Init+0x15a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a51      	ldr	r2, [pc, #324]	; (8005658 <HAL_ADC_Init+0x29c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_ADC_Init+0x15e>
 8005516:	4a52      	ldr	r2, [pc, #328]	; (8005660 <HAL_ADC_Init+0x2a4>)
 8005518:	e000      	b.n	800551c <HAL_ADC_Init+0x160>
 800551a:	4a52      	ldr	r2, [pc, #328]	; (8005664 <HAL_ADC_Init+0x2a8>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7ff fd42 	bl	8004fac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005528:	f7ff fd20 	bl	8004f6c <HAL_GetREVID>
 800552c:	4603      	mov	r3, r0
 800552e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005532:	4293      	cmp	r3, r2
 8005534:	d914      	bls.n	8005560 <HAL_ADC_Init+0x1a4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b10      	cmp	r3, #16
 800553c:	d110      	bne.n	8005560 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7d5b      	ldrb	r3, [r3, #21]
 8005542:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005548:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800554e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	7f1b      	ldrb	r3, [r3, #28]
 8005554:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005556:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005558:	f043 030c 	orr.w	r3, r3, #12
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e00d      	b.n	800557c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7d5b      	ldrb	r3, [r3, #21]
 8005564:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800556a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005570:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7f1b      	ldrb	r3, [r3, #28]
 8005576:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7f1b      	ldrb	r3, [r3, #28]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	3b01      	subs	r3, #1
 800558a:	045b      	lsls	r3, r3, #17
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <HAL_ADC_Init+0x2ac>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	430b      	orrs	r3, r1
 80055c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fed2 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 80055cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fedf 	bl	8005396 <LL_ADC_INJ_IsConversionOngoing>
 80055d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d15f      	bne.n	80056a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d15c      	bne.n	80056a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7d1b      	ldrb	r3, [r3, #20]
 80055ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	4b1c      	ldr	r3, [pc, #112]	; (800566c <HAL_ADC_Init+0x2b0>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	69b9      	ldr	r1, [r7, #24]
 8005604:	430b      	orrs	r3, r1
 8005606:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800560e:	2b01      	cmp	r3, #1
 8005610:	d130      	bne.n	8005674 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_ADC_Init+0x2b4>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005626:	3a01      	subs	r2, #1
 8005628:	0411      	lsls	r1, r2, #16
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800562e:	4311      	orrs	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800563a:	430a      	orrs	r2, r1
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	611a      	str	r2, [r3, #16]
 8005648:	e01c      	b.n	8005684 <HAL_ADC_Init+0x2c8>
 800564a:	bf00      	nop
 800564c:	20000018 	.word	0x20000018
 8005650:	053e2d63 	.word	0x053e2d63
 8005654:	40022000 	.word	0x40022000
 8005658:	40022100 	.word	0x40022100
 800565c:	58026000 	.word	0x58026000
 8005660:	40022300 	.word	0x40022300
 8005664:	58026300 	.word	0x58026300
 8005668:	fff0c003 	.word	0xfff0c003
 800566c:	ffffbffc 	.word	0xffffbffc
 8005670:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 ffba 	bl	8006614 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10c      	bne.n	80056c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	f023 010f 	bic.w	r1, r3, #15
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	1e5a      	subs	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
 80056c0:	e007      	b.n	80056d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 020f 	bic.w	r2, r2, #15
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0201 	orr.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
 80056e2:	e007      	b.n	80056f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f043 0210 	orr.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	; 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	bf00      	nop

08005700 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a55      	ldr	r2, [pc, #340]	; (8005868 <HAL_ADC_Start_DMA+0x168>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_ADC_Start_DMA+0x20>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a54      	ldr	r2, [pc, #336]	; (800586c <HAL_ADC_Start_DMA+0x16c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d101      	bne.n	8005724 <HAL_ADC_Start_DMA+0x24>
 8005720:	4b53      	ldr	r3, [pc, #332]	; (8005870 <HAL_ADC_Start_DMA+0x170>)
 8005722:	e000      	b.n	8005726 <HAL_ADC_Start_DMA+0x26>
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_ADC_Start_DMA+0x174>)
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fd7c 	bl	8005224 <LL_ADC_GetMultimode>
 800572c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fe1c 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 808c 	bne.w	8005858 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_ADC_Start_DMA+0x4e>
 800574a:	2302      	movs	r3, #2
 800574c:	e087      	b.n	800585e <HAL_ADC_Start_DMA+0x15e>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b05      	cmp	r3, #5
 8005760:	d002      	beq.n	8005768 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b09      	cmp	r3, #9
 8005766:	d170      	bne.n	800584a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fe35 	bl	80063d8 <ADC_Enable>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d163      	bne.n	8005840 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <HAL_ADC_Start_DMA+0x178>)
 800577e:	4013      	ands	r3, r2
 8005780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a37      	ldr	r2, [pc, #220]	; (800586c <HAL_ADC_Start_DMA+0x16c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d002      	beq.n	8005798 <HAL_ADC_Start_DMA+0x98>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	e000      	b.n	800579a <HAL_ADC_Start_DMA+0x9a>
 8005798:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_ADC_Start_DMA+0x168>)
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	4293      	cmp	r3, r2
 80057a0:	d002      	beq.n	80057a8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	f023 0206 	bic.w	r2, r3, #6
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	659a      	str	r2, [r3, #88]	; 0x58
 80057cc:	e002      	b.n	80057d4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <HAL_ADC_Start_DMA+0x17c>)
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_ADC_Start_DMA+0x180>)
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <HAL_ADC_Start_DMA+0x184>)
 80057ea:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	221c      	movs	r2, #28
 80057f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0210 	orr.w	r2, r2, #16
 800580a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7ff fc8f 	bl	800513a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3340      	adds	r3, #64	; 0x40
 8005826:	4619      	mov	r1, r3
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f001 fe1c 	bl	8007468 <HAL_DMA_Start_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fd85 	bl	8005348 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800583e:	e00d      	b.n	800585c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005848:	e008      	b.n	800585c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005856:	e001      	b.n	800585c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005858:	2302      	movs	r3, #2
 800585a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40022000 	.word	0x40022000
 800586c:	40022100 	.word	0x40022100
 8005870:	40022300 	.word	0x40022300
 8005874:	58026300 	.word	0x58026300
 8005878:	fffff0fe 	.word	0xfffff0fe
 800587c:	080064ed 	.word	0x080064ed
 8005880:	080065c5 	.word	0x080065c5
 8005884:	080065e1 	.word	0x080065e1

08005888 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005890:	2300      	movs	r3, #0
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a87      	ldr	r2, [pc, #540]	; (8005ac8 <HAL_ADC_IRQHandler+0x240>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_ADC_IRQHandler+0x30>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a86      	ldr	r2, [pc, #536]	; (8005acc <HAL_ADC_IRQHandler+0x244>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_IRQHandler+0x34>
 80058b8:	4b85      	ldr	r3, [pc, #532]	; (8005ad0 <HAL_ADC_IRQHandler+0x248>)
 80058ba:	e000      	b.n	80058be <HAL_ADC_IRQHandler+0x36>
 80058bc:	4b85      	ldr	r3, [pc, #532]	; (8005ad4 <HAL_ADC_IRQHandler+0x24c>)
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fcb0 	bl	8005224 <LL_ADC_GetMultimode>
 80058c4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <HAL_ADC_IRQHandler+0x78>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d012      	beq.n	8005900 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 ffe8 	bl	80068c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2202      	movs	r2, #2
 80058fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_ADC_IRQHandler+0x8c>
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8083 	beq.w	8005a26 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d07d      	beq.n	8005a26 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fbb8 	bl	80050bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d062      	beq.n	8005a18 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5d      	ldr	r2, [pc, #372]	; (8005acc <HAL_ADC_IRQHandler+0x244>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d002      	beq.n	8005962 <HAL_ADC_IRQHandler+0xda>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_ADC_IRQHandler+0xdc>
 8005962:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_ADC_IRQHandler+0x240>)
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	4293      	cmp	r3, r2
 800596a:	d008      	beq.n	800597e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d002      	beq.n	800597e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b09      	cmp	r3, #9
 800597c:	d104      	bne.n	8005988 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	e00c      	b.n	80059a2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a4f      	ldr	r2, [pc, #316]	; (8005acc <HAL_ADC_IRQHandler+0x244>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d002      	beq.n	8005998 <HAL_ADC_IRQHandler+0x110>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	e000      	b.n	800599a <HAL_ADC_IRQHandler+0x112>
 8005998:	4b4b      	ldr	r3, [pc, #300]	; (8005ac8 <HAL_ADC_IRQHandler+0x240>)
 800599a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d135      	bne.n	8005a18 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d12e      	bne.n	8005a18 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fcd6 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11a      	bne.n	8005a00 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 020c 	bic.w	r2, r2, #12
 80059d8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d112      	bne.n	8005a18 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
 80059fe:	e00b      	b.n	8005a18 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	f043 0210 	orr.w	r2, r3, #16
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	f043 0201 	orr.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fd fa13 	bl	8002e44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	220c      	movs	r2, #12
 8005a24:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <HAL_ADC_IRQHandler+0x1b2>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80a0 	beq.w	8005b86 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 809a 	beq.w	8005b86 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fb76 	bl	8005160 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005a74:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fb1e 	bl	80050bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a80:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <HAL_ADC_IRQHandler+0x244>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d002      	beq.n	8005a92 <HAL_ADC_IRQHandler+0x20a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	e000      	b.n	8005a94 <HAL_ADC_IRQHandler+0x20c>
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <HAL_ADC_IRQHandler+0x240>)
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d008      	beq.n	8005aae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b06      	cmp	r3, #6
 8005aa6:	d002      	beq.n	8005aae <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	d104      	bne.n	8005ab8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	e014      	b.n	8005ae2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a03      	ldr	r2, [pc, #12]	; (8005acc <HAL_ADC_IRQHandler+0x244>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_ADC_IRQHandler+0x250>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	e008      	b.n	8005ada <HAL_ADC_IRQHandler+0x252>
 8005ac8:	40022000 	.word	0x40022000
 8005acc:	40022100 	.word	0x40022100
 8005ad0:	40022300 	.word	0x40022300
 8005ad4:	58026300 	.word	0x58026300
 8005ad8:	4b84      	ldr	r3, [pc, #528]	; (8005cec <HAL_ADC_IRQHandler+0x464>)
 8005ada:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d047      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_ADC_IRQHandler+0x27a>
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d03f      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13a      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d133      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d12e      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fc39 	bl	8005396 <LL_ADC_INJ_IsConversionOngoing>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11a      	bne.n	8005b60 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d112      	bne.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
 8005b5e:	e00b      	b.n	8005b78 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	f043 0210 	orr.w	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fe7d 	bl	8006878 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2260      	movs	r2, #96	; 0x60
 8005b84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d011      	beq.n	8005bb4 <HAL_ADC_IRQHandler+0x32c>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8b2 	bl	8005d10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2280      	movs	r2, #128	; 0x80
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x35c>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fe63 	bl	80068a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d012      	beq.n	8005c14 <HAL_ADC_IRQHandler+0x38c>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fe55 	bl	80068b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d043      	beq.n	8005ca6 <HAL_ADC_IRQHandler+0x41e>
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d03e      	beq.n	8005ca6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005c30:	2301      	movs	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	e021      	b.n	8005c7a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d015      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	; (8005cec <HAL_ADC_IRQHandler+0x464>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_ADC_IRQHandler+0x3c8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a29      	ldr	r2, [pc, #164]	; (8005cf0 <HAL_ADC_IRQHandler+0x468>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <HAL_ADC_IRQHandler+0x3cc>
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_ADC_IRQHandler+0x46c>)
 8005c52:	e000      	b.n	8005c56 <HAL_ADC_IRQHandler+0x3ce>
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <HAL_ADC_IRQHandler+0x470>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff faf2 	bl	8005240 <LL_ADC_GetMultiDMATransfer>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005c62:	2301      	movs	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	e008      	b.n	8005c7a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005c76:	2301      	movs	r3, #1
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10e      	bne.n	8005c9e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c90:	f043 0202 	orr.w	r2, r3, #2
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f843 	bl	8005d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d018      	beq.n	8005ce2 <HAL_ADC_IRQHandler+0x45a>
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d013      	beq.n	8005ce2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cca:	f043 0208 	orr.w	r2, r3, #8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cda:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fdd5 	bl	800688c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005ce2:	bf00      	nop
 8005ce4:	3728      	adds	r7, #40	; 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40022000 	.word	0x40022000
 8005cf0:	40022100 	.word	0x40022100
 8005cf4:	40022300 	.word	0x40022300
 8005cf8:	58026300 	.word	0x58026300

08005cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b0a1      	sub	sp, #132	; 0x84
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a9d      	ldr	r2, [pc, #628]	; (8005fc8 <HAL_ADC_ConfigChannel+0x290>)
 8005d52:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_ADC_ConfigChannel+0x2a>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e321      	b.n	80063a6 <HAL_ADC_ConfigChannel+0x66e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fafe 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8306 	bne.w	8006388 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x62>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0e9b      	lsrs	r3, r3, #26
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	2201      	movs	r2, #1
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	e016      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x90>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da2:	fa93 f3a3 	rbit	r3, r3
 8005da6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005daa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005db2:	2320      	movs	r3, #32
 8005db4:	e003      	b.n	8005dbe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005db8:	fab3 f383 	clz	r3, r3
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	69d1      	ldr	r1, [r2, #28]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7ff f97d 	bl	80050e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fabf 	bl	8005370 <LL_ADC_REG_IsConversionOngoing>
 8005df2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff facc 	bl	8005396 <LL_ADC_INJ_IsConversionOngoing>
 8005dfe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 80b3 	bne.w	8005f6e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 80af 	bne.w	8005f6e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f7ff f9b2 	bl	8005186 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e22:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_ADC_ConfigChannel+0x294>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e2e:	d10b      	bne.n	8005e48 <HAL_ADC_ConfigChannel+0x110>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	e01d      	b.n	8005e84 <HAL_ADC_ConfigChannel+0x14c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x136>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	e00a      	b.n	8005e84 <HAL_ADC_ConfigChannel+0x14c>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d027      	beq.n	8005ede <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e9c:	f7ff f8ba 	bl	8005014 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6919      	ldr	r1, [r3, #16]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	7e5b      	ldrb	r3, [r3, #25]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d102      	bne.n	8005eb6 <HAL_ADC_ConfigChannel+0x17e>
 8005eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005eb4:	e000      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x180>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f7ff f8e4 	bl	8005086 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6919      	ldr	r1, [r3, #16]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	7e1b      	ldrb	r3, [r3, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d102      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x19c>
 8005ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ed2:	e000      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x19e>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f7ff f8bc 	bl	8005054 <LL_ADC_SetDataRightShift>
 8005edc:	e047      	b.n	8005f6e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	069b      	lsls	r3, r3, #26
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d107      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f00:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	069b      	lsls	r3, r3, #26
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d107      	bne.n	8005f26 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f24:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	069b      	lsls	r3, r3, #26
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d107      	bne.n	8005f4a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f48:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	069b      	lsls	r3, r3, #26
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d107      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff f9d4 	bl	8005320 <LL_ADC_IsEnabled>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 820d 	bne.w	800639a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f7ff f925 	bl	80051dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <HAL_ADC_ConfigChannel+0x290>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	f040 8133 	bne.w	8006204 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d110      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x298>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	0e9b      	lsrs	r3, r3, #26
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	bf94      	ite	ls
 8005fbe:	2301      	movls	r3, #1
 8005fc0:	2300      	movhi	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e01e      	b.n	8006004 <HAL_ADC_ConfigChannel+0x2cc>
 8005fc6:	bf00      	nop
 8005fc8:	47ff0000 	.word	0x47ff0000
 8005fcc:	5c001000 	.word	0x5c001000
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fd8:	fa93 f3a3 	rbit	r3, r3
 8005fdc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005fe8:	2320      	movs	r3, #32
 8005fea:	e003      	b.n	8005ff4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fee:	fab3 f383 	clz	r3, r3
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	bf94      	ite	ls
 8005ffe:	2301      	movls	r3, #1
 8006000:	2300      	movhi	r3, #0
 8006002:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006004:	2b00      	cmp	r3, #0
 8006006:	d079      	beq.n	80060fc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x2ec>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	0e9b      	lsrs	r3, r3, #26
 800601a:	3301      	adds	r3, #1
 800601c:	069b      	lsls	r3, r3, #26
 800601e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006022:	e015      	b.n	8006050 <HAL_ADC_ConfigChannel+0x318>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602c:	fa93 f3a3 	rbit	r3, r3
 8006030:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006034:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800603c:	2320      	movs	r3, #32
 800603e:	e003      	b.n	8006048 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006042:	fab3 f383 	clz	r3, r3
 8006046:	b2db      	uxtb	r3, r3
 8006048:	3301      	adds	r3, #1
 800604a:	069b      	lsls	r3, r3, #26
 800604c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <HAL_ADC_ConfigChannel+0x338>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	0e9b      	lsrs	r3, r3, #26
 8006062:	3301      	adds	r3, #1
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2101      	movs	r1, #1
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	e017      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x368>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006078:	fa93 f3a3 	rbit	r3, r3
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006088:	2320      	movs	r3, #32
 800608a:	e003      	b.n	8006094 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800608c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608e:	fab3 f383 	clz	r3, r3
 8006092:	b2db      	uxtb	r3, r3
 8006094:	3301      	adds	r3, #1
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	ea42 0103 	orr.w	r1, r2, r3
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x38e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	0e9b      	lsrs	r3, r3, #26
 80060b6:	3301      	adds	r3, #1
 80060b8:	f003 021f 	and.w	r2, r3, #31
 80060bc:	4613      	mov	r3, r2
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	4413      	add	r3, r2
 80060c2:	051b      	lsls	r3, r3, #20
 80060c4:	e018      	b.n	80060f8 <HAL_ADC_ConfigChannel+0x3c0>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	fa93 f3a3 	rbit	r3, r3
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80060de:	2320      	movs	r3, #32
 80060e0:	e003      	b.n	80060ea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	fab3 f383 	clz	r3, r3
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	3301      	adds	r3, #1
 80060ec:	f003 021f 	and.w	r2, r3, #31
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060f8:	430b      	orrs	r3, r1
 80060fa:	e07e      	b.n	80061fa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <HAL_ADC_ConfigChannel+0x3e0>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0e9b      	lsrs	r3, r3, #26
 800610e:	3301      	adds	r3, #1
 8006110:	069b      	lsls	r3, r3, #26
 8006112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006116:	e015      	b.n	8006144 <HAL_ADC_ConfigChannel+0x40c>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	fa93 f3a3 	rbit	r3, r3
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006130:	2320      	movs	r3, #32
 8006132:	e003      	b.n	800613c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	fab3 f383 	clz	r3, r3
 800613a:	b2db      	uxtb	r3, r3
 800613c:	3301      	adds	r3, #1
 800613e:	069b      	lsls	r3, r3, #26
 8006140:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x42c>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	0e9b      	lsrs	r3, r3, #26
 8006156:	3301      	adds	r3, #1
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	2101      	movs	r1, #1
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	e017      	b.n	8006194 <HAL_ADC_ConfigChannel+0x45c>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	fa93 f3a3 	rbit	r3, r3
 8006170:	61bb      	str	r3, [r7, #24]
  return result;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	e003      	b.n	8006188 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	fab3 f383 	clz	r3, r3
 8006186:	b2db      	uxtb	r3, r3
 8006188:	3301      	adds	r3, #1
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2101      	movs	r1, #1
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	ea42 0103 	orr.w	r1, r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <HAL_ADC_ConfigChannel+0x488>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	0e9b      	lsrs	r3, r3, #26
 80061aa:	3301      	adds	r3, #1
 80061ac:	f003 021f 	and.w	r2, r3, #31
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	3b1e      	subs	r3, #30
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061be:	e01b      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x4c0>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	60fb      	str	r3, [r7, #12]
  return result;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80061d8:	2320      	movs	r3, #32
 80061da:	e003      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	3301      	adds	r3, #1
 80061e6:	f003 021f 	and.w	r2, r3, #31
 80061ea:	4613      	mov	r3, r2
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	4413      	add	r3, r2
 80061f0:	3b1e      	subs	r3, #30
 80061f2:	051b      	lsls	r3, r3, #20
 80061f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061f8:	430b      	orrs	r3, r1
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6892      	ldr	r2, [r2, #8]
 80061fe:	4619      	mov	r1, r3
 8006200:	f7fe ffc1 	bl	8005186 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f280 80c6 	bge.w	800639a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_ADC_ConfigChannel+0x4ea>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x4ee>
 8006222:	4b65      	ldr	r3, [pc, #404]	; (80063b8 <HAL_ADC_ConfigChannel+0x680>)
 8006224:	e000      	b.n	8006228 <HAL_ADC_ConfigChannel+0x4f0>
 8006226:	4b65      	ldr	r3, [pc, #404]	; (80063bc <HAL_ADC_ConfigChannel+0x684>)
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fee5 	bl	8004ff8 <LL_ADC_GetCommonPathInternalCh>
 800622e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5e      	ldr	r2, [pc, #376]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_ADC_ConfigChannel+0x50c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5d      	ldr	r2, [pc, #372]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10e      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x52a>
 8006244:	485a      	ldr	r0, [pc, #360]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 8006246:	f7ff f86b 	bl	8005320 <LL_ADC_IsEnabled>
 800624a:	4604      	mov	r4, r0
 800624c:	4859      	ldr	r0, [pc, #356]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 800624e:	f7ff f867 	bl	8005320 <LL_ADC_IsEnabled>
 8006252:	4603      	mov	r3, r0
 8006254:	4323      	orrs	r3, r4
 8006256:	2b00      	cmp	r3, #0
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e008      	b.n	8006274 <HAL_ADC_ConfigChannel+0x53c>
 8006262:	4857      	ldr	r0, [pc, #348]	; (80063c0 <HAL_ADC_ConfigChannel+0x688>)
 8006264:	f7ff f85c 	bl	8005320 <LL_ADC_IsEnabled>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d07d      	beq.n	8006374 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a51      	ldr	r2, [pc, #324]	; (80063c4 <HAL_ADC_ConfigChannel+0x68c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d130      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x5ac>
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d12b      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a4b      	ldr	r2, [pc, #300]	; (80063c0 <HAL_ADC_ConfigChannel+0x688>)
 8006292:	4293      	cmp	r3, r2
 8006294:	f040 8081 	bne.w	800639a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a44      	ldr	r2, [pc, #272]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_ADC_ConfigChannel+0x574>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a43      	ldr	r2, [pc, #268]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d101      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x578>
 80062ac:	4a42      	ldr	r2, [pc, #264]	; (80063b8 <HAL_ADC_ConfigChannel+0x680>)
 80062ae:	e000      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x57a>
 80062b0:	4a42      	ldr	r2, [pc, #264]	; (80063bc <HAL_ADC_ConfigChannel+0x684>)
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe fe89 	bl	8004fd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062c0:	4b41      	ldr	r3, [pc, #260]	; (80063c8 <HAL_ADC_ConfigChannel+0x690>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	099b      	lsrs	r3, r3, #6
 80062c6:	4a41      	ldr	r2, [pc, #260]	; (80063cc <HAL_ADC_ConfigChannel+0x694>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	099b      	lsrs	r3, r3, #6
 80062ce:	3301      	adds	r3, #1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062d4:	e002      	b.n	80062dc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3b01      	subs	r3, #1
 80062da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f9      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062e2:	e05a      	b.n	800639a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a39      	ldr	r2, [pc, #228]	; (80063d0 <HAL_ADC_ConfigChannel+0x698>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d11e      	bne.n	800632c <HAL_ADC_ConfigChannel+0x5f4>
 80062ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d119      	bne.n	800632c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <HAL_ADC_ConfigChannel+0x688>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d14b      	bne.n	800639a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_ADC_ConfigChannel+0x5de>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a28      	ldr	r2, [pc, #160]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_ADC_ConfigChannel+0x5e2>
 8006316:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <HAL_ADC_ConfigChannel+0x680>)
 8006318:	e000      	b.n	800631c <HAL_ADC_ConfigChannel+0x5e4>
 800631a:	4a28      	ldr	r2, [pc, #160]	; (80063bc <HAL_ADC_ConfigChannel+0x684>)
 800631c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7fe fe54 	bl	8004fd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800632a:	e036      	b.n	800639a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a28      	ldr	r2, [pc, #160]	; (80063d4 <HAL_ADC_ConfigChannel+0x69c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d131      	bne.n	800639a <HAL_ADC_ConfigChannel+0x662>
 8006336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d12c      	bne.n	800639a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1e      	ldr	r2, [pc, #120]	; (80063c0 <HAL_ADC_ConfigChannel+0x688>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d127      	bne.n	800639a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_ADC_ConfigChannel+0x678>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_ADC_ConfigChannel+0x626>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a16      	ldr	r2, [pc, #88]	; (80063b4 <HAL_ADC_ConfigChannel+0x67c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x62a>
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <HAL_ADC_ConfigChannel+0x680>)
 8006360:	e000      	b.n	8006364 <HAL_ADC_ConfigChannel+0x62c>
 8006362:	4a16      	ldr	r2, [pc, #88]	; (80063bc <HAL_ADC_ConfigChannel+0x684>)
 8006364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe fe30 	bl	8004fd2 <LL_ADC_SetCommonPathInternalCh>
 8006372:	e012      	b.n	800639a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006386:	e008      	b.n	800639a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80063a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3784      	adds	r7, #132	; 0x84
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40022000 	.word	0x40022000
 80063b4:	40022100 	.word	0x40022100
 80063b8:	40022300 	.word	0x40022300
 80063bc:	58026300 	.word	0x58026300
 80063c0:	58026000 	.word	0x58026000
 80063c4:	cb840000 	.word	0xcb840000
 80063c8:	20000018 	.word	0x20000018
 80063cc:	053e2d63 	.word	0x053e2d63
 80063d0:	c7520000 	.word	0xc7520000
 80063d4:	cfb80000 	.word	0xcfb80000

080063d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe ff9b 	bl	8005320 <LL_ADC_IsEnabled>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d16e      	bne.n	80064ce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	4b38      	ldr	r3, [pc, #224]	; (80064d8 <ADC_Enable+0x100>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00d      	beq.n	800641a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	f043 0210 	orr.w	r2, r3, #16
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e05a      	b.n	80064d0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe ff6a 	bl	80052f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006424:	f7fe fd72 	bl	8004f0c <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2b      	ldr	r2, [pc, #172]	; (80064dc <ADC_Enable+0x104>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <ADC_Enable+0x66>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a29      	ldr	r2, [pc, #164]	; (80064e0 <ADC_Enable+0x108>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d101      	bne.n	8006442 <ADC_Enable+0x6a>
 800643e:	4b29      	ldr	r3, [pc, #164]	; (80064e4 <ADC_Enable+0x10c>)
 8006440:	e000      	b.n	8006444 <ADC_Enable+0x6c>
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <ADC_Enable+0x110>)
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe feed 	bl	8005224 <LL_ADC_GetMultimode>
 800644a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <ADC_Enable+0x108>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d002      	beq.n	800645c <ADC_Enable+0x84>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	e000      	b.n	800645e <ADC_Enable+0x86>
 800645c:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <ADC_Enable+0x104>)
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	4293      	cmp	r3, r2
 8006464:	d02c      	beq.n	80064c0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d130      	bne.n	80064ce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800646c:	e028      	b.n	80064c0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe ff54 	bl	8005320 <LL_ADC_IsEnabled>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe ff38 	bl	80052f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006488:	f7fe fd40 	bl	8004f0c <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d914      	bls.n	80064c0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d00d      	beq.n	80064c0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	f043 0210 	orr.w	r2, r3, #16
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	f043 0201 	orr.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e007      	b.n	80064d0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d1cf      	bne.n	800646e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	8000003f 	.word	0x8000003f
 80064dc:	40022000 	.word	0x40022000
 80064e0:	40022100 	.word	0x40022100
 80064e4:	40022300 	.word	0x40022300
 80064e8:	58026300 	.word	0x58026300

080064ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006502:	2b00      	cmp	r3, #0
 8006504:	d14b      	bne.n	800659e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d021      	beq.n	8006564 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fdc9 	bl	80050bc <LL_ADC_REG_IsTriggerSourceSWStart>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d032      	beq.n	8006596 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d12b      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d11f      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	655a      	str	r2, [r3, #84]	; 0x54
 8006562:	e018      	b.n	8006596 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d111      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d105      	bne.n	8006596 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7fc fc54 	bl	8002e44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800659c:	e00e      	b.n	80065bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f7ff fbba 	bl	8005d24 <HAL_ADC_ErrorCallback>
}
 80065b0:	e004      	b.n	80065bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fb92 	bl	8005cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff fb8c 	bl	8005d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a7a      	ldr	r2, [pc, #488]	; (800680c <ADC_ConfigureBoostMode+0x1f8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <ADC_ConfigureBoostMode+0x1c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a79      	ldr	r2, [pc, #484]	; (8006810 <ADC_ConfigureBoostMode+0x1fc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d109      	bne.n	8006644 <ADC_ConfigureBoostMode+0x30>
 8006630:	4b78      	ldr	r3, [pc, #480]	; (8006814 <ADC_ConfigureBoostMode+0x200>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e008      	b.n	8006656 <ADC_ConfigureBoostMode+0x42>
 8006644:	4b74      	ldr	r3, [pc, #464]	; (8006818 <ADC_ConfigureBoostMode+0x204>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01c      	beq.n	8006694 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800665a:	f005 ff83 	bl	800c564 <HAL_RCC_GetHCLKFreq>
 800665e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006668:	d010      	beq.n	800668c <ADC_ConfigureBoostMode+0x78>
 800666a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800666e:	d873      	bhi.n	8006758 <ADC_ConfigureBoostMode+0x144>
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d002      	beq.n	800667c <ADC_ConfigureBoostMode+0x68>
 8006676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667a:	d16d      	bne.n	8006758 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	60fb      	str	r3, [r7, #12]
        break;
 800668a:	e068      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	60fb      	str	r3, [r7, #12]
        break;
 8006692:	e064      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006694:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	f007 f9c8 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 80066a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80066aa:	d051      	beq.n	8006750 <ADC_ConfigureBoostMode+0x13c>
 80066ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80066b0:	d854      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80066b6:	d047      	beq.n	8006748 <ADC_ConfigureBoostMode+0x134>
 80066b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80066bc:	d84e      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80066c2:	d03d      	beq.n	8006740 <ADC_ConfigureBoostMode+0x12c>
 80066c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80066c8:	d848      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ce:	d033      	beq.n	8006738 <ADC_ConfigureBoostMode+0x124>
 80066d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d4:	d842      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80066da:	d029      	beq.n	8006730 <ADC_ConfigureBoostMode+0x11c>
 80066dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80066e0:	d83c      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80066e6:	d01a      	beq.n	800671e <ADC_ConfigureBoostMode+0x10a>
 80066e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80066ec:	d836      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80066f2:	d014      	beq.n	800671e <ADC_ConfigureBoostMode+0x10a>
 80066f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80066f8:	d830      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 80066fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fe:	d00e      	beq.n	800671e <ADC_ConfigureBoostMode+0x10a>
 8006700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006704:	d82a      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 8006706:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800670a:	d008      	beq.n	800671e <ADC_ConfigureBoostMode+0x10a>
 800670c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006710:	d824      	bhi.n	800675c <ADC_ConfigureBoostMode+0x148>
 8006712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006716:	d002      	beq.n	800671e <ADC_ConfigureBoostMode+0x10a>
 8006718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800671c:	d11e      	bne.n	800675c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	0c9b      	lsrs	r3, r3, #18
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	60fb      	str	r3, [r7, #12]
        break;
 800672e:	e016      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	60fb      	str	r3, [r7, #12]
        break;
 8006736:	e012      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	60fb      	str	r3, [r7, #12]
        break;
 800673e:	e00e      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	099b      	lsrs	r3, r3, #6
 8006744:	60fb      	str	r3, [r7, #12]
        break;
 8006746:	e00a      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	09db      	lsrs	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
        break;
 800674e:	e006      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	60fb      	str	r3, [r7, #12]
        break;
 8006756:	e002      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006758:	bf00      	nop
 800675a:	e000      	b.n	800675e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800675c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800675e:	f7fe fc05 	bl	8004f6c <HAL_GetREVID>
 8006762:	4603      	mov	r3, r0
 8006764:	f241 0203 	movw	r2, #4099	; 0x1003
 8006768:	4293      	cmp	r3, r2
 800676a:	d815      	bhi.n	8006798 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <ADC_ConfigureBoostMode+0x208>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d908      	bls.n	8006786 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006782:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006784:	e03e      	b.n	8006804 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	e035      	b.n	8006804 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a1f      	ldr	r2, [pc, #124]	; (8006820 <ADC_ConfigureBoostMode+0x20c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d808      	bhi.n	80067b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80067b4:	609a      	str	r2, [r3, #8]
}
 80067b6:	e025      	b.n	8006804 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4a1a      	ldr	r2, [pc, #104]	; (8006824 <ADC_ConfigureBoostMode+0x210>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d80a      	bhi.n	80067d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d2:	609a      	str	r2, [r3, #8]
}
 80067d4:	e016      	b.n	8006804 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a13      	ldr	r2, [pc, #76]	; (8006828 <ADC_ConfigureBoostMode+0x214>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d80a      	bhi.n	80067f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	609a      	str	r2, [r3, #8]
}
 80067f2:	e007      	b.n	8006804 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40022000 	.word	0x40022000
 8006810:	40022100 	.word	0x40022100
 8006814:	40022300 	.word	0x40022300
 8006818:	58026300 	.word	0x58026300
 800681c:	01312d00 	.word	0x01312d00
 8006820:	005f5e10 	.word	0x005f5e10
 8006824:	00bebc20 	.word	0x00bebc20
 8006828:	017d7840 	.word	0x017d7840

0800682c <LL_ADC_IsEnabled>:
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <LL_ADC_IsEnabled+0x18>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <LL_ADC_IsEnabled+0x1a>
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <LL_ADC_REG_IsConversionOngoing>:
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b04      	cmp	r3, #4
 8006864:	d101      	bne.n	800686a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b09f      	sub	sp, #124	; 0x7c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e0be      	b.n	8006a78 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006902:	2300      	movs	r3, #0
 8006904:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006906:	2300      	movs	r3, #0
 8006908:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a5c      	ldr	r2, [pc, #368]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d102      	bne.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006914:	4b5b      	ldr	r3, [pc, #364]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	e001      	b.n	800691e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e09d      	b.n	8006a78 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff ff87 	bl	8006852 <LL_ADC_REG_IsConversionOngoing>
 8006944:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ff81 	bl	8006852 <LL_ADC_REG_IsConversionOngoing>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d17f      	bne.n	8006a56 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006958:	2b00      	cmp	r3, #0
 800695a:	d17c      	bne.n	8006a56 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a47      	ldr	r2, [pc, #284]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a46      	ldr	r2, [pc, #280]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d101      	bne.n	8006974 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006970:	4b45      	ldr	r3, [pc, #276]	; (8006a88 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006972:	e000      	b.n	8006976 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006974:	4b45      	ldr	r3, [pc, #276]	; (8006a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006976:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d039      	beq.n	80069f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	431a      	orrs	r2, r3
 800698e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006990:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3a      	ldr	r2, [pc, #232]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a38      	ldr	r2, [pc, #224]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10e      	bne.n	80069c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80069a6:	4836      	ldr	r0, [pc, #216]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80069a8:	f7ff ff40 	bl	800682c <LL_ADC_IsEnabled>
 80069ac:	4604      	mov	r4, r0
 80069ae:	4835      	ldr	r0, [pc, #212]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80069b0:	f7ff ff3c 	bl	800682c <LL_ADC_IsEnabled>
 80069b4:	4603      	mov	r3, r0
 80069b6:	4323      	orrs	r3, r4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf0c      	ite	eq
 80069bc:	2301      	moveq	r3, #1
 80069be:	2300      	movne	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e008      	b.n	80069d6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80069c4:	4832      	ldr	r0, [pc, #200]	; (8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80069c6:	f7ff ff31 	bl	800682c <LL_ADC_IsEnabled>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d047      	beq.n	8006a6a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	4b2d      	ldr	r3, [pc, #180]	; (8006a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	431a      	orrs	r2, r3
 80069ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80069f2:	e03a      	b.n	8006a6a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80069f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d10e      	bne.n	8006a32 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006a14:	481a      	ldr	r0, [pc, #104]	; (8006a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a16:	f7ff ff09 	bl	800682c <LL_ADC_IsEnabled>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	4819      	ldr	r0, [pc, #100]	; (8006a84 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a1e:	f7ff ff05 	bl	800682c <LL_ADC_IsEnabled>
 8006a22:	4603      	mov	r3, r0
 8006a24:	4323      	orrs	r3, r4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e008      	b.n	8006a44 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006a32:	4817      	ldr	r0, [pc, #92]	; (8006a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006a34:	f7ff fefa 	bl	800682c <LL_ADC_IsEnabled>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2301      	moveq	r3, #1
 8006a40:	2300      	movne	r3, #0
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d010      	beq.n	8006a6a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a52:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a54:	e009      	b.n	8006a6a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006a68:	e000      	b.n	8006a6c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a6a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	377c      	adds	r7, #124	; 0x7c
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40022100 	.word	0x40022100
 8006a88:	40022300 	.word	0x40022300
 8006a8c:	58026300 	.word	0x58026300
 8006a90:	58026000 	.word	0x58026000
 8006a94:	fffff0e0 	.word	0xfffff0e0

08006a98 <__NVIC_SetPriorityGrouping>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <__NVIC_SetPriorityGrouping+0x44>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ac6:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	60d3      	str	r3, [r2, #12]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	e000ed00 	.word	0xe000ed00
 8006adc:	05fa0000 	.word	0x05fa0000

08006ae0 <__NVIC_GetPriorityGrouping>:
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	0a1b      	lsrs	r3, r3, #8
 8006aea:	f003 0307 	and.w	r3, r3, #7
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	e000ed00 	.word	0xe000ed00

08006afc <__NVIC_EnableIRQ>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	db0b      	blt.n	8006b26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	f003 021f 	and.w	r2, r3, #31
 8006b14:	4907      	ldr	r1, [pc, #28]	; (8006b34 <__NVIC_EnableIRQ+0x38>)
 8006b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	e000e100 	.word	0xe000e100

08006b38 <__NVIC_SetPriority>:
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	6039      	str	r1, [r7, #0]
 8006b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db0a      	blt.n	8006b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	490c      	ldr	r1, [pc, #48]	; (8006b84 <__NVIC_SetPriority+0x4c>)
 8006b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b56:	0112      	lsls	r2, r2, #4
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b60:	e00a      	b.n	8006b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	4908      	ldr	r1, [pc, #32]	; (8006b88 <__NVIC_SetPriority+0x50>)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	3b04      	subs	r3, #4
 8006b70:	0112      	lsls	r2, r2, #4
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	440b      	add	r3, r1
 8006b76:	761a      	strb	r2, [r3, #24]
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	e000e100 	.word	0xe000e100
 8006b88:	e000ed00 	.word	0xe000ed00

08006b8c <NVIC_EncodePriority>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b089      	sub	sp, #36	; 0x24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f1c3 0307 	rsb	r3, r3, #7
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	bf28      	it	cs
 8006baa:	2304      	movcs	r3, #4
 8006bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	2b06      	cmp	r3, #6
 8006bb4:	d902      	bls.n	8006bbc <NVIC_EncodePriority+0x30>
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	3b03      	subs	r3, #3
 8006bba:	e000      	b.n	8006bbe <NVIC_EncodePriority+0x32>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	401a      	ands	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	43d9      	mvns	r1, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be4:	4313      	orrs	r3, r2
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3724      	adds	r7, #36	; 0x24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
	...

08006bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c04:	d301      	bcc.n	8006c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c06:	2301      	movs	r3, #1
 8006c08:	e00f      	b.n	8006c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <SysTick_Config+0x40>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c12:	210f      	movs	r1, #15
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c18:	f7ff ff8e 	bl	8006b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <SysTick_Config+0x40>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c22:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <SysTick_Config+0x40>)
 8006c24:	2207      	movs	r2, #7
 8006c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	e000e010 	.word	0xe000e010

08006c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff ff29 	bl	8006a98 <__NVIC_SetPriorityGrouping>
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	4603      	mov	r3, r0
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c5c:	f7ff ff40 	bl	8006ae0 <__NVIC_GetPriorityGrouping>
 8006c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	6978      	ldr	r0, [r7, #20]
 8006c68:	f7ff ff90 	bl	8006b8c <NVIC_EncodePriority>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff ff5f 	bl	8006b38 <__NVIC_SetPriority>
}
 8006c7a:	bf00      	nop
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	4603      	mov	r3, r0
 8006c8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ff33 	bl	8006afc <__NVIC_EnableIRQ>
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ffa4 	bl	8006bf4 <SysTick_Config>
 8006cac:	4603      	mov	r3, r0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006cbc:	f3bf 8f5f 	dmb	sy
}
 8006cc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <HAL_MPU_Disable+0x28>)
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <HAL_MPU_Disable+0x28>)
 8006cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ccc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <HAL_MPU_Disable+0x2c>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	e000ed00 	.word	0xe000ed00
 8006ce4:	e000ed90 	.word	0xe000ed90

08006ce8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006cf0:	4a0b      	ldr	r2, [pc, #44]	; (8006d20 <HAL_MPU_Enable+0x38>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f043 0301 	orr.w	r3, r3, #1
 8006cf8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <HAL_MPU_Enable+0x3c>)
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <HAL_MPU_Enable+0x3c>)
 8006d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d04:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006d06:	f3bf 8f4f 	dsb	sy
}
 8006d0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d0c:	f3bf 8f6f 	isb	sy
}
 8006d10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000ed90 	.word	0xe000ed90
 8006d24:	e000ed00 	.word	0xe000ed00

08006d28 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	785a      	ldrb	r2, [r3, #1]
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <HAL_MPU_ConfigRegion+0x84>)
 8006d36:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d029      	beq.n	8006d94 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006d40:	4a1a      	ldr	r2, [pc, #104]	; (8006dac <HAL_MPU_ConfigRegion+0x84>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7b1b      	ldrb	r3, [r3, #12]
 8006d4c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7adb      	ldrb	r3, [r3, #11]
 8006d52:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7a9b      	ldrb	r3, [r3, #10]
 8006d5a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7b5b      	ldrb	r3, [r3, #13]
 8006d62:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7b9b      	ldrb	r3, [r3, #14]
 8006d6a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7bdb      	ldrb	r3, [r3, #15]
 8006d72:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7a5b      	ldrb	r3, [r3, #9]
 8006d7a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7a1b      	ldrb	r3, [r3, #8]
 8006d82:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d84:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	7812      	ldrb	r2, [r2, #0]
 8006d8a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d8c:	4a07      	ldr	r2, [pc, #28]	; (8006dac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d8e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d90:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006d92:	e005      	b.n	8006da0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_MPU_ConfigRegion+0x84>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006d9a:	4b04      	ldr	r3, [pc, #16]	; (8006dac <HAL_MPU_ConfigRegion+0x84>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	611a      	str	r2, [r3, #16]
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	e000ed90 	.word	0xe000ed90

08006db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006db8:	f7fe f8a8 	bl	8004f0c <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e316      	b.n	80073f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a66      	ldr	r2, [pc, #408]	; (8006f68 <HAL_DMA_Init+0x1b8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d04a      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a65      	ldr	r2, [pc, #404]	; (8006f6c <HAL_DMA_Init+0x1bc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d045      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a63      	ldr	r2, [pc, #396]	; (8006f70 <HAL_DMA_Init+0x1c0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d040      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a62      	ldr	r2, [pc, #392]	; (8006f74 <HAL_DMA_Init+0x1c4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d03b      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a60      	ldr	r2, [pc, #384]	; (8006f78 <HAL_DMA_Init+0x1c8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d036      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a5f      	ldr	r2, [pc, #380]	; (8006f7c <HAL_DMA_Init+0x1cc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d031      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a5d      	ldr	r2, [pc, #372]	; (8006f80 <HAL_DMA_Init+0x1d0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d02c      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a5c      	ldr	r2, [pc, #368]	; (8006f84 <HAL_DMA_Init+0x1d4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d027      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a5a      	ldr	r2, [pc, #360]	; (8006f88 <HAL_DMA_Init+0x1d8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d022      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a59      	ldr	r2, [pc, #356]	; (8006f8c <HAL_DMA_Init+0x1dc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01d      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a57      	ldr	r2, [pc, #348]	; (8006f90 <HAL_DMA_Init+0x1e0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d018      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a56      	ldr	r2, [pc, #344]	; (8006f94 <HAL_DMA_Init+0x1e4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d013      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a54      	ldr	r2, [pc, #336]	; (8006f98 <HAL_DMA_Init+0x1e8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00e      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a53      	ldr	r2, [pc, #332]	; (8006f9c <HAL_DMA_Init+0x1ec>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d009      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a51      	ldr	r2, [pc, #324]	; (8006fa0 <HAL_DMA_Init+0x1f0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <HAL_DMA_Init+0xb8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a50      	ldr	r2, [pc, #320]	; (8006fa4 <HAL_DMA_Init+0x1f4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d101      	bne.n	8006e6c <HAL_DMA_Init+0xbc>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_DMA_Init+0xbe>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 813b 	beq.w	80070ea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a37      	ldr	r2, [pc, #220]	; (8006f68 <HAL_DMA_Init+0x1b8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04a      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a36      	ldr	r2, [pc, #216]	; (8006f6c <HAL_DMA_Init+0x1bc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d045      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a34      	ldr	r2, [pc, #208]	; (8006f70 <HAL_DMA_Init+0x1c0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d040      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a33      	ldr	r2, [pc, #204]	; (8006f74 <HAL_DMA_Init+0x1c4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d03b      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a31      	ldr	r2, [pc, #196]	; (8006f78 <HAL_DMA_Init+0x1c8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d036      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a30      	ldr	r2, [pc, #192]	; (8006f7c <HAL_DMA_Init+0x1cc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d031      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2e      	ldr	r2, [pc, #184]	; (8006f80 <HAL_DMA_Init+0x1d0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02c      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <HAL_DMA_Init+0x1d4>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d027      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a2b      	ldr	r2, [pc, #172]	; (8006f88 <HAL_DMA_Init+0x1d8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_DMA_Init+0x1dc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01d      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a28      	ldr	r2, [pc, #160]	; (8006f90 <HAL_DMA_Init+0x1e0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a27      	ldr	r2, [pc, #156]	; (8006f94 <HAL_DMA_Init+0x1e4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a25      	ldr	r2, [pc, #148]	; (8006f98 <HAL_DMA_Init+0x1e8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <HAL_DMA_Init+0x1ec>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_DMA_Init+0x1f0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_DMA_Init+0x174>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <HAL_DMA_Init+0x1f4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <HAL_DMA_Init+0x186>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e007      	b.n	8006f46 <HAL_DMA_Init+0x196>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f46:	e02f      	b.n	8006fa8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f48:	f7fd ffe0 	bl	8004f0c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d928      	bls.n	8006fa8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2203      	movs	r2, #3
 8006f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e246      	b.n	80073f6 <HAL_DMA_Init+0x646>
 8006f68:	40020010 	.word	0x40020010
 8006f6c:	40020028 	.word	0x40020028
 8006f70:	40020040 	.word	0x40020040
 8006f74:	40020058 	.word	0x40020058
 8006f78:	40020070 	.word	0x40020070
 8006f7c:	40020088 	.word	0x40020088
 8006f80:	400200a0 	.word	0x400200a0
 8006f84:	400200b8 	.word	0x400200b8
 8006f88:	40020410 	.word	0x40020410
 8006f8c:	40020428 	.word	0x40020428
 8006f90:	40020440 	.word	0x40020440
 8006f94:	40020458 	.word	0x40020458
 8006f98:	40020470 	.word	0x40020470
 8006f9c:	40020488 	.word	0x40020488
 8006fa0:	400204a0 	.word	0x400204a0
 8006fa4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c8      	bne.n	8006f48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4b83      	ldr	r3, [pc, #524]	; (80071d0 <HAL_DMA_Init+0x420>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d107      	bne.n	800700c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	4313      	orrs	r3, r2
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800700c:	4b71      	ldr	r3, [pc, #452]	; (80071d4 <HAL_DMA_Init+0x424>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b71      	ldr	r3, [pc, #452]	; (80071d8 <HAL_DMA_Init+0x428>)
 8007012:	4013      	ands	r3, r2
 8007014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007018:	d328      	bcc.n	800706c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b28      	cmp	r3, #40	; 0x28
 8007020:	d903      	bls.n	800702a <HAL_DMA_Init+0x27a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b2e      	cmp	r3, #46	; 0x2e
 8007028:	d917      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b3e      	cmp	r3, #62	; 0x3e
 8007030:	d903      	bls.n	800703a <HAL_DMA_Init+0x28a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b42      	cmp	r3, #66	; 0x42
 8007038:	d90f      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b46      	cmp	r3, #70	; 0x46
 8007040:	d903      	bls.n	800704a <HAL_DMA_Init+0x29a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b48      	cmp	r3, #72	; 0x48
 8007048:	d907      	bls.n	800705a <HAL_DMA_Init+0x2aa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b4e      	cmp	r3, #78	; 0x4e
 8007050:	d905      	bls.n	800705e <HAL_DMA_Init+0x2ae>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b52      	cmp	r3, #82	; 0x52
 8007058:	d801      	bhi.n	800705e <HAL_DMA_Init+0x2ae>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_DMA_Init+0x2b0>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0307 	bic.w	r3, r3, #7
 8007082:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b04      	cmp	r3, #4
 8007094:	d117      	bne.n	80070c6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fddb 	bl	8008c64 <DMA_CheckFifoParam>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2240      	movs	r2, #64	; 0x40
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e197      	b.n	80073f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fd16 	bl	8008b00 <DMA_CalcBaseAndBitshift>
 80070d4:	4603      	mov	r3, r0
 80070d6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	223f      	movs	r2, #63	; 0x3f
 80070e2:	409a      	lsls	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e0cd      	b.n	8007286 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3b      	ldr	r2, [pc, #236]	; (80071dc <HAL_DMA_Init+0x42c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <HAL_DMA_Init+0x38a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a39      	ldr	r2, [pc, #228]	; (80071e0 <HAL_DMA_Init+0x430>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01d      	beq.n	800713a <HAL_DMA_Init+0x38a>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <HAL_DMA_Init+0x434>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a36      	ldr	r2, [pc, #216]	; (80071e8 <HAL_DMA_Init+0x438>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a35      	ldr	r2, [pc, #212]	; (80071ec <HAL_DMA_Init+0x43c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_DMA_Init+0x38a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a33      	ldr	r2, [pc, #204]	; (80071f0 <HAL_DMA_Init+0x440>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a32      	ldr	r2, [pc, #200]	; (80071f4 <HAL_DMA_Init+0x444>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_DMA_Init+0x38a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a30      	ldr	r2, [pc, #192]	; (80071f8 <HAL_DMA_Init+0x448>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_DMA_Init+0x38e>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_DMA_Init+0x390>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8097 	beq.w	8007274 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a24      	ldr	r2, [pc, #144]	; (80071dc <HAL_DMA_Init+0x42c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d021      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <HAL_DMA_Init+0x430>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01c      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a21      	ldr	r2, [pc, #132]	; (80071e4 <HAL_DMA_Init+0x434>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d017      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <HAL_DMA_Init+0x438>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d012      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_DMA_Init+0x43c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00d      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <HAL_DMA_Init+0x440>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d008      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <HAL_DMA_Init+0x444>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <HAL_DMA_Init+0x3e4>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_DMA_Init+0x448>)
 8007192:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <HAL_DMA_Init+0x44c>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d021      	beq.n	8007200 <HAL_DMA_Init+0x450>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d102      	bne.n	80071ca <HAL_DMA_Init+0x41a>
 80071c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071c8:	e01b      	b.n	8007202 <HAL_DMA_Init+0x452>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e019      	b.n	8007202 <HAL_DMA_Init+0x452>
 80071ce:	bf00      	nop
 80071d0:	fe10803f 	.word	0xfe10803f
 80071d4:	5c001000 	.word	0x5c001000
 80071d8:	ffff0000 	.word	0xffff0000
 80071dc:	58025408 	.word	0x58025408
 80071e0:	5802541c 	.word	0x5802541c
 80071e4:	58025430 	.word	0x58025430
 80071e8:	58025444 	.word	0x58025444
 80071ec:	58025458 	.word	0x58025458
 80071f0:	5802546c 	.word	0x5802546c
 80071f4:	58025480 	.word	0x58025480
 80071f8:	58025494 	.word	0x58025494
 80071fc:	fffe000f 	.word	0xfffe000f
 8007200:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68d2      	ldr	r2, [r2, #12]
 8007206:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007230:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	4b6e      	ldr	r3, [pc, #440]	; (8007400 <HAL_DMA_Init+0x650>)
 8007248:	4413      	add	r3, r2
 800724a:	4a6e      	ldr	r2, [pc, #440]	; (8007404 <HAL_DMA_Init+0x654>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	091b      	lsrs	r3, r3, #4
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 fc51 	bl	8008b00 <DMA_CalcBaseAndBitshift>
 800725e:	4603      	mov	r3, r0
 8007260:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2201      	movs	r2, #1
 800726c:	409a      	lsls	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e008      	b.n	8007286 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2203      	movs	r2, #3
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0b7      	b.n	80073f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a5f      	ldr	r2, [pc, #380]	; (8007408 <HAL_DMA_Init+0x658>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d072      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a5d      	ldr	r2, [pc, #372]	; (800740c <HAL_DMA_Init+0x65c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d06d      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a5c      	ldr	r2, [pc, #368]	; (8007410 <HAL_DMA_Init+0x660>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d068      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5a      	ldr	r2, [pc, #360]	; (8007414 <HAL_DMA_Init+0x664>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d063      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a59      	ldr	r2, [pc, #356]	; (8007418 <HAL_DMA_Init+0x668>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d05e      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a57      	ldr	r2, [pc, #348]	; (800741c <HAL_DMA_Init+0x66c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d059      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a56      	ldr	r2, [pc, #344]	; (8007420 <HAL_DMA_Init+0x670>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d054      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a54      	ldr	r2, [pc, #336]	; (8007424 <HAL_DMA_Init+0x674>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d04f      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a53      	ldr	r2, [pc, #332]	; (8007428 <HAL_DMA_Init+0x678>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04a      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a51      	ldr	r2, [pc, #324]	; (800742c <HAL_DMA_Init+0x67c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d045      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a50      	ldr	r2, [pc, #320]	; (8007430 <HAL_DMA_Init+0x680>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d040      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a4e      	ldr	r2, [pc, #312]	; (8007434 <HAL_DMA_Init+0x684>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d03b      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a4d      	ldr	r2, [pc, #308]	; (8007438 <HAL_DMA_Init+0x688>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d036      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a4b      	ldr	r2, [pc, #300]	; (800743c <HAL_DMA_Init+0x68c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a4a      	ldr	r2, [pc, #296]	; (8007440 <HAL_DMA_Init+0x690>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d02c      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a48      	ldr	r2, [pc, #288]	; (8007444 <HAL_DMA_Init+0x694>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a47      	ldr	r2, [pc, #284]	; (8007448 <HAL_DMA_Init+0x698>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a45      	ldr	r2, [pc, #276]	; (800744c <HAL_DMA_Init+0x69c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a44      	ldr	r2, [pc, #272]	; (8007450 <HAL_DMA_Init+0x6a0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a42      	ldr	r2, [pc, #264]	; (8007454 <HAL_DMA_Init+0x6a4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a41      	ldr	r2, [pc, #260]	; (8007458 <HAL_DMA_Init+0x6a8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3f      	ldr	r2, [pc, #252]	; (800745c <HAL_DMA_Init+0x6ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3e      	ldr	r2, [pc, #248]	; (8007460 <HAL_DMA_Init+0x6b0>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_DMA_Init+0x5c6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a3c      	ldr	r2, [pc, #240]	; (8007464 <HAL_DMA_Init+0x6b4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d101      	bne.n	800737a <HAL_DMA_Init+0x5ca>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <HAL_DMA_Init+0x5cc>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d032      	beq.n	80073e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 fceb 	bl	8008d5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b80      	cmp	r3, #128	; 0x80
 800738c:	d102      	bne.n	8007394 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <HAL_DMA_Init+0x624>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d80c      	bhi.n	80073d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fd68 	bl	8008e90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	e008      	b.n	80073e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	a7fdabf8 	.word	0xa7fdabf8
 8007404:	cccccccd 	.word	0xcccccccd
 8007408:	40020010 	.word	0x40020010
 800740c:	40020028 	.word	0x40020028
 8007410:	40020040 	.word	0x40020040
 8007414:	40020058 	.word	0x40020058
 8007418:	40020070 	.word	0x40020070
 800741c:	40020088 	.word	0x40020088
 8007420:	400200a0 	.word	0x400200a0
 8007424:	400200b8 	.word	0x400200b8
 8007428:	40020410 	.word	0x40020410
 800742c:	40020428 	.word	0x40020428
 8007430:	40020440 	.word	0x40020440
 8007434:	40020458 	.word	0x40020458
 8007438:	40020470 	.word	0x40020470
 800743c:	40020488 	.word	0x40020488
 8007440:	400204a0 	.word	0x400204a0
 8007444:	400204b8 	.word	0x400204b8
 8007448:	58025408 	.word	0x58025408
 800744c:	5802541c 	.word	0x5802541c
 8007450:	58025430 	.word	0x58025430
 8007454:	58025444 	.word	0x58025444
 8007458:	58025458 	.word	0x58025458
 800745c:	5802546c 	.word	0x5802546c
 8007460:	58025480 	.word	0x58025480
 8007464:	58025494 	.word	0x58025494

08007468 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e226      	b.n	80078d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_DMA_Start_IT+0x2a>
 800748e:	2302      	movs	r3, #2
 8007490:	e21f      	b.n	80078d2 <HAL_DMA_Start_IT+0x46a>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	f040 820a 	bne.w	80078bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a68      	ldr	r2, [pc, #416]	; (800765c <HAL_DMA_Start_IT+0x1f4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d04a      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a66      	ldr	r2, [pc, #408]	; (8007660 <HAL_DMA_Start_IT+0x1f8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a65      	ldr	r2, [pc, #404]	; (8007664 <HAL_DMA_Start_IT+0x1fc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d040      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a63      	ldr	r2, [pc, #396]	; (8007668 <HAL_DMA_Start_IT+0x200>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a62      	ldr	r2, [pc, #392]	; (800766c <HAL_DMA_Start_IT+0x204>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d036      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a60      	ldr	r2, [pc, #384]	; (8007670 <HAL_DMA_Start_IT+0x208>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d031      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a5f      	ldr	r2, [pc, #380]	; (8007674 <HAL_DMA_Start_IT+0x20c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d02c      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a5d      	ldr	r2, [pc, #372]	; (8007678 <HAL_DMA_Start_IT+0x210>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d027      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a5c      	ldr	r2, [pc, #368]	; (800767c <HAL_DMA_Start_IT+0x214>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5a      	ldr	r2, [pc, #360]	; (8007680 <HAL_DMA_Start_IT+0x218>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a59      	ldr	r2, [pc, #356]	; (8007684 <HAL_DMA_Start_IT+0x21c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a57      	ldr	r2, [pc, #348]	; (8007688 <HAL_DMA_Start_IT+0x220>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a56      	ldr	r2, [pc, #344]	; (800768c <HAL_DMA_Start_IT+0x224>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a54      	ldr	r2, [pc, #336]	; (8007690 <HAL_DMA_Start_IT+0x228>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a53      	ldr	r2, [pc, #332]	; (8007694 <HAL_DMA_Start_IT+0x22c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_DMA_Start_IT+0xee>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a51      	ldr	r2, [pc, #324]	; (8007698 <HAL_DMA_Start_IT+0x230>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_DMA_Start_IT+0x100>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <HAL_DMA_Start_IT+0x110>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f001 f912 	bl	80087a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a34      	ldr	r2, [pc, #208]	; (800765c <HAL_DMA_Start_IT+0x1f4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d04a      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a33      	ldr	r2, [pc, #204]	; (8007660 <HAL_DMA_Start_IT+0x1f8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d045      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a31      	ldr	r2, [pc, #196]	; (8007664 <HAL_DMA_Start_IT+0x1fc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d040      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a30      	ldr	r2, [pc, #192]	; (8007668 <HAL_DMA_Start_IT+0x200>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d03b      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2e      	ldr	r2, [pc, #184]	; (800766c <HAL_DMA_Start_IT+0x204>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d036      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a2d      	ldr	r2, [pc, #180]	; (8007670 <HAL_DMA_Start_IT+0x208>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d031      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2b      	ldr	r2, [pc, #172]	; (8007674 <HAL_DMA_Start_IT+0x20c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02c      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <HAL_DMA_Start_IT+0x210>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d027      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a28      	ldr	r2, [pc, #160]	; (800767c <HAL_DMA_Start_IT+0x214>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d022      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a27      	ldr	r2, [pc, #156]	; (8007680 <HAL_DMA_Start_IT+0x218>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d01d      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a25      	ldr	r2, [pc, #148]	; (8007684 <HAL_DMA_Start_IT+0x21c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d018      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a24      	ldr	r2, [pc, #144]	; (8007688 <HAL_DMA_Start_IT+0x220>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d013      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a22      	ldr	r2, [pc, #136]	; (800768c <HAL_DMA_Start_IT+0x224>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a21      	ldr	r2, [pc, #132]	; (8007690 <HAL_DMA_Start_IT+0x228>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <HAL_DMA_Start_IT+0x22c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_DMA_Start_IT+0x1bc>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <HAL_DMA_Start_IT+0x230>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d101      	bne.n	8007628 <HAL_DMA_Start_IT+0x1c0>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <HAL_DMA_Start_IT+0x1c2>
 8007628:	2300      	movs	r3, #0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d036      	beq.n	800769c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f023 021e 	bic.w	r2, r3, #30
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0216 	orr.w	r2, r2, #22
 8007640:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	d03e      	beq.n	80076c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0208 	orr.w	r2, r2, #8
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e035      	b.n	80076c8 <HAL_DMA_Start_IT+0x260>
 800765c:	40020010 	.word	0x40020010
 8007660:	40020028 	.word	0x40020028
 8007664:	40020040 	.word	0x40020040
 8007668:	40020058 	.word	0x40020058
 800766c:	40020070 	.word	0x40020070
 8007670:	40020088 	.word	0x40020088
 8007674:	400200a0 	.word	0x400200a0
 8007678:	400200b8 	.word	0x400200b8
 800767c:	40020410 	.word	0x40020410
 8007680:	40020428 	.word	0x40020428
 8007684:	40020440 	.word	0x40020440
 8007688:	40020458 	.word	0x40020458
 800768c:	40020470 	.word	0x40020470
 8007690:	40020488 	.word	0x40020488
 8007694:	400204a0 	.word	0x400204a0
 8007698:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f023 020e 	bic.w	r2, r3, #14
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 020a 	orr.w	r2, r2, #10
 80076ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0204 	orr.w	r2, r2, #4
 80076c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a83      	ldr	r2, [pc, #524]	; (80078dc <HAL_DMA_Start_IT+0x474>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d072      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a82      	ldr	r2, [pc, #520]	; (80078e0 <HAL_DMA_Start_IT+0x478>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d06d      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a80      	ldr	r2, [pc, #512]	; (80078e4 <HAL_DMA_Start_IT+0x47c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d068      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a7f      	ldr	r2, [pc, #508]	; (80078e8 <HAL_DMA_Start_IT+0x480>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d063      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a7d      	ldr	r2, [pc, #500]	; (80078ec <HAL_DMA_Start_IT+0x484>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d05e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a7c      	ldr	r2, [pc, #496]	; (80078f0 <HAL_DMA_Start_IT+0x488>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d059      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a7a      	ldr	r2, [pc, #488]	; (80078f4 <HAL_DMA_Start_IT+0x48c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d054      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a79      	ldr	r2, [pc, #484]	; (80078f8 <HAL_DMA_Start_IT+0x490>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04f      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a77      	ldr	r2, [pc, #476]	; (80078fc <HAL_DMA_Start_IT+0x494>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d04a      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a76      	ldr	r2, [pc, #472]	; (8007900 <HAL_DMA_Start_IT+0x498>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d045      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a74      	ldr	r2, [pc, #464]	; (8007904 <HAL_DMA_Start_IT+0x49c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d040      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a73      	ldr	r2, [pc, #460]	; (8007908 <HAL_DMA_Start_IT+0x4a0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d03b      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a71      	ldr	r2, [pc, #452]	; (800790c <HAL_DMA_Start_IT+0x4a4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d036      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a70      	ldr	r2, [pc, #448]	; (8007910 <HAL_DMA_Start_IT+0x4a8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d031      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a6e      	ldr	r2, [pc, #440]	; (8007914 <HAL_DMA_Start_IT+0x4ac>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02c      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a6d      	ldr	r2, [pc, #436]	; (8007918 <HAL_DMA_Start_IT+0x4b0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d027      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a6b      	ldr	r2, [pc, #428]	; (800791c <HAL_DMA_Start_IT+0x4b4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6a      	ldr	r2, [pc, #424]	; (8007920 <HAL_DMA_Start_IT+0x4b8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d01d      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a68      	ldr	r2, [pc, #416]	; (8007924 <HAL_DMA_Start_IT+0x4bc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a67      	ldr	r2, [pc, #412]	; (8007928 <HAL_DMA_Start_IT+0x4c0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a65      	ldr	r2, [pc, #404]	; (800792c <HAL_DMA_Start_IT+0x4c4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a64      	ldr	r2, [pc, #400]	; (8007930 <HAL_DMA_Start_IT+0x4c8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a62      	ldr	r2, [pc, #392]	; (8007934 <HAL_DMA_Start_IT+0x4cc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_DMA_Start_IT+0x350>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a61      	ldr	r2, [pc, #388]	; (8007938 <HAL_DMA_Start_IT+0x4d0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d101      	bne.n	80077bc <HAL_DMA_Start_IT+0x354>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <HAL_DMA_Start_IT+0x356>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a37      	ldr	r2, [pc, #220]	; (80078dc <HAL_DMA_Start_IT+0x474>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d04a      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a36      	ldr	r2, [pc, #216]	; (80078e0 <HAL_DMA_Start_IT+0x478>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d045      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a34      	ldr	r2, [pc, #208]	; (80078e4 <HAL_DMA_Start_IT+0x47c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d040      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <HAL_DMA_Start_IT+0x480>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d03b      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a31      	ldr	r2, [pc, #196]	; (80078ec <HAL_DMA_Start_IT+0x484>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d036      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a30      	ldr	r2, [pc, #192]	; (80078f0 <HAL_DMA_Start_IT+0x488>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d031      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <HAL_DMA_Start_IT+0x48c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d02c      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <HAL_DMA_Start_IT+0x490>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d027      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <HAL_DMA_Start_IT+0x494>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d022      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <HAL_DMA_Start_IT+0x498>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d01d      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a28      	ldr	r2, [pc, #160]	; (8007904 <HAL_DMA_Start_IT+0x49c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d018      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a27      	ldr	r2, [pc, #156]	; (8007908 <HAL_DMA_Start_IT+0x4a0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a25      	ldr	r2, [pc, #148]	; (800790c <HAL_DMA_Start_IT+0x4a4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00e      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a24      	ldr	r2, [pc, #144]	; (8007910 <HAL_DMA_Start_IT+0x4a8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d009      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a22      	ldr	r2, [pc, #136]	; (8007914 <HAL_DMA_Start_IT+0x4ac>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_DMA_Start_IT+0x430>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a21      	ldr	r2, [pc, #132]	; (8007918 <HAL_DMA_Start_IT+0x4b0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d108      	bne.n	80078aa <HAL_DMA_Start_IT+0x442>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e012      	b.n	80078d0 <HAL_DMA_Start_IT+0x468>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e009      	b.n	80078d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40020010 	.word	0x40020010
 80078e0:	40020028 	.word	0x40020028
 80078e4:	40020040 	.word	0x40020040
 80078e8:	40020058 	.word	0x40020058
 80078ec:	40020070 	.word	0x40020070
 80078f0:	40020088 	.word	0x40020088
 80078f4:	400200a0 	.word	0x400200a0
 80078f8:	400200b8 	.word	0x400200b8
 80078fc:	40020410 	.word	0x40020410
 8007900:	40020428 	.word	0x40020428
 8007904:	40020440 	.word	0x40020440
 8007908:	40020458 	.word	0x40020458
 800790c:	40020470 	.word	0x40020470
 8007910:	40020488 	.word	0x40020488
 8007914:	400204a0 	.word	0x400204a0
 8007918:	400204b8 	.word	0x400204b8
 800791c:	58025408 	.word	0x58025408
 8007920:	5802541c 	.word	0x5802541c
 8007924:	58025430 	.word	0x58025430
 8007928:	58025444 	.word	0x58025444
 800792c:	58025458 	.word	0x58025458
 8007930:	5802546c 	.word	0x5802546c
 8007934:	58025480 	.word	0x58025480
 8007938:	58025494 	.word	0x58025494

0800793c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007948:	4b67      	ldr	r3, [pc, #412]	; (8007ae8 <HAL_DMA_IRQHandler+0x1ac>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a67      	ldr	r2, [pc, #412]	; (8007aec <HAL_DMA_IRQHandler+0x1b0>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007960:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a5f      	ldr	r2, [pc, #380]	; (8007af0 <HAL_DMA_IRQHandler+0x1b4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d04a      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a5d      	ldr	r2, [pc, #372]	; (8007af4 <HAL_DMA_IRQHandler+0x1b8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d045      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5c      	ldr	r2, [pc, #368]	; (8007af8 <HAL_DMA_IRQHandler+0x1bc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d040      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5a      	ldr	r2, [pc, #360]	; (8007afc <HAL_DMA_IRQHandler+0x1c0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d03b      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a59      	ldr	r2, [pc, #356]	; (8007b00 <HAL_DMA_IRQHandler+0x1c4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d036      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a57      	ldr	r2, [pc, #348]	; (8007b04 <HAL_DMA_IRQHandler+0x1c8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d031      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a56      	ldr	r2, [pc, #344]	; (8007b08 <HAL_DMA_IRQHandler+0x1cc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d02c      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a54      	ldr	r2, [pc, #336]	; (8007b0c <HAL_DMA_IRQHandler+0x1d0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d027      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a53      	ldr	r2, [pc, #332]	; (8007b10 <HAL_DMA_IRQHandler+0x1d4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d022      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a51      	ldr	r2, [pc, #324]	; (8007b14 <HAL_DMA_IRQHandler+0x1d8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01d      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a50      	ldr	r2, [pc, #320]	; (8007b18 <HAL_DMA_IRQHandler+0x1dc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d018      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a4e      	ldr	r2, [pc, #312]	; (8007b1c <HAL_DMA_IRQHandler+0x1e0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a4d      	ldr	r2, [pc, #308]	; (8007b20 <HAL_DMA_IRQHandler+0x1e4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a4b      	ldr	r2, [pc, #300]	; (8007b24 <HAL_DMA_IRQHandler+0x1e8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a4a      	ldr	r2, [pc, #296]	; (8007b28 <HAL_DMA_IRQHandler+0x1ec>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xd2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a48      	ldr	r2, [pc, #288]	; (8007b2c <HAL_DMA_IRQHandler+0x1f0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d101      	bne.n	8007a12 <HAL_DMA_IRQHandler+0xd6>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <HAL_DMA_IRQHandler+0xd8>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 842b 	beq.w	8008270 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	2208      	movs	r2, #8
 8007a24:	409a      	lsls	r2, r3
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80a2 	beq.w	8007b74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a2e      	ldr	r2, [pc, #184]	; (8007af0 <HAL_DMA_IRQHandler+0x1b4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d04a      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2d      	ldr	r2, [pc, #180]	; (8007af4 <HAL_DMA_IRQHandler+0x1b8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d045      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a2b      	ldr	r2, [pc, #172]	; (8007af8 <HAL_DMA_IRQHandler+0x1bc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d040      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a2a      	ldr	r2, [pc, #168]	; (8007afc <HAL_DMA_IRQHandler+0x1c0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d03b      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a28      	ldr	r2, [pc, #160]	; (8007b00 <HAL_DMA_IRQHandler+0x1c4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d036      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <HAL_DMA_IRQHandler+0x1c8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d031      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a25      	ldr	r2, [pc, #148]	; (8007b08 <HAL_DMA_IRQHandler+0x1cc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d02c      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a24      	ldr	r2, [pc, #144]	; (8007b0c <HAL_DMA_IRQHandler+0x1d0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d027      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <HAL_DMA_IRQHandler+0x1d4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d022      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a21      	ldr	r2, [pc, #132]	; (8007b14 <HAL_DMA_IRQHandler+0x1d8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d01d      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1f      	ldr	r2, [pc, #124]	; (8007b18 <HAL_DMA_IRQHandler+0x1dc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d018      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1e      	ldr	r2, [pc, #120]	; (8007b1c <HAL_DMA_IRQHandler+0x1e0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d013      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1c      	ldr	r2, [pc, #112]	; (8007b20 <HAL_DMA_IRQHandler+0x1e4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <HAL_DMA_IRQHandler+0x1e8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d009      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a19      	ldr	r2, [pc, #100]	; (8007b28 <HAL_DMA_IRQHandler+0x1ec>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d004      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x194>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_DMA_IRQHandler+0x1f0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d12f      	bne.n	8007b30 <HAL_DMA_IRQHandler+0x1f4>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e02e      	b.n	8007b44 <HAL_DMA_IRQHandler+0x208>
 8007ae6:	bf00      	nop
 8007ae8:	20000018 	.word	0x20000018
 8007aec:	1b4e81b5 	.word	0x1b4e81b5
 8007af0:	40020010 	.word	0x40020010
 8007af4:	40020028 	.word	0x40020028
 8007af8:	40020040 	.word	0x40020040
 8007afc:	40020058 	.word	0x40020058
 8007b00:	40020070 	.word	0x40020070
 8007b04:	40020088 	.word	0x40020088
 8007b08:	400200a0 	.word	0x400200a0
 8007b0c:	400200b8 	.word	0x400200b8
 8007b10:	40020410 	.word	0x40020410
 8007b14:	40020428 	.word	0x40020428
 8007b18:	40020440 	.word	0x40020440
 8007b1c:	40020458 	.word	0x40020458
 8007b20:	40020470 	.word	0x40020470
 8007b24:	40020488 	.word	0x40020488
 8007b28:	400204a0 	.word	0x400204a0
 8007b2c:	400204b8 	.word	0x400204b8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bf14      	ite	ne
 8007b3e:	2301      	movne	r3, #1
 8007b40:	2300      	moveq	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d015      	beq.n	8007b74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0204 	bic.w	r2, r2, #4
 8007b56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	2208      	movs	r2, #8
 8007b62:	409a      	lsls	r2, r3
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06e      	beq.n	8007c68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a69      	ldr	r2, [pc, #420]	; (8007d34 <HAL_DMA_IRQHandler+0x3f8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d04a      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a67      	ldr	r2, [pc, #412]	; (8007d38 <HAL_DMA_IRQHandler+0x3fc>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d045      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a66      	ldr	r2, [pc, #408]	; (8007d3c <HAL_DMA_IRQHandler+0x400>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d040      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a64      	ldr	r2, [pc, #400]	; (8007d40 <HAL_DMA_IRQHandler+0x404>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d03b      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a63      	ldr	r2, [pc, #396]	; (8007d44 <HAL_DMA_IRQHandler+0x408>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d036      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a61      	ldr	r2, [pc, #388]	; (8007d48 <HAL_DMA_IRQHandler+0x40c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d031      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a60      	ldr	r2, [pc, #384]	; (8007d4c <HAL_DMA_IRQHandler+0x410>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d02c      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a5e      	ldr	r2, [pc, #376]	; (8007d50 <HAL_DMA_IRQHandler+0x414>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d027      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a5d      	ldr	r2, [pc, #372]	; (8007d54 <HAL_DMA_IRQHandler+0x418>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d022      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a5b      	ldr	r2, [pc, #364]	; (8007d58 <HAL_DMA_IRQHandler+0x41c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01d      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a5a      	ldr	r2, [pc, #360]	; (8007d5c <HAL_DMA_IRQHandler+0x420>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d018      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a58      	ldr	r2, [pc, #352]	; (8007d60 <HAL_DMA_IRQHandler+0x424>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d013      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a57      	ldr	r2, [pc, #348]	; (8007d64 <HAL_DMA_IRQHandler+0x428>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a55      	ldr	r2, [pc, #340]	; (8007d68 <HAL_DMA_IRQHandler+0x42c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d009      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a54      	ldr	r2, [pc, #336]	; (8007d6c <HAL_DMA_IRQHandler+0x430>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d004      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x2ee>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a52      	ldr	r2, [pc, #328]	; (8007d70 <HAL_DMA_IRQHandler+0x434>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d10a      	bne.n	8007c40 <HAL_DMA_IRQHandler+0x304>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf14      	ite	ne
 8007c38:	2301      	movne	r3, #1
 8007c3a:	2300      	moveq	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	e003      	b.n	8007c48 <HAL_DMA_IRQHandler+0x30c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00d      	beq.n	8007c68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2201      	movs	r2, #1
 8007c56:	409a      	lsls	r2, r3
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	f043 0202 	orr.w	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2204      	movs	r2, #4
 8007c72:	409a      	lsls	r2, r3
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 808f 	beq.w	8007d9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2c      	ldr	r2, [pc, #176]	; (8007d34 <HAL_DMA_IRQHandler+0x3f8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d04a      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	; (8007d38 <HAL_DMA_IRQHandler+0x3fc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d045      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a29      	ldr	r2, [pc, #164]	; (8007d3c <HAL_DMA_IRQHandler+0x400>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d040      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <HAL_DMA_IRQHandler+0x404>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a26      	ldr	r2, [pc, #152]	; (8007d44 <HAL_DMA_IRQHandler+0x408>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d036      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a24      	ldr	r2, [pc, #144]	; (8007d48 <HAL_DMA_IRQHandler+0x40c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d031      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a23      	ldr	r2, [pc, #140]	; (8007d4c <HAL_DMA_IRQHandler+0x410>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d02c      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <HAL_DMA_IRQHandler+0x414>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d027      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <HAL_DMA_IRQHandler+0x418>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d022      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <HAL_DMA_IRQHandler+0x41c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1d      	ldr	r2, [pc, #116]	; (8007d5c <HAL_DMA_IRQHandler+0x420>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <HAL_DMA_IRQHandler+0x424>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1a      	ldr	r2, [pc, #104]	; (8007d64 <HAL_DMA_IRQHandler+0x428>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a18      	ldr	r2, [pc, #96]	; (8007d68 <HAL_DMA_IRQHandler+0x42c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a17      	ldr	r2, [pc, #92]	; (8007d6c <HAL_DMA_IRQHandler+0x430>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x3e2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <HAL_DMA_IRQHandler+0x434>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d12a      	bne.n	8007d74 <HAL_DMA_IRQHandler+0x438>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf14      	ite	ne
 8007d2c:	2301      	movne	r3, #1
 8007d2e:	2300      	moveq	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	e023      	b.n	8007d7c <HAL_DMA_IRQHandler+0x440>
 8007d34:	40020010 	.word	0x40020010
 8007d38:	40020028 	.word	0x40020028
 8007d3c:	40020040 	.word	0x40020040
 8007d40:	40020058 	.word	0x40020058
 8007d44:	40020070 	.word	0x40020070
 8007d48:	40020088 	.word	0x40020088
 8007d4c:	400200a0 	.word	0x400200a0
 8007d50:	400200b8 	.word	0x400200b8
 8007d54:	40020410 	.word	0x40020410
 8007d58:	40020428 	.word	0x40020428
 8007d5c:	40020440 	.word	0x40020440
 8007d60:	40020458 	.word	0x40020458
 8007d64:	40020470 	.word	0x40020470
 8007d68:	40020488 	.word	0x40020488
 8007d6c:	400204a0 	.word	0x400204a0
 8007d70:	400204b8 	.word	0x400204b8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00d      	beq.n	8007d9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d84:	f003 031f 	and.w	r3, r3, #31
 8007d88:	2204      	movs	r2, #4
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f043 0204 	orr.w	r2, r3, #4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	f003 031f 	and.w	r3, r3, #31
 8007da4:	2210      	movs	r2, #16
 8007da6:	409a      	lsls	r2, r3
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80a6 	beq.w	8007efe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a85      	ldr	r2, [pc, #532]	; (8007fcc <HAL_DMA_IRQHandler+0x690>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d04a      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a83      	ldr	r2, [pc, #524]	; (8007fd0 <HAL_DMA_IRQHandler+0x694>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d045      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a82      	ldr	r2, [pc, #520]	; (8007fd4 <HAL_DMA_IRQHandler+0x698>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d040      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a80      	ldr	r2, [pc, #512]	; (8007fd8 <HAL_DMA_IRQHandler+0x69c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d03b      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a7f      	ldr	r2, [pc, #508]	; (8007fdc <HAL_DMA_IRQHandler+0x6a0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d036      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a7d      	ldr	r2, [pc, #500]	; (8007fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d031      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a7c      	ldr	r2, [pc, #496]	; (8007fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d02c      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a7a      	ldr	r2, [pc, #488]	; (8007fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a79      	ldr	r2, [pc, #484]	; (8007fec <HAL_DMA_IRQHandler+0x6b0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d022      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a77      	ldr	r2, [pc, #476]	; (8007ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d01d      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a76      	ldr	r2, [pc, #472]	; (8007ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d018      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a74      	ldr	r2, [pc, #464]	; (8007ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a73      	ldr	r2, [pc, #460]	; (8007ffc <HAL_DMA_IRQHandler+0x6c0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00e      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a71      	ldr	r2, [pc, #452]	; (8008000 <HAL_DMA_IRQHandler+0x6c4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a70      	ldr	r2, [pc, #448]	; (8008004 <HAL_DMA_IRQHandler+0x6c8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_DMA_IRQHandler+0x516>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a6e      	ldr	r2, [pc, #440]	; (8008008 <HAL_DMA_IRQHandler+0x6cc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d10a      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x52c>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf14      	ite	ne
 8007e60:	2301      	movne	r3, #1
 8007e62:	2300      	moveq	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e009      	b.n	8007e7c <HAL_DMA_IRQHandler+0x540>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bf14      	ite	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	2300      	moveq	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d03e      	beq.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2210      	movs	r2, #16
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d018      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d024      	beq.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
 8007ebc:	e01f      	b.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01b      	beq.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
 8007ece:	e016      	b.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0208 	bic.w	r2, r2, #8
 8007eec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2220      	movs	r2, #32
 8007f08:	409a      	lsls	r2, r3
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8110 	beq.w	8008134 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <HAL_DMA_IRQHandler+0x690>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d04a      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <HAL_DMA_IRQHandler+0x694>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d045      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a29      	ldr	r2, [pc, #164]	; (8007fd4 <HAL_DMA_IRQHandler+0x698>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d040      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a28      	ldr	r2, [pc, #160]	; (8007fd8 <HAL_DMA_IRQHandler+0x69c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d03b      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <HAL_DMA_IRQHandler+0x6a0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d036      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d031      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a23      	ldr	r2, [pc, #140]	; (8007fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02c      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d027      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_DMA_IRQHandler+0x6b0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d022      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d01d      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d018      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_DMA_IRQHandler+0x6c0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_DMA_IRQHandler+0x6c4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a17      	ldr	r2, [pc, #92]	; (8008004 <HAL_DMA_IRQHandler+0x6c8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x678>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a16      	ldr	r2, [pc, #88]	; (8008008 <HAL_DMA_IRQHandler+0x6cc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d12b      	bne.n	800800c <HAL_DMA_IRQHandler+0x6d0>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	e02a      	b.n	8008020 <HAL_DMA_IRQHandler+0x6e4>
 8007fca:	bf00      	nop
 8007fcc:	40020010 	.word	0x40020010
 8007fd0:	40020028 	.word	0x40020028
 8007fd4:	40020040 	.word	0x40020040
 8007fd8:	40020058 	.word	0x40020058
 8007fdc:	40020070 	.word	0x40020070
 8007fe0:	40020088 	.word	0x40020088
 8007fe4:	400200a0 	.word	0x400200a0
 8007fe8:	400200b8 	.word	0x400200b8
 8007fec:	40020410 	.word	0x40020410
 8007ff0:	40020428 	.word	0x40020428
 8007ff4:	40020440 	.word	0x40020440
 8007ff8:	40020458 	.word	0x40020458
 8007ffc:	40020470 	.word	0x40020470
 8008000:	40020488 	.word	0x40020488
 8008004:	400204a0 	.word	0x400204a0
 8008008:	400204b8 	.word	0x400204b8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf14      	ite	ne
 800801a:	2301      	movne	r3, #1
 800801c:	2300      	moveq	r3, #0
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8087 	beq.w	8008134 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802a:	f003 031f 	and.w	r3, r3, #31
 800802e:	2220      	movs	r2, #32
 8008030:	409a      	lsls	r2, r3
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b04      	cmp	r3, #4
 8008040:	d139      	bne.n	80080b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0216 	bic.w	r2, r2, #22
 8008050:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008060:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <HAL_DMA_IRQHandler+0x736>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0208 	bic.w	r2, r2, #8
 8008080:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	223f      	movs	r2, #63	; 0x3f
 800808c:	409a      	lsls	r2, r3
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 834a 	beq.w	8008740 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
          }
          return;
 80080b4:	e344      	b.n	8008740 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d018      	beq.n	80080f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d108      	bne.n	80080e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d02c      	beq.n	8008134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	e027      	b.n	8008134 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d023      	beq.n	8008134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	e01e      	b.n	8008134 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10f      	bne.n	8008124 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0210 	bic.w	r2, r2, #16
 8008112:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8306 	beq.w	800874a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8088 	beq.w	800825c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2204      	movs	r2, #4
 8008150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a7a      	ldr	r2, [pc, #488]	; (8008344 <HAL_DMA_IRQHandler+0xa08>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d04a      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a79      	ldr	r2, [pc, #484]	; (8008348 <HAL_DMA_IRQHandler+0xa0c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d045      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a77      	ldr	r2, [pc, #476]	; (800834c <HAL_DMA_IRQHandler+0xa10>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d040      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a76      	ldr	r2, [pc, #472]	; (8008350 <HAL_DMA_IRQHandler+0xa14>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d03b      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a74      	ldr	r2, [pc, #464]	; (8008354 <HAL_DMA_IRQHandler+0xa18>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d036      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a73      	ldr	r2, [pc, #460]	; (8008358 <HAL_DMA_IRQHandler+0xa1c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d031      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a71      	ldr	r2, [pc, #452]	; (800835c <HAL_DMA_IRQHandler+0xa20>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d02c      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a70      	ldr	r2, [pc, #448]	; (8008360 <HAL_DMA_IRQHandler+0xa24>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d027      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6e      	ldr	r2, [pc, #440]	; (8008364 <HAL_DMA_IRQHandler+0xa28>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d022      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6d      	ldr	r2, [pc, #436]	; (8008368 <HAL_DMA_IRQHandler+0xa2c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d01d      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6b      	ldr	r2, [pc, #428]	; (800836c <HAL_DMA_IRQHandler+0xa30>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d018      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6a      	ldr	r2, [pc, #424]	; (8008370 <HAL_DMA_IRQHandler+0xa34>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a68      	ldr	r2, [pc, #416]	; (8008374 <HAL_DMA_IRQHandler+0xa38>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00e      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a67      	ldr	r2, [pc, #412]	; (8008378 <HAL_DMA_IRQHandler+0xa3c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a65      	ldr	r2, [pc, #404]	; (800837c <HAL_DMA_IRQHandler+0xa40>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x8b8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a64      	ldr	r2, [pc, #400]	; (8008380 <HAL_DMA_IRQHandler+0xa44>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <HAL_DMA_IRQHandler+0x8ca>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e007      	b.n	8008216 <HAL_DMA_IRQHandler+0x8da>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821e:	429a      	cmp	r2, r3
 8008220:	d307      	bcc.n	8008232 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f2      	bne.n	8008216 <HAL_DMA_IRQHandler+0x8da>
 8008230:	e000      	b.n	8008234 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008232:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2203      	movs	r2, #3
 8008246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800824a:	e003      	b.n	8008254 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8272 	beq.w	800874a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
 800826e:	e26c      	b.n	800874a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a43      	ldr	r2, [pc, #268]	; (8008384 <HAL_DMA_IRQHandler+0xa48>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d022      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a42      	ldr	r2, [pc, #264]	; (8008388 <HAL_DMA_IRQHandler+0xa4c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d01d      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a40      	ldr	r2, [pc, #256]	; (800838c <HAL_DMA_IRQHandler+0xa50>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d018      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a3f      	ldr	r2, [pc, #252]	; (8008390 <HAL_DMA_IRQHandler+0xa54>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d013      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a3d      	ldr	r2, [pc, #244]	; (8008394 <HAL_DMA_IRQHandler+0xa58>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00e      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3c      	ldr	r2, [pc, #240]	; (8008398 <HAL_DMA_IRQHandler+0xa5c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d009      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a3a      	ldr	r2, [pc, #232]	; (800839c <HAL_DMA_IRQHandler+0xa60>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x984>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a39      	ldr	r2, [pc, #228]	; (80083a0 <HAL_DMA_IRQHandler+0xa64>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d101      	bne.n	80082c4 <HAL_DMA_IRQHandler+0x988>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <HAL_DMA_IRQHandler+0x98a>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 823f 	beq.w	800874a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	2204      	movs	r2, #4
 80082de:	409a      	lsls	r2, r3
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 80cd 	beq.w	8008484 <HAL_DMA_IRQHandler+0xb48>
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80c7 	beq.w	8008484 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fa:	f003 031f 	and.w	r3, r3, #31
 80082fe:	2204      	movs	r2, #4
 8008300:	409a      	lsls	r2, r3
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d049      	beq.n	80083a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d109      	bne.n	800832e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8210 	beq.w	8008744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800832c:	e20a      	b.n	8008744 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8206 	beq.w	8008744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008340:	e200      	b.n	8008744 <HAL_DMA_IRQHandler+0xe08>
 8008342:	bf00      	nop
 8008344:	40020010 	.word	0x40020010
 8008348:	40020028 	.word	0x40020028
 800834c:	40020040 	.word	0x40020040
 8008350:	40020058 	.word	0x40020058
 8008354:	40020070 	.word	0x40020070
 8008358:	40020088 	.word	0x40020088
 800835c:	400200a0 	.word	0x400200a0
 8008360:	400200b8 	.word	0x400200b8
 8008364:	40020410 	.word	0x40020410
 8008368:	40020428 	.word	0x40020428
 800836c:	40020440 	.word	0x40020440
 8008370:	40020458 	.word	0x40020458
 8008374:	40020470 	.word	0x40020470
 8008378:	40020488 	.word	0x40020488
 800837c:	400204a0 	.word	0x400204a0
 8008380:	400204b8 	.word	0x400204b8
 8008384:	58025408 	.word	0x58025408
 8008388:	5802541c 	.word	0x5802541c
 800838c:	58025430 	.word	0x58025430
 8008390:	58025444 	.word	0x58025444
 8008394:	58025458 	.word	0x58025458
 8008398:	5802546c 	.word	0x5802546c
 800839c:	58025480 	.word	0x58025480
 80083a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d160      	bne.n	8008470 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a7f      	ldr	r2, [pc, #508]	; (80085b0 <HAL_DMA_IRQHandler+0xc74>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d04a      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a7d      	ldr	r2, [pc, #500]	; (80085b4 <HAL_DMA_IRQHandler+0xc78>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d045      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a7c      	ldr	r2, [pc, #496]	; (80085b8 <HAL_DMA_IRQHandler+0xc7c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d040      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a7a      	ldr	r2, [pc, #488]	; (80085bc <HAL_DMA_IRQHandler+0xc80>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d03b      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a79      	ldr	r2, [pc, #484]	; (80085c0 <HAL_DMA_IRQHandler+0xc84>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d036      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a77      	ldr	r2, [pc, #476]	; (80085c4 <HAL_DMA_IRQHandler+0xc88>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d031      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a76      	ldr	r2, [pc, #472]	; (80085c8 <HAL_DMA_IRQHandler+0xc8c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d02c      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a74      	ldr	r2, [pc, #464]	; (80085cc <HAL_DMA_IRQHandler+0xc90>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d027      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a73      	ldr	r2, [pc, #460]	; (80085d0 <HAL_DMA_IRQHandler+0xc94>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d022      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a71      	ldr	r2, [pc, #452]	; (80085d4 <HAL_DMA_IRQHandler+0xc98>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01d      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a70      	ldr	r2, [pc, #448]	; (80085d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d018      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a6e      	ldr	r2, [pc, #440]	; (80085dc <HAL_DMA_IRQHandler+0xca0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a6d      	ldr	r2, [pc, #436]	; (80085e0 <HAL_DMA_IRQHandler+0xca4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00e      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a6b      	ldr	r2, [pc, #428]	; (80085e4 <HAL_DMA_IRQHandler+0xca8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d009      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6a      	ldr	r2, [pc, #424]	; (80085e8 <HAL_DMA_IRQHandler+0xcac>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d004      	beq.n	800844e <HAL_DMA_IRQHandler+0xb12>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a68      	ldr	r2, [pc, #416]	; (80085ec <HAL_DMA_IRQHandler+0xcb0>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d108      	bne.n	8008460 <HAL_DMA_IRQHandler+0xb24>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0208 	bic.w	r2, r2, #8
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e007      	b.n	8008470 <HAL_DMA_IRQHandler+0xb34>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0204 	bic.w	r2, r2, #4
 800846e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8165 	beq.w	8008744 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008482:	e15f      	b.n	8008744 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	2202      	movs	r2, #2
 800848e:	409a      	lsls	r2, r3
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	4013      	ands	r3, r2
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80c5 	beq.w	8008624 <HAL_DMA_IRQHandler+0xce8>
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80bf 	beq.w	8008624 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084aa:	f003 031f 	and.w	r3, r3, #31
 80084ae:	2202      	movs	r2, #2
 80084b0:	409a      	lsls	r2, r3
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d018      	beq.n	80084f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d109      	bne.n	80084de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 813a 	beq.w	8008748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084dc:	e134      	b.n	8008748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8130 	beq.w	8008748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f0:	e12a      	b.n	8008748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 8089 	bne.w	8008610 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <HAL_DMA_IRQHandler+0xc74>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d04a      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <HAL_DMA_IRQHandler+0xc78>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d045      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a28      	ldr	r2, [pc, #160]	; (80085b8 <HAL_DMA_IRQHandler+0xc7c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d040      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a26      	ldr	r2, [pc, #152]	; (80085bc <HAL_DMA_IRQHandler+0xc80>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d03b      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a25      	ldr	r2, [pc, #148]	; (80085c0 <HAL_DMA_IRQHandler+0xc84>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d036      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a23      	ldr	r2, [pc, #140]	; (80085c4 <HAL_DMA_IRQHandler+0xc88>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d031      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a22      	ldr	r2, [pc, #136]	; (80085c8 <HAL_DMA_IRQHandler+0xc8c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d02c      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a20      	ldr	r2, [pc, #128]	; (80085cc <HAL_DMA_IRQHandler+0xc90>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d027      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <HAL_DMA_IRQHandler+0xc94>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <HAL_DMA_IRQHandler+0xc98>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01d      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1c      	ldr	r2, [pc, #112]	; (80085d8 <HAL_DMA_IRQHandler+0xc9c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1a      	ldr	r2, [pc, #104]	; (80085dc <HAL_DMA_IRQHandler+0xca0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a19      	ldr	r2, [pc, #100]	; (80085e0 <HAL_DMA_IRQHandler+0xca4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <HAL_DMA_IRQHandler+0xca8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a16      	ldr	r2, [pc, #88]	; (80085e8 <HAL_DMA_IRQHandler+0xcac>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_DMA_IRQHandler+0xc62>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a14      	ldr	r2, [pc, #80]	; (80085ec <HAL_DMA_IRQHandler+0xcb0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d128      	bne.n	80085f0 <HAL_DMA_IRQHandler+0xcb4>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0214 	bic.w	r2, r2, #20
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	e027      	b.n	8008600 <HAL_DMA_IRQHandler+0xcc4>
 80085b0:	40020010 	.word	0x40020010
 80085b4:	40020028 	.word	0x40020028
 80085b8:	40020040 	.word	0x40020040
 80085bc:	40020058 	.word	0x40020058
 80085c0:	40020070 	.word	0x40020070
 80085c4:	40020088 	.word	0x40020088
 80085c8:	400200a0 	.word	0x400200a0
 80085cc:	400200b8 	.word	0x400200b8
 80085d0:	40020410 	.word	0x40020410
 80085d4:	40020428 	.word	0x40020428
 80085d8:	40020440 	.word	0x40020440
 80085dc:	40020458 	.word	0x40020458
 80085e0:	40020470 	.word	0x40020470
 80085e4:	40020488 	.word	0x40020488
 80085e8:	400204a0 	.word	0x400204a0
 80085ec:	400204b8 	.word	0x400204b8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 020a 	bic.w	r2, r2, #10
 80085fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8097 	beq.w	8008748 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008622:	e091      	b.n	8008748 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	2208      	movs	r2, #8
 800862e:	409a      	lsls	r2, r3
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8088 	beq.w	800874a <HAL_DMA_IRQHandler+0xe0e>
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8082 	beq.w	800874a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a41      	ldr	r2, [pc, #260]	; (8008750 <HAL_DMA_IRQHandler+0xe14>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d04a      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a3f      	ldr	r2, [pc, #252]	; (8008754 <HAL_DMA_IRQHandler+0xe18>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d045      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a3e      	ldr	r2, [pc, #248]	; (8008758 <HAL_DMA_IRQHandler+0xe1c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d040      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a3c      	ldr	r2, [pc, #240]	; (800875c <HAL_DMA_IRQHandler+0xe20>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d03b      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a3b      	ldr	r2, [pc, #236]	; (8008760 <HAL_DMA_IRQHandler+0xe24>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d036      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a39      	ldr	r2, [pc, #228]	; (8008764 <HAL_DMA_IRQHandler+0xe28>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d031      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a38      	ldr	r2, [pc, #224]	; (8008768 <HAL_DMA_IRQHandler+0xe2c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d02c      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a36      	ldr	r2, [pc, #216]	; (800876c <HAL_DMA_IRQHandler+0xe30>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d027      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a35      	ldr	r2, [pc, #212]	; (8008770 <HAL_DMA_IRQHandler+0xe34>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a33      	ldr	r2, [pc, #204]	; (8008774 <HAL_DMA_IRQHandler+0xe38>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01d      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a32      	ldr	r2, [pc, #200]	; (8008778 <HAL_DMA_IRQHandler+0xe3c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a30      	ldr	r2, [pc, #192]	; (800877c <HAL_DMA_IRQHandler+0xe40>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d013      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a2f      	ldr	r2, [pc, #188]	; (8008780 <HAL_DMA_IRQHandler+0xe44>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00e      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <HAL_DMA_IRQHandler+0xe48>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a2c      	ldr	r2, [pc, #176]	; (8008788 <HAL_DMA_IRQHandler+0xe4c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d004      	beq.n	80086e6 <HAL_DMA_IRQHandler+0xdaa>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a2a      	ldr	r2, [pc, #168]	; (800878c <HAL_DMA_IRQHandler+0xe50>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d108      	bne.n	80086f8 <HAL_DMA_IRQHandler+0xdbc>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 021c 	bic.w	r2, r2, #28
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e007      	b.n	8008708 <HAL_DMA_IRQHandler+0xdcc>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 020e 	bic.w	r2, r2, #14
 8008706:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2201      	movs	r2, #1
 8008712:	409a      	lsls	r2, r3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	e004      	b.n	800874a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008740:	bf00      	nop
 8008742:	e002      	b.n	800874a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008744:	bf00      	nop
 8008746:	e000      	b.n	800874a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008748:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800874a:	3728      	adds	r7, #40	; 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40020010 	.word	0x40020010
 8008754:	40020028 	.word	0x40020028
 8008758:	40020040 	.word	0x40020040
 800875c:	40020058 	.word	0x40020058
 8008760:	40020070 	.word	0x40020070
 8008764:	40020088 	.word	0x40020088
 8008768:	400200a0 	.word	0x400200a0
 800876c:	400200b8 	.word	0x400200b8
 8008770:	40020410 	.word	0x40020410
 8008774:	40020428 	.word	0x40020428
 8008778:	40020440 	.word	0x40020440
 800877c:	40020458 	.word	0x40020458
 8008780:	40020470 	.word	0x40020470
 8008784:	40020488 	.word	0x40020488
 8008788:	400204a0 	.word	0x400204a0
 800878c:	400204b8 	.word	0x400204b8

08008790 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a7f      	ldr	r2, [pc, #508]	; (80089c4 <DMA_SetConfig+0x21c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d072      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a7d      	ldr	r2, [pc, #500]	; (80089c8 <DMA_SetConfig+0x220>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d06d      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a7c      	ldr	r2, [pc, #496]	; (80089cc <DMA_SetConfig+0x224>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d068      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a7a      	ldr	r2, [pc, #488]	; (80089d0 <DMA_SetConfig+0x228>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d063      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a79      	ldr	r2, [pc, #484]	; (80089d4 <DMA_SetConfig+0x22c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d05e      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a77      	ldr	r2, [pc, #476]	; (80089d8 <DMA_SetConfig+0x230>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d059      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a76      	ldr	r2, [pc, #472]	; (80089dc <DMA_SetConfig+0x234>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d054      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a74      	ldr	r2, [pc, #464]	; (80089e0 <DMA_SetConfig+0x238>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d04f      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a73      	ldr	r2, [pc, #460]	; (80089e4 <DMA_SetConfig+0x23c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d04a      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a71      	ldr	r2, [pc, #452]	; (80089e8 <DMA_SetConfig+0x240>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d045      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a70      	ldr	r2, [pc, #448]	; (80089ec <DMA_SetConfig+0x244>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d040      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a6e      	ldr	r2, [pc, #440]	; (80089f0 <DMA_SetConfig+0x248>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d03b      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a6d      	ldr	r2, [pc, #436]	; (80089f4 <DMA_SetConfig+0x24c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d036      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a6b      	ldr	r2, [pc, #428]	; (80089f8 <DMA_SetConfig+0x250>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d031      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a6a      	ldr	r2, [pc, #424]	; (80089fc <DMA_SetConfig+0x254>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d02c      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a68      	ldr	r2, [pc, #416]	; (8008a00 <DMA_SetConfig+0x258>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d027      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a67      	ldr	r2, [pc, #412]	; (8008a04 <DMA_SetConfig+0x25c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d022      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <DMA_SetConfig+0x260>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01d      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a64      	ldr	r2, [pc, #400]	; (8008a0c <DMA_SetConfig+0x264>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d018      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a62      	ldr	r2, [pc, #392]	; (8008a10 <DMA_SetConfig+0x268>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a61      	ldr	r2, [pc, #388]	; (8008a14 <DMA_SetConfig+0x26c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00e      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5f      	ldr	r2, [pc, #380]	; (8008a18 <DMA_SetConfig+0x270>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d009      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a5e      	ldr	r2, [pc, #376]	; (8008a1c <DMA_SetConfig+0x274>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d004      	beq.n	80088b2 <DMA_SetConfig+0x10a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5c      	ldr	r2, [pc, #368]	; (8008a20 <DMA_SetConfig+0x278>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d101      	bne.n	80088b6 <DMA_SetConfig+0x10e>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <DMA_SetConfig+0x110>
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00d      	beq.n	80088d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a39      	ldr	r2, [pc, #228]	; (80089c4 <DMA_SetConfig+0x21c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d04a      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <DMA_SetConfig+0x220>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d045      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a36      	ldr	r2, [pc, #216]	; (80089cc <DMA_SetConfig+0x224>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d040      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a35      	ldr	r2, [pc, #212]	; (80089d0 <DMA_SetConfig+0x228>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d03b      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a33      	ldr	r2, [pc, #204]	; (80089d4 <DMA_SetConfig+0x22c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d036      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a32      	ldr	r2, [pc, #200]	; (80089d8 <DMA_SetConfig+0x230>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d031      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a30      	ldr	r2, [pc, #192]	; (80089dc <DMA_SetConfig+0x234>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d02c      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a2f      	ldr	r2, [pc, #188]	; (80089e0 <DMA_SetConfig+0x238>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d027      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2d      	ldr	r2, [pc, #180]	; (80089e4 <DMA_SetConfig+0x23c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d022      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <DMA_SetConfig+0x240>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01d      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2a      	ldr	r2, [pc, #168]	; (80089ec <DMA_SetConfig+0x244>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d018      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a29      	ldr	r2, [pc, #164]	; (80089f0 <DMA_SetConfig+0x248>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d013      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a27      	ldr	r2, [pc, #156]	; (80089f4 <DMA_SetConfig+0x24c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00e      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a26      	ldr	r2, [pc, #152]	; (80089f8 <DMA_SetConfig+0x250>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d009      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a24      	ldr	r2, [pc, #144]	; (80089fc <DMA_SetConfig+0x254>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d004      	beq.n	8008978 <DMA_SetConfig+0x1d0>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a23      	ldr	r2, [pc, #140]	; (8008a00 <DMA_SetConfig+0x258>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d101      	bne.n	800897c <DMA_SetConfig+0x1d4>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <DMA_SetConfig+0x1d6>
 800897c:	2300      	movs	r3, #0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d059      	beq.n	8008a36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	223f      	movs	r2, #63	; 0x3f
 800898c:	409a      	lsls	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d138      	bne.n	8008a24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089c2:	e086      	b.n	8008ad2 <DMA_SetConfig+0x32a>
 80089c4:	40020010 	.word	0x40020010
 80089c8:	40020028 	.word	0x40020028
 80089cc:	40020040 	.word	0x40020040
 80089d0:	40020058 	.word	0x40020058
 80089d4:	40020070 	.word	0x40020070
 80089d8:	40020088 	.word	0x40020088
 80089dc:	400200a0 	.word	0x400200a0
 80089e0:	400200b8 	.word	0x400200b8
 80089e4:	40020410 	.word	0x40020410
 80089e8:	40020428 	.word	0x40020428
 80089ec:	40020440 	.word	0x40020440
 80089f0:	40020458 	.word	0x40020458
 80089f4:	40020470 	.word	0x40020470
 80089f8:	40020488 	.word	0x40020488
 80089fc:	400204a0 	.word	0x400204a0
 8008a00:	400204b8 	.word	0x400204b8
 8008a04:	58025408 	.word	0x58025408
 8008a08:	5802541c 	.word	0x5802541c
 8008a0c:	58025430 	.word	0x58025430
 8008a10:	58025444 	.word	0x58025444
 8008a14:	58025458 	.word	0x58025458
 8008a18:	5802546c 	.word	0x5802546c
 8008a1c:	58025480 	.word	0x58025480
 8008a20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]
}
 8008a34:	e04d      	b.n	8008ad2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a29      	ldr	r2, [pc, #164]	; (8008ae0 <DMA_SetConfig+0x338>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d022      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <DMA_SetConfig+0x33c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d01d      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <DMA_SetConfig+0x340>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d018      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a24      	ldr	r2, [pc, #144]	; (8008aec <DMA_SetConfig+0x344>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a23      	ldr	r2, [pc, #140]	; (8008af0 <DMA_SetConfig+0x348>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a21      	ldr	r2, [pc, #132]	; (8008af4 <DMA_SetConfig+0x34c>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a20      	ldr	r2, [pc, #128]	; (8008af8 <DMA_SetConfig+0x350>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <DMA_SetConfig+0x2de>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <DMA_SetConfig+0x354>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d101      	bne.n	8008a8a <DMA_SetConfig+0x2e2>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <DMA_SetConfig+0x2e4>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d020      	beq.n	8008ad2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	2201      	movs	r2, #1
 8008a9a:	409a      	lsls	r2, r3
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d108      	bne.n	8008ac2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	60da      	str	r2, [r3, #12]
}
 8008ac0:	e007      	b.n	8008ad2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	60da      	str	r2, [r3, #12]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	58025408 	.word	0x58025408
 8008ae4:	5802541c 	.word	0x5802541c
 8008ae8:	58025430 	.word	0x58025430
 8008aec:	58025444 	.word	0x58025444
 8008af0:	58025458 	.word	0x58025458
 8008af4:	5802546c 	.word	0x5802546c
 8008af8:	58025480 	.word	0x58025480
 8008afc:	58025494 	.word	0x58025494

08008b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a42      	ldr	r2, [pc, #264]	; (8008c18 <DMA_CalcBaseAndBitshift+0x118>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d04a      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a41      	ldr	r2, [pc, #260]	; (8008c1c <DMA_CalcBaseAndBitshift+0x11c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d045      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a3f      	ldr	r2, [pc, #252]	; (8008c20 <DMA_CalcBaseAndBitshift+0x120>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d040      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3e      	ldr	r2, [pc, #248]	; (8008c24 <DMA_CalcBaseAndBitshift+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d03b      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a3c      	ldr	r2, [pc, #240]	; (8008c28 <DMA_CalcBaseAndBitshift+0x128>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d036      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a3b      	ldr	r2, [pc, #236]	; (8008c2c <DMA_CalcBaseAndBitshift+0x12c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d031      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a39      	ldr	r2, [pc, #228]	; (8008c30 <DMA_CalcBaseAndBitshift+0x130>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d02c      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a38      	ldr	r2, [pc, #224]	; (8008c34 <DMA_CalcBaseAndBitshift+0x134>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d027      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a36      	ldr	r2, [pc, #216]	; (8008c38 <DMA_CalcBaseAndBitshift+0x138>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d022      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a35      	ldr	r2, [pc, #212]	; (8008c3c <DMA_CalcBaseAndBitshift+0x13c>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d01d      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a33      	ldr	r2, [pc, #204]	; (8008c40 <DMA_CalcBaseAndBitshift+0x140>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d018      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a32      	ldr	r2, [pc, #200]	; (8008c44 <DMA_CalcBaseAndBitshift+0x144>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a30      	ldr	r2, [pc, #192]	; (8008c48 <DMA_CalcBaseAndBitshift+0x148>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00e      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a2f      	ldr	r2, [pc, #188]	; (8008c4c <DMA_CalcBaseAndBitshift+0x14c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d009      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a2d      	ldr	r2, [pc, #180]	; (8008c50 <DMA_CalcBaseAndBitshift+0x150>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d004      	beq.n	8008ba8 <DMA_CalcBaseAndBitshift+0xa8>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	; (8008c54 <DMA_CalcBaseAndBitshift+0x154>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d101      	bne.n	8008bac <DMA_CalcBaseAndBitshift+0xac>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <DMA_CalcBaseAndBitshift+0xae>
 8008bac:	2300      	movs	r3, #0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d024      	beq.n	8008bfc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	3b10      	subs	r3, #16
 8008bba:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <DMA_CalcBaseAndBitshift+0x158>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	091b      	lsrs	r3, r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	4a24      	ldr	r2, [pc, #144]	; (8008c5c <DMA_CalcBaseAndBitshift+0x15c>)
 8008bcc:	5cd3      	ldrb	r3, [r2, r3]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d908      	bls.n	8008bec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	4b1f      	ldr	r3, [pc, #124]	; (8008c60 <DMA_CalcBaseAndBitshift+0x160>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	1d1a      	adds	r2, r3, #4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	659a      	str	r2, [r3, #88]	; 0x58
 8008bea:	e00d      	b.n	8008c08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <DMA_CalcBaseAndBitshift+0x160>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8008bfa:	e005      	b.n	8008c08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	40020010 	.word	0x40020010
 8008c1c:	40020028 	.word	0x40020028
 8008c20:	40020040 	.word	0x40020040
 8008c24:	40020058 	.word	0x40020058
 8008c28:	40020070 	.word	0x40020070
 8008c2c:	40020088 	.word	0x40020088
 8008c30:	400200a0 	.word	0x400200a0
 8008c34:	400200b8 	.word	0x400200b8
 8008c38:	40020410 	.word	0x40020410
 8008c3c:	40020428 	.word	0x40020428
 8008c40:	40020440 	.word	0x40020440
 8008c44:	40020458 	.word	0x40020458
 8008c48:	40020470 	.word	0x40020470
 8008c4c:	40020488 	.word	0x40020488
 8008c50:	400204a0 	.word	0x400204a0
 8008c54:	400204b8 	.word	0x400204b8
 8008c58:	aaaaaaab 	.word	0xaaaaaaab
 8008c5c:	08017c4c 	.word	0x08017c4c
 8008c60:	fffffc00 	.word	0xfffffc00

08008c64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d120      	bne.n	8008cba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d858      	bhi.n	8008d32 <DMA_CheckFifoParam+0xce>
 8008c80:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <DMA_CheckFifoParam+0x24>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008cab 	.word	0x08008cab
 8008c90:	08008c99 	.word	0x08008c99
 8008c94:	08008d33 	.word	0x08008d33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d048      	beq.n	8008d36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ca8:	e045      	b.n	8008d36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cb2:	d142      	bne.n	8008d3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cb8:	e03f      	b.n	8008d3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc2:	d123      	bne.n	8008d0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d838      	bhi.n	8008d3e <DMA_CheckFifoParam+0xda>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <DMA_CheckFifoParam+0x70>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ceb 	.word	0x08008ceb
 8008cdc:	08008ce5 	.word	0x08008ce5
 8008ce0:	08008cfd 	.word	0x08008cfd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
        break;
 8008ce8:	e030      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d025      	beq.n	8008d42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cfa:	e022      	b.n	8008d42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d04:	d11f      	bne.n	8008d46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d0a:	e01c      	b.n	8008d46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d902      	bls.n	8008d1a <DMA_CheckFifoParam+0xb6>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d003      	beq.n	8008d20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d18:	e018      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d1e:	e015      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00e      	beq.n	8008d4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d30:	e00b      	b.n	8008d4a <DMA_CheckFifoParam+0xe6>
        break;
 8008d32:	bf00      	nop
 8008d34:	e00a      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        break;
 8008d36:	bf00      	nop
 8008d38:	e008      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        break;
 8008d3a:	bf00      	nop
 8008d3c:	e006      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        break;
 8008d3e:	bf00      	nop
 8008d40:	e004      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        break;
 8008d42:	bf00      	nop
 8008d44:	e002      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
        break;
 8008d46:	bf00      	nop
 8008d48:	e000      	b.n	8008d4c <DMA_CheckFifoParam+0xe8>
    break;
 8008d4a:	bf00      	nop
    }
  }

  return status;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop

08008d5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a38      	ldr	r2, [pc, #224]	; (8008e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d022      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a36      	ldr	r2, [pc, #216]	; (8008e54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d01d      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a35      	ldr	r2, [pc, #212]	; (8008e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d018      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a33      	ldr	r2, [pc, #204]	; (8008e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d013      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a32      	ldr	r2, [pc, #200]	; (8008e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00e      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a30      	ldr	r2, [pc, #192]	; (8008e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d009      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a2f      	ldr	r2, [pc, #188]	; (8008e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d004      	beq.n	8008dba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a2d      	ldr	r2, [pc, #180]	; (8008e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d101      	bne.n	8008dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d01a      	beq.n	8008dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	3b08      	subs	r3, #8
 8008dcc:	4a28      	ldr	r2, [pc, #160]	; (8008e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	091b      	lsrs	r3, r3, #4
 8008dd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4b26      	ldr	r3, [pc, #152]	; (8008e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	461a      	mov	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a24      	ldr	r2, [pc, #144]	; (8008e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008de8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	2201      	movs	r2, #1
 8008df2:	409a      	lsls	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008df8:	e024      	b.n	8008e44 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	3b10      	subs	r3, #16
 8008e02:	4a1e      	ldr	r2, [pc, #120]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e04:	fba2 2303 	umull	r2, r3, r2, r3
 8008e08:	091b      	lsrs	r3, r3, #4
 8008e0a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d806      	bhi.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4a1b      	ldr	r2, [pc, #108]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d902      	bls.n	8008e22 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	409a      	lsls	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	58025408 	.word	0x58025408
 8008e54:	5802541c 	.word	0x5802541c
 8008e58:	58025430 	.word	0x58025430
 8008e5c:	58025444 	.word	0x58025444
 8008e60:	58025458 	.word	0x58025458
 8008e64:	5802546c 	.word	0x5802546c
 8008e68:	58025480 	.word	0x58025480
 8008e6c:	58025494 	.word	0x58025494
 8008e70:	cccccccd 	.word	0xcccccccd
 8008e74:	16009600 	.word	0x16009600
 8008e78:	58025880 	.word	0x58025880
 8008e7c:	aaaaaaab 	.word	0xaaaaaaab
 8008e80:	400204b8 	.word	0x400204b8
 8008e84:	4002040f 	.word	0x4002040f
 8008e88:	10008200 	.word	0x10008200
 8008e8c:	40020880 	.word	0x40020880

08008e90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d04a      	beq.n	8008f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d847      	bhi.n	8008f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a25      	ldr	r2, [pc, #148]	; (8008f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d022      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a24      	ldr	r2, [pc, #144]	; (8008f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d01d      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a22      	ldr	r2, [pc, #136]	; (8008f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d018      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a21      	ldr	r2, [pc, #132]	; (8008f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00e      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d009      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	; (8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d101      	bne.n	8008f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e000      	b.n	8008f02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f00:	2300      	movs	r3, #0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4b17      	ldr	r3, [pc, #92]	; (8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f0a:	4413      	add	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f18:	671a      	str	r2, [r3, #112]	; 0x70
 8008f1a:	e009      	b.n	8008f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a11      	ldr	r2, [pc, #68]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	2201      	movs	r2, #1
 8008f36:	409a      	lsls	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	58025408 	.word	0x58025408
 8008f4c:	5802541c 	.word	0x5802541c
 8008f50:	58025430 	.word	0x58025430
 8008f54:	58025444 	.word	0x58025444
 8008f58:	58025458 	.word	0x58025458
 8008f5c:	5802546c 	.word	0x5802546c
 8008f60:	58025480 	.word	0x58025480
 8008f64:	58025494 	.word	0x58025494
 8008f68:	1600963f 	.word	0x1600963f
 8008f6c:	58025940 	.word	0x58025940
 8008f70:	1000823f 	.word	0x1000823f
 8008f74:	40020940 	.word	0x40020940

08008f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b089      	sub	sp, #36	; 0x24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f86:	4b89      	ldr	r3, [pc, #548]	; (80091ac <HAL_GPIO_Init+0x234>)
 8008f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f8a:	e194      	b.n	80092b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	2101      	movs	r1, #1
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	fa01 f303 	lsl.w	r3, r1, r3
 8008f98:	4013      	ands	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 8186 	beq.w	80092b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f003 0303 	and.w	r3, r3, #3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d005      	beq.n	8008fbc <HAL_GPIO_Init+0x44>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d130      	bne.n	800901e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	2203      	movs	r2, #3
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	4013      	ands	r3, r2
 8009000:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	091b      	lsrs	r3, r3, #4
 8009008:	f003 0201 	and.w	r2, r3, #1
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4313      	orrs	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d017      	beq.n	800905a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	2203      	movs	r2, #3
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	4013      	ands	r3, r2
 8009040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	fa02 f303 	lsl.w	r3, r2, r3
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	4313      	orrs	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d123      	bne.n	80090ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	08da      	lsrs	r2, r3, #3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3208      	adds	r2, #8
 800906e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	220f      	movs	r2, #15
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43db      	mvns	r3, r3
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	4013      	ands	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	691a      	ldr	r2, [r3, #16]
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	4313      	orrs	r3, r2
 800909e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	08da      	lsrs	r2, r3, #3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3208      	adds	r2, #8
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	2203      	movs	r2, #3
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43db      	mvns	r3, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	4013      	ands	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f003 0203 	and.w	r2, r3, #3
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	fa02 f303 	lsl.w	r3, r2, r3
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	4313      	orrs	r3, r2
 80090da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80e0 	beq.w	80092b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090f0:	4b2f      	ldr	r3, [pc, #188]	; (80091b0 <HAL_GPIO_Init+0x238>)
 80090f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090f6:	4a2e      	ldr	r2, [pc, #184]	; (80091b0 <HAL_GPIO_Init+0x238>)
 80090f8:	f043 0302 	orr.w	r3, r3, #2
 80090fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009100:	4b2b      	ldr	r3, [pc, #172]	; (80091b0 <HAL_GPIO_Init+0x238>)
 8009102:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800910e:	4a29      	ldr	r2, [pc, #164]	; (80091b4 <HAL_GPIO_Init+0x23c>)
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	089b      	lsrs	r3, r3, #2
 8009114:	3302      	adds	r3, #2
 8009116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800911a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	220f      	movs	r2, #15
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	43db      	mvns	r3, r3
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4013      	ands	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a20      	ldr	r2, [pc, #128]	; (80091b8 <HAL_GPIO_Init+0x240>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d052      	beq.n	80091e0 <HAL_GPIO_Init+0x268>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1f      	ldr	r2, [pc, #124]	; (80091bc <HAL_GPIO_Init+0x244>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d031      	beq.n	80091a6 <HAL_GPIO_Init+0x22e>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <HAL_GPIO_Init+0x248>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d02b      	beq.n	80091a2 <HAL_GPIO_Init+0x22a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <HAL_GPIO_Init+0x24c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d025      	beq.n	800919e <HAL_GPIO_Init+0x226>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <HAL_GPIO_Init+0x250>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01f      	beq.n	800919a <HAL_GPIO_Init+0x222>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <HAL_GPIO_Init+0x254>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d019      	beq.n	8009196 <HAL_GPIO_Init+0x21e>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <HAL_GPIO_Init+0x258>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <HAL_GPIO_Init+0x21a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <HAL_GPIO_Init+0x25c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00d      	beq.n	800918e <HAL_GPIO_Init+0x216>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_GPIO_Init+0x260>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d007      	beq.n	800918a <HAL_GPIO_Init+0x212>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a17      	ldr	r2, [pc, #92]	; (80091dc <HAL_GPIO_Init+0x264>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d101      	bne.n	8009186 <HAL_GPIO_Init+0x20e>
 8009182:	2309      	movs	r3, #9
 8009184:	e02d      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 8009186:	230a      	movs	r3, #10
 8009188:	e02b      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 800918a:	2308      	movs	r3, #8
 800918c:	e029      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 800918e:	2307      	movs	r3, #7
 8009190:	e027      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 8009192:	2306      	movs	r3, #6
 8009194:	e025      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 8009196:	2305      	movs	r3, #5
 8009198:	e023      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 800919a:	2304      	movs	r3, #4
 800919c:	e021      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 800919e:	2303      	movs	r3, #3
 80091a0:	e01f      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e01d      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e01b      	b.n	80091e2 <HAL_GPIO_Init+0x26a>
 80091aa:	bf00      	nop
 80091ac:	58000080 	.word	0x58000080
 80091b0:	58024400 	.word	0x58024400
 80091b4:	58000400 	.word	0x58000400
 80091b8:	58020000 	.word	0x58020000
 80091bc:	58020400 	.word	0x58020400
 80091c0:	58020800 	.word	0x58020800
 80091c4:	58020c00 	.word	0x58020c00
 80091c8:	58021000 	.word	0x58021000
 80091cc:	58021400 	.word	0x58021400
 80091d0:	58021800 	.word	0x58021800
 80091d4:	58021c00 	.word	0x58021c00
 80091d8:	58022000 	.word	0x58022000
 80091dc:	58022400 	.word	0x58022400
 80091e0:	2300      	movs	r3, #0
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	f002 0203 	and.w	r2, r2, #3
 80091e8:	0092      	lsls	r2, r2, #2
 80091ea:	4093      	lsls	r3, r2
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091f2:	4938      	ldr	r1, [pc, #224]	; (80092d4 <HAL_GPIO_Init+0x35c>)
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	3302      	adds	r3, #2
 80091fa:	69ba      	ldr	r2, [r7, #24]
 80091fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	43db      	mvns	r3, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	4013      	ands	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800922e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	43db      	mvns	r3, r3
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	4013      	ands	r3, r2
 800923e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	4313      	orrs	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	43db      	mvns	r3, r3
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	4013      	ands	r3, r2
 800926a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	43db      	mvns	r3, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4013      	ands	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	3301      	adds	r3, #1
 80092b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f ae63 	bne.w	8008f8c <HAL_GPIO_Init+0x14>
  }
}
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
 80092ca:	3724      	adds	r7, #36	; 0x24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	58000400 	.word	0x58000400

080092d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	887b      	ldrh	r3, [r7, #2]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e001      	b.n	80092fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	807b      	strh	r3, [r7, #2]
 8009314:	4613      	mov	r3, r2
 8009316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009318:	787b      	ldrb	r3, [r7, #1]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800931e:	887a      	ldrh	r2, [r7, #2]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009324:	e003      	b.n	800932e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009326:	887b      	ldrh	r3, [r7, #2]
 8009328:	041a      	lsls	r2, r3, #16
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	619a      	str	r2, [r3, #24]
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800933a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800933c:	b08f      	sub	sp, #60	; 0x3c
 800933e:	af0a      	add	r7, sp, #40	; 0x28
 8009340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e054      	b.n	80093f6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d106      	bne.n	800936c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fb fa76 	bl	8004858 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2203      	movs	r2, #3
 8009370:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4618      	mov	r0, r3
 800938c:	f00b faf3 	bl	8014976 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	687e      	ldr	r6, [r7, #4]
 8009398:	466d      	mov	r5, sp
 800939a:	f106 0410 	add.w	r4, r6, #16
 800939e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80093ae:	1d33      	adds	r3, r6, #4
 80093b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093b2:	6838      	ldr	r0, [r7, #0]
 80093b4:	f00b fa60 	bl	8014878 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2101      	movs	r1, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f00b faea 	bl	8014998 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	687e      	ldr	r6, [r7, #4]
 80093cc:	466d      	mov	r5, sp
 80093ce:	f106 0410 	add.w	r4, r6, #16
 80093d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80093da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80093de:	e885 0003 	stmia.w	r5, {r0, r1}
 80093e2:	1d33      	adds	r3, r6, #4
 80093e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093e6:	6838      	ldr	r0, [r7, #0]
 80093e8:	f00b fc92 	bl	8014d10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093fe <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093fe:	b590      	push	{r4, r7, lr}
 8009400:	b089      	sub	sp, #36	; 0x24
 8009402:	af04      	add	r7, sp, #16
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	4608      	mov	r0, r1
 8009408:	4611      	mov	r1, r2
 800940a:	461a      	mov	r2, r3
 800940c:	4603      	mov	r3, r0
 800940e:	70fb      	strb	r3, [r7, #3]
 8009410:	460b      	mov	r3, r1
 8009412:	70bb      	strb	r3, [r7, #2]
 8009414:	4613      	mov	r3, r2
 8009416:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_HCD_HC_Init+0x28>
 8009422:	2302      	movs	r3, #2
 8009424:	e076      	b.n	8009514 <HAL_HCD_HC_Init+0x116>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	212c      	movs	r1, #44	; 0x2c
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	4413      	add	r3, r2
 800943a:	333d      	adds	r3, #61	; 0x3d
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	212c      	movs	r1, #44	; 0x2c
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	4413      	add	r3, r2
 800944c:	3338      	adds	r3, #56	; 0x38
 800944e:	787a      	ldrb	r2, [r7, #1]
 8009450:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009452:	78fb      	ldrb	r3, [r7, #3]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	212c      	movs	r1, #44	; 0x2c
 8009458:	fb01 f303 	mul.w	r3, r1, r3
 800945c:	4413      	add	r3, r2
 800945e:	3340      	adds	r3, #64	; 0x40
 8009460:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009462:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	212c      	movs	r1, #44	; 0x2c
 800946a:	fb01 f303 	mul.w	r3, r1, r3
 800946e:	4413      	add	r3, r2
 8009470:	3339      	adds	r3, #57	; 0x39
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009476:	78fb      	ldrb	r3, [r7, #3]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	212c      	movs	r1, #44	; 0x2c
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	4413      	add	r3, r2
 8009482:	333f      	adds	r3, #63	; 0x3f
 8009484:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009488:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	78ba      	ldrb	r2, [r7, #2]
 800948e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009492:	b2d0      	uxtb	r0, r2
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	212c      	movs	r1, #44	; 0x2c
 8009498:	fb01 f303 	mul.w	r3, r1, r3
 800949c:	4413      	add	r3, r2
 800949e:	333a      	adds	r3, #58	; 0x3a
 80094a0:	4602      	mov	r2, r0
 80094a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80094a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da09      	bge.n	80094c0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	212c      	movs	r1, #44	; 0x2c
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	333b      	adds	r3, #59	; 0x3b
 80094ba:	2201      	movs	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e008      	b.n	80094d2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	212c      	movs	r1, #44	; 0x2c
 80094c6:	fb01 f303 	mul.w	r3, r1, r3
 80094ca:	4413      	add	r3, r2
 80094cc:	333b      	adds	r3, #59	; 0x3b
 80094ce:	2200      	movs	r2, #0
 80094d0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	212c      	movs	r1, #44	; 0x2c
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	333c      	adds	r3, #60	; 0x3c
 80094e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80094e4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	787c      	ldrb	r4, [r7, #1]
 80094ec:	78ba      	ldrb	r2, [r7, #2]
 80094ee:	78f9      	ldrb	r1, [r7, #3]
 80094f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4623      	mov	r3, r4
 8009502:	f00b fd87 	bl	8015014 <USB_HC_Init>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	bd90      	pop	{r4, r7, pc}

0800951c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <HAL_HCD_HC_Halt+0x1e>
 8009536:	2302      	movs	r3, #2
 8009538:	e00f      	b.n	800955a <HAL_HCD_HC_Halt+0x3e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f00b ffd9 	bl	8015502 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	461a      	mov	r2, r3
 8009572:	4603      	mov	r3, r0
 8009574:	70fb      	strb	r3, [r7, #3]
 8009576:	460b      	mov	r3, r1
 8009578:	70bb      	strb	r3, [r7, #2]
 800957a:	4613      	mov	r3, r2
 800957c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	212c      	movs	r1, #44	; 0x2c
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	4413      	add	r3, r2
 800958a:	333b      	adds	r3, #59	; 0x3b
 800958c:	78ba      	ldrb	r2, [r7, #2]
 800958e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	212c      	movs	r1, #44	; 0x2c
 8009596:	fb01 f303 	mul.w	r3, r1, r3
 800959a:	4413      	add	r3, r2
 800959c:	333f      	adds	r3, #63	; 0x3f
 800959e:	787a      	ldrb	r2, [r7, #1]
 80095a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80095a2:	7c3b      	ldrb	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d112      	bne.n	80095ce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	212c      	movs	r1, #44	; 0x2c
 80095ae:	fb01 f303 	mul.w	r3, r1, r3
 80095b2:	4413      	add	r3, r2
 80095b4:	3342      	adds	r3, #66	; 0x42
 80095b6:	2203      	movs	r2, #3
 80095b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	212c      	movs	r1, #44	; 0x2c
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	333d      	adds	r3, #61	; 0x3d
 80095c8:	7f3a      	ldrb	r2, [r7, #28]
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e008      	b.n	80095e0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	212c      	movs	r1, #44	; 0x2c
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	4413      	add	r3, r2
 80095da:	3342      	adds	r3, #66	; 0x42
 80095dc:	2202      	movs	r2, #2
 80095de:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80095e0:	787b      	ldrb	r3, [r7, #1]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	f200 80c6 	bhi.w	8009774 <HAL_HCD_HC_SubmitRequest+0x210>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009601 	.word	0x08009601
 80095f4:	08009761 	.word	0x08009761
 80095f8:	08009665 	.word	0x08009665
 80095fc:	080096e3 	.word	0x080096e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009600:	7c3b      	ldrb	r3, [r7, #16]
 8009602:	2b01      	cmp	r3, #1
 8009604:	f040 80b8 	bne.w	8009778 <HAL_HCD_HC_SubmitRequest+0x214>
 8009608:	78bb      	ldrb	r3, [r7, #2]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f040 80b4 	bne.w	8009778 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009610:	8b3b      	ldrh	r3, [r7, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d108      	bne.n	8009628 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	212c      	movs	r1, #44	; 0x2c
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	4413      	add	r3, r2
 8009622:	3355      	adds	r3, #85	; 0x55
 8009624:	2201      	movs	r2, #1
 8009626:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	212c      	movs	r1, #44	; 0x2c
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	3355      	adds	r3, #85	; 0x55
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d109      	bne.n	8009650 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	212c      	movs	r1, #44	; 0x2c
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	4413      	add	r3, r2
 8009648:	3342      	adds	r3, #66	; 0x42
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800964e:	e093      	b.n	8009778 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	212c      	movs	r1, #44	; 0x2c
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	3342      	adds	r3, #66	; 0x42
 800965e:	2202      	movs	r2, #2
 8009660:	701a      	strb	r2, [r3, #0]
      break;
 8009662:	e089      	b.n	8009778 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009664:	78bb      	ldrb	r3, [r7, #2]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d11d      	bne.n	80096a6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	212c      	movs	r1, #44	; 0x2c
 8009670:	fb01 f303 	mul.w	r3, r1, r3
 8009674:	4413      	add	r3, r2
 8009676:	3355      	adds	r3, #85	; 0x55
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	212c      	movs	r1, #44	; 0x2c
 8009684:	fb01 f303 	mul.w	r3, r1, r3
 8009688:	4413      	add	r3, r2
 800968a:	3342      	adds	r3, #66	; 0x42
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009690:	e073      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	212c      	movs	r1, #44	; 0x2c
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	4413      	add	r3, r2
 800969e:	3342      	adds	r3, #66	; 0x42
 80096a0:	2202      	movs	r2, #2
 80096a2:	701a      	strb	r2, [r3, #0]
      break;
 80096a4:	e069      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80096a6:	78fb      	ldrb	r3, [r7, #3]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	212c      	movs	r1, #44	; 0x2c
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	4413      	add	r3, r2
 80096b2:	3354      	adds	r3, #84	; 0x54
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	212c      	movs	r1, #44	; 0x2c
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	4413      	add	r3, r2
 80096c6:	3342      	adds	r3, #66	; 0x42
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
      break;
 80096cc:	e055      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	212c      	movs	r1, #44	; 0x2c
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	4413      	add	r3, r2
 80096da:	3342      	adds	r3, #66	; 0x42
 80096dc:	2202      	movs	r2, #2
 80096de:	701a      	strb	r2, [r3, #0]
      break;
 80096e0:	e04b      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80096e2:	78bb      	ldrb	r3, [r7, #2]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11d      	bne.n	8009724 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	212c      	movs	r1, #44	; 0x2c
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3355      	adds	r3, #85	; 0x55
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d109      	bne.n	8009710 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	212c      	movs	r1, #44	; 0x2c
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	3342      	adds	r3, #66	; 0x42
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800970e:	e034      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	212c      	movs	r1, #44	; 0x2c
 8009716:	fb01 f303 	mul.w	r3, r1, r3
 800971a:	4413      	add	r3, r2
 800971c:	3342      	adds	r3, #66	; 0x42
 800971e:	2202      	movs	r2, #2
 8009720:	701a      	strb	r2, [r3, #0]
      break;
 8009722:	e02a      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	212c      	movs	r1, #44	; 0x2c
 800972a:	fb01 f303 	mul.w	r3, r1, r3
 800972e:	4413      	add	r3, r2
 8009730:	3354      	adds	r3, #84	; 0x54
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	212c      	movs	r1, #44	; 0x2c
 800973e:	fb01 f303 	mul.w	r3, r1, r3
 8009742:	4413      	add	r3, r2
 8009744:	3342      	adds	r3, #66	; 0x42
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
      break;
 800974a:	e016      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	212c      	movs	r1, #44	; 0x2c
 8009752:	fb01 f303 	mul.w	r3, r1, r3
 8009756:	4413      	add	r3, r2
 8009758:	3342      	adds	r3, #66	; 0x42
 800975a:	2202      	movs	r2, #2
 800975c:	701a      	strb	r2, [r3, #0]
      break;
 800975e:	e00c      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	212c      	movs	r1, #44	; 0x2c
 8009766:	fb01 f303 	mul.w	r3, r1, r3
 800976a:	4413      	add	r3, r2
 800976c:	3342      	adds	r3, #66	; 0x42
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
      break;
 8009772:	e002      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009778:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	212c      	movs	r1, #44	; 0x2c
 8009780:	fb01 f303 	mul.w	r3, r1, r3
 8009784:	4413      	add	r3, r2
 8009786:	3344      	adds	r3, #68	; 0x44
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	8b3a      	ldrh	r2, [r7, #24]
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	202c      	movs	r0, #44	; 0x2c
 8009794:	fb00 f303 	mul.w	r3, r0, r3
 8009798:	440b      	add	r3, r1
 800979a:	334c      	adds	r3, #76	; 0x4c
 800979c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	212c      	movs	r1, #44	; 0x2c
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	3360      	adds	r3, #96	; 0x60
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	212c      	movs	r1, #44	; 0x2c
 80097b6:	fb01 f303 	mul.w	r3, r1, r3
 80097ba:	4413      	add	r3, r2
 80097bc:	3350      	adds	r3, #80	; 0x50
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	212c      	movs	r1, #44	; 0x2c
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	4413      	add	r3, r2
 80097ce:	3339      	adds	r3, #57	; 0x39
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	212c      	movs	r1, #44	; 0x2c
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	4413      	add	r3, r2
 80097e0:	3361      	adds	r3, #97	; 0x61
 80097e2:	2200      	movs	r2, #0
 80097e4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	222c      	movs	r2, #44	; 0x2c
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	3338      	adds	r3, #56	; 0x38
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	18d1      	adds	r1, r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	f00b fd2c 	bl	801525c <USB_HC_StartXfer>
 8009804:	4603      	mov	r3, r0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop

08009810 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4618      	mov	r0, r3
 8009828:	f00b fa30 	bl	8014c8c <USB_GetMode>
 800982c:	4603      	mov	r3, r0
 800982e:	2b01      	cmp	r3, #1
 8009830:	f040 80fa 	bne.w	8009a28 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f00b f9f3 	bl	8014c24 <USB_ReadInterrupts>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80f0 	beq.w	8009a26 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4618      	mov	r0, r3
 800984c:	f00b f9ea 	bl	8014c24 <USB_ReadInterrupts>
 8009850:	4603      	mov	r3, r0
 8009852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800985a:	d104      	bne.n	8009866 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f00b f9da 	bl	8014c24 <USB_ReadInterrupts>
 8009870:	4603      	mov	r3, r0
 8009872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800987a:	d104      	bne.n	8009886 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009884:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f00b f9ca 	bl	8014c24 <USB_ReadInterrupts>
 8009890:	4603      	mov	r3, r0
 8009892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800989a:	d104      	bne.n	80098a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80098a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f00b f9ba 	bl	8014c24 <USB_ReadInterrupts>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d103      	bne.n	80098c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2202      	movs	r2, #2
 80098c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f00b f9ac 	bl	8014c24 <USB_ReadInterrupts>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d6:	d120      	bne.n	800991a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80098e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d113      	bne.n	800991a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80098f2:	2110      	movs	r1, #16
 80098f4:	6938      	ldr	r0, [r7, #16]
 80098f6:	f00b f89b 	bl	8014a30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80098fa:	6938      	ldr	r0, [r7, #16]
 80098fc:	f00b f8cc 	bl	8014a98 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d105      	bne.n	8009914 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f00b fab8 	bl	8014e84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fb f81d 	bl	8004954 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f00b f980 	bl	8014c24 <USB_ReadInterrupts>
 8009924:	4603      	mov	r3, r0
 8009926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800992a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800992e:	d102      	bne.n	8009936 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 f9a3 	bl	800ac7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f00b f972 	bl	8014c24 <USB_ReadInterrupts>
 8009940:	4603      	mov	r3, r0
 8009942:	f003 0308 	and.w	r3, r3, #8
 8009946:	2b08      	cmp	r3, #8
 8009948:	d106      	bne.n	8009958 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fa ffe6 	bl	800491c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2208      	movs	r2, #8
 8009956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f00b f961 	bl	8014c24 <USB_ReadInterrupts>
 8009962:	4603      	mov	r3, r0
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b10      	cmp	r3, #16
 800996a:	d101      	bne.n	8009970 <HAL_HCD_IRQHandler+0x160>
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <HAL_HCD_IRQHandler+0x162>
 8009970:	2300      	movs	r3, #0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d012      	beq.n	800999c <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f022 0210 	bic.w	r2, r2, #16
 8009984:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 f8a6 	bl	800aad8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0210 	orr.w	r2, r2, #16
 800999a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f00b f93f 	bl	8014c24 <USB_ReadInterrupts>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b0:	d13a      	bne.n	8009a28 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f00b fd92 	bl	80154e0 <USB_HC_ReadInterrupt>
 80099bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	e025      	b.n	8009a10 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d018      	beq.n	8009a0a <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ee:	d106      	bne.n	80099fe <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f8ab 	bl	8009b52 <HCD_HC_IN_IRQHandler>
 80099fc:	e005      	b.n	8009a0a <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fcb5 	bl	800a374 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d3d4      	bcc.n	80099c4 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a22:	615a      	str	r2, [r3, #20]
 8009a24:	e000      	b.n	8009a28 <HAL_HCD_IRQHandler+0x218>
      return;
 8009a26:	bf00      	nop
    }
  }
}
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_HCD_Start+0x16>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e013      	b.n	8009a6c <HAL_HCD_Start+0x3e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2101      	movs	r1, #1
 8009a52:	4618      	mov	r0, r3
 8009a54:	f00b fa7d 	bl	8014f52 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f00a ff79 	bl	8014954 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d101      	bne.n	8009a8a <HAL_HCD_Stop+0x16>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e00d      	b.n	8009aa6 <HAL_HCD_Stop+0x32>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f00b fe6c 	bl	8015774 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00b fa1f 	bl	8014efe <USB_ResetPort>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	212c      	movs	r1, #44	; 0x2c
 8009adc:	fb01 f303 	mul.w	r3, r1, r3
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3360      	adds	r3, #96	; 0x60
 8009ae4:	781b      	ldrb	r3, [r3, #0]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	212c      	movs	r1, #44	; 0x2c
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	3350      	adds	r3, #80	; 0x50
 8009b0c:	681b      	ldr	r3, [r3, #0]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f00b fa63 	bl	8014ff2 <USB_GetCurrentFrame>
 8009b2c:	4603      	mov	r3, r0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f00b fa3e 	bl	8014fc4 <USB_GetHostSpeed>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00b f86a 	bl	8014c4a <USB_ReadChInterrupts>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d119      	bne.n	8009bb4 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2304      	movs	r3, #4
 8009b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	212c      	movs	r1, #44	; 0x2c
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3361      	adds	r3, #97	; 0x61
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f00b fca8 	bl	8015502 <USB_HC_Halt>
 8009bb2:	e09a      	b.n	8009cea <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	78fa      	ldrb	r2, [r7, #3]
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f00b f844 	bl	8014c4a <USB_ReadChInterrupts>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bcc:	d11a      	bne.n	8009c04 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	212c      	movs	r1, #44	; 0x2c
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	4413      	add	r3, r2
 8009bee:	3361      	adds	r3, #97	; 0x61
 8009bf0:	2208      	movs	r2, #8
 8009bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f00b fc80 	bl	8015502 <USB_HC_Halt>
 8009c02:	e072      	b.n	8009cea <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f00b f81c 	bl	8014c4a <USB_ReadChInterrupts>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d119      	bne.n	8009c50 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c28:	461a      	mov	r2, r3
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	212c      	movs	r1, #44	; 0x2c
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	3361      	adds	r3, #97	; 0x61
 8009c3c:	2206      	movs	r2, #6
 8009c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f00b fc5a 	bl	8015502 <USB_HC_Halt>
 8009c4e:	e04c      	b.n	8009cea <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f00a fff6 	bl	8014c4a <USB_ReadChInterrupts>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c68:	d11a      	bne.n	8009ca0 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c76:	461a      	mov	r2, r3
 8009c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	212c      	movs	r1, #44	; 0x2c
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	4413      	add	r3, r2
 8009c8a:	3361      	adds	r3, #97	; 0x61
 8009c8c:	2209      	movs	r2, #9
 8009c8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	4611      	mov	r1, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f00b fc32 	bl	8015502 <USB_HC_Halt>
 8009c9e:	e024      	b.n	8009cea <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f00a ffce 	bl	8014c4a <USB_ReadChInterrupts>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d118      	bne.n	8009cea <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	2380      	movs	r3, #128	; 0x80
 8009cc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	212c      	movs	r1, #44	; 0x2c
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3361      	adds	r3, #97	; 0x61
 8009cd8:	2207      	movs	r2, #7
 8009cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f00b fc0c 	bl	8015502 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f00a ffa9 	bl	8014c4a <USB_ReadChInterrupts>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d02:	d111      	bne.n	8009d28 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	78fa      	ldrb	r2, [r7, #3]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f00b fbf8 	bl	8015502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d24:	6093      	str	r3, [r2, #8]
 8009d26:	e322      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f00a ff8a 	bl	8014c4a <USB_ReadChInterrupts>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	f040 80f0 	bne.w	8009f22 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d4e:	461a      	mov	r2, r3
 8009d50:	2320      	movs	r3, #32
 8009d52:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d019      	beq.n	8009d90 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	212c      	movs	r1, #44	; 0x2c
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	3348      	adds	r3, #72	; 0x48
 8009d6a:	6819      	ldr	r1, [r3, #0]
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009d7e:	78fb      	ldrb	r3, [r7, #3]
 8009d80:	1a8a      	subs	r2, r1, r2
 8009d82:	6879      	ldr	r1, [r7, #4]
 8009d84:	202c      	movs	r0, #44	; 0x2c
 8009d86:	fb00 f303 	mul.w	r3, r0, r3
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3350      	adds	r3, #80	; 0x50
 8009d8e:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	212c      	movs	r1, #44	; 0x2c
 8009d96:	fb01 f303 	mul.w	r3, r1, r3
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3361      	adds	r3, #97	; 0x61
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009da2:	78fb      	ldrb	r3, [r7, #3]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	212c      	movs	r1, #44	; 0x2c
 8009da8:	fb01 f303 	mul.w	r3, r1, r3
 8009dac:	4413      	add	r3, r2
 8009dae:	335c      	adds	r3, #92	; 0x5c
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009db4:	78fb      	ldrb	r3, [r7, #3]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	212c      	movs	r1, #44	; 0x2c
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	4413      	add	r3, r2
 8009dd2:	333f      	adds	r3, #63	; 0x3f
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	212c      	movs	r1, #44	; 0x2c
 8009de0:	fb01 f303 	mul.w	r3, r1, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	333f      	adds	r3, #63	; 0x3f
 8009de8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d110      	bne.n	8009e10 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	78fa      	ldrb	r2, [r7, #3]
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f00b fb83 	bl	8015502 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e08:	461a      	mov	r2, r3
 8009e0a:	2310      	movs	r3, #16
 8009e0c:	6093      	str	r3, [r2, #8]
 8009e0e:	e039      	b.n	8009e84 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	212c      	movs	r1, #44	; 0x2c
 8009e16:	fb01 f303 	mul.w	r3, r1, r3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	333f      	adds	r3, #63	; 0x3f
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d009      	beq.n	8009e38 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	212c      	movs	r1, #44	; 0x2c
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	333f      	adds	r3, #63	; 0x3f
 8009e32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d125      	bne.n	8009e84 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	78fa      	ldrb	r2, [r7, #3]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e56:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	212c      	movs	r1, #44	; 0x2c
 8009e5e:	fb01 f303 	mul.w	r3, r1, r3
 8009e62:	4413      	add	r3, r2
 8009e64:	3360      	adds	r3, #96	; 0x60
 8009e66:	2201      	movs	r2, #1
 8009e68:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009e6a:	78fb      	ldrb	r3, [r7, #3]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	212c      	movs	r1, #44	; 0x2c
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	3360      	adds	r3, #96	; 0x60
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7fa fd76 	bl	8004970 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d135      	bne.n	8009ef8 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	212c      	movs	r1, #44	; 0x2c
 8009e92:	fb01 f303 	mul.w	r3, r1, r3
 8009e96:	4413      	add	r3, r2
 8009e98:	3350      	adds	r3, #80	; 0x50
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	202c      	movs	r0, #44	; 0x2c
 8009ea2:	fb00 f202 	mul.w	r2, r0, r2
 8009ea6:	440a      	add	r2, r1
 8009ea8:	3240      	adds	r2, #64	; 0x40
 8009eaa:	8812      	ldrh	r2, [r2, #0]
 8009eac:	4413      	add	r3, r2
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	202c      	movs	r0, #44	; 0x2c
 8009eb6:	fb00 f202 	mul.w	r2, r0, r2
 8009eba:	440a      	add	r2, r1
 8009ebc:	3240      	adds	r2, #64	; 0x40
 8009ebe:	8812      	ldrh	r2, [r2, #0]
 8009ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 8250 	beq.w	800a36e <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	212c      	movs	r1, #44	; 0x2c
 8009ed4:	fb01 f303 	mul.w	r3, r1, r3
 8009ed8:	4413      	add	r3, r2
 8009eda:	3354      	adds	r3, #84	; 0x54
 8009edc:	781a      	ldrb	r2, [r3, #0]
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	f082 0201 	eor.w	r2, r2, #1
 8009ee4:	b2d0      	uxtb	r0, r2
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	212c      	movs	r1, #44	; 0x2c
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	4413      	add	r3, r2
 8009ef0:	3354      	adds	r3, #84	; 0x54
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	e23a      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	212c      	movs	r1, #44	; 0x2c
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	3354      	adds	r3, #84	; 0x54
 8009f06:	781a      	ldrb	r2, [r3, #0]
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	f082 0201 	eor.w	r2, r2, #1
 8009f0e:	b2d0      	uxtb	r0, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	212c      	movs	r1, #44	; 0x2c
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	4413      	add	r3, r2
 8009f1a:	3354      	adds	r3, #84	; 0x54
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e225      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	78fa      	ldrb	r2, [r7, #3]
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f00a fe8d 	bl	8014c4a <USB_ReadChInterrupts>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d109      	bne.n	8009f4e <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f46:	461a      	mov	r2, r3
 8009f48:	2320      	movs	r3, #32
 8009f4a:	6093      	str	r3, [r2, #8]
 8009f4c:	e20f      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f00a fe77 	bl	8014c4a <USB_ReadChInterrupts>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	f040 8168 	bne.w	800a238 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f74:	461a      	mov	r2, r3
 8009f76:	2302      	movs	r3, #2
 8009f78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	212c      	movs	r1, #44	; 0x2c
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	3361      	adds	r3, #97	; 0x61
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d112      	bne.n	8009fb4 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	212c      	movs	r1, #44	; 0x2c
 8009f94:	fb01 f303 	mul.w	r3, r1, r3
 8009f98:	4413      	add	r3, r2
 8009f9a:	3361      	adds	r3, #97	; 0x61
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	212c      	movs	r1, #44	; 0x2c
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
 8009faa:	4413      	add	r3, r2
 8009fac:	3360      	adds	r3, #96	; 0x60
 8009fae:	2201      	movs	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	e133      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	212c      	movs	r1, #44	; 0x2c
 8009fba:	fb01 f303 	mul.w	r3, r1, r3
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3361      	adds	r3, #97	; 0x61
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b06      	cmp	r3, #6
 8009fc6:	d112      	bne.n	8009fee <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	212c      	movs	r1, #44	; 0x2c
 8009fce:	fb01 f303 	mul.w	r3, r1, r3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3361      	adds	r3, #97	; 0x61
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8009fda:	78fb      	ldrb	r3, [r7, #3]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	212c      	movs	r1, #44	; 0x2c
 8009fe0:	fb01 f303 	mul.w	r3, r1, r3
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3360      	adds	r3, #96	; 0x60
 8009fe8:	2205      	movs	r2, #5
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	e116      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009fee:	78fb      	ldrb	r3, [r7, #3]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	212c      	movs	r1, #44	; 0x2c
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3361      	adds	r3, #97	; 0x61
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b07      	cmp	r3, #7
 800a000:	d009      	beq.n	800a016 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	212c      	movs	r1, #44	; 0x2c
 800a008:	fb01 f303 	mul.w	r3, r1, r3
 800a00c:	4413      	add	r3, r2
 800a00e:	3361      	adds	r3, #97	; 0x61
 800a010:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a012:	2b09      	cmp	r3, #9
 800a014:	d158      	bne.n	800a0c8 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	212c      	movs	r1, #44	; 0x2c
 800a01c:	fb01 f303 	mul.w	r3, r1, r3
 800a020:	4413      	add	r3, r2
 800a022:	3361      	adds	r3, #97	; 0x61
 800a024:	2202      	movs	r2, #2
 800a026:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	222c      	movs	r2, #44	; 0x2c
 800a02e:	fb03 f202 	mul.w	r2, r3, r2
 800a032:	440a      	add	r2, r1
 800a034:	325c      	adds	r2, #92	; 0x5c
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	3201      	adds	r2, #1
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	202c      	movs	r0, #44	; 0x2c
 800a03e:	fb00 f303 	mul.w	r3, r0, r3
 800a042:	440b      	add	r3, r1
 800a044:	335c      	adds	r3, #92	; 0x5c
 800a046:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	212c      	movs	r1, #44	; 0x2c
 800a04e:	fb01 f303 	mul.w	r3, r1, r3
 800a052:	4413      	add	r3, r2
 800a054:	335c      	adds	r3, #92	; 0x5c
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d912      	bls.n	800a082 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	212c      	movs	r1, #44	; 0x2c
 800a062:	fb01 f303 	mul.w	r3, r1, r3
 800a066:	4413      	add	r3, r2
 800a068:	335c      	adds	r3, #92	; 0x5c
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	212c      	movs	r1, #44	; 0x2c
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	4413      	add	r3, r2
 800a07a:	3360      	adds	r3, #96	; 0x60
 800a07c:	2204      	movs	r2, #4
 800a07e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a080:	e0cc      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	212c      	movs	r1, #44	; 0x2c
 800a088:	fb01 f303 	mul.w	r3, r1, r3
 800a08c:	4413      	add	r3, r2
 800a08e:	3360      	adds	r3, #96	; 0x60
 800a090:	2202      	movs	r2, #2
 800a092:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a0c6:	e0a9      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	212c      	movs	r1, #44	; 0x2c
 800a0ce:	fb01 f303 	mul.w	r3, r1, r3
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3361      	adds	r3, #97	; 0x61
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b05      	cmp	r3, #5
 800a0da:	d109      	bne.n	800a0f0 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	212c      	movs	r1, #44	; 0x2c
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	3361      	adds	r3, #97	; 0x61
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	e095      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	212c      	movs	r1, #44	; 0x2c
 800a0f6:	fb01 f303 	mul.w	r3, r1, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3361      	adds	r3, #97	; 0x61
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d109      	bne.n	800a118 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	212c      	movs	r1, #44	; 0x2c
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	3361      	adds	r3, #97	; 0x61
 800a112:	2202      	movs	r2, #2
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e081      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	212c      	movs	r1, #44	; 0x2c
 800a11e:	fb01 f303 	mul.w	r3, r1, r3
 800a122:	4413      	add	r3, r2
 800a124:	3361      	adds	r3, #97	; 0x61
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d13f      	bne.n	800a1ac <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	212c      	movs	r1, #44	; 0x2c
 800a132:	fb01 f303 	mul.w	r3, r1, r3
 800a136:	4413      	add	r3, r2
 800a138:	3361      	adds	r3, #97	; 0x61
 800a13a:	2202      	movs	r2, #2
 800a13c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	212c      	movs	r1, #44	; 0x2c
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	4413      	add	r3, r2
 800a14a:	3360      	adds	r3, #96	; 0x60
 800a14c:	2202      	movs	r2, #2
 800a14e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	212c      	movs	r1, #44	; 0x2c
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	4413      	add	r3, r2
 800a15c:	333f      	adds	r3, #63	; 0x3f
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d009      	beq.n	800a178 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	212c      	movs	r1, #44	; 0x2c
 800a16a:	fb01 f303 	mul.w	r3, r1, r3
 800a16e:	4413      	add	r3, r2
 800a170:	333f      	adds	r3, #63	; 0x3f
 800a172:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a174:	2b02      	cmp	r3, #2
 800a176:	d151      	bne.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a18e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a196:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e037      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	212c      	movs	r1, #44	; 0x2c
 800a1b2:	fb01 f303 	mul.w	r3, r1, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3361      	adds	r3, #97	; 0x61
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d122      	bne.n	800a206 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	212c      	movs	r1, #44	; 0x2c
 800a1c6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3361      	adds	r3, #97	; 0x61
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	222c      	movs	r2, #44	; 0x2c
 800a1d8:	fb03 f202 	mul.w	r2, r3, r2
 800a1dc:	440a      	add	r2, r1
 800a1de:	325c      	adds	r2, #92	; 0x5c
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	202c      	movs	r0, #44	; 0x2c
 800a1e8:	fb00 f303 	mul.w	r3, r0, r3
 800a1ec:	440b      	add	r3, r1
 800a1ee:	335c      	adds	r3, #92	; 0x5c
 800a1f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	212c      	movs	r1, #44	; 0x2c
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3360      	adds	r3, #96	; 0x60
 800a200:	2204      	movs	r2, #4
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	e00a      	b.n	800a21c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a206:	78fb      	ldrb	r3, [r7, #3]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	212c      	movs	r1, #44	; 0x2c
 800a20c:	fb01 f303 	mul.w	r3, r1, r3
 800a210:	4413      	add	r3, r2
 800a212:	3361      	adds	r3, #97	; 0x61
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b02      	cmp	r3, #2
 800a218:	f000 80a8 	beq.w	800a36c <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	212c      	movs	r1, #44	; 0x2c
 800a222:	fb01 f303 	mul.w	r3, r1, r3
 800a226:	4413      	add	r3, r2
 800a228:	3360      	adds	r3, #96	; 0x60
 800a22a:	781a      	ldrb	r2, [r3, #0]
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7fa fb9d 	bl	8004970 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a236:	e09a      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f00a fd02 	bl	8014c4a <USB_ReadChInterrupts>
 800a246:	4603      	mov	r3, r0
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d122      	bne.n	800a296 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	4413      	add	r3, r2
 800a258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a25c:	461a      	mov	r2, r3
 800a25e:	2340      	movs	r3, #64	; 0x40
 800a260:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	212c      	movs	r1, #44	; 0x2c
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	4413      	add	r3, r2
 800a26e:	3361      	adds	r3, #97	; 0x61
 800a270:	2205      	movs	r2, #5
 800a272:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	212c      	movs	r1, #44	; 0x2c
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	335c      	adds	r3, #92	; 0x5c
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	78fa      	ldrb	r2, [r7, #3]
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f00b f937 	bl	8015502 <USB_HC_Halt>
 800a294:	e06b      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	4611      	mov	r1, r2
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f00a fcd3 	bl	8014c4a <USB_ReadChInterrupts>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f003 0310 	and.w	r3, r3, #16
 800a2aa:	2b10      	cmp	r3, #16
 800a2ac:	d15f      	bne.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	212c      	movs	r1, #44	; 0x2c
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	333f      	adds	r3, #63	; 0x3f
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d119      	bne.n	800a2f6 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	212c      	movs	r1, #44	; 0x2c
 800a2c8:	fb01 f303 	mul.w	r3, r1, r3
 800a2cc:	4413      	add	r3, r2
 800a2ce:	335c      	adds	r3, #92	; 0x5c
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	212c      	movs	r1, #44	; 0x2c
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	3361      	adds	r3, #97	; 0x61
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f00b f907 	bl	8015502 <USB_HC_Halt>
 800a2f4:	e030      	b.n	800a358 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	212c      	movs	r1, #44	; 0x2c
 800a2fc:	fb01 f303 	mul.w	r3, r1, r3
 800a300:	4413      	add	r3, r2
 800a302:	333f      	adds	r3, #63	; 0x3f
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	212c      	movs	r1, #44	; 0x2c
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	4413      	add	r3, r2
 800a316:	333f      	adds	r3, #63	; 0x3f
 800a318:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d11c      	bne.n	800a358 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	212c      	movs	r1, #44	; 0x2c
 800a324:	fb01 f303 	mul.w	r3, r1, r3
 800a328:	4413      	add	r3, r2
 800a32a:	335c      	adds	r3, #92	; 0x5c
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10f      	bne.n	800a358 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	212c      	movs	r1, #44	; 0x2c
 800a33e:	fb01 f303 	mul.w	r3, r1, r3
 800a342:	4413      	add	r3, r2
 800a344:	3361      	adds	r3, #97	; 0x61
 800a346:	2204      	movs	r2, #4
 800a348:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f00b f8d5 	bl	8015502 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a364:	461a      	mov	r2, r3
 800a366:	2310      	movs	r3, #16
 800a368:	6093      	str	r3, [r2, #8]
 800a36a:	e000      	b.n	800a36e <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a36c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	78fa      	ldrb	r2, [r7, #3]
 800a390:	4611      	mov	r1, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f00a fc59 	bl	8014c4a <USB_ReadChInterrupts>
 800a398:	4603      	mov	r3, r0
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d119      	bne.n	800a3d6 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a3a2:	78fb      	ldrb	r3, [r7, #3]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	212c      	movs	r1, #44	; 0x2c
 800a3ba:	fb01 f303 	mul.w	r3, r1, r3
 800a3be:	4413      	add	r3, r2
 800a3c0:	3361      	adds	r3, #97	; 0x61
 800a3c2:	2207      	movs	r2, #7
 800a3c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f00b f897 	bl	8015502 <USB_HC_Halt>
 800a3d4:	e37d      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f00a fc33 	bl	8014c4a <USB_ReadChInterrupts>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d136      	bne.n	800a45c <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a3ee:	78fb      	ldrb	r3, [r7, #3]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	212c      	movs	r1, #44	; 0x2c
 800a406:	fb01 f303 	mul.w	r3, r1, r3
 800a40a:	4413      	add	r3, r2
 800a40c:	333d      	adds	r3, #61	; 0x3d
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b01      	cmp	r3, #1
 800a412:	f040 835e 	bne.w	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	212c      	movs	r1, #44	; 0x2c
 800a41c:	fb01 f303 	mul.w	r3, r1, r3
 800a420:	4413      	add	r3, r2
 800a422:	333d      	adds	r3, #61	; 0x3d
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	212c      	movs	r1, #44	; 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3360      	adds	r3, #96	; 0x60
 800a436:	2202      	movs	r2, #2
 800a438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	212c      	movs	r1, #44	; 0x2c
 800a440:	fb01 f303 	mul.w	r3, r1, r3
 800a444:	4413      	add	r3, r2
 800a446:	3361      	adds	r3, #97	; 0x61
 800a448:	2203      	movs	r2, #3
 800a44a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f00b f854 	bl	8015502 <USB_HC_Halt>
 800a45a:	e33a      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	78fa      	ldrb	r2, [r7, #3]
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f00a fbf0 	bl	8014c4a <USB_ReadChInterrupts>
 800a46a:	4603      	mov	r3, r0
 800a46c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a474:	d111      	bne.n	800a49a <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a476:	78fb      	ldrb	r3, [r7, #3]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a482:	461a      	mov	r2, r3
 800a484:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a488:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f00b f835 	bl	8015502 <USB_HC_Halt>
 800a498:	e31b      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f00a fbd1 	bl	8014c4a <USB_ReadChInterrupts>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d140      	bne.n	800a534 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	212c      	movs	r1, #44	; 0x2c
 800a4b8:	fb01 f303 	mul.w	r3, r1, r3
 800a4bc:	4413      	add	r3, r2
 800a4be:	335c      	adds	r3, #92	; 0x5c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f00a fbbc 	bl	8014c4a <USB_ReadChInterrupts>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d111      	bne.n	800a500 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	212c      	movs	r1, #44	; 0x2c
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	333d      	adds	r3, #61	; 0x3d
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	4413      	add	r3, r2
 800a508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50c:	461a      	mov	r2, r3
 800a50e:	2301      	movs	r3, #1
 800a510:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	212c      	movs	r1, #44	; 0x2c
 800a518:	fb01 f303 	mul.w	r3, r1, r3
 800a51c:	4413      	add	r3, r2
 800a51e:	3361      	adds	r3, #97	; 0x61
 800a520:	2201      	movs	r2, #1
 800a522:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f00a ffe8 	bl	8015502 <USB_HC_Halt>
 800a532:	e2ce      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	78fa      	ldrb	r2, [r7, #3]
 800a53a:	4611      	mov	r1, r2
 800a53c:	4618      	mov	r0, r3
 800a53e:	f00a fb84 	bl	8014c4a <USB_ReadChInterrupts>
 800a542:	4603      	mov	r3, r0
 800a544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a548:	2b40      	cmp	r3, #64	; 0x40
 800a54a:	d12b      	bne.n	800a5a4 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	212c      	movs	r1, #44	; 0x2c
 800a552:	fb01 f303 	mul.w	r3, r1, r3
 800a556:	4413      	add	r3, r2
 800a558:	3361      	adds	r3, #97	; 0x61
 800a55a:	2205      	movs	r2, #5
 800a55c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	212c      	movs	r1, #44	; 0x2c
 800a564:	fb01 f303 	mul.w	r3, r1, r3
 800a568:	4413      	add	r3, r2
 800a56a:	333d      	adds	r3, #61	; 0x3d
 800a56c:	2201      	movs	r2, #1
 800a56e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	212c      	movs	r1, #44	; 0x2c
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	335c      	adds	r3, #92	; 0x5c
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f00a ffb9 	bl	8015502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	4413      	add	r3, r2
 800a598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a59c:	461a      	mov	r2, r3
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	6093      	str	r3, [r2, #8]
 800a5a2:	e296      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f00a fb4c 	bl	8014c4a <USB_ReadChInterrupts>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b08      	cmp	r3, #8
 800a5ba:	d119      	bne.n	800a5f0 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2308      	movs	r3, #8
 800a5cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	212c      	movs	r1, #44	; 0x2c
 800a5d4:	fb01 f303 	mul.w	r3, r1, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	3361      	adds	r3, #97	; 0x61
 800a5dc:	2206      	movs	r2, #6
 800a5de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f00a ff8a 	bl	8015502 <USB_HC_Halt>
 800a5ee:	e270      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f00a fb26 	bl	8014c4a <USB_ReadChInterrupts>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b10      	cmp	r3, #16
 800a606:	d13f      	bne.n	800a688 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	212c      	movs	r1, #44	; 0x2c
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	4413      	add	r3, r2
 800a614:	335c      	adds	r3, #92	; 0x5c
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	212c      	movs	r1, #44	; 0x2c
 800a620:	fb01 f303 	mul.w	r3, r1, r3
 800a624:	4413      	add	r3, r2
 800a626:	3361      	adds	r3, #97	; 0x61
 800a628:	2204      	movs	r2, #4
 800a62a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a62c:	78fb      	ldrb	r3, [r7, #3]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	212c      	movs	r1, #44	; 0x2c
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	4413      	add	r3, r2
 800a638:	333d      	adds	r3, #61	; 0x3d
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d112      	bne.n	800a666 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	212c      	movs	r1, #44	; 0x2c
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	333c      	adds	r3, #60	; 0x3c
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d108      	bne.n	800a666 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	212c      	movs	r1, #44	; 0x2c
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	4413      	add	r3, r2
 800a660:	333d      	adds	r3, #61	; 0x3d
 800a662:	2201      	movs	r2, #1
 800a664:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	4611      	mov	r1, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f00a ff47 	bl	8015502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a680:	461a      	mov	r2, r3
 800a682:	2310      	movs	r3, #16
 800a684:	6093      	str	r3, [r2, #8]
 800a686:	e224      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	78fa      	ldrb	r2, [r7, #3]
 800a68e:	4611      	mov	r1, r2
 800a690:	4618      	mov	r0, r3
 800a692:	f00a fada 	bl	8014c4a <USB_ReadChInterrupts>
 800a696:	4603      	mov	r3, r0
 800a698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69c:	2b80      	cmp	r3, #128	; 0x80
 800a69e:	d161      	bne.n	800a764 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	212c      	movs	r1, #44	; 0x2c
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3361      	adds	r3, #97	; 0x61
 800a6b6:	2207      	movs	r2, #7
 800a6b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00a ff1d 	bl	8015502 <USB_HC_Halt>
 800a6c8:	e042      	b.n	800a750 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	222c      	movs	r2, #44	; 0x2c
 800a6d0:	fb03 f202 	mul.w	r2, r3, r2
 800a6d4:	440a      	add	r2, r1
 800a6d6:	325c      	adds	r2, #92	; 0x5c
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	3201      	adds	r2, #1
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	202c      	movs	r0, #44	; 0x2c
 800a6e0:	fb00 f303 	mul.w	r3, r0, r3
 800a6e4:	440b      	add	r3, r1
 800a6e6:	335c      	adds	r3, #92	; 0x5c
 800a6e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	212c      	movs	r1, #44	; 0x2c
 800a6f0:	fb01 f303 	mul.w	r3, r1, r3
 800a6f4:	4413      	add	r3, r2
 800a6f6:	335c      	adds	r3, #92	; 0x5c
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d91f      	bls.n	800a73e <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	212c      	movs	r1, #44	; 0x2c
 800a704:	fb01 f303 	mul.w	r3, r1, r3
 800a708:	4413      	add	r3, r2
 800a70a:	335c      	adds	r3, #92	; 0x5c
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	212c      	movs	r1, #44	; 0x2c
 800a716:	fb01 f303 	mul.w	r3, r1, r3
 800a71a:	4413      	add	r3, r2
 800a71c:	3360      	adds	r3, #96	; 0x60
 800a71e:	2204      	movs	r2, #4
 800a720:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	212c      	movs	r1, #44	; 0x2c
 800a728:	fb01 f303 	mul.w	r3, r1, r3
 800a72c:	4413      	add	r3, r2
 800a72e:	3360      	adds	r3, #96	; 0x60
 800a730:	781a      	ldrb	r2, [r3, #0]
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7fa f91a 	bl	8004970 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a73c:	e008      	b.n	800a750 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	212c      	movs	r1, #44	; 0x2c
 800a744:	fb01 f303 	mul.w	r3, r1, r3
 800a748:	4413      	add	r3, r2
 800a74a:	3360      	adds	r3, #96	; 0x60
 800a74c:	2202      	movs	r2, #2
 800a74e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75c:	461a      	mov	r2, r3
 800a75e:	2380      	movs	r3, #128	; 0x80
 800a760:	6093      	str	r3, [r2, #8]
 800a762:	e1b6      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	4611      	mov	r1, r2
 800a76c:	4618      	mov	r0, r3
 800a76e:	f00a fa6c 	bl	8014c4a <USB_ReadChInterrupts>
 800a772:	4603      	mov	r3, r0
 800a774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a77c:	d11a      	bne.n	800a7b4 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a77e:	78fb      	ldrb	r3, [r7, #3]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	212c      	movs	r1, #44	; 0x2c
 800a784:	fb01 f303 	mul.w	r3, r1, r3
 800a788:	4413      	add	r3, r2
 800a78a:	3361      	adds	r3, #97	; 0x61
 800a78c:	2209      	movs	r2, #9
 800a78e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f00a feb2 	bl	8015502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b0:	6093      	str	r3, [r2, #8]
 800a7b2:	e18e      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f00a fa44 	bl	8014c4a <USB_ReadChInterrupts>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	f040 8182 	bne.w	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a7ce:	78fb      	ldrb	r3, [r7, #3]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7da:	461a      	mov	r2, r3
 800a7dc:	2302      	movs	r3, #2
 800a7de:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	212c      	movs	r1, #44	; 0x2c
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3361      	adds	r3, #97	; 0x61
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	f040 8087 	bne.w	800a904 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	212c      	movs	r1, #44	; 0x2c
 800a7fc:	fb01 f303 	mul.w	r3, r1, r3
 800a800:	4413      	add	r3, r2
 800a802:	3361      	adds	r3, #97	; 0x61
 800a804:	2202      	movs	r2, #2
 800a806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	212c      	movs	r1, #44	; 0x2c
 800a80e:	fb01 f303 	mul.w	r3, r1, r3
 800a812:	4413      	add	r3, r2
 800a814:	3360      	adds	r3, #96	; 0x60
 800a816:	2201      	movs	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	212c      	movs	r1, #44	; 0x2c
 800a820:	fb01 f303 	mul.w	r3, r1, r3
 800a824:	4413      	add	r3, r2
 800a826:	333f      	adds	r3, #63	; 0x3f
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d00a      	beq.n	800a844 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	212c      	movs	r1, #44	; 0x2c
 800a834:	fb01 f303 	mul.w	r3, r1, r3
 800a838:	4413      	add	r3, r2
 800a83a:	333f      	adds	r3, #63	; 0x3f
 800a83c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a83e:	2b03      	cmp	r3, #3
 800a840:	f040 8138 	bne.w	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d113      	bne.n	800a874 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	212c      	movs	r1, #44	; 0x2c
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	4413      	add	r3, r2
 800a858:	3355      	adds	r3, #85	; 0x55
 800a85a:	781a      	ldrb	r2, [r3, #0]
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	f082 0201 	eor.w	r2, r2, #1
 800a862:	b2d0      	uxtb	r0, r2
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	212c      	movs	r1, #44	; 0x2c
 800a868:	fb01 f303 	mul.w	r3, r1, r3
 800a86c:	4413      	add	r3, r2
 800a86e:	3355      	adds	r3, #85	; 0x55
 800a870:	4602      	mov	r2, r0
 800a872:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f040 811b 	bne.w	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	212c      	movs	r1, #44	; 0x2c
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	334c      	adds	r3, #76	; 0x4c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 8110 	beq.w	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	212c      	movs	r1, #44	; 0x2c
 800a89a:	fb01 f303 	mul.w	r3, r1, r3
 800a89e:	4413      	add	r3, r2
 800a8a0:	334c      	adds	r3, #76	; 0x4c
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	78fa      	ldrb	r2, [r7, #3]
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	202c      	movs	r0, #44	; 0x2c
 800a8aa:	fb00 f202 	mul.w	r2, r0, r2
 800a8ae:	440a      	add	r2, r1
 800a8b0:	3240      	adds	r2, #64	; 0x40
 800a8b2:	8812      	ldrh	r2, [r2, #0]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	78fa      	ldrb	r2, [r7, #3]
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	202c      	movs	r0, #44	; 0x2c
 800a8be:	fb00 f202 	mul.w	r2, r0, r2
 800a8c2:	440a      	add	r2, r1
 800a8c4:	3240      	adds	r2, #64	; 0x40
 800a8c6:	8812      	ldrh	r2, [r2, #0]
 800a8c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8cc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 80ed 	beq.w	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	212c      	movs	r1, #44	; 0x2c
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3355      	adds	r3, #85	; 0x55
 800a8e8:	781a      	ldrb	r2, [r3, #0]
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	f082 0201 	eor.w	r2, r2, #1
 800a8f0:	b2d0      	uxtb	r0, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	212c      	movs	r1, #44	; 0x2c
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3355      	adds	r3, #85	; 0x55
 800a8fe:	4602      	mov	r2, r0
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	e0d7      	b.n	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	212c      	movs	r1, #44	; 0x2c
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	4413      	add	r3, r2
 800a910:	3361      	adds	r3, #97	; 0x61
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b03      	cmp	r3, #3
 800a916:	d109      	bne.n	800a92c <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	212c      	movs	r1, #44	; 0x2c
 800a91e:	fb01 f303 	mul.w	r3, r1, r3
 800a922:	4413      	add	r3, r2
 800a924:	3361      	adds	r3, #97	; 0x61
 800a926:	2202      	movs	r2, #2
 800a928:	701a      	strb	r2, [r3, #0]
 800a92a:	e0c3      	b.n	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	212c      	movs	r1, #44	; 0x2c
 800a932:	fb01 f303 	mul.w	r3, r1, r3
 800a936:	4413      	add	r3, r2
 800a938:	3361      	adds	r3, #97	; 0x61
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d112      	bne.n	800a966 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	212c      	movs	r1, #44	; 0x2c
 800a946:	fb01 f303 	mul.w	r3, r1, r3
 800a94a:	4413      	add	r3, r2
 800a94c:	3361      	adds	r3, #97	; 0x61
 800a94e:	2202      	movs	r2, #2
 800a950:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a952:	78fb      	ldrb	r3, [r7, #3]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	212c      	movs	r1, #44	; 0x2c
 800a958:	fb01 f303 	mul.w	r3, r1, r3
 800a95c:	4413      	add	r3, r2
 800a95e:	3360      	adds	r3, #96	; 0x60
 800a960:	2202      	movs	r2, #2
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	e0a6      	b.n	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	212c      	movs	r1, #44	; 0x2c
 800a96c:	fb01 f303 	mul.w	r3, r1, r3
 800a970:	4413      	add	r3, r2
 800a972:	3361      	adds	r3, #97	; 0x61
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b05      	cmp	r3, #5
 800a978:	d112      	bne.n	800a9a0 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	212c      	movs	r1, #44	; 0x2c
 800a980:	fb01 f303 	mul.w	r3, r1, r3
 800a984:	4413      	add	r3, r2
 800a986:	3361      	adds	r3, #97	; 0x61
 800a988:	2202      	movs	r2, #2
 800a98a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a98c:	78fb      	ldrb	r3, [r7, #3]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	212c      	movs	r1, #44	; 0x2c
 800a992:	fb01 f303 	mul.w	r3, r1, r3
 800a996:	4413      	add	r3, r2
 800a998:	3360      	adds	r3, #96	; 0x60
 800a99a:	2202      	movs	r2, #2
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	e089      	b.n	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a9a0:	78fb      	ldrb	r3, [r7, #3]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	212c      	movs	r1, #44	; 0x2c
 800a9a6:	fb01 f303 	mul.w	r3, r1, r3
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3361      	adds	r3, #97	; 0x61
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b06      	cmp	r3, #6
 800a9b2:	d112      	bne.n	800a9da <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	212c      	movs	r1, #44	; 0x2c
 800a9ba:	fb01 f303 	mul.w	r3, r1, r3
 800a9be:	4413      	add	r3, r2
 800a9c0:	3361      	adds	r3, #97	; 0x61
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a9c6:	78fb      	ldrb	r3, [r7, #3]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	212c      	movs	r1, #44	; 0x2c
 800a9cc:	fb01 f303 	mul.w	r3, r1, r3
 800a9d0:	4413      	add	r3, r2
 800a9d2:	3360      	adds	r3, #96	; 0x60
 800a9d4:	2205      	movs	r2, #5
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	e06c      	b.n	800aab4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	212c      	movs	r1, #44	; 0x2c
 800a9e0:	fb01 f303 	mul.w	r3, r1, r3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	3361      	adds	r3, #97	; 0x61
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b07      	cmp	r3, #7
 800a9ec:	d009      	beq.n	800aa02 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	212c      	movs	r1, #44	; 0x2c
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3361      	adds	r3, #97	; 0x61
 800a9fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	d166      	bne.n	800aad0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	212c      	movs	r1, #44	; 0x2c
 800aa08:	fb01 f303 	mul.w	r3, r1, r3
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3361      	adds	r3, #97	; 0x61
 800aa10:	2202      	movs	r2, #2
 800aa12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800aa14:	78fb      	ldrb	r3, [r7, #3]
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	222c      	movs	r2, #44	; 0x2c
 800aa1a:	fb03 f202 	mul.w	r2, r3, r2
 800aa1e:	440a      	add	r2, r1
 800aa20:	325c      	adds	r2, #92	; 0x5c
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	3201      	adds	r2, #1
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	202c      	movs	r0, #44	; 0x2c
 800aa2a:	fb00 f303 	mul.w	r3, r0, r3
 800aa2e:	440b      	add	r3, r1
 800aa30:	335c      	adds	r3, #92	; 0x5c
 800aa32:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	212c      	movs	r1, #44	; 0x2c
 800aa3a:	fb01 f303 	mul.w	r3, r1, r3
 800aa3e:	4413      	add	r3, r2
 800aa40:	335c      	adds	r3, #92	; 0x5c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d912      	bls.n	800aa6e <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	212c      	movs	r1, #44	; 0x2c
 800aa4e:	fb01 f303 	mul.w	r3, r1, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	335c      	adds	r3, #92	; 0x5c
 800aa56:	2200      	movs	r2, #0
 800aa58:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	212c      	movs	r1, #44	; 0x2c
 800aa60:	fb01 f303 	mul.w	r3, r1, r3
 800aa64:	4413      	add	r3, r2
 800aa66:	3360      	adds	r3, #96	; 0x60
 800aa68:	2204      	movs	r2, #4
 800aa6a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aa6c:	e021      	b.n	800aab2 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	212c      	movs	r1, #44	; 0x2c
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	4413      	add	r3, r2
 800aa7a:	3360      	adds	r3, #96	; 0x60
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa96:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa9e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaac:	461a      	mov	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aab2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800aab4:	78fb      	ldrb	r3, [r7, #3]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	212c      	movs	r1, #44	; 0x2c
 800aaba:	fb01 f303 	mul.w	r3, r1, r3
 800aabe:	4413      	add	r3, r2
 800aac0:	3360      	adds	r3, #96	; 0x60
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7f9 ff51 	bl	8004970 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aace:	e000      	b.n	800aad2 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800aad0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08a      	sub	sp, #40	; 0x28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	0c5b      	lsrs	r3, r3, #17
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	091b      	lsrs	r3, r3, #4
 800ab08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ab0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d004      	beq.n	800ab1e <HCD_RXQLVL_IRQHandler+0x46>
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	f000 80a9 	beq.w	800ac6e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ab1c:	e0aa      	b.n	800ac74 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80a6 	beq.w	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	212c      	movs	r1, #44	; 0x2c
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	3344      	adds	r3, #68	; 0x44
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 809b 	beq.w	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	212c      	movs	r1, #44	; 0x2c
 800ab42:	fb01 f303 	mul.w	r3, r1, r3
 800ab46:	4413      	add	r3, r2
 800ab48:	3350      	adds	r3, #80	; 0x50
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	441a      	add	r2, r3
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	202c      	movs	r0, #44	; 0x2c
 800ab56:	fb00 f303 	mul.w	r3, r0, r3
 800ab5a:	440b      	add	r3, r1
 800ab5c:	334c      	adds	r3, #76	; 0x4c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d87a      	bhi.n	800ac5a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	212c      	movs	r1, #44	; 0x2c
 800ab6e:	fb01 f303 	mul.w	r3, r1, r3
 800ab72:	4413      	add	r3, r2
 800ab74:	3344      	adds	r3, #68	; 0x44
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	f009 fff9 	bl	8014b74 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	212c      	movs	r1, #44	; 0x2c
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3344      	adds	r3, #68	; 0x44
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	441a      	add	r2, r3
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	202c      	movs	r0, #44	; 0x2c
 800ab9c:	fb00 f303 	mul.w	r3, r0, r3
 800aba0:	440b      	add	r3, r1
 800aba2:	3344      	adds	r3, #68	; 0x44
 800aba4:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	212c      	movs	r1, #44	; 0x2c
 800abac:	fb01 f303 	mul.w	r3, r1, r3
 800abb0:	4413      	add	r3, r2
 800abb2:	3350      	adds	r3, #80	; 0x50
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	441a      	add	r2, r3
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	202c      	movs	r0, #44	; 0x2c
 800abc0:	fb00 f303 	mul.w	r3, r0, r3
 800abc4:	440b      	add	r3, r1
 800abc6:	3350      	adds	r3, #80	; 0x50
 800abc8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	0cdb      	lsrs	r3, r3, #19
 800abda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abde:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	212c      	movs	r1, #44	; 0x2c
 800abe6:	fb01 f303 	mul.w	r3, r1, r3
 800abea:	4413      	add	r3, r2
 800abec:	3340      	adds	r3, #64	; 0x40
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d13c      	bne.n	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d039      	beq.n	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac14:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	212c      	movs	r1, #44	; 0x2c
 800ac36:	fb01 f303 	mul.w	r3, r1, r3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3354      	adds	r3, #84	; 0x54
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f083 0301 	eor.w	r3, r3, #1
 800ac44:	b2d8      	uxtb	r0, r3
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	212c      	movs	r1, #44	; 0x2c
 800ac4c:	fb01 f303 	mul.w	r3, r1, r3
 800ac50:	4413      	add	r3, r2
 800ac52:	3354      	adds	r3, #84	; 0x54
 800ac54:	4602      	mov	r2, r0
 800ac56:	701a      	strb	r2, [r3, #0]
      break;
 800ac58:	e00b      	b.n	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	212c      	movs	r1, #44	; 0x2c
 800ac60:	fb01 f303 	mul.w	r3, r1, r3
 800ac64:	4413      	add	r3, r2
 800ac66:	3360      	adds	r3, #96	; 0x60
 800ac68:	2204      	movs	r2, #4
 800ac6a:	701a      	strb	r2, [r3, #0]
      break;
 800ac6c:	e001      	b.n	800ac72 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ac6e:	bf00      	nop
 800ac70:	e000      	b.n	800ac74 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ac72:	bf00      	nop
  }
}
 800ac74:	bf00      	nop
 800ac76:	3728      	adds	r7, #40	; 0x28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aca8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d10b      	bne.n	800accc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d102      	bne.n	800acc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7f9 fe3a 	bl	8004938 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d132      	bne.n	800ad3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f043 0308 	orr.w	r3, r3, #8
 800acdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f003 0304 	and.w	r3, r3, #4
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	d126      	bne.n	800ad36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d113      	bne.n	800ad18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800acf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acfa:	d106      	bne.n	800ad0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2102      	movs	r1, #2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f00a f8be 	bl	8014e84 <USB_InitFSLSPClkSel>
 800ad08:	e011      	b.n	800ad2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2101      	movs	r1, #1
 800ad10:	4618      	mov	r0, r3
 800ad12:	f00a f8b7 	bl	8014e84 <USB_InitFSLSPClkSel>
 800ad16:	e00a      	b.n	800ad2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d106      	bne.n	800ad2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad26:	461a      	mov	r2, r3
 800ad28:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ad2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7f9 fe2c 	bl	800498c <HAL_HCD_PortEnabled_Callback>
 800ad34:	e002      	b.n	800ad3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f9 fe36 	bl	80049a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d103      	bne.n	800ad4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f043 0320 	orr.w	r3, r3, #32
 800ad4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad54:	461a      	mov	r2, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	6013      	str	r3, [r2, #0]
}
 800ad5a:	bf00      	nop
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e07f      	b.n	800ae76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7f7 fe3e 	bl	8002a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2224      	movs	r2, #36	; 0x24
 800ad94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 0201 	bic.w	r2, r2, #1
 800ada6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800adb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d107      	bne.n	800adde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adda:	609a      	str	r2, [r3, #8]
 800addc:	e006      	b.n	800adec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800adea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d104      	bne.n	800adfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6859      	ldr	r1, [r3, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_I2C_Init+0x11c>)
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	691a      	ldr	r2, [r3, #16]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69d9      	ldr	r1, [r3, #28]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f042 0201 	orr.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	02008000 	.word	0x02008000

0800ae84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	460b      	mov	r3, r1
 800ae92:	817b      	strh	r3, [r7, #10]
 800ae94:	4613      	mov	r3, r2
 800ae96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	f040 80da 	bne.w	800b05a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_I2C_Master_Transmit+0x30>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e0d3      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aebc:	f7fa f826 	bl	8004f0c <HAL_GetTick>
 800aec0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	2319      	movs	r3, #25
 800aec8:	2201      	movs	r2, #1
 800aeca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f8f0 	bl	800b0b4 <I2C_WaitOnFlagUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e0be      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2221      	movs	r2, #33	; 0x21
 800aee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2210      	movs	r2, #16
 800aeea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	893a      	ldrh	r2, [r7, #8]
 800aefe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	2bff      	cmp	r3, #255	; 0xff
 800af0e:	d90e      	bls.n	800af2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	22ff      	movs	r2, #255	; 0xff
 800af14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	8979      	ldrh	r1, [r7, #10]
 800af1e:	4b51      	ldr	r3, [pc, #324]	; (800b064 <HAL_I2C_Master_Transmit+0x1e0>)
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f000 fa7e 	bl	800b428 <I2C_TransferConfig>
 800af2c:	e06c      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af32:	b29a      	uxth	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	8979      	ldrh	r1, [r7, #10]
 800af40:	4b48      	ldr	r3, [pc, #288]	; (800b064 <HAL_I2C_Master_Transmit+0x1e0>)
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 fa6d 	bl	800b428 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800af4e:	e05b      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	6a39      	ldr	r1, [r7, #32]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f8fc 	bl	800b152 <I2C_WaitOnTXISFlagUntilTimeout>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e07b      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af7e:	b29b      	uxth	r3, r3
 800af80:	3b01      	subs	r3, #1
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af8c:	3b01      	subs	r3, #1
 800af8e:	b29a      	uxth	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af98:	b29b      	uxth	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d034      	beq.n	800b008 <HAL_I2C_Master_Transmit+0x184>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d130      	bne.n	800b008 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	2200      	movs	r2, #0
 800afae:	2180      	movs	r1, #128	; 0x80
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f87f 	bl	800b0b4 <I2C_WaitOnFlagUntilTimeout>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e04d      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	2bff      	cmp	r3, #255	; 0xff
 800afc8:	d90e      	bls.n	800afe8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	22ff      	movs	r2, #255	; 0xff
 800afce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	8979      	ldrh	r1, [r7, #10]
 800afd8:	2300      	movs	r3, #0
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fa21 	bl	800b428 <I2C_TransferConfig>
 800afe6:	e00f      	b.n	800b008 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afec:	b29a      	uxth	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	8979      	ldrh	r1, [r7, #10]
 800affa:	2300      	movs	r3, #0
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fa10 	bl	800b428 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d19e      	bne.n	800af50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	6a39      	ldr	r1, [r7, #32]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 f8e2 	bl	800b1e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e01a      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2220      	movs	r2, #32
 800b02c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6859      	ldr	r1, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <HAL_I2C_Master_Transmit+0x1e4>)
 800b03a:	400b      	ands	r3, r1
 800b03c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2220      	movs	r2, #32
 800b042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	e000      	b.n	800b05c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b05a:	2302      	movs	r3, #2
  }
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	80002000 	.word	0x80002000
 800b068:	fe00e800 	.word	0xfe00e800

0800b06c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	f003 0302 	and.w	r3, r3, #2
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d103      	bne.n	800b08a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2200      	movs	r2, #0
 800b088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b01      	cmp	r3, #1
 800b096:	d007      	beq.n	800b0a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0201 	orr.w	r2, r2, #1
 800b0a6:	619a      	str	r2, [r3, #24]
  }
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0c4:	e031      	b.n	800b12a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0cc:	d02d      	beq.n	800b12a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ce:	f7f9 ff1d 	bl	8004f0c <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d302      	bcc.n	800b0e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d122      	bne.n	800b12a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2301      	moveq	r3, #1
 800b0f6:	2300      	movne	r3, #0
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d113      	bne.n	800b12a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b106:	f043 0220 	orr.w	r2, r3, #32
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2220      	movs	r2, #32
 800b112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	e00f      	b.n	800b14a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	699a      	ldr	r2, [r3, #24]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	4013      	ands	r3, r2
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	429a      	cmp	r2, r3
 800b138:	bf0c      	ite	eq
 800b13a:	2301      	moveq	r3, #1
 800b13c:	2300      	movne	r3, #0
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	461a      	mov	r2, r3
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	429a      	cmp	r2, r3
 800b146:	d0be      	beq.n	800b0c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b15e:	e033      	b.n	800b1c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f87f 	bl	800b268 <I2C_IsErrorOccurred>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e031      	b.n	800b1d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17a:	d025      	beq.n	800b1c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b17c:	f7f9 fec6 	bl	8004f0c <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d302      	bcc.n	800b192 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d11a      	bne.n	800b1c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	f003 0302 	and.w	r3, r3, #2
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d013      	beq.n	800b1c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a4:	f043 0220 	orr.w	r2, r3, #32
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e007      	b.n	800b1d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d1c4      	bne.n	800b160 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1ec:	e02f      	b.n	800b24e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	68b9      	ldr	r1, [r7, #8]
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 f838 	bl	800b268 <I2C_IsErrorOccurred>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e02d      	b.n	800b25e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b202:	f7f9 fe83 	bl	8004f0c <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d302      	bcc.n	800b218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d11a      	bne.n	800b24e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	f003 0320 	and.w	r3, r3, #32
 800b222:	2b20      	cmp	r3, #32
 800b224:	d013      	beq.n	800b24e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22a:	f043 0220 	orr.w	r2, r3, #32
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2220      	movs	r2, #32
 800b236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e007      	b.n	800b25e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	f003 0320 	and.w	r3, r3, #32
 800b258:	2b20      	cmp	r3, #32
 800b25a:	d1c8      	bne.n	800b1ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b00      	cmp	r3, #0
 800b292:	d068      	beq.n	800b366 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2210      	movs	r2, #16
 800b29a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b29c:	e049      	b.n	800b332 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a4:	d045      	beq.n	800b332 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b2a6:	f7f9 fe31 	bl	8004f0c <HAL_GetTick>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d302      	bcc.n	800b2bc <I2C_IsErrorOccurred+0x54>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d13a      	bne.n	800b332 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699b      	ldr	r3, [r3, #24]
 800b2d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2de:	d121      	bne.n	800b324 <I2C_IsErrorOccurred+0xbc>
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2e6:	d01d      	beq.n	800b324 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	d01a      	beq.n	800b324 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b2fe:	f7f9 fe05 	bl	8004f0c <HAL_GetTick>
 800b302:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b304:	e00e      	b.n	800b324 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b306:	f7f9 fe01 	bl	8004f0c <HAL_GetTick>
 800b30a:	4602      	mov	r2, r0
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	2b19      	cmp	r3, #25
 800b312:	d907      	bls.n	800b324 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	f043 0320 	orr.w	r3, r3, #32
 800b31a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b322:	e006      	b.n	800b332 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b20      	cmp	r3, #32
 800b330:	d1e9      	bne.n	800b306 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	699b      	ldr	r3, [r3, #24]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b20      	cmp	r3, #32
 800b33e:	d003      	beq.n	800b348 <I2C_IsErrorOccurred+0xe0>
 800b340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0aa      	beq.n	800b29e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d103      	bne.n	800b358 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2220      	movs	r2, #32
 800b356:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	f043 0304 	orr.w	r3, r3, #4
 800b35e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	f043 0301 	orr.w	r3, r3, #1
 800b37e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	f043 0308 	orr.w	r3, r3, #8
 800b3a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b3aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	f043 0302 	orr.w	r3, r3, #2
 800b3c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d01c      	beq.n	800b416 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff fe45 	bl	800b06c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6859      	ldr	r1, [r3, #4]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <I2C_IsErrorOccurred+0x1bc>)
 800b3ee:	400b      	ands	r3, r1
 800b3f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2220      	movs	r2, #32
 800b402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3728      	adds	r7, #40	; 0x28
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	fe00e800 	.word	0xfe00e800

0800b428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	817b      	strh	r3, [r7, #10]
 800b436:	4613      	mov	r3, r2
 800b438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b43a:	897b      	ldrh	r3, [r7, #10]
 800b43c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b440:	7a7b      	ldrb	r3, [r7, #9]
 800b442:	041b      	lsls	r3, r3, #16
 800b444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	4313      	orrs	r3, r2
 800b452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	0d5b      	lsrs	r3, r3, #21
 800b462:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b466:	4b08      	ldr	r3, [pc, #32]	; (800b488 <I2C_TransferConfig+0x60>)
 800b468:	430b      	orrs	r3, r1
 800b46a:	43db      	mvns	r3, r3
 800b46c:	ea02 0103 	and.w	r1, r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	430a      	orrs	r2, r1
 800b478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b47a:	bf00      	nop
 800b47c:	371c      	adds	r7, #28
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	03ff63ff 	.word	0x03ff63ff

0800b48c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d138      	bne.n	800b514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d101      	bne.n	800b4b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	e032      	b.n	800b516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2224      	movs	r2, #36	; 0x24
 800b4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0201 	bic.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b4de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6819      	ldr	r1, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0201 	orr.w	r2, r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2220      	movs	r2, #32
 800b504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	e000      	b.n	800b516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b514:	2302      	movs	r3, #2
  }
}
 800b516:	4618      	mov	r0, r3
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b522:	b480      	push	{r7}
 800b524:	b085      	sub	sp, #20
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b20      	cmp	r3, #32
 800b536:	d139      	bne.n	800b5ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b542:	2302      	movs	r3, #2
 800b544:	e033      	b.n	800b5ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2224      	movs	r2, #36	; 0x24
 800b552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 0201 	bic.w	r2, r2, #1
 800b564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0201 	orr.w	r2, r2, #1
 800b596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	e000      	b.n	800b5ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b5ac:	2302      	movs	r3, #2
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
	...

0800b5bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b5c4:	4b19      	ldr	r3, [pc, #100]	; (800b62c <HAL_PWREx_ConfigSupply+0x70>)
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	d00a      	beq.n	800b5e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b5d0:	4b16      	ldr	r3, [pc, #88]	; (800b62c <HAL_PWREx_ConfigSupply+0x70>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f003 0307 	and.w	r3, r3, #7
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d001      	beq.n	800b5e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e01f      	b.n	800b622 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e01d      	b.n	800b622 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b5e6:	4b11      	ldr	r3, [pc, #68]	; (800b62c <HAL_PWREx_ConfigSupply+0x70>)
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	f023 0207 	bic.w	r2, r3, #7
 800b5ee:	490f      	ldr	r1, [pc, #60]	; (800b62c <HAL_PWREx_ConfigSupply+0x70>)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b5f6:	f7f9 fc89 	bl	8004f0c <HAL_GetTick>
 800b5fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b5fc:	e009      	b.n	800b612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b5fe:	f7f9 fc85 	bl	8004f0c <HAL_GetTick>
 800b602:	4602      	mov	r2, r0
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b60c:	d901      	bls.n	800b612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e007      	b.n	800b622 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <HAL_PWREx_ConfigSupply+0x70>)
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b61e:	d1ee      	bne.n	800b5fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	58024800 	.word	0x58024800

0800b630 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	4a04      	ldr	r2, [pc, #16]	; (800b64c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b63a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b63e:	60d3      	str	r3, [r2, #12]
}
 800b640:	bf00      	nop
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	58024800 	.word	0x58024800

0800b650 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08c      	sub	sp, #48	; 0x30
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	f000 bc48 	b.w	800bef4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 8088 	beq.w	800b782 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b672:	4b99      	ldr	r3, [pc, #612]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b67c:	4b96      	ldr	r3, [pc, #600]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	2b10      	cmp	r3, #16
 800b686:	d007      	beq.n	800b698 <HAL_RCC_OscConfig+0x48>
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	2b18      	cmp	r3, #24
 800b68c:	d111      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x62>
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	f003 0303 	and.w	r3, r3, #3
 800b694:	2b02      	cmp	r3, #2
 800b696:	d10c      	bne.n	800b6b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b698:	4b8f      	ldr	r3, [pc, #572]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d06d      	beq.n	800b780 <HAL_RCC_OscConfig+0x130>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d169      	bne.n	800b780 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f000 bc21 	b.w	800bef4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ba:	d106      	bne.n	800b6ca <HAL_RCC_OscConfig+0x7a>
 800b6bc:	4b86      	ldr	r3, [pc, #536]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a85      	ldr	r2, [pc, #532]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e02e      	b.n	800b728 <HAL_RCC_OscConfig+0xd8>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10c      	bne.n	800b6ec <HAL_RCC_OscConfig+0x9c>
 800b6d2:	4b81      	ldr	r3, [pc, #516]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a80      	ldr	r2, [pc, #512]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	4b7e      	ldr	r3, [pc, #504]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a7d      	ldr	r2, [pc, #500]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	e01d      	b.n	800b728 <HAL_RCC_OscConfig+0xd8>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b6f4:	d10c      	bne.n	800b710 <HAL_RCC_OscConfig+0xc0>
 800b6f6:	4b78      	ldr	r3, [pc, #480]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a77      	ldr	r2, [pc, #476]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b6fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	4b75      	ldr	r3, [pc, #468]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a74      	ldr	r2, [pc, #464]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	e00b      	b.n	800b728 <HAL_RCC_OscConfig+0xd8>
 800b710:	4b71      	ldr	r3, [pc, #452]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a70      	ldr	r2, [pc, #448]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	4b6e      	ldr	r3, [pc, #440]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a6d      	ldr	r2, [pc, #436]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d013      	beq.n	800b758 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b730:	f7f9 fbec 	bl	8004f0c <HAL_GetTick>
 800b734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b736:	e008      	b.n	800b74a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b738:	f7f9 fbe8 	bl	8004f0c <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	2b64      	cmp	r3, #100	; 0x64
 800b744:	d901      	bls.n	800b74a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e3d4      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b74a:	4b63      	ldr	r3, [pc, #396]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0f0      	beq.n	800b738 <HAL_RCC_OscConfig+0xe8>
 800b756:	e014      	b.n	800b782 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b758:	f7f9 fbd8 	bl	8004f0c <HAL_GetTick>
 800b75c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b75e:	e008      	b.n	800b772 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b760:	f7f9 fbd4 	bl	8004f0c <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	2b64      	cmp	r3, #100	; 0x64
 800b76c:	d901      	bls.n	800b772 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b76e:	2303      	movs	r3, #3
 800b770:	e3c0      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b772:	4b59      	ldr	r3, [pc, #356]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f0      	bne.n	800b760 <HAL_RCC_OscConfig+0x110>
 800b77e:	e000      	b.n	800b782 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80ca 	beq.w	800b924 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b790:	4b51      	ldr	r3, [pc, #324]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b79a:	4b4f      	ldr	r3, [pc, #316]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x166>
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	2b18      	cmp	r3, #24
 800b7aa:	d156      	bne.n	800b85a <HAL_RCC_OscConfig+0x20a>
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d151      	bne.n	800b85a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7b6:	4b48      	ldr	r3, [pc, #288]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0304 	and.w	r3, r3, #4
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d005      	beq.n	800b7ce <HAL_RCC_OscConfig+0x17e>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e392      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b7ce:	4b42      	ldr	r3, [pc, #264]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f023 0219 	bic.w	r2, r3, #25
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	493f      	ldr	r1, [pc, #252]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7e0:	f7f9 fb94 	bl	8004f0c <HAL_GetTick>
 800b7e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7e6:	e008      	b.n	800b7fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7e8:	f7f9 fb90 	bl	8004f0c <HAL_GetTick>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d901      	bls.n	800b7fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e37c      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b7fa:	4b37      	ldr	r3, [pc, #220]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0f0      	beq.n	800b7e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b806:	f7f9 fbb1 	bl	8004f6c <HAL_GetREVID>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b810:	4293      	cmp	r3, r2
 800b812:	d817      	bhi.n	800b844 <HAL_RCC_OscConfig+0x1f4>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b40      	cmp	r3, #64	; 0x40
 800b81a:	d108      	bne.n	800b82e <HAL_RCC_OscConfig+0x1de>
 800b81c:	4b2e      	ldr	r3, [pc, #184]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b824:	4a2c      	ldr	r2, [pc, #176]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b82a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b82c:	e07a      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b82e:	4b2a      	ldr	r3, [pc, #168]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	031b      	lsls	r3, r3, #12
 800b83c:	4926      	ldr	r1, [pc, #152]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b842:	e06f      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b844:	4b24      	ldr	r3, [pc, #144]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	061b      	lsls	r3, r3, #24
 800b852:	4921      	ldr	r1, [pc, #132]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b854:	4313      	orrs	r3, r2
 800b856:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b858:	e064      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d047      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b862:	4b1d      	ldr	r3, [pc, #116]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f023 0219 	bic.w	r2, r3, #25
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	491a      	ldr	r1, [pc, #104]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b870:	4313      	orrs	r3, r2
 800b872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b874:	f7f9 fb4a 	bl	8004f0c <HAL_GetTick>
 800b878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b87a:	e008      	b.n	800b88e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b87c:	f7f9 fb46 	bl	8004f0c <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b02      	cmp	r3, #2
 800b888:	d901      	bls.n	800b88e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e332      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0f0      	beq.n	800b87c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b89a:	f7f9 fb67 	bl	8004f6c <HAL_GetREVID>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d819      	bhi.n	800b8dc <HAL_RCC_OscConfig+0x28c>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	2b40      	cmp	r3, #64	; 0x40
 800b8ae:	d108      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x272>
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b8b8:	4a07      	ldr	r2, [pc, #28]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b8ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8be:	6053      	str	r3, [r2, #4]
 800b8c0:	e030      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	031b      	lsls	r3, r3, #12
 800b8d0:	4901      	ldr	r1, [pc, #4]	; (800b8d8 <HAL_RCC_OscConfig+0x288>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	604b      	str	r3, [r1, #4]
 800b8d6:	e025      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
 800b8d8:	58024400 	.word	0x58024400
 800b8dc:	4b9a      	ldr	r3, [pc, #616]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	061b      	lsls	r3, r3, #24
 800b8ea:	4997      	ldr	r1, [pc, #604]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	604b      	str	r3, [r1, #4]
 800b8f0:	e018      	b.n	800b924 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b8f2:	4b95      	ldr	r3, [pc, #596]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a94      	ldr	r2, [pc, #592]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b8f8:	f023 0301 	bic.w	r3, r3, #1
 800b8fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8fe:	f7f9 fb05 	bl	8004f0c <HAL_GetTick>
 800b902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b904:	e008      	b.n	800b918 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b906:	f7f9 fb01 	bl	8004f0c <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	d901      	bls.n	800b918 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e2ed      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b918:	4b8b      	ldr	r3, [pc, #556]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 0304 	and.w	r3, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f0      	bne.n	800b906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0310 	and.w	r3, r3, #16
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 80a9 	beq.w	800ba84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b932:	4b85      	ldr	r3, [pc, #532]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b93a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b93c:	4b82      	ldr	r3, [pc, #520]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b940:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	2b08      	cmp	r3, #8
 800b946:	d007      	beq.n	800b958 <HAL_RCC_OscConfig+0x308>
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	2b18      	cmp	r3, #24
 800b94c:	d13a      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x374>
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f003 0303 	and.w	r3, r3, #3
 800b954:	2b01      	cmp	r3, #1
 800b956:	d135      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b958:	4b7b      	ldr	r3, [pc, #492]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b960:	2b00      	cmp	r3, #0
 800b962:	d005      	beq.n	800b970 <HAL_RCC_OscConfig+0x320>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	2b80      	cmp	r3, #128	; 0x80
 800b96a:	d001      	beq.n	800b970 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e2c1      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b970:	f7f9 fafc 	bl	8004f6c <HAL_GetREVID>
 800b974:	4603      	mov	r3, r0
 800b976:	f241 0203 	movw	r2, #4099	; 0x1003
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d817      	bhi.n	800b9ae <HAL_RCC_OscConfig+0x35e>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a1b      	ldr	r3, [r3, #32]
 800b982:	2b20      	cmp	r3, #32
 800b984:	d108      	bne.n	800b998 <HAL_RCC_OscConfig+0x348>
 800b986:	4b70      	ldr	r3, [pc, #448]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b98e:	4a6e      	ldr	r2, [pc, #440]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b994:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b996:	e075      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b998:	4b6b      	ldr	r3, [pc, #428]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	069b      	lsls	r3, r3, #26
 800b9a6:	4968      	ldr	r1, [pc, #416]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9ac:	e06a      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9ae:	4b66      	ldr	r3, [pc, #408]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	061b      	lsls	r3, r3, #24
 800b9bc:	4962      	ldr	r1, [pc, #392]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9c2:	e05f      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d042      	beq.n	800ba52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b9cc:	4b5e      	ldr	r3, [pc, #376]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a5d      	ldr	r2, [pc, #372]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d8:	f7f9 fa98 	bl	8004f0c <HAL_GetTick>
 800b9dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9de:	e008      	b.n	800b9f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b9e0:	f7f9 fa94 	bl	8004f0c <HAL_GetTick>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d901      	bls.n	800b9f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e280      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9f2:	4b55      	ldr	r3, [pc, #340]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0f0      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9fe:	f7f9 fab5 	bl	8004f6c <HAL_GetREVID>
 800ba02:	4603      	mov	r3, r0
 800ba04:	f241 0203 	movw	r2, #4099	; 0x1003
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d817      	bhi.n	800ba3c <HAL_RCC_OscConfig+0x3ec>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a1b      	ldr	r3, [r3, #32]
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d108      	bne.n	800ba26 <HAL_RCC_OscConfig+0x3d6>
 800ba14:	4b4c      	ldr	r3, [pc, #304]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ba1c:	4a4a      	ldr	r2, [pc, #296]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba22:	6053      	str	r3, [r2, #4]
 800ba24:	e02e      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
 800ba26:	4b48      	ldr	r3, [pc, #288]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	069b      	lsls	r3, r3, #26
 800ba34:	4944      	ldr	r1, [pc, #272]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba36:	4313      	orrs	r3, r2
 800ba38:	604b      	str	r3, [r1, #4]
 800ba3a:	e023      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
 800ba3c:	4b42      	ldr	r3, [pc, #264]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	061b      	lsls	r3, r3, #24
 800ba4a:	493f      	ldr	r1, [pc, #252]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	60cb      	str	r3, [r1, #12]
 800ba50:	e018      	b.n	800ba84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ba52:	4b3d      	ldr	r3, [pc, #244]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a3c      	ldr	r2, [pc, #240]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba5e:	f7f9 fa55 	bl	8004f0c <HAL_GetTick>
 800ba62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba64:	e008      	b.n	800ba78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba66:	f7f9 fa51 	bl	8004f0c <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d901      	bls.n	800ba78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e23d      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba78:	4b33      	ldr	r3, [pc, #204]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f0      	bne.n	800ba66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0308 	and.w	r3, r3, #8
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d036      	beq.n	800bafe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d019      	beq.n	800bacc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba98:	4b2b      	ldr	r3, [pc, #172]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba9c:	4a2a      	ldr	r2, [pc, #168]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800ba9e:	f043 0301 	orr.w	r3, r3, #1
 800baa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baa4:	f7f9 fa32 	bl	8004f0c <HAL_GetTick>
 800baa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800baaa:	e008      	b.n	800babe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baac:	f7f9 fa2e 	bl	8004f0c <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d901      	bls.n	800babe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e21a      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800babe:	4b22      	ldr	r3, [pc, #136]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0f0      	beq.n	800baac <HAL_RCC_OscConfig+0x45c>
 800baca:	e018      	b.n	800bafe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bacc:	4b1e      	ldr	r3, [pc, #120]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad0:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bad2:	f023 0301 	bic.w	r3, r3, #1
 800bad6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bad8:	f7f9 fa18 	bl	8004f0c <HAL_GetTick>
 800badc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bade:	e008      	b.n	800baf2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bae0:	f7f9 fa14 	bl	8004f0c <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e200      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800baf2:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800baf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baf6:	f003 0302 	and.w	r3, r3, #2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1f0      	bne.n	800bae0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 0320 	and.w	r3, r3, #32
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d039      	beq.n	800bb7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01c      	beq.n	800bb4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a0c      	ldr	r2, [pc, #48]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bb18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb1e:	f7f9 f9f5 	bl	8004f0c <HAL_GetTick>
 800bb22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb24:	e008      	b.n	800bb38 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb26:	f7f9 f9f1 	bl	8004f0c <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d901      	bls.n	800bb38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e1dd      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb38:	4b03      	ldr	r3, [pc, #12]	; (800bb48 <HAL_RCC_OscConfig+0x4f8>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0f0      	beq.n	800bb26 <HAL_RCC_OscConfig+0x4d6>
 800bb44:	e01b      	b.n	800bb7e <HAL_RCC_OscConfig+0x52e>
 800bb46:	bf00      	nop
 800bb48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb4c:	4b9b      	ldr	r3, [pc, #620]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a9a      	ldr	r2, [pc, #616]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bb52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb58:	f7f9 f9d8 	bl	8004f0c <HAL_GetTick>
 800bb5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb5e:	e008      	b.n	800bb72 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb60:	f7f9 f9d4 	bl	8004f0c <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e1c0      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb72:	4b92      	ldr	r3, [pc, #584]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f0      	bne.n	800bb60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 0304 	and.w	r3, r3, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 8081 	beq.w	800bc8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb8c:	4b8c      	ldr	r3, [pc, #560]	; (800bdc0 <HAL_RCC_OscConfig+0x770>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a8b      	ldr	r2, [pc, #556]	; (800bdc0 <HAL_RCC_OscConfig+0x770>)
 800bb92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb98:	f7f9 f9b8 	bl	8004f0c <HAL_GetTick>
 800bb9c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb9e:	e008      	b.n	800bbb2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bba0:	f7f9 f9b4 	bl	8004f0c <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	2b64      	cmp	r3, #100	; 0x64
 800bbac:	d901      	bls.n	800bbb2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e1a0      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbb2:	4b83      	ldr	r3, [pc, #524]	; (800bdc0 <HAL_RCC_OscConfig+0x770>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d0f0      	beq.n	800bba0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d106      	bne.n	800bbd4 <HAL_RCC_OscConfig+0x584>
 800bbc6:	4b7d      	ldr	r3, [pc, #500]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbca:	4a7c      	ldr	r2, [pc, #496]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbcc:	f043 0301 	orr.w	r3, r3, #1
 800bbd0:	6713      	str	r3, [r2, #112]	; 0x70
 800bbd2:	e02d      	b.n	800bc30 <HAL_RCC_OscConfig+0x5e0>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10c      	bne.n	800bbf6 <HAL_RCC_OscConfig+0x5a6>
 800bbdc:	4b77      	ldr	r3, [pc, #476]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe0:	4a76      	ldr	r2, [pc, #472]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbe2:	f023 0301 	bic.w	r3, r3, #1
 800bbe6:	6713      	str	r3, [r2, #112]	; 0x70
 800bbe8:	4b74      	ldr	r3, [pc, #464]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbec:	4a73      	ldr	r2, [pc, #460]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bbee:	f023 0304 	bic.w	r3, r3, #4
 800bbf2:	6713      	str	r3, [r2, #112]	; 0x70
 800bbf4:	e01c      	b.n	800bc30 <HAL_RCC_OscConfig+0x5e0>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d10c      	bne.n	800bc18 <HAL_RCC_OscConfig+0x5c8>
 800bbfe:	4b6f      	ldr	r3, [pc, #444]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc02:	4a6e      	ldr	r2, [pc, #440]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc04:	f043 0304 	orr.w	r3, r3, #4
 800bc08:	6713      	str	r3, [r2, #112]	; 0x70
 800bc0a:	4b6c      	ldr	r3, [pc, #432]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0e:	4a6b      	ldr	r2, [pc, #428]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	6713      	str	r3, [r2, #112]	; 0x70
 800bc16:	e00b      	b.n	800bc30 <HAL_RCC_OscConfig+0x5e0>
 800bc18:	4b68      	ldr	r3, [pc, #416]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1c:	4a67      	ldr	r2, [pc, #412]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	6713      	str	r3, [r2, #112]	; 0x70
 800bc24:	4b65      	ldr	r3, [pc, #404]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc28:	4a64      	ldr	r2, [pc, #400]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc2a:	f023 0304 	bic.w	r3, r3, #4
 800bc2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d015      	beq.n	800bc64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc38:	f7f9 f968 	bl	8004f0c <HAL_GetTick>
 800bc3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc3e:	e00a      	b.n	800bc56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc40:	f7f9 f964 	bl	8004f0c <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d901      	bls.n	800bc56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bc52:	2303      	movs	r3, #3
 800bc54:	e14e      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc56:	4b59      	ldr	r3, [pc, #356]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5a:	f003 0302 	and.w	r3, r3, #2
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0ee      	beq.n	800bc40 <HAL_RCC_OscConfig+0x5f0>
 800bc62:	e014      	b.n	800bc8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc64:	f7f9 f952 	bl	8004f0c <HAL_GetTick>
 800bc68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc6a:	e00a      	b.n	800bc82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc6c:	f7f9 f94e 	bl	8004f0c <HAL_GetTick>
 800bc70:	4602      	mov	r2, r0
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e138      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc82:	4b4e      	ldr	r3, [pc, #312]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1ee      	bne.n	800bc6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 812d 	beq.w	800bef2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bc98:	4b48      	ldr	r3, [pc, #288]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bca0:	2b18      	cmp	r3, #24
 800bca2:	f000 80bd 	beq.w	800be20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	f040 809e 	bne.w	800bdec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcb0:	4b42      	ldr	r3, [pc, #264]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a41      	ldr	r2, [pc, #260]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bcb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bcba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcbc:	f7f9 f926 	bl	8004f0c <HAL_GetTick>
 800bcc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcc2:	e008      	b.n	800bcd6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc4:	f7f9 f922 	bl	8004f0c <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d901      	bls.n	800bcd6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e10e      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcd6:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1f0      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bce2:	4b36      	ldr	r3, [pc, #216]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bce6:	4b37      	ldr	r3, [pc, #220]	; (800bdc4 <HAL_RCC_OscConfig+0x774>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bcf2:	0112      	lsls	r2, r2, #4
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	4931      	ldr	r1, [pc, #196]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	628b      	str	r3, [r1, #40]	; 0x28
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd00:	3b01      	subs	r3, #1
 800bd02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	025b      	lsls	r3, r3, #9
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	3b01      	subs	r3, #1
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd24:	3b01      	subs	r3, #1
 800bd26:	061b      	lsls	r3, r3, #24
 800bd28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd2c:	4923      	ldr	r1, [pc, #140]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bd32:	4b22      	ldr	r3, [pc, #136]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd36:	4a21      	ldr	r2, [pc, #132]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd38:	f023 0301 	bic.w	r3, r3, #1
 800bd3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd3e:	4b1f      	ldr	r3, [pc, #124]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd42:	4b21      	ldr	r3, [pc, #132]	; (800bdc8 <HAL_RCC_OscConfig+0x778>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bd4a:	00d2      	lsls	r2, r2, #3
 800bd4c:	491b      	ldr	r1, [pc, #108]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bd52:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	f023 020c 	bic.w	r2, r3, #12
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5e:	4917      	ldr	r1, [pc, #92]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bd64:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	f023 0202 	bic.w	r2, r3, #2
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd70:	4912      	ldr	r1, [pc, #72]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd72:	4313      	orrs	r3, r2
 800bd74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bd76:	4b11      	ldr	r3, [pc, #68]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7a:	4a10      	ldr	r2, [pc, #64]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd82:	4b0e      	ldr	r3, [pc, #56]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd92:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bd9a:	4b08      	ldr	r3, [pc, #32]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	4a07      	ldr	r2, [pc, #28]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bda0:	f043 0301 	orr.w	r3, r3, #1
 800bda4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a04      	ldr	r2, [pc, #16]	; (800bdbc <HAL_RCC_OscConfig+0x76c>)
 800bdac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdb2:	f7f9 f8ab 	bl	8004f0c <HAL_GetTick>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bdb8:	e011      	b.n	800bdde <HAL_RCC_OscConfig+0x78e>
 800bdba:	bf00      	nop
 800bdbc:	58024400 	.word	0x58024400
 800bdc0:	58024800 	.word	0x58024800
 800bdc4:	fffffc0c 	.word	0xfffffc0c
 800bdc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdcc:	f7f9 f89e 	bl	8004f0c <HAL_GetTick>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d901      	bls.n	800bdde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e08a      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bdde:	4b47      	ldr	r3, [pc, #284]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0f0      	beq.n	800bdcc <HAL_RCC_OscConfig+0x77c>
 800bdea:	e082      	b.n	800bef2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdec:	4b43      	ldr	r3, [pc, #268]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a42      	ldr	r2, [pc, #264]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bdf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdf8:	f7f9 f888 	bl	8004f0c <HAL_GetTick>
 800bdfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdfe:	e008      	b.n	800be12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be00:	f7f9 f884 	bl	8004f0c <HAL_GetTick>
 800be04:	4602      	mov	r2, r0
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d901      	bls.n	800be12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e070      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be12:	4b3a      	ldr	r3, [pc, #232]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1f0      	bne.n	800be00 <HAL_RCC_OscConfig+0x7b0>
 800be1e:	e068      	b.n	800bef2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800be20:	4b36      	ldr	r3, [pc, #216]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800be22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800be26:	4b35      	ldr	r3, [pc, #212]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800be28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be30:	2b01      	cmp	r3, #1
 800be32:	d031      	beq.n	800be98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f003 0203 	and.w	r2, r3, #3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be3e:	429a      	cmp	r2, r3
 800be40:	d12a      	bne.n	800be98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	091b      	lsrs	r3, r3, #4
 800be46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be4e:	429a      	cmp	r2, r3
 800be50:	d122      	bne.n	800be98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be5e:	429a      	cmp	r2, r3
 800be60:	d11a      	bne.n	800be98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	0a5b      	lsrs	r3, r3, #9
 800be66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be70:	429a      	cmp	r2, r3
 800be72:	d111      	bne.n	800be98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be82:	429a      	cmp	r2, r3
 800be84:	d108      	bne.n	800be98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	0e1b      	lsrs	r3, r3, #24
 800be8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be94:	429a      	cmp	r2, r3
 800be96:	d001      	beq.n	800be9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e02b      	b.n	800bef4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800be9c:	4b17      	ldr	r3, [pc, #92]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800be9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea0:	08db      	lsrs	r3, r3, #3
 800bea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bea6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d01f      	beq.n	800bef2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800beb2:	4b12      	ldr	r3, [pc, #72]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	4a11      	ldr	r2, [pc, #68]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bebe:	f7f9 f825 	bl	8004f0c <HAL_GetTick>
 800bec2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bec4:	bf00      	nop
 800bec6:	f7f9 f821 	bl	8004f0c <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	4293      	cmp	r3, r2
 800bed0:	d0f9      	beq.n	800bec6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bed2:	4b0a      	ldr	r3, [pc, #40]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bed6:	4b0a      	ldr	r3, [pc, #40]	; (800bf00 <HAL_RCC_OscConfig+0x8b0>)
 800bed8:	4013      	ands	r3, r2
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bede:	00d2      	lsls	r2, r2, #3
 800bee0:	4906      	ldr	r1, [pc, #24]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bee2:	4313      	orrs	r3, r2
 800bee4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	4a04      	ldr	r2, [pc, #16]	; (800befc <HAL_RCC_OscConfig+0x8ac>)
 800beec:	f043 0301 	orr.w	r3, r3, #1
 800bef0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3730      	adds	r7, #48	; 0x30
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	58024400 	.word	0x58024400
 800bf00:	ffff0007 	.word	0xffff0007

0800bf04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e19c      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf18:	4b8a      	ldr	r3, [pc, #552]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d910      	bls.n	800bf48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf26:	4b87      	ldr	r3, [pc, #540]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f023 020f 	bic.w	r2, r3, #15
 800bf2e:	4985      	ldr	r1, [pc, #532]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf36:	4b83      	ldr	r3, [pc, #524]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 030f 	and.w	r3, r3, #15
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d001      	beq.n	800bf48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e184      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d010      	beq.n	800bf76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	691a      	ldr	r2, [r3, #16]
 800bf58:	4b7b      	ldr	r3, [pc, #492]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d908      	bls.n	800bf76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf64:	4b78      	ldr	r3, [pc, #480]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	4975      	ldr	r1, [pc, #468]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0308 	and.w	r3, r3, #8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d010      	beq.n	800bfa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	695a      	ldr	r2, [r3, #20]
 800bf86:	4b70      	ldr	r3, [pc, #448]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d908      	bls.n	800bfa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf92:	4b6d      	ldr	r3, [pc, #436]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	496a      	ldr	r1, [pc, #424]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0310 	and.w	r3, r3, #16
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d010      	beq.n	800bfd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	699a      	ldr	r2, [r3, #24]
 800bfb4:	4b64      	ldr	r3, [pc, #400]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d908      	bls.n	800bfd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bfc0:	4b61      	ldr	r3, [pc, #388]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	495e      	ldr	r1, [pc, #376]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0320 	and.w	r3, r3, #32
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d010      	beq.n	800c000 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69da      	ldr	r2, [r3, #28]
 800bfe2:	4b59      	ldr	r3, [pc, #356]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d908      	bls.n	800c000 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bfee:	4b56      	ldr	r3, [pc, #344]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	4953      	ldr	r1, [pc, #332]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800bffc:	4313      	orrs	r3, r2
 800bffe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0302 	and.w	r3, r3, #2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d010      	beq.n	800c02e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	4b4d      	ldr	r3, [pc, #308]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	429a      	cmp	r2, r3
 800c01a:	d908      	bls.n	800c02e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c01c:	4b4a      	ldr	r3, [pc, #296]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	f023 020f 	bic.w	r2, r3, #15
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	4947      	ldr	r1, [pc, #284]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d055      	beq.n	800c0e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c03a:	4b43      	ldr	r3, [pc, #268]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	4940      	ldr	r1, [pc, #256]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c048:	4313      	orrs	r3, r2
 800c04a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	2b02      	cmp	r3, #2
 800c052:	d107      	bne.n	800c064 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c054:	4b3c      	ldr	r3, [pc, #240]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d121      	bne.n	800c0a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e0f6      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d107      	bne.n	800c07c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c06c:	4b36      	ldr	r3, [pc, #216]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d115      	bne.n	800c0a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e0ea      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d107      	bne.n	800c094 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c084:	4b30      	ldr	r3, [pc, #192]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d109      	bne.n	800c0a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e0de      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c094:	4b2c      	ldr	r3, [pc, #176]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0304 	and.w	r3, r3, #4
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e0d6      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c0a4:	4b28      	ldr	r3, [pc, #160]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f023 0207 	bic.w	r2, r3, #7
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4925      	ldr	r1, [pc, #148]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0b6:	f7f8 ff29 	bl	8004f0c <HAL_GetTick>
 800c0ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0bc:	e00a      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0be:	f7f8 ff25 	bl	8004f0c <HAL_GetTick>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d901      	bls.n	800c0d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e0be      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0d4:	4b1c      	ldr	r3, [pc, #112]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d1eb      	bne.n	800c0be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0302 	and.w	r3, r3, #2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d010      	beq.n	800c114 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68da      	ldr	r2, [r3, #12]
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d208      	bcs.n	800c114 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c102:	4b11      	ldr	r3, [pc, #68]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	f023 020f 	bic.w	r2, r3, #15
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	490e      	ldr	r1, [pc, #56]	; (800c148 <HAL_RCC_ClockConfig+0x244>)
 800c110:	4313      	orrs	r3, r2
 800c112:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d214      	bcs.n	800c14c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c122:	4b08      	ldr	r3, [pc, #32]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f023 020f 	bic.w	r2, r3, #15
 800c12a:	4906      	ldr	r1, [pc, #24]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	4313      	orrs	r3, r2
 800c130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c132:	4b04      	ldr	r3, [pc, #16]	; (800c144 <HAL_RCC_ClockConfig+0x240>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d005      	beq.n	800c14c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c140:	2301      	movs	r3, #1
 800c142:	e086      	b.n	800c252 <HAL_RCC_ClockConfig+0x34e>
 800c144:	52002000 	.word	0x52002000
 800c148:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d010      	beq.n	800c17a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	691a      	ldr	r2, [r3, #16]
 800c15c:	4b3f      	ldr	r3, [pc, #252]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c164:	429a      	cmp	r2, r3
 800c166:	d208      	bcs.n	800c17a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c168:	4b3c      	ldr	r3, [pc, #240]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	4939      	ldr	r1, [pc, #228]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c176:	4313      	orrs	r3, r2
 800c178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0308 	and.w	r3, r3, #8
 800c182:	2b00      	cmp	r3, #0
 800c184:	d010      	beq.n	800c1a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	4b34      	ldr	r3, [pc, #208]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c192:	429a      	cmp	r2, r3
 800c194:	d208      	bcs.n	800c1a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c196:	4b31      	ldr	r3, [pc, #196]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	492e      	ldr	r1, [pc, #184]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 0310 	and.w	r3, r3, #16
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d010      	beq.n	800c1d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	699a      	ldr	r2, [r3, #24]
 800c1b8:	4b28      	ldr	r3, [pc, #160]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d208      	bcs.n	800c1d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c1c4:	4b25      	ldr	r3, [pc, #148]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	4922      	ldr	r1, [pc, #136]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 0320 	and.w	r3, r3, #32
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d010      	beq.n	800c204 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	69da      	ldr	r2, [r3, #28]
 800c1e6:	4b1d      	ldr	r3, [pc, #116]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d208      	bcs.n	800c204 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c1f2:	4b1a      	ldr	r3, [pc, #104]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	69db      	ldr	r3, [r3, #28]
 800c1fe:	4917      	ldr	r1, [pc, #92]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c200:	4313      	orrs	r3, r2
 800c202:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c204:	f000 f834 	bl	800c270 <HAL_RCC_GetSysClockFreq>
 800c208:	4602      	mov	r2, r0
 800c20a:	4b14      	ldr	r3, [pc, #80]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	0a1b      	lsrs	r3, r3, #8
 800c210:	f003 030f 	and.w	r3, r3, #15
 800c214:	4912      	ldr	r1, [pc, #72]	; (800c260 <HAL_RCC_ClockConfig+0x35c>)
 800c216:	5ccb      	ldrb	r3, [r1, r3]
 800c218:	f003 031f 	and.w	r3, r3, #31
 800c21c:	fa22 f303 	lsr.w	r3, r2, r3
 800c220:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c222:	4b0e      	ldr	r3, [pc, #56]	; (800c25c <HAL_RCC_ClockConfig+0x358>)
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	f003 030f 	and.w	r3, r3, #15
 800c22a:	4a0d      	ldr	r2, [pc, #52]	; (800c260 <HAL_RCC_ClockConfig+0x35c>)
 800c22c:	5cd3      	ldrb	r3, [r2, r3]
 800c22e:	f003 031f 	and.w	r3, r3, #31
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	fa22 f303 	lsr.w	r3, r2, r3
 800c238:	4a0a      	ldr	r2, [pc, #40]	; (800c264 <HAL_RCC_ClockConfig+0x360>)
 800c23a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c23c:	4a0a      	ldr	r2, [pc, #40]	; (800c268 <HAL_RCC_ClockConfig+0x364>)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c242:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <HAL_RCC_ClockConfig+0x368>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f8 fe16 	bl	8004e78 <HAL_InitTick>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c250:	7bfb      	ldrb	r3, [r7, #15]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	58024400 	.word	0x58024400
 800c260:	08017c3c 	.word	0x08017c3c
 800c264:	2000001c 	.word	0x2000001c
 800c268:	20000018 	.word	0x20000018
 800c26c:	20000040 	.word	0x20000040

0800c270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c270:	b480      	push	{r7}
 800c272:	b089      	sub	sp, #36	; 0x24
 800c274:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c276:	4bb3      	ldr	r3, [pc, #716]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c27e:	2b18      	cmp	r3, #24
 800c280:	f200 8155 	bhi.w	800c52e <HAL_RCC_GetSysClockFreq+0x2be>
 800c284:	a201      	add	r2, pc, #4	; (adr r2, 800c28c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28a:	bf00      	nop
 800c28c:	0800c2f1 	.word	0x0800c2f1
 800c290:	0800c52f 	.word	0x0800c52f
 800c294:	0800c52f 	.word	0x0800c52f
 800c298:	0800c52f 	.word	0x0800c52f
 800c29c:	0800c52f 	.word	0x0800c52f
 800c2a0:	0800c52f 	.word	0x0800c52f
 800c2a4:	0800c52f 	.word	0x0800c52f
 800c2a8:	0800c52f 	.word	0x0800c52f
 800c2ac:	0800c317 	.word	0x0800c317
 800c2b0:	0800c52f 	.word	0x0800c52f
 800c2b4:	0800c52f 	.word	0x0800c52f
 800c2b8:	0800c52f 	.word	0x0800c52f
 800c2bc:	0800c52f 	.word	0x0800c52f
 800c2c0:	0800c52f 	.word	0x0800c52f
 800c2c4:	0800c52f 	.word	0x0800c52f
 800c2c8:	0800c52f 	.word	0x0800c52f
 800c2cc:	0800c31d 	.word	0x0800c31d
 800c2d0:	0800c52f 	.word	0x0800c52f
 800c2d4:	0800c52f 	.word	0x0800c52f
 800c2d8:	0800c52f 	.word	0x0800c52f
 800c2dc:	0800c52f 	.word	0x0800c52f
 800c2e0:	0800c52f 	.word	0x0800c52f
 800c2e4:	0800c52f 	.word	0x0800c52f
 800c2e8:	0800c52f 	.word	0x0800c52f
 800c2ec:	0800c323 	.word	0x0800c323
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2f0:	4b94      	ldr	r3, [pc, #592]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0320 	and.w	r3, r3, #32
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d009      	beq.n	800c310 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2fc:	4b91      	ldr	r3, [pc, #580]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	08db      	lsrs	r3, r3, #3
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	4a90      	ldr	r2, [pc, #576]	; (800c548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c308:	fa22 f303 	lsr.w	r3, r2, r3
 800c30c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c30e:	e111      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c310:	4b8d      	ldr	r3, [pc, #564]	; (800c548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c312:	61bb      	str	r3, [r7, #24]
      break;
 800c314:	e10e      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c316:	4b8d      	ldr	r3, [pc, #564]	; (800c54c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c318:	61bb      	str	r3, [r7, #24]
      break;
 800c31a:	e10b      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c31c:	4b8c      	ldr	r3, [pc, #560]	; (800c550 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c31e:	61bb      	str	r3, [r7, #24]
      break;
 800c320:	e108      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c322:	4b88      	ldr	r3, [pc, #544]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c326:	f003 0303 	and.w	r3, r3, #3
 800c32a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c32c:	4b85      	ldr	r3, [pc, #532]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c330:	091b      	lsrs	r3, r3, #4
 800c332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c336:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c338:	4b82      	ldr	r3, [pc, #520]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c342:	4b80      	ldr	r3, [pc, #512]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c346:	08db      	lsrs	r3, r3, #3
 800c348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	fb02 f303 	mul.w	r3, r2, r3
 800c352:	ee07 3a90 	vmov	s15, r3
 800c356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 80e1 	beq.w	800c528 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	f000 8083 	beq.w	800c474 <HAL_RCC_GetSysClockFreq+0x204>
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	2b02      	cmp	r3, #2
 800c372:	f200 80a1 	bhi.w	800c4b8 <HAL_RCC_GetSysClockFreq+0x248>
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_RCC_GetSysClockFreq+0x114>
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d056      	beq.n	800c430 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c382:	e099      	b.n	800c4b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c384:	4b6f      	ldr	r3, [pc, #444]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0320 	and.w	r3, r3, #32
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d02d      	beq.n	800c3ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c390:	4b6c      	ldr	r3, [pc, #432]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	08db      	lsrs	r3, r3, #3
 800c396:	f003 0303 	and.w	r3, r3, #3
 800c39a:	4a6b      	ldr	r2, [pc, #428]	; (800c548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c39c:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	ee07 3a90 	vmov	s15, r3
 800c3a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ba:	4b62      	ldr	r3, [pc, #392]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c2:	ee07 3a90 	vmov	s15, r3
 800c3c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c3ea:	e087      	b.n	800c4fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c558 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3fe:	4b51      	ldr	r3, [pc, #324]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c406:	ee07 3a90 	vmov	s15, r3
 800c40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c40e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c412:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c41e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c42a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c42e:	e065      	b.n	800c4fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c43a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c55c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c43e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c442:	4b40      	ldr	r3, [pc, #256]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c44a:	ee07 3a90 	vmov	s15, r3
 800c44e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c452:	ed97 6a02 	vldr	s12, [r7, #8]
 800c456:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c45a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c45e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c46e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c472:	e043      	b.n	800c4fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c47e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c560 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c486:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c48e:	ee07 3a90 	vmov	s15, r3
 800c492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c496:	ed97 6a02 	vldr	s12, [r7, #8]
 800c49a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c49e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c4b6:	e021      	b.n	800c4fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c55c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ca:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d2:	ee07 3a90 	vmov	s15, r3
 800c4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4da:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c4fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c4fc:	4b11      	ldr	r3, [pc, #68]	; (800c544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c500:	0a5b      	lsrs	r3, r3, #9
 800c502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c506:	3301      	adds	r3, #1
 800c508:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	ee07 3a90 	vmov	s15, r3
 800c510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c514:	edd7 6a07 	vldr	s13, [r7, #28]
 800c518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c51c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c520:	ee17 3a90 	vmov	r3, s15
 800c524:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c526:	e005      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	61bb      	str	r3, [r7, #24]
      break;
 800c52c:	e002      	b.n	800c534 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c52e:	4b07      	ldr	r3, [pc, #28]	; (800c54c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c530:	61bb      	str	r3, [r7, #24]
      break;
 800c532:	bf00      	nop
  }

  return sysclockfreq;
 800c534:	69bb      	ldr	r3, [r7, #24]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3724      	adds	r7, #36	; 0x24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	58024400 	.word	0x58024400
 800c548:	03d09000 	.word	0x03d09000
 800c54c:	003d0900 	.word	0x003d0900
 800c550:	017d7840 	.word	0x017d7840
 800c554:	46000000 	.word	0x46000000
 800c558:	4c742400 	.word	0x4c742400
 800c55c:	4a742400 	.word	0x4a742400
 800c560:	4bbebc20 	.word	0x4bbebc20

0800c564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c56a:	f7ff fe81 	bl	800c270 <HAL_RCC_GetSysClockFreq>
 800c56e:	4602      	mov	r2, r0
 800c570:	4b10      	ldr	r3, [pc, #64]	; (800c5b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	0a1b      	lsrs	r3, r3, #8
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	490f      	ldr	r1, [pc, #60]	; (800c5b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c57c:	5ccb      	ldrb	r3, [r1, r3]
 800c57e:	f003 031f 	and.w	r3, r3, #31
 800c582:	fa22 f303 	lsr.w	r3, r2, r3
 800c586:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c588:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	f003 030f 	and.w	r3, r3, #15
 800c590:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c592:	5cd3      	ldrb	r3, [r2, r3]
 800c594:	f003 031f 	and.w	r3, r3, #31
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	fa22 f303 	lsr.w	r3, r2, r3
 800c59e:	4a07      	ldr	r2, [pc, #28]	; (800c5bc <HAL_RCC_GetHCLKFreq+0x58>)
 800c5a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c5a2:	4a07      	ldr	r2, [pc, #28]	; (800c5c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c5a8:	4b04      	ldr	r3, [pc, #16]	; (800c5bc <HAL_RCC_GetHCLKFreq+0x58>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	58024400 	.word	0x58024400
 800c5b8:	08017c3c 	.word	0x08017c3c
 800c5bc:	2000001c 	.word	0x2000001c
 800c5c0:	20000018 	.word	0x20000018

0800c5c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c5c8:	f7ff ffcc 	bl	800c564 <HAL_RCC_GetHCLKFreq>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	091b      	lsrs	r3, r3, #4
 800c5d4:	f003 0307 	and.w	r3, r3, #7
 800c5d8:	4904      	ldr	r1, [pc, #16]	; (800c5ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800c5da:	5ccb      	ldrb	r3, [r1, r3]
 800c5dc:	f003 031f 	and.w	r3, r3, #31
 800c5e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	58024400 	.word	0x58024400
 800c5ec:	08017c3c 	.word	0x08017c3c

0800c5f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c5f4:	f7ff ffb6 	bl	800c564 <HAL_RCC_GetHCLKFreq>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	0a1b      	lsrs	r3, r3, #8
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	4904      	ldr	r1, [pc, #16]	; (800c618 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c606:	5ccb      	ldrb	r3, [r1, r3]
 800c608:	f003 031f 	and.w	r3, r3, #31
 800c60c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}
 800c614:	58024400 	.word	0x58024400
 800c618:	08017c3c 	.word	0x08017c3c

0800c61c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c61c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c620:	b0ca      	sub	sp, #296	; 0x128
 800c622:	af00      	add	r7, sp, #0
 800c624:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c640:	2500      	movs	r5, #0
 800c642:	ea54 0305 	orrs.w	r3, r4, r5
 800c646:	d049      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c64c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c64e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c652:	d02f      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c654:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c658:	d828      	bhi.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c65a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c65e:	d01a      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c664:	d822      	bhi.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c66a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c66e:	d007      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c670:	e01c      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c672:	4bb8      	ldr	r3, [pc, #736]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	4ab7      	ldr	r2, [pc, #732]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c67c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c67e:	e01a      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c684:	3308      	adds	r3, #8
 800c686:	2102      	movs	r1, #2
 800c688:	4618      	mov	r0, r3
 800c68a:	f002 fb61 	bl	800ed50 <RCCEx_PLL2_Config>
 800c68e:	4603      	mov	r3, r0
 800c690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c694:	e00f      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c69a:	3328      	adds	r3, #40	; 0x28
 800c69c:	2102      	movs	r1, #2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f002 fc08 	bl	800eeb4 <RCCEx_PLL3_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c6aa:	e004      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c6b2:	e000      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c6b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c6be:	4ba5      	ldr	r3, [pc, #660]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6cc:	4aa1      	ldr	r2, [pc, #644]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6ce:	430b      	orrs	r3, r1
 800c6d0:	6513      	str	r3, [r2, #80]	; 0x50
 800c6d2:	e003      	b.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c6e8:	f04f 0900 	mov.w	r9, #0
 800c6ec:	ea58 0309 	orrs.w	r3, r8, r9
 800c6f0:	d047      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d82a      	bhi.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c719 	.word	0x0800c719
 800c708:	0800c727 	.word	0x0800c727
 800c70c:	0800c73d 	.word	0x0800c73d
 800c710:	0800c75b 	.word	0x0800c75b
 800c714:	0800c75b 	.word	0x0800c75b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c718:	4b8e      	ldr	r3, [pc, #568]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	4a8d      	ldr	r2, [pc, #564]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c724:	e01a      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c72a:	3308      	adds	r3, #8
 800c72c:	2100      	movs	r1, #0
 800c72e:	4618      	mov	r0, r3
 800c730:	f002 fb0e 	bl	800ed50 <RCCEx_PLL2_Config>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c73a:	e00f      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c740:	3328      	adds	r3, #40	; 0x28
 800c742:	2100      	movs	r1, #0
 800c744:	4618      	mov	r0, r3
 800c746:	f002 fbb5 	bl	800eeb4 <RCCEx_PLL3_Config>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c750:	e004      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c758:	e000      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c75a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c75c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c764:	4b7b      	ldr	r3, [pc, #492]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c768:	f023 0107 	bic.w	r1, r3, #7
 800c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c772:	4a78      	ldr	r2, [pc, #480]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c774:	430b      	orrs	r3, r1
 800c776:	6513      	str	r3, [r2, #80]	; 0x50
 800c778:	e003      	b.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c77e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c78e:	f04f 0b00 	mov.w	fp, #0
 800c792:	ea5a 030b 	orrs.w	r3, sl, fp
 800c796:	d04c      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a2:	d030      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a8:	d829      	bhi.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c7aa:	2bc0      	cmp	r3, #192	; 0xc0
 800c7ac:	d02d      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c7ae:	2bc0      	cmp	r3, #192	; 0xc0
 800c7b0:	d825      	bhi.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c7b2:	2b80      	cmp	r3, #128	; 0x80
 800c7b4:	d018      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d821      	bhi.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c7be:	2b40      	cmp	r3, #64	; 0x40
 800c7c0:	d007      	beq.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c7c2:	e01c      	b.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7c4:	4b63      	ldr	r3, [pc, #396]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c8:	4a62      	ldr	r2, [pc, #392]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c7d0:	e01c      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d6:	3308      	adds	r3, #8
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f002 fab8 	bl	800ed50 <RCCEx_PLL2_Config>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c7e6:	e011      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ec:	3328      	adds	r3, #40	; 0x28
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f002 fb5f 	bl	800eeb4 <RCCEx_PLL3_Config>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c7fc:	e006      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c804:	e002      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c806:	bf00      	nop
 800c808:	e000      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c80c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10a      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c814:	4b4f      	ldr	r3, [pc, #316]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c818:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c822:	4a4c      	ldr	r2, [pc, #304]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c824:	430b      	orrs	r3, r1
 800c826:	6513      	str	r3, [r2, #80]	; 0x50
 800c828:	e003      	b.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c82e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c83e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c842:	2300      	movs	r3, #0
 800c844:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c848:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c84c:	460b      	mov	r3, r1
 800c84e:	4313      	orrs	r3, r2
 800c850:	d053      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c856:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c85a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c85e:	d035      	beq.n	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c860:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c864:	d82e      	bhi.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c866:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c86a:	d031      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c86c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c870:	d828      	bhi.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c876:	d01a      	beq.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c87c:	d822      	bhi.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c886:	d007      	beq.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c888:	e01c      	b.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c88a:	4b32      	ldr	r3, [pc, #200]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	4a31      	ldr	r2, [pc, #196]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c896:	e01c      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c89c:	3308      	adds	r3, #8
 800c89e:	2100      	movs	r1, #0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f002 fa55 	bl	800ed50 <RCCEx_PLL2_Config>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c8ac:	e011      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8b2:	3328      	adds	r3, #40	; 0x28
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f002 fafc 	bl	800eeb4 <RCCEx_PLL3_Config>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8c2:	e006      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c8ca:	e002      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c8cc:	bf00      	nop
 800c8ce:	e000      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10b      	bne.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c8da:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c8ea:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8ec:	430b      	orrs	r3, r1
 800c8ee:	6593      	str	r3, [r2, #88]	; 0x58
 800c8f0:	e003      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c90a:	2300      	movs	r3, #0
 800c90c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c910:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c914:	460b      	mov	r3, r1
 800c916:	4313      	orrs	r3, r2
 800c918:	d056      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c91e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c926:	d038      	beq.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c92c:	d831      	bhi.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c92e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c932:	d034      	beq.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c934:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c938:	d82b      	bhi.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c93a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c93e:	d01d      	beq.n	800c97c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c944:	d825      	bhi.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d006      	beq.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c94a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c94e:	d00a      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c950:	e01f      	b.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c952:	bf00      	nop
 800c954:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c958:	4ba2      	ldr	r3, [pc, #648]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95c:	4aa1      	ldr	r2, [pc, #644]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c95e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c964:	e01c      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c96a:	3308      	adds	r3, #8
 800c96c:	2100      	movs	r1, #0
 800c96e:	4618      	mov	r0, r3
 800c970:	f002 f9ee 	bl	800ed50 <RCCEx_PLL2_Config>
 800c974:	4603      	mov	r3, r0
 800c976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c97a:	e011      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c980:	3328      	adds	r3, #40	; 0x28
 800c982:	2100      	movs	r1, #0
 800c984:	4618      	mov	r0, r3
 800c986:	f002 fa95 	bl	800eeb4 <RCCEx_PLL3_Config>
 800c98a:	4603      	mov	r3, r0
 800c98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c990:	e006      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c998:	e002      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c99a:	bf00      	nop
 800c99c:	e000      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10b      	bne.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c9a8:	4b8e      	ldr	r3, [pc, #568]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9b8:	4a8a      	ldr	r2, [pc, #552]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9ba:	430b      	orrs	r3, r1
 800c9bc:	6593      	str	r3, [r2, #88]	; 0x58
 800c9be:	e003      	b.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c9d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c9de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	d03a      	beq.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ee:	2b30      	cmp	r3, #48	; 0x30
 800c9f0:	d01f      	beq.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c9f2:	2b30      	cmp	r3, #48	; 0x30
 800c9f4:	d819      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d00c      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c9fa:	2b20      	cmp	r3, #32
 800c9fc:	d815      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d019      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ca02:	2b10      	cmp	r3, #16
 800ca04:	d111      	bne.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca06:	4b77      	ldr	r3, [pc, #476]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0a:	4a76      	ldr	r2, [pc, #472]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ca12:	e011      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca18:	3308      	adds	r3, #8
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f002 f997 	bl	800ed50 <RCCEx_PLL2_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ca28:	e006      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca30:	e002      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ca32:	bf00      	nop
 800ca34:	e000      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ca36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ca40:	4b68      	ldr	r3, [pc, #416]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ca48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca4e:	4a65      	ldr	r2, [pc, #404]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca50:	430b      	orrs	r3, r1
 800ca52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ca54:	e003      	b.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ca5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ca6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ca74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	d051      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ca7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca88:	d035      	beq.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ca8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca8e:	d82e      	bhi.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ca90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca94:	d031      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ca96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca9a:	d828      	bhi.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ca9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caa0:	d01a      	beq.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800caa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caa6:	d822      	bhi.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800caac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cab0:	d007      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cab2:	e01c      	b.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cab4:	4b4b      	ldr	r3, [pc, #300]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	4a4a      	ldr	r2, [pc, #296]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cabe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cac0:	e01c      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cac6:	3308      	adds	r3, #8
 800cac8:	2100      	movs	r1, #0
 800caca:	4618      	mov	r0, r3
 800cacc:	f002 f940 	bl	800ed50 <RCCEx_PLL2_Config>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cad6:	e011      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cadc:	3328      	adds	r3, #40	; 0x28
 800cade:	2100      	movs	r1, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f002 f9e7 	bl	800eeb4 <RCCEx_PLL3_Config>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800caec:	e006      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800caf4:	e002      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800caf6:	bf00      	nop
 800caf8:	e000      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cafa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cafc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10a      	bne.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cb04:	4b37      	ldr	r3, [pc, #220]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb12:	4a34      	ldr	r2, [pc, #208]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb14:	430b      	orrs	r3, r1
 800cb16:	6513      	str	r3, [r2, #80]	; 0x50
 800cb18:	e003      	b.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800cb2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb32:	2300      	movs	r3, #0
 800cb34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cb38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	d056      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb4c:	d033      	beq.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cb4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb52:	d82c      	bhi.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb58:	d02f      	beq.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cb5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb5e:	d826      	bhi.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb64:	d02b      	beq.n	800cbbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cb66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb6a:	d820      	bhi.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb70:	d012      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cb72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb76:	d81a      	bhi.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d022      	beq.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cb7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb80:	d115      	bne.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb86:	3308      	adds	r3, #8
 800cb88:	2101      	movs	r1, #1
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f002 f8e0 	bl	800ed50 <RCCEx_PLL2_Config>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cb96:	e015      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb9c:	3328      	adds	r3, #40	; 0x28
 800cb9e:	2101      	movs	r1, #1
 800cba0:	4618      	mov	r0, r3
 800cba2:	f002 f987 	bl	800eeb4 <RCCEx_PLL3_Config>
 800cba6:	4603      	mov	r3, r0
 800cba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cbac:	e00a      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cbb4:	e006      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cbb6:	bf00      	nop
 800cbb8:	e004      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cbba:	bf00      	nop
 800cbbc:	e002      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cbbe:	bf00      	nop
 800cbc0:	e000      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cbc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10d      	bne.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cbcc:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbda:	4a02      	ldr	r2, [pc, #8]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbdc:	430b      	orrs	r3, r1
 800cbde:	6513      	str	r3, [r2, #80]	; 0x50
 800cbe0:	e006      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cbe2:	bf00      	nop
 800cbe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cbf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cbfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cc00:	2300      	movs	r3, #0
 800cc02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	d055      	beq.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cc18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc1c:	d033      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cc1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc22:	d82c      	bhi.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cc24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc28:	d02f      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc2e:	d826      	bhi.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cc30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc34:	d02b      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cc36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc3a:	d820      	bhi.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cc3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc40:	d012      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cc42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc46:	d81a      	bhi.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d022      	beq.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cc4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc50:	d115      	bne.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc56:	3308      	adds	r3, #8
 800cc58:	2101      	movs	r1, #1
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f002 f878 	bl	800ed50 <RCCEx_PLL2_Config>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc66:	e015      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc6c:	3328      	adds	r3, #40	; 0x28
 800cc6e:	2101      	movs	r1, #1
 800cc70:	4618      	mov	r0, r3
 800cc72:	f002 f91f 	bl	800eeb4 <RCCEx_PLL3_Config>
 800cc76:	4603      	mov	r3, r0
 800cc78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cc7c:	e00a      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc84:	e006      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc86:	bf00      	nop
 800cc88:	e004      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc8a:	bf00      	nop
 800cc8c:	e002      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc8e:	bf00      	nop
 800cc90:	e000      	b.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cc92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10b      	bne.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cc9c:	4ba3      	ldr	r3, [pc, #652]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ccac:	4a9f      	ldr	r2, [pc, #636]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccae:	430b      	orrs	r3, r1
 800ccb0:	6593      	str	r3, [r2, #88]	; 0x58
 800ccb2:	e003      	b.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ccbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ccc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cccc:	2300      	movs	r3, #0
 800ccce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ccd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	d037      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ccdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cce6:	d00e      	beq.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccec:	d816      	bhi.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d018      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ccf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccf6:	d111      	bne.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccf8:	4b8c      	ldr	r3, [pc, #560]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfc:	4a8b      	ldr	r2, [pc, #556]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd04:	e00f      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd0a:	3308      	adds	r3, #8
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f002 f81e 	bl	800ed50 <RCCEx_PLL2_Config>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd1a:	e004      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd22:	e000      	b.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cd24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10a      	bne.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cd2e:	4b7f      	ldr	r3, [pc, #508]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3c:	4a7b      	ldr	r2, [pc, #492]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd3e:	430b      	orrs	r3, r1
 800cd40:	6513      	str	r3, [r2, #80]	; 0x50
 800cd42:	e003      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800cd58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cd62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	d039      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d81c      	bhi.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cdb9 	.word	0x0800cdb9
 800cd80:	0800cd8d 	.word	0x0800cd8d
 800cd84:	0800cd9b 	.word	0x0800cd9b
 800cd88:	0800cdb9 	.word	0x0800cdb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd8c:	4b67      	ldr	r3, [pc, #412]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	4a66      	ldr	r2, [pc, #408]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cd98:	e00f      	b.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd9e:	3308      	adds	r3, #8
 800cda0:	2102      	movs	r1, #2
 800cda2:	4618      	mov	r0, r3
 800cda4:	f001 ffd4 	bl	800ed50 <RCCEx_PLL2_Config>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cdae:	e004      	b.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cdb6:	e000      	b.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800cdb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cdc2:	4b5a      	ldr	r3, [pc, #360]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdc6:	f023 0103 	bic.w	r1, r3, #3
 800cdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdd0:	4a56      	ldr	r2, [pc, #344]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdd2:	430b      	orrs	r3, r1
 800cdd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cdd6:	e003      	b.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800cdec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cdf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	f000 809f 	beq.w	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce02:	4b4b      	ldr	r3, [pc, #300]	; (800cf30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a4a      	ldr	r2, [pc, #296]	; (800cf30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ce08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce0e:	f7f8 f87d 	bl	8004f0c <HAL_GetTick>
 800ce12:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce16:	e00b      	b.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce18:	f7f8 f878 	bl	8004f0c <HAL_GetTick>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b64      	cmp	r3, #100	; 0x64
 800ce26:	d903      	bls.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce2e:	e005      	b.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce30:	4b3f      	ldr	r3, [pc, #252]	; (800cf30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0ed      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ce3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d179      	bne.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ce44:	4b39      	ldr	r3, [pc, #228]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ce50:	4053      	eors	r3, r2
 800ce52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d015      	beq.n	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ce5a:	4b34      	ldr	r3, [pc, #208]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce66:	4b31      	ldr	r3, [pc, #196]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6a:	4a30      	ldr	r2, [pc, #192]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce72:	4b2e      	ldr	r3, [pc, #184]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce76:	4a2d      	ldr	r2, [pc, #180]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ce7e:	4a2b      	ldr	r2, [pc, #172]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ce84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ce86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d118      	bne.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce94:	f7f8 f83a 	bl	8004f0c <HAL_GetTick>
 800ce98:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce9c:	e00d      	b.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce9e:	f7f8 f835 	bl	8004f0c <HAL_GetTick>
 800cea2:	4602      	mov	r2, r0
 800cea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cea8:	1ad2      	subs	r2, r2, r3
 800ceaa:	f241 3388 	movw	r3, #5000	; 0x1388
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d903      	bls.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800ceb8:	e005      	b.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ceba:	4b1c      	ldr	r3, [pc, #112]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0eb      	beq.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800cec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d129      	bne.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ced2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ced6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ceda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cede:	d10e      	bne.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800cee0:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cef0:	091a      	lsrs	r2, r3, #4
 800cef2:	4b10      	ldr	r3, [pc, #64]	; (800cf34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800cef4:	4013      	ands	r3, r2
 800cef6:	4a0d      	ldr	r2, [pc, #52]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cef8:	430b      	orrs	r3, r1
 800cefa:	6113      	str	r3, [r2, #16]
 800cefc:	e005      	b.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800cefe:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf08:	6113      	str	r3, [r2, #16]
 800cf0a:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cf0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf1a:	4a04      	ldr	r2, [pc, #16]	; (800cf2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf1c:	430b      	orrs	r3, r1
 800cf1e:	6713      	str	r3, [r2, #112]	; 0x70
 800cf20:	e00e      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cf22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800cf2a:	e009      	b.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800cf2c:	58024400 	.word	0x58024400
 800cf30:	58024800 	.word	0x58024800
 800cf34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf48:	f002 0301 	and.w	r3, r2, #1
 800cf4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cf50:	2300      	movs	r3, #0
 800cf52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	f000 8089 	beq.w	800d074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cf62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf68:	2b28      	cmp	r3, #40	; 0x28
 800cf6a:	d86b      	bhi.n	800d044 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800cf6c:	a201      	add	r2, pc, #4	; (adr r2, 800cf74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf72:	bf00      	nop
 800cf74:	0800d04d 	.word	0x0800d04d
 800cf78:	0800d045 	.word	0x0800d045
 800cf7c:	0800d045 	.word	0x0800d045
 800cf80:	0800d045 	.word	0x0800d045
 800cf84:	0800d045 	.word	0x0800d045
 800cf88:	0800d045 	.word	0x0800d045
 800cf8c:	0800d045 	.word	0x0800d045
 800cf90:	0800d045 	.word	0x0800d045
 800cf94:	0800d019 	.word	0x0800d019
 800cf98:	0800d045 	.word	0x0800d045
 800cf9c:	0800d045 	.word	0x0800d045
 800cfa0:	0800d045 	.word	0x0800d045
 800cfa4:	0800d045 	.word	0x0800d045
 800cfa8:	0800d045 	.word	0x0800d045
 800cfac:	0800d045 	.word	0x0800d045
 800cfb0:	0800d045 	.word	0x0800d045
 800cfb4:	0800d02f 	.word	0x0800d02f
 800cfb8:	0800d045 	.word	0x0800d045
 800cfbc:	0800d045 	.word	0x0800d045
 800cfc0:	0800d045 	.word	0x0800d045
 800cfc4:	0800d045 	.word	0x0800d045
 800cfc8:	0800d045 	.word	0x0800d045
 800cfcc:	0800d045 	.word	0x0800d045
 800cfd0:	0800d045 	.word	0x0800d045
 800cfd4:	0800d04d 	.word	0x0800d04d
 800cfd8:	0800d045 	.word	0x0800d045
 800cfdc:	0800d045 	.word	0x0800d045
 800cfe0:	0800d045 	.word	0x0800d045
 800cfe4:	0800d045 	.word	0x0800d045
 800cfe8:	0800d045 	.word	0x0800d045
 800cfec:	0800d045 	.word	0x0800d045
 800cff0:	0800d045 	.word	0x0800d045
 800cff4:	0800d04d 	.word	0x0800d04d
 800cff8:	0800d045 	.word	0x0800d045
 800cffc:	0800d045 	.word	0x0800d045
 800d000:	0800d045 	.word	0x0800d045
 800d004:	0800d045 	.word	0x0800d045
 800d008:	0800d045 	.word	0x0800d045
 800d00c:	0800d045 	.word	0x0800d045
 800d010:	0800d045 	.word	0x0800d045
 800d014:	0800d04d 	.word	0x0800d04d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d01c:	3308      	adds	r3, #8
 800d01e:	2101      	movs	r1, #1
 800d020:	4618      	mov	r0, r3
 800d022:	f001 fe95 	bl	800ed50 <RCCEx_PLL2_Config>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d02c:	e00f      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d032:	3328      	adds	r3, #40	; 0x28
 800d034:	2101      	movs	r1, #1
 800d036:	4618      	mov	r0, r3
 800d038:	f001 ff3c 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d03c:	4603      	mov	r3, r0
 800d03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d042:	e004      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d04a:	e000      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d056:	4bbf      	ldr	r3, [pc, #764]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d064:	4abb      	ldr	r2, [pc, #748]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d066:	430b      	orrs	r3, r1
 800d068:	6553      	str	r3, [r2, #84]	; 0x54
 800d06a:	e003      	b.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07c:	f002 0302 	and.w	r3, r2, #2
 800d080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d084:	2300      	movs	r3, #0
 800d086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d08a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d08e:	460b      	mov	r3, r1
 800d090:	4313      	orrs	r3, r2
 800d092:	d041      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d824      	bhi.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d09e:	a201      	add	r2, pc, #4	; (adr r2, 800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0f1 	.word	0x0800d0f1
 800d0a8:	0800d0bd 	.word	0x0800d0bd
 800d0ac:	0800d0d3 	.word	0x0800d0d3
 800d0b0:	0800d0f1 	.word	0x0800d0f1
 800d0b4:	0800d0f1 	.word	0x0800d0f1
 800d0b8:	0800d0f1 	.word	0x0800d0f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0c0:	3308      	adds	r3, #8
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f001 fe43 	bl	800ed50 <RCCEx_PLL2_Config>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d0d0:	e00f      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0d6:	3328      	adds	r3, #40	; 0x28
 800d0d8:	2101      	movs	r1, #1
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f001 feea 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d0e6:	e004      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d0ee:	e000      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10a      	bne.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d0fa:	4b96      	ldr	r3, [pc, #600]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0fe:	f023 0107 	bic.w	r1, r3, #7
 800d102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d108:	4a92      	ldr	r2, [pc, #584]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d10a:	430b      	orrs	r3, r1
 800d10c:	6553      	str	r3, [r2, #84]	; 0x54
 800d10e:	e003      	b.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d114:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f002 0304 	and.w	r3, r2, #4
 800d124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d128:	2300      	movs	r3, #0
 800d12a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d12e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d132:	460b      	mov	r3, r1
 800d134:	4313      	orrs	r3, r2
 800d136:	d044      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d13c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d140:	2b05      	cmp	r3, #5
 800d142:	d825      	bhi.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d144:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14a:	bf00      	nop
 800d14c:	0800d199 	.word	0x0800d199
 800d150:	0800d165 	.word	0x0800d165
 800d154:	0800d17b 	.word	0x0800d17b
 800d158:	0800d199 	.word	0x0800d199
 800d15c:	0800d199 	.word	0x0800d199
 800d160:	0800d199 	.word	0x0800d199
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d168:	3308      	adds	r3, #8
 800d16a:	2101      	movs	r1, #1
 800d16c:	4618      	mov	r0, r3
 800d16e:	f001 fdef 	bl	800ed50 <RCCEx_PLL2_Config>
 800d172:	4603      	mov	r3, r0
 800d174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d178:	e00f      	b.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d17e:	3328      	adds	r3, #40	; 0x28
 800d180:	2101      	movs	r1, #1
 800d182:	4618      	mov	r0, r3
 800d184:	f001 fe96 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d188:	4603      	mov	r3, r0
 800d18a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d18e:	e004      	b.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d196:	e000      	b.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d19a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10b      	bne.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1a2:	4b6c      	ldr	r3, [pc, #432]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a6:	f023 0107 	bic.w	r1, r3, #7
 800d1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1b2:	4a68      	ldr	r2, [pc, #416]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1b4:	430b      	orrs	r3, r1
 800d1b6:	6593      	str	r3, [r2, #88]	; 0x58
 800d1b8:	e003      	b.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	f002 0320 	and.w	r3, r2, #32
 800d1ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d1d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	d055      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1ee:	d033      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d1f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1f4:	d82c      	bhi.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1fa:	d02f      	beq.n	800d25c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d200:	d826      	bhi.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d206:	d02b      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d20c:	d820      	bhi.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d20e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d212:	d012      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d218:	d81a      	bhi.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d022      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d21e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d222:	d115      	bne.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d228:	3308      	adds	r3, #8
 800d22a:	2100      	movs	r1, #0
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fd8f 	bl	800ed50 <RCCEx_PLL2_Config>
 800d232:	4603      	mov	r3, r0
 800d234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d238:	e015      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d23e:	3328      	adds	r3, #40	; 0x28
 800d240:	2102      	movs	r1, #2
 800d242:	4618      	mov	r0, r3
 800d244:	f001 fe36 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d248:	4603      	mov	r3, r0
 800d24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d24e:	e00a      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d256:	e006      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d258:	bf00      	nop
 800d25a:	e004      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d25c:	bf00      	nop
 800d25e:	e002      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d260:	bf00      	nop
 800d262:	e000      	b.n	800d266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d264:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10b      	bne.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d26e:	4b39      	ldr	r3, [pc, #228]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d272:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27e:	4a35      	ldr	r2, [pc, #212]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d280:	430b      	orrs	r3, r1
 800d282:	6553      	str	r3, [r2, #84]	; 0x54
 800d284:	e003      	b.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d28a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d2a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	d058      	beq.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d2b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2ba:	d033      	beq.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d2bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d2c0:	d82c      	bhi.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2c6:	d02f      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2cc:	d826      	bhi.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d2ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2d2:	d02b      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d2d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d2d8:	d820      	bhi.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2de:	d012      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2e4:	d81a      	bhi.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d022      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d2ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ee:	d115      	bne.n	800d31c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f001 fd29 	bl	800ed50 <RCCEx_PLL2_Config>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d304:	e015      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d30a:	3328      	adds	r3, #40	; 0x28
 800d30c:	2102      	movs	r1, #2
 800d30e:	4618      	mov	r0, r3
 800d310:	f001 fdd0 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d314:	4603      	mov	r3, r0
 800d316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d31a:	e00a      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d322:	e006      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d324:	bf00      	nop
 800d326:	e004      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d328:	bf00      	nop
 800d32a:	e002      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d32c:	bf00      	nop
 800d32e:	e000      	b.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10e      	bne.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d33a:	4b06      	ldr	r3, [pc, #24]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d33e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d34a:	4a02      	ldr	r2, [pc, #8]	; (800d354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d34c:	430b      	orrs	r3, r1
 800d34e:	6593      	str	r3, [r2, #88]	; 0x58
 800d350:	e006      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d352:	bf00      	nop
 800d354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d35c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d36c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d370:	2300      	movs	r3, #0
 800d372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d376:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d37a:	460b      	mov	r3, r1
 800d37c:	4313      	orrs	r3, r2
 800d37e:	d055      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d388:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d38c:	d033      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d38e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d392:	d82c      	bhi.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d398:	d02f      	beq.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d39a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d39e:	d826      	bhi.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d3a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d3a4:	d02b      	beq.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d3a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d3aa:	d820      	bhi.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d3ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3b0:	d012      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d3b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3b6:	d81a      	bhi.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d022      	beq.n	800d402 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3c0:	d115      	bne.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f001 fcc0 	bl	800ed50 <RCCEx_PLL2_Config>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d3d6:	e015      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3dc:	3328      	adds	r3, #40	; 0x28
 800d3de:	2102      	movs	r1, #2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 fd67 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d3ec:	e00a      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3f4:	e006      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d3f6:	bf00      	nop
 800d3f8:	e004      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d3fa:	bf00      	nop
 800d3fc:	e002      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d3fe:	bf00      	nop
 800d400:	e000      	b.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10b      	bne.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d40c:	4ba1      	ldr	r3, [pc, #644]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d410:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d41c:	4a9d      	ldr	r2, [pc, #628]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d41e:	430b      	orrs	r3, r1
 800d420:	6593      	str	r3, [r2, #88]	; 0x58
 800d422:	e003      	b.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	f002 0308 	and.w	r3, r2, #8
 800d438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d43c:	2300      	movs	r3, #0
 800d43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d446:	460b      	mov	r3, r1
 800d448:	4313      	orrs	r3, r2
 800d44a:	d01e      	beq.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d458:	d10c      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d45e:	3328      	adds	r3, #40	; 0x28
 800d460:	2102      	movs	r1, #2
 800d462:	4618      	mov	r0, r3
 800d464:	f001 fd26 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d002      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d474:	4b87      	ldr	r3, [pc, #540]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d478:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d484:	4a83      	ldr	r2, [pc, #524]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d486:	430b      	orrs	r3, r1
 800d488:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f002 0310 	and.w	r3, r2, #16
 800d496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d49a:	2300      	movs	r3, #0
 800d49c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d4a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	d01e      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4b6:	d10c      	bne.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4bc:	3328      	adds	r3, #40	; 0x28
 800d4be:	2102      	movs	r1, #2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f001 fcf7 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d4d2:	4b70      	ldr	r3, [pc, #448]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d4e2:	4a6c      	ldr	r2, [pc, #432]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4e4:	430b      	orrs	r3, r1
 800d4e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d4f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d4fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d502:	460b      	mov	r3, r1
 800d504:	4313      	orrs	r3, r2
 800d506:	d03e      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d50c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d514:	d022      	beq.n	800d55c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d51a:	d81b      	bhi.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d524:	d00b      	beq.n	800d53e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d526:	e015      	b.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d52c:	3308      	adds	r3, #8
 800d52e:	2100      	movs	r1, #0
 800d530:	4618      	mov	r0, r3
 800d532:	f001 fc0d 	bl	800ed50 <RCCEx_PLL2_Config>
 800d536:	4603      	mov	r3, r0
 800d538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d53c:	e00f      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d542:	3328      	adds	r3, #40	; 0x28
 800d544:	2102      	movs	r1, #2
 800d546:	4618      	mov	r0, r3
 800d548:	f001 fcb4 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d552:	e004      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d55a:	e000      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d55e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10b      	bne.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d566:	4b4b      	ldr	r3, [pc, #300]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d56a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d576:	4a47      	ldr	r2, [pc, #284]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d578:	430b      	orrs	r3, r1
 800d57a:	6593      	str	r3, [r2, #88]	; 0x58
 800d57c:	e003      	b.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d592:	67bb      	str	r3, [r7, #120]	; 0x78
 800d594:	2300      	movs	r3, #0
 800d596:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d598:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d59c:	460b      	mov	r3, r1
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	d03b      	beq.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d5ae:	d01f      	beq.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d5b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d5b4:	d818      	bhi.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d5b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5ba:	d003      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d5bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5c0:	d007      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d5c2:	e011      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5c4:	4b33      	ldr	r3, [pc, #204]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	4a32      	ldr	r2, [pc, #200]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d5d0:	e00f      	b.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5d6:	3328      	adds	r3, #40	; 0x28
 800d5d8:	2101      	movs	r1, #1
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 fc6a 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d5e6:	e004      	b.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5ee:	e000      	b.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d5f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d5fa:	4b26      	ldr	r3, [pc, #152]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d60a:	4a22      	ldr	r2, [pc, #136]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d60c:	430b      	orrs	r3, r1
 800d60e:	6553      	str	r3, [r2, #84]	; 0x54
 800d610:	e003      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d626:	673b      	str	r3, [r7, #112]	; 0x70
 800d628:	2300      	movs	r3, #0
 800d62a:	677b      	str	r3, [r7, #116]	; 0x74
 800d62c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d630:	460b      	mov	r3, r1
 800d632:	4313      	orrs	r3, r2
 800d634:	d034      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d003      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d644:	d007      	beq.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d646:	e011      	b.n	800d66c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d648:	4b12      	ldr	r3, [pc, #72]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	4a11      	ldr	r2, [pc, #68]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d654:	e00e      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d65a:	3308      	adds	r3, #8
 800d65c:	2102      	movs	r1, #2
 800d65e:	4618      	mov	r0, r3
 800d660:	f001 fb76 	bl	800ed50 <RCCEx_PLL2_Config>
 800d664:	4603      	mov	r3, r0
 800d666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d66a:	e003      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10d      	bne.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d68a:	4a02      	ldr	r2, [pc, #8]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d68c:	430b      	orrs	r3, r1
 800d68e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d690:	e006      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d692:	bf00      	nop
 800d694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d69c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d6ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	d00c      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c0:	3328      	adds	r3, #40	; 0x28
 800d6c2:	2102      	movs	r1, #2
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f001 fbf5 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d6e2:	663b      	str	r3, [r7, #96]	; 0x60
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	667b      	str	r3, [r7, #100]	; 0x64
 800d6e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	d038      	beq.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6fe:	d018      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d704:	d811      	bhi.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d70a:	d014      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d70c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d710:	d80b      	bhi.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d712:	2b00      	cmp	r3, #0
 800d714:	d011      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d71a:	d106      	bne.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d71c:	4bc3      	ldr	r3, [pc, #780]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	4ac2      	ldr	r2, [pc, #776]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d728:	e008      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d730:	e004      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d732:	bf00      	nop
 800d734:	e002      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d736:	bf00      	nop
 800d738:	e000      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d73c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10b      	bne.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d744:	4bb9      	ldr	r3, [pc, #740]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d748:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d754:	4ab5      	ldr	r2, [pc, #724]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d756:	430b      	orrs	r3, r1
 800d758:	6553      	str	r3, [r2, #84]	; 0x54
 800d75a:	e003      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d75c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d770:	65bb      	str	r3, [r7, #88]	; 0x58
 800d772:	2300      	movs	r3, #0
 800d774:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d776:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d77a:	460b      	mov	r3, r1
 800d77c:	4313      	orrs	r3, r2
 800d77e:	d009      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d780:	4baa      	ldr	r3, [pc, #680]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d784:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d78e:	4aa7      	ldr	r2, [pc, #668]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d790:	430b      	orrs	r3, r1
 800d792:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d7a0:	653b      	str	r3, [r7, #80]	; 0x50
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	657b      	str	r3, [r7, #84]	; 0x54
 800d7a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	d00a      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d7b0:	4b9e      	ldr	r3, [pc, #632]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d7c0:	4a9a      	ldr	r2, [pc, #616]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7c2:	430b      	orrs	r3, r1
 800d7c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d7d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	d009      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d7e2:	4b92      	ldr	r3, [pc, #584]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f0:	4a8e      	ldr	r2, [pc, #568]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7f2:	430b      	orrs	r3, r1
 800d7f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d802:	643b      	str	r3, [r7, #64]	; 0x40
 800d804:	2300      	movs	r3, #0
 800d806:	647b      	str	r3, [r7, #68]	; 0x44
 800d808:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d80c:	460b      	mov	r3, r1
 800d80e:	4313      	orrs	r3, r2
 800d810:	d00e      	beq.n	800d830 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d812:	4b86      	ldr	r3, [pc, #536]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	4a85      	ldr	r2, [pc, #532]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d818:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d81c:	6113      	str	r3, [r2, #16]
 800d81e:	4b83      	ldr	r3, [pc, #524]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d820:	6919      	ldr	r1, [r3, #16]
 800d822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d82a:	4a80      	ldr	r2, [pc, #512]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d82c:	430b      	orrs	r3, r1
 800d82e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d83c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d83e:	2300      	movs	r3, #0
 800d840:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d842:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d846:	460b      	mov	r3, r1
 800d848:	4313      	orrs	r3, r2
 800d84a:	d009      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d84c:	4b77      	ldr	r3, [pc, #476]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d850:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d85a:	4a74      	ldr	r2, [pc, #464]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d85c:	430b      	orrs	r3, r1
 800d85e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d86c:	633b      	str	r3, [r7, #48]	; 0x30
 800d86e:	2300      	movs	r3, #0
 800d870:	637b      	str	r3, [r7, #52]	; 0x34
 800d872:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d876:	460b      	mov	r3, r1
 800d878:	4313      	orrs	r3, r2
 800d87a:	d00a      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d87c:	4b6b      	ldr	r3, [pc, #428]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d880:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d88c:	4a67      	ldr	r2, [pc, #412]	; (800da2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d88e:	430b      	orrs	r3, r1
 800d890:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	2100      	movs	r1, #0
 800d89c:	62b9      	str	r1, [r7, #40]	; 0x28
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	d011      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8b2:	3308      	adds	r3, #8
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f001 fa4a 	bl	800ed50 <RCCEx_PLL2_Config>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	2100      	movs	r1, #0
 800d8dc:	6239      	str	r1, [r7, #32]
 800d8de:	f003 0302 	and.w	r3, r3, #2
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	d011      	beq.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8f2:	3308      	adds	r3, #8
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f001 fa2a 	bl	800ed50 <RCCEx_PLL2_Config>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d90a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d90e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	2100      	movs	r1, #0
 800d91c:	61b9      	str	r1, [r7, #24]
 800d91e:	f003 0304 	and.w	r3, r3, #4
 800d922:	61fb      	str	r3, [r7, #28]
 800d924:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d928:	460b      	mov	r3, r1
 800d92a:	4313      	orrs	r3, r2
 800d92c:	d011      	beq.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d932:	3308      	adds	r3, #8
 800d934:	2102      	movs	r1, #2
 800d936:	4618      	mov	r0, r3
 800d938:	f001 fa0a 	bl	800ed50 <RCCEx_PLL2_Config>
 800d93c:	4603      	mov	r3, r0
 800d93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d94a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d94e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	2100      	movs	r1, #0
 800d95c:	6139      	str	r1, [r7, #16]
 800d95e:	f003 0308 	and.w	r3, r3, #8
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d968:	460b      	mov	r3, r1
 800d96a:	4313      	orrs	r3, r2
 800d96c:	d011      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d972:	3328      	adds	r3, #40	; 0x28
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f001 fa9c 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800d982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99a:	2100      	movs	r1, #0
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	f003 0310 	and.w	r3, r3, #16
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	d011      	beq.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9b2:	3328      	adds	r3, #40	; 0x28
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fa7c 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d003      	beq.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	2100      	movs	r1, #0
 800d9dc:	6039      	str	r1, [r7, #0]
 800d9de:	f003 0320 	and.w	r3, r3, #32
 800d9e2:	607b      	str	r3, [r7, #4]
 800d9e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	d011      	beq.n	800da12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f2:	3328      	adds	r3, #40	; 0x28
 800d9f4:	2102      	movs	r1, #2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f001 fa5c 	bl	800eeb4 <RCCEx_PLL3_Config>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800da02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da06:	2b00      	cmp	r3, #0
 800da08:	d003      	beq.n	800da12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800da12:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e000      	b.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
}
 800da20:	4618      	mov	r0, r3
 800da22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800da26:	46bd      	mov	sp, r7
 800da28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800da2c:	58024400 	.word	0x58024400

0800da30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b090      	sub	sp, #64	; 0x40
 800da34:	af00      	add	r7, sp, #0
 800da36:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800da3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da3e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800da42:	430b      	orrs	r3, r1
 800da44:	f040 8094 	bne.w	800db70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800da48:	4b9e      	ldr	r3, [pc, #632]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da4c:	f003 0307 	and.w	r3, r3, #7
 800da50:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800da52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da54:	2b04      	cmp	r3, #4
 800da56:	f200 8087 	bhi.w	800db68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800da5a:	a201      	add	r2, pc, #4	; (adr r2, 800da60 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800da5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da60:	0800da75 	.word	0x0800da75
 800da64:	0800da9d 	.word	0x0800da9d
 800da68:	0800dac5 	.word	0x0800dac5
 800da6c:	0800db61 	.word	0x0800db61
 800da70:	0800daed 	.word	0x0800daed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da74:	4b93      	ldr	r3, [pc, #588]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da80:	d108      	bne.n	800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da86:	4618      	mov	r0, r3
 800da88:	f001 f810 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da90:	f000 bd45 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da94:	2300      	movs	r3, #0
 800da96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da98:	f000 bd41 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da9c:	4b89      	ldr	r3, [pc, #548]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800daa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800daa8:	d108      	bne.n	800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daaa:	f107 0318 	add.w	r3, r7, #24
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 fd54 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dab8:	f000 bd31 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dac0:	f000 bd2d 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dac4:	4b7f      	ldr	r3, [pc, #508]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dad0:	d108      	bne.n	800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dad2:	f107 030c 	add.w	r3, r7, #12
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 fe94 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dae0:	f000 bd1d 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae8:	f000 bd19 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800daec:	4b75      	ldr	r3, [pc, #468]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800daee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800daf4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800daf6:	4b73      	ldr	r3, [pc, #460]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0304 	and.w	r3, r3, #4
 800dafe:	2b04      	cmp	r3, #4
 800db00:	d10c      	bne.n	800db1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	2b00      	cmp	r3, #0
 800db06:	d109      	bne.n	800db1c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db08:	4b6e      	ldr	r3, [pc, #440]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	08db      	lsrs	r3, r3, #3
 800db0e:	f003 0303 	and.w	r3, r3, #3
 800db12:	4a6d      	ldr	r2, [pc, #436]	; (800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800db14:	fa22 f303 	lsr.w	r3, r2, r3
 800db18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db1a:	e01f      	b.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db1c:	4b69      	ldr	r3, [pc, #420]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db28:	d106      	bne.n	800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800db2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db30:	d102      	bne.n	800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db32:	4b66      	ldr	r3, [pc, #408]	; (800dccc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800db34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db36:	e011      	b.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db38:	4b62      	ldr	r3, [pc, #392]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db44:	d106      	bne.n	800db54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800db46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db4c:	d102      	bne.n	800db54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db4e:	4b60      	ldr	r3, [pc, #384]	; (800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800db50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db52:	e003      	b.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db54:	2300      	movs	r3, #0
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800db58:	f000 bce1 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800db5c:	f000 bcdf 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db60:	4b5c      	ldr	r3, [pc, #368]	; (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800db62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db64:	f000 bcdb 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db6c:	f000 bcd7 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800db70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db74:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800db78:	430b      	orrs	r3, r1
 800db7a:	f040 80ad 	bne.w	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800db7e:	4b51      	ldr	r3, [pc, #324]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db82:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800db86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db8e:	d056      	beq.n	800dc3e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db96:	f200 8090 	bhi.w	800dcba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	2bc0      	cmp	r3, #192	; 0xc0
 800db9e:	f000 8088 	beq.w	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800dba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba4:	2bc0      	cmp	r3, #192	; 0xc0
 800dba6:	f200 8088 	bhi.w	800dcba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	2b80      	cmp	r3, #128	; 0x80
 800dbae:	d032      	beq.n	800dc16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb2:	2b80      	cmp	r3, #128	; 0x80
 800dbb4:	f200 8081 	bhi.w	800dcba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc0:	2b40      	cmp	r3, #64	; 0x40
 800dbc2:	d014      	beq.n	800dbee <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800dbc4:	e079      	b.n	800dcba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbc6:	4b3f      	ldr	r3, [pc, #252]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbd2:	d108      	bne.n	800dbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 ff67 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbe2:	f000 bc9c 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbea:	f000 bc98 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbee:	4b35      	ldr	r3, [pc, #212]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dbfa:	d108      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfc:	f107 0318 	add.w	r3, r7, #24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fcab 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc0a:	f000 bc88 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc12:	f000 bc84 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc16:	4b2b      	ldr	r3, [pc, #172]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc22:	d108      	bne.n	800dc36 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc24:	f107 030c 	add.w	r3, r7, #12
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fdeb 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc32:	f000 bc74 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc3a:	f000 bc70 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc3e:	4b21      	ldr	r3, [pc, #132]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dc46:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc48:	4b1e      	ldr	r3, [pc, #120]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d10c      	bne.n	800dc6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800dc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d109      	bne.n	800dc6e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc5a:	4b1a      	ldr	r3, [pc, #104]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	08db      	lsrs	r3, r3, #3
 800dc60:	f003 0303 	and.w	r3, r3, #3
 800dc64:	4a18      	ldr	r2, [pc, #96]	; (800dcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dc66:	fa22 f303 	lsr.w	r3, r2, r3
 800dc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc6c:	e01f      	b.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc6e:	4b15      	ldr	r3, [pc, #84]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc7a:	d106      	bne.n	800dc8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc82:	d102      	bne.n	800dc8a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc84:	4b11      	ldr	r3, [pc, #68]	; (800dccc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800dc86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc88:	e011      	b.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc8a:	4b0e      	ldr	r3, [pc, #56]	; (800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc96:	d106      	bne.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800dc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc9e:	d102      	bne.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dca0:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dca4:	e003      	b.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dcaa:	f000 bc38 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dcae:	f000 bc36 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dcb2:	4b08      	ldr	r3, [pc, #32]	; (800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800dcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcb6:	f000 bc32 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcbe:	f000 bc2e 	b.w	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dcc2:	bf00      	nop
 800dcc4:	58024400 	.word	0x58024400
 800dcc8:	03d09000 	.word	0x03d09000
 800dccc:	003d0900 	.word	0x003d0900
 800dcd0:	017d7840 	.word	0x017d7840
 800dcd4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800dcd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcdc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800dce0:	430b      	orrs	r3, r1
 800dce2:	f040 809c 	bne.w	800de1e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800dce6:	4b9e      	ldr	r3, [pc, #632]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800dcee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcf6:	d054      	beq.n	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcfe:	f200 808b 	bhi.w	800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd08:	f000 8083 	beq.w	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd12:	f200 8081 	bhi.w	800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd1c:	d02f      	beq.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd24:	d878      	bhi.n	800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d004      	beq.n	800dd36 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd32:	d012      	beq.n	800dd5a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800dd34:	e070      	b.n	800de18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd36:	4b8a      	ldr	r3, [pc, #552]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd42:	d107      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 feaf 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd52:	e3e4      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd58:	e3e1      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd5a:	4b81      	ldr	r3, [pc, #516]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd66:	d107      	bne.n	800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd68:	f107 0318 	add.w	r3, r7, #24
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 fbf5 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd76:	e3d2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd7c:	e3cf      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd7e:	4b78      	ldr	r3, [pc, #480]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd8a:	d107      	bne.n	800dd9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd8c:	f107 030c 	add.w	r3, r7, #12
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 fd37 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd9a:	e3c0      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dda0:	e3bd      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dda2:	4b6f      	ldr	r3, [pc, #444]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dda4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ddaa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ddac:	4b6c      	ldr	r3, [pc, #432]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f003 0304 	and.w	r3, r3, #4
 800ddb4:	2b04      	cmp	r3, #4
 800ddb6:	d10c      	bne.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d109      	bne.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddbe:	4b68      	ldr	r3, [pc, #416]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	08db      	lsrs	r3, r3, #3
 800ddc4:	f003 0303 	and.w	r3, r3, #3
 800ddc8:	4a66      	ldr	r2, [pc, #408]	; (800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ddca:	fa22 f303 	lsr.w	r3, r2, r3
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddd0:	e01e      	b.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ddd2:	4b63      	ldr	r3, [pc, #396]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddde:	d106      	bne.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800dde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dde6:	d102      	bne.n	800ddee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dde8:	4b5f      	ldr	r3, [pc, #380]	; (800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ddea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddec:	e010      	b.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ddee:	4b5c      	ldr	r3, [pc, #368]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ddfa:	d106      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ddfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de02:	d102      	bne.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800de04:	4b59      	ldr	r3, [pc, #356]	; (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de08:	e002      	b.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800de0e:	e386      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800de10:	e385      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800de12:	4b57      	ldr	r3, [pc, #348]	; (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800de14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de16:	e382      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800de18:	2300      	movs	r3, #0
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de1c:	e37f      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800de1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de22:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800de26:	430b      	orrs	r3, r1
 800de28:	f040 80a7 	bne.w	800df7a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800de2c:	4b4c      	ldr	r3, [pc, #304]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de30:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800de34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800de36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de3c:	d055      	beq.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de44:	f200 8096 	bhi.w	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de4e:	f000 8084 	beq.w	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de58:	f200 808c 	bhi.w	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de62:	d030      	beq.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800de64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de6a:	f200 8083 	bhi.w	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	2b00      	cmp	r3, #0
 800de72:	d004      	beq.n	800de7e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de7a:	d012      	beq.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800de7c:	e07a      	b.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de7e:	4b38      	ldr	r3, [pc, #224]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de8a:	d107      	bne.n	800de9c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fe0b 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de9a:	e340      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dea0:	e33d      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dea2:	4b2f      	ldr	r3, [pc, #188]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800deaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800deae:	d107      	bne.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb0:	f107 0318 	add.w	r3, r7, #24
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 fb51 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800debe:	e32e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec4:	e32b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dec6:	4b26      	ldr	r3, [pc, #152]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ded2:	d107      	bne.n	800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ded4:	f107 030c 	add.w	r3, r7, #12
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 fc93 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dee2:	e31c      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee8:	e319      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800deea:	4b1d      	ldr	r3, [pc, #116]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800deec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800def2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800def4:	4b1a      	ldr	r3, [pc, #104]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f003 0304 	and.w	r3, r3, #4
 800defc:	2b04      	cmp	r3, #4
 800defe:	d10c      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800df00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df06:	4b16      	ldr	r3, [pc, #88]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	08db      	lsrs	r3, r3, #3
 800df0c:	f003 0303 	and.w	r3, r3, #3
 800df10:	4a14      	ldr	r2, [pc, #80]	; (800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800df12:	fa22 f303 	lsr.w	r3, r2, r3
 800df16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df18:	e01e      	b.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800df1a:	4b11      	ldr	r3, [pc, #68]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df26:	d106      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df2e:	d102      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df30:	4b0d      	ldr	r3, [pc, #52]	; (800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800df32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df34:	e010      	b.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df36:	4b0a      	ldr	r3, [pc, #40]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df42:	d106      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800df44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df4a:	d102      	bne.n	800df52 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800df4c:	4b07      	ldr	r3, [pc, #28]	; (800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800df4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df50:	e002      	b.n	800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800df56:	e2e2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df58:	e2e1      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800df5a:	4b05      	ldr	r3, [pc, #20]	; (800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df5e:	e2de      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df60:	58024400 	.word	0x58024400
 800df64:	03d09000 	.word	0x03d09000
 800df68:	003d0900 	.word	0x003d0900
 800df6c:	017d7840 	.word	0x017d7840
 800df70:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df78:	e2d1      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800df7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df7e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800df82:	430b      	orrs	r3, r1
 800df84:	f040 809c 	bne.w	800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800df88:	4b93      	ldr	r3, [pc, #588]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800df8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800df90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df98:	d054      	beq.n	800e044 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfa0:	f200 808b 	bhi.w	800e0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfaa:	f000 8083 	beq.w	800e0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800dfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfb4:	f200 8081 	bhi.w	800e0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfbe:	d02f      	beq.n	800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfc6:	d878      	bhi.n	800e0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d004      	beq.n	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800dfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfd4:	d012      	beq.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800dfd6:	e070      	b.n	800e0ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dfd8:	4b7f      	ldr	r3, [pc, #508]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dfe4:	d107      	bne.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dfe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfea:	4618      	mov	r0, r3
 800dfec:	f000 fd5e 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dff4:	e293      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dffa:	e290      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dffc:	4b76      	ldr	r3, [pc, #472]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e008:	d107      	bne.n	800e01a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e00a:	f107 0318 	add.w	r3, r7, #24
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 faa4 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e018:	e281      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e01a:	2300      	movs	r3, #0
 800e01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e01e:	e27e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e020:	4b6d      	ldr	r3, [pc, #436]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e02c:	d107      	bne.n	800e03e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	4618      	mov	r0, r3
 800e034:	f000 fbe6 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e03c:	e26f      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e042:	e26c      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e044:	4b64      	ldr	r3, [pc, #400]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e04c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e04e:	4b62      	ldr	r3, [pc, #392]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 0304 	and.w	r3, r3, #4
 800e056:	2b04      	cmp	r3, #4
 800e058:	d10c      	bne.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e060:	4b5d      	ldr	r3, [pc, #372]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	08db      	lsrs	r3, r3, #3
 800e066:	f003 0303 	and.w	r3, r3, #3
 800e06a:	4a5c      	ldr	r2, [pc, #368]	; (800e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e06c:	fa22 f303 	lsr.w	r3, r2, r3
 800e070:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e072:	e01e      	b.n	800e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e074:	4b58      	ldr	r3, [pc, #352]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e080:	d106      	bne.n	800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e088:	d102      	bne.n	800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e08a:	4b55      	ldr	r3, [pc, #340]	; (800e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e08e:	e010      	b.n	800e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e090:	4b51      	ldr	r3, [pc, #324]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e09c:	d106      	bne.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0a4:	d102      	bne.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e0a6:	4b4f      	ldr	r3, [pc, #316]	; (800e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0aa:	e002      	b.n	800e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e0b0:	e235      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e0b2:	e234      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e0b4:	4b4c      	ldr	r3, [pc, #304]	; (800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0b8:	e231      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0be:	e22e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0c4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	f040 808f 	bne.w	800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e0ce:	4b42      	ldr	r3, [pc, #264]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e0d6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e0de:	d06b      	beq.n	800e1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e0e6:	d874      	bhi.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0ee:	d056      	beq.n	800e19e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0f6:	d86c      	bhi.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e0fe:	d03b      	beq.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e106:	d864      	bhi.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e10e:	d021      	beq.n	800e154 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e116:	d85c      	bhi.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d004      	beq.n	800e128 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e124:	d004      	beq.n	800e130 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e126:	e054      	b.n	800e1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e128:	f7fe fa4c 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 800e12c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e12e:	e1f6      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e130:	4b29      	ldr	r3, [pc, #164]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e13c:	d107      	bne.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e13e:	f107 0318 	add.w	r3, r7, #24
 800e142:	4618      	mov	r0, r3
 800e144:	f000 fa0a 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e14c:	e1e7      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e152:	e1e4      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e154:	4b20      	ldr	r3, [pc, #128]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e15c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e160:	d107      	bne.n	800e172 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e162:	f107 030c 	add.w	r3, r7, #12
 800e166:	4618      	mov	r0, r3
 800e168:	f000 fb4c 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e170:	e1d5      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e176:	e1d2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e178:	4b17      	ldr	r3, [pc, #92]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b04      	cmp	r3, #4
 800e182:	d109      	bne.n	800e198 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e184:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	08db      	lsrs	r3, r3, #3
 800e18a:	f003 0303 	and.w	r3, r3, #3
 800e18e:	4a13      	ldr	r2, [pc, #76]	; (800e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e190:	fa22 f303 	lsr.w	r3, r2, r3
 800e194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e196:	e1c2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e198:	2300      	movs	r3, #0
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19c:	e1bf      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e19e:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1aa:	d102      	bne.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e1ac:	4b0c      	ldr	r3, [pc, #48]	; (800e1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1b0:	e1b5      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1b6:	e1b2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e1b8:	4b07      	ldr	r3, [pc, #28]	; (800e1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1c4:	d102      	bne.n	800e1cc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e1c6:	4b07      	ldr	r3, [pc, #28]	; (800e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1ca:	e1a8      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d0:	e1a5      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d6:	e1a2      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e1d8:	58024400 	.word	0x58024400
 800e1dc:	03d09000 	.word	0x03d09000
 800e1e0:	003d0900 	.word	0x003d0900
 800e1e4:	017d7840 	.word	0x017d7840
 800e1e8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e1ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1f0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e1f4:	430b      	orrs	r3, r1
 800e1f6:	d173      	bne.n	800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e1f8:	4b9c      	ldr	r3, [pc, #624]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e200:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e208:	d02f      	beq.n	800e26a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e210:	d863      	bhi.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e21e:	d012      	beq.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e220:	e05b      	b.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e222:	4b92      	ldr	r3, [pc, #584]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e22a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e22e:	d107      	bne.n	800e240 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e230:	f107 0318 	add.w	r3, r7, #24
 800e234:	4618      	mov	r0, r3
 800e236:	f000 f991 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e23e:	e16e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e244:	e16b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e246:	4b89      	ldr	r3, [pc, #548]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e252:	d107      	bne.n	800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e254:	f107 030c 	add.w	r3, r7, #12
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 fad3 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e262:	e15c      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e264:	2300      	movs	r3, #0
 800e266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e268:	e159      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e26a:	4b80      	ldr	r3, [pc, #512]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e26e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e272:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e274:	4b7d      	ldr	r3, [pc, #500]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b04      	cmp	r3, #4
 800e27e:	d10c      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e282:	2b00      	cmp	r3, #0
 800e284:	d109      	bne.n	800e29a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e286:	4b79      	ldr	r3, [pc, #484]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	08db      	lsrs	r3, r3, #3
 800e28c:	f003 0303 	and.w	r3, r3, #3
 800e290:	4a77      	ldr	r2, [pc, #476]	; (800e470 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e292:	fa22 f303 	lsr.w	r3, r2, r3
 800e296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e298:	e01e      	b.n	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e29a:	4b74      	ldr	r3, [pc, #464]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2a6:	d106      	bne.n	800e2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2ae:	d102      	bne.n	800e2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e2b0:	4b70      	ldr	r3, [pc, #448]	; (800e474 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b4:	e010      	b.n	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e2b6:	4b6d      	ldr	r3, [pc, #436]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2c2:	d106      	bne.n	800e2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2ca:	d102      	bne.n	800e2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e2cc:	4b6a      	ldr	r3, [pc, #424]	; (800e478 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2d0:	e002      	b.n	800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e2d6:	e122      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2d8:	e121      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2de:	e11e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e2e8:	430b      	orrs	r3, r1
 800e2ea:	d133      	bne.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e2ec:	4b5f      	ldr	r3, [pc, #380]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d004      	beq.n	800e306 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e302:	d012      	beq.n	800e32a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e304:	e023      	b.n	800e34e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e306:	4b59      	ldr	r3, [pc, #356]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e30e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e312:	d107      	bne.n	800e324 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 fbc7 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e322:	e0fc      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e328:	e0f9      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e32a:	4b50      	ldr	r3, [pc, #320]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e336:	d107      	bne.n	800e348 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e338:	f107 0318 	add.w	r3, r7, #24
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 f90d 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e342:	6a3b      	ldr	r3, [r7, #32]
 800e344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e346:	e0ea      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e348:	2300      	movs	r3, #0
 800e34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e34c:	e0e7      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e352:	e0e4      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e358:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e35c:	430b      	orrs	r3, r1
 800e35e:	f040 808d 	bne.w	800e47c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e362:	4b42      	ldr	r3, [pc, #264]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e366:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e36a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e372:	d06b      	beq.n	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e37a:	d874      	bhi.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e382:	d056      	beq.n	800e432 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e38a:	d86c      	bhi.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e392:	d03b      	beq.n	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e39a:	d864      	bhi.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3a2:	d021      	beq.n	800e3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3aa:	d85c      	bhi.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d004      	beq.n	800e3bc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3b8:	d004      	beq.n	800e3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e3ba:	e054      	b.n	800e466 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e3bc:	f000 f8b8 	bl	800e530 <HAL_RCCEx_GetD3PCLK1Freq>
 800e3c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3c2:	e0ac      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3c4:	4b29      	ldr	r3, [pc, #164]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3d0:	d107      	bne.n	800e3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3d2:	f107 0318 	add.w	r3, r7, #24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f000 f8c0 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3e0:	e09d      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e6:	e09a      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e3e8:	4b20      	ldr	r3, [pc, #128]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3f4:	d107      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3f6:	f107 030c 	add.w	r3, r7, #12
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fa02 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e404:	e08b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e406:	2300      	movs	r3, #0
 800e408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e40a:	e088      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e40c:	4b17      	ldr	r3, [pc, #92]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b04      	cmp	r3, #4
 800e416:	d109      	bne.n	800e42c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e418:	4b14      	ldr	r3, [pc, #80]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	08db      	lsrs	r3, r3, #3
 800e41e:	f003 0303 	and.w	r3, r3, #3
 800e422:	4a13      	ldr	r2, [pc, #76]	; (800e470 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e424:	fa22 f303 	lsr.w	r3, r2, r3
 800e428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e42a:	e078      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e430:	e075      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e432:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e43e:	d102      	bne.n	800e446 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e440:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e444:	e06b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e44a:	e068      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e44c:	4b07      	ldr	r3, [pc, #28]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e458:	d102      	bne.n	800e460 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e45a:	4b07      	ldr	r3, [pc, #28]	; (800e478 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e45e:	e05e      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e464:	e05b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e46a:	e058      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e46c:	58024400 	.word	0x58024400
 800e470:	03d09000 	.word	0x03d09000
 800e474:	003d0900 	.word	0x003d0900
 800e478:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e480:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e484:	430b      	orrs	r3, r1
 800e486:	d148      	bne.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e488:	4b27      	ldr	r3, [pc, #156]	; (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e48c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e490:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e498:	d02a      	beq.n	800e4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4a0:	d838      	bhi.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4ae:	d00d      	beq.n	800e4cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e4b0:	e030      	b.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e4b2:	4b1d      	ldr	r3, [pc, #116]	; (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e4be:	d102      	bne.n	800e4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e4c0:	4b1a      	ldr	r3, [pc, #104]	; (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4c4:	e02b      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ca:	e028      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e4cc:	4b16      	ldr	r3, [pc, #88]	; (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4d8:	d107      	bne.n	800e4ea <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 fae4 	bl	800eaac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4e8:	e019      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ee:	e016      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4f0:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4fc:	d107      	bne.n	800e50e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4fe:	f107 0318 	add.w	r3, r7, #24
 800e502:	4618      	mov	r0, r3
 800e504:	f000 f82a 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e50c:	e007      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e512:	e004      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e518:	e001      	b.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e520:	4618      	mov	r0, r3
 800e522:	3740      	adds	r7, #64	; 0x40
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	58024400 	.word	0x58024400
 800e52c:	017d7840 	.word	0x017d7840

0800e530 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e534:	f7fe f816 	bl	800c564 <HAL_RCC_GetHCLKFreq>
 800e538:	4602      	mov	r2, r0
 800e53a:	4b06      	ldr	r3, [pc, #24]	; (800e554 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e53c:	6a1b      	ldr	r3, [r3, #32]
 800e53e:	091b      	lsrs	r3, r3, #4
 800e540:	f003 0307 	and.w	r3, r3, #7
 800e544:	4904      	ldr	r1, [pc, #16]	; (800e558 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e546:	5ccb      	ldrb	r3, [r1, r3]
 800e548:	f003 031f 	and.w	r3, r3, #31
 800e54c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e550:	4618      	mov	r0, r3
 800e552:	bd80      	pop	{r7, pc}
 800e554:	58024400 	.word	0x58024400
 800e558:	08017c3c 	.word	0x08017c3c

0800e55c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b089      	sub	sp, #36	; 0x24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e564:	4ba1      	ldr	r3, [pc, #644]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e568:	f003 0303 	and.w	r3, r3, #3
 800e56c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e56e:	4b9f      	ldr	r3, [pc, #636]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e572:	0b1b      	lsrs	r3, r3, #12
 800e574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e578:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e57a:	4b9c      	ldr	r3, [pc, #624]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	091b      	lsrs	r3, r3, #4
 800e580:	f003 0301 	and.w	r3, r3, #1
 800e584:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e586:	4b99      	ldr	r3, [pc, #612]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58a:	08db      	lsrs	r3, r3, #3
 800e58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	fb02 f303 	mul.w	r3, r2, r3
 800e596:	ee07 3a90 	vmov	s15, r3
 800e59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e59e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 8111 	beq.w	800e7cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	f000 8083 	beq.w	800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	f200 80a1 	bhi.w	800e6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d003      	beq.n	800e5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d056      	beq.n	800e674 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e5c6:	e099      	b.n	800e6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5c8:	4b88      	ldr	r3, [pc, #544]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 0320 	and.w	r3, r3, #32
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d02d      	beq.n	800e630 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5d4:	4b85      	ldr	r3, [pc, #532]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	08db      	lsrs	r3, r3, #3
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	4a84      	ldr	r2, [pc, #528]	; (800e7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e5e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	ee07 3a90 	vmov	s15, r3
 800e5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	ee07 3a90 	vmov	s15, r3
 800e5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5fe:	4b7b      	ldr	r3, [pc, #492]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e606:	ee07 3a90 	vmov	s15, r3
 800e60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e612:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e62a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e62e:	e087      	b.n	800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	ee07 3a90 	vmov	s15, r3
 800e636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e63a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e642:	4b6a      	ldr	r3, [pc, #424]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e64a:	ee07 3a90 	vmov	s15, r3
 800e64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e652:	ed97 6a03 	vldr	s12, [r7, #12]
 800e656:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e672:	e065      	b.n	800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	ee07 3a90 	vmov	s15, r3
 800e67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e67e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e686:	4b59      	ldr	r3, [pc, #356]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e696:	ed97 6a03 	vldr	s12, [r7, #12]
 800e69a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6b6:	e043      	b.n	800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	ee07 3a90 	vmov	s15, r3
 800e6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ca:	4b48      	ldr	r3, [pc, #288]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d2:	ee07 3a90 	vmov	s15, r3
 800e6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6de:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6fa:	e021      	b.n	800e740 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	ee07 3a90 	vmov	s15, r3
 800e702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e706:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e7fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e70e:	4b37      	ldr	r3, [pc, #220]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e716:	ee07 3a90 	vmov	s15, r3
 800e71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e722:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e73e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e740:	4b2a      	ldr	r3, [pc, #168]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e744:	0a5b      	lsrs	r3, r3, #9
 800e746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e74a:	ee07 3a90 	vmov	s15, r3
 800e74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e75a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e75e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e766:	ee17 2a90 	vmov	r2, s15
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e76e:	4b1f      	ldr	r3, [pc, #124]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e772:	0c1b      	lsrs	r3, r3, #16
 800e774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e778:	ee07 3a90 	vmov	s15, r3
 800e77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e784:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e788:	edd7 6a07 	vldr	s13, [r7, #28]
 800e78c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e794:	ee17 2a90 	vmov	r2, s15
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e79c:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a0:	0e1b      	lsrs	r3, r3, #24
 800e7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e7b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e7b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7c2:	ee17 2a90 	vmov	r2, s15
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e7ca:	e008      	b.n	800e7de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	609a      	str	r2, [r3, #8]
}
 800e7de:	bf00      	nop
 800e7e0:	3724      	adds	r7, #36	; 0x24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	58024400 	.word	0x58024400
 800e7f0:	03d09000 	.word	0x03d09000
 800e7f4:	46000000 	.word	0x46000000
 800e7f8:	4c742400 	.word	0x4c742400
 800e7fc:	4a742400 	.word	0x4a742400
 800e800:	4bbebc20 	.word	0x4bbebc20

0800e804 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e804:	b480      	push	{r7}
 800e806:	b089      	sub	sp, #36	; 0x24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e80c:	4ba1      	ldr	r3, [pc, #644]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e810:	f003 0303 	and.w	r3, r3, #3
 800e814:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e816:	4b9f      	ldr	r3, [pc, #636]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e81a:	0d1b      	lsrs	r3, r3, #20
 800e81c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e820:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e822:	4b9c      	ldr	r3, [pc, #624]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e826:	0a1b      	lsrs	r3, r3, #8
 800e828:	f003 0301 	and.w	r3, r3, #1
 800e82c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e82e:	4b99      	ldr	r3, [pc, #612]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e832:	08db      	lsrs	r3, r3, #3
 800e834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	fb02 f303 	mul.w	r3, r2, r3
 800e83e:	ee07 3a90 	vmov	s15, r3
 800e842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 8111 	beq.w	800ea74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	2b02      	cmp	r3, #2
 800e856:	f000 8083 	beq.w	800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	f200 80a1 	bhi.w	800e9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d003      	beq.n	800e870 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d056      	beq.n	800e91c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e86e:	e099      	b.n	800e9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e870:	4b88      	ldr	r3, [pc, #544]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f003 0320 	and.w	r3, r3, #32
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d02d      	beq.n	800e8d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e87c:	4b85      	ldr	r3, [pc, #532]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	08db      	lsrs	r3, r3, #3
 800e882:	f003 0303 	and.w	r3, r3, #3
 800e886:	4a84      	ldr	r2, [pc, #528]	; (800ea98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e888:	fa22 f303 	lsr.w	r3, r2, r3
 800e88c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	ee07 3a90 	vmov	s15, r3
 800e894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	ee07 3a90 	vmov	s15, r3
 800e89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8a6:	4b7b      	ldr	r3, [pc, #492]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ae:	ee07 3a90 	vmov	s15, r3
 800e8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e8d6:	e087      	b.n	800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eaa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8ea:	4b6a      	ldr	r3, [pc, #424]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8f2:	ee07 3a90 	vmov	s15, r3
 800e8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e90a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e91a:	e065      	b.n	800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	ee07 3a90 	vmov	s15, r3
 800e922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e926:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e92e:	4b59      	ldr	r3, [pc, #356]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e936:	ee07 3a90 	vmov	s15, r3
 800e93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e942:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e95e:	e043      	b.n	800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	ee07 3a90 	vmov	s15, r3
 800e966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e96a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800eaa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e972:	4b48      	ldr	r3, [pc, #288]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e97a:	ee07 3a90 	vmov	s15, r3
 800e97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e982:	ed97 6a03 	vldr	s12, [r7, #12]
 800e986:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9a2:	e021      	b.n	800e9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eaa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9b6:	4b37      	ldr	r3, [pc, #220]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9be:	ee07 3a90 	vmov	s15, r3
 800e9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ea9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e9e8:	4b2a      	ldr	r3, [pc, #168]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ec:	0a5b      	lsrs	r3, r3, #9
 800e9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9f2:	ee07 3a90 	vmov	s15, r3
 800e9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea0e:	ee17 2a90 	vmov	r2, s15
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ea16:	4b1f      	ldr	r3, [pc, #124]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea1a:	0c1b      	lsrs	r3, r3, #16
 800ea1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea20:	ee07 3a90 	vmov	s15, r3
 800ea24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea3c:	ee17 2a90 	vmov	r2, s15
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ea44:	4b13      	ldr	r3, [pc, #76]	; (800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea48:	0e1b      	lsrs	r3, r3, #24
 800ea4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea4e:	ee07 3a90 	vmov	s15, r3
 800ea52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea6a:	ee17 2a90 	vmov	r2, s15
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ea72:	e008      	b.n	800ea86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	609a      	str	r2, [r3, #8]
}
 800ea86:	bf00      	nop
 800ea88:	3724      	adds	r7, #36	; 0x24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	58024400 	.word	0x58024400
 800ea98:	03d09000 	.word	0x03d09000
 800ea9c:	46000000 	.word	0x46000000
 800eaa0:	4c742400 	.word	0x4c742400
 800eaa4:	4a742400 	.word	0x4a742400
 800eaa8:	4bbebc20 	.word	0x4bbebc20

0800eaac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b089      	sub	sp, #36	; 0x24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eab4:	4ba0      	ldr	r3, [pc, #640]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab8:	f003 0303 	and.w	r3, r3, #3
 800eabc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800eabe:	4b9e      	ldr	r3, [pc, #632]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	091b      	lsrs	r3, r3, #4
 800eac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eac8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800eaca:	4b9b      	ldr	r3, [pc, #620]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ead4:	4b98      	ldr	r3, [pc, #608]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ead6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead8:	08db      	lsrs	r3, r3, #3
 800eada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	fb02 f303 	mul.w	r3, r2, r3
 800eae4:	ee07 3a90 	vmov	s15, r3
 800eae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8111 	beq.w	800ed1a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	f000 8083 	beq.w	800ec06 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	f200 80a1 	bhi.w	800ec4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d056      	beq.n	800ebc2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800eb14:	e099      	b.n	800ec4a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb16:	4b88      	ldr	r3, [pc, #544]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f003 0320 	and.w	r3, r3, #32
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d02d      	beq.n	800eb7e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb22:	4b85      	ldr	r3, [pc, #532]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	08db      	lsrs	r3, r3, #3
 800eb28:	f003 0303 	and.w	r3, r3, #3
 800eb2c:	4a83      	ldr	r2, [pc, #524]	; (800ed3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800eb2e:	fa22 f303 	lsr.w	r3, r2, r3
 800eb32:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	ee07 3a90 	vmov	s15, r3
 800eb3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	ee07 3a90 	vmov	s15, r3
 800eb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb4c:	4b7a      	ldr	r3, [pc, #488]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb54:	ee07 3a90 	vmov	s15, r3
 800eb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb60:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ed40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb78:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eb7c:	e087      	b.n	800ec8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	ee07 3a90 	vmov	s15, r3
 800eb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ed44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eb8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb90:	4b69      	ldr	r3, [pc, #420]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb98:	ee07 3a90 	vmov	s15, r3
 800eb9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eba0:	ed97 6a03 	vldr	s12, [r7, #12]
 800eba4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ed40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebc0:	e065      	b.n	800ec8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	ee07 3a90 	vmov	s15, r3
 800ebc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebcc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ed48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ebd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebd4:	4b58      	ldr	r3, [pc, #352]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebdc:	ee07 3a90 	vmov	s15, r3
 800ebe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebe8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ed40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ebec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec04:	e043      	b.n	800ec8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	ee07 3a90 	vmov	s15, r3
 800ec0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec10:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ed4c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ec14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec18:	4b47      	ldr	r3, [pc, #284]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec20:	ee07 3a90 	vmov	s15, r3
 800ec24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec28:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec2c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ed40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ec30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec48:	e021      	b.n	800ec8e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	ee07 3a90 	vmov	s15, r3
 800ec50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec54:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ed44 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ec58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec5c:	4b36      	ldr	r3, [pc, #216]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec64:	ee07 3a90 	vmov	s15, r3
 800ec68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec70:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ed40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ec74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec8c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ec8e:	4b2a      	ldr	r3, [pc, #168]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec92:	0a5b      	lsrs	r3, r3, #9
 800ec94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec98:	ee07 3a90 	vmov	s15, r3
 800ec9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eca8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecb4:	ee17 2a90 	vmov	r2, s15
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ecbc:	4b1e      	ldr	r3, [pc, #120]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ecbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc0:	0c1b      	lsrs	r3, r3, #16
 800ecc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecc6:	ee07 3a90 	vmov	s15, r3
 800ecca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ecd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ece2:	ee17 2a90 	vmov	r2, s15
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ecea:	4b13      	ldr	r3, [pc, #76]	; (800ed38 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ecec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecee:	0e1b      	lsrs	r3, r3, #24
 800ecf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf4:	ee07 3a90 	vmov	s15, r3
 800ecf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed10:	ee17 2a90 	vmov	r2, s15
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ed18:	e008      	b.n	800ed2c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	609a      	str	r2, [r3, #8]
}
 800ed2c:	bf00      	nop
 800ed2e:	3724      	adds	r7, #36	; 0x24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	58024400 	.word	0x58024400
 800ed3c:	03d09000 	.word	0x03d09000
 800ed40:	46000000 	.word	0x46000000
 800ed44:	4c742400 	.word	0x4c742400
 800ed48:	4a742400 	.word	0x4a742400
 800ed4c:	4bbebc20 	.word	0x4bbebc20

0800ed50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ed5e:	4b53      	ldr	r3, [pc, #332]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ed60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed62:	f003 0303 	and.w	r3, r3, #3
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	d101      	bne.n	800ed6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e099      	b.n	800eea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ed6e:	4b4f      	ldr	r3, [pc, #316]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a4e      	ldr	r2, [pc, #312]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ed74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ed78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed7a:	f7f6 f8c7 	bl	8004f0c <HAL_GetTick>
 800ed7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed80:	e008      	b.n	800ed94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed82:	f7f6 f8c3 	bl	8004f0c <HAL_GetTick>
 800ed86:	4602      	mov	r2, r0
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d901      	bls.n	800ed94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ed90:	2303      	movs	r3, #3
 800ed92:	e086      	b.n	800eea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed94:	4b45      	ldr	r3, [pc, #276]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1f0      	bne.n	800ed82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eda0:	4b42      	ldr	r3, [pc, #264]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800eda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	031b      	lsls	r3, r3, #12
 800edae:	493f      	ldr	r1, [pc, #252]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800edb0:	4313      	orrs	r3, r2
 800edb2:	628b      	str	r3, [r1, #40]	; 0x28
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	3b01      	subs	r3, #1
 800edba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	3b01      	subs	r3, #1
 800edc4:	025b      	lsls	r3, r3, #9
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	431a      	orrs	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	3b01      	subs	r3, #1
 800edd0:	041b      	lsls	r3, r3, #16
 800edd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800edd6:	431a      	orrs	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	3b01      	subs	r3, #1
 800edde:	061b      	lsls	r3, r3, #24
 800ede0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ede4:	4931      	ldr	r1, [pc, #196]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ede6:	4313      	orrs	r3, r2
 800ede8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800edea:	4b30      	ldr	r3, [pc, #192]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800edec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	695b      	ldr	r3, [r3, #20]
 800edf6:	492d      	ldr	r1, [pc, #180]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800edf8:	4313      	orrs	r3, r2
 800edfa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800edfc:	4b2b      	ldr	r3, [pc, #172]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	f023 0220 	bic.w	r2, r3, #32
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	4928      	ldr	r1, [pc, #160]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ee0e:	4b27      	ldr	r3, [pc, #156]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee12:	4a26      	ldr	r2, [pc, #152]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee14:	f023 0310 	bic.w	r3, r3, #16
 800ee18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ee1a:	4b24      	ldr	r3, [pc, #144]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee1e:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <RCCEx_PLL2_Config+0x160>)
 800ee20:	4013      	ands	r3, r2
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	69d2      	ldr	r2, [r2, #28]
 800ee26:	00d2      	lsls	r2, r2, #3
 800ee28:	4920      	ldr	r1, [pc, #128]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ee2e:	4b1f      	ldr	r3, [pc, #124]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee32:	4a1e      	ldr	r2, [pc, #120]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee34:	f043 0310 	orr.w	r3, r3, #16
 800ee38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d106      	bne.n	800ee4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ee40:	4b1a      	ldr	r3, [pc, #104]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee44:	4a19      	ldr	r2, [pc, #100]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ee4c:	e00f      	b.n	800ee6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d106      	bne.n	800ee62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ee54:	4b15      	ldr	r3, [pc, #84]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	4a14      	ldr	r2, [pc, #80]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ee60:	e005      	b.n	800ee6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ee62:	4b12      	ldr	r3, [pc, #72]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	4a11      	ldr	r2, [pc, #68]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ee6e:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	4a0e      	ldr	r2, [pc, #56]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee7a:	f7f6 f847 	bl	8004f0c <HAL_GetTick>
 800ee7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee80:	e008      	b.n	800ee94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ee82:	f7f6 f843 	bl	8004f0c <HAL_GetTick>
 800ee86:	4602      	mov	r2, r0
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d901      	bls.n	800ee94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ee90:	2303      	movs	r3, #3
 800ee92:	e006      	b.n	800eea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee94:	4b05      	ldr	r3, [pc, #20]	; (800eeac <RCCEx_PLL2_Config+0x15c>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d0f0      	beq.n	800ee82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800eea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	58024400 	.word	0x58024400
 800eeb0:	ffff0007 	.word	0xffff0007

0800eeb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eebe:	2300      	movs	r3, #0
 800eec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eec2:	4b53      	ldr	r3, [pc, #332]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800eec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec6:	f003 0303 	and.w	r3, r3, #3
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	d101      	bne.n	800eed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e099      	b.n	800f006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800eed2:	4b4f      	ldr	r3, [pc, #316]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a4e      	ldr	r2, [pc, #312]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800eed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eedc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eede:	f7f6 f815 	bl	8004f0c <HAL_GetTick>
 800eee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eee4:	e008      	b.n	800eef8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eee6:	f7f6 f811 	bl	8004f0c <HAL_GetTick>
 800eeea:	4602      	mov	r2, r0
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d901      	bls.n	800eef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eef4:	2303      	movs	r3, #3
 800eef6:	e086      	b.n	800f006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eef8:	4b45      	ldr	r3, [pc, #276]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1f0      	bne.n	800eee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ef04:	4b42      	ldr	r3, [pc, #264]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	051b      	lsls	r3, r3, #20
 800ef12:	493f      	ldr	r1, [pc, #252]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef14:	4313      	orrs	r3, r2
 800ef16:	628b      	str	r3, [r1, #40]	; 0x28
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	689b      	ldr	r3, [r3, #8]
 800ef26:	3b01      	subs	r3, #1
 800ef28:	025b      	lsls	r3, r3, #9
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	431a      	orrs	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	3b01      	subs	r3, #1
 800ef34:	041b      	lsls	r3, r3, #16
 800ef36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ef3a:	431a      	orrs	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	061b      	lsls	r3, r3, #24
 800ef44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ef48:	4931      	ldr	r1, [pc, #196]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ef4e:	4b30      	ldr	r3, [pc, #192]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	492d      	ldr	r1, [pc, #180]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ef60:	4b2b      	ldr	r3, [pc, #172]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	699b      	ldr	r3, [r3, #24]
 800ef6c:	4928      	ldr	r1, [pc, #160]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ef72:	4b27      	ldr	r3, [pc, #156]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef76:	4a26      	ldr	r2, [pc, #152]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ef7e:	4b24      	ldr	r3, [pc, #144]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef82:	4b24      	ldr	r3, [pc, #144]	; (800f014 <RCCEx_PLL3_Config+0x160>)
 800ef84:	4013      	ands	r3, r2
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	69d2      	ldr	r2, [r2, #28]
 800ef8a:	00d2      	lsls	r2, r2, #3
 800ef8c:	4920      	ldr	r1, [pc, #128]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ef92:	4b1f      	ldr	r3, [pc, #124]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef96:	4a1e      	ldr	r2, [pc, #120]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800ef98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d106      	bne.n	800efb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800efa4:	4b1a      	ldr	r3, [pc, #104]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa8:	4a19      	ldr	r2, [pc, #100]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800efae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800efb0:	e00f      	b.n	800efd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d106      	bne.n	800efc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800efb8:	4b15      	ldr	r3, [pc, #84]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbc:	4a14      	ldr	r2, [pc, #80]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800efc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800efc4:	e005      	b.n	800efd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800efc6:	4b12      	ldr	r3, [pc, #72]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efca:	4a11      	ldr	r2, [pc, #68]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800efd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800efd2:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a0e      	ldr	r2, [pc, #56]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800efd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800efdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800efde:	f7f5 ff95 	bl	8004f0c <HAL_GetTick>
 800efe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800efe4:	e008      	b.n	800eff8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800efe6:	f7f5 ff91 	bl	8004f0c <HAL_GetTick>
 800efea:	4602      	mov	r2, r0
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d901      	bls.n	800eff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eff4:	2303      	movs	r3, #3
 800eff6:	e006      	b.n	800f006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eff8:	4b05      	ldr	r3, [pc, #20]	; (800f010 <RCCEx_PLL3_Config+0x15c>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f000:	2b00      	cmp	r3, #0
 800f002:	d0f0      	beq.n	800efe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f004:	7bfb      	ldrb	r3, [r7, #15]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	58024400 	.word	0x58024400
 800f014:	ffff0007 	.word	0xffff0007

0800f018 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d101      	bne.n	800f02a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f026:	2301      	movs	r3, #1
 800f028:	e054      	b.n	800f0d4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	7a5b      	ldrb	r3, [r3, #9]
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d105      	bne.n	800f040 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7f3 ffec 	bl	8003018 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2202      	movs	r2, #2
 800f044:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f023 0120 	bic.w	r1, r3, #32
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685a      	ldr	r2, [r3, #4]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	430a      	orrs	r2, r1
 800f05a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f042 0204 	orr.w	r2, r2, #4
 800f06a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f076:	2b40      	cmp	r3, #64	; 0x40
 800f078:	d104      	bne.n	800f084 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2204      	movs	r2, #4
 800f07e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f080:	2301      	movs	r3, #1
 800f082:	e027      	b.n	800f0d4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f084:	f7f5 ff42 	bl	8004f0c <HAL_GetTick>
 800f088:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f08a:	e015      	b.n	800f0b8 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f08c:	f7f5 ff3e 	bl	8004f0c <HAL_GetTick>
 800f090:	4602      	mov	r2, r0
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	2b02      	cmp	r3, #2
 800f098:	d90e      	bls.n	800f0b8 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	2b04      	cmp	r3, #4
 800f0a6:	d107      	bne.n	800f0b8 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2204      	movs	r2, #4
 800f0ac:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e00d      	b.n	800f0d4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	f003 0304 	and.w	r3, r3, #4
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d0e2      	beq.n	800f08c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7a1b      	ldrb	r3, [r3, #8]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d101      	bne.n	800f0f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	e044      	b.n	800f180 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7a5b      	ldrb	r3, [r3, #9]
 800f100:	b2db      	uxtb	r3, r3
 800f102:	2b01      	cmp	r3, #1
 800f104:	d133      	bne.n	800f16e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2202      	movs	r2, #2
 800f10a:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f10c:	f7f5 fefe 	bl	8004f0c <HAL_GetTick>
 800f110:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f112:	e018      	b.n	800f146 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f114:	f7f5 fefa 	bl	8004f0c <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d911      	bls.n	800f146 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	f003 0301 	and.w	r3, r3, #1
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d00a      	beq.n	800f146 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2202      	movs	r2, #2
 800f13a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	e01c      	b.n	800f180 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	f003 0301 	and.w	r3, r3, #1
 800f150:	2b01      	cmp	r3, #1
 800f152:	d1df      	bne.n	800f114 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689a      	ldr	r2, [r3, #8]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	691a      	ldr	r2, [r3, #16]
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	725a      	strb	r2, [r3, #9]
 800f16c:	e004      	b.n	800f178 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2204      	movs	r2, #4
 800f172:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	721a      	strb	r2, [r3, #8]

  return status;
 800f17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b086      	sub	sp, #24
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b02      	cmp	r3, #2
 800f19a:	d904      	bls.n	800f1a6 <HAL_SAI_InitProtocol+0x1e>
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	3b03      	subs	r3, #3
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d812      	bhi.n	800f1ca <HAL_SAI_InitProtocol+0x42>
 800f1a4:	e008      	b.n	800f1b8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	68b9      	ldr	r1, [r7, #8]
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f000 fc11 	bl	800f9d4 <SAI_InitI2S>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	75fb      	strb	r3, [r7, #23]
      break;
 800f1b6:	e00b      	b.n	800f1d0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 fcba 	bl	800fb38 <SAI_InitPCM>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800f1c8:	e002      	b.n	800f1d0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	75fb      	strb	r3, [r7, #23]
      break;
 800f1ce:	bf00      	nop
  }

  if (status == HAL_OK)
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d104      	bne.n	800f1e0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f1d6:	68f8      	ldr	r0, [r7, #12]
 800f1d8:	f000 f808 	bl	800f1ec <HAL_SAI_Init>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3718      	adds	r7, #24
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
	...

0800f1ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b08a      	sub	sp, #40	; 0x28
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e28e      	b.n	800f71c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f1fe:	f7f5 feb5 	bl	8004f6c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d113      	bne.n	800f234 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a96      	ldr	r2, [pc, #600]	; (800f46c <HAL_SAI_Init+0x280>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d004      	beq.n	800f220 <HAL_SAI_Init+0x34>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a95      	ldr	r2, [pc, #596]	; (800f470 <HAL_SAI_Init+0x284>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d107      	bne.n	800f230 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f224:	2b01      	cmp	r3, #1
 800f226:	d103      	bne.n	800f230 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e273      	b.n	800f71c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a8c      	ldr	r2, [pc, #560]	; (800f46c <HAL_SAI_Init+0x280>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d004      	beq.n	800f248 <HAL_SAI_Init+0x5c>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a8c      	ldr	r2, [pc, #560]	; (800f474 <HAL_SAI_Init+0x288>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d102      	bne.n	800f24e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f248:	4b8b      	ldr	r3, [pc, #556]	; (800f478 <HAL_SAI_Init+0x28c>)
 800f24a:	61bb      	str	r3, [r7, #24]
 800f24c:	e028      	b.n	800f2a0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a8a      	ldr	r2, [pc, #552]	; (800f47c <HAL_SAI_Init+0x290>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d004      	beq.n	800f262 <HAL_SAI_Init+0x76>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a88      	ldr	r2, [pc, #544]	; (800f480 <HAL_SAI_Init+0x294>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d102      	bne.n	800f268 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f262:	4b88      	ldr	r3, [pc, #544]	; (800f484 <HAL_SAI_Init+0x298>)
 800f264:	61bb      	str	r3, [r7, #24]
 800f266:	e01b      	b.n	800f2a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a86      	ldr	r2, [pc, #536]	; (800f488 <HAL_SAI_Init+0x29c>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d004      	beq.n	800f27c <HAL_SAI_Init+0x90>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a85      	ldr	r2, [pc, #532]	; (800f48c <HAL_SAI_Init+0x2a0>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d102      	bne.n	800f282 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f27c:	4b84      	ldr	r3, [pc, #528]	; (800f490 <HAL_SAI_Init+0x2a4>)
 800f27e:	61bb      	str	r3, [r7, #24]
 800f280:	e00e      	b.n	800f2a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a7a      	ldr	r2, [pc, #488]	; (800f470 <HAL_SAI_Init+0x284>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d004      	beq.n	800f296 <HAL_SAI_Init+0xaa>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4a80      	ldr	r2, [pc, #512]	; (800f494 <HAL_SAI_Init+0x2a8>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d102      	bne.n	800f29c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f296:	4b80      	ldr	r3, [pc, #512]	; (800f498 <HAL_SAI_Init+0x2ac>)
 800f298:	61bb      	str	r3, [r7, #24]
 800f29a:	e001      	b.n	800f2a0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e23d      	b.n	800f71c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d106      	bne.n	800f2ba <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f3 ff49 	bl	800314c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fcf6 	bl	800fcac <SAI_Disable>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e228      	b.n	800f71c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2202      	movs	r2, #2
 800f2ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d00c      	beq.n	800f2f4 <HAL_SAI_Init+0x108>
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d80d      	bhi.n	800f2fa <HAL_SAI_Init+0x10e>
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <HAL_SAI_Init+0xfc>
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d003      	beq.n	800f2ee <HAL_SAI_Init+0x102>
 800f2e6:	e008      	b.n	800f2fa <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f2ec:	e008      	b.n	800f300 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f2ee:	2310      	movs	r3, #16
 800f2f0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f2f2:	e005      	b.n	800f300 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f2f4:	2320      	movs	r3, #32
 800f2f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f2f8:	e002      	b.n	800f300 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f2fe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	2b05      	cmp	r3, #5
 800f306:	d832      	bhi.n	800f36e <HAL_SAI_Init+0x182>
 800f308:	a201      	add	r2, pc, #4	; (adr r2, 800f310 <HAL_SAI_Init+0x124>)
 800f30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f30e:	bf00      	nop
 800f310:	0800f329 	.word	0x0800f329
 800f314:	0800f32f 	.word	0x0800f32f
 800f318:	0800f337 	.word	0x0800f337
 800f31c:	0800f33f 	.word	0x0800f33f
 800f320:	0800f34f 	.word	0x0800f34f
 800f324:	0800f35f 	.word	0x0800f35f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	61fb      	str	r3, [r7, #28]
      break;
 800f32c:	e022      	b.n	800f374 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f332:	61fb      	str	r3, [r7, #28]
      break;
 800f334:	e01e      	b.n	800f374 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f33a:	61fb      	str	r3, [r7, #28]
      break;
 800f33c:	e01a      	b.n	800f374 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f33e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f342:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	f043 0301 	orr.w	r3, r3, #1
 800f34a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f34c:	e012      	b.n	800f374 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f34e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f352:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	f043 0302 	orr.w	r3, r3, #2
 800f35a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f35c:	e00a      	b.n	800f374 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f35e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f362:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	f043 0303 	orr.w	r3, r3, #3
 800f36a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f36c:	e002      	b.n	800f374 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	61fb      	str	r3, [r7, #28]
      break;
 800f372:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f378:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f000 80c5 	beq.w	800f50e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4a37      	ldr	r2, [pc, #220]	; (800f46c <HAL_SAI_Init+0x280>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d004      	beq.n	800f39c <HAL_SAI_Init+0x1b0>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	4a37      	ldr	r2, [pc, #220]	; (800f474 <HAL_SAI_Init+0x288>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d106      	bne.n	800f3aa <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f39c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f3a0:	f04f 0100 	mov.w	r1, #0
 800f3a4:	f7fe fb44 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800f3a8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a33      	ldr	r2, [pc, #204]	; (800f47c <HAL_SAI_Init+0x290>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d004      	beq.n	800f3be <HAL_SAI_Init+0x1d2>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a31      	ldr	r2, [pc, #196]	; (800f480 <HAL_SAI_Init+0x294>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d106      	bne.n	800f3cc <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f3be:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f3c2:	f04f 0100 	mov.w	r1, #0
 800f3c6:	f7fe fb33 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800f3ca:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a2d      	ldr	r2, [pc, #180]	; (800f488 <HAL_SAI_Init+0x29c>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d004      	beq.n	800f3e0 <HAL_SAI_Init+0x1f4>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a2c      	ldr	r2, [pc, #176]	; (800f48c <HAL_SAI_Init+0x2a0>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d106      	bne.n	800f3ee <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f3e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f3e4:	f04f 0100 	mov.w	r1, #0
 800f3e8:	f7fe fb22 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800f3ec:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4a1f      	ldr	r2, [pc, #124]	; (800f470 <HAL_SAI_Init+0x284>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d106      	bne.n	800f406 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f3f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f3fc:	f04f 0100 	mov.w	r1, #0
 800f400:	f7fe fb16 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800f404:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a22      	ldr	r2, [pc, #136]	; (800f494 <HAL_SAI_Init+0x2a8>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d106      	bne.n	800f41e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f410:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f414:	f04f 0100 	mov.w	r1, #0
 800f418:	f7fe fb0a 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800f41c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	699b      	ldr	r3, [r3, #24]
 800f422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f426:	d139      	bne.n	800f49c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f42c:	2b04      	cmp	r3, #4
 800f42e:	d102      	bne.n	800f436 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	60fb      	str	r3, [r7, #12]
 800f434:	e00a      	b.n	800f44c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f43a:	2b08      	cmp	r3, #8
 800f43c:	d103      	bne.n	800f446 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f43e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f442:	60fb      	str	r3, [r7, #12]
 800f444:	e002      	b.n	800f44c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f44c:	697a      	ldr	r2, [r7, #20]
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	4619      	mov	r1, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a1b      	ldr	r3, [r3, #32]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	fb02 f303 	mul.w	r3, r2, r3
 800f462:	fbb1 f3f3 	udiv	r3, r1, r3
 800f466:	613b      	str	r3, [r7, #16]
 800f468:	e030      	b.n	800f4cc <HAL_SAI_Init+0x2e0>
 800f46a:	bf00      	nop
 800f46c:	40015804 	.word	0x40015804
 800f470:	58005404 	.word	0x58005404
 800f474:	40015824 	.word	0x40015824
 800f478:	40015800 	.word	0x40015800
 800f47c:	40015c04 	.word	0x40015c04
 800f480:	40015c24 	.word	0x40015c24
 800f484:	40015c00 	.word	0x40015c00
 800f488:	40016004 	.word	0x40016004
 800f48c:	40016024 	.word	0x40016024
 800f490:	40016000 	.word	0x40016000
 800f494:	58005424 	.word	0x58005424
 800f498:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4a4:	d101      	bne.n	800f4aa <HAL_SAI_Init+0x2be>
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	e000      	b.n	800f4ac <HAL_SAI_Init+0x2c0>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	4413      	add	r3, r2
 800f4b6:	005b      	lsls	r3, r3, #1
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1b      	ldr	r3, [r3, #32]
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	fb02 f303 	mul.w	r3, r2, r3
 800f4c4:	021b      	lsls	r3, r3, #8
 800f4c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800f4ca:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	4a95      	ldr	r2, [pc, #596]	; (800f724 <HAL_SAI_Init+0x538>)
 800f4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f4d4:	08da      	lsrs	r2, r3, #3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f4da:	6939      	ldr	r1, [r7, #16]
 800f4dc:	4b91      	ldr	r3, [pc, #580]	; (800f724 <HAL_SAI_Init+0x538>)
 800f4de:	fba3 2301 	umull	r2, r3, r3, r1
 800f4e2:	08da      	lsrs	r2, r3, #3
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	4413      	add	r3, r2
 800f4ea:	005b      	lsls	r3, r3, #1
 800f4ec:	1aca      	subs	r2, r1, r3
 800f4ee:	2a08      	cmp	r2, #8
 800f4f0:	d904      	bls.n	800f4fc <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f6:	1c5a      	adds	r2, r3, #1
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f500:	2b04      	cmp	r3, #4
 800f502:	d104      	bne.n	800f50e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f508:	085a      	lsrs	r2, r3, #1
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d003      	beq.n	800f51e <HAL_SAI_Init+0x332>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	d109      	bne.n	800f532 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f522:	2b01      	cmp	r3, #1
 800f524:	d101      	bne.n	800f52a <HAL_SAI_Init+0x33e>
 800f526:	2300      	movs	r3, #0
 800f528:	e001      	b.n	800f52e <HAL_SAI_Init+0x342>
 800f52a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f52e:	623b      	str	r3, [r7, #32]
 800f530:	e008      	b.n	800f544 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f536:	2b01      	cmp	r3, #1
 800f538:	d102      	bne.n	800f540 <HAL_SAI_Init+0x354>
 800f53a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f53e:	e000      	b.n	800f542 <HAL_SAI_Init+0x356>
 800f540:	2300      	movs	r3, #0
 800f542:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f544:	f7f5 fd12 	bl	8004f6c <HAL_GetREVID>
 800f548:	4603      	mov	r3, r0
 800f54a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f54e:	d331      	bcc.n	800f5b4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	6819      	ldr	r1, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	4b73      	ldr	r3, [pc, #460]	; (800f728 <HAL_SAI_Init+0x53c>)
 800f55c:	400b      	ands	r3, r1
 800f55e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	6819      	ldr	r1, [r3, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f56e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f574:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f57a:	431a      	orrs	r2, r3
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f588:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f594:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	051b      	lsls	r3, r3, #20
 800f59c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f5a2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	691b      	ldr	r3, [r3, #16]
 800f5a8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	430a      	orrs	r2, r1
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	e02d      	b.n	800f610 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6819      	ldr	r1, [r3, #0]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	4b5b      	ldr	r3, [pc, #364]	; (800f72c <HAL_SAI_Init+0x540>)
 800f5c0:	400b      	ands	r3, r1
 800f5c2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6819      	ldr	r1, [r3, #0]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5d2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f5d8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5de:	431a      	orrs	r2, r3
 800f5e0:	6a3b      	ldr	r3, [r7, #32]
 800f5e2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f5ec:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f5f8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	051b      	lsls	r3, r3, #20
 800f600:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f606:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	430a      	orrs	r2, r1
 800f60e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	6859      	ldr	r1, [r3, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	4b45      	ldr	r3, [pc, #276]	; (800f730 <HAL_SAI_Init+0x544>)
 800f61c:	400b      	ands	r3, r1
 800f61e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6859      	ldr	r1, [r3, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	69da      	ldr	r2, [r3, #28]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62e:	431a      	orrs	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f634:	431a      	orrs	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	430a      	orrs	r2, r1
 800f63c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6899      	ldr	r1, [r3, #8]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	4b3a      	ldr	r3, [pc, #232]	; (800f734 <HAL_SAI_Init+0x548>)
 800f64a:	400b      	ands	r3, r1
 800f64c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	6899      	ldr	r1, [r3, #8]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f658:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f65e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f664:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f66a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f670:	3b01      	subs	r3, #1
 800f672:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f674:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	430a      	orrs	r2, r1
 800f67c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68d9      	ldr	r1, [r3, #12]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f68c:	400b      	ands	r3, r1
 800f68e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68d9      	ldr	r1, [r3, #12]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f69e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f6a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	021b      	lsls	r3, r3, #8
 800f6b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	430a      	orrs	r2, r1
 800f6b8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4a1e      	ldr	r2, [pc, #120]	; (800f738 <HAL_SAI_Init+0x54c>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d004      	beq.n	800f6ce <HAL_SAI_Init+0x4e2>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a1c      	ldr	r2, [pc, #112]	; (800f73c <HAL_SAI_Init+0x550>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d119      	bne.n	800f702 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6d2:	f023 0201 	bic.w	r2, r3, #1
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d10e      	bne.n	800f702 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f6f0:	431a      	orrs	r2, r3
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fa:	f043 0201 	orr.w	r2, r3, #1
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2200      	movs	r2, #0
 800f706:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3728      	adds	r7, #40	; 0x28
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	cccccccd 	.word	0xcccccccd
 800f728:	f005c010 	.word	0xf005c010
 800f72c:	f805c010 	.word	0xf805c010
 800f730:	ffff1ff0 	.word	0xffff1ff0
 800f734:	fff88000 	.word	0xfff88000
 800f738:	40015804 	.word	0x40015804
 800f73c:	58005404 	.word	0x58005404

0800f740 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	4613      	mov	r3, r2
 800f74c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f74e:	f7f5 fbdd 	bl	8004f0c <HAL_GetTick>
 800f752:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d002      	beq.n	800f760 <HAL_SAI_Transmit_DMA+0x20>
 800f75a:	88fb      	ldrh	r3, [r7, #6]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d101      	bne.n	800f764 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f760:	2301      	movs	r3, #1
 800f762:	e098      	b.n	800f896 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	f040 8091 	bne.w	800f894 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d101      	bne.n	800f780 <HAL_SAI_Transmit_DMA+0x40>
 800f77c:	2302      	movs	r3, #2
 800f77e:	e08a      	b.n	800f896 <HAL_SAI_Transmit_DMA+0x156>
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	68ba      	ldr	r2, [r7, #8]
 800f78c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	88fa      	ldrh	r2, [r7, #6]
 800f792:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	88fa      	ldrh	r2, [r7, #6]
 800f79a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2212      	movs	r2, #18
 800f7aa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7b4:	4a3a      	ldr	r2, [pc, #232]	; (800f8a0 <HAL_SAI_Transmit_DMA+0x160>)
 800f7b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7be:	4a39      	ldr	r2, [pc, #228]	; (800f8a4 <HAL_SAI_Transmit_DMA+0x164>)
 800f7c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7c8:	4a37      	ldr	r2, [pc, #220]	; (800f8a8 <HAL_SAI_Transmit_DMA+0x168>)
 800f7ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	331c      	adds	r3, #28
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f7f0:	f7f7 fe3a 	bl	8007468 <HAL_DMA_Start_IT>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d005      	beq.n	800f806 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f802:	2301      	movs	r3, #1
 800f804:	e047      	b.n	800f896 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f806:	2100      	movs	r1, #0
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 fa17 	bl	800fc3c <SAI_InterruptFlag>
 800f80e:	4601      	mov	r1, r0
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	691a      	ldr	r2, [r3, #16]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	430a      	orrs	r2, r1
 800f81c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f82c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f82e:	e015      	b.n	800f85c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f830:	f7f5 fb6c 	bl	8004f0c <HAL_GetTick>
 800f834:	4602      	mov	r2, r0
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f83e:	d90d      	bls.n	800f85c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800f858:	2303      	movs	r3, #3
 800f85a:	e01c      	b.n	800f896 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f866:	2b00      	cmp	r3, #0
 800f868:	d0e2      	beq.n	800f830 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f874:	2b00      	cmp	r3, #0
 800f876:	d107      	bne.n	800f888 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f886:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	e000      	b.n	800f896 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800f894:	2302      	movs	r3, #2
  }
}
 800f896:	4618      	mov	r0, r3
 800f898:	3718      	adds	r7, #24
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	0800fd81 	.word	0x0800fd81
 800f8a4:	0800fd21 	.word	0x0800fd21
 800f8a8:	0800fe19 	.word	0x0800fe19

0800f8ac <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <HAL_SAI_Receive_DMA+0x1a>
 800f8c0:	88fb      	ldrh	r3, [r7, #6]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e079      	b.n	800f9be <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d172      	bne.n	800f9bc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d101      	bne.n	800f8e4 <HAL_SAI_Receive_DMA+0x38>
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	e06c      	b.n	800f9be <HAL_SAI_Receive_DMA+0x112>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	88fa      	ldrh	r2, [r7, #6]
 800f8f6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	88fa      	ldrh	r2, [r7, #6]
 800f8fe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2222      	movs	r2, #34	; 0x22
 800f90e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f918:	4a2b      	ldr	r2, [pc, #172]	; (800f9c8 <HAL_SAI_Receive_DMA+0x11c>)
 800f91a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f922:	4a2a      	ldr	r2, [pc, #168]	; (800f9cc <HAL_SAI_Receive_DMA+0x120>)
 800f924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f92c:	4a28      	ldr	r2, [pc, #160]	; (800f9d0 <HAL_SAI_Receive_DMA+0x124>)
 800f92e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f936:	2200      	movs	r2, #0
 800f938:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	331c      	adds	r3, #28
 800f946:	4619      	mov	r1, r3
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f94c:	461a      	mov	r2, r3
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f954:	f7f7 fd88 	bl	8007468 <HAL_DMA_Start_IT>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d005      	beq.n	800f96a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f966:	2301      	movs	r3, #1
 800f968:	e029      	b.n	800f9be <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f96a:	2100      	movs	r1, #0
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f000 f965 	bl	800fc3c <SAI_InterruptFlag>
 800f972:	4601      	mov	r1, r0
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	691a      	ldr	r2, [r3, #16]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	430a      	orrs	r2, r1
 800f980:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f990:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d107      	bne.n	800f9b0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f9ae:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	e000      	b.n	800f9be <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800f9bc:	2302      	movs	r3, #2
  }
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	0800fdfd 	.word	0x0800fdfd
 800f9cc:	0800fd9d 	.word	0x0800fd9d
 800f9d0:	0800fe19 	.word	0x0800fe19

0800f9d4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b087      	sub	sp, #28
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <SAI_InitI2S+0x2e>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	d103      	bne.n	800fa0a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2200      	movs	r2, #0
 800fa06:	651a      	str	r2, [r3, #80]	; 0x50
 800fa08:	e002      	b.n	800fa10 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fa16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa1e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	e077      	b.n	800fb2a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d107      	bne.n	800fa50 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2200      	movs	r2, #0
 800fa44:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fa4c:	665a      	str	r2, [r3, #100]	; 0x64
 800fa4e:	e006      	b.n	800fa5e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa56:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d84f      	bhi.n	800fb04 <SAI_InitI2S+0x130>
 800fa64:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <SAI_InitI2S+0x98>)
 800fa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6a:	bf00      	nop
 800fa6c:	0800fa7d 	.word	0x0800fa7d
 800fa70:	0800fa9f 	.word	0x0800fa9f
 800fa74:	0800fac1 	.word	0x0800fac1
 800fa78:	0800fae3 	.word	0x0800fae3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2280      	movs	r2, #128	; 0x80
 800fa80:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	085b      	lsrs	r3, r3, #1
 800fa86:	015a      	lsls	r2, r3, #5
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	085b      	lsrs	r3, r3, #1
 800fa90:	011a      	lsls	r2, r3, #4
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2240      	movs	r2, #64	; 0x40
 800fa9a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fa9c:	e035      	b.n	800fb0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2280      	movs	r2, #128	; 0x80
 800faa2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	085b      	lsrs	r3, r3, #1
 800faa8:	019a      	lsls	r2, r3, #6
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	085b      	lsrs	r3, r3, #1
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2280      	movs	r2, #128	; 0x80
 800fabc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fabe:	e024      	b.n	800fb0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	22c0      	movs	r2, #192	; 0xc0
 800fac4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	085b      	lsrs	r3, r3, #1
 800faca:	019a      	lsls	r2, r3, #6
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	085b      	lsrs	r3, r3, #1
 800fad4:	015a      	lsls	r2, r3, #5
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2280      	movs	r2, #128	; 0x80
 800fade:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fae0:	e013      	b.n	800fb0a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	22e0      	movs	r2, #224	; 0xe0
 800fae6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	085b      	lsrs	r3, r3, #1
 800faec:	019a      	lsls	r2, r3, #6
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	085b      	lsrs	r3, r3, #1
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2280      	movs	r2, #128	; 0x80
 800fb00:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fb02:	e002      	b.n	800fb0a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800fb04:	2301      	movs	r3, #1
 800fb06:	75fb      	strb	r3, [r7, #23]
      break;
 800fb08:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	d10b      	bne.n	800fb28 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d102      	bne.n	800fb1c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2210      	movs	r2, #16
 800fb1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d102      	bne.n	800fb28 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2208      	movs	r2, #8
 800fb26:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	371c      	adds	r7, #28
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop

0800fb38 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b087      	sub	sp, #28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <SAI_InitPCM+0x2e>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d103      	bne.n	800fb6e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	651a      	str	r2, [r3, #80]	; 0x50
 800fb6c:	e002      	b.n	800fb74 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2200      	movs	r2, #0
 800fb72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb80:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fb88:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb9c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	2b04      	cmp	r3, #4
 800fba2:	d103      	bne.n	800fbac <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2201      	movs	r2, #1
 800fba8:	659a      	str	r2, [r3, #88]	; 0x58
 800fbaa:	e002      	b.n	800fbb2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	220d      	movs	r2, #13
 800fbb0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b03      	cmp	r3, #3
 800fbb6:	d837      	bhi.n	800fc28 <SAI_InitPCM+0xf0>
 800fbb8:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <SAI_InitPCM+0x88>)
 800fbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbbe:	bf00      	nop
 800fbc0:	0800fbd1 	.word	0x0800fbd1
 800fbc4:	0800fbe7 	.word	0x0800fbe7
 800fbc8:	0800fbfd 	.word	0x0800fbfd
 800fbcc:	0800fc13 	.word	0x0800fc13
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2280      	movs	r2, #128	; 0x80
 800fbd4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	011a      	lsls	r2, r3, #4
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2240      	movs	r2, #64	; 0x40
 800fbe2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fbe4:	e023      	b.n	800fc2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2280      	movs	r2, #128	; 0x80
 800fbea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2280      	movs	r2, #128	; 0x80
 800fbf8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fbfa:	e018      	b.n	800fc2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	22c0      	movs	r2, #192	; 0xc0
 800fc00:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	015a      	lsls	r2, r3, #5
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2280      	movs	r2, #128	; 0x80
 800fc0e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fc10:	e00d      	b.n	800fc2e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	22e0      	movs	r2, #224	; 0xe0
 800fc16:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2280      	movs	r2, #128	; 0x80
 800fc24:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fc26:	e002      	b.n	800fc2e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	75fb      	strb	r3, [r7, #23]
      break;
 800fc2c:	bf00      	nop
  }

  return status;
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	371c      	adds	r7, #28
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800fc4c:	78fb      	ldrb	r3, [r7, #3]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d103      	bne.n	800fc5a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f043 0308 	orr.w	r3, r3, #8
 800fc58:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d10b      	bne.n	800fc7a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d003      	beq.n	800fc72 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d103      	bne.n	800fc7a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f043 0310 	orr.w	r3, r3, #16
 800fc78:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d003      	beq.n	800fc8a <SAI_InterruptFlag+0x4e>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	2b02      	cmp	r3, #2
 800fc88:	d104      	bne.n	800fc94 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fc90:	60fb      	str	r3, [r7, #12]
 800fc92:	e003      	b.n	800fc9c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f043 0304 	orr.w	r3, r3, #4
 800fc9a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3714      	adds	r7, #20
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr
	...

0800fcac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800fcb4:	4b18      	ldr	r3, [pc, #96]	; (800fd18 <SAI_Disable+0x6c>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a18      	ldr	r2, [pc, #96]	; (800fd1c <SAI_Disable+0x70>)
 800fcba:	fba2 2303 	umull	r2, r3, r2, r3
 800fcbe:	0b1b      	lsrs	r3, r3, #12
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fcd6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d10a      	bne.n	800fcf4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	72fb      	strb	r3, [r7, #11]
      break;
 800fcf2:	e009      	b.n	800fd08 <SAI_Disable+0x5c>
    }
    count--;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1e7      	bne.n	800fcd8 <SAI_Disable+0x2c>

  return status;
 800fd08:	7afb      	ldrb	r3, [r7, #11]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3714      	adds	r7, #20
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	20000018 	.word	0x20000018
 800fd1c:	95cbec1b 	.word	0x95cbec1b

0800fd20 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd2c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd36:	d01c      	beq.n	800fd72 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fd4e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fd50:	2100      	movs	r1, #0
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7ff ff72 	bl	800fc3c <SAI_InterruptFlag>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	43d9      	mvns	r1, r3
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	691a      	ldr	r2, [r3, #16]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	400a      	ands	r2, r1
 800fd68:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7f2 f9ca 	bl	800210c <HAL_SAI_TxCpltCallback>
#endif
}
 800fd78:	bf00      	nop
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7f2 f9c6 	bl	8002120 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800fd94:	bf00      	nop
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	69db      	ldr	r3, [r3, #28]
 800fdae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdb2:	d01c      	beq.n	800fdee <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fdc2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fdcc:	2100      	movs	r1, #0
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f7ff ff34 	bl	800fc3c <SAI_InterruptFlag>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	43d9      	mvns	r1, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	691a      	ldr	r2, [r3, #16]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	400a      	ands	r2, r1
 800fde4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f7f2 f9a0 	bl	8002134 <HAL_SAI_RxCpltCallback>
#endif
}
 800fdf4:	bf00      	nop
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7f2 f99d 	bl	800214a <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800fe10:	bf00      	nop
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe24:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7f8 fcb2 	bl	8008790 <HAL_DMA_GetError>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	d01d      	beq.n	800fe6e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fe50:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f7ff ff2a 	bl	800fcac <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f7f2 f945 	bl	80020f8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800fe6e:	bf00      	nop
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b08a      	sub	sp, #40	; 0x28
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	e075      	b.n	800ff74 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d105      	bne.n	800fea0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7f3 fb60 	bl	8003560 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2204      	movs	r2, #4
 800fea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f867 	bl	800ff7c <HAL_SD_InitCard>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800feb4:	2301      	movs	r3, #1
 800feb6:	e05d      	b.n	800ff74 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800feb8:	f107 0308 	add.w	r3, r7, #8
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fdb4 	bl	8010a2c <HAL_SD_GetCardStatus>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d001      	beq.n	800fece <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800feca:	2301      	movs	r3, #1
 800fecc:	e052      	b.n	800ff74 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800fece:	7e3b      	ldrb	r3, [r7, #24]
 800fed0:	b2db      	uxtb	r3, r3
 800fed2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800fed4:	7e7b      	ldrb	r3, [r7, #25]
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fede:	2b01      	cmp	r3, #1
 800fee0:	d10a      	bne.n	800fef8 <HAL_SD_Init+0x82>
 800fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d102      	bne.n	800feee <HAL_SD_Init+0x78>
 800fee8:	6a3b      	ldr	r3, [r7, #32]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d004      	beq.n	800fef8 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fef4:	659a      	str	r2, [r3, #88]	; 0x58
 800fef6:	e00b      	b.n	800ff10 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d104      	bne.n	800ff0a <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff06:	659a      	str	r2, [r3, #88]	; 0x58
 800ff08:	e002      	b.n	800ff10 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fe72 	bl	8010c00 <HAL_SD_ConfigWideBusOperation>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e026      	b.n	800ff74 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800ff26:	f7f4 fff1 	bl	8004f0c <HAL_GetTick>
 800ff2a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ff2c:	e011      	b.n	800ff52 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ff2e:	f7f4 ffed 	bl	8004f0c <HAL_GetTick>
 800ff32:	4602      	mov	r2, r0
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff3c:	d109      	bne.n	800ff52 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff44:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ff4e:	2303      	movs	r3, #3
 800ff50:	e010      	b.n	800ff74 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f000 ff66 	bl	8010e24 <HAL_SD_GetCardState>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2b04      	cmp	r3, #4
 800ff5c:	d1e7      	bne.n	800ff2e <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3728      	adds	r7, #40	; 0x28
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ff7c:	b590      	push	{r4, r7, lr}
 800ff7e:	b08d      	sub	sp, #52	; 0x34
 800ff80:	af02      	add	r7, sp, #8
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ff84:	2300      	movs	r3, #0
 800ff86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ff94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ff98:	f04f 0100 	mov.w	r1, #0
 800ff9c:	f7fd fd48 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 800ffa0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ffa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d109      	bne.n	800ffbc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ffb6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e070      	b.n	801009e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	0a1b      	lsrs	r3, r3, #8
 800ffc0:	4a39      	ldr	r2, [pc, #228]	; (80100a8 <HAL_SD_InitCard+0x12c>)
 800ffc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc6:	091b      	lsrs	r3, r3, #4
 800ffc8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681c      	ldr	r4, [r3, #0]
 800ffce:	466a      	mov	r2, sp
 800ffd0:	f107 0318 	add.w	r3, r7, #24
 800ffd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffd8:	e882 0003 	stmia.w	r2, {r0, r1}
 800ffdc:	f107 030c 	add.w	r3, r7, #12
 800ffe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f003 fe7e 	bl	8013ce4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f003 fec1 	bl	8013d74 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010002:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	2b00      	cmp	r3, #0
 8010008:	d007      	beq.n	801001a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801000a:	4a28      	ldr	r2, [pc, #160]	; (80100ac <HAL_SD_InitCard+0x130>)
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010012:	3301      	adds	r3, #1
 8010014:	4618      	mov	r0, r3
 8010016:	f7f4 ff85 	bl	8004f24 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 fff0 	bl	8011000 <SD_PowerON>
 8010020:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00b      	beq.n	8010040 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2201      	movs	r2, #1
 801002c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010034:	6a3b      	ldr	r3, [r7, #32]
 8010036:	431a      	orrs	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801003c:	2301      	movs	r3, #1
 801003e:	e02e      	b.n	801009e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 ff0f 	bl	8010e64 <SD_InitCard>
 8010046:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00b      	beq.n	8010066 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2201      	movs	r2, #1
 8010052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801005a:	6a3b      	ldr	r3, [r7, #32]
 801005c:	431a      	orrs	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010062:	2301      	movs	r3, #1
 8010064:	e01b      	b.n	801009e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801006e:	4618      	mov	r0, r3
 8010070:	f003 ff16 	bl	8013ea0 <SDMMC_CmdBlockLength>
 8010074:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00f      	beq.n	801009c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a0b      	ldr	r2, [pc, #44]	; (80100b0 <HAL_SD_InitCard+0x134>)
 8010082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	431a      	orrs	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e000      	b.n	801009e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	372c      	adds	r7, #44	; 0x2c
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd90      	pop	{r4, r7, pc}
 80100a6:	bf00      	nop
 80100a8:	014f8b59 	.word	0x014f8b59
 80100ac:	00012110 	.word	0x00012110
 80100b0:	1fe00fff 	.word	0x1fe00fff

080100b4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b092      	sub	sp, #72	; 0x48
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60f8      	str	r0, [r7, #12]
 80100bc:	60b9      	str	r1, [r7, #8]
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80100c2:	f7f4 ff23 	bl	8004f0c <HAL_GetTick>
 80100c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d107      	bne.n	80100e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80100e2:	2301      	movs	r3, #1
 80100e4:	e167      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	f040 815a 	bne.w	80103a8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2200      	movs	r2, #0
 80100f8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80100fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	441a      	add	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010104:	429a      	cmp	r2, r3
 8010106:	d907      	bls.n	8010118 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801010c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e14e      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2203      	movs	r2, #3
 801011c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2200      	movs	r2, #0
 8010126:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801012c:	2b01      	cmp	r3, #1
 801012e:	d002      	beq.n	8010136 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010132:	025b      	lsls	r3, r3, #9
 8010134:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801013a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	025b      	lsls	r3, r3, #9
 8010140:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010142:	2390      	movs	r3, #144	; 0x90
 8010144:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010146:	2302      	movs	r3, #2
 8010148:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801014a:	2300      	movs	r3, #0
 801014c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801014e:	2300      	movs	r3, #0
 8010150:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f107 0214 	add.w	r2, r7, #20
 801015a:	4611      	mov	r1, r2
 801015c:	4618      	mov	r0, r3
 801015e:	f003 fe73 	bl	8013e48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68da      	ldr	r2, [r3, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010170:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d90a      	bls.n	801018e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2202      	movs	r2, #2
 801017c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010184:	4618      	mov	r0, r3
 8010186:	f003 fed1 	bl	8013f2c <SDMMC_CmdReadMultiBlock>
 801018a:	6478      	str	r0, [r7, #68]	; 0x44
 801018c:	e009      	b.n	80101a2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2201      	movs	r2, #1
 8010192:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801019a:	4618      	mov	r0, r3
 801019c:	f003 fea3 	bl	8013ee6 <SDMMC_CmdReadSingleBlock>
 80101a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80101a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d012      	beq.n	80101ce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a84      	ldr	r2, [pc, #528]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 80101ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101b6:	431a      	orrs	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80101ca:	2301      	movs	r3, #1
 80101cc:	e0f3      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80101d2:	e058      	b.n	8010286 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d033      	beq.n	801024a <HAL_SD_ReadBlocks+0x196>
 80101e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e4:	2b1f      	cmp	r3, #31
 80101e6:	d930      	bls.n	801024a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80101e8:	2300      	movs	r3, #0
 80101ea:	643b      	str	r3, [r7, #64]	; 0x40
 80101ec:	e027      	b.n	801023e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f003 fda0 	bl	8013d38 <SDMMC_ReadFIFO>
 80101f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80101fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010200:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010204:	3301      	adds	r3, #1
 8010206:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020a:	0a1b      	lsrs	r3, r3, #8
 801020c:	b2da      	uxtb	r2, r3
 801020e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010210:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010214:	3301      	adds	r3, #1
 8010216:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	0c1b      	lsrs	r3, r3, #16
 801021c:	b2da      	uxtb	r2, r3
 801021e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010220:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010224:	3301      	adds	r3, #1
 8010226:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	0e1b      	lsrs	r3, r3, #24
 801022c:	b2da      	uxtb	r2, r3
 801022e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010234:	3301      	adds	r3, #1
 8010236:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8010238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801023a:	3301      	adds	r3, #1
 801023c:	643b      	str	r3, [r7, #64]	; 0x40
 801023e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010240:	2b07      	cmp	r3, #7
 8010242:	d9d4      	bls.n	80101ee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010246:	3b20      	subs	r3, #32
 8010248:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801024a:	f7f4 fe5f 	bl	8004f0c <HAL_GetTick>
 801024e:	4602      	mov	r2, r0
 8010250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010256:	429a      	cmp	r2, r3
 8010258:	d902      	bls.n	8010260 <HAL_SD_ReadBlocks+0x1ac>
 801025a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801025c:	2b00      	cmp	r3, #0
 801025e:	d112      	bne.n	8010286 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	4a56      	ldr	r2, [pc, #344]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 8010266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801026c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2201      	movs	r2, #1
 8010278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	e097      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801028c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010290:	2b00      	cmp	r3, #0
 8010292:	d09f      	beq.n	80101d4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	68da      	ldr	r2, [r3, #12]
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80102a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d022      	beq.n	80102f8 <HAL_SD_ReadBlocks+0x244>
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d91f      	bls.n	80102f8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102bc:	2b03      	cmp	r3, #3
 80102be:	d01b      	beq.n	80102f8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f003 fe9b 	bl	8014000 <SDMMC_CmdStopTransfer>
 80102ca:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80102cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d012      	beq.n	80102f8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a3a      	ldr	r2, [pc, #232]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 80102d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e0:	431a      	orrs	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2200      	movs	r2, #0
 80102f2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80102f4:	2301      	movs	r3, #1
 80102f6:	e05e      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fe:	f003 0308 	and.w	r3, r3, #8
 8010302:	2b00      	cmp	r3, #0
 8010304:	d012      	beq.n	801032c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4a2d      	ldr	r2, [pc, #180]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 801030c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010312:	f043 0208 	orr.w	r2, r3, #8
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2201      	movs	r2, #1
 801031e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010328:	2301      	movs	r3, #1
 801032a:	e044      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010332:	f003 0302 	and.w	r3, r3, #2
 8010336:	2b00      	cmp	r3, #0
 8010338:	d012      	beq.n	8010360 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a20      	ldr	r2, [pc, #128]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 8010340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010346:	f043 0202 	orr.w	r2, r3, #2
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2201      	movs	r2, #1
 8010352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2200      	movs	r2, #0
 801035a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	e02a      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010366:	f003 0320 	and.w	r3, r3, #32
 801036a:	2b00      	cmp	r3, #0
 801036c:	d012      	beq.n	8010394 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4a13      	ldr	r2, [pc, #76]	; (80103c0 <HAL_SD_ReadBlocks+0x30c>)
 8010374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801037a:	f043 0220 	orr.w	r2, r3, #32
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2200      	movs	r2, #0
 801038e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010390:	2301      	movs	r3, #1
 8010392:	e010      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a0a      	ldr	r2, [pc, #40]	; (80103c4 <HAL_SD_ReadBlocks+0x310>)
 801039a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	e006      	b.n	80103b6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80103b4:	2301      	movs	r3, #1
  }
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3748      	adds	r7, #72	; 0x48
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	1fe00fff 	.word	0x1fe00fff
 80103c4:	18000f3a 	.word	0x18000f3a

080103c8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b092      	sub	sp, #72	; 0x48
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80103d6:	f7f4 fd99 	bl	8004f0c <HAL_GetTick>
 80103da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d107      	bne.n	80103fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e16b      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b01      	cmp	r3, #1
 8010404:	f040 815e 	bne.w	80106c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801040e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	441a      	add	r2, r3
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010418:	429a      	cmp	r2, r3
 801041a:	d907      	bls.n	801042c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010420:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010428:	2301      	movs	r3, #1
 801042a:	e152      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2203      	movs	r2, #3
 8010430:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2200      	movs	r2, #0
 801043a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010440:	2b01      	cmp	r3, #1
 8010442:	d002      	beq.n	801044a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8010444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010446:	025b      	lsls	r3, r3, #9
 8010448:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801044a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801044e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	025b      	lsls	r3, r3, #9
 8010454:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010456:	2390      	movs	r3, #144	; 0x90
 8010458:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801045a:	2300      	movs	r3, #0
 801045c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801045e:	2300      	movs	r3, #0
 8010460:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010462:	2300      	movs	r3, #0
 8010464:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f107 0218 	add.w	r2, r7, #24
 801046e:	4611      	mov	r1, r2
 8010470:	4618      	mov	r0, r3
 8010472:	f003 fce9 	bl	8013e48 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	68da      	ldr	r2, [r3, #12]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010484:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d90a      	bls.n	80104a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2220      	movs	r2, #32
 8010490:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010498:	4618      	mov	r0, r3
 801049a:	f003 fd8d 	bl	8013fb8 <SDMMC_CmdWriteMultiBlock>
 801049e:	6478      	str	r0, [r7, #68]	; 0x44
 80104a0:	e009      	b.n	80104b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2210      	movs	r2, #16
 80104a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104ae:	4618      	mov	r0, r3
 80104b0:	f003 fd5f 	bl	8013f72 <SDMMC_CmdWriteSingleBlock>
 80104b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80104b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d012      	beq.n	80104e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a86      	ldr	r2, [pc, #536]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 80104c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ca:	431a      	orrs	r2, r3
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2200      	movs	r2, #0
 80104dc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	e0f7      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80104e6:	e05c      	b.n	80105a2 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d037      	beq.n	8010566 <HAL_SD_WriteBlocks+0x19e>
 80104f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f8:	2b1f      	cmp	r3, #31
 80104fa:	d934      	bls.n	8010566 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80104fc:	2300      	movs	r3, #0
 80104fe:	643b      	str	r3, [r7, #64]	; 0x40
 8010500:	e02b      	b.n	801055a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8010502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050a:	3301      	adds	r3, #1
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	021a      	lsls	r2, r3, #8
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	4313      	orrs	r3, r2
 8010518:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051c:	3301      	adds	r3, #1
 801051e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	041a      	lsls	r2, r3, #16
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	4313      	orrs	r3, r2
 801052a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801052c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052e:	3301      	adds	r3, #1
 8010530:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	061a      	lsls	r2, r3, #24
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	4313      	orrs	r3, r2
 801053c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010540:	3301      	adds	r3, #1
 8010542:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f107 0214 	add.w	r2, r7, #20
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f003 fbff 	bl	8013d52 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8010554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010556:	3301      	adds	r3, #1
 8010558:	643b      	str	r3, [r7, #64]	; 0x40
 801055a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801055c:	2b07      	cmp	r3, #7
 801055e:	d9d0      	bls.n	8010502 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010562:	3b20      	subs	r3, #32
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8010566:	f7f4 fcd1 	bl	8004f0c <HAL_GetTick>
 801056a:	4602      	mov	r2, r0
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010572:	429a      	cmp	r2, r3
 8010574:	d902      	bls.n	801057c <HAL_SD_WriteBlocks+0x1b4>
 8010576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010578:	2b00      	cmp	r3, #0
 801057a:	d112      	bne.n	80105a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a56      	ldr	r2, [pc, #344]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 8010582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801058a:	431a      	orrs	r2, r3
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2201      	movs	r2, #1
 8010594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2200      	movs	r2, #0
 801059c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 801059e:	2303      	movs	r3, #3
 80105a0:	e097      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d09b      	beq.n	80104e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	68da      	ldr	r2, [r3, #12]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d022      	beq.n	8010614 <HAL_SD_WriteBlocks+0x24c>
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d91f      	bls.n	8010614 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d8:	2b03      	cmp	r3, #3
 80105da:	d01b      	beq.n	8010614 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f003 fd0d 	bl	8014000 <SDMMC_CmdStopTransfer>
 80105e6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80105e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d012      	beq.n	8010614 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a3a      	ldr	r2, [pc, #232]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 80105f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105fc:	431a      	orrs	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2201      	movs	r2, #1
 8010606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2200      	movs	r2, #0
 801060e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010610:	2301      	movs	r3, #1
 8010612:	e05e      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801061a:	f003 0308 	and.w	r3, r3, #8
 801061e:	2b00      	cmp	r3, #0
 8010620:	d012      	beq.n	8010648 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a2d      	ldr	r2, [pc, #180]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 8010628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801062e:	f043 0208 	orr.w	r2, r3, #8
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2201      	movs	r2, #1
 801063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2200      	movs	r2, #0
 8010642:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010644:	2301      	movs	r3, #1
 8010646:	e044      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064e:	f003 0302 	and.w	r3, r3, #2
 8010652:	2b00      	cmp	r3, #0
 8010654:	d012      	beq.n	801067c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a20      	ldr	r2, [pc, #128]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 801065c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010662:	f043 0202 	orr.w	r2, r3, #2
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2200      	movs	r2, #0
 8010676:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	e02a      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010682:	f003 0310 	and.w	r3, r3, #16
 8010686:	2b00      	cmp	r3, #0
 8010688:	d012      	beq.n	80106b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a13      	ldr	r2, [pc, #76]	; (80106dc <HAL_SD_WriteBlocks+0x314>)
 8010690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010696:	f043 0210 	orr.w	r2, r3, #16
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2201      	movs	r2, #1
 80106a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2200      	movs	r2, #0
 80106aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80106ac:	2301      	movs	r3, #1
 80106ae:	e010      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	4a0a      	ldr	r2, [pc, #40]	; (80106e0 <HAL_SD_WriteBlocks+0x318>)
 80106b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e006      	b.n	80106d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80106d0:	2301      	movs	r3, #1
  }
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3748      	adds	r7, #72	; 0x48
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	1fe00fff 	.word	0x1fe00fff
 80106e0:	18000f3a 	.word	0x18000f3a

080106e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106f2:	0f9b      	lsrs	r3, r3, #30
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106fe:	0e9b      	lsrs	r3, r3, #26
 8010700:	b2db      	uxtb	r3, r3
 8010702:	f003 030f 	and.w	r3, r3, #15
 8010706:	b2da      	uxtb	r2, r3
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010710:	0e1b      	lsrs	r3, r3, #24
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0303 	and.w	r3, r3, #3
 8010718:	b2da      	uxtb	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010722:	0c1b      	lsrs	r3, r3, #16
 8010724:	b2da      	uxtb	r2, r3
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801072e:	0a1b      	lsrs	r3, r3, #8
 8010730:	b2da      	uxtb	r2, r3
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801073a:	b2da      	uxtb	r2, r3
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010744:	0d1b      	lsrs	r3, r3, #20
 8010746:	b29a      	uxth	r2, r3
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010750:	0c1b      	lsrs	r3, r3, #16
 8010752:	b2db      	uxtb	r3, r3
 8010754:	f003 030f 	and.w	r3, r3, #15
 8010758:	b2da      	uxtb	r2, r3
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010762:	0bdb      	lsrs	r3, r3, #15
 8010764:	b2db      	uxtb	r3, r3
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	b2da      	uxtb	r2, r3
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010774:	0b9b      	lsrs	r3, r3, #14
 8010776:	b2db      	uxtb	r3, r3
 8010778:	f003 0301 	and.w	r3, r3, #1
 801077c:	b2da      	uxtb	r2, r3
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010786:	0b5b      	lsrs	r3, r3, #13
 8010788:	b2db      	uxtb	r3, r3
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	b2da      	uxtb	r2, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010798:	0b1b      	lsrs	r3, r3, #12
 801079a:	b2db      	uxtb	r3, r3
 801079c:	f003 0301 	and.w	r3, r3, #1
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2200      	movs	r2, #0
 80107aa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d163      	bne.n	801087c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107b8:	009a      	lsls	r2, r3, #2
 80107ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80107be:	4013      	ands	r3, r2
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80107c4:	0f92      	lsrs	r2, r2, #30
 80107c6:	431a      	orrs	r2, r3
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107d0:	0edb      	lsrs	r3, r3, #27
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	f003 0307 	and.w	r3, r3, #7
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107e2:	0e1b      	lsrs	r3, r3, #24
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	f003 0307 	and.w	r3, r3, #7
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107f4:	0d5b      	lsrs	r3, r3, #21
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f003 0307 	and.w	r3, r3, #7
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010806:	0c9b      	lsrs	r3, r3, #18
 8010808:	b2db      	uxtb	r3, r3
 801080a:	f003 0307 	and.w	r3, r3, #7
 801080e:	b2da      	uxtb	r2, r3
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010818:	0bdb      	lsrs	r3, r3, #15
 801081a:	b2db      	uxtb	r3, r3
 801081c:	f003 0307 	and.w	r3, r3, #7
 8010820:	b2da      	uxtb	r2, r3
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	691b      	ldr	r3, [r3, #16]
 801082a:	1c5a      	adds	r2, r3, #1
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	7e1b      	ldrb	r3, [r3, #24]
 8010834:	b2db      	uxtb	r3, r3
 8010836:	f003 0307 	and.w	r3, r3, #7
 801083a:	3302      	adds	r3, #2
 801083c:	2201      	movs	r2, #1
 801083e:	fa02 f303 	lsl.w	r3, r2, r3
 8010842:	687a      	ldr	r2, [r7, #4]
 8010844:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010846:	fb03 f202 	mul.w	r2, r3, r2
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	7a1b      	ldrb	r3, [r3, #8]
 8010852:	b2db      	uxtb	r3, r3
 8010854:	f003 030f 	and.w	r3, r3, #15
 8010858:	2201      	movs	r2, #1
 801085a:	409a      	lsls	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010868:	0a52      	lsrs	r2, r2, #9
 801086a:	fb03 f202 	mul.w	r2, r3, r2
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010878:	655a      	str	r2, [r3, #84]	; 0x54
 801087a:	e031      	b.n	80108e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010880:	2b01      	cmp	r3, #1
 8010882:	d11d      	bne.n	80108c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010888:	041b      	lsls	r3, r3, #16
 801088a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010892:	0c1b      	lsrs	r3, r3, #16
 8010894:	431a      	orrs	r2, r3
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	3301      	adds	r3, #1
 80108a0:	029a      	lsls	r2, r3, #10
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	655a      	str	r2, [r3, #84]	; 0x54
 80108be:	e00f      	b.n	80108e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a58      	ldr	r2, [pc, #352]	; (8010a28 <HAL_SD_GetCardCSD+0x344>)
 80108c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80108dc:	2301      	movs	r3, #1
 80108de:	e09d      	b.n	8010a1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108e4:	0b9b      	lsrs	r3, r3, #14
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108f6:	09db      	lsrs	r3, r3, #7
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010908:	b2db      	uxtb	r3, r3
 801090a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801090e:	b2da      	uxtb	r2, r3
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010918:	0fdb      	lsrs	r3, r3, #31
 801091a:	b2da      	uxtb	r2, r3
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010924:	0f5b      	lsrs	r3, r3, #29
 8010926:	b2db      	uxtb	r3, r3
 8010928:	f003 0303 	and.w	r3, r3, #3
 801092c:	b2da      	uxtb	r2, r3
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010936:	0e9b      	lsrs	r3, r3, #26
 8010938:	b2db      	uxtb	r3, r3
 801093a:	f003 0307 	and.w	r3, r3, #7
 801093e:	b2da      	uxtb	r2, r3
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010948:	0d9b      	lsrs	r3, r3, #22
 801094a:	b2db      	uxtb	r3, r3
 801094c:	f003 030f 	and.w	r3, r3, #15
 8010950:	b2da      	uxtb	r2, r3
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801095a:	0d5b      	lsrs	r3, r3, #21
 801095c:	b2db      	uxtb	r3, r3
 801095e:	f003 0301 	and.w	r3, r3, #1
 8010962:	b2da      	uxtb	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	2200      	movs	r2, #0
 801096e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010976:	0c1b      	lsrs	r3, r3, #16
 8010978:	b2db      	uxtb	r3, r3
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	b2da      	uxtb	r2, r3
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801098a:	0bdb      	lsrs	r3, r3, #15
 801098c:	b2db      	uxtb	r3, r3
 801098e:	f003 0301 	and.w	r3, r3, #1
 8010992:	b2da      	uxtb	r2, r3
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801099e:	0b9b      	lsrs	r3, r3, #14
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0301 	and.w	r3, r3, #1
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109b2:	0b5b      	lsrs	r3, r3, #13
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	f003 0301 	and.w	r3, r3, #1
 80109ba:	b2da      	uxtb	r2, r3
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109c6:	0b1b      	lsrs	r3, r3, #12
 80109c8:	b2db      	uxtb	r3, r3
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	b2da      	uxtb	r2, r3
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109da:	0a9b      	lsrs	r3, r3, #10
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	f003 0303 	and.w	r3, r3, #3
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109ee:	0a1b      	lsrs	r3, r3, #8
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	f003 0303 	and.w	r3, r3, #3
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a02:	085b      	lsrs	r3, r3, #1
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	1fe00fff 	.word	0x1fe00fff

08010a2c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b094      	sub	sp, #80	; 0x50
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	2b03      	cmp	r3, #3
 8010a46:	d101      	bne.n	8010a4c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e0a7      	b.n	8010b9c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010a4c:	f107 0308 	add.w	r3, r7, #8
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 fb62 	bl	801111c <SD_SendSDStatus>
 8010a58:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d011      	beq.n	8010a84 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a4f      	ldr	r2, [pc, #316]	; (8010ba4 <HAL_SD_GetCardStatus+0x178>)
 8010a66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2201      	movs	r2, #1
 8010a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010a82:	e070      	b.n	8010b66 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	099b      	lsrs	r3, r3, #6
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	f003 0303 	and.w	r3, r3, #3
 8010a8e:	b2da      	uxtb	r2, r3
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	095b      	lsrs	r3, r3, #5
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	f003 0301 	and.w	r3, r3, #1
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	0a1b      	lsrs	r3, r3, #8
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	0e1b      	lsrs	r3, r3, #24
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	061a      	lsls	r2, r3, #24
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	021b      	lsls	r3, r3, #8
 8010ac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010aca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	0a1b      	lsrs	r3, r3, #8
 8010ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010ad4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	0e1b      	lsrs	r3, r3, #24
 8010ada:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	0a1b      	lsrs	r3, r3, #8
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	0d1b      	lsrs	r3, r3, #20
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	f003 030f 	and.w	r3, r3, #15
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	0c1b      	lsrs	r3, r3, #16
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	4313      	orrs	r3, r2
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	0a9b      	lsrs	r3, r3, #10
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	0a1b      	lsrs	r3, r3, #8
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	f003 0303 	and.w	r3, r3, #3
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	091b      	lsrs	r3, r3, #4
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	f003 030f 	and.w	r3, r3, #15
 8010b48:	b2da      	uxtb	r2, r3
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	f003 030f 	and.w	r3, r3, #15
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	0e1b      	lsrs	r3, r3, #24
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f003 f996 	bl	8013ea0 <SDMMC_CmdBlockLength>
 8010b74:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d00d      	beq.n	8010b98 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a08      	ldr	r2, [pc, #32]	; (8010ba4 <HAL_SD_GetCardStatus+0x178>)
 8010b82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b88:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010b92:	2301      	movs	r3, #1
 8010b94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8010b98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3750      	adds	r7, #80	; 0x50
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	1fe00fff 	.word	0x1fe00fff

08010ba8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010c00:	b590      	push	{r4, r7, lr}
 8010c02:	b08d      	sub	sp, #52	; 0x34
 8010c04:	af02      	add	r7, sp, #8
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2203      	movs	r2, #3
 8010c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1c:	2b03      	cmp	r3, #3
 8010c1e:	d02e      	beq.n	8010c7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c26:	d106      	bne.n	8010c36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	635a      	str	r2, [r3, #52]	; 0x34
 8010c34:	e029      	b.n	8010c8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c3c:	d10a      	bne.n	8010c54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 fb64 	bl	801130c <SD_WideBus_Enable>
 8010c44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	431a      	orrs	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	635a      	str	r2, [r3, #52]	; 0x34
 8010c52:	e01a      	b.n	8010c8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d10a      	bne.n	8010c70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 fba1 	bl	80113a2 <SD_WideBus_Disable>
 8010c60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	431a      	orrs	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8010c6e:	e00c      	b.n	8010c8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8010c7c:	e005      	b.n	8010c8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d007      	beq.n	8010ca2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a5f      	ldr	r2, [pc, #380]	; (8010e14 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010c98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ca0:	e096      	b.n	8010dd0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010ca2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010ca6:	f04f 0100 	mov.w	r1, #0
 8010caa:	f7fc fec1 	bl	800da30 <HAL_RCCEx_GetPeriphCLKFreq>
 8010cae:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f000 8083 	beq.w	8010dbe <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	695a      	ldr	r2, [r3, #20]
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	4950      	ldr	r1, [pc, #320]	; (8010e18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8010cda:	0e1b      	lsrs	r3, r3, #24
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d303      	bcc.n	8010ce8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	61bb      	str	r3, [r7, #24]
 8010ce6:	e05a      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cf0:	d103      	bne.n	8010cfa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	61bb      	str	r3, [r7, #24]
 8010cf8:	e051      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d02:	d126      	bne.n	8010d52 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	695b      	ldr	r3, [r3, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10e      	bne.n	8010d2a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	4a43      	ldr	r2, [pc, #268]	; (8010e1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d906      	bls.n	8010d22 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	4a40      	ldr	r2, [pc, #256]	; (8010e18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010d18:	fba2 2303 	umull	r2, r3, r2, r3
 8010d1c:	0e5b      	lsrs	r3, r3, #25
 8010d1e:	61bb      	str	r3, [r7, #24]
 8010d20:	e03d      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	695b      	ldr	r3, [r3, #20]
 8010d26:	61bb      	str	r3, [r7, #24]
 8010d28:	e039      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d36:	4a39      	ldr	r2, [pc, #228]	; (8010e1c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d906      	bls.n	8010d4a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	4a36      	ldr	r2, [pc, #216]	; (8010e18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010d40:	fba2 2303 	umull	r2, r3, r2, r3
 8010d44:	0e5b      	lsrs	r3, r3, #25
 8010d46:	61bb      	str	r3, [r7, #24]
 8010d48:	e029      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	695b      	ldr	r3, [r3, #20]
 8010d4e:	61bb      	str	r3, [r7, #24]
 8010d50:	e025      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	695b      	ldr	r3, [r3, #20]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10e      	bne.n	8010d78 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	4a30      	ldr	r2, [pc, #192]	; (8010e20 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d906      	bls.n	8010d70 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	4a2c      	ldr	r2, [pc, #176]	; (8010e18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010d66:	fba2 2303 	umull	r2, r3, r2, r3
 8010d6a:	0e1b      	lsrs	r3, r3, #24
 8010d6c:	61bb      	str	r3, [r7, #24]
 8010d6e:	e016      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	695b      	ldr	r3, [r3, #20]
 8010d74:	61bb      	str	r3, [r7, #24]
 8010d76:	e012      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	695b      	ldr	r3, [r3, #20]
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	69fa      	ldr	r2, [r7, #28]
 8010d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d84:	4a26      	ldr	r2, [pc, #152]	; (8010e20 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d906      	bls.n	8010d98 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	4a22      	ldr	r2, [pc, #136]	; (8010e18 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d92:	0e1b      	lsrs	r3, r3, #24
 8010d94:	61bb      	str	r3, [r7, #24]
 8010d96:	e002      	b.n	8010d9e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	695b      	ldr	r3, [r3, #20]
 8010d9c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681c      	ldr	r4, [r3, #0]
 8010da2:	466a      	mov	r2, sp
 8010da4:	f107 0314 	add.w	r3, r7, #20
 8010da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010dac:	e882 0003 	stmia.w	r2, {r0, r1}
 8010db0:	f107 0308 	add.w	r3, r7, #8
 8010db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010db6:	4620      	mov	r0, r4
 8010db8:	f002 ff94 	bl	8013ce4 <SDMMC_Init>
 8010dbc:	e008      	b.n	8010dd0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f003 f861 	bl	8013ea0 <SDMMC_CmdBlockLength>
 8010dde:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010de0:	6a3b      	ldr	r3, [r7, #32]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00c      	beq.n	8010e00 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a0a      	ldr	r2, [pc, #40]	; (8010e14 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010dec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010df2:	6a3b      	ldr	r3, [r7, #32]
 8010df4:	431a      	orrs	r2, r3
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	372c      	adds	r7, #44	; 0x2c
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd90      	pop	{r4, r7, pc}
 8010e14:	1fe00fff 	.word	0x1fe00fff
 8010e18:	55e63b89 	.word	0x55e63b89
 8010e1c:	02faf080 	.word	0x02faf080
 8010e20:	017d7840 	.word	0x017d7840

08010e24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010e30:	f107 030c 	add.w	r3, r7, #12
 8010e34:	4619      	mov	r1, r3
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fa40 	bl	80112bc <SD_SendStatus>
 8010e3c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d005      	beq.n	8010e50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	431a      	orrs	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	0a5b      	lsrs	r3, r3, #9
 8010e54:	f003 030f 	and.w	r3, r3, #15
 8010e58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010e5a:	693b      	ldr	r3, [r7, #16]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b090      	sub	sp, #64	; 0x40
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010e70:	f7f4 f84c 	bl	8004f0c <HAL_GetTick>
 8010e74:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f002 ff8b 	bl	8013d96 <SDMMC_GetPowerState>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d102      	bne.n	8010e8c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010e86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010e8a:	e0b5      	b.n	8010ff8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e90:	2b03      	cmp	r3, #3
 8010e92:	d02e      	beq.n	8010ef2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f003 f9d6 	bl	801424a <SDMMC_CmdSendCID>
 8010e9e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d001      	beq.n	8010eaa <SD_InitCard+0x46>
    {
      return errorstate;
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea8:	e0a6      	b.n	8010ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f002 ffb6 	bl	8013e22 <SDMMC_GetResponse>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2104      	movs	r1, #4
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f002 ffad 	bl	8013e22 <SDMMC_GetResponse>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2108      	movs	r1, #8
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f002 ffa4 	bl	8013e22 <SDMMC_GetResponse>
 8010eda:	4602      	mov	r2, r0
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	210c      	movs	r1, #12
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f002 ff9b 	bl	8013e22 <SDMMC_GetResponse>
 8010eec:	4602      	mov	r2, r0
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef6:	2b03      	cmp	r3, #3
 8010ef8:	d01d      	beq.n	8010f36 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010efa:	e019      	b.n	8010f30 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f107 020a 	add.w	r2, r7, #10
 8010f04:	4611      	mov	r1, r2
 8010f06:	4618      	mov	r0, r3
 8010f08:	f003 f9de 	bl	80142c8 <SDMMC_CmdSetRelAdd>
 8010f0c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d001      	beq.n	8010f18 <SD_InitCard+0xb4>
      {
        return errorstate;
 8010f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f16:	e06f      	b.n	8010ff8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010f18:	f7f3 fff8 	bl	8004f0c <HAL_GetTick>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	f241 3287 	movw	r2, #4999	; 0x1387
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d902      	bls.n	8010f30 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010f2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f2e:	e063      	b.n	8010ff8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8010f30:	897b      	ldrh	r3, [r7, #10]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0e2      	beq.n	8010efc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	d036      	beq.n	8010fac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010f3e:	897b      	ldrh	r3, [r7, #10]
 8010f40:	461a      	mov	r2, r3
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681a      	ldr	r2, [r3, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4e:	041b      	lsls	r3, r3, #16
 8010f50:	4619      	mov	r1, r3
 8010f52:	4610      	mov	r0, r2
 8010f54:	f003 f998 	bl	8014288 <SDMMC_CmdSendCSD>
 8010f58:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <SD_InitCard+0x100>
    {
      return errorstate;
 8010f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f62:	e049      	b.n	8010ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2100      	movs	r1, #0
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f002 ff59 	bl	8013e22 <SDMMC_GetResponse>
 8010f70:	4602      	mov	r2, r0
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2104      	movs	r1, #4
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f002 ff50 	bl	8013e22 <SDMMC_GetResponse>
 8010f82:	4602      	mov	r2, r0
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2108      	movs	r1, #8
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f002 ff47 	bl	8013e22 <SDMMC_GetResponse>
 8010f94:	4602      	mov	r2, r0
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	210c      	movs	r1, #12
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f002 ff3e 	bl	8013e22 <SDMMC_GetResponse>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2104      	movs	r1, #4
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f002 ff35 	bl	8013e22 <SDMMC_GetResponse>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	0d1a      	lsrs	r2, r3, #20
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010fc0:	f107 030c 	add.w	r3, r7, #12
 8010fc4:	4619      	mov	r1, r3
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff fb8c 	bl	80106e4 <HAL_SD_GetCardCSD>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d002      	beq.n	8010fd8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010fd6:	e00f      	b.n	8010ff8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe0:	041b      	lsls	r3, r3, #16
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	4610      	mov	r0, r2
 8010fe6:	f003 f847 	bl	8014078 <SDMMC_CmdSelDesel>
 8010fea:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d001      	beq.n	8010ff6 <SD_InitCard+0x192>
  {
    return errorstate;
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff4:	e000      	b.n	8010ff8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3740      	adds	r7, #64	; 0x40
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b086      	sub	sp, #24
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011008:	2300      	movs	r3, #0
 801100a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 801100c:	2300      	movs	r3, #0
 801100e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011010:	2300      	movs	r3, #0
 8011012:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f003 f850 	bl	80140be <SDMMC_CmdGoIdleState>
 801101e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d001      	beq.n	801102a <SD_PowerON+0x2a>
  {
    return errorstate;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	e072      	b.n	8011110 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4618      	mov	r0, r3
 8011030:	f003 f863 	bl	80140fa <SDMMC_CmdOperCond>
 8011034:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801103c:	d10d      	bne.n	801105a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f003 f838 	bl	80140be <SDMMC_CmdGoIdleState>
 801104e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d004      	beq.n	8011060 <SD_PowerON+0x60>
    {
      return errorstate;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	e05a      	b.n	8011110 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2201      	movs	r2, #1
 801105e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011064:	2b01      	cmp	r3, #1
 8011066:	d137      	bne.n	80110d8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2100      	movs	r1, #0
 801106e:	4618      	mov	r0, r3
 8011070:	f003 f863 	bl	801413a <SDMMC_CmdAppCommand>
 8011074:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d02d      	beq.n	80110d8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801107c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011080:	e046      	b.n	8011110 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2100      	movs	r1, #0
 8011088:	4618      	mov	r0, r3
 801108a:	f003 f856 	bl	801413a <SDMMC_CmdAppCommand>
 801108e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d001      	beq.n	801109a <SD_PowerON+0x9a>
    {
      return errorstate;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	e03a      	b.n	8011110 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	491e      	ldr	r1, [pc, #120]	; (8011118 <SD_PowerON+0x118>)
 80110a0:	4618      	mov	r0, r3
 80110a2:	f003 f86d 	bl	8014180 <SDMMC_CmdAppOperCommand>
 80110a6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d002      	beq.n	80110b4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80110ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80110b2:	e02d      	b.n	8011110 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2100      	movs	r1, #0
 80110ba:	4618      	mov	r0, r3
 80110bc:	f002 feb1 	bl	8013e22 <SDMMC_GetResponse>
 80110c0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	0fdb      	lsrs	r3, r3, #31
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d101      	bne.n	80110ce <SD_PowerON+0xce>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <SD_PowerON+0xd0>
 80110ce:	2300      	movs	r3, #0
 80110d0:	613b      	str	r3, [r7, #16]

    count++;
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	3301      	adds	r3, #1
 80110d6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80110de:	4293      	cmp	r3, r2
 80110e0:	d802      	bhi.n	80110e8 <SD_PowerON+0xe8>
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d0cc      	beq.n	8011082 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d902      	bls.n	80110f8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80110f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80110f6:	e00b      	b.n	8011110 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011104:	2b00      	cmp	r3, #0
 8011106:	d002      	beq.n	801110e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801110e:	2300      	movs	r3, #0
}
 8011110:	4618      	mov	r0, r3
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	c1100000 	.word	0xc1100000

0801111c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b08c      	sub	sp, #48	; 0x30
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011126:	f7f3 fef1 	bl	8004f0c <HAL_GetTick>
 801112a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	2100      	movs	r1, #0
 8011136:	4618      	mov	r0, r3
 8011138:	f002 fe73 	bl	8013e22 <SDMMC_GetResponse>
 801113c:	4603      	mov	r3, r0
 801113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011146:	d102      	bne.n	801114e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801114c:	e0b0      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2140      	movs	r1, #64	; 0x40
 8011154:	4618      	mov	r0, r3
 8011156:	f002 fea3 	bl	8013ea0 <SDMMC_CmdBlockLength>
 801115a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801115c:	6a3b      	ldr	r3, [r7, #32]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d005      	beq.n	801116e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	e0a0      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011176:	041b      	lsls	r3, r3, #16
 8011178:	4619      	mov	r1, r3
 801117a:	4610      	mov	r0, r2
 801117c:	f002 ffdd 	bl	801413a <SDMMC_CmdAppCommand>
 8011180:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011182:	6a3b      	ldr	r3, [r7, #32]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d005      	beq.n	8011194 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	e08d      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011198:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801119a:	2340      	movs	r3, #64	; 0x40
 801119c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801119e:	2360      	movs	r3, #96	; 0x60
 80111a0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80111a2:	2302      	movs	r3, #2
 80111a4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80111a6:	2300      	movs	r3, #0
 80111a8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80111aa:	2301      	movs	r3, #1
 80111ac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f107 0208 	add.w	r2, r7, #8
 80111b6:	4611      	mov	r1, r2
 80111b8:	4618      	mov	r0, r3
 80111ba:	f002 fe45 	bl	8013e48 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f003 f8c5 	bl	8014352 <SDMMC_CmdStatusRegister>
 80111c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d02b      	beq.n	8011228 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80111d8:	6a3b      	ldr	r3, [r7, #32]
 80111da:	e069      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d013      	beq.n	8011212 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80111ea:	2300      	movs	r3, #0
 80111ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111ee:	e00d      	b.n	801120c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f002 fd9f 	bl	8013d38 <SDMMC_ReadFIFO>
 80111fa:	4602      	mov	r2, r0
 80111fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fe:	601a      	str	r2, [r3, #0]
        pData++;
 8011200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011202:	3304      	adds	r3, #4
 8011204:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	3301      	adds	r3, #1
 801120a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	2b07      	cmp	r3, #7
 8011210:	d9ee      	bls.n	80111f0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011212:	f7f3 fe7b 	bl	8004f0c <HAL_GetTick>
 8011216:	4602      	mov	r2, r0
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011220:	d102      	bne.n	8011228 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011222:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011226:	e043      	b.n	80112b0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801122e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8011232:	2b00      	cmp	r3, #0
 8011234:	d0d2      	beq.n	80111dc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801123c:	f003 0308 	and.w	r3, r3, #8
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011244:	2308      	movs	r3, #8
 8011246:	e033      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124e:	f003 0302 	and.w	r3, r3, #2
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011256:	2302      	movs	r3, #2
 8011258:	e02a      	b.n	80112b0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011260:	f003 0320 	and.w	r3, r3, #32
 8011264:	2b00      	cmp	r3, #0
 8011266:	d017      	beq.n	8011298 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8011268:	2320      	movs	r3, #32
 801126a:	e021      	b.n	80112b0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4618      	mov	r0, r3
 8011272:	f002 fd61 	bl	8013d38 <SDMMC_ReadFIFO>
 8011276:	4602      	mov	r2, r0
 8011278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127a:	601a      	str	r2, [r3, #0]
    pData++;
 801127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127e:	3304      	adds	r3, #4
 8011280:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011282:	f7f3 fe43 	bl	8004f0c <HAL_GetTick>
 8011286:	4602      	mov	r2, r0
 8011288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011290:	d102      	bne.n	8011298 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011292:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011296:	e00b      	b.n	80112b0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1e2      	bne.n	801126c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a03      	ldr	r2, [pc, #12]	; (80112b8 <SD_SendSDStatus+0x19c>)
 80112ac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3730      	adds	r7, #48	; 0x30
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	18000f3a 	.word	0x18000f3a

080112bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80112cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80112d0:	e018      	b.n	8011304 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112da:	041b      	lsls	r3, r3, #16
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f003 f814 	bl	801430c <SDMMC_CmdSendStatus>
 80112e4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d001      	beq.n	80112f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	e009      	b.n	8011304 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2100      	movs	r1, #0
 80112f6:	4618      	mov	r0, r3
 80112f8:	f002 fd93 	bl	8013e22 <SDMMC_GetResponse>
 80112fc:	4602      	mov	r2, r0
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	3710      	adds	r7, #16
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b086      	sub	sp, #24
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011314:	2300      	movs	r3, #0
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	2300      	movs	r3, #0
 801131a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2100      	movs	r1, #0
 8011322:	4618      	mov	r0, r3
 8011324:	f002 fd7d 	bl	8013e22 <SDMMC_GetResponse>
 8011328:	4603      	mov	r3, r0
 801132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801132e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011332:	d102      	bne.n	801133a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011338:	e02f      	b.n	801139a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801133a:	f107 030c 	add.w	r3, r7, #12
 801133e:	4619      	mov	r1, r3
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f000 f879 	bl	8011438 <SD_FindSCR>
 8011346:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d001      	beq.n	8011352 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	e023      	b.n	801139a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011358:	2b00      	cmp	r3, #0
 801135a:	d01c      	beq.n	8011396 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011364:	041b      	lsls	r3, r3, #16
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f002 fee6 	bl	801413a <SDMMC_CmdAppCommand>
 801136e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	e00f      	b.n	801139a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2102      	movs	r1, #2
 8011380:	4618      	mov	r0, r3
 8011382:	f002 ff1d 	bl	80141c0 <SDMMC_CmdBusWidth>
 8011386:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	e003      	b.n	801139a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011392:	2300      	movs	r3, #0
 8011394:	e001      	b.n	801139a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011396:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b086      	sub	sp, #24
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80113aa:	2300      	movs	r3, #0
 80113ac:	60fb      	str	r3, [r7, #12]
 80113ae:	2300      	movs	r3, #0
 80113b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2100      	movs	r1, #0
 80113b8:	4618      	mov	r0, r3
 80113ba:	f002 fd32 	bl	8013e22 <SDMMC_GetResponse>
 80113be:	4603      	mov	r3, r0
 80113c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113c8:	d102      	bne.n	80113d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80113ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80113ce:	e02f      	b.n	8011430 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80113d0:	f107 030c 	add.w	r3, r7, #12
 80113d4:	4619      	mov	r1, r3
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 f82e 	bl	8011438 <SD_FindSCR>
 80113dc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80113de:	697b      	ldr	r3, [r7, #20]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	e023      	b.n	8011430 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d01c      	beq.n	801142c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113fa:	041b      	lsls	r3, r3, #16
 80113fc:	4619      	mov	r1, r3
 80113fe:	4610      	mov	r0, r2
 8011400:	f002 fe9b 	bl	801413a <SDMMC_CmdAppCommand>
 8011404:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	e00f      	b.n	8011430 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2100      	movs	r1, #0
 8011416:	4618      	mov	r0, r3
 8011418:	f002 fed2 	bl	80141c0 <SDMMC_CmdBusWidth>
 801141c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	e003      	b.n	8011430 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011428:	2300      	movs	r3, #0
 801142a:	e001      	b.n	8011430 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801142c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08e      	sub	sp, #56	; 0x38
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011442:	f7f3 fd63 	bl	8004f0c <HAL_GetTick>
 8011446:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011448:	2300      	movs	r3, #0
 801144a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801144c:	2300      	movs	r3, #0
 801144e:	60bb      	str	r3, [r7, #8]
 8011450:	2300      	movs	r3, #0
 8011452:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2108      	movs	r1, #8
 801145e:	4618      	mov	r0, r3
 8011460:	f002 fd1e 	bl	8013ea0 <SDMMC_CmdBlockLength>
 8011464:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <SD_FindSCR+0x38>
  {
    return errorstate;
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	e0ad      	b.n	80115cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011478:	041b      	lsls	r3, r3, #16
 801147a:	4619      	mov	r1, r3
 801147c:	4610      	mov	r0, r2
 801147e:	f002 fe5c 	bl	801413a <SDMMC_CmdAppCommand>
 8011482:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011486:	2b00      	cmp	r3, #0
 8011488:	d001      	beq.n	801148e <SD_FindSCR+0x56>
  {
    return errorstate;
 801148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148c:	e09e      	b.n	80115cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011492:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011494:	2308      	movs	r3, #8
 8011496:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011498:	2330      	movs	r3, #48	; 0x30
 801149a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801149c:	2302      	movs	r3, #2
 801149e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80114a4:	2301      	movs	r3, #1
 80114a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f107 0210 	add.w	r2, r7, #16
 80114b0:	4611      	mov	r1, r2
 80114b2:	4618      	mov	r0, r3
 80114b4:	f002 fcc8 	bl	8013e48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4618      	mov	r0, r3
 80114be:	f002 fea2 	bl	8014206 <SDMMC_CmdSendSCR>
 80114c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80114c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d027      	beq.n	801151a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80114ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114cc:	e07e      	b.n	80115cc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d113      	bne.n	8011504 <SD_FindSCR+0xcc>
 80114dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d110      	bne.n	8011504 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f002 fc26 	bl	8013d38 <SDMMC_ReadFIFO>
 80114ec:	4603      	mov	r3, r0
 80114ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4618      	mov	r0, r3
 80114f6:	f002 fc1f 	bl	8013d38 <SDMMC_ReadFIFO>
 80114fa:	4603      	mov	r3, r0
 80114fc:	60fb      	str	r3, [r7, #12]
      index++;
 80114fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011500:	3301      	adds	r3, #1
 8011502:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011504:	f7f3 fd02 	bl	8004f0c <HAL_GetTick>
 8011508:	4602      	mov	r2, r0
 801150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011512:	d102      	bne.n	801151a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011518:	e058      	b.n	80115cc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011520:	f240 532a 	movw	r3, #1322	; 0x52a
 8011524:	4013      	ands	r3, r2
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0d1      	beq.n	80114ce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011530:	f003 0308 	and.w	r3, r3, #8
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2208      	movs	r2, #8
 801153e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011540:	2308      	movs	r3, #8
 8011542:	e043      	b.n	80115cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801154a:	f003 0302 	and.w	r3, r3, #2
 801154e:	2b00      	cmp	r3, #0
 8011550:	d005      	beq.n	801155e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2202      	movs	r2, #2
 8011558:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801155a:	2302      	movs	r3, #2
 801155c:	e036      	b.n	80115cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011564:	f003 0320 	and.w	r3, r3, #32
 8011568:	2b00      	cmp	r3, #0
 801156a:	d005      	beq.n	8011578 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2220      	movs	r2, #32
 8011572:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011574:	2320      	movs	r3, #32
 8011576:	e029      	b.n	80115cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a15      	ldr	r2, [pc, #84]	; (80115d4 <SD_FindSCR+0x19c>)
 801157e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	061a      	lsls	r2, r3, #24
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	021b      	lsls	r3, r3, #8
 8011588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801158c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	0a1b      	lsrs	r3, r3, #8
 8011592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011596:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	0e1b      	lsrs	r3, r3, #24
 801159c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	601a      	str	r2, [r3, #0]
    scr++;
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	3304      	adds	r3, #4
 80115a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	061a      	lsls	r2, r3, #24
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	021b      	lsls	r3, r3, #8
 80115b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80115b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	0a1b      	lsrs	r3, r3, #8
 80115ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80115be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	0e1b      	lsrs	r3, r3, #24
 80115c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80115ca:	2300      	movs	r3, #0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3738      	adds	r7, #56	; 0x38
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	18000f3a 	.word	0x18000f3a

080115d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d101      	bne.n	80115ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	e02b      	b.n	8011644 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d106      	bne.n	8011606 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2200      	movs	r2, #0
 80115fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7f1 f86b 	bl	80026dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2202      	movs	r2, #2
 801160a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	3304      	adds	r3, #4
 8011616:	4619      	mov	r1, r3
 8011618:	4610      	mov	r0, r2
 801161a:	f002 fa61 	bl	8013ae0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6818      	ldr	r0, [r3, #0]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	461a      	mov	r2, r3
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	f002 fab5 	bl	8013b98 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801162e:	4b07      	ldr	r3, [pc, #28]	; (801164c <HAL_SDRAM_Init+0x74>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4a06      	ldr	r2, [pc, #24]	; (801164c <HAL_SDRAM_Init+0x74>)
 8011634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011638:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2201      	movs	r2, #1
 801163e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	52004000 	.word	0x52004000

08011650 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011662:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011664:	7dfb      	ldrb	r3, [r7, #23]
 8011666:	2b02      	cmp	r3, #2
 8011668:	d101      	bne.n	801166e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801166a:	2302      	movs	r3, #2
 801166c:	e021      	b.n	80116b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801166e:	7dfb      	ldrb	r3, [r7, #23]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d002      	beq.n	801167a <HAL_SDRAM_SendCommand+0x2a>
 8011674:	7dfb      	ldrb	r3, [r7, #23]
 8011676:	2b05      	cmp	r3, #5
 8011678:	d118      	bne.n	80116ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2202      	movs	r2, #2
 801167e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	68b9      	ldr	r1, [r7, #8]
 801168a:	4618      	mov	r0, r3
 801168c:	f002 faee 	bl	8013c6c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2b02      	cmp	r3, #2
 8011696:	d104      	bne.n	80116a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2205      	movs	r2, #5
 801169c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80116a0:	e006      	b.n	80116b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2201      	movs	r2, #1
 80116a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80116aa:	e001      	b.n	80116b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	e000      	b.n	80116b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}

080116ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80116ba:	b580      	push	{r7, lr}
 80116bc:	b082      	sub	sp, #8
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	2b02      	cmp	r3, #2
 80116ce:	d101      	bne.n	80116d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80116d0:	2302      	movs	r3, #2
 80116d2:	e016      	b.n	8011702 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d10f      	bne.n	8011700 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2202      	movs	r2, #2
 80116e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	6839      	ldr	r1, [r7, #0]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f002 fae0 	bl	8013cb4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2201      	movs	r2, #1
 80116f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	e000      	b.n	8011702 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011700:	2301      	movs	r3, #1
}
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d101      	bne.n	801171e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801171a:	2301      	movs	r3, #1
 801171c:	e10f      	b.n	801193e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4a87      	ldr	r2, [pc, #540]	; (8011948 <HAL_SPI_Init+0x23c>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d00f      	beq.n	801174e <HAL_SPI_Init+0x42>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	4a86      	ldr	r2, [pc, #536]	; (801194c <HAL_SPI_Init+0x240>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d00a      	beq.n	801174e <HAL_SPI_Init+0x42>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4a84      	ldr	r2, [pc, #528]	; (8011950 <HAL_SPI_Init+0x244>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d005      	beq.n	801174e <HAL_SPI_Init+0x42>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	2b0f      	cmp	r3, #15
 8011748:	d901      	bls.n	801174e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	e0f7      	b.n	801193e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f000 f900 	bl	8011954 <SPI_GetPacketSize>
 8011754:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4a7b      	ldr	r2, [pc, #492]	; (8011948 <HAL_SPI_Init+0x23c>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d00c      	beq.n	801177a <HAL_SPI_Init+0x6e>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a79      	ldr	r2, [pc, #484]	; (801194c <HAL_SPI_Init+0x240>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d007      	beq.n	801177a <HAL_SPI_Init+0x6e>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a78      	ldr	r2, [pc, #480]	; (8011950 <HAL_SPI_Init+0x244>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d002      	beq.n	801177a <HAL_SPI_Init+0x6e>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2b08      	cmp	r3, #8
 8011778:	d811      	bhi.n	801179e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801177e:	4a72      	ldr	r2, [pc, #456]	; (8011948 <HAL_SPI_Init+0x23c>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d009      	beq.n	8011798 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4a70      	ldr	r2, [pc, #448]	; (801194c <HAL_SPI_Init+0x240>)
 801178a:	4293      	cmp	r3, r2
 801178c:	d004      	beq.n	8011798 <HAL_SPI_Init+0x8c>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4a6f      	ldr	r2, [pc, #444]	; (8011950 <HAL_SPI_Init+0x244>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d104      	bne.n	80117a2 <HAL_SPI_Init+0x96>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2b10      	cmp	r3, #16
 801179c:	d901      	bls.n	80117a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801179e:	2301      	movs	r3, #1
 80117a0:	e0cd      	b.n	801193e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d106      	bne.n	80117bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7f1 ffa4 	bl	8003704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2202      	movs	r2, #2
 80117c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f022 0201 	bic.w	r2, r2, #1
 80117d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	689b      	ldr	r3, [r3, #8]
 80117da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80117de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80117e8:	d119      	bne.n	801181e <HAL_SPI_Init+0x112>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80117f2:	d103      	bne.n	80117fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d008      	beq.n	801180e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011800:	2b00      	cmp	r3, #0
 8011802:	d10c      	bne.n	801181e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801180c:	d107      	bne.n	801181e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801181c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00f      	beq.n	801184a <HAL_SPI_Init+0x13e>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	68db      	ldr	r3, [r3, #12]
 801182e:	2b06      	cmp	r3, #6
 8011830:	d90b      	bls.n	801184a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	430a      	orrs	r2, r1
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	e007      	b.n	801185a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011858:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	69da      	ldr	r2, [r3, #28]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011862:	431a      	orrs	r2, r3
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	431a      	orrs	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801186c:	ea42 0103 	orr.w	r1, r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	68da      	ldr	r2, [r3, #12]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	430a      	orrs	r2, r1
 801187a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011884:	431a      	orrs	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801188a:	431a      	orrs	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	699b      	ldr	r3, [r3, #24]
 8011890:	431a      	orrs	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	691b      	ldr	r3, [r3, #16]
 8011896:	431a      	orrs	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	695b      	ldr	r3, [r3, #20]
 801189c:	431a      	orrs	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6a1b      	ldr	r3, [r3, #32]
 80118a2:	431a      	orrs	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	431a      	orrs	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118ae:	431a      	orrs	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	431a      	orrs	r2, r3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118ba:	ea42 0103 	orr.w	r1, r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	430a      	orrs	r2, r1
 80118c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d113      	bne.n	80118fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80118e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80118f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f022 0201 	bic.w	r2, r2, #1
 8011908:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00a      	beq.n	801192c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	430a      	orrs	r2, r1
 801192a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2201      	movs	r2, #1
 8011938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	40013000 	.word	0x40013000
 801194c:	40003800 	.word	0x40003800
 8011950:	40003c00 	.word	0x40003c00

08011954 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011954:	b480      	push	{r7}
 8011956:	b085      	sub	sp, #20
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011960:	095b      	lsrs	r3, r3, #5
 8011962:	3301      	adds	r3, #1
 8011964:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	3301      	adds	r3, #1
 801196c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	3307      	adds	r3, #7
 8011972:	08db      	lsrs	r3, r3, #3
 8011974:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	fb02 f303 	mul.w	r3, r2, r3
}
 801197e:	4618      	mov	r0, r3
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b082      	sub	sp, #8
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d101      	bne.n	801199c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011998:	2301      	movs	r3, #1
 801199a:	e049      	b.n	8011a30 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7f2 fa3f 	bl	8003e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2202      	movs	r2, #2
 80119ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	3304      	adds	r3, #4
 80119c6:	4619      	mov	r1, r3
 80119c8:	4610      	mov	r0, r2
 80119ca:	f000 fa99 	bl	8011f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2201      	movs	r2, #1
 80119d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2201      	movs	r2, #1
 80119da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2201      	movs	r2, #1
 80119e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2201      	movs	r2, #1
 80119f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2201      	movs	r2, #1
 80119fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2201      	movs	r2, #1
 8011a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2201      	movs	r2, #1
 8011a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2201      	movs	r2, #1
 8011a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2201      	movs	r2, #1
 8011a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d101      	bne.n	8011a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	e049      	b.n	8011ade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a50:	b2db      	uxtb	r3, r3
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7f2 f9c6 	bl	8003df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2202      	movs	r2, #2
 8011a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	3304      	adds	r3, #4
 8011a74:	4619      	mov	r1, r3
 8011a76:	4610      	mov	r0, r2
 8011a78:	f000 fa42 	bl	8011f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2201      	movs	r2, #1
 8011a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2201      	movs	r2, #1
 8011a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2201      	movs	r2, #1
 8011ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
	...

08011ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011af4:	2300      	movs	r3, #0
 8011af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d101      	bne.n	8011b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011b02:	2302      	movs	r3, #2
 8011b04:	e0ff      	b.n	8011d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2b14      	cmp	r3, #20
 8011b12:	f200 80f0 	bhi.w	8011cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011b16:	a201      	add	r2, pc, #4	; (adr r2, 8011b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b1c:	08011b71 	.word	0x08011b71
 8011b20:	08011cf7 	.word	0x08011cf7
 8011b24:	08011cf7 	.word	0x08011cf7
 8011b28:	08011cf7 	.word	0x08011cf7
 8011b2c:	08011bb1 	.word	0x08011bb1
 8011b30:	08011cf7 	.word	0x08011cf7
 8011b34:	08011cf7 	.word	0x08011cf7
 8011b38:	08011cf7 	.word	0x08011cf7
 8011b3c:	08011bf3 	.word	0x08011bf3
 8011b40:	08011cf7 	.word	0x08011cf7
 8011b44:	08011cf7 	.word	0x08011cf7
 8011b48:	08011cf7 	.word	0x08011cf7
 8011b4c:	08011c33 	.word	0x08011c33
 8011b50:	08011cf7 	.word	0x08011cf7
 8011b54:	08011cf7 	.word	0x08011cf7
 8011b58:	08011cf7 	.word	0x08011cf7
 8011b5c:	08011c75 	.word	0x08011c75
 8011b60:	08011cf7 	.word	0x08011cf7
 8011b64:	08011cf7 	.word	0x08011cf7
 8011b68:	08011cf7 	.word	0x08011cf7
 8011b6c:	08011cb5 	.word	0x08011cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	68b9      	ldr	r1, [r7, #8]
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 fa5c 	bl	8012034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	699a      	ldr	r2, [r3, #24]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f042 0208 	orr.w	r2, r2, #8
 8011b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	699a      	ldr	r2, [r3, #24]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f022 0204 	bic.w	r2, r2, #4
 8011b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	6999      	ldr	r1, [r3, #24]
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	691a      	ldr	r2, [r3, #16]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	430a      	orrs	r2, r1
 8011bac:	619a      	str	r2, [r3, #24]
      break;
 8011bae:	e0a5      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	68b9      	ldr	r1, [r7, #8]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 facc 	bl	8012154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	699a      	ldr	r2, [r3, #24]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	699a      	ldr	r2, [r3, #24]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6999      	ldr	r1, [r3, #24]
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	691b      	ldr	r3, [r3, #16]
 8011be6:	021a      	lsls	r2, r3, #8
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	430a      	orrs	r2, r1
 8011bee:	619a      	str	r2, [r3, #24]
      break;
 8011bf0:	e084      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	68b9      	ldr	r1, [r7, #8]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f000 fb35 	bl	8012268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	69da      	ldr	r2, [r3, #28]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f042 0208 	orr.w	r2, r2, #8
 8011c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	69da      	ldr	r2, [r3, #28]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f022 0204 	bic.w	r2, r2, #4
 8011c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	69d9      	ldr	r1, [r3, #28]
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	691a      	ldr	r2, [r3, #16]
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	61da      	str	r2, [r3, #28]
      break;
 8011c30:	e064      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68b9      	ldr	r1, [r7, #8]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 fb9d 	bl	8012378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	69da      	ldr	r2, [r3, #28]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	69da      	ldr	r2, [r3, #28]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	69d9      	ldr	r1, [r3, #28]
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	691b      	ldr	r3, [r3, #16]
 8011c68:	021a      	lsls	r2, r3, #8
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	430a      	orrs	r2, r1
 8011c70:	61da      	str	r2, [r3, #28]
      break;
 8011c72:	e043      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68b9      	ldr	r1, [r7, #8]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f000 fbe6 	bl	801244c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f042 0208 	orr.w	r2, r2, #8
 8011c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f022 0204 	bic.w	r2, r2, #4
 8011c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	691a      	ldr	r2, [r3, #16]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	430a      	orrs	r2, r1
 8011cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011cb2:	e023      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68b9      	ldr	r1, [r7, #8]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 fc2a 	bl	8012514 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	691b      	ldr	r3, [r3, #16]
 8011cea:	021a      	lsls	r2, r3, #8
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	430a      	orrs	r2, r1
 8011cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011cf4:	e002      	b.n	8011cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8011cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3718      	adds	r7, #24
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop

08011d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
 8011d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d101      	bne.n	8011d2c <HAL_TIM_ConfigClockSource+0x1c>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	e0dc      	b.n	8011ee6 <HAL_TIM_ConfigClockSource+0x1d6>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2202      	movs	r2, #2
 8011d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	4b6a      	ldr	r3, [pc, #424]	; (8011ef0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011d48:	4013      	ands	r3, r2
 8011d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	68ba      	ldr	r2, [r7, #8]
 8011d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4a64      	ldr	r2, [pc, #400]	; (8011ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	f000 80a9 	beq.w	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011d68:	4a62      	ldr	r2, [pc, #392]	; (8011ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	f200 80ae 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011d70:	4a61      	ldr	r2, [pc, #388]	; (8011ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	f000 80a1 	beq.w	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011d78:	4a5f      	ldr	r2, [pc, #380]	; (8011ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	f200 80a6 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011d80:	4a5e      	ldr	r2, [pc, #376]	; (8011efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	f000 8099 	beq.w	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011d88:	4a5c      	ldr	r2, [pc, #368]	; (8011efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	f200 809e 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011d90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d94:	f000 8091 	beq.w	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011d98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d9c:	f200 8096 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011da4:	f000 8089 	beq.w	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dac:	f200 808e 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011db4:	d03e      	beq.n	8011e34 <HAL_TIM_ConfigClockSource+0x124>
 8011db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011dba:	f200 8087 	bhi.w	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dc2:	f000 8086 	beq.w	8011ed2 <HAL_TIM_ConfigClockSource+0x1c2>
 8011dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dca:	d87f      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011dcc:	2b70      	cmp	r3, #112	; 0x70
 8011dce:	d01a      	beq.n	8011e06 <HAL_TIM_ConfigClockSource+0xf6>
 8011dd0:	2b70      	cmp	r3, #112	; 0x70
 8011dd2:	d87b      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011dd4:	2b60      	cmp	r3, #96	; 0x60
 8011dd6:	d050      	beq.n	8011e7a <HAL_TIM_ConfigClockSource+0x16a>
 8011dd8:	2b60      	cmp	r3, #96	; 0x60
 8011dda:	d877      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ddc:	2b50      	cmp	r3, #80	; 0x50
 8011dde:	d03c      	beq.n	8011e5a <HAL_TIM_ConfigClockSource+0x14a>
 8011de0:	2b50      	cmp	r3, #80	; 0x50
 8011de2:	d873      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011de4:	2b40      	cmp	r3, #64	; 0x40
 8011de6:	d058      	beq.n	8011e9a <HAL_TIM_ConfigClockSource+0x18a>
 8011de8:	2b40      	cmp	r3, #64	; 0x40
 8011dea:	d86f      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011dec:	2b30      	cmp	r3, #48	; 0x30
 8011dee:	d064      	beq.n	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011df0:	2b30      	cmp	r3, #48	; 0x30
 8011df2:	d86b      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011df4:	2b20      	cmp	r3, #32
 8011df6:	d060      	beq.n	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011df8:	2b20      	cmp	r3, #32
 8011dfa:	d867      	bhi.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d05c      	beq.n	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011e00:	2b10      	cmp	r3, #16
 8011e02:	d05a      	beq.n	8011eba <HAL_TIM_ConfigClockSource+0x1aa>
 8011e04:	e062      	b.n	8011ecc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011e16:	f000 fc61 	bl	80126dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	609a      	str	r2, [r3, #8]
      break;
 8011e32:	e04f      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011e44:	f000 fc4a 	bl	80126dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	689a      	ldr	r2, [r3, #8]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011e56:	609a      	str	r2, [r3, #8]
      break;
 8011e58:	e03c      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e66:	461a      	mov	r2, r3
 8011e68:	f000 fbba 	bl	80125e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2150      	movs	r1, #80	; 0x50
 8011e72:	4618      	mov	r0, r3
 8011e74:	f000 fc14 	bl	80126a0 <TIM_ITRx_SetConfig>
      break;
 8011e78:	e02c      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011e86:	461a      	mov	r2, r3
 8011e88:	f000 fbd9 	bl	801263e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2160      	movs	r1, #96	; 0x60
 8011e92:	4618      	mov	r0, r3
 8011e94:	f000 fc04 	bl	80126a0 <TIM_ITRx_SetConfig>
      break;
 8011e98:	e01c      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	f000 fb9a 	bl	80125e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	2140      	movs	r1, #64	; 0x40
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f000 fbf4 	bl	80126a0 <TIM_ITRx_SetConfig>
      break;
 8011eb8:	e00c      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	4610      	mov	r0, r2
 8011ec6:	f000 fbeb 	bl	80126a0 <TIM_ITRx_SetConfig>
      break;
 8011eca:	e003      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	73fb      	strb	r3, [r7, #15]
      break;
 8011ed0:	e000      	b.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3710      	adds	r7, #16
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	ffceff88 	.word	0xffceff88
 8011ef4:	00100040 	.word	0x00100040
 8011ef8:	00100030 	.word	0x00100030
 8011efc:	00100020 	.word	0x00100020

08011f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b085      	sub	sp, #20
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	4a40      	ldr	r2, [pc, #256]	; (8012014 <TIM_Base_SetConfig+0x114>)
 8011f14:	4293      	cmp	r3, r2
 8011f16:	d013      	beq.n	8011f40 <TIM_Base_SetConfig+0x40>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f1e:	d00f      	beq.n	8011f40 <TIM_Base_SetConfig+0x40>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	4a3d      	ldr	r2, [pc, #244]	; (8012018 <TIM_Base_SetConfig+0x118>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d00b      	beq.n	8011f40 <TIM_Base_SetConfig+0x40>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	4a3c      	ldr	r2, [pc, #240]	; (801201c <TIM_Base_SetConfig+0x11c>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d007      	beq.n	8011f40 <TIM_Base_SetConfig+0x40>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	4a3b      	ldr	r2, [pc, #236]	; (8012020 <TIM_Base_SetConfig+0x120>)
 8011f34:	4293      	cmp	r3, r2
 8011f36:	d003      	beq.n	8011f40 <TIM_Base_SetConfig+0x40>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	4a3a      	ldr	r2, [pc, #232]	; (8012024 <TIM_Base_SetConfig+0x124>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d108      	bne.n	8011f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4a2f      	ldr	r2, [pc, #188]	; (8012014 <TIM_Base_SetConfig+0x114>)
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d01f      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f60:	d01b      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4a2c      	ldr	r2, [pc, #176]	; (8012018 <TIM_Base_SetConfig+0x118>)
 8011f66:	4293      	cmp	r3, r2
 8011f68:	d017      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4a2b      	ldr	r2, [pc, #172]	; (801201c <TIM_Base_SetConfig+0x11c>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d013      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4a2a      	ldr	r2, [pc, #168]	; (8012020 <TIM_Base_SetConfig+0x120>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d00f      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4a29      	ldr	r2, [pc, #164]	; (8012024 <TIM_Base_SetConfig+0x124>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d00b      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4a28      	ldr	r2, [pc, #160]	; (8012028 <TIM_Base_SetConfig+0x128>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d007      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	4a27      	ldr	r2, [pc, #156]	; (801202c <TIM_Base_SetConfig+0x12c>)
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d003      	beq.n	8011f9a <TIM_Base_SetConfig+0x9a>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4a26      	ldr	r2, [pc, #152]	; (8012030 <TIM_Base_SetConfig+0x130>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d108      	bne.n	8011fac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	4313      	orrs	r3, r2
 8011faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	695b      	ldr	r3, [r3, #20]
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	689a      	ldr	r2, [r3, #8]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	4a10      	ldr	r2, [pc, #64]	; (8012014 <TIM_Base_SetConfig+0x114>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d00f      	beq.n	8011ff8 <TIM_Base_SetConfig+0xf8>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4a12      	ldr	r2, [pc, #72]	; (8012024 <TIM_Base_SetConfig+0x124>)
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d00b      	beq.n	8011ff8 <TIM_Base_SetConfig+0xf8>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	4a11      	ldr	r2, [pc, #68]	; (8012028 <TIM_Base_SetConfig+0x128>)
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	d007      	beq.n	8011ff8 <TIM_Base_SetConfig+0xf8>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4a10      	ldr	r2, [pc, #64]	; (801202c <TIM_Base_SetConfig+0x12c>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d003      	beq.n	8011ff8 <TIM_Base_SetConfig+0xf8>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	4a0f      	ldr	r2, [pc, #60]	; (8012030 <TIM_Base_SetConfig+0x130>)
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d103      	bne.n	8012000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	691a      	ldr	r2, [r3, #16]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	615a      	str	r2, [r3, #20]
}
 8012006:	bf00      	nop
 8012008:	3714      	adds	r7, #20
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	40010000 	.word	0x40010000
 8012018:	40000400 	.word	0x40000400
 801201c:	40000800 	.word	0x40000800
 8012020:	40000c00 	.word	0x40000c00
 8012024:	40010400 	.word	0x40010400
 8012028:	40014000 	.word	0x40014000
 801202c:	40014400 	.word	0x40014400
 8012030:	40014800 	.word	0x40014800

08012034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012034:	b480      	push	{r7}
 8012036:	b087      	sub	sp, #28
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a1b      	ldr	r3, [r3, #32]
 8012042:	f023 0201 	bic.w	r2, r3, #1
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6a1b      	ldr	r3, [r3, #32]
 801204e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	699b      	ldr	r3, [r3, #24]
 801205a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801205c:	68fa      	ldr	r2, [r7, #12]
 801205e:	4b37      	ldr	r3, [pc, #220]	; (801213c <TIM_OC1_SetConfig+0x108>)
 8012060:	4013      	ands	r3, r2
 8012062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f023 0303 	bic.w	r3, r3, #3
 801206a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	68fa      	ldr	r2, [r7, #12]
 8012072:	4313      	orrs	r3, r2
 8012074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f023 0302 	bic.w	r3, r3, #2
 801207c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	689b      	ldr	r3, [r3, #8]
 8012082:	697a      	ldr	r2, [r7, #20]
 8012084:	4313      	orrs	r3, r2
 8012086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	4a2d      	ldr	r2, [pc, #180]	; (8012140 <TIM_OC1_SetConfig+0x10c>)
 801208c:	4293      	cmp	r3, r2
 801208e:	d00f      	beq.n	80120b0 <TIM_OC1_SetConfig+0x7c>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4a2c      	ldr	r2, [pc, #176]	; (8012144 <TIM_OC1_SetConfig+0x110>)
 8012094:	4293      	cmp	r3, r2
 8012096:	d00b      	beq.n	80120b0 <TIM_OC1_SetConfig+0x7c>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4a2b      	ldr	r2, [pc, #172]	; (8012148 <TIM_OC1_SetConfig+0x114>)
 801209c:	4293      	cmp	r3, r2
 801209e:	d007      	beq.n	80120b0 <TIM_OC1_SetConfig+0x7c>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4a2a      	ldr	r2, [pc, #168]	; (801214c <TIM_OC1_SetConfig+0x118>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d003      	beq.n	80120b0 <TIM_OC1_SetConfig+0x7c>
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	4a29      	ldr	r2, [pc, #164]	; (8012150 <TIM_OC1_SetConfig+0x11c>)
 80120ac:	4293      	cmp	r3, r2
 80120ae:	d10c      	bne.n	80120ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	f023 0308 	bic.w	r3, r3, #8
 80120b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	697a      	ldr	r2, [r7, #20]
 80120be:	4313      	orrs	r3, r2
 80120c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	f023 0304 	bic.w	r3, r3, #4
 80120c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4a1c      	ldr	r2, [pc, #112]	; (8012140 <TIM_OC1_SetConfig+0x10c>)
 80120ce:	4293      	cmp	r3, r2
 80120d0:	d00f      	beq.n	80120f2 <TIM_OC1_SetConfig+0xbe>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4a1b      	ldr	r2, [pc, #108]	; (8012144 <TIM_OC1_SetConfig+0x110>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d00b      	beq.n	80120f2 <TIM_OC1_SetConfig+0xbe>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	4a1a      	ldr	r2, [pc, #104]	; (8012148 <TIM_OC1_SetConfig+0x114>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	d007      	beq.n	80120f2 <TIM_OC1_SetConfig+0xbe>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	4a19      	ldr	r2, [pc, #100]	; (801214c <TIM_OC1_SetConfig+0x118>)
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d003      	beq.n	80120f2 <TIM_OC1_SetConfig+0xbe>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4a18      	ldr	r2, [pc, #96]	; (8012150 <TIM_OC1_SetConfig+0x11c>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d111      	bne.n	8012116 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	695b      	ldr	r3, [r3, #20]
 8012106:	693a      	ldr	r2, [r7, #16]
 8012108:	4313      	orrs	r3, r2
 801210a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	699b      	ldr	r3, [r3, #24]
 8012110:	693a      	ldr	r2, [r7, #16]
 8012112:	4313      	orrs	r3, r2
 8012114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	693a      	ldr	r2, [r7, #16]
 801211a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	68fa      	ldr	r2, [r7, #12]
 8012120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	685a      	ldr	r2, [r3, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	697a      	ldr	r2, [r7, #20]
 801212e:	621a      	str	r2, [r3, #32]
}
 8012130:	bf00      	nop
 8012132:	371c      	adds	r7, #28
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr
 801213c:	fffeff8f 	.word	0xfffeff8f
 8012140:	40010000 	.word	0x40010000
 8012144:	40010400 	.word	0x40010400
 8012148:	40014000 	.word	0x40014000
 801214c:	40014400 	.word	0x40014400
 8012150:	40014800 	.word	0x40014800

08012154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012154:	b480      	push	{r7}
 8012156:	b087      	sub	sp, #28
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6a1b      	ldr	r3, [r3, #32]
 8012162:	f023 0210 	bic.w	r2, r3, #16
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6a1b      	ldr	r3, [r3, #32]
 801216e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	699b      	ldr	r3, [r3, #24]
 801217a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801217c:	68fa      	ldr	r2, [r7, #12]
 801217e:	4b34      	ldr	r3, [pc, #208]	; (8012250 <TIM_OC2_SetConfig+0xfc>)
 8012180:	4013      	ands	r3, r2
 8012182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801218a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	021b      	lsls	r3, r3, #8
 8012192:	68fa      	ldr	r2, [r7, #12]
 8012194:	4313      	orrs	r3, r2
 8012196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	f023 0320 	bic.w	r3, r3, #32
 801219e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	011b      	lsls	r3, r3, #4
 80121a6:	697a      	ldr	r2, [r7, #20]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	4a29      	ldr	r2, [pc, #164]	; (8012254 <TIM_OC2_SetConfig+0x100>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d003      	beq.n	80121bc <TIM_OC2_SetConfig+0x68>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	4a28      	ldr	r2, [pc, #160]	; (8012258 <TIM_OC2_SetConfig+0x104>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d10d      	bne.n	80121d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	011b      	lsls	r3, r3, #4
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	4313      	orrs	r3, r2
 80121ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	4a1e      	ldr	r2, [pc, #120]	; (8012254 <TIM_OC2_SetConfig+0x100>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d00f      	beq.n	8012200 <TIM_OC2_SetConfig+0xac>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4a1d      	ldr	r2, [pc, #116]	; (8012258 <TIM_OC2_SetConfig+0x104>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d00b      	beq.n	8012200 <TIM_OC2_SetConfig+0xac>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	4a1c      	ldr	r2, [pc, #112]	; (801225c <TIM_OC2_SetConfig+0x108>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d007      	beq.n	8012200 <TIM_OC2_SetConfig+0xac>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	4a1b      	ldr	r2, [pc, #108]	; (8012260 <TIM_OC2_SetConfig+0x10c>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d003      	beq.n	8012200 <TIM_OC2_SetConfig+0xac>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	4a1a      	ldr	r2, [pc, #104]	; (8012264 <TIM_OC2_SetConfig+0x110>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d113      	bne.n	8012228 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801220e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	693a      	ldr	r2, [r7, #16]
 8012218:	4313      	orrs	r3, r2
 801221a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	693a      	ldr	r2, [r7, #16]
 8012224:	4313      	orrs	r3, r2
 8012226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	693a      	ldr	r2, [r7, #16]
 801222c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	685a      	ldr	r2, [r3, #4]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	697a      	ldr	r2, [r7, #20]
 8012240:	621a      	str	r2, [r3, #32]
}
 8012242:	bf00      	nop
 8012244:	371c      	adds	r7, #28
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	feff8fff 	.word	0xfeff8fff
 8012254:	40010000 	.word	0x40010000
 8012258:	40010400 	.word	0x40010400
 801225c:	40014000 	.word	0x40014000
 8012260:	40014400 	.word	0x40014400
 8012264:	40014800 	.word	0x40014800

08012268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012268:	b480      	push	{r7}
 801226a:	b087      	sub	sp, #28
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6a1b      	ldr	r3, [r3, #32]
 8012276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a1b      	ldr	r3, [r3, #32]
 8012282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	69db      	ldr	r3, [r3, #28]
 801228e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	4b33      	ldr	r3, [pc, #204]	; (8012360 <TIM_OC3_SetConfig+0xf8>)
 8012294:	4013      	ands	r3, r2
 8012296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f023 0303 	bic.w	r3, r3, #3
 801229e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80122b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	689b      	ldr	r3, [r3, #8]
 80122b6:	021b      	lsls	r3, r3, #8
 80122b8:	697a      	ldr	r2, [r7, #20]
 80122ba:	4313      	orrs	r3, r2
 80122bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a28      	ldr	r2, [pc, #160]	; (8012364 <TIM_OC3_SetConfig+0xfc>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d003      	beq.n	80122ce <TIM_OC3_SetConfig+0x66>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a27      	ldr	r2, [pc, #156]	; (8012368 <TIM_OC3_SetConfig+0x100>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d10d      	bne.n	80122ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	021b      	lsls	r3, r3, #8
 80122dc:	697a      	ldr	r2, [r7, #20]
 80122de:	4313      	orrs	r3, r2
 80122e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80122e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	4a1d      	ldr	r2, [pc, #116]	; (8012364 <TIM_OC3_SetConfig+0xfc>)
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d00f      	beq.n	8012312 <TIM_OC3_SetConfig+0xaa>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4a1c      	ldr	r2, [pc, #112]	; (8012368 <TIM_OC3_SetConfig+0x100>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d00b      	beq.n	8012312 <TIM_OC3_SetConfig+0xaa>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4a1b      	ldr	r2, [pc, #108]	; (801236c <TIM_OC3_SetConfig+0x104>)
 80122fe:	4293      	cmp	r3, r2
 8012300:	d007      	beq.n	8012312 <TIM_OC3_SetConfig+0xaa>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4a1a      	ldr	r2, [pc, #104]	; (8012370 <TIM_OC3_SetConfig+0x108>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d003      	beq.n	8012312 <TIM_OC3_SetConfig+0xaa>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	4a19      	ldr	r2, [pc, #100]	; (8012374 <TIM_OC3_SetConfig+0x10c>)
 801230e:	4293      	cmp	r3, r2
 8012310:	d113      	bne.n	801233a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	695b      	ldr	r3, [r3, #20]
 8012326:	011b      	lsls	r3, r3, #4
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	4313      	orrs	r3, r2
 801232c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	699b      	ldr	r3, [r3, #24]
 8012332:	011b      	lsls	r3, r3, #4
 8012334:	693a      	ldr	r2, [r7, #16]
 8012336:	4313      	orrs	r3, r2
 8012338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	693a      	ldr	r2, [r7, #16]
 801233e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	68fa      	ldr	r2, [r7, #12]
 8012344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	685a      	ldr	r2, [r3, #4]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	697a      	ldr	r2, [r7, #20]
 8012352:	621a      	str	r2, [r3, #32]
}
 8012354:	bf00      	nop
 8012356:	371c      	adds	r7, #28
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr
 8012360:	fffeff8f 	.word	0xfffeff8f
 8012364:	40010000 	.word	0x40010000
 8012368:	40010400 	.word	0x40010400
 801236c:	40014000 	.word	0x40014000
 8012370:	40014400 	.word	0x40014400
 8012374:	40014800 	.word	0x40014800

08012378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012378:	b480      	push	{r7}
 801237a:	b087      	sub	sp, #28
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a1b      	ldr	r3, [r3, #32]
 8012386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a1b      	ldr	r3, [r3, #32]
 8012392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	4b24      	ldr	r3, [pc, #144]	; (8012434 <TIM_OC4_SetConfig+0xbc>)
 80123a4:	4013      	ands	r3, r2
 80123a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	021b      	lsls	r3, r3, #8
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	4313      	orrs	r3, r2
 80123ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80123bc:	693b      	ldr	r3, [r7, #16]
 80123be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80123c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	689b      	ldr	r3, [r3, #8]
 80123c8:	031b      	lsls	r3, r3, #12
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	4313      	orrs	r3, r2
 80123ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4a19      	ldr	r2, [pc, #100]	; (8012438 <TIM_OC4_SetConfig+0xc0>)
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d00f      	beq.n	80123f8 <TIM_OC4_SetConfig+0x80>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4a18      	ldr	r2, [pc, #96]	; (801243c <TIM_OC4_SetConfig+0xc4>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d00b      	beq.n	80123f8 <TIM_OC4_SetConfig+0x80>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4a17      	ldr	r2, [pc, #92]	; (8012440 <TIM_OC4_SetConfig+0xc8>)
 80123e4:	4293      	cmp	r3, r2
 80123e6:	d007      	beq.n	80123f8 <TIM_OC4_SetConfig+0x80>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	4a16      	ldr	r2, [pc, #88]	; (8012444 <TIM_OC4_SetConfig+0xcc>)
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d003      	beq.n	80123f8 <TIM_OC4_SetConfig+0x80>
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4a15      	ldr	r2, [pc, #84]	; (8012448 <TIM_OC4_SetConfig+0xd0>)
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d109      	bne.n	801240c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80123fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	695b      	ldr	r3, [r3, #20]
 8012404:	019b      	lsls	r3, r3, #6
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	4313      	orrs	r3, r2
 801240a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	685a      	ldr	r2, [r3, #4]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	693a      	ldr	r2, [r7, #16]
 8012424:	621a      	str	r2, [r3, #32]
}
 8012426:	bf00      	nop
 8012428:	371c      	adds	r7, #28
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	feff8fff 	.word	0xfeff8fff
 8012438:	40010000 	.word	0x40010000
 801243c:	40010400 	.word	0x40010400
 8012440:	40014000 	.word	0x40014000
 8012444:	40014400 	.word	0x40014400
 8012448:	40014800 	.word	0x40014800

0801244c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801244c:	b480      	push	{r7}
 801244e:	b087      	sub	sp, #28
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a1b      	ldr	r3, [r3, #32]
 801245a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6a1b      	ldr	r3, [r3, #32]
 8012466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	4b21      	ldr	r3, [pc, #132]	; (80124fc <TIM_OC5_SetConfig+0xb0>)
 8012478:	4013      	ands	r3, r2
 801247a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	4313      	orrs	r3, r2
 8012484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801248c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	041b      	lsls	r3, r3, #16
 8012494:	693a      	ldr	r2, [r7, #16]
 8012496:	4313      	orrs	r3, r2
 8012498:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4a18      	ldr	r2, [pc, #96]	; (8012500 <TIM_OC5_SetConfig+0xb4>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d00f      	beq.n	80124c2 <TIM_OC5_SetConfig+0x76>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	4a17      	ldr	r2, [pc, #92]	; (8012504 <TIM_OC5_SetConfig+0xb8>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d00b      	beq.n	80124c2 <TIM_OC5_SetConfig+0x76>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a16      	ldr	r2, [pc, #88]	; (8012508 <TIM_OC5_SetConfig+0xbc>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d007      	beq.n	80124c2 <TIM_OC5_SetConfig+0x76>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a15      	ldr	r2, [pc, #84]	; (801250c <TIM_OC5_SetConfig+0xc0>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d003      	beq.n	80124c2 <TIM_OC5_SetConfig+0x76>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a14      	ldr	r2, [pc, #80]	; (8012510 <TIM_OC5_SetConfig+0xc4>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d109      	bne.n	80124d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80124c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	695b      	ldr	r3, [r3, #20]
 80124ce:	021b      	lsls	r3, r3, #8
 80124d0:	697a      	ldr	r2, [r7, #20]
 80124d2:	4313      	orrs	r3, r2
 80124d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	697a      	ldr	r2, [r7, #20]
 80124da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	693a      	ldr	r2, [r7, #16]
 80124ee:	621a      	str	r2, [r3, #32]
}
 80124f0:	bf00      	nop
 80124f2:	371c      	adds	r7, #28
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	fffeff8f 	.word	0xfffeff8f
 8012500:	40010000 	.word	0x40010000
 8012504:	40010400 	.word	0x40010400
 8012508:	40014000 	.word	0x40014000
 801250c:	40014400 	.word	0x40014400
 8012510:	40014800 	.word	0x40014800

08012514 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012514:	b480      	push	{r7}
 8012516:	b087      	sub	sp, #28
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6a1b      	ldr	r3, [r3, #32]
 8012522:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6a1b      	ldr	r3, [r3, #32]
 801252e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801253c:	68fa      	ldr	r2, [r7, #12]
 801253e:	4b22      	ldr	r3, [pc, #136]	; (80125c8 <TIM_OC6_SetConfig+0xb4>)
 8012540:	4013      	ands	r3, r2
 8012542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	021b      	lsls	r3, r3, #8
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	4313      	orrs	r3, r2
 801254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	051b      	lsls	r3, r3, #20
 801255e:	693a      	ldr	r2, [r7, #16]
 8012560:	4313      	orrs	r3, r2
 8012562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4a19      	ldr	r2, [pc, #100]	; (80125cc <TIM_OC6_SetConfig+0xb8>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d00f      	beq.n	801258c <TIM_OC6_SetConfig+0x78>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4a18      	ldr	r2, [pc, #96]	; (80125d0 <TIM_OC6_SetConfig+0xbc>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d00b      	beq.n	801258c <TIM_OC6_SetConfig+0x78>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4a17      	ldr	r2, [pc, #92]	; (80125d4 <TIM_OC6_SetConfig+0xc0>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d007      	beq.n	801258c <TIM_OC6_SetConfig+0x78>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4a16      	ldr	r2, [pc, #88]	; (80125d8 <TIM_OC6_SetConfig+0xc4>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d003      	beq.n	801258c <TIM_OC6_SetConfig+0x78>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4a15      	ldr	r2, [pc, #84]	; (80125dc <TIM_OC6_SetConfig+0xc8>)
 8012588:	4293      	cmp	r3, r2
 801258a:	d109      	bne.n	80125a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	695b      	ldr	r3, [r3, #20]
 8012598:	029b      	lsls	r3, r3, #10
 801259a:	697a      	ldr	r2, [r7, #20]
 801259c:	4313      	orrs	r3, r2
 801259e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	697a      	ldr	r2, [r7, #20]
 80125a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	685a      	ldr	r2, [r3, #4]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	693a      	ldr	r2, [r7, #16]
 80125b8:	621a      	str	r2, [r3, #32]
}
 80125ba:	bf00      	nop
 80125bc:	371c      	adds	r7, #28
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	feff8fff 	.word	0xfeff8fff
 80125cc:	40010000 	.word	0x40010000
 80125d0:	40010400 	.word	0x40010400
 80125d4:	40014000 	.word	0x40014000
 80125d8:	40014400 	.word	0x40014400
 80125dc:	40014800 	.word	0x40014800

080125e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b087      	sub	sp, #28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	6a1b      	ldr	r3, [r3, #32]
 80125f6:	f023 0201 	bic.w	r2, r3, #1
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	699b      	ldr	r3, [r3, #24]
 8012602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801260a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	011b      	lsls	r3, r3, #4
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	4313      	orrs	r3, r2
 8012614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f023 030a 	bic.w	r3, r3, #10
 801261c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801261e:	697a      	ldr	r2, [r7, #20]
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	4313      	orrs	r3, r2
 8012624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	693a      	ldr	r2, [r7, #16]
 801262a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	621a      	str	r2, [r3, #32]
}
 8012632:	bf00      	nop
 8012634:	371c      	adds	r7, #28
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr

0801263e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801263e:	b480      	push	{r7}
 8012640:	b087      	sub	sp, #28
 8012642:	af00      	add	r7, sp, #0
 8012644:	60f8      	str	r0, [r7, #12]
 8012646:	60b9      	str	r1, [r7, #8]
 8012648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	6a1b      	ldr	r3, [r3, #32]
 801264e:	f023 0210 	bic.w	r2, r3, #16
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	6a1b      	ldr	r3, [r3, #32]
 8012660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	031b      	lsls	r3, r3, #12
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	4313      	orrs	r3, r2
 8012672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012674:	693b      	ldr	r3, [r7, #16]
 8012676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801267a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	011b      	lsls	r3, r3, #4
 8012680:	693a      	ldr	r2, [r7, #16]
 8012682:	4313      	orrs	r3, r2
 8012684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	697a      	ldr	r2, [r7, #20]
 801268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	693a      	ldr	r2, [r7, #16]
 8012690:	621a      	str	r2, [r3, #32]
}
 8012692:	bf00      	nop
 8012694:	371c      	adds	r7, #28
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr
	...

080126a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	689b      	ldr	r3, [r3, #8]
 80126ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	4b09      	ldr	r3, [pc, #36]	; (80126d8 <TIM_ITRx_SetConfig+0x38>)
 80126b4:	4013      	ands	r3, r2
 80126b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	4313      	orrs	r3, r2
 80126be:	f043 0307 	orr.w	r3, r3, #7
 80126c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	609a      	str	r2, [r3, #8]
}
 80126ca:	bf00      	nop
 80126cc:	3714      	adds	r7, #20
 80126ce:	46bd      	mov	sp, r7
 80126d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	ffcfff8f 	.word	0xffcfff8f

080126dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80126dc:	b480      	push	{r7}
 80126de:	b087      	sub	sp, #28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
 80126e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80126f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	021a      	lsls	r2, r3, #8
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	431a      	orrs	r2, r3
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	4313      	orrs	r3, r2
 8012704:	697a      	ldr	r2, [r7, #20]
 8012706:	4313      	orrs	r3, r2
 8012708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	697a      	ldr	r2, [r7, #20]
 801270e:	609a      	str	r2, [r3, #8]
}
 8012710:	bf00      	nop
 8012712:	371c      	adds	r7, #28
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801272c:	2b01      	cmp	r3, #1
 801272e:	d101      	bne.n	8012734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012730:	2302      	movs	r3, #2
 8012732:	e06d      	b.n	8012810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2201      	movs	r2, #1
 8012738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2202      	movs	r2, #2
 8012740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	689b      	ldr	r3, [r3, #8]
 8012752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	4a30      	ldr	r2, [pc, #192]	; (801281c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d004      	beq.n	8012768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	4a2f      	ldr	r2, [pc, #188]	; (8012820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012764:	4293      	cmp	r3, r2
 8012766:	d108      	bne.n	801277a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801276e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	4313      	orrs	r3, r2
 8012778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	68fa      	ldr	r2, [r7, #12]
 8012788:	4313      	orrs	r3, r2
 801278a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a20      	ldr	r2, [pc, #128]	; (801281c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d022      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127a6:	d01d      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a1d      	ldr	r2, [pc, #116]	; (8012824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d018      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4a1c      	ldr	r2, [pc, #112]	; (8012828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d013      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a1a      	ldr	r2, [pc, #104]	; (801282c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d00e      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a15      	ldr	r2, [pc, #84]	; (8012820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d009      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4a16      	ldr	r2, [pc, #88]	; (8012830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d004      	beq.n	80127e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4a15      	ldr	r2, [pc, #84]	; (8012834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d10c      	bne.n	80127fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	689b      	ldr	r3, [r3, #8]
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2201      	movs	r2, #1
 8012802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2200      	movs	r2, #0
 801280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801280e:	2300      	movs	r3, #0
}
 8012810:	4618      	mov	r0, r3
 8012812:	3714      	adds	r7, #20
 8012814:	46bd      	mov	sp, r7
 8012816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281a:	4770      	bx	lr
 801281c:	40010000 	.word	0x40010000
 8012820:	40010400 	.word	0x40010400
 8012824:	40000400 	.word	0x40000400
 8012828:	40000800 	.word	0x40000800
 801282c:	40000c00 	.word	0x40000c00
 8012830:	40001800 	.word	0x40001800
 8012834:	40014000 	.word	0x40014000

08012838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012842:	2300      	movs	r3, #0
 8012844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801284c:	2b01      	cmp	r3, #1
 801284e:	d101      	bne.n	8012854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012850:	2302      	movs	r3, #2
 8012852:	e065      	b.n	8012920 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2201      	movs	r2, #1
 8012858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	68db      	ldr	r3, [r3, #12]
 8012866:	4313      	orrs	r3, r2
 8012868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	689b      	ldr	r3, [r3, #8]
 8012874:	4313      	orrs	r3, r2
 8012876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	4313      	orrs	r3, r2
 8012884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4313      	orrs	r3, r2
 8012892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	691b      	ldr	r3, [r3, #16]
 801289e:	4313      	orrs	r3, r2
 80128a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	695b      	ldr	r3, [r3, #20]
 80128ac:	4313      	orrs	r3, r2
 80128ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ba:	4313      	orrs	r3, r2
 80128bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	699b      	ldr	r3, [r3, #24]
 80128c8:	041b      	lsls	r3, r3, #16
 80128ca:	4313      	orrs	r3, r2
 80128cc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	4a16      	ldr	r2, [pc, #88]	; (801292c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d004      	beq.n	80128e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4a14      	ldr	r2, [pc, #80]	; (8012930 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d115      	bne.n	801290e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	051b      	lsls	r3, r3, #20
 80128ee:	4313      	orrs	r3, r2
 80128f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	69db      	ldr	r3, [r3, #28]
 80128fc:	4313      	orrs	r3, r2
 80128fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	6a1b      	ldr	r3, [r3, #32]
 801290a:	4313      	orrs	r3, r2
 801290c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801291e:	2300      	movs	r3, #0
}
 8012920:	4618      	mov	r0, r3
 8012922:	3714      	adds	r7, #20
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	40010000 	.word	0x40010000
 8012930:	40010400 	.word	0x40010400

08012934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012942:	2301      	movs	r3, #1
 8012944:	e042      	b.n	80129cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801294c:	2b00      	cmp	r3, #0
 801294e:	d106      	bne.n	801295e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7f1 fb93 	bl	8004084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2224      	movs	r2, #36	; 0x24
 8012962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f022 0201 	bic.w	r2, r2, #1
 8012974:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 f82c 	bl	80129d4 <UART_SetConfig>
 801297c:	4603      	mov	r3, r0
 801297e:	2b01      	cmp	r3, #1
 8012980:	d101      	bne.n	8012986 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012982:	2301      	movs	r3, #1
 8012984:	e022      	b.n	80129cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801298a:	2b00      	cmp	r3, #0
 801298c:	d002      	beq.n	8012994 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 fd88 	bl	80134a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	685a      	ldr	r2, [r3, #4]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80129a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	689a      	ldr	r2, [r3, #8]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80129b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	681a      	ldr	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f042 0201 	orr.w	r2, r2, #1
 80129c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f000 fe0f 	bl	80135e8 <UART_CheckIdleState>
 80129ca:	4603      	mov	r3, r0
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80129d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80129d8:	b092      	sub	sp, #72	; 0x48
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80129de:	2300      	movs	r3, #0
 80129e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	689a      	ldr	r2, [r3, #8]
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	691b      	ldr	r3, [r3, #16]
 80129ec:	431a      	orrs	r2, r3
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	695b      	ldr	r3, [r3, #20]
 80129f2:	431a      	orrs	r2, r3
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	69db      	ldr	r3, [r3, #28]
 80129f8:	4313      	orrs	r3, r2
 80129fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	4bbe      	ldr	r3, [pc, #760]	; (8012cfc <UART_SetConfig+0x328>)
 8012a04:	4013      	ands	r3, r2
 8012a06:	697a      	ldr	r2, [r7, #20]
 8012a08:	6812      	ldr	r2, [r2, #0]
 8012a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a0c:	430b      	orrs	r3, r1
 8012a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	68da      	ldr	r2, [r3, #12]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	430a      	orrs	r2, r1
 8012a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	699b      	ldr	r3, [r3, #24]
 8012a2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4ab3      	ldr	r2, [pc, #716]	; (8012d00 <UART_SetConfig+0x32c>)
 8012a32:	4293      	cmp	r3, r2
 8012a34:	d004      	beq.n	8012a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	6a1b      	ldr	r3, [r3, #32]
 8012a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	689a      	ldr	r2, [r3, #8]
 8012a46:	4baf      	ldr	r3, [pc, #700]	; (8012d04 <UART_SetConfig+0x330>)
 8012a48:	4013      	ands	r3, r2
 8012a4a:	697a      	ldr	r2, [r7, #20]
 8012a4c:	6812      	ldr	r2, [r2, #0]
 8012a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012a50:	430b      	orrs	r3, r1
 8012a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a5a:	f023 010f 	bic.w	r1, r3, #15
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	430a      	orrs	r2, r1
 8012a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4aa6      	ldr	r2, [pc, #664]	; (8012d08 <UART_SetConfig+0x334>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d177      	bne.n	8012b64 <UART_SetConfig+0x190>
 8012a74:	4ba5      	ldr	r3, [pc, #660]	; (8012d0c <UART_SetConfig+0x338>)
 8012a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a7c:	2b28      	cmp	r3, #40	; 0x28
 8012a7e:	d86d      	bhi.n	8012b5c <UART_SetConfig+0x188>
 8012a80:	a201      	add	r2, pc, #4	; (adr r2, 8012a88 <UART_SetConfig+0xb4>)
 8012a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a86:	bf00      	nop
 8012a88:	08012b2d 	.word	0x08012b2d
 8012a8c:	08012b5d 	.word	0x08012b5d
 8012a90:	08012b5d 	.word	0x08012b5d
 8012a94:	08012b5d 	.word	0x08012b5d
 8012a98:	08012b5d 	.word	0x08012b5d
 8012a9c:	08012b5d 	.word	0x08012b5d
 8012aa0:	08012b5d 	.word	0x08012b5d
 8012aa4:	08012b5d 	.word	0x08012b5d
 8012aa8:	08012b35 	.word	0x08012b35
 8012aac:	08012b5d 	.word	0x08012b5d
 8012ab0:	08012b5d 	.word	0x08012b5d
 8012ab4:	08012b5d 	.word	0x08012b5d
 8012ab8:	08012b5d 	.word	0x08012b5d
 8012abc:	08012b5d 	.word	0x08012b5d
 8012ac0:	08012b5d 	.word	0x08012b5d
 8012ac4:	08012b5d 	.word	0x08012b5d
 8012ac8:	08012b3d 	.word	0x08012b3d
 8012acc:	08012b5d 	.word	0x08012b5d
 8012ad0:	08012b5d 	.word	0x08012b5d
 8012ad4:	08012b5d 	.word	0x08012b5d
 8012ad8:	08012b5d 	.word	0x08012b5d
 8012adc:	08012b5d 	.word	0x08012b5d
 8012ae0:	08012b5d 	.word	0x08012b5d
 8012ae4:	08012b5d 	.word	0x08012b5d
 8012ae8:	08012b45 	.word	0x08012b45
 8012aec:	08012b5d 	.word	0x08012b5d
 8012af0:	08012b5d 	.word	0x08012b5d
 8012af4:	08012b5d 	.word	0x08012b5d
 8012af8:	08012b5d 	.word	0x08012b5d
 8012afc:	08012b5d 	.word	0x08012b5d
 8012b00:	08012b5d 	.word	0x08012b5d
 8012b04:	08012b5d 	.word	0x08012b5d
 8012b08:	08012b4d 	.word	0x08012b4d
 8012b0c:	08012b5d 	.word	0x08012b5d
 8012b10:	08012b5d 	.word	0x08012b5d
 8012b14:	08012b5d 	.word	0x08012b5d
 8012b18:	08012b5d 	.word	0x08012b5d
 8012b1c:	08012b5d 	.word	0x08012b5d
 8012b20:	08012b5d 	.word	0x08012b5d
 8012b24:	08012b5d 	.word	0x08012b5d
 8012b28:	08012b55 	.word	0x08012b55
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b32:	e222      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b34:	2304      	movs	r3, #4
 8012b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b3a:	e21e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b3c:	2308      	movs	r3, #8
 8012b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b42:	e21a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b44:	2310      	movs	r3, #16
 8012b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b4a:	e216      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b4c:	2320      	movs	r3, #32
 8012b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b52:	e212      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b54:	2340      	movs	r3, #64	; 0x40
 8012b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b5a:	e20e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b5c:	2380      	movs	r3, #128	; 0x80
 8012b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b62:	e20a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	4a69      	ldr	r2, [pc, #420]	; (8012d10 <UART_SetConfig+0x33c>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d130      	bne.n	8012bd0 <UART_SetConfig+0x1fc>
 8012b6e:	4b67      	ldr	r3, [pc, #412]	; (8012d0c <UART_SetConfig+0x338>)
 8012b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b72:	f003 0307 	and.w	r3, r3, #7
 8012b76:	2b05      	cmp	r3, #5
 8012b78:	d826      	bhi.n	8012bc8 <UART_SetConfig+0x1f4>
 8012b7a:	a201      	add	r2, pc, #4	; (adr r2, 8012b80 <UART_SetConfig+0x1ac>)
 8012b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b80:	08012b99 	.word	0x08012b99
 8012b84:	08012ba1 	.word	0x08012ba1
 8012b88:	08012ba9 	.word	0x08012ba9
 8012b8c:	08012bb1 	.word	0x08012bb1
 8012b90:	08012bb9 	.word	0x08012bb9
 8012b94:	08012bc1 	.word	0x08012bc1
 8012b98:	2300      	movs	r3, #0
 8012b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b9e:	e1ec      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ba0:	2304      	movs	r3, #4
 8012ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ba6:	e1e8      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ba8:	2308      	movs	r3, #8
 8012baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bae:	e1e4      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012bb0:	2310      	movs	r3, #16
 8012bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bb6:	e1e0      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012bb8:	2320      	movs	r3, #32
 8012bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bbe:	e1dc      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012bc0:	2340      	movs	r3, #64	; 0x40
 8012bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bc6:	e1d8      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012bc8:	2380      	movs	r3, #128	; 0x80
 8012bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bce:	e1d4      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	4a4f      	ldr	r2, [pc, #316]	; (8012d14 <UART_SetConfig+0x340>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d130      	bne.n	8012c3c <UART_SetConfig+0x268>
 8012bda:	4b4c      	ldr	r3, [pc, #304]	; (8012d0c <UART_SetConfig+0x338>)
 8012bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bde:	f003 0307 	and.w	r3, r3, #7
 8012be2:	2b05      	cmp	r3, #5
 8012be4:	d826      	bhi.n	8012c34 <UART_SetConfig+0x260>
 8012be6:	a201      	add	r2, pc, #4	; (adr r2, 8012bec <UART_SetConfig+0x218>)
 8012be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bec:	08012c05 	.word	0x08012c05
 8012bf0:	08012c0d 	.word	0x08012c0d
 8012bf4:	08012c15 	.word	0x08012c15
 8012bf8:	08012c1d 	.word	0x08012c1d
 8012bfc:	08012c25 	.word	0x08012c25
 8012c00:	08012c2d 	.word	0x08012c2d
 8012c04:	2300      	movs	r3, #0
 8012c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c0a:	e1b6      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c0c:	2304      	movs	r3, #4
 8012c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c12:	e1b2      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c14:	2308      	movs	r3, #8
 8012c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c1a:	e1ae      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c1c:	2310      	movs	r3, #16
 8012c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c22:	e1aa      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c24:	2320      	movs	r3, #32
 8012c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c2a:	e1a6      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c2c:	2340      	movs	r3, #64	; 0x40
 8012c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c32:	e1a2      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c34:	2380      	movs	r3, #128	; 0x80
 8012c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c3a:	e19e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a35      	ldr	r2, [pc, #212]	; (8012d18 <UART_SetConfig+0x344>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d130      	bne.n	8012ca8 <UART_SetConfig+0x2d4>
 8012c46:	4b31      	ldr	r3, [pc, #196]	; (8012d0c <UART_SetConfig+0x338>)
 8012c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c4a:	f003 0307 	and.w	r3, r3, #7
 8012c4e:	2b05      	cmp	r3, #5
 8012c50:	d826      	bhi.n	8012ca0 <UART_SetConfig+0x2cc>
 8012c52:	a201      	add	r2, pc, #4	; (adr r2, 8012c58 <UART_SetConfig+0x284>)
 8012c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c58:	08012c71 	.word	0x08012c71
 8012c5c:	08012c79 	.word	0x08012c79
 8012c60:	08012c81 	.word	0x08012c81
 8012c64:	08012c89 	.word	0x08012c89
 8012c68:	08012c91 	.word	0x08012c91
 8012c6c:	08012c99 	.word	0x08012c99
 8012c70:	2300      	movs	r3, #0
 8012c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c76:	e180      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c78:	2304      	movs	r3, #4
 8012c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c7e:	e17c      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c80:	2308      	movs	r3, #8
 8012c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c86:	e178      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c88:	2310      	movs	r3, #16
 8012c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c8e:	e174      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c90:	2320      	movs	r3, #32
 8012c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c96:	e170      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012c98:	2340      	movs	r3, #64	; 0x40
 8012c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c9e:	e16c      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ca0:	2380      	movs	r3, #128	; 0x80
 8012ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ca6:	e168      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4a1b      	ldr	r2, [pc, #108]	; (8012d1c <UART_SetConfig+0x348>)
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	d142      	bne.n	8012d38 <UART_SetConfig+0x364>
 8012cb2:	4b16      	ldr	r3, [pc, #88]	; (8012d0c <UART_SetConfig+0x338>)
 8012cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cb6:	f003 0307 	and.w	r3, r3, #7
 8012cba:	2b05      	cmp	r3, #5
 8012cbc:	d838      	bhi.n	8012d30 <UART_SetConfig+0x35c>
 8012cbe:	a201      	add	r2, pc, #4	; (adr r2, 8012cc4 <UART_SetConfig+0x2f0>)
 8012cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc4:	08012cdd 	.word	0x08012cdd
 8012cc8:	08012ce5 	.word	0x08012ce5
 8012ccc:	08012ced 	.word	0x08012ced
 8012cd0:	08012cf5 	.word	0x08012cf5
 8012cd4:	08012d21 	.word	0x08012d21
 8012cd8:	08012d29 	.word	0x08012d29
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ce2:	e14a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ce4:	2304      	movs	r3, #4
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cea:	e146      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012cec:	2308      	movs	r3, #8
 8012cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cf2:	e142      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012cf4:	2310      	movs	r3, #16
 8012cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cfa:	e13e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012cfc:	cfff69f3 	.word	0xcfff69f3
 8012d00:	58000c00 	.word	0x58000c00
 8012d04:	11fff4ff 	.word	0x11fff4ff
 8012d08:	40011000 	.word	0x40011000
 8012d0c:	58024400 	.word	0x58024400
 8012d10:	40004400 	.word	0x40004400
 8012d14:	40004800 	.word	0x40004800
 8012d18:	40004c00 	.word	0x40004c00
 8012d1c:	40005000 	.word	0x40005000
 8012d20:	2320      	movs	r3, #32
 8012d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d26:	e128      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012d28:	2340      	movs	r3, #64	; 0x40
 8012d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d2e:	e124      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012d30:	2380      	movs	r3, #128	; 0x80
 8012d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d36:	e120      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4acb      	ldr	r2, [pc, #812]	; (801306c <UART_SetConfig+0x698>)
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d176      	bne.n	8012e30 <UART_SetConfig+0x45c>
 8012d42:	4bcb      	ldr	r3, [pc, #812]	; (8013070 <UART_SetConfig+0x69c>)
 8012d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d4a:	2b28      	cmp	r3, #40	; 0x28
 8012d4c:	d86c      	bhi.n	8012e28 <UART_SetConfig+0x454>
 8012d4e:	a201      	add	r2, pc, #4	; (adr r2, 8012d54 <UART_SetConfig+0x380>)
 8012d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d54:	08012df9 	.word	0x08012df9
 8012d58:	08012e29 	.word	0x08012e29
 8012d5c:	08012e29 	.word	0x08012e29
 8012d60:	08012e29 	.word	0x08012e29
 8012d64:	08012e29 	.word	0x08012e29
 8012d68:	08012e29 	.word	0x08012e29
 8012d6c:	08012e29 	.word	0x08012e29
 8012d70:	08012e29 	.word	0x08012e29
 8012d74:	08012e01 	.word	0x08012e01
 8012d78:	08012e29 	.word	0x08012e29
 8012d7c:	08012e29 	.word	0x08012e29
 8012d80:	08012e29 	.word	0x08012e29
 8012d84:	08012e29 	.word	0x08012e29
 8012d88:	08012e29 	.word	0x08012e29
 8012d8c:	08012e29 	.word	0x08012e29
 8012d90:	08012e29 	.word	0x08012e29
 8012d94:	08012e09 	.word	0x08012e09
 8012d98:	08012e29 	.word	0x08012e29
 8012d9c:	08012e29 	.word	0x08012e29
 8012da0:	08012e29 	.word	0x08012e29
 8012da4:	08012e29 	.word	0x08012e29
 8012da8:	08012e29 	.word	0x08012e29
 8012dac:	08012e29 	.word	0x08012e29
 8012db0:	08012e29 	.word	0x08012e29
 8012db4:	08012e11 	.word	0x08012e11
 8012db8:	08012e29 	.word	0x08012e29
 8012dbc:	08012e29 	.word	0x08012e29
 8012dc0:	08012e29 	.word	0x08012e29
 8012dc4:	08012e29 	.word	0x08012e29
 8012dc8:	08012e29 	.word	0x08012e29
 8012dcc:	08012e29 	.word	0x08012e29
 8012dd0:	08012e29 	.word	0x08012e29
 8012dd4:	08012e19 	.word	0x08012e19
 8012dd8:	08012e29 	.word	0x08012e29
 8012ddc:	08012e29 	.word	0x08012e29
 8012de0:	08012e29 	.word	0x08012e29
 8012de4:	08012e29 	.word	0x08012e29
 8012de8:	08012e29 	.word	0x08012e29
 8012dec:	08012e29 	.word	0x08012e29
 8012df0:	08012e29 	.word	0x08012e29
 8012df4:	08012e21 	.word	0x08012e21
 8012df8:	2301      	movs	r3, #1
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dfe:	e0bc      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e00:	2304      	movs	r3, #4
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e06:	e0b8      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e08:	2308      	movs	r3, #8
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0e:	e0b4      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e10:	2310      	movs	r3, #16
 8012e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e16:	e0b0      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e18:	2320      	movs	r3, #32
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1e:	e0ac      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e20:	2340      	movs	r3, #64	; 0x40
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e26:	e0a8      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e28:	2380      	movs	r3, #128	; 0x80
 8012e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e2e:	e0a4      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4a8f      	ldr	r2, [pc, #572]	; (8013074 <UART_SetConfig+0x6a0>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d130      	bne.n	8012e9c <UART_SetConfig+0x4c8>
 8012e3a:	4b8d      	ldr	r3, [pc, #564]	; (8013070 <UART_SetConfig+0x69c>)
 8012e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e3e:	f003 0307 	and.w	r3, r3, #7
 8012e42:	2b05      	cmp	r3, #5
 8012e44:	d826      	bhi.n	8012e94 <UART_SetConfig+0x4c0>
 8012e46:	a201      	add	r2, pc, #4	; (adr r2, 8012e4c <UART_SetConfig+0x478>)
 8012e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e4c:	08012e65 	.word	0x08012e65
 8012e50:	08012e6d 	.word	0x08012e6d
 8012e54:	08012e75 	.word	0x08012e75
 8012e58:	08012e7d 	.word	0x08012e7d
 8012e5c:	08012e85 	.word	0x08012e85
 8012e60:	08012e8d 	.word	0x08012e8d
 8012e64:	2300      	movs	r3, #0
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6a:	e086      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e6c:	2304      	movs	r3, #4
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e72:	e082      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e74:	2308      	movs	r3, #8
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e7a:	e07e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e7c:	2310      	movs	r3, #16
 8012e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e82:	e07a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e84:	2320      	movs	r3, #32
 8012e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e8a:	e076      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e8c:	2340      	movs	r3, #64	; 0x40
 8012e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e92:	e072      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e94:	2380      	movs	r3, #128	; 0x80
 8012e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e9a:	e06e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4a75      	ldr	r2, [pc, #468]	; (8013078 <UART_SetConfig+0x6a4>)
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d130      	bne.n	8012f08 <UART_SetConfig+0x534>
 8012ea6:	4b72      	ldr	r3, [pc, #456]	; (8013070 <UART_SetConfig+0x69c>)
 8012ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eaa:	f003 0307 	and.w	r3, r3, #7
 8012eae:	2b05      	cmp	r3, #5
 8012eb0:	d826      	bhi.n	8012f00 <UART_SetConfig+0x52c>
 8012eb2:	a201      	add	r2, pc, #4	; (adr r2, 8012eb8 <UART_SetConfig+0x4e4>)
 8012eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb8:	08012ed1 	.word	0x08012ed1
 8012ebc:	08012ed9 	.word	0x08012ed9
 8012ec0:	08012ee1 	.word	0x08012ee1
 8012ec4:	08012ee9 	.word	0x08012ee9
 8012ec8:	08012ef1 	.word	0x08012ef1
 8012ecc:	08012ef9 	.word	0x08012ef9
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ed6:	e050      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ed8:	2304      	movs	r3, #4
 8012eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ede:	e04c      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ee0:	2308      	movs	r3, #8
 8012ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ee6:	e048      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ee8:	2310      	movs	r3, #16
 8012eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eee:	e044      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ef0:	2320      	movs	r3, #32
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ef6:	e040      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012ef8:	2340      	movs	r3, #64	; 0x40
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012efe:	e03c      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f00:	2380      	movs	r3, #128	; 0x80
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f06:	e038      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4a5b      	ldr	r2, [pc, #364]	; (801307c <UART_SetConfig+0x6a8>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d130      	bne.n	8012f74 <UART_SetConfig+0x5a0>
 8012f12:	4b57      	ldr	r3, [pc, #348]	; (8013070 <UART_SetConfig+0x69c>)
 8012f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f16:	f003 0307 	and.w	r3, r3, #7
 8012f1a:	2b05      	cmp	r3, #5
 8012f1c:	d826      	bhi.n	8012f6c <UART_SetConfig+0x598>
 8012f1e:	a201      	add	r2, pc, #4	; (adr r2, 8012f24 <UART_SetConfig+0x550>)
 8012f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f24:	08012f3d 	.word	0x08012f3d
 8012f28:	08012f45 	.word	0x08012f45
 8012f2c:	08012f4d 	.word	0x08012f4d
 8012f30:	08012f55 	.word	0x08012f55
 8012f34:	08012f5d 	.word	0x08012f5d
 8012f38:	08012f65 	.word	0x08012f65
 8012f3c:	2302      	movs	r3, #2
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f42:	e01a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f44:	2304      	movs	r3, #4
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f4a:	e016      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f4c:	2308      	movs	r3, #8
 8012f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f52:	e012      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f54:	2310      	movs	r3, #16
 8012f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f5a:	e00e      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f5c:	2320      	movs	r3, #32
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f62:	e00a      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f64:	2340      	movs	r3, #64	; 0x40
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f6a:	e006      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f6c:	2380      	movs	r3, #128	; 0x80
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f72:	e002      	b.n	8012f7a <UART_SetConfig+0x5a6>
 8012f74:	2380      	movs	r3, #128	; 0x80
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	4a3f      	ldr	r2, [pc, #252]	; (801307c <UART_SetConfig+0x6a8>)
 8012f80:	4293      	cmp	r3, r2
 8012f82:	f040 80f8 	bne.w	8013176 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f8a:	2b20      	cmp	r3, #32
 8012f8c:	dc46      	bgt.n	801301c <UART_SetConfig+0x648>
 8012f8e:	2b02      	cmp	r3, #2
 8012f90:	f2c0 8082 	blt.w	8013098 <UART_SetConfig+0x6c4>
 8012f94:	3b02      	subs	r3, #2
 8012f96:	2b1e      	cmp	r3, #30
 8012f98:	d87e      	bhi.n	8013098 <UART_SetConfig+0x6c4>
 8012f9a:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <UART_SetConfig+0x5cc>)
 8012f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa0:	08013023 	.word	0x08013023
 8012fa4:	08013099 	.word	0x08013099
 8012fa8:	0801302b 	.word	0x0801302b
 8012fac:	08013099 	.word	0x08013099
 8012fb0:	08013099 	.word	0x08013099
 8012fb4:	08013099 	.word	0x08013099
 8012fb8:	0801303b 	.word	0x0801303b
 8012fbc:	08013099 	.word	0x08013099
 8012fc0:	08013099 	.word	0x08013099
 8012fc4:	08013099 	.word	0x08013099
 8012fc8:	08013099 	.word	0x08013099
 8012fcc:	08013099 	.word	0x08013099
 8012fd0:	08013099 	.word	0x08013099
 8012fd4:	08013099 	.word	0x08013099
 8012fd8:	0801304b 	.word	0x0801304b
 8012fdc:	08013099 	.word	0x08013099
 8012fe0:	08013099 	.word	0x08013099
 8012fe4:	08013099 	.word	0x08013099
 8012fe8:	08013099 	.word	0x08013099
 8012fec:	08013099 	.word	0x08013099
 8012ff0:	08013099 	.word	0x08013099
 8012ff4:	08013099 	.word	0x08013099
 8012ff8:	08013099 	.word	0x08013099
 8012ffc:	08013099 	.word	0x08013099
 8013000:	08013099 	.word	0x08013099
 8013004:	08013099 	.word	0x08013099
 8013008:	08013099 	.word	0x08013099
 801300c:	08013099 	.word	0x08013099
 8013010:	08013099 	.word	0x08013099
 8013014:	08013099 	.word	0x08013099
 8013018:	0801308b 	.word	0x0801308b
 801301c:	2b40      	cmp	r3, #64	; 0x40
 801301e:	d037      	beq.n	8013090 <UART_SetConfig+0x6bc>
 8013020:	e03a      	b.n	8013098 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013022:	f7fb fa85 	bl	800e530 <HAL_RCCEx_GetD3PCLK1Freq>
 8013026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013028:	e03c      	b.n	80130a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801302a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801302e:	4618      	mov	r0, r3
 8013030:	f7fb fa94 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013038:	e034      	b.n	80130a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801303a:	f107 0318 	add.w	r3, r7, #24
 801303e:	4618      	mov	r0, r3
 8013040:	f7fb fbe0 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013048:	e02c      	b.n	80130a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801304a:	4b09      	ldr	r3, [pc, #36]	; (8013070 <UART_SetConfig+0x69c>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f003 0320 	and.w	r3, r3, #32
 8013052:	2b00      	cmp	r3, #0
 8013054:	d016      	beq.n	8013084 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013056:	4b06      	ldr	r3, [pc, #24]	; (8013070 <UART_SetConfig+0x69c>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	08db      	lsrs	r3, r3, #3
 801305c:	f003 0303 	and.w	r3, r3, #3
 8013060:	4a07      	ldr	r2, [pc, #28]	; (8013080 <UART_SetConfig+0x6ac>)
 8013062:	fa22 f303 	lsr.w	r3, r2, r3
 8013066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013068:	e01c      	b.n	80130a4 <UART_SetConfig+0x6d0>
 801306a:	bf00      	nop
 801306c:	40011400 	.word	0x40011400
 8013070:	58024400 	.word	0x58024400
 8013074:	40007800 	.word	0x40007800
 8013078:	40007c00 	.word	0x40007c00
 801307c:	58000c00 	.word	0x58000c00
 8013080:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013084:	4b9d      	ldr	r3, [pc, #628]	; (80132fc <UART_SetConfig+0x928>)
 8013086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013088:	e00c      	b.n	80130a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801308a:	4b9d      	ldr	r3, [pc, #628]	; (8013300 <UART_SetConfig+0x92c>)
 801308c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801308e:	e009      	b.n	80130a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013096:	e005      	b.n	80130a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013098:	2300      	movs	r3, #0
 801309a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801309c:	2301      	movs	r3, #1
 801309e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80130a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80130a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f000 81de 	beq.w	8013468 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b0:	4a94      	ldr	r2, [pc, #592]	; (8013304 <UART_SetConfig+0x930>)
 80130b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130b6:	461a      	mov	r2, r3
 80130b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80130be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	685a      	ldr	r2, [r3, #4]
 80130c4:	4613      	mov	r3, r2
 80130c6:	005b      	lsls	r3, r3, #1
 80130c8:	4413      	add	r3, r2
 80130ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d305      	bcc.n	80130dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80130d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130d8:	429a      	cmp	r2, r3
 80130da:	d903      	bls.n	80130e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80130dc:	2301      	movs	r3, #1
 80130de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80130e2:	e1c1      	b.n	8013468 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80130e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130e6:	2200      	movs	r2, #0
 80130e8:	60bb      	str	r3, [r7, #8]
 80130ea:	60fa      	str	r2, [r7, #12]
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f0:	4a84      	ldr	r2, [pc, #528]	; (8013304 <UART_SetConfig+0x930>)
 80130f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	2200      	movs	r2, #0
 80130fa:	603b      	str	r3, [r7, #0]
 80130fc:	607a      	str	r2, [r7, #4]
 80130fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013106:	f7ed f8e7 	bl	80002d8 <__aeabi_uldivmod>
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	4610      	mov	r0, r2
 8013110:	4619      	mov	r1, r3
 8013112:	f04f 0200 	mov.w	r2, #0
 8013116:	f04f 0300 	mov.w	r3, #0
 801311a:	020b      	lsls	r3, r1, #8
 801311c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013120:	0202      	lsls	r2, r0, #8
 8013122:	6979      	ldr	r1, [r7, #20]
 8013124:	6849      	ldr	r1, [r1, #4]
 8013126:	0849      	lsrs	r1, r1, #1
 8013128:	2000      	movs	r0, #0
 801312a:	460c      	mov	r4, r1
 801312c:	4605      	mov	r5, r0
 801312e:	eb12 0804 	adds.w	r8, r2, r4
 8013132:	eb43 0905 	adc.w	r9, r3, r5
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	685b      	ldr	r3, [r3, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	469a      	mov	sl, r3
 801313e:	4693      	mov	fp, r2
 8013140:	4652      	mov	r2, sl
 8013142:	465b      	mov	r3, fp
 8013144:	4640      	mov	r0, r8
 8013146:	4649      	mov	r1, r9
 8013148:	f7ed f8c6 	bl	80002d8 <__aeabi_uldivmod>
 801314c:	4602      	mov	r2, r0
 801314e:	460b      	mov	r3, r1
 8013150:	4613      	mov	r3, r2
 8013152:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801315a:	d308      	bcc.n	801316e <UART_SetConfig+0x79a>
 801315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013162:	d204      	bcs.n	801316e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801316a:	60da      	str	r2, [r3, #12]
 801316c:	e17c      	b.n	8013468 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801316e:	2301      	movs	r3, #1
 8013170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013174:	e178      	b.n	8013468 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	69db      	ldr	r3, [r3, #28]
 801317a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801317e:	f040 80c5 	bne.w	801330c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013182:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013186:	2b20      	cmp	r3, #32
 8013188:	dc48      	bgt.n	801321c <UART_SetConfig+0x848>
 801318a:	2b00      	cmp	r3, #0
 801318c:	db7b      	blt.n	8013286 <UART_SetConfig+0x8b2>
 801318e:	2b20      	cmp	r3, #32
 8013190:	d879      	bhi.n	8013286 <UART_SetConfig+0x8b2>
 8013192:	a201      	add	r2, pc, #4	; (adr r2, 8013198 <UART_SetConfig+0x7c4>)
 8013194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013198:	08013223 	.word	0x08013223
 801319c:	0801322b 	.word	0x0801322b
 80131a0:	08013287 	.word	0x08013287
 80131a4:	08013287 	.word	0x08013287
 80131a8:	08013233 	.word	0x08013233
 80131ac:	08013287 	.word	0x08013287
 80131b0:	08013287 	.word	0x08013287
 80131b4:	08013287 	.word	0x08013287
 80131b8:	08013243 	.word	0x08013243
 80131bc:	08013287 	.word	0x08013287
 80131c0:	08013287 	.word	0x08013287
 80131c4:	08013287 	.word	0x08013287
 80131c8:	08013287 	.word	0x08013287
 80131cc:	08013287 	.word	0x08013287
 80131d0:	08013287 	.word	0x08013287
 80131d4:	08013287 	.word	0x08013287
 80131d8:	08013253 	.word	0x08013253
 80131dc:	08013287 	.word	0x08013287
 80131e0:	08013287 	.word	0x08013287
 80131e4:	08013287 	.word	0x08013287
 80131e8:	08013287 	.word	0x08013287
 80131ec:	08013287 	.word	0x08013287
 80131f0:	08013287 	.word	0x08013287
 80131f4:	08013287 	.word	0x08013287
 80131f8:	08013287 	.word	0x08013287
 80131fc:	08013287 	.word	0x08013287
 8013200:	08013287 	.word	0x08013287
 8013204:	08013287 	.word	0x08013287
 8013208:	08013287 	.word	0x08013287
 801320c:	08013287 	.word	0x08013287
 8013210:	08013287 	.word	0x08013287
 8013214:	08013287 	.word	0x08013287
 8013218:	08013279 	.word	0x08013279
 801321c:	2b40      	cmp	r3, #64	; 0x40
 801321e:	d02e      	beq.n	801327e <UART_SetConfig+0x8aa>
 8013220:	e031      	b.n	8013286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013222:	f7f9 f9cf 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 8013226:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013228:	e033      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801322a:	f7f9 f9e1 	bl	800c5f0 <HAL_RCC_GetPCLK2Freq>
 801322e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013230:	e02f      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013236:	4618      	mov	r0, r3
 8013238:	f7fb f990 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013240:	e027      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013242:	f107 0318 	add.w	r3, r7, #24
 8013246:	4618      	mov	r0, r3
 8013248:	f7fb fadc 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801324c:	69fb      	ldr	r3, [r7, #28]
 801324e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013250:	e01f      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013252:	4b2d      	ldr	r3, [pc, #180]	; (8013308 <UART_SetConfig+0x934>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f003 0320 	and.w	r3, r3, #32
 801325a:	2b00      	cmp	r3, #0
 801325c:	d009      	beq.n	8013272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801325e:	4b2a      	ldr	r3, [pc, #168]	; (8013308 <UART_SetConfig+0x934>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	08db      	lsrs	r3, r3, #3
 8013264:	f003 0303 	and.w	r3, r3, #3
 8013268:	4a24      	ldr	r2, [pc, #144]	; (80132fc <UART_SetConfig+0x928>)
 801326a:	fa22 f303 	lsr.w	r3, r2, r3
 801326e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013270:	e00f      	b.n	8013292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013272:	4b22      	ldr	r3, [pc, #136]	; (80132fc <UART_SetConfig+0x928>)
 8013274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013276:	e00c      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013278:	4b21      	ldr	r3, [pc, #132]	; (8013300 <UART_SetConfig+0x92c>)
 801327a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801327c:	e009      	b.n	8013292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801327e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013284:	e005      	b.n	8013292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013286:	2300      	movs	r3, #0
 8013288:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013294:	2b00      	cmp	r3, #0
 8013296:	f000 80e7 	beq.w	8013468 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329e:	4a19      	ldr	r2, [pc, #100]	; (8013304 <UART_SetConfig+0x930>)
 80132a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80132a4:	461a      	mov	r2, r3
 80132a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80132ac:	005a      	lsls	r2, r3, #1
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	085b      	lsrs	r3, r3, #1
 80132b4:	441a      	add	r2, r3
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80132be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80132c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c2:	2b0f      	cmp	r3, #15
 80132c4:	d916      	bls.n	80132f4 <UART_SetConfig+0x920>
 80132c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132cc:	d212      	bcs.n	80132f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80132ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	f023 030f 	bic.w	r3, r3, #15
 80132d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80132d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132da:	085b      	lsrs	r3, r3, #1
 80132dc:	b29b      	uxth	r3, r3
 80132de:	f003 0307 	and.w	r3, r3, #7
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80132e6:	4313      	orrs	r3, r2
 80132e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80132f0:	60da      	str	r2, [r3, #12]
 80132f2:	e0b9      	b.n	8013468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80132f4:	2301      	movs	r3, #1
 80132f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80132fa:	e0b5      	b.n	8013468 <UART_SetConfig+0xa94>
 80132fc:	03d09000 	.word	0x03d09000
 8013300:	003d0900 	.word	0x003d0900
 8013304:	08017c54 	.word	0x08017c54
 8013308:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801330c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013310:	2b20      	cmp	r3, #32
 8013312:	dc49      	bgt.n	80133a8 <UART_SetConfig+0x9d4>
 8013314:	2b00      	cmp	r3, #0
 8013316:	db7c      	blt.n	8013412 <UART_SetConfig+0xa3e>
 8013318:	2b20      	cmp	r3, #32
 801331a:	d87a      	bhi.n	8013412 <UART_SetConfig+0xa3e>
 801331c:	a201      	add	r2, pc, #4	; (adr r2, 8013324 <UART_SetConfig+0x950>)
 801331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013322:	bf00      	nop
 8013324:	080133af 	.word	0x080133af
 8013328:	080133b7 	.word	0x080133b7
 801332c:	08013413 	.word	0x08013413
 8013330:	08013413 	.word	0x08013413
 8013334:	080133bf 	.word	0x080133bf
 8013338:	08013413 	.word	0x08013413
 801333c:	08013413 	.word	0x08013413
 8013340:	08013413 	.word	0x08013413
 8013344:	080133cf 	.word	0x080133cf
 8013348:	08013413 	.word	0x08013413
 801334c:	08013413 	.word	0x08013413
 8013350:	08013413 	.word	0x08013413
 8013354:	08013413 	.word	0x08013413
 8013358:	08013413 	.word	0x08013413
 801335c:	08013413 	.word	0x08013413
 8013360:	08013413 	.word	0x08013413
 8013364:	080133df 	.word	0x080133df
 8013368:	08013413 	.word	0x08013413
 801336c:	08013413 	.word	0x08013413
 8013370:	08013413 	.word	0x08013413
 8013374:	08013413 	.word	0x08013413
 8013378:	08013413 	.word	0x08013413
 801337c:	08013413 	.word	0x08013413
 8013380:	08013413 	.word	0x08013413
 8013384:	08013413 	.word	0x08013413
 8013388:	08013413 	.word	0x08013413
 801338c:	08013413 	.word	0x08013413
 8013390:	08013413 	.word	0x08013413
 8013394:	08013413 	.word	0x08013413
 8013398:	08013413 	.word	0x08013413
 801339c:	08013413 	.word	0x08013413
 80133a0:	08013413 	.word	0x08013413
 80133a4:	08013405 	.word	0x08013405
 80133a8:	2b40      	cmp	r3, #64	; 0x40
 80133aa:	d02e      	beq.n	801340a <UART_SetConfig+0xa36>
 80133ac:	e031      	b.n	8013412 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80133ae:	f7f9 f909 	bl	800c5c4 <HAL_RCC_GetPCLK1Freq>
 80133b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133b4:	e033      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80133b6:	f7f9 f91b 	bl	800c5f0 <HAL_RCC_GetPCLK2Freq>
 80133ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80133bc:	e02f      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7fb f8ca 	bl	800e55c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80133c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133cc:	e027      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133ce:	f107 0318 	add.w	r3, r7, #24
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fb fa16 	bl	800e804 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133dc:	e01f      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80133de:	4b2d      	ldr	r3, [pc, #180]	; (8013494 <UART_SetConfig+0xac0>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	f003 0320 	and.w	r3, r3, #32
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d009      	beq.n	80133fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80133ea:	4b2a      	ldr	r3, [pc, #168]	; (8013494 <UART_SetConfig+0xac0>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	08db      	lsrs	r3, r3, #3
 80133f0:	f003 0303 	and.w	r3, r3, #3
 80133f4:	4a28      	ldr	r2, [pc, #160]	; (8013498 <UART_SetConfig+0xac4>)
 80133f6:	fa22 f303 	lsr.w	r3, r2, r3
 80133fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80133fc:	e00f      	b.n	801341e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80133fe:	4b26      	ldr	r3, [pc, #152]	; (8013498 <UART_SetConfig+0xac4>)
 8013400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013402:	e00c      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013404:	4b25      	ldr	r3, [pc, #148]	; (801349c <UART_SetConfig+0xac8>)
 8013406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013408:	e009      	b.n	801341e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801340e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013410:	e005      	b.n	801341e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013412:	2300      	movs	r3, #0
 8013414:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013416:	2301      	movs	r3, #1
 8013418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801341c:	bf00      	nop
    }

    if (pclk != 0U)
 801341e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013420:	2b00      	cmp	r3, #0
 8013422:	d021      	beq.n	8013468 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013428:	4a1d      	ldr	r2, [pc, #116]	; (80134a0 <UART_SetConfig+0xacc>)
 801342a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801342e:	461a      	mov	r2, r3
 8013430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013432:	fbb3 f2f2 	udiv	r2, r3, r2
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	085b      	lsrs	r3, r3, #1
 801343c:	441a      	add	r2, r3
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	fbb2 f3f3 	udiv	r3, r2, r3
 8013446:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	2b0f      	cmp	r3, #15
 801344c:	d909      	bls.n	8013462 <UART_SetConfig+0xa8e>
 801344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013454:	d205      	bcs.n	8013462 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013458:	b29a      	uxth	r2, r3
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	60da      	str	r2, [r3, #12]
 8013460:	e002      	b.n	8013468 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013462:	2301      	movs	r3, #1
 8013464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	2201      	movs	r2, #1
 801346c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	2201      	movs	r2, #1
 8013474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	2200      	movs	r2, #0
 801347c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	2200      	movs	r2, #0
 8013482:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013484:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013488:	4618      	mov	r0, r3
 801348a:	3748      	adds	r7, #72	; 0x48
 801348c:	46bd      	mov	sp, r7
 801348e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013492:	bf00      	nop
 8013494:	58024400 	.word	0x58024400
 8013498:	03d09000 	.word	0x03d09000
 801349c:	003d0900 	.word	0x003d0900
 80134a0:	08017c54 	.word	0x08017c54

080134a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134b0:	f003 0301 	and.w	r3, r3, #1
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00a      	beq.n	80134ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	430a      	orrs	r2, r1
 80134cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134d2:	f003 0302 	and.w	r3, r3, #2
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00a      	beq.n	80134f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	430a      	orrs	r2, r1
 80134ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d00a      	beq.n	8013512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	430a      	orrs	r2, r1
 8013510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013516:	f003 0308 	and.w	r3, r3, #8
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00a      	beq.n	8013534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	430a      	orrs	r2, r1
 8013532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013538:	f003 0310 	and.w	r3, r3, #16
 801353c:	2b00      	cmp	r3, #0
 801353e:	d00a      	beq.n	8013556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	430a      	orrs	r2, r1
 8013554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801355a:	f003 0320 	and.w	r3, r3, #32
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00a      	beq.n	8013578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	430a      	orrs	r2, r1
 8013576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013580:	2b00      	cmp	r3, #0
 8013582:	d01a      	beq.n	80135ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	430a      	orrs	r2, r1
 8013598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801359e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135a2:	d10a      	bne.n	80135ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	430a      	orrs	r2, r1
 80135b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d00a      	beq.n	80135dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	430a      	orrs	r2, r1
 80135da:	605a      	str	r2, [r3, #4]
  }
}
 80135dc:	bf00      	nop
 80135de:	370c      	adds	r7, #12
 80135e0:	46bd      	mov	sp, r7
 80135e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e6:	4770      	bx	lr

080135e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b098      	sub	sp, #96	; 0x60
 80135ec:	af02      	add	r7, sp, #8
 80135ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80135f8:	f7f1 fc88 	bl	8004f0c <HAL_GetTick>
 80135fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	f003 0308 	and.w	r3, r3, #8
 8013608:	2b08      	cmp	r3, #8
 801360a:	d12f      	bne.n	801366c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801360c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013614:	2200      	movs	r2, #0
 8013616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f88e 	bl	801373c <UART_WaitOnFlagUntilTimeout>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d022      	beq.n	801366c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362e:	e853 3f00 	ldrex	r3, [r3]
 8013632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801363a:	653b      	str	r3, [r7, #80]	; 0x50
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	461a      	mov	r2, r3
 8013642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013644:	647b      	str	r3, [r7, #68]	; 0x44
 8013646:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801364a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801364c:	e841 2300 	strex	r3, r2, [r1]
 8013650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013654:	2b00      	cmp	r3, #0
 8013656:	d1e6      	bne.n	8013626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2220      	movs	r2, #32
 801365c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2200      	movs	r2, #0
 8013664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013668:	2303      	movs	r3, #3
 801366a:	e063      	b.n	8013734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f003 0304 	and.w	r3, r3, #4
 8013676:	2b04      	cmp	r3, #4
 8013678:	d149      	bne.n	801370e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801367a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013682:	2200      	movs	r2, #0
 8013684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 f857 	bl	801373c <UART_WaitOnFlagUntilTimeout>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d03c      	beq.n	801370e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369c:	e853 3f00 	ldrex	r3, [r3]
 80136a0:	623b      	str	r3, [r7, #32]
   return(result);
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	461a      	mov	r2, r3
 80136b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136b2:	633b      	str	r3, [r7, #48]	; 0x30
 80136b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ba:	e841 2300 	strex	r3, r2, [r1]
 80136be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d1e6      	bne.n	8013694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	3308      	adds	r3, #8
 80136cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	e853 3f00 	ldrex	r3, [r3]
 80136d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f023 0301 	bic.w	r3, r3, #1
 80136dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3308      	adds	r3, #8
 80136e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136e6:	61fa      	str	r2, [r7, #28]
 80136e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ea:	69b9      	ldr	r1, [r7, #24]
 80136ec:	69fa      	ldr	r2, [r7, #28]
 80136ee:	e841 2300 	strex	r3, r2, [r1]
 80136f2:	617b      	str	r3, [r7, #20]
   return(result);
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1e5      	bne.n	80136c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2220      	movs	r2, #32
 80136fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2200      	movs	r2, #0
 8013706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801370a:	2303      	movs	r3, #3
 801370c:	e012      	b.n	8013734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2220      	movs	r2, #32
 8013712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2220      	movs	r2, #32
 801371a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2200      	movs	r2, #0
 8013722:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2200      	movs	r2, #0
 8013728:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2200      	movs	r2, #0
 801372e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3758      	adds	r7, #88	; 0x58
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	603b      	str	r3, [r7, #0]
 8013748:	4613      	mov	r3, r2
 801374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801374c:	e049      	b.n	80137e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013754:	d045      	beq.n	80137e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013756:	f7f1 fbd9 	bl	8004f0c <HAL_GetTick>
 801375a:	4602      	mov	r2, r0
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	69ba      	ldr	r2, [r7, #24]
 8013762:	429a      	cmp	r2, r3
 8013764:	d302      	bcc.n	801376c <UART_WaitOnFlagUntilTimeout+0x30>
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d101      	bne.n	8013770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801376c:	2303      	movs	r3, #3
 801376e:	e048      	b.n	8013802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f003 0304 	and.w	r3, r3, #4
 801377a:	2b00      	cmp	r3, #0
 801377c:	d031      	beq.n	80137e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	69db      	ldr	r3, [r3, #28]
 8013784:	f003 0308 	and.w	r3, r3, #8
 8013788:	2b08      	cmp	r3, #8
 801378a:	d110      	bne.n	80137ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	2208      	movs	r2, #8
 8013792:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f000 f839 	bl	801380c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	2208      	movs	r2, #8
 801379e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	2200      	movs	r2, #0
 80137a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80137aa:	2301      	movs	r3, #1
 80137ac:	e029      	b.n	8013802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	69db      	ldr	r3, [r3, #28]
 80137b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80137b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137bc:	d111      	bne.n	80137e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80137c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80137c8:	68f8      	ldr	r0, [r7, #12]
 80137ca:	f000 f81f 	bl	801380c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2220      	movs	r2, #32
 80137d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2200      	movs	r2, #0
 80137da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80137de:	2303      	movs	r3, #3
 80137e0:	e00f      	b.n	8013802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	69da      	ldr	r2, [r3, #28]
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	4013      	ands	r3, r2
 80137ec:	68ba      	ldr	r2, [r7, #8]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	bf0c      	ite	eq
 80137f2:	2301      	moveq	r3, #1
 80137f4:	2300      	movne	r3, #0
 80137f6:	b2db      	uxtb	r3, r3
 80137f8:	461a      	mov	r2, r3
 80137fa:	79fb      	ldrb	r3, [r7, #7]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d0a6      	beq.n	801374e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3710      	adds	r7, #16
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
	...

0801380c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801380c:	b480      	push	{r7}
 801380e:	b095      	sub	sp, #84	; 0x54
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801381a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801381c:	e853 3f00 	ldrex	r3, [r3]
 8013820:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013828:	64fb      	str	r3, [r7, #76]	; 0x4c
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	461a      	mov	r2, r3
 8013830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013832:	643b      	str	r3, [r7, #64]	; 0x40
 8013834:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801383a:	e841 2300 	strex	r3, r2, [r1]
 801383e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013842:	2b00      	cmp	r3, #0
 8013844:	d1e6      	bne.n	8013814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	3308      	adds	r3, #8
 801384c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	e853 3f00 	ldrex	r3, [r3]
 8013854:	61fb      	str	r3, [r7, #28]
   return(result);
 8013856:	69fa      	ldr	r2, [r7, #28]
 8013858:	4b1e      	ldr	r3, [pc, #120]	; (80138d4 <UART_EndRxTransfer+0xc8>)
 801385a:	4013      	ands	r3, r2
 801385c:	64bb      	str	r3, [r7, #72]	; 0x48
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	3308      	adds	r3, #8
 8013864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801386a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801386c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801386e:	e841 2300 	strex	r3, r2, [r1]
 8013872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1e5      	bne.n	8013846 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387e:	2b01      	cmp	r3, #1
 8013880:	d118      	bne.n	80138b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	e853 3f00 	ldrex	r3, [r3]
 801388e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	f023 0310 	bic.w	r3, r3, #16
 8013896:	647b      	str	r3, [r7, #68]	; 0x44
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	461a      	mov	r2, r3
 801389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a0:	61bb      	str	r3, [r7, #24]
 80138a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138a4:	6979      	ldr	r1, [r7, #20]
 80138a6:	69ba      	ldr	r2, [r7, #24]
 80138a8:	e841 2300 	strex	r3, r2, [r1]
 80138ac:	613b      	str	r3, [r7, #16]
   return(result);
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1e6      	bne.n	8013882 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2220      	movs	r2, #32
 80138b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80138c8:	bf00      	nop
 80138ca:	3754      	adds	r7, #84	; 0x54
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	effffffe 	.word	0xeffffffe

080138d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80138e6:	2b01      	cmp	r3, #1
 80138e8:	d101      	bne.n	80138ee <HAL_UARTEx_DisableFifoMode+0x16>
 80138ea:	2302      	movs	r3, #2
 80138ec:	e027      	b.n	801393e <HAL_UARTEx_DisableFifoMode+0x66>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2201      	movs	r2, #1
 80138f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2224      	movs	r2, #36	; 0x24
 80138fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f022 0201 	bic.w	r2, r2, #1
 8013914:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801391c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2200      	movs	r2, #0
 8013922:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2220      	movs	r2, #32
 8013930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3714      	adds	r7, #20
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr

0801394a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b084      	sub	sp, #16
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
 8013952:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801395a:	2b01      	cmp	r3, #1
 801395c:	d101      	bne.n	8013962 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801395e:	2302      	movs	r3, #2
 8013960:	e02d      	b.n	80139be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2201      	movs	r2, #1
 8013966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2224      	movs	r2, #36	; 0x24
 801396e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	f022 0201 	bic.w	r2, r2, #1
 8013988:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	689b      	ldr	r3, [r3, #8]
 8013990:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	683a      	ldr	r2, [r7, #0]
 801399a:	430a      	orrs	r2, r1
 801399c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 f850 	bl	8013a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2220      	movs	r2, #32
 80139b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2200      	movs	r2, #0
 80139b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3710      	adds	r7, #16
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80139c6:	b580      	push	{r7, lr}
 80139c8:	b084      	sub	sp, #16
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
 80139ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d101      	bne.n	80139de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80139da:	2302      	movs	r3, #2
 80139dc:	e02d      	b.n	8013a3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2224      	movs	r2, #36	; 0x24
 80139ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f022 0201 	bic.w	r2, r2, #1
 8013a04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	689b      	ldr	r3, [r3, #8]
 8013a0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	430a      	orrs	r2, r1
 8013a18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 f812 	bl	8013a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2220      	movs	r2, #32
 8013a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2200      	movs	r2, #0
 8013a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3710      	adds	r7, #16
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
	...

08013a44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013a44:	b480      	push	{r7}
 8013a46:	b085      	sub	sp, #20
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d108      	bne.n	8013a66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2201      	movs	r2, #1
 8013a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2201      	movs	r2, #1
 8013a60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013a64:	e031      	b.n	8013aca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013a66:	2310      	movs	r3, #16
 8013a68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013a6a:	2310      	movs	r3, #16
 8013a6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	689b      	ldr	r3, [r3, #8]
 8013a74:	0e5b      	lsrs	r3, r3, #25
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	f003 0307 	and.w	r3, r3, #7
 8013a7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	0f5b      	lsrs	r3, r3, #29
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	f003 0307 	and.w	r3, r3, #7
 8013a8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013a8e:	7bbb      	ldrb	r3, [r7, #14]
 8013a90:	7b3a      	ldrb	r2, [r7, #12]
 8013a92:	4911      	ldr	r1, [pc, #68]	; (8013ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8013a94:	5c8a      	ldrb	r2, [r1, r2]
 8013a96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013a9a:	7b3a      	ldrb	r2, [r7, #12]
 8013a9c:	490f      	ldr	r1, [pc, #60]	; (8013adc <UARTEx_SetNbDataToProcess+0x98>)
 8013a9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013aac:	7bfb      	ldrb	r3, [r7, #15]
 8013aae:	7b7a      	ldrb	r2, [r7, #13]
 8013ab0:	4909      	ldr	r1, [pc, #36]	; (8013ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8013ab2:	5c8a      	ldrb	r2, [r1, r2]
 8013ab4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013ab8:	7b7a      	ldrb	r2, [r7, #13]
 8013aba:	4908      	ldr	r1, [pc, #32]	; (8013adc <UARTEx_SetNbDataToProcess+0x98>)
 8013abc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013abe:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ac2:	b29a      	uxth	r2, r3
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013aca:	bf00      	nop
 8013acc:	3714      	adds	r7, #20
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	08017c6c 	.word	0x08017c6c
 8013adc:	08017c74 	.word	0x08017c74

08013ae0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b083      	sub	sp, #12
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d121      	bne.n	8013b36 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	4b27      	ldr	r3, [pc, #156]	; (8013b94 <FMC_SDRAM_Init+0xb4>)
 8013af8:	4013      	ands	r3, r2
 8013afa:	683a      	ldr	r2, [r7, #0]
 8013afc:	6851      	ldr	r1, [r2, #4]
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	6892      	ldr	r2, [r2, #8]
 8013b02:	4311      	orrs	r1, r2
 8013b04:	683a      	ldr	r2, [r7, #0]
 8013b06:	68d2      	ldr	r2, [r2, #12]
 8013b08:	4311      	orrs	r1, r2
 8013b0a:	683a      	ldr	r2, [r7, #0]
 8013b0c:	6912      	ldr	r2, [r2, #16]
 8013b0e:	4311      	orrs	r1, r2
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	6952      	ldr	r2, [r2, #20]
 8013b14:	4311      	orrs	r1, r2
 8013b16:	683a      	ldr	r2, [r7, #0]
 8013b18:	6992      	ldr	r2, [r2, #24]
 8013b1a:	4311      	orrs	r1, r2
 8013b1c:	683a      	ldr	r2, [r7, #0]
 8013b1e:	69d2      	ldr	r2, [r2, #28]
 8013b20:	4311      	orrs	r1, r2
 8013b22:	683a      	ldr	r2, [r7, #0]
 8013b24:	6a12      	ldr	r2, [r2, #32]
 8013b26:	4311      	orrs	r1, r2
 8013b28:	683a      	ldr	r2, [r7, #0]
 8013b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013b2c:	430a      	orrs	r2, r1
 8013b2e:	431a      	orrs	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	601a      	str	r2, [r3, #0]
 8013b34:	e026      	b.n	8013b84 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	69d9      	ldr	r1, [r3, #28]
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	6a1b      	ldr	r3, [r3, #32]
 8013b46:	4319      	orrs	r1, r3
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4c:	430b      	orrs	r3, r1
 8013b4e:	431a      	orrs	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	685a      	ldr	r2, [r3, #4]
 8013b58:	4b0e      	ldr	r3, [pc, #56]	; (8013b94 <FMC_SDRAM_Init+0xb4>)
 8013b5a:	4013      	ands	r3, r2
 8013b5c:	683a      	ldr	r2, [r7, #0]
 8013b5e:	6851      	ldr	r1, [r2, #4]
 8013b60:	683a      	ldr	r2, [r7, #0]
 8013b62:	6892      	ldr	r2, [r2, #8]
 8013b64:	4311      	orrs	r1, r2
 8013b66:	683a      	ldr	r2, [r7, #0]
 8013b68:	68d2      	ldr	r2, [r2, #12]
 8013b6a:	4311      	orrs	r1, r2
 8013b6c:	683a      	ldr	r2, [r7, #0]
 8013b6e:	6912      	ldr	r2, [r2, #16]
 8013b70:	4311      	orrs	r1, r2
 8013b72:	683a      	ldr	r2, [r7, #0]
 8013b74:	6952      	ldr	r2, [r2, #20]
 8013b76:	4311      	orrs	r1, r2
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	6992      	ldr	r2, [r2, #24]
 8013b7c:	430a      	orrs	r2, r1
 8013b7e:	431a      	orrs	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013b84:	2300      	movs	r3, #0
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	ffff8000 	.word	0xffff8000

08013b98 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d128      	bne.n	8013bfc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	1e59      	subs	r1, r3, #1
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	685b      	ldr	r3, [r3, #4]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	011b      	lsls	r3, r3, #4
 8013bc0:	4319      	orrs	r1, r3
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	3b01      	subs	r3, #1
 8013bc8:	021b      	lsls	r3, r3, #8
 8013bca:	4319      	orrs	r1, r3
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	3b01      	subs	r3, #1
 8013bd2:	031b      	lsls	r3, r3, #12
 8013bd4:	4319      	orrs	r1, r3
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	691b      	ldr	r3, [r3, #16]
 8013bda:	3b01      	subs	r3, #1
 8013bdc:	041b      	lsls	r3, r3, #16
 8013bde:	4319      	orrs	r1, r3
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	695b      	ldr	r3, [r3, #20]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	051b      	lsls	r3, r3, #20
 8013be8:	4319      	orrs	r1, r3
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	699b      	ldr	r3, [r3, #24]
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	061b      	lsls	r3, r3, #24
 8013bf2:	430b      	orrs	r3, r1
 8013bf4:	431a      	orrs	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	609a      	str	r2, [r3, #8]
 8013bfa:	e02d      	b.n	8013c58 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	689a      	ldr	r2, [r3, #8]
 8013c00:	4b19      	ldr	r3, [pc, #100]	; (8013c68 <FMC_SDRAM_Timing_Init+0xd0>)
 8013c02:	4013      	ands	r3, r2
 8013c04:	68ba      	ldr	r2, [r7, #8]
 8013c06:	68d2      	ldr	r2, [r2, #12]
 8013c08:	3a01      	subs	r2, #1
 8013c0a:	0311      	lsls	r1, r2, #12
 8013c0c:	68ba      	ldr	r2, [r7, #8]
 8013c0e:	6952      	ldr	r2, [r2, #20]
 8013c10:	3a01      	subs	r2, #1
 8013c12:	0512      	lsls	r2, r2, #20
 8013c14:	430a      	orrs	r2, r1
 8013c16:	431a      	orrs	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	1e59      	subs	r1, r3, #1
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	3b01      	subs	r3, #1
 8013c30:	011b      	lsls	r3, r3, #4
 8013c32:	4319      	orrs	r1, r3
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	3b01      	subs	r3, #1
 8013c3a:	021b      	lsls	r3, r3, #8
 8013c3c:	4319      	orrs	r1, r3
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	691b      	ldr	r3, [r3, #16]
 8013c42:	3b01      	subs	r3, #1
 8013c44:	041b      	lsls	r3, r3, #16
 8013c46:	4319      	orrs	r1, r3
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	699b      	ldr	r3, [r3, #24]
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	061b      	lsls	r3, r3, #24
 8013c50:	430b      	orrs	r3, r1
 8013c52:	431a      	orrs	r2, r3
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013c58:	2300      	movs	r3, #0
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3714      	adds	r7, #20
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop
 8013c68:	ff0f0fff 	.word	0xff0f0fff

08013c6c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	b085      	sub	sp, #20
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	691a      	ldr	r2, [r3, #16]
 8013c7c:	4b0c      	ldr	r3, [pc, #48]	; (8013cb0 <FMC_SDRAM_SendCommand+0x44>)
 8013c7e:	4013      	ands	r3, r2
 8013c80:	68ba      	ldr	r2, [r7, #8]
 8013c82:	6811      	ldr	r1, [r2, #0]
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	6852      	ldr	r2, [r2, #4]
 8013c88:	4311      	orrs	r1, r2
 8013c8a:	68ba      	ldr	r2, [r7, #8]
 8013c8c:	6892      	ldr	r2, [r2, #8]
 8013c8e:	3a01      	subs	r2, #1
 8013c90:	0152      	lsls	r2, r2, #5
 8013c92:	4311      	orrs	r1, r2
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	68d2      	ldr	r2, [r2, #12]
 8013c98:	0252      	lsls	r2, r2, #9
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	431a      	orrs	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8013ca2:	2300      	movs	r3, #0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3714      	adds	r7, #20
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cae:	4770      	bx	lr
 8013cb0:	ffc00000 	.word	0xffc00000

08013cb4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	695a      	ldr	r2, [r3, #20]
 8013cc2:	4b07      	ldr	r3, [pc, #28]	; (8013ce0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	683a      	ldr	r2, [r7, #0]
 8013cc8:	0052      	lsls	r2, r2, #1
 8013cca:	431a      	orrs	r2, r3
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	370c      	adds	r7, #12
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	ffffc001 	.word	0xffffc001

08013ce4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013ce4:	b084      	sub	sp, #16
 8013ce6:	b480      	push	{r7}
 8013ce8:	b085      	sub	sp, #20
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	6078      	str	r0, [r7, #4]
 8013cee:	f107 001c 	add.w	r0, r7, #28
 8013cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8013cfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013cfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013cfe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8013d02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8013d06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8013d0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	4313      	orrs	r3, r2
 8013d10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	685a      	ldr	r2, [r3, #4]
 8013d16:	4b07      	ldr	r3, [pc, #28]	; (8013d34 <SDMMC_Init+0x50>)
 8013d18:	4013      	ands	r3, r2
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	431a      	orrs	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3714      	adds	r7, #20
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	b004      	add	sp, #16
 8013d30:	4770      	bx	lr
 8013d32:	bf00      	nop
 8013d34:	ffc02c00 	.word	0xffc02c00

08013d38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	370c      	adds	r7, #12
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr

08013d52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013d52:	b480      	push	{r7}
 8013d54:	b083      	sub	sp, #12
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	6078      	str	r0, [r7, #4]
 8013d5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f043 0203 	orr.w	r2, r3, #3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8013d96:	b480      	push	{r7}
 8013d98:	b083      	sub	sp, #12
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	f003 0303 	and.w	r3, r3, #3
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	370c      	adds	r7, #12
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr
	...

08013db4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013db4:	b480      	push	{r7}
 8013db6:	b085      	sub	sp, #20
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013dd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013dd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013dde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013de0:	68fa      	ldr	r2, [r7, #12]
 8013de2:	4313      	orrs	r3, r2
 8013de4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	68da      	ldr	r2, [r3, #12]
 8013dea:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <SDMMC_SendCommand+0x50>)
 8013dec:	4013      	ands	r3, r2
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	431a      	orrs	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3714      	adds	r7, #20
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr
 8013e04:	fffee0c0 	.word	0xfffee0c0

08013e08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b083      	sub	sp, #12
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	691b      	ldr	r3, [r3, #16]
 8013e14:	b2db      	uxtb	r3, r3
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	370c      	adds	r7, #12
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr

08013e22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013e22:	b480      	push	{r7}
 8013e24:	b085      	sub	sp, #20
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	3314      	adds	r3, #20
 8013e30:	461a      	mov	r2, r3
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	4413      	add	r3, r2
 8013e36:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	681b      	ldr	r3, [r3, #0]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3714      	adds	r7, #20
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b085      	sub	sp, #20
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	685a      	ldr	r2, [r3, #4]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013e6e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013e74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013e7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013e7c:	68fa      	ldr	r2, [r7, #12]
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	431a      	orrs	r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013e92:	2300      	movs	r3, #0

}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3714      	adds	r7, #20
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b088      	sub	sp, #32
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013eae:	2310      	movs	r3, #16
 8013eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ec2:	f107 0308 	add.w	r3, r7, #8
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f7ff ff73 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ed2:	2110      	movs	r1, #16
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 fa5f 	bl	8014398 <SDMMC_GetCmdResp1>
 8013eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013edc:	69fb      	ldr	r3, [r7, #28]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3720      	adds	r7, #32
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b088      	sub	sp, #32
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013ef4:	2311      	movs	r3, #17
 8013ef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013efe:	2300      	movs	r3, #0
 8013f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f08:	f107 0308 	add.w	r3, r7, #8
 8013f0c:	4619      	mov	r1, r3
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7ff ff50 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f18:	2111      	movs	r1, #17
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 fa3c 	bl	8014398 <SDMMC_GetCmdResp1>
 8013f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f22:	69fb      	ldr	r3, [r7, #28]
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3720      	adds	r7, #32
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b088      	sub	sp, #32
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013f3a:	2312      	movs	r3, #18
 8013f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f44:	2300      	movs	r3, #0
 8013f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f4e:	f107 0308 	add.w	r3, r7, #8
 8013f52:	4619      	mov	r1, r3
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7ff ff2d 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f5e:	2112      	movs	r1, #18
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f000 fa19 	bl	8014398 <SDMMC_GetCmdResp1>
 8013f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f68:	69fb      	ldr	r3, [r7, #28]
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3720      	adds	r7, #32
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013f72:	b580      	push	{r7, lr}
 8013f74:	b088      	sub	sp, #32
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
 8013f7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013f80:	2318      	movs	r3, #24
 8013f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f94:	f107 0308 	add.w	r3, r7, #8
 8013f98:	4619      	mov	r1, r3
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7ff ff0a 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fa4:	2118      	movs	r1, #24
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 f9f6 	bl	8014398 <SDMMC_GetCmdResp1>
 8013fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fae:	69fb      	ldr	r3, [r7, #28]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3720      	adds	r7, #32
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b088      	sub	sp, #32
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013fc6:	2319      	movs	r3, #25
 8013fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013fd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013fda:	f107 0308 	add.w	r3, r7, #8
 8013fde:	4619      	mov	r1, r3
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7ff fee7 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fea:	2119      	movs	r1, #25
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f9d3 	bl	8014398 <SDMMC_GetCmdResp1>
 8013ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ff4:	69fb      	ldr	r3, [r7, #28]
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3720      	adds	r7, #32
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
	...

08014000 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b088      	sub	sp, #32
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8014008:	2300      	movs	r3, #0
 801400a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801400c:	230c      	movs	r3, #12
 801400e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014016:	2300      	movs	r3, #0
 8014018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801401a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801401e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014038:	f107 0308 	add.w	r3, r7, #8
 801403c:	4619      	mov	r1, r3
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f7ff feb8 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8014044:	4a0b      	ldr	r2, [pc, #44]	; (8014074 <SDMMC_CmdStopTransfer+0x74>)
 8014046:	210c      	movs	r1, #12
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 f9a5 	bl	8014398 <SDMMC_GetCmdResp1>
 801404e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014062:	d101      	bne.n	8014068 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8014064:	2300      	movs	r3, #0
 8014066:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8014068:	69fb      	ldr	r3, [r7, #28]
}
 801406a:	4618      	mov	r0, r3
 801406c:	3720      	adds	r7, #32
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	05f5e100 	.word	0x05f5e100

08014078 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b088      	sub	sp, #32
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014086:	2307      	movs	r3, #7
 8014088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801408a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801408e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014090:	2300      	movs	r3, #0
 8014092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801409a:	f107 0308 	add.w	r3, r7, #8
 801409e:	4619      	mov	r1, r3
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f7ff fe87 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80140a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80140aa:	2107      	movs	r1, #7
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 f973 	bl	8014398 <SDMMC_GetCmdResp1>
 80140b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140b4:	69fb      	ldr	r3, [r7, #28]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3720      	adds	r7, #32
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b088      	sub	sp, #32
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80140c6:	2300      	movs	r3, #0
 80140c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80140ca:	2300      	movs	r3, #0
 80140cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80140ce:	2300      	movs	r3, #0
 80140d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140d2:	2300      	movs	r3, #0
 80140d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80140da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140dc:	f107 0308 	add.w	r3, r7, #8
 80140e0:	4619      	mov	r1, r3
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f7ff fe66 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f000 fb97 	bl	801481c <SDMMC_GetCmdError>
 80140ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140f0:	69fb      	ldr	r3, [r7, #28]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3720      	adds	r7, #32
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b088      	sub	sp, #32
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014102:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014108:	2308      	movs	r3, #8
 801410a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801410c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014112:	2300      	movs	r3, #0
 8014114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801411a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801411c:	f107 0308 	add.w	r3, r7, #8
 8014120:	4619      	mov	r1, r3
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fe46 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fb29 	bl	8014780 <SDMMC_GetCmdResp7>
 801412e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014130:	69fb      	ldr	r3, [r7, #28]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3720      	adds	r7, #32
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b088      	sub	sp, #32
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014148:	2337      	movs	r3, #55	; 0x37
 801414a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801414c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014152:	2300      	movs	r3, #0
 8014154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801415a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801415c:	f107 0308 	add.w	r3, r7, #8
 8014160:	4619      	mov	r1, r3
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7ff fe26 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014168:	f241 3288 	movw	r2, #5000	; 0x1388
 801416c:	2137      	movs	r1, #55	; 0x37
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 f912 	bl	8014398 <SDMMC_GetCmdResp1>
 8014174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014176:	69fb      	ldr	r3, [r7, #28]
}
 8014178:	4618      	mov	r0, r3
 801417a:	3720      	adds	r7, #32
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b088      	sub	sp, #32
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
 8014188:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801418e:	2329      	movs	r3, #41	; 0x29
 8014190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014198:	2300      	movs	r3, #0
 801419a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801419c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141a2:	f107 0308 	add.w	r3, r7, #8
 80141a6:	4619      	mov	r1, r3
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff fe03 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 fa2e 	bl	8014610 <SDMMC_GetCmdResp3>
 80141b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141b6:	69fb      	ldr	r3, [r7, #28]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3720      	adds	r7, #32
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b088      	sub	sp, #32
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80141ce:	2306      	movs	r3, #6
 80141d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80141d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141d8:	2300      	movs	r3, #0
 80141da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141e2:	f107 0308 	add.w	r3, r7, #8
 80141e6:	4619      	mov	r1, r3
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7ff fde3 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80141ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80141f2:	2106      	movs	r1, #6
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f000 f8cf 	bl	8014398 <SDMMC_GetCmdResp1>
 80141fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141fc:	69fb      	ldr	r3, [r7, #28]
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3720      	adds	r7, #32
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014206:	b580      	push	{r7, lr}
 8014208:	b088      	sub	sp, #32
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801420e:	2300      	movs	r3, #0
 8014210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014212:	2333      	movs	r3, #51	; 0x33
 8014214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014216:	f44f 7380 	mov.w	r3, #256	; 0x100
 801421a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801421c:	2300      	movs	r3, #0
 801421e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014226:	f107 0308 	add.w	r3, r7, #8
 801422a:	4619      	mov	r1, r3
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7ff fdc1 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014232:	f241 3288 	movw	r2, #5000	; 0x1388
 8014236:	2133      	movs	r1, #51	; 0x33
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f000 f8ad 	bl	8014398 <SDMMC_GetCmdResp1>
 801423e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014240:	69fb      	ldr	r3, [r7, #28]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3720      	adds	r7, #32
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801424a:	b580      	push	{r7, lr}
 801424c:	b088      	sub	sp, #32
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014252:	2300      	movs	r3, #0
 8014254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8014256:	2302      	movs	r3, #2
 8014258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801425a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801425e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014260:	2300      	movs	r3, #0
 8014262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801426a:	f107 0308 	add.w	r3, r7, #8
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7ff fd9f 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f000 f980 	bl	801457c <SDMMC_GetCmdResp2>
 801427c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801427e:	69fb      	ldr	r3, [r7, #28]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3720      	adds	r7, #32
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b088      	sub	sp, #32
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014296:	2309      	movs	r3, #9
 8014298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801429a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801429e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142a0:	2300      	movs	r3, #0
 80142a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142aa:	f107 0308 	add.w	r3, r7, #8
 80142ae:	4619      	mov	r1, r3
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ff fd7f 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f000 f960 	bl	801457c <SDMMC_GetCmdResp2>
 80142bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142be:	69fb      	ldr	r3, [r7, #28]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3720      	adds	r7, #32
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80142d2:	2300      	movs	r3, #0
 80142d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80142d6:	2303      	movs	r3, #3
 80142d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142e0:	2300      	movs	r3, #0
 80142e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142ea:	f107 0308 	add.w	r3, r7, #8
 80142ee:	4619      	mov	r1, r3
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f7ff fd5f 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	2103      	movs	r1, #3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 f9c8 	bl	8014690 <SDMMC_GetCmdResp6>
 8014300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014302:	69fb      	ldr	r3, [r7, #28]
}
 8014304:	4618      	mov	r0, r3
 8014306:	3720      	adds	r7, #32
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801431a:	230d      	movs	r3, #13
 801431c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801431e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014324:	2300      	movs	r3, #0
 8014326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801432c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801432e:	f107 0308 	add.w	r3, r7, #8
 8014332:	4619      	mov	r1, r3
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f7ff fd3d 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801433a:	f241 3288 	movw	r2, #5000	; 0x1388
 801433e:	210d      	movs	r1, #13
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 f829 	bl	8014398 <SDMMC_GetCmdResp1>
 8014346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014348:	69fb      	ldr	r3, [r7, #28]
}
 801434a:	4618      	mov	r0, r3
 801434c:	3720      	adds	r7, #32
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}

08014352 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b088      	sub	sp, #32
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801435a:	2300      	movs	r3, #0
 801435c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801435e:	230d      	movs	r3, #13
 8014360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014368:	2300      	movs	r3, #0
 801436a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801436c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014372:	f107 0308 	add.w	r3, r7, #8
 8014376:	4619      	mov	r1, r3
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7ff fd1b 	bl	8013db4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014382:	210d      	movs	r1, #13
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f000 f807 	bl	8014398 <SDMMC_GetCmdResp1>
 801438a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801438c:	69fb      	ldr	r3, [r7, #28]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3720      	adds	r7, #32
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
	...

08014398 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b088      	sub	sp, #32
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	460b      	mov	r3, r1
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80143a6:	4b70      	ldr	r3, [pc, #448]	; (8014568 <SDMMC_GetCmdResp1+0x1d0>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	4a70      	ldr	r2, [pc, #448]	; (801456c <SDMMC_GetCmdResp1+0x1d4>)
 80143ac:	fba2 2303 	umull	r2, r3, r2, r3
 80143b0:	0a5a      	lsrs	r2, r3, #9
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	fb02 f303 	mul.w	r3, r2, r3
 80143b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80143ba:	69fb      	ldr	r3, [r7, #28]
 80143bc:	1e5a      	subs	r2, r3, #1
 80143be:	61fa      	str	r2, [r7, #28]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d102      	bne.n	80143ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80143c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80143c8:	e0c9      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	4b67      	ldr	r3, [pc, #412]	; (8014570 <SDMMC_GetCmdResp1+0x1d8>)
 80143d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d0ef      	beq.n	80143ba <SDMMC_GetCmdResp1+0x22>
 80143da:	69bb      	ldr	r3, [r7, #24]
 80143dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1ea      	bne.n	80143ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143e8:	f003 0304 	and.w	r3, r3, #4
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d004      	beq.n	80143fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2204      	movs	r2, #4
 80143f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80143f6:	2304      	movs	r3, #4
 80143f8:	e0b1      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143fe:	f003 0301 	and.w	r3, r3, #1
 8014402:	2b00      	cmp	r3, #0
 8014404:	d004      	beq.n	8014410 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2201      	movs	r2, #1
 801440a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801440c:	2301      	movs	r3, #1
 801440e:	e0a6      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	4a58      	ldr	r2, [pc, #352]	; (8014574 <SDMMC_GetCmdResp1+0x1dc>)
 8014414:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f7ff fcf6 	bl	8013e08 <SDMMC_GetCommandResponse>
 801441c:	4603      	mov	r3, r0
 801441e:	461a      	mov	r2, r3
 8014420:	7afb      	ldrb	r3, [r7, #11]
 8014422:	4293      	cmp	r3, r2
 8014424:	d001      	beq.n	801442a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014426:	2301      	movs	r3, #1
 8014428:	e099      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801442a:	2100      	movs	r1, #0
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f7ff fcf8 	bl	8013e22 <SDMMC_GetResponse>
 8014432:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014434:	697a      	ldr	r2, [r7, #20]
 8014436:	4b50      	ldr	r3, [pc, #320]	; (8014578 <SDMMC_GetCmdResp1+0x1e0>)
 8014438:	4013      	ands	r3, r2
 801443a:	2b00      	cmp	r3, #0
 801443c:	d101      	bne.n	8014442 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801443e:	2300      	movs	r3, #0
 8014440:	e08d      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	2b00      	cmp	r3, #0
 8014446:	da02      	bge.n	801444e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801444c:	e087      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014458:	2340      	movs	r3, #64	; 0x40
 801445a:	e080      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014462:	2b00      	cmp	r3, #0
 8014464:	d001      	beq.n	801446a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014466:	2380      	movs	r3, #128	; 0x80
 8014468:	e079      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014470:	2b00      	cmp	r3, #0
 8014472:	d002      	beq.n	801447a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014478:	e071      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014480:	2b00      	cmp	r3, #0
 8014482:	d002      	beq.n	801448a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014488:	e069      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014490:	2b00      	cmp	r3, #0
 8014492:	d002      	beq.n	801449a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014498:	e061      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d002      	beq.n	80144aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80144a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144a8:	e059      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d002      	beq.n	80144ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80144b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80144b8:	e051      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d002      	beq.n	80144ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80144c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80144c8:	e049      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d002      	beq.n	80144da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80144d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80144d8:	e041      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d002      	beq.n	80144ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80144e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144e8:	e039      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d002      	beq.n	80144fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80144f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80144f8:	e031      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014500:	2b00      	cmp	r3, #0
 8014502:	d002      	beq.n	801450a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014508:	e029      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014510:	2b00      	cmp	r3, #0
 8014512:	d002      	beq.n	801451a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014518:	e021      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014520:	2b00      	cmp	r3, #0
 8014522:	d002      	beq.n	801452a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014528:	e019      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014530:	2b00      	cmp	r3, #0
 8014532:	d002      	beq.n	801453a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014538:	e011      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014540:	2b00      	cmp	r3, #0
 8014542:	d002      	beq.n	801454a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014548:	e009      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	f003 0308 	and.w	r3, r3, #8
 8014550:	2b00      	cmp	r3, #0
 8014552:	d002      	beq.n	801455a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014558:	e001      	b.n	801455e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801455a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801455e:	4618      	mov	r0, r3
 8014560:	3720      	adds	r7, #32
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	20000018 	.word	0x20000018
 801456c:	10624dd3 	.word	0x10624dd3
 8014570:	00200045 	.word	0x00200045
 8014574:	002000c5 	.word	0x002000c5
 8014578:	fdffe008 	.word	0xfdffe008

0801457c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014584:	4b1f      	ldr	r3, [pc, #124]	; (8014604 <SDMMC_GetCmdResp2+0x88>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a1f      	ldr	r2, [pc, #124]	; (8014608 <SDMMC_GetCmdResp2+0x8c>)
 801458a:	fba2 2303 	umull	r2, r3, r2, r3
 801458e:	0a5b      	lsrs	r3, r3, #9
 8014590:	f241 3288 	movw	r2, #5000	; 0x1388
 8014594:	fb02 f303 	mul.w	r3, r2, r3
 8014598:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	1e5a      	subs	r2, r3, #1
 801459e:	60fa      	str	r2, [r7, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d102      	bne.n	80145aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80145a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80145a8:	e026      	b.n	80145f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d0ef      	beq.n	801459a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1ea      	bne.n	801459a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145c8:	f003 0304 	and.w	r3, r3, #4
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d004      	beq.n	80145da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2204      	movs	r2, #4
 80145d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80145d6:	2304      	movs	r3, #4
 80145d8:	e00e      	b.n	80145f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145de:	f003 0301 	and.w	r3, r3, #1
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d004      	beq.n	80145f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2201      	movs	r2, #1
 80145ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80145ec:	2301      	movs	r3, #1
 80145ee:	e003      	b.n	80145f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4a06      	ldr	r2, [pc, #24]	; (801460c <SDMMC_GetCmdResp2+0x90>)
 80145f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80145f6:	2300      	movs	r3, #0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3714      	adds	r7, #20
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	20000018 	.word	0x20000018
 8014608:	10624dd3 	.word	0x10624dd3
 801460c:	002000c5 	.word	0x002000c5

08014610 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014610:	b480      	push	{r7}
 8014612:	b085      	sub	sp, #20
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014618:	4b1a      	ldr	r3, [pc, #104]	; (8014684 <SDMMC_GetCmdResp3+0x74>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a1a      	ldr	r2, [pc, #104]	; (8014688 <SDMMC_GetCmdResp3+0x78>)
 801461e:	fba2 2303 	umull	r2, r3, r2, r3
 8014622:	0a5b      	lsrs	r3, r3, #9
 8014624:	f241 3288 	movw	r2, #5000	; 0x1388
 8014628:	fb02 f303 	mul.w	r3, r2, r3
 801462c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	1e5a      	subs	r2, r3, #1
 8014632:	60fa      	str	r2, [r7, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d102      	bne.n	801463e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801463c:	e01b      	b.n	8014676 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014642:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801464a:	2b00      	cmp	r3, #0
 801464c:	d0ef      	beq.n	801462e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1ea      	bne.n	801462e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801465c:	f003 0304 	and.w	r3, r3, #4
 8014660:	2b00      	cmp	r3, #0
 8014662:	d004      	beq.n	801466e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	2204      	movs	r2, #4
 8014668:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801466a:	2304      	movs	r3, #4
 801466c:	e003      	b.n	8014676 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	4a06      	ldr	r2, [pc, #24]	; (801468c <SDMMC_GetCmdResp3+0x7c>)
 8014672:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014674:	2300      	movs	r3, #0
}
 8014676:	4618      	mov	r0, r3
 8014678:	3714      	adds	r7, #20
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	20000018 	.word	0x20000018
 8014688:	10624dd3 	.word	0x10624dd3
 801468c:	002000c5 	.word	0x002000c5

08014690 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	460b      	mov	r3, r1
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801469e:	4b35      	ldr	r3, [pc, #212]	; (8014774 <SDMMC_GetCmdResp6+0xe4>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	4a35      	ldr	r2, [pc, #212]	; (8014778 <SDMMC_GetCmdResp6+0xe8>)
 80146a4:	fba2 2303 	umull	r2, r3, r2, r3
 80146a8:	0a5b      	lsrs	r3, r3, #9
 80146aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80146ae:	fb02 f303 	mul.w	r3, r2, r3
 80146b2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	1e5a      	subs	r2, r3, #1
 80146b8:	61fa      	str	r2, [r7, #28]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d102      	bne.n	80146c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80146be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80146c2:	e052      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146c8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d0ef      	beq.n	80146b4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d1ea      	bne.n	80146b4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146e2:	f003 0304 	and.w	r3, r3, #4
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d004      	beq.n	80146f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2204      	movs	r2, #4
 80146ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80146f0:	2304      	movs	r3, #4
 80146f2:	e03a      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146f8:	f003 0301 	and.w	r3, r3, #1
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d004      	beq.n	801470a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2201      	movs	r2, #1
 8014704:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014706:	2301      	movs	r3, #1
 8014708:	e02f      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7ff fb7c 	bl	8013e08 <SDMMC_GetCommandResponse>
 8014710:	4603      	mov	r3, r0
 8014712:	461a      	mov	r2, r3
 8014714:	7afb      	ldrb	r3, [r7, #11]
 8014716:	4293      	cmp	r3, r2
 8014718:	d001      	beq.n	801471e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801471a:	2301      	movs	r3, #1
 801471c:	e025      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	4a16      	ldr	r2, [pc, #88]	; (801477c <SDMMC_GetCmdResp6+0xec>)
 8014722:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014724:	2100      	movs	r1, #0
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	f7ff fb7b 	bl	8013e22 <SDMMC_GetResponse>
 801472c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014734:	2b00      	cmp	r3, #0
 8014736:	d106      	bne.n	8014746 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	0c1b      	lsrs	r3, r3, #16
 801473c:	b29a      	uxth	r2, r3
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014742:	2300      	movs	r3, #0
 8014744:	e011      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801474c:	2b00      	cmp	r3, #0
 801474e:	d002      	beq.n	8014756 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014754:	e009      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801475c:	2b00      	cmp	r3, #0
 801475e:	d002      	beq.n	8014766 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014764:	e001      	b.n	801476a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801476a:	4618      	mov	r0, r3
 801476c:	3720      	adds	r7, #32
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	20000018 	.word	0x20000018
 8014778:	10624dd3 	.word	0x10624dd3
 801477c:	002000c5 	.word	0x002000c5

08014780 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014780:	b480      	push	{r7}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014788:	4b22      	ldr	r3, [pc, #136]	; (8014814 <SDMMC_GetCmdResp7+0x94>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a22      	ldr	r2, [pc, #136]	; (8014818 <SDMMC_GetCmdResp7+0x98>)
 801478e:	fba2 2303 	umull	r2, r3, r2, r3
 8014792:	0a5b      	lsrs	r3, r3, #9
 8014794:	f241 3288 	movw	r2, #5000	; 0x1388
 8014798:	fb02 f303 	mul.w	r3, r2, r3
 801479c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	1e5a      	subs	r2, r3, #1
 80147a2:	60fa      	str	r2, [r7, #12]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d102      	bne.n	80147ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80147a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80147ac:	e02c      	b.n	8014808 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d0ef      	beq.n	801479e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d1ea      	bne.n	801479e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147cc:	f003 0304 	and.w	r3, r3, #4
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d004      	beq.n	80147de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2204      	movs	r2, #4
 80147d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80147da:	2304      	movs	r3, #4
 80147dc:	e014      	b.n	8014808 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147e2:	f003 0301 	and.w	r3, r3, #1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d004      	beq.n	80147f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2201      	movs	r2, #1
 80147ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80147f0:	2301      	movs	r3, #1
 80147f2:	e009      	b.n	8014808 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2240      	movs	r2, #64	; 0x40
 8014804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014806:	2300      	movs	r3, #0

}
 8014808:	4618      	mov	r0, r3
 801480a:	3714      	adds	r7, #20
 801480c:	46bd      	mov	sp, r7
 801480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014812:	4770      	bx	lr
 8014814:	20000018 	.word	0x20000018
 8014818:	10624dd3 	.word	0x10624dd3

0801481c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801481c:	b480      	push	{r7}
 801481e:	b085      	sub	sp, #20
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014824:	4b11      	ldr	r3, [pc, #68]	; (801486c <SDMMC_GetCmdError+0x50>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	4a11      	ldr	r2, [pc, #68]	; (8014870 <SDMMC_GetCmdError+0x54>)
 801482a:	fba2 2303 	umull	r2, r3, r2, r3
 801482e:	0a5b      	lsrs	r3, r3, #9
 8014830:	f241 3288 	movw	r2, #5000	; 0x1388
 8014834:	fb02 f303 	mul.w	r3, r2, r3
 8014838:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	1e5a      	subs	r2, r3, #1
 801483e:	60fa      	str	r2, [r7, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d102      	bne.n	801484a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014848:	e009      	b.n	801485e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014852:	2b00      	cmp	r3, #0
 8014854:	d0f1      	beq.n	801483a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	4a06      	ldr	r2, [pc, #24]	; (8014874 <SDMMC_GetCmdError+0x58>)
 801485a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3714      	adds	r7, #20
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	20000018 	.word	0x20000018
 8014870:	10624dd3 	.word	0x10624dd3
 8014874:	002000c5 	.word	0x002000c5

08014878 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014878:	b084      	sub	sp, #16
 801487a:	b580      	push	{r7, lr}
 801487c:	b084      	sub	sp, #16
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	f107 001c 	add.w	r0, r7, #28
 8014886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	2b01      	cmp	r3, #1
 801488e:	d120      	bne.n	80148d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	68da      	ldr	r2, [r3, #12]
 80148a0:	4b2a      	ldr	r3, [pc, #168]	; (801494c <USB_CoreInit+0xd4>)
 80148a2:	4013      	ands	r3, r2
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80148b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148b6:	2b01      	cmp	r3, #1
 80148b8:	d105      	bne.n	80148c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 f9ee 	bl	8014ca8 <USB_CoreReset>
 80148cc:	4603      	mov	r3, r0
 80148ce:	73fb      	strb	r3, [r7, #15]
 80148d0:	e01a      	b.n	8014908 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 f9e2 	bl	8014ca8 <USB_CoreReset>
 80148e4:	4603      	mov	r3, r0
 80148e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80148e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d106      	bne.n	80148fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	639a      	str	r2, [r3, #56]	; 0x38
 80148fa:	e005      	b.n	8014908 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490a:	2b01      	cmp	r3, #1
 801490c:	d116      	bne.n	801493c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014912:	b29a      	uxth	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801491c:	4b0c      	ldr	r3, [pc, #48]	; (8014950 <USB_CoreInit+0xd8>)
 801491e:	4313      	orrs	r3, r2
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	689b      	ldr	r3, [r3, #8]
 8014928:	f043 0206 	orr.w	r2, r3, #6
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	689b      	ldr	r3, [r3, #8]
 8014934:	f043 0220 	orr.w	r2, r3, #32
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801493c:	7bfb      	ldrb	r3, [r7, #15]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014948:	b004      	add	sp, #16
 801494a:	4770      	bx	lr
 801494c:	ffbdffbf 	.word	0xffbdffbf
 8014950:	03ee0000 	.word	0x03ee0000

08014954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	689b      	ldr	r3, [r3, #8]
 8014960:	f043 0201 	orr.w	r2, r3, #1
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014968:	2300      	movs	r3, #0
}
 801496a:	4618      	mov	r0, r3
 801496c:	370c      	adds	r7, #12
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr

08014976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014976:	b480      	push	{r7}
 8014978:	b083      	sub	sp, #12
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	689b      	ldr	r3, [r3, #8]
 8014982:	f023 0201 	bic.w	r2, r3, #1
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801498a:	2300      	movs	r3, #0
}
 801498c:	4618      	mov	r0, r3
 801498e:	370c      	adds	r7, #12
 8014990:	46bd      	mov	sp, r7
 8014992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014996:	4770      	bx	lr

08014998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b084      	sub	sp, #16
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	460b      	mov	r3, r1
 80149a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80149a4:	2300      	movs	r3, #0
 80149a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80149b4:	78fb      	ldrb	r3, [r7, #3]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d115      	bne.n	80149e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80149c6:	2001      	movs	r0, #1
 80149c8:	f7f0 faac 	bl	8004f24 <HAL_Delay>
      ms++;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	3301      	adds	r3, #1
 80149d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 f95a 	bl	8014c8c <USB_GetMode>
 80149d8:	4603      	mov	r3, r0
 80149da:	2b01      	cmp	r3, #1
 80149dc:	d01e      	beq.n	8014a1c <USB_SetCurrentMode+0x84>
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2b31      	cmp	r3, #49	; 0x31
 80149e2:	d9f0      	bls.n	80149c6 <USB_SetCurrentMode+0x2e>
 80149e4:	e01a      	b.n	8014a1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80149e6:	78fb      	ldrb	r3, [r7, #3]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d115      	bne.n	8014a18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80149f8:	2001      	movs	r0, #1
 80149fa:	f7f0 fa93 	bl	8004f24 <HAL_Delay>
      ms++;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	3301      	adds	r3, #1
 8014a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 f941 	bl	8014c8c <USB_GetMode>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d005      	beq.n	8014a1c <USB_SetCurrentMode+0x84>
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2b31      	cmp	r3, #49	; 0x31
 8014a14:	d9f0      	bls.n	80149f8 <USB_SetCurrentMode+0x60>
 8014a16:	e001      	b.n	8014a1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e005      	b.n	8014a28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2b32      	cmp	r3, #50	; 0x32
 8014a20:	d101      	bne.n	8014a26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014a22:	2301      	movs	r3, #1
 8014a24:	e000      	b.n	8014a28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014a26:	2300      	movs	r3, #0
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3710      	adds	r7, #16
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	3301      	adds	r3, #1
 8014a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	4a13      	ldr	r2, [pc, #76]	; (8014a94 <USB_FlushTxFifo+0x64>)
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d901      	bls.n	8014a50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014a4c:	2303      	movs	r3, #3
 8014a4e:	e01b      	b.n	8014a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	691b      	ldr	r3, [r3, #16]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	daf2      	bge.n	8014a3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	019b      	lsls	r3, r3, #6
 8014a60:	f043 0220 	orr.w	r2, r3, #32
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	4a08      	ldr	r2, [pc, #32]	; (8014a94 <USB_FlushTxFifo+0x64>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d901      	bls.n	8014a7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014a76:	2303      	movs	r3, #3
 8014a78:	e006      	b.n	8014a88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	691b      	ldr	r3, [r3, #16]
 8014a7e:	f003 0320 	and.w	r3, r3, #32
 8014a82:	2b20      	cmp	r3, #32
 8014a84:	d0f0      	beq.n	8014a68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014a86:	2300      	movs	r3, #0
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3714      	adds	r7, #20
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a92:	4770      	bx	lr
 8014a94:	00030d40 	.word	0x00030d40

08014a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	4a11      	ldr	r2, [pc, #68]	; (8014af4 <USB_FlushRxFifo+0x5c>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d901      	bls.n	8014ab6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014ab2:	2303      	movs	r3, #3
 8014ab4:	e018      	b.n	8014ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	691b      	ldr	r3, [r3, #16]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	daf2      	bge.n	8014aa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2210      	movs	r2, #16
 8014ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	3301      	adds	r3, #1
 8014acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	4a08      	ldr	r2, [pc, #32]	; (8014af4 <USB_FlushRxFifo+0x5c>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d901      	bls.n	8014ada <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014ad6:	2303      	movs	r3, #3
 8014ad8:	e006      	b.n	8014ae8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	691b      	ldr	r3, [r3, #16]
 8014ade:	f003 0310 	and.w	r3, r3, #16
 8014ae2:	2b10      	cmp	r3, #16
 8014ae4:	d0f0      	beq.n	8014ac8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014ae6:	2300      	movs	r3, #0
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3714      	adds	r7, #20
 8014aec:	46bd      	mov	sp, r7
 8014aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af2:	4770      	bx	lr
 8014af4:	00030d40 	.word	0x00030d40

08014af8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b089      	sub	sp, #36	; 0x24
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	60b9      	str	r1, [r7, #8]
 8014b02:	4611      	mov	r1, r2
 8014b04:	461a      	mov	r2, r3
 8014b06:	460b      	mov	r3, r1
 8014b08:	71fb      	strb	r3, [r7, #7]
 8014b0a:	4613      	mov	r3, r2
 8014b0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d123      	bne.n	8014b66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014b1e:	88bb      	ldrh	r3, [r7, #4]
 8014b20:	3303      	adds	r3, #3
 8014b22:	089b      	lsrs	r3, r3, #2
 8014b24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014b26:	2300      	movs	r3, #0
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	e018      	b.n	8014b5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014b2c:	79fb      	ldrb	r3, [r7, #7]
 8014b2e:	031a      	lsls	r2, r3, #12
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	4413      	add	r3, r2
 8014b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b38:	461a      	mov	r2, r3
 8014b3a:	69fb      	ldr	r3, [r7, #28]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	3301      	adds	r3, #1
 8014b44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014b52:	69fb      	ldr	r3, [r7, #28]
 8014b54:	3301      	adds	r3, #1
 8014b56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	61bb      	str	r3, [r7, #24]
 8014b5e:	69ba      	ldr	r2, [r7, #24]
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d3e2      	bcc.n	8014b2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014b66:	2300      	movs	r3, #0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3724      	adds	r7, #36	; 0x24
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b08b      	sub	sp, #44	; 0x2c
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	4613      	mov	r3, r2
 8014b80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014b8a:	88fb      	ldrh	r3, [r7, #6]
 8014b8c:	089b      	lsrs	r3, r3, #2
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014b92:	88fb      	ldrh	r3, [r7, #6]
 8014b94:	f003 0303 	and.w	r3, r3, #3
 8014b98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	623b      	str	r3, [r7, #32]
 8014b9e:	e014      	b.n	8014bca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014baa:	601a      	str	r2, [r3, #0]
    pDest++;
 8014bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bae:	3301      	adds	r3, #1
 8014bb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bba:	3301      	adds	r3, #1
 8014bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014bc4:	6a3b      	ldr	r3, [r7, #32]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	623b      	str	r3, [r7, #32]
 8014bca:	6a3a      	ldr	r2, [r7, #32]
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d3e6      	bcc.n	8014ba0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014bd2:	8bfb      	ldrh	r3, [r7, #30]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d01e      	beq.n	8014c16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014be2:	461a      	mov	r2, r3
 8014be4:	f107 0310 	add.w	r3, r7, #16
 8014be8:	6812      	ldr	r2, [r2, #0]
 8014bea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014bec:	693a      	ldr	r2, [r7, #16]
 8014bee:	6a3b      	ldr	r3, [r7, #32]
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	00db      	lsls	r3, r3, #3
 8014bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8014bf8:	b2da      	uxtb	r2, r3
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	701a      	strb	r2, [r3, #0]
      i++;
 8014bfe:	6a3b      	ldr	r3, [r7, #32]
 8014c00:	3301      	adds	r3, #1
 8014c02:	623b      	str	r3, [r7, #32]
      pDest++;
 8014c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c06:	3301      	adds	r3, #1
 8014c08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014c0a:	8bfb      	ldrh	r3, [r7, #30]
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014c10:	8bfb      	ldrh	r3, [r7, #30]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d1ea      	bne.n	8014bec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	372c      	adds	r7, #44	; 0x2c
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr

08014c24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	699b      	ldr	r3, [r3, #24]
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	4013      	ands	r3, r2
 8014c3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3714      	adds	r7, #20
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr

08014c4a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014c4a:	b480      	push	{r7}
 8014c4c:	b085      	sub	sp, #20
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
 8014c52:	460b      	mov	r3, r1
 8014c54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	015a      	lsls	r2, r3, #5
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	4413      	add	r3, r2
 8014c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014c6a:	78fb      	ldrb	r3, [r7, #3]
 8014c6c:	015a      	lsls	r2, r3, #5
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	4413      	add	r3, r2
 8014c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	68ba      	ldr	r2, [r7, #8]
 8014c7a:	4013      	ands	r3, r2
 8014c7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014c7e:	68bb      	ldr	r3, [r7, #8]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3714      	adds	r7, #20
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr

08014c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b083      	sub	sp, #12
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	695b      	ldr	r3, [r3, #20]
 8014c98:	f003 0301 	and.w	r3, r3, #1
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	370c      	adds	r7, #12
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca6:	4770      	bx	lr

08014ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	4a13      	ldr	r2, [pc, #76]	; (8014d0c <USB_CoreReset+0x64>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d901      	bls.n	8014cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014cc2:	2303      	movs	r3, #3
 8014cc4:	e01b      	b.n	8014cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	691b      	ldr	r3, [r3, #16]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	daf2      	bge.n	8014cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	691b      	ldr	r3, [r3, #16]
 8014cd6:	f043 0201 	orr.w	r2, r3, #1
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	4a09      	ldr	r2, [pc, #36]	; (8014d0c <USB_CoreReset+0x64>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d901      	bls.n	8014cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014cec:	2303      	movs	r3, #3
 8014cee:	e006      	b.n	8014cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	f003 0301 	and.w	r3, r3, #1
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d0f0      	beq.n	8014cde <USB_CoreReset+0x36>

  return HAL_OK;
 8014cfc:	2300      	movs	r3, #0
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3714      	adds	r7, #20
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr
 8014d0a:	bf00      	nop
 8014d0c:	00030d40 	.word	0x00030d40

08014d10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014d10:	b084      	sub	sp, #16
 8014d12:	b580      	push	{r7, lr}
 8014d14:	b086      	sub	sp, #24
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
 8014d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014d22:	2300      	movs	r3, #0
 8014d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014d30:	461a      	mov	r2, r3
 8014d32:	2300      	movs	r3, #0
 8014d34:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d018      	beq.n	8014d8c <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d10a      	bne.n	8014d76 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	68fa      	ldr	r2, [r7, #12]
 8014d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014d6e:	f043 0304 	orr.w	r3, r3, #4
 8014d72:	6013      	str	r3, [r2, #0]
 8014d74:	e014      	b.n	8014da0 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68fa      	ldr	r2, [r7, #12]
 8014d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014d84:	f023 0304 	bic.w	r3, r3, #4
 8014d88:	6013      	str	r3, [r2, #0]
 8014d8a:	e009      	b.n	8014da0 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	68fa      	ldr	r2, [r7, #12]
 8014d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014d9a:	f023 0304 	bic.w	r3, r3, #4
 8014d9e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014da0:	2110      	movs	r1, #16
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7ff fe44 	bl	8014a30 <USB_FlushTxFifo>
 8014da8:	4603      	mov	r3, r0
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d001      	beq.n	8014db2 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8014dae:	2301      	movs	r3, #1
 8014db0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f7ff fe70 	bl	8014a98 <USB_FlushRxFifo>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d001      	beq.n	8014dc2 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	613b      	str	r3, [r7, #16]
 8014dc6:	e015      	b.n	8014df4 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	015a      	lsls	r2, r3, #5
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	4413      	add	r3, r2
 8014dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dda:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	015a      	lsls	r2, r3, #5
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	4413      	add	r3, r2
 8014de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014de8:	461a      	mov	r2, r3
 8014dea:	2300      	movs	r3, #0
 8014dec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	3301      	adds	r3, #1
 8014df2:	613b      	str	r3, [r7, #16]
 8014df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df6:	693a      	ldr	r2, [r7, #16]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d3e5      	bcc.n	8014dc8 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e08:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d00b      	beq.n	8014e2e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014e1c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4a13      	ldr	r2, [pc, #76]	; (8014e70 <USB_HostInit+0x160>)
 8014e22:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4a13      	ldr	r2, [pc, #76]	; (8014e74 <USB_HostInit+0x164>)
 8014e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8014e2c:	e009      	b.n	8014e42 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2280      	movs	r2, #128	; 0x80
 8014e32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4a10      	ldr	r2, [pc, #64]	; (8014e78 <USB_HostInit+0x168>)
 8014e38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	4a0f      	ldr	r2, [pc, #60]	; (8014e7c <USB_HostInit+0x16c>)
 8014e3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d105      	bne.n	8014e54 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	699b      	ldr	r3, [r3, #24]
 8014e4c:	f043 0210 	orr.w	r2, r3, #16
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	699a      	ldr	r2, [r3, #24]
 8014e58:	4b09      	ldr	r3, [pc, #36]	; (8014e80 <USB_HostInit+0x170>)
 8014e5a:	4313      	orrs	r3, r2
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8014e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3718      	adds	r7, #24
 8014e66:	46bd      	mov	sp, r7
 8014e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e6c:	b004      	add	sp, #16
 8014e6e:	4770      	bx	lr
 8014e70:	01000200 	.word	0x01000200
 8014e74:	00e00300 	.word	0x00e00300
 8014e78:	00600080 	.word	0x00600080
 8014e7c:	004000e0 	.word	0x004000e0
 8014e80:	a3200008 	.word	0xa3200008

08014e84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8014e84:	b480      	push	{r7}
 8014e86:	b085      	sub	sp, #20
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	68fa      	ldr	r2, [r7, #12]
 8014e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014ea2:	f023 0303 	bic.w	r3, r3, #3
 8014ea6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	78fb      	ldrb	r3, [r7, #3]
 8014eb2:	f003 0303 	and.w	r3, r3, #3
 8014eb6:	68f9      	ldr	r1, [r7, #12]
 8014eb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014ebc:	4313      	orrs	r3, r2
 8014ebe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014ec0:	78fb      	ldrb	r3, [r7, #3]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d107      	bne.n	8014ed6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ecc:	461a      	mov	r2, r3
 8014ece:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8014ed2:	6053      	str	r3, [r2, #4]
 8014ed4:	e00c      	b.n	8014ef0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8014ed6:	78fb      	ldrb	r3, [r7, #3]
 8014ed8:	2b02      	cmp	r3, #2
 8014eda:	d107      	bne.n	8014eec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	f241 7370 	movw	r3, #6000	; 0x1770
 8014ee8:	6053      	str	r3, [r2, #4]
 8014eea:	e001      	b.n	8014ef0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8014eec:	2301      	movs	r3, #1
 8014eee:	e000      	b.n	8014ef2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8014ef0:	2300      	movs	r3, #0
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3714      	adds	r7, #20
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr

08014efe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b084      	sub	sp, #16
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014f1e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	68fa      	ldr	r2, [r7, #12]
 8014f24:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f2c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8014f2e:	2064      	movs	r0, #100	; 0x64
 8014f30:	f7ef fff8 	bl	8004f24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	68fa      	ldr	r2, [r7, #12]
 8014f38:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f40:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8014f42:	200a      	movs	r0, #10
 8014f44:	f7ef ffee 	bl	8004f24 <HAL_Delay>

  return HAL_OK;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8014f52:	b480      	push	{r7}
 8014f54:	b085      	sub	sp, #20
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014f62:	2300      	movs	r3, #0
 8014f64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014f76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d109      	bne.n	8014f96 <USB_DriveVbus+0x44>
 8014f82:	78fb      	ldrb	r3, [r7, #3]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d106      	bne.n	8014f96 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	68fa      	ldr	r2, [r7, #12]
 8014f8c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014f94:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014fa0:	d109      	bne.n	8014fb6 <USB_DriveVbus+0x64>
 8014fa2:	78fb      	ldrb	r3, [r7, #3]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d106      	bne.n	8014fb6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014fb4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3714      	adds	r7, #20
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr

08014fc4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b085      	sub	sp, #20
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	0c5b      	lsrs	r3, r3, #17
 8014fe2:	f003 0303 	and.w	r3, r3, #3
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3714      	adds	r7, #20
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr

08014ff2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8014ff2:	b480      	push	{r7}
 8014ff4:	b085      	sub	sp, #20
 8014ff6:	af00      	add	r7, sp, #0
 8014ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	b29b      	uxth	r3, r3
}
 8015008:	4618      	mov	r0, r3
 801500a:	3714      	adds	r7, #20
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b088      	sub	sp, #32
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
 801501c:	4608      	mov	r0, r1
 801501e:	4611      	mov	r1, r2
 8015020:	461a      	mov	r2, r3
 8015022:	4603      	mov	r3, r0
 8015024:	70fb      	strb	r3, [r7, #3]
 8015026:	460b      	mov	r3, r1
 8015028:	70bb      	strb	r3, [r7, #2]
 801502a:	4613      	mov	r3, r2
 801502c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801502e:	2300      	movs	r3, #0
 8015030:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8015036:	78fb      	ldrb	r3, [r7, #3]
 8015038:	015a      	lsls	r2, r3, #5
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	4413      	add	r3, r2
 801503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015042:	461a      	mov	r2, r3
 8015044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015048:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801504a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801504e:	2b03      	cmp	r3, #3
 8015050:	d87e      	bhi.n	8015150 <USB_HC_Init+0x13c>
 8015052:	a201      	add	r2, pc, #4	; (adr r2, 8015058 <USB_HC_Init+0x44>)
 8015054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015058:	08015069 	.word	0x08015069
 801505c:	08015113 	.word	0x08015113
 8015060:	08015069 	.word	0x08015069
 8015064:	080150d5 	.word	0x080150d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015068:	78fb      	ldrb	r3, [r7, #3]
 801506a:	015a      	lsls	r2, r3, #5
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	4413      	add	r3, r2
 8015070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015074:	461a      	mov	r2, r3
 8015076:	f240 439d 	movw	r3, #1181	; 0x49d
 801507a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801507c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015080:	2b00      	cmp	r3, #0
 8015082:	da10      	bge.n	80150a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015084:	78fb      	ldrb	r3, [r7, #3]
 8015086:	015a      	lsls	r2, r3, #5
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	4413      	add	r3, r2
 801508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	78fa      	ldrb	r2, [r7, #3]
 8015094:	0151      	lsls	r1, r2, #5
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	440a      	add	r2, r1
 801509a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80150a4:	e057      	b.n	8015156 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d051      	beq.n	8015156 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80150b2:	78fb      	ldrb	r3, [r7, #3]
 80150b4:	015a      	lsls	r2, r3, #5
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	4413      	add	r3, r2
 80150ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	78fa      	ldrb	r2, [r7, #3]
 80150c2:	0151      	lsls	r1, r2, #5
 80150c4:	693a      	ldr	r2, [r7, #16]
 80150c6:	440a      	add	r2, r1
 80150c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80150cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80150d0:	60d3      	str	r3, [r2, #12]
      break;
 80150d2:	e040      	b.n	8015156 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80150d4:	78fb      	ldrb	r3, [r7, #3]
 80150d6:	015a      	lsls	r2, r3, #5
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	4413      	add	r3, r2
 80150dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80150e0:	461a      	mov	r2, r3
 80150e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80150e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80150e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	da34      	bge.n	801515a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80150f0:	78fb      	ldrb	r3, [r7, #3]
 80150f2:	015a      	lsls	r2, r3, #5
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	4413      	add	r3, r2
 80150f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80150fc:	68db      	ldr	r3, [r3, #12]
 80150fe:	78fa      	ldrb	r2, [r7, #3]
 8015100:	0151      	lsls	r1, r2, #5
 8015102:	693a      	ldr	r2, [r7, #16]
 8015104:	440a      	add	r2, r1
 8015106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801510a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801510e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015110:	e023      	b.n	801515a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015112:	78fb      	ldrb	r3, [r7, #3]
 8015114:	015a      	lsls	r2, r3, #5
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	4413      	add	r3, r2
 801511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801511e:	461a      	mov	r2, r3
 8015120:	f240 2325 	movw	r3, #549	; 0x225
 8015124:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015126:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801512a:	2b00      	cmp	r3, #0
 801512c:	da17      	bge.n	801515e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801512e:	78fb      	ldrb	r3, [r7, #3]
 8015130:	015a      	lsls	r2, r3, #5
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	4413      	add	r3, r2
 8015136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	78fa      	ldrb	r2, [r7, #3]
 801513e:	0151      	lsls	r1, r2, #5
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	440a      	add	r2, r1
 8015144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015148:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801514c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801514e:	e006      	b.n	801515e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8015150:	2301      	movs	r3, #1
 8015152:	77fb      	strb	r3, [r7, #31]
      break;
 8015154:	e004      	b.n	8015160 <USB_HC_Init+0x14c>
      break;
 8015156:	bf00      	nop
 8015158:	e002      	b.n	8015160 <USB_HC_Init+0x14c>
      break;
 801515a:	bf00      	nop
 801515c:	e000      	b.n	8015160 <USB_HC_Init+0x14c>
      break;
 801515e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8015160:	78fb      	ldrb	r3, [r7, #3]
 8015162:	015a      	lsls	r2, r3, #5
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	4413      	add	r3, r2
 8015168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	78fa      	ldrb	r2, [r7, #3]
 8015170:	0151      	lsls	r1, r2, #5
 8015172:	693a      	ldr	r2, [r7, #16]
 8015174:	440a      	add	r2, r1
 8015176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801517a:	f043 0302 	orr.w	r3, r3, #2
 801517e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015186:	699a      	ldr	r2, [r3, #24]
 8015188:	78fb      	ldrb	r3, [r7, #3]
 801518a:	f003 030f 	and.w	r3, r3, #15
 801518e:	2101      	movs	r1, #1
 8015190:	fa01 f303 	lsl.w	r3, r1, r3
 8015194:	6939      	ldr	r1, [r7, #16]
 8015196:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801519a:	4313      	orrs	r3, r2
 801519c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	699b      	ldr	r3, [r3, #24]
 80151a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80151aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	da03      	bge.n	80151ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80151b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80151b6:	61bb      	str	r3, [r7, #24]
 80151b8:	e001      	b.n	80151be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80151ba:	2300      	movs	r3, #0
 80151bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7ff ff00 	bl	8014fc4 <USB_GetHostSpeed>
 80151c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80151c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d106      	bne.n	80151dc <USB_HC_Init+0x1c8>
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	d003      	beq.n	80151dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80151d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80151d8:	617b      	str	r3, [r7, #20]
 80151da:	e001      	b.n	80151e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80151dc:	2300      	movs	r3, #0
 80151de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80151e0:	787b      	ldrb	r3, [r7, #1]
 80151e2:	059b      	lsls	r3, r3, #22
 80151e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80151e8:	78bb      	ldrb	r3, [r7, #2]
 80151ea:	02db      	lsls	r3, r3, #11
 80151ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80151f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80151f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80151f6:	049b      	lsls	r3, r3, #18
 80151f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80151fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80151fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015200:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8015204:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	431a      	orrs	r2, r3
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801520e:	78fa      	ldrb	r2, [r7, #3]
 8015210:	0151      	lsls	r1, r2, #5
 8015212:	693a      	ldr	r2, [r7, #16]
 8015214:	440a      	add	r2, r1
 8015216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801521a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801521e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8015220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015224:	2b03      	cmp	r3, #3
 8015226:	d003      	beq.n	8015230 <USB_HC_Init+0x21c>
 8015228:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801522c:	2b01      	cmp	r3, #1
 801522e:	d10f      	bne.n	8015250 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015230:	78fb      	ldrb	r3, [r7, #3]
 8015232:	015a      	lsls	r2, r3, #5
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	4413      	add	r3, r2
 8015238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	78fa      	ldrb	r2, [r7, #3]
 8015240:	0151      	lsls	r1, r2, #5
 8015242:	693a      	ldr	r2, [r7, #16]
 8015244:	440a      	add	r2, r1
 8015246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801524a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801524e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8015250:	7ffb      	ldrb	r3, [r7, #31]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3720      	adds	r7, #32
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop

0801525c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08c      	sub	sp, #48	; 0x30
 8015260:	af02      	add	r7, sp, #8
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	4613      	mov	r3, r2
 8015268:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	785b      	ldrb	r3, [r3, #1]
 8015272:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8015274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015278:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015282:	2b00      	cmp	r3, #0
 8015284:	d02d      	beq.n	80152e2 <USB_HC_StartXfer+0x86>
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	791b      	ldrb	r3, [r3, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d129      	bne.n	80152e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801528e:	79fb      	ldrb	r3, [r7, #7]
 8015290:	2b01      	cmp	r3, #1
 8015292:	d117      	bne.n	80152c4 <USB_HC_StartXfer+0x68>
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	79db      	ldrb	r3, [r3, #7]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d003      	beq.n	80152a4 <USB_HC_StartXfer+0x48>
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	79db      	ldrb	r3, [r3, #7]
 80152a0:	2b02      	cmp	r3, #2
 80152a2:	d10f      	bne.n	80152c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	015a      	lsls	r2, r3, #5
 80152a8:	6a3b      	ldr	r3, [r7, #32]
 80152aa:	4413      	add	r3, r2
 80152ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	69fa      	ldr	r2, [r7, #28]
 80152b4:	0151      	lsls	r1, r2, #5
 80152b6:	6a3a      	ldr	r2, [r7, #32]
 80152b8:	440a      	add	r2, r1
 80152ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80152be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80152c4:	79fb      	ldrb	r3, [r7, #7]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10b      	bne.n	80152e2 <USB_HC_StartXfer+0x86>
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	795b      	ldrb	r3, [r3, #5]
 80152ce:	2b01      	cmp	r3, #1
 80152d0:	d107      	bne.n	80152e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	785b      	ldrb	r3, [r3, #1]
 80152d6:	4619      	mov	r1, r3
 80152d8:	68f8      	ldr	r0, [r7, #12]
 80152da:	f000 fa0f 	bl	80156fc <USB_DoPing>
      return HAL_OK;
 80152de:	2300      	movs	r3, #0
 80152e0:	e0f8      	b.n	80154d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	695b      	ldr	r3, [r3, #20]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d018      	beq.n	801531c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	695b      	ldr	r3, [r3, #20]
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	8912      	ldrh	r2, [r2, #8]
 80152f2:	4413      	add	r3, r2
 80152f4:	3b01      	subs	r3, #1
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	8912      	ldrh	r2, [r2, #8]
 80152fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80152fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8015300:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015302:	8b7b      	ldrh	r3, [r7, #26]
 8015304:	429a      	cmp	r2, r3
 8015306:	d90b      	bls.n	8015320 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8015308:	8b7b      	ldrh	r3, [r7, #26]
 801530a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801530c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	8912      	ldrh	r2, [r2, #8]
 8015312:	fb03 f202 	mul.w	r2, r3, r2
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	611a      	str	r2, [r3, #16]
 801531a:	e001      	b.n	8015320 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 801531c:	2301      	movs	r3, #1
 801531e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	78db      	ldrb	r3, [r3, #3]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d007      	beq.n	8015338 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801532a:	68ba      	ldr	r2, [r7, #8]
 801532c:	8912      	ldrh	r2, [r2, #8]
 801532e:	fb03 f202 	mul.w	r2, r3, r2
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	611a      	str	r2, [r3, #16]
 8015336:	e003      	b.n	8015340 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	695a      	ldr	r2, [r3, #20]
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	691b      	ldr	r3, [r3, #16]
 8015344:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801534a:	04d9      	lsls	r1, r3, #19
 801534c:	4b63      	ldr	r3, [pc, #396]	; (80154dc <USB_HC_StartXfer+0x280>)
 801534e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015350:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	7a9b      	ldrb	r3, [r3, #10]
 8015356:	075b      	lsls	r3, r3, #29
 8015358:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801535c:	69f9      	ldr	r1, [r7, #28]
 801535e:	0148      	lsls	r0, r1, #5
 8015360:	6a39      	ldr	r1, [r7, #32]
 8015362:	4401      	add	r1, r0
 8015364:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015368:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801536a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801536c:	79fb      	ldrb	r3, [r7, #7]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d009      	beq.n	8015386 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	68d9      	ldr	r1, [r3, #12]
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	015a      	lsls	r2, r3, #5
 801537a:	6a3b      	ldr	r3, [r7, #32]
 801537c:	4413      	add	r3, r2
 801537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015382:	460a      	mov	r2, r1
 8015384:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8015386:	6a3b      	ldr	r3, [r7, #32]
 8015388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	f003 0301 	and.w	r3, r3, #1
 8015392:	2b00      	cmp	r3, #0
 8015394:	bf0c      	ite	eq
 8015396:	2301      	moveq	r3, #1
 8015398:	2300      	movne	r3, #0
 801539a:	b2db      	uxtb	r3, r3
 801539c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	015a      	lsls	r2, r3, #5
 80153a2:	6a3b      	ldr	r3, [r7, #32]
 80153a4:	4413      	add	r3, r2
 80153a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	69fa      	ldr	r2, [r7, #28]
 80153ae:	0151      	lsls	r1, r2, #5
 80153b0:	6a3a      	ldr	r2, [r7, #32]
 80153b2:	440a      	add	r2, r1
 80153b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80153b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80153bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	015a      	lsls	r2, r3, #5
 80153c2:	6a3b      	ldr	r3, [r7, #32]
 80153c4:	4413      	add	r3, r2
 80153c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	7e7b      	ldrb	r3, [r7, #25]
 80153ce:	075b      	lsls	r3, r3, #29
 80153d0:	69f9      	ldr	r1, [r7, #28]
 80153d2:	0148      	lsls	r0, r1, #5
 80153d4:	6a39      	ldr	r1, [r7, #32]
 80153d6:	4401      	add	r1, r0
 80153d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80153dc:	4313      	orrs	r3, r2
 80153de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	015a      	lsls	r2, r3, #5
 80153e4:	6a3b      	ldr	r3, [r7, #32]
 80153e6:	4413      	add	r3, r2
 80153e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80153f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	78db      	ldrb	r3, [r3, #3]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d004      	beq.n	801540a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015406:	613b      	str	r3, [r7, #16]
 8015408:	e003      	b.n	8015412 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015410:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015412:	693b      	ldr	r3, [r7, #16]
 8015414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015418:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	015a      	lsls	r2, r3, #5
 801541e:	6a3b      	ldr	r3, [r7, #32]
 8015420:	4413      	add	r3, r2
 8015422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015426:	461a      	mov	r2, r3
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801542c:	79fb      	ldrb	r3, [r7, #7]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d001      	beq.n	8015436 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015432:	2300      	movs	r3, #0
 8015434:	e04e      	b.n	80154d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	78db      	ldrb	r3, [r3, #3]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d149      	bne.n	80154d2 <USB_HC_StartXfer+0x276>
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d045      	beq.n	80154d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	79db      	ldrb	r3, [r3, #7]
 801544a:	2b03      	cmp	r3, #3
 801544c:	d830      	bhi.n	80154b0 <USB_HC_StartXfer+0x254>
 801544e:	a201      	add	r2, pc, #4	; (adr r2, 8015454 <USB_HC_StartXfer+0x1f8>)
 8015450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015454:	08015465 	.word	0x08015465
 8015458:	08015489 	.word	0x08015489
 801545c:	08015465 	.word	0x08015465
 8015460:	08015489 	.word	0x08015489
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	695b      	ldr	r3, [r3, #20]
 8015468:	3303      	adds	r3, #3
 801546a:	089b      	lsrs	r3, r3, #2
 801546c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801546e:	8afa      	ldrh	r2, [r7, #22]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015474:	b29b      	uxth	r3, r3
 8015476:	429a      	cmp	r2, r3
 8015478:	d91c      	bls.n	80154b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	699b      	ldr	r3, [r3, #24]
 801547e:	f043 0220 	orr.w	r2, r3, #32
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	619a      	str	r2, [r3, #24]
        }
        break;
 8015486:	e015      	b.n	80154b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	695b      	ldr	r3, [r3, #20]
 801548c:	3303      	adds	r3, #3
 801548e:	089b      	lsrs	r3, r3, #2
 8015490:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015492:	8afa      	ldrh	r2, [r7, #22]
 8015494:	6a3b      	ldr	r3, [r7, #32]
 8015496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801549a:	691b      	ldr	r3, [r3, #16]
 801549c:	b29b      	uxth	r3, r3
 801549e:	429a      	cmp	r2, r3
 80154a0:	d90a      	bls.n	80154b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	699b      	ldr	r3, [r3, #24]
 80154a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80154ae:	e003      	b.n	80154b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80154b0:	bf00      	nop
 80154b2:	e002      	b.n	80154ba <USB_HC_StartXfer+0x25e>
        break;
 80154b4:	bf00      	nop
 80154b6:	e000      	b.n	80154ba <USB_HC_StartXfer+0x25e>
        break;
 80154b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	68d9      	ldr	r1, [r3, #12]
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	785a      	ldrb	r2, [r3, #1]
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	695b      	ldr	r3, [r3, #20]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	2000      	movs	r0, #0
 80154ca:	9000      	str	r0, [sp, #0]
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f7ff fb13 	bl	8014af8 <USB_WritePacket>
  }

  return HAL_OK;
 80154d2:	2300      	movs	r3, #0
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3728      	adds	r7, #40	; 0x28
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	1ff80000 	.word	0x1ff80000

080154e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b085      	sub	sp, #20
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80154f2:	695b      	ldr	r3, [r3, #20]
 80154f4:	b29b      	uxth	r3, r3
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3714      	adds	r7, #20
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr

08015502 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015502:	b480      	push	{r7}
 8015504:	b089      	sub	sp, #36	; 0x24
 8015506:	af00      	add	r7, sp, #0
 8015508:	6078      	str	r0, [r7, #4]
 801550a:	460b      	mov	r3, r1
 801550c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015512:	78fb      	ldrb	r3, [r7, #3]
 8015514:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8015516:	2300      	movs	r3, #0
 8015518:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	015a      	lsls	r2, r3, #5
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	4413      	add	r3, r2
 8015522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	0c9b      	lsrs	r3, r3, #18
 801552a:	f003 0303 	and.w	r3, r3, #3
 801552e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	015a      	lsls	r2, r3, #5
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	4413      	add	r3, r2
 8015538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	0fdb      	lsrs	r3, r3, #31
 8015540:	f003 0301 	and.w	r3, r3, #1
 8015544:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	689b      	ldr	r3, [r3, #8]
 801554a:	f003 0320 	and.w	r3, r3, #32
 801554e:	2b20      	cmp	r3, #32
 8015550:	d104      	bne.n	801555c <USB_HC_Halt+0x5a>
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d101      	bne.n	801555c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8015558:	2300      	movs	r3, #0
 801555a:	e0c8      	b.n	80156ee <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d002      	beq.n	8015568 <USB_HC_Halt+0x66>
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	2b02      	cmp	r3, #2
 8015566:	d163      	bne.n	8015630 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015568:	69bb      	ldr	r3, [r7, #24]
 801556a:	015a      	lsls	r2, r3, #5
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	4413      	add	r3, r2
 8015570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	69ba      	ldr	r2, [r7, #24]
 8015578:	0151      	lsls	r1, r2, #5
 801557a:	69fa      	ldr	r2, [r7, #28]
 801557c:	440a      	add	r2, r1
 801557e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015586:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	689b      	ldr	r3, [r3, #8]
 801558c:	f003 0320 	and.w	r3, r3, #32
 8015590:	2b00      	cmp	r3, #0
 8015592:	f040 80ab 	bne.w	80156ec <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801559a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d133      	bne.n	801560a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	015a      	lsls	r2, r3, #5
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	4413      	add	r3, r2
 80155aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	69ba      	ldr	r2, [r7, #24]
 80155b2:	0151      	lsls	r1, r2, #5
 80155b4:	69fa      	ldr	r2, [r7, #28]
 80155b6:	440a      	add	r2, r1
 80155b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	015a      	lsls	r2, r3, #5
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	4413      	add	r3, r2
 80155ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	69ba      	ldr	r2, [r7, #24]
 80155d2:	0151      	lsls	r1, r2, #5
 80155d4:	69fa      	ldr	r2, [r7, #28]
 80155d6:	440a      	add	r2, r1
 80155d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80155dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80155e0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	3301      	adds	r3, #1
 80155e6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80155ee:	d81d      	bhi.n	801562c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80155f0:	69bb      	ldr	r3, [r7, #24]
 80155f2:	015a      	lsls	r2, r3, #5
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	4413      	add	r3, r2
 80155f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015606:	d0ec      	beq.n	80155e2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015608:	e070      	b.n	80156ec <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	015a      	lsls	r2, r3, #5
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	4413      	add	r3, r2
 8015612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	69ba      	ldr	r2, [r7, #24]
 801561a:	0151      	lsls	r1, r2, #5
 801561c:	69fa      	ldr	r2, [r7, #28]
 801561e:	440a      	add	r2, r1
 8015620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015628:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801562a:	e05f      	b.n	80156ec <USB_HC_Halt+0x1ea>
            break;
 801562c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801562e:	e05d      	b.n	80156ec <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	015a      	lsls	r2, r3, #5
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	4413      	add	r3, r2
 8015638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	69ba      	ldr	r2, [r7, #24]
 8015640:	0151      	lsls	r1, r2, #5
 8015642:	69fa      	ldr	r2, [r7, #28]
 8015644:	440a      	add	r2, r1
 8015646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801564a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801564e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015656:	691b      	ldr	r3, [r3, #16]
 8015658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801565c:	2b00      	cmp	r3, #0
 801565e:	d133      	bne.n	80156c8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	015a      	lsls	r2, r3, #5
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	4413      	add	r3, r2
 8015668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	69ba      	ldr	r2, [r7, #24]
 8015670:	0151      	lsls	r1, r2, #5
 8015672:	69fa      	ldr	r2, [r7, #28]
 8015674:	440a      	add	r2, r1
 8015676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801567a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801567e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	015a      	lsls	r2, r3, #5
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	4413      	add	r3, r2
 8015688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	69ba      	ldr	r2, [r7, #24]
 8015690:	0151      	lsls	r1, r2, #5
 8015692:	69fa      	ldr	r2, [r7, #28]
 8015694:	440a      	add	r2, r1
 8015696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801569a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801569e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	3301      	adds	r3, #1
 80156a4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80156ac:	d81d      	bhi.n	80156ea <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	015a      	lsls	r2, r3, #5
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	4413      	add	r3, r2
 80156b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80156c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80156c4:	d0ec      	beq.n	80156a0 <USB_HC_Halt+0x19e>
 80156c6:	e011      	b.n	80156ec <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80156c8:	69bb      	ldr	r3, [r7, #24]
 80156ca:	015a      	lsls	r2, r3, #5
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	4413      	add	r3, r2
 80156d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	69ba      	ldr	r2, [r7, #24]
 80156d8:	0151      	lsls	r1, r2, #5
 80156da:	69fa      	ldr	r2, [r7, #28]
 80156dc:	440a      	add	r2, r1
 80156de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80156e6:	6013      	str	r3, [r2, #0]
 80156e8:	e000      	b.n	80156ec <USB_HC_Halt+0x1ea>
          break;
 80156ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80156ec:	2300      	movs	r3, #0
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3724      	adds	r7, #36	; 0x24
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr
	...

080156fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80156fc:	b480      	push	{r7}
 80156fe:	b087      	sub	sp, #28
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801570c:	78fb      	ldrb	r3, [r7, #3]
 801570e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015710:	2301      	movs	r3, #1
 8015712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	04da      	lsls	r2, r3, #19
 8015718:	4b15      	ldr	r3, [pc, #84]	; (8015770 <USB_DoPing+0x74>)
 801571a:	4013      	ands	r3, r2
 801571c:	693a      	ldr	r2, [r7, #16]
 801571e:	0151      	lsls	r1, r2, #5
 8015720:	697a      	ldr	r2, [r7, #20]
 8015722:	440a      	add	r2, r1
 8015724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801572c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	015a      	lsls	r2, r3, #5
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	4413      	add	r3, r2
 8015736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015744:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801574c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	015a      	lsls	r2, r3, #5
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	4413      	add	r3, r2
 8015756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801575a:	461a      	mov	r2, r3
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015760:	2300      	movs	r3, #0
}
 8015762:	4618      	mov	r0, r3
 8015764:	371c      	adds	r7, #28
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	1ff80000 	.word	0x1ff80000

08015774 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b088      	sub	sp, #32
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801577c:	2300      	movs	r3, #0
 801577e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015784:	2300      	movs	r3, #0
 8015786:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f7ff f8f4 	bl	8014976 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801578e:	2110      	movs	r1, #16
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f7ff f94d 	bl	8014a30 <USB_FlushTxFifo>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d001      	beq.n	80157a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f7ff f979 	bl	8014a98 <USB_FlushRxFifo>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d001      	beq.n	80157b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80157ac:	2301      	movs	r3, #1
 80157ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80157b0:	2300      	movs	r3, #0
 80157b2:	61bb      	str	r3, [r7, #24]
 80157b4:	e01f      	b.n	80157f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	015a      	lsls	r2, r3, #5
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	4413      	add	r3, r2
 80157be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80157cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80157dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	015a      	lsls	r2, r3, #5
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	4413      	add	r3, r2
 80157e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80157ea:	461a      	mov	r2, r3
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	3301      	adds	r3, #1
 80157f4:	61bb      	str	r3, [r7, #24]
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	2b0f      	cmp	r3, #15
 80157fa:	d9dc      	bls.n	80157b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80157fc:	2300      	movs	r3, #0
 80157fe:	61bb      	str	r3, [r7, #24]
 8015800:	e034      	b.n	801586c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	015a      	lsls	r2, r3, #5
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	4413      	add	r3, r2
 801580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015812:	693b      	ldr	r3, [r7, #16]
 8015814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015818:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801581a:	693b      	ldr	r3, [r7, #16]
 801581c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015820:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015828:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801582a:	69bb      	ldr	r3, [r7, #24]
 801582c:	015a      	lsls	r2, r3, #5
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	4413      	add	r3, r2
 8015832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015836:	461a      	mov	r2, r3
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	3301      	adds	r3, #1
 8015840:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015848:	d80c      	bhi.n	8015864 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	015a      	lsls	r2, r3, #5
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	4413      	add	r3, r2
 8015852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801585c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015860:	d0ec      	beq.n	801583c <USB_StopHost+0xc8>
 8015862:	e000      	b.n	8015866 <USB_StopHost+0xf2>
        break;
 8015864:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015866:	69bb      	ldr	r3, [r7, #24]
 8015868:	3301      	adds	r3, #1
 801586a:	61bb      	str	r3, [r7, #24]
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	2b0f      	cmp	r3, #15
 8015870:	d9c7      	bls.n	8015802 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015878:	461a      	mov	r2, r3
 801587a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801587e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015886:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f7ff f863 	bl	8014954 <USB_EnableGlobalInt>

  return ret;
 801588e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015890:	4618      	mov	r0, r3
 8015892:	3720      	adds	r7, #32
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	4613      	mov	r3, r2
 80158a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d101      	bne.n	80158b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80158ac:	2302      	movs	r3, #2
 80158ae:	e029      	b.n	8015904 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	79fa      	ldrb	r2, [r7, #7]
 80158b4:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f000 f81f 	bl	801590c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2200      	movs	r2, #0
 80158d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2200      	movs	r2, #0
 80158da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	2200      	movs	r2, #0
 80158e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	2200      	movs	r2, #0
 80158ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d003      	beq.n	80158fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	68ba      	ldr	r2, [r7, #8]
 80158f8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80158fc:	68f8      	ldr	r0, [r7, #12]
 80158fe:	f7ef f861 	bl	80049c4 <USBH_LL_Init>

  return USBH_OK;
 8015902:	2300      	movs	r3, #0
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015914:	2300      	movs	r3, #0
 8015916:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015918:	2300      	movs	r3, #0
 801591a:	60fb      	str	r3, [r7, #12]
 801591c:	e00a      	b.n	8015934 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 801591e:	687a      	ldr	r2, [r7, #4]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015926:	009b      	lsls	r3, r3, #2
 8015928:	4413      	add	r3, r2
 801592a:	2200      	movs	r2, #0
 801592c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	3301      	adds	r3, #1
 8015932:	60fb      	str	r3, [r7, #12]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2b0f      	cmp	r3, #15
 8015938:	d9f1      	bls.n	801591e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801593a:	2300      	movs	r3, #0
 801593c:	60fb      	str	r3, [r7, #12]
 801593e:	e009      	b.n	8015954 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	4413      	add	r3, r2
 8015946:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801594a:	2200      	movs	r2, #0
 801594c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	3301      	adds	r3, #1
 8015952:	60fb      	str	r3, [r7, #12]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801595a:	d3f1      	bcc.n	8015940 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2200      	movs	r2, #0
 8015966:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2201      	movs	r2, #1
 801596c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2200      	movs	r2, #0
 8015972:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2201      	movs	r2, #1
 801597a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2240      	movs	r2, #64	; 0x40
 8015980:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2200      	movs	r2, #0
 8015986:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2200      	movs	r2, #0
 801598c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2201      	movs	r2, #1
 8015994:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2200      	movs	r2, #0
 801599c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2200      	movs	r2, #0
 80159a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	331c      	adds	r3, #28
 80159ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80159b0:	2100      	movs	r1, #0
 80159b2:	4618      	mov	r0, r3
 80159b4:	f001 fd96 	bl	80174e4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80159be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159c2:	2100      	movs	r1, #0
 80159c4:	4618      	mov	r0, r3
 80159c6:	f001 fd8d 	bl	80174e4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f203 3326 	addw	r3, r3, #806	; 0x326
 80159d0:	2212      	movs	r2, #18
 80159d2:	2100      	movs	r1, #0
 80159d4:	4618      	mov	r0, r3
 80159d6:	f001 fd85 	bl	80174e4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80159e0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80159e4:	2100      	movs	r1, #0
 80159e6:	4618      	mov	r0, r3
 80159e8:	f001 fd7c 	bl	80174e4 <memset>

  return USBH_OK;
 80159ec:	2300      	movs	r3, #0
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3710      	adds	r7, #16
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80159f6:	b480      	push	{r7}
 80159f8:	b085      	sub	sp, #20
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
 80159fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015a00:	2300      	movs	r3, #0
 8015a02:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d017      	beq.n	8015a3a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d10f      	bne.n	8015a34 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015a1a:	1c59      	adds	r1, r3, #1
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	73fb      	strb	r3, [r7, #15]
 8015a32:	e004      	b.n	8015a3e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015a34:	2302      	movs	r3, #2
 8015a36:	73fb      	strb	r3, [r7, #15]
 8015a38:	e001      	b.n	8015a3e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015a3a:	2302      	movs	r3, #2
 8015a3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3714      	adds	r7, #20
 8015a44:	46bd      	mov	sp, r7
 8015a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4a:	4770      	bx	lr

08015a4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b085      	sub	sp, #20
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
 8015a54:	460b      	mov	r3, r1
 8015a56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015a62:	78fa      	ldrb	r2, [r7, #3]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d204      	bcs.n	8015a72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	78fa      	ldrb	r2, [r7, #3]
 8015a6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015a70:	e001      	b.n	8015a76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015a72:	2302      	movs	r3, #2
 8015a74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3714      	adds	r7, #20
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr

08015a84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b087      	sub	sp, #28
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	4608      	mov	r0, r1
 8015a8e:	4611      	mov	r1, r2
 8015a90:	461a      	mov	r2, r3
 8015a92:	4603      	mov	r3, r0
 8015a94:	70fb      	strb	r3, [r7, #3]
 8015a96:	460b      	mov	r3, r1
 8015a98:	70bb      	strb	r3, [r7, #2]
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015aac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015aae:	e025      	b.n	8015afc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015ab0:	7dfb      	ldrb	r3, [r7, #23]
 8015ab2:	221a      	movs	r2, #26
 8015ab4:	fb02 f303 	mul.w	r3, r2, r3
 8015ab8:	3308      	adds	r3, #8
 8015aba:	68fa      	ldr	r2, [r7, #12]
 8015abc:	4413      	add	r3, r2
 8015abe:	3302      	adds	r3, #2
 8015ac0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	795b      	ldrb	r3, [r3, #5]
 8015ac6:	78fa      	ldrb	r2, [r7, #3]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	d002      	beq.n	8015ad2 <USBH_FindInterface+0x4e>
 8015acc:	78fb      	ldrb	r3, [r7, #3]
 8015ace:	2bff      	cmp	r3, #255	; 0xff
 8015ad0:	d111      	bne.n	8015af6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015ad6:	78ba      	ldrb	r2, [r7, #2]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d002      	beq.n	8015ae2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015adc:	78bb      	ldrb	r3, [r7, #2]
 8015ade:	2bff      	cmp	r3, #255	; 0xff
 8015ae0:	d109      	bne.n	8015af6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015ae6:	787a      	ldrb	r2, [r7, #1]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d002      	beq.n	8015af2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015aec:	787b      	ldrb	r3, [r7, #1]
 8015aee:	2bff      	cmp	r3, #255	; 0xff
 8015af0:	d101      	bne.n	8015af6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015af2:	7dfb      	ldrb	r3, [r7, #23]
 8015af4:	e006      	b.n	8015b04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015af6:	7dfb      	ldrb	r3, [r7, #23]
 8015af8:	3301      	adds	r3, #1
 8015afa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015afc:	7dfb      	ldrb	r3, [r7, #23]
 8015afe:	2b09      	cmp	r3, #9
 8015b00:	d9d6      	bls.n	8015ab0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015b02:	23ff      	movs	r3, #255	; 0xff
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	371c      	adds	r7, #28
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0e:	4770      	bx	lr

08015b10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7ee ff8f 	bl	8004a3c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015b1e:	2101      	movs	r1, #1
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f7ef f8a8 	bl	8004c76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015b26:	2300      	movs	r3, #0
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8015b38:	2100      	movs	r1, #0
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7ef f89b 	bl	8004c76 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f7ee ff96 	bl	8004a72 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	791b      	ldrb	r3, [r3, #4]
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f001 fb6c 	bl	801722a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	795b      	ldrb	r3, [r3, #5]
 8015b56:	4619      	mov	r1, r3
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f001 fb66 	bl	801722a <USBH_FreePipe>

  return USBH_OK;
 8015b5e:	2300      	movs	r3, #0
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b088      	sub	sp, #32
 8015b6c:	af04      	add	r7, sp, #16
 8015b6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015b70:	2302      	movs	r3, #2
 8015b72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015b74:	2300      	movs	r3, #0
 8015b76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	d102      	bne.n	8015b8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2203      	movs	r2, #3
 8015b88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	2b0b      	cmp	r3, #11
 8015b92:	f200 81c0 	bhi.w	8015f16 <USBH_Process+0x3ae>
 8015b96:	a201      	add	r2, pc, #4	; (adr r2, 8015b9c <USBH_Process+0x34>)
 8015b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b9c:	08015bcd 	.word	0x08015bcd
 8015ba0:	08015bff 	.word	0x08015bff
 8015ba4:	08015c67 	.word	0x08015c67
 8015ba8:	08015eb1 	.word	0x08015eb1
 8015bac:	08015f17 	.word	0x08015f17
 8015bb0:	08015d0b 	.word	0x08015d0b
 8015bb4:	08015e57 	.word	0x08015e57
 8015bb8:	08015d41 	.word	0x08015d41
 8015bbc:	08015d61 	.word	0x08015d61
 8015bc0:	08015d81 	.word	0x08015d81
 8015bc4:	08015dc5 	.word	0x08015dc5
 8015bc8:	08015e99 	.word	0x08015e99
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015bd2:	b2db      	uxtb	r3, r3
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	f000 81a0 	beq.w	8015f1a <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2201      	movs	r2, #1
 8015bde:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015be0:	20c8      	movs	r0, #200	; 0xc8
 8015be2:	f7ef f88f 	bl	8004d04 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f7ee ff85 	bl	8004af6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015bfc:	e18d      	b.n	8015f1a <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d107      	bne.n	8015c18 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2202      	movs	r2, #2
 8015c14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015c16:	e18f      	b.n	8015f38 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015c22:	d914      	bls.n	8015c4e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015c3a:	2b03      	cmp	r3, #3
 8015c3c:	d903      	bls.n	8015c46 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	220d      	movs	r2, #13
 8015c42:	701a      	strb	r2, [r3, #0]
      break;
 8015c44:	e178      	b.n	8015f38 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	701a      	strb	r2, [r3, #0]
      break;
 8015c4c:	e174      	b.n	8015f38 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015c54:	f103 020a 	add.w	r2, r3, #10
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015c5e:	200a      	movs	r0, #10
 8015c60:	f7ef f850 	bl	8004d04 <USBH_Delay>
      break;
 8015c64:	e168      	b.n	8015f38 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d005      	beq.n	8015c7c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015c76:	2104      	movs	r1, #4
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015c7c:	2064      	movs	r0, #100	; 0x64
 8015c7e:	f7ef f841 	bl	8004d04 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7ee ff10 	bl	8004aa8 <USBH_LL_GetSpeed>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2205      	movs	r2, #5
 8015c96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8015c98:	2100      	movs	r1, #0
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f001 faa3 	bl	80171e6 <USBH_AllocPipe>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8015ca8:	2180      	movs	r1, #128	; 0x80
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f001 fa9b 	bl	80171e6 <USBH_AllocPipe>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	7919      	ldrb	r1, [r3, #4]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015ccc:	b292      	uxth	r2, r2
 8015cce:	9202      	str	r2, [sp, #8]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	9201      	str	r2, [sp, #4]
 8015cd4:	9300      	str	r3, [sp, #0]
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	2280      	movs	r2, #128	; 0x80
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f001 fa54 	bl	8017188 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7959      	ldrb	r1, [r3, #5]
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015cf0:	687a      	ldr	r2, [r7, #4]
 8015cf2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015cf4:	b292      	uxth	r2, r2
 8015cf6:	9202      	str	r2, [sp, #8]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	9201      	str	r2, [sp, #4]
 8015cfc:	9300      	str	r3, [sp, #0]
 8015cfe:	4603      	mov	r3, r0
 8015d00:	2200      	movs	r2, #0
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f001 fa40 	bl	8017188 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015d08:	e116      	b.n	8015f38 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f000 f91a 	bl	8015f44 <USBH_HandleEnum>
 8015d10:	4603      	mov	r3, r0
 8015d12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015d14:	7bbb      	ldrb	r3, [r7, #14]
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	f040 8100 	bne.w	8015f1e <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2200      	movs	r2, #0
 8015d22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015d2c:	2b01      	cmp	r3, #1
 8015d2e:	d103      	bne.n	8015d38 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2208      	movs	r2, #8
 8015d34:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015d36:	e0f2      	b.n	8015f1e <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2207      	movs	r2, #7
 8015d3c:	701a      	strb	r2, [r3, #0]
      break;
 8015d3e:	e0ee      	b.n	8015f1e <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	f000 80eb 	beq.w	8015f22 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d52:	2101      	movs	r1, #1
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2208      	movs	r2, #8
 8015d5c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8015d5e:	e0e0      	b.n	8015f22 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f000 fc41 	bl	80165f2 <USBH_SetCfg>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f040 80d7 	bne.w	8015f26 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2209      	movs	r2, #9
 8015d7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015d7e:	e0d2      	b.n	8015f26 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8015d86:	f003 0320 	and.w	r3, r3, #32
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d016      	beq.n	8015dbc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8015d8e:	2101      	movs	r1, #1
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f000 fc51 	bl	8016638 <USBH_SetFeature>
 8015d96:	4603      	mov	r3, r0
 8015d98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015d9a:	7bbb      	ldrb	r3, [r7, #14]
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d103      	bne.n	8015daa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	220a      	movs	r2, #10
 8015da6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015da8:	e0bf      	b.n	8015f2a <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 8015daa:	7bbb      	ldrb	r3, [r7, #14]
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b03      	cmp	r3, #3
 8015db0:	f040 80bb 	bne.w	8015f2a <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	220a      	movs	r2, #10
 8015db8:	701a      	strb	r2, [r3, #0]
      break;
 8015dba:	e0b6      	b.n	8015f2a <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	220a      	movs	r2, #10
 8015dc0:	701a      	strb	r2, [r3, #0]
      break;
 8015dc2:	e0b2      	b.n	8015f2a <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	f000 80af 	beq.w	8015f2e <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015dd8:	2300      	movs	r3, #0
 8015dda:	73fb      	strb	r3, [r7, #15]
 8015ddc:	e018      	b.n	8015e10 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015dde:	7bfa      	ldrb	r2, [r7, #15]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dea:	791a      	ldrb	r2, [r3, #4]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d109      	bne.n	8015e0a <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8015df6:	7bfa      	ldrb	r2, [r7, #15]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015dfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8015e08:	e005      	b.n	8015e16 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015e0a:	7bfb      	ldrb	r3, [r7, #15]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	73fb      	strb	r3, [r7, #15]
 8015e10:	7bfb      	ldrb	r3, [r7, #15]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d0e3      	beq.n	8015dde <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d016      	beq.n	8015e4e <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	4798      	blx	r3
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d109      	bne.n	8015e46 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2206      	movs	r2, #6
 8015e36:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e3e:	2103      	movs	r1, #3
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015e44:	e073      	b.n	8015f2e <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	220d      	movs	r2, #13
 8015e4a:	701a      	strb	r2, [r3, #0]
      break;
 8015e4c:	e06f      	b.n	8015f2e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	220d      	movs	r2, #13
 8015e52:	701a      	strb	r2, [r3, #0]
      break;
 8015e54:	e06b      	b.n	8015f2e <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d017      	beq.n	8015e90 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015e66:	691b      	ldr	r3, [r3, #16]
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	4798      	blx	r3
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015e70:	7bbb      	ldrb	r3, [r7, #14]
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d103      	bne.n	8015e80 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	220b      	movs	r2, #11
 8015e7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015e7e:	e058      	b.n	8015f32 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8015e80:	7bbb      	ldrb	r3, [r7, #14]
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	2b02      	cmp	r3, #2
 8015e86:	d154      	bne.n	8015f32 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	220d      	movs	r2, #13
 8015e8c:	701a      	strb	r2, [r3, #0]
      break;
 8015e8e:	e050      	b.n	8015f32 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	220d      	movs	r2, #13
 8015e94:	701a      	strb	r2, [r3, #0]
      break;
 8015e96:	e04c      	b.n	8015f32 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d049      	beq.n	8015f36 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ea8:	695b      	ldr	r3, [r3, #20]
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	4798      	blx	r3
      }
      break;
 8015eae:	e042      	b.n	8015f36 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f7ff fd27 	bl	801590c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d009      	beq.n	8015edc <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d005      	beq.n	8015ef2 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015eec:	2105      	movs	r1, #5
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d107      	bne.n	8015f0e <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2200      	movs	r2, #0
 8015f02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7ff fe02 	bl	8015b10 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015f0c:	e014      	b.n	8015f38 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f7ee fd94 	bl	8004a3c <USBH_LL_Start>
      break;
 8015f14:	e010      	b.n	8015f38 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8015f16:	bf00      	nop
 8015f18:	e00e      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f1a:	bf00      	nop
 8015f1c:	e00c      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f1e:	bf00      	nop
 8015f20:	e00a      	b.n	8015f38 <USBH_Process+0x3d0>
    break;
 8015f22:	bf00      	nop
 8015f24:	e008      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f26:	bf00      	nop
 8015f28:	e006      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f2a:	bf00      	nop
 8015f2c:	e004      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f2e:	bf00      	nop
 8015f30:	e002      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f32:	bf00      	nop
 8015f34:	e000      	b.n	8015f38 <USBH_Process+0x3d0>
      break;
 8015f36:	bf00      	nop
  }
  return USBH_OK;
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop

08015f44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b088      	sub	sp, #32
 8015f48:	af04      	add	r7, sp, #16
 8015f4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015f50:	2301      	movs	r3, #1
 8015f52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	785b      	ldrb	r3, [r3, #1]
 8015f58:	2b07      	cmp	r3, #7
 8015f5a:	f200 81c1 	bhi.w	80162e0 <USBH_HandleEnum+0x39c>
 8015f5e:	a201      	add	r2, pc, #4	; (adr r2, 8015f64 <USBH_HandleEnum+0x20>)
 8015f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f64:	08015f85 	.word	0x08015f85
 8015f68:	08016043 	.word	0x08016043
 8015f6c:	080160ad 	.word	0x080160ad
 8015f70:	0801613b 	.word	0x0801613b
 8015f74:	080161a5 	.word	0x080161a5
 8015f78:	08016215 	.word	0x08016215
 8015f7c:	0801625b 	.word	0x0801625b
 8015f80:	080162a1 	.word	0x080162a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8015f84:	2108      	movs	r1, #8
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fa50 	bl	801642c <USBH_Get_DevDesc>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015f90:	7bbb      	ldrb	r3, [r7, #14]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d130      	bne.n	8015ff8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2201      	movs	r2, #1
 8015fa4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	7919      	ldrb	r1, [r3, #4]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015fba:	b292      	uxth	r2, r2
 8015fbc:	9202      	str	r2, [sp, #8]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	9201      	str	r2, [sp, #4]
 8015fc2:	9300      	str	r3, [sp, #0]
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2280      	movs	r2, #128	; 0x80
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f001 f8dd 	bl	8017188 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	7959      	ldrb	r1, [r3, #5]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	9202      	str	r2, [sp, #8]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	9201      	str	r2, [sp, #4]
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	4603      	mov	r3, r0
 8015fee:	2200      	movs	r2, #0
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f001 f8c9 	bl	8017188 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015ff6:	e175      	b.n	80162e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015ff8:	7bbb      	ldrb	r3, [r7, #14]
 8015ffa:	2b03      	cmp	r3, #3
 8015ffc:	f040 8172 	bne.w	80162e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016006:	3301      	adds	r3, #1
 8016008:	b2da      	uxtb	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016016:	2b03      	cmp	r3, #3
 8016018:	d903      	bls.n	8016022 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	220d      	movs	r2, #13
 801601e:	701a      	strb	r2, [r3, #0]
      break;
 8016020:	e160      	b.n	80162e4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	795b      	ldrb	r3, [r3, #5]
 8016026:	4619      	mov	r1, r3
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f001 f8fe 	bl	801722a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	791b      	ldrb	r3, [r3, #4]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f001 f8f8 	bl	801722a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2200      	movs	r2, #0
 801603e:	701a      	strb	r2, [r3, #0]
      break;
 8016040:	e150      	b.n	80162e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8016042:	2112      	movs	r1, #18
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 f9f1 	bl	801642c <USBH_Get_DevDesc>
 801604a:	4603      	mov	r3, r0
 801604c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801604e:	7bbb      	ldrb	r3, [r7, #14]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d103      	bne.n	801605c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2202      	movs	r2, #2
 8016058:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801605a:	e145      	b.n	80162e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801605c:	7bbb      	ldrb	r3, [r7, #14]
 801605e:	2b03      	cmp	r3, #3
 8016060:	f040 8142 	bne.w	80162e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801606a:	3301      	adds	r3, #1
 801606c:	b2da      	uxtb	r2, r3
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801607a:	2b03      	cmp	r3, #3
 801607c:	d903      	bls.n	8016086 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	220d      	movs	r2, #13
 8016082:	701a      	strb	r2, [r3, #0]
      break;
 8016084:	e130      	b.n	80162e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	795b      	ldrb	r3, [r3, #5]
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f001 f8cc 	bl	801722a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	791b      	ldrb	r3, [r3, #4]
 8016096:	4619      	mov	r1, r3
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f001 f8c6 	bl	801722a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2200      	movs	r2, #0
 80160a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2200      	movs	r2, #0
 80160a8:	701a      	strb	r2, [r3, #0]
      break;
 80160aa:	e11d      	b.n	80162e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80160ac:	2101      	movs	r1, #1
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f000 fa7b 	bl	80165aa <USBH_SetAddress>
 80160b4:	4603      	mov	r3, r0
 80160b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80160b8:	7bbb      	ldrb	r3, [r7, #14]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d132      	bne.n	8016124 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80160be:	2002      	movs	r0, #2
 80160c0:	f7ee fe20 	bl	8004d04 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2201      	movs	r2, #1
 80160c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2203      	movs	r2, #3
 80160d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	7919      	ldrb	r1, [r3, #4]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80160e6:	b292      	uxth	r2, r2
 80160e8:	9202      	str	r2, [sp, #8]
 80160ea:	2200      	movs	r2, #0
 80160ec:	9201      	str	r2, [sp, #4]
 80160ee:	9300      	str	r3, [sp, #0]
 80160f0:	4603      	mov	r3, r0
 80160f2:	2280      	movs	r2, #128	; 0x80
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f001 f847 	bl	8017188 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	7959      	ldrb	r1, [r3, #5]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801610e:	b292      	uxth	r2, r2
 8016110:	9202      	str	r2, [sp, #8]
 8016112:	2200      	movs	r2, #0
 8016114:	9201      	str	r2, [sp, #4]
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	4603      	mov	r3, r0
 801611a:	2200      	movs	r2, #0
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f001 f833 	bl	8017188 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016122:	e0e3      	b.n	80162ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016124:	7bbb      	ldrb	r3, [r7, #14]
 8016126:	2b03      	cmp	r3, #3
 8016128:	f040 80e0 	bne.w	80162ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	220d      	movs	r2, #13
 8016130:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2200      	movs	r2, #0
 8016136:	705a      	strb	r2, [r3, #1]
      break;
 8016138:	e0d8      	b.n	80162ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801613a:	2109      	movs	r1, #9
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 f9a1 	bl	8016484 <USBH_Get_CfgDesc>
 8016142:	4603      	mov	r3, r0
 8016144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016146:	7bbb      	ldrb	r3, [r7, #14]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d103      	bne.n	8016154 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2204      	movs	r2, #4
 8016150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016152:	e0cd      	b.n	80162f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016154:	7bbb      	ldrb	r3, [r7, #14]
 8016156:	2b03      	cmp	r3, #3
 8016158:	f040 80ca 	bne.w	80162f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016162:	3301      	adds	r3, #1
 8016164:	b2da      	uxtb	r2, r3
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016172:	2b03      	cmp	r3, #3
 8016174:	d903      	bls.n	801617e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	220d      	movs	r2, #13
 801617a:	701a      	strb	r2, [r3, #0]
      break;
 801617c:	e0b8      	b.n	80162f0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	795b      	ldrb	r3, [r3, #5]
 8016182:	4619      	mov	r1, r3
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f001 f850 	bl	801722a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	791b      	ldrb	r3, [r3, #4]
 801618e:	4619      	mov	r1, r3
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f001 f84a 	bl	801722a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2200      	movs	r2, #0
 801619a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	701a      	strb	r2, [r3, #0]
      break;
 80161a2:	e0a5      	b.n	80162f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80161aa:	4619      	mov	r1, r3
 80161ac:	6878      	ldr	r0, [r7, #4]
 80161ae:	f000 f969 	bl	8016484 <USBH_Get_CfgDesc>
 80161b2:	4603      	mov	r3, r0
 80161b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80161b6:	7bbb      	ldrb	r3, [r7, #14]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d103      	bne.n	80161c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2205      	movs	r2, #5
 80161c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80161c2:	e097      	b.n	80162f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80161c4:	7bbb      	ldrb	r3, [r7, #14]
 80161c6:	2b03      	cmp	r3, #3
 80161c8:	f040 8094 	bne.w	80162f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80161d2:	3301      	adds	r3, #1
 80161d4:	b2da      	uxtb	r2, r3
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80161e2:	2b03      	cmp	r3, #3
 80161e4:	d903      	bls.n	80161ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	220d      	movs	r2, #13
 80161ea:	701a      	strb	r2, [r3, #0]
      break;
 80161ec:	e082      	b.n	80162f4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	795b      	ldrb	r3, [r3, #5]
 80161f2:	4619      	mov	r1, r3
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f001 f818 	bl	801722a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	791b      	ldrb	r3, [r3, #4]
 80161fe:	4619      	mov	r1, r3
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f001 f812 	bl	801722a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2200      	movs	r2, #0
 801620a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2200      	movs	r2, #0
 8016210:	701a      	strb	r2, [r3, #0]
      break;
 8016212:	e06f      	b.n	80162f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801621a:	2b00      	cmp	r3, #0
 801621c:	d019      	beq.n	8016252 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801622a:	23ff      	movs	r3, #255	; 0xff
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 f953 	bl	80164d8 <USBH_Get_StringDesc>
 8016232:	4603      	mov	r3, r0
 8016234:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016236:	7bbb      	ldrb	r3, [r7, #14]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d103      	bne.n	8016244 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2206      	movs	r2, #6
 8016240:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016242:	e059      	b.n	80162f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016244:	7bbb      	ldrb	r3, [r7, #14]
 8016246:	2b03      	cmp	r3, #3
 8016248:	d156      	bne.n	80162f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2206      	movs	r2, #6
 801624e:	705a      	strb	r2, [r3, #1]
      break;
 8016250:	e052      	b.n	80162f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	2206      	movs	r2, #6
 8016256:	705a      	strb	r2, [r3, #1]
      break;
 8016258:	e04e      	b.n	80162f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8016260:	2b00      	cmp	r3, #0
 8016262:	d019      	beq.n	8016298 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016270:	23ff      	movs	r3, #255	; 0xff
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f000 f930 	bl	80164d8 <USBH_Get_StringDesc>
 8016278:	4603      	mov	r3, r0
 801627a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801627c:	7bbb      	ldrb	r3, [r7, #14]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d103      	bne.n	801628a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2207      	movs	r2, #7
 8016286:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016288:	e038      	b.n	80162fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801628a:	7bbb      	ldrb	r3, [r7, #14]
 801628c:	2b03      	cmp	r3, #3
 801628e:	d135      	bne.n	80162fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2207      	movs	r2, #7
 8016294:	705a      	strb	r2, [r3, #1]
      break;
 8016296:	e031      	b.n	80162fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2207      	movs	r2, #7
 801629c:	705a      	strb	r2, [r3, #1]
      break;
 801629e:	e02d      	b.n	80162fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d017      	beq.n	80162da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80162b6:	23ff      	movs	r3, #255	; 0xff
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f000 f90d 	bl	80164d8 <USBH_Get_StringDesc>
 80162be:	4603      	mov	r3, r0
 80162c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80162c2:	7bbb      	ldrb	r3, [r7, #14]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d102      	bne.n	80162ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80162c8:	2300      	movs	r3, #0
 80162ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80162cc:	e018      	b.n	8016300 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80162ce:	7bbb      	ldrb	r3, [r7, #14]
 80162d0:	2b03      	cmp	r3, #3
 80162d2:	d115      	bne.n	8016300 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80162d4:	2300      	movs	r3, #0
 80162d6:	73fb      	strb	r3, [r7, #15]
      break;
 80162d8:	e012      	b.n	8016300 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80162da:	2300      	movs	r3, #0
 80162dc:	73fb      	strb	r3, [r7, #15]
      break;
 80162de:	e00f      	b.n	8016300 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80162e0:	bf00      	nop
 80162e2:	e00e      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162e4:	bf00      	nop
 80162e6:	e00c      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162e8:	bf00      	nop
 80162ea:	e00a      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162ec:	bf00      	nop
 80162ee:	e008      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162f0:	bf00      	nop
 80162f2:	e006      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162f4:	bf00      	nop
 80162f6:	e004      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162f8:	bf00      	nop
 80162fa:	e002      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 80162fc:	bf00      	nop
 80162fe:	e000      	b.n	8016302 <USBH_HandleEnum+0x3be>
      break;
 8016300:	bf00      	nop
  }
  return Status;
 8016302:	7bfb      	ldrb	r3, [r7, #15]
}
 8016304:	4618      	mov	r0, r3
 8016306:	3710      	adds	r7, #16
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	683a      	ldr	r2, [r7, #0]
 801631a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 801631e:	bf00      	nop
 8016320:	370c      	adds	r7, #12
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr

0801632a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801632a:	b580      	push	{r7, lr}
 801632c:	b082      	sub	sp, #8
 801632e:	af00      	add	r7, sp, #0
 8016330:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016338:	1c5a      	adds	r2, r3, #1
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f000 f804 	bl	801634e <USBH_HandleSof>
}
 8016346:	bf00      	nop
 8016348:	3708      	adds	r7, #8
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}

0801634e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801634e:	b580      	push	{r7, lr}
 8016350:	b082      	sub	sp, #8
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	b2db      	uxtb	r3, r3
 801635c:	2b0b      	cmp	r3, #11
 801635e:	d10a      	bne.n	8016376 <USBH_HandleSof+0x28>
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016366:	2b00      	cmp	r3, #0
 8016368:	d005      	beq.n	8016376 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016370:	699b      	ldr	r3, [r3, #24]
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	4798      	blx	r3
  }
}
 8016376:	bf00      	nop
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}

0801637e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801637e:	b480      	push	{r7}
 8016380:	b083      	sub	sp, #12
 8016382:	af00      	add	r7, sp, #0
 8016384:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	2201      	movs	r2, #1
 801638a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801638e:	bf00      	nop
}
 8016390:	370c      	adds	r7, #12
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr

0801639a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801639a:	b480      	push	{r7}
 801639c:	b083      	sub	sp, #12
 801639e:	af00      	add	r7, sp, #0
 80163a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2200      	movs	r2, #0
 80163a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80163aa:	bf00      	nop
}
 80163ac:	370c      	adds	r7, #12
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr

080163b6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80163b6:	b480      	push	{r7}
 80163b8:	b083      	sub	sp, #12
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2201      	movs	r2, #1
 80163c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2200      	movs	r2, #0
 80163ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2200      	movs	r2, #0
 80163d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80163d6:	2300      	movs	r3, #0
}
 80163d8:	4618      	mov	r0, r3
 80163da:	370c      	adds	r7, #12
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr

080163e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	2201      	movs	r2, #1
 80163f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2200      	movs	r2, #0
 80163f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2200      	movs	r2, #0
 8016400:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ee fb34 	bl	8004a72 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	791b      	ldrb	r3, [r3, #4]
 801640e:	4619      	mov	r1, r3
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f000 ff0a 	bl	801722a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	795b      	ldrb	r3, [r3, #5]
 801641a:	4619      	mov	r1, r3
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f000 ff04 	bl	801722a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016422:	2300      	movs	r3, #0
}
 8016424:	4618      	mov	r0, r3
 8016426:	3708      	adds	r7, #8
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}

0801642c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b086      	sub	sp, #24
 8016430:	af02      	add	r7, sp, #8
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	460b      	mov	r3, r1
 8016436:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016438:	887b      	ldrh	r3, [r7, #2]
 801643a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801643e:	d901      	bls.n	8016444 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016440:	2303      	movs	r3, #3
 8016442:	e01b      	b.n	801647c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801644a:	887b      	ldrh	r3, [r7, #2]
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	4613      	mov	r3, r2
 8016450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016454:	2100      	movs	r1, #0
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f872 	bl	8016540 <USBH_GetDescriptor>
 801645c:	4603      	mov	r3, r0
 801645e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016460:	7bfb      	ldrb	r3, [r7, #15]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d109      	bne.n	801647a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801646c:	887a      	ldrh	r2, [r7, #2]
 801646e:	4619      	mov	r1, r3
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f000 f929 	bl	80166c8 <USBH_ParseDevDesc>
 8016476:	4603      	mov	r3, r0
 8016478:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801647a:	7bfb      	ldrb	r3, [r7, #15]
}
 801647c:	4618      	mov	r0, r3
 801647e:	3710      	adds	r7, #16
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b086      	sub	sp, #24
 8016488:	af02      	add	r7, sp, #8
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	460b      	mov	r3, r1
 801648e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	331c      	adds	r3, #28
 8016494:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8016496:	887b      	ldrh	r3, [r7, #2]
 8016498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801649c:	d901      	bls.n	80164a2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801649e:	2303      	movs	r3, #3
 80164a0:	e016      	b.n	80164d0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80164a2:	887b      	ldrh	r3, [r7, #2]
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80164ac:	2100      	movs	r1, #0
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 f846 	bl	8016540 <USBH_GetDescriptor>
 80164b4:	4603      	mov	r3, r0
 80164b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d107      	bne.n	80164ce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80164be:	887b      	ldrh	r3, [r7, #2]
 80164c0:	461a      	mov	r2, r3
 80164c2:	68b9      	ldr	r1, [r7, #8]
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f000 f9b3 	bl	8016830 <USBH_ParseCfgDesc>
 80164ca:	4603      	mov	r3, r0
 80164cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80164ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3710      	adds	r7, #16
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	b088      	sub	sp, #32
 80164dc:	af02      	add	r7, sp, #8
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	607a      	str	r2, [r7, #4]
 80164e2:	461a      	mov	r2, r3
 80164e4:	460b      	mov	r3, r1
 80164e6:	72fb      	strb	r3, [r7, #11]
 80164e8:	4613      	mov	r3, r2
 80164ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80164ec:	893b      	ldrh	r3, [r7, #8]
 80164ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164f2:	d802      	bhi.n	80164fa <USBH_Get_StringDesc+0x22>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d101      	bne.n	80164fe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80164fa:	2303      	movs	r3, #3
 80164fc:	e01c      	b.n	8016538 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80164fe:	7afb      	ldrb	r3, [r7, #11]
 8016500:	b29b      	uxth	r3, r3
 8016502:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8016506:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801650e:	893b      	ldrh	r3, [r7, #8]
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	460b      	mov	r3, r1
 8016514:	2100      	movs	r1, #0
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f000 f812 	bl	8016540 <USBH_GetDescriptor>
 801651c:	4603      	mov	r3, r0
 801651e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016520:	7dfb      	ldrb	r3, [r7, #23]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d107      	bne.n	8016536 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801652c:	893a      	ldrh	r2, [r7, #8]
 801652e:	6879      	ldr	r1, [r7, #4]
 8016530:	4618      	mov	r0, r3
 8016532:	f000 fb8a 	bl	8016c4a <USBH_ParseStringDesc>
  }

  return status;
 8016536:	7dfb      	ldrb	r3, [r7, #23]
}
 8016538:	4618      	mov	r0, r3
 801653a:	3718      	adds	r7, #24
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	607b      	str	r3, [r7, #4]
 801654a:	460b      	mov	r3, r1
 801654c:	72fb      	strb	r3, [r7, #11]
 801654e:	4613      	mov	r3, r2
 8016550:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	789b      	ldrb	r3, [r3, #2]
 8016556:	2b01      	cmp	r3, #1
 8016558:	d11c      	bne.n	8016594 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801655a:	7afb      	ldrb	r3, [r7, #11]
 801655c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016560:	b2da      	uxtb	r2, r3
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	2206      	movs	r2, #6
 801656a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	893a      	ldrh	r2, [r7, #8]
 8016570:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016572:	893b      	ldrh	r3, [r7, #8]
 8016574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801657c:	d104      	bne.n	8016588 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	f240 4209 	movw	r2, #1033	; 0x409
 8016584:	829a      	strh	r2, [r3, #20]
 8016586:	e002      	b.n	801658e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2200      	movs	r2, #0
 801658c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	8b3a      	ldrh	r2, [r7, #24]
 8016592:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8016594:	8b3b      	ldrh	r3, [r7, #24]
 8016596:	461a      	mov	r2, r3
 8016598:	6879      	ldr	r1, [r7, #4]
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f000 fba3 	bl	8016ce6 <USBH_CtlReq>
 80165a0:	4603      	mov	r3, r0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80165aa:	b580      	push	{r7, lr}
 80165ac:	b082      	sub	sp, #8
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	460b      	mov	r3, r1
 80165b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	789b      	ldrb	r3, [r3, #2]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d10f      	bne.n	80165de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2200      	movs	r2, #0
 80165c2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2205      	movs	r2, #5
 80165c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80165ca:	78fb      	ldrb	r3, [r7, #3]
 80165cc:	b29a      	uxth	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2200      	movs	r2, #0
 80165d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80165de:	2200      	movs	r2, #0
 80165e0:	2100      	movs	r1, #0
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f000 fb7f 	bl	8016ce6 <USBH_CtlReq>
 80165e8:	4603      	mov	r3, r0
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	460b      	mov	r3, r1
 80165fc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	789b      	ldrb	r3, [r3, #2]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d10e      	bne.n	8016624 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2200      	movs	r2, #0
 801660a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2209      	movs	r2, #9
 8016610:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	887a      	ldrh	r2, [r7, #2]
 8016616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2200      	movs	r2, #0
 801661c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016624:	2200      	movs	r2, #0
 8016626:	2100      	movs	r1, #0
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 fb5c 	bl	8016ce6 <USBH_CtlReq>
 801662e:	4603      	mov	r3, r0
}
 8016630:	4618      	mov	r0, r3
 8016632:	3708      	adds	r7, #8
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	460b      	mov	r3, r1
 8016642:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	789b      	ldrb	r3, [r3, #2]
 8016648:	2b01      	cmp	r3, #1
 801664a:	d10f      	bne.n	801666c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2200      	movs	r2, #0
 8016650:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2203      	movs	r2, #3
 8016656:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016658:	78fb      	ldrb	r3, [r7, #3]
 801665a:	b29a      	uxth	r2, r3
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801666c:	2200      	movs	r2, #0
 801666e:	2100      	movs	r1, #0
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 fb38 	bl	8016ce6 <USBH_CtlReq>
 8016676:	4603      	mov	r3, r0
}
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	460b      	mov	r3, r1
 801668a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	789b      	ldrb	r3, [r3, #2]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d10f      	bne.n	80166b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2202      	movs	r2, #2
 8016698:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2201      	movs	r2, #1
 801669e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2200      	movs	r2, #0
 80166a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80166a6:	78fb      	ldrb	r3, [r7, #3]
 80166a8:	b29a      	uxth	r2, r3
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2200      	movs	r2, #0
 80166b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80166b4:	2200      	movs	r2, #0
 80166b6:	2100      	movs	r1, #0
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 fb14 	bl	8016ce6 <USBH_CtlReq>
 80166be:	4603      	mov	r3, r0
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80166c8:	b480      	push	{r7}
 80166ca:	b087      	sub	sp, #28
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	4613      	mov	r3, r2
 80166d4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f203 3326 	addw	r3, r3, #806	; 0x326
 80166dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80166de:	2300      	movs	r3, #0
 80166e0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d101      	bne.n	80166ec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80166e8:	2302      	movs	r3, #2
 80166ea:	e098      	b.n	801681e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	781a      	ldrb	r2, [r3, #0]
 80166f0:	693b      	ldr	r3, [r7, #16]
 80166f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80166f4:	68bb      	ldr	r3, [r7, #8]
 80166f6:	785a      	ldrb	r2, [r3, #1]
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	3302      	adds	r3, #2
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	b29a      	uxth	r2, r3
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	3303      	adds	r3, #3
 8016708:	781b      	ldrb	r3, [r3, #0]
 801670a:	b29b      	uxth	r3, r3
 801670c:	021b      	lsls	r3, r3, #8
 801670e:	b29b      	uxth	r3, r3
 8016710:	4313      	orrs	r3, r2
 8016712:	b29a      	uxth	r2, r3
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	791a      	ldrb	r2, [r3, #4]
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	795a      	ldrb	r2, [r3, #5]
 8016724:	693b      	ldr	r3, [r7, #16]
 8016726:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016728:	68bb      	ldr	r3, [r7, #8]
 801672a:	799a      	ldrb	r2, [r3, #6]
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	79da      	ldrb	r2, [r3, #7]
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801673e:	2b00      	cmp	r3, #0
 8016740:	d004      	beq.n	801674c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016748:	2b01      	cmp	r3, #1
 801674a:	d11b      	bne.n	8016784 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801674c:	693b      	ldr	r3, [r7, #16]
 801674e:	79db      	ldrb	r3, [r3, #7]
 8016750:	2b20      	cmp	r3, #32
 8016752:	dc0f      	bgt.n	8016774 <USBH_ParseDevDesc+0xac>
 8016754:	2b08      	cmp	r3, #8
 8016756:	db0f      	blt.n	8016778 <USBH_ParseDevDesc+0xb0>
 8016758:	3b08      	subs	r3, #8
 801675a:	4a34      	ldr	r2, [pc, #208]	; (801682c <USBH_ParseDevDesc+0x164>)
 801675c:	fa22 f303 	lsr.w	r3, r2, r3
 8016760:	f003 0301 	and.w	r3, r3, #1
 8016764:	2b00      	cmp	r3, #0
 8016766:	bf14      	ite	ne
 8016768:	2301      	movne	r3, #1
 801676a:	2300      	moveq	r3, #0
 801676c:	b2db      	uxtb	r3, r3
 801676e:	2b00      	cmp	r3, #0
 8016770:	d106      	bne.n	8016780 <USBH_ParseDevDesc+0xb8>
 8016772:	e001      	b.n	8016778 <USBH_ParseDevDesc+0xb0>
 8016774:	2b40      	cmp	r3, #64	; 0x40
 8016776:	d003      	beq.n	8016780 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016778:	693b      	ldr	r3, [r7, #16]
 801677a:	2208      	movs	r2, #8
 801677c:	71da      	strb	r2, [r3, #7]
        break;
 801677e:	e000      	b.n	8016782 <USBH_ParseDevDesc+0xba>
        break;
 8016780:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016782:	e00e      	b.n	80167a2 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801678a:	2b02      	cmp	r3, #2
 801678c:	d107      	bne.n	801679e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	79db      	ldrb	r3, [r3, #7]
 8016792:	2b08      	cmp	r3, #8
 8016794:	d005      	beq.n	80167a2 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	2208      	movs	r2, #8
 801679a:	71da      	strb	r2, [r3, #7]
 801679c:	e001      	b.n	80167a2 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801679e:	2303      	movs	r3, #3
 80167a0:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80167a2:	88fb      	ldrh	r3, [r7, #6]
 80167a4:	2b08      	cmp	r3, #8
 80167a6:	d939      	bls.n	801681c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	3308      	adds	r3, #8
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	b29a      	uxth	r2, r3
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	3309      	adds	r3, #9
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	021b      	lsls	r3, r3, #8
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	4313      	orrs	r3, r2
 80167be:	b29a      	uxth	r2, r3
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	330a      	adds	r3, #10
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	b29a      	uxth	r2, r3
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	330b      	adds	r3, #11
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	021b      	lsls	r3, r3, #8
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	4313      	orrs	r3, r2
 80167da:	b29a      	uxth	r2, r3
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	330c      	adds	r3, #12
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	330d      	adds	r3, #13
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	021b      	lsls	r3, r3, #8
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	4313      	orrs	r3, r2
 80167f6:	b29a      	uxth	r2, r3
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	7b9a      	ldrb	r2, [r3, #14]
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	7bda      	ldrb	r2, [r3, #15]
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	7c1a      	ldrb	r2, [r3, #16]
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	7c5a      	ldrb	r2, [r3, #17]
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 801681c:	7dfb      	ldrb	r3, [r7, #23]
}
 801681e:	4618      	mov	r0, r3
 8016820:	371c      	adds	r7, #28
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop
 801682c:	01000101 	.word	0x01000101

08016830 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b08c      	sub	sp, #48	; 0x30
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	4613      	mov	r3, r2
 801683c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016844:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016846:	2300      	movs	r3, #0
 8016848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801684c:	2300      	movs	r3, #0
 801684e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016852:	2300      	movs	r3, #0
 8016854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d101      	bne.n	8016862 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801685e:	2302      	movs	r3, #2
 8016860:	e0d7      	b.n	8016a12 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016866:	68bb      	ldr	r3, [r7, #8]
 8016868:	781a      	ldrb	r2, [r3, #0]
 801686a:	6a3b      	ldr	r3, [r7, #32]
 801686c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	785a      	ldrb	r2, [r3, #1]
 8016872:	6a3b      	ldr	r3, [r7, #32]
 8016874:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	3302      	adds	r3, #2
 801687a:	781b      	ldrb	r3, [r3, #0]
 801687c:	b29a      	uxth	r2, r3
 801687e:	68bb      	ldr	r3, [r7, #8]
 8016880:	3303      	adds	r3, #3
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	b29b      	uxth	r3, r3
 8016886:	021b      	lsls	r3, r3, #8
 8016888:	b29b      	uxth	r3, r3
 801688a:	4313      	orrs	r3, r2
 801688c:	b29b      	uxth	r3, r3
 801688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016892:	bf28      	it	cs
 8016894:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016898:	b29a      	uxth	r2, r3
 801689a:	6a3b      	ldr	r3, [r7, #32]
 801689c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	791a      	ldrb	r2, [r3, #4]
 80168a2:	6a3b      	ldr	r3, [r7, #32]
 80168a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80168a6:	68bb      	ldr	r3, [r7, #8]
 80168a8:	795a      	ldrb	r2, [r3, #5]
 80168aa:	6a3b      	ldr	r3, [r7, #32]
 80168ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	799a      	ldrb	r2, [r3, #6]
 80168b2:	6a3b      	ldr	r3, [r7, #32]
 80168b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	79da      	ldrb	r2, [r3, #7]
 80168ba:	6a3b      	ldr	r3, [r7, #32]
 80168bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	7a1a      	ldrb	r2, [r3, #8]
 80168c2:	6a3b      	ldr	r3, [r7, #32]
 80168c4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80168c6:	6a3b      	ldr	r3, [r7, #32]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	2b09      	cmp	r3, #9
 80168cc:	d002      	beq.n	80168d4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80168ce:	6a3b      	ldr	r3, [r7, #32]
 80168d0:	2209      	movs	r2, #9
 80168d2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80168d4:	88fb      	ldrh	r3, [r7, #6]
 80168d6:	2b09      	cmp	r3, #9
 80168d8:	f240 8099 	bls.w	8016a0e <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80168dc:	2309      	movs	r3, #9
 80168de:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80168e0:	2300      	movs	r3, #0
 80168e2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80168e4:	e07d      	b.n	80169e2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80168e6:	f107 0316 	add.w	r3, r7, #22
 80168ea:	4619      	mov	r1, r3
 80168ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168ee:	f000 f9df 	bl	8016cb0 <USBH_GetNextDesc>
 80168f2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80168f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f6:	785b      	ldrb	r3, [r3, #1]
 80168f8:	2b04      	cmp	r3, #4
 80168fa:	d172      	bne.n	80169e2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80168fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b09      	cmp	r3, #9
 8016902:	d002      	beq.n	801690a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016906:	2209      	movs	r2, #9
 8016908:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801690a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801690e:	221a      	movs	r2, #26
 8016910:	fb02 f303 	mul.w	r3, r2, r3
 8016914:	3308      	adds	r3, #8
 8016916:	6a3a      	ldr	r2, [r7, #32]
 8016918:	4413      	add	r3, r2
 801691a:	3302      	adds	r3, #2
 801691c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801691e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016920:	69f8      	ldr	r0, [r7, #28]
 8016922:	f000 f87a 	bl	8016a1a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016926:	2300      	movs	r3, #0
 8016928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801692c:	2300      	movs	r3, #0
 801692e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016930:	e03f      	b.n	80169b2 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016932:	f107 0316 	add.w	r3, r7, #22
 8016936:	4619      	mov	r1, r3
 8016938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801693a:	f000 f9b9 	bl	8016cb0 <USBH_GetNextDesc>
 801693e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016942:	785b      	ldrb	r3, [r3, #1]
 8016944:	2b05      	cmp	r3, #5
 8016946:	d134      	bne.n	80169b2 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	795b      	ldrb	r3, [r3, #5]
 801694c:	2b01      	cmp	r3, #1
 801694e:	d10f      	bne.n	8016970 <USBH_ParseCfgDesc+0x140>
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	799b      	ldrb	r3, [r3, #6]
 8016954:	2b02      	cmp	r3, #2
 8016956:	d10b      	bne.n	8016970 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	79db      	ldrb	r3, [r3, #7]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d10b      	bne.n	8016978 <USBH_ParseCfgDesc+0x148>
 8016960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	2b09      	cmp	r3, #9
 8016966:	d007      	beq.n	8016978 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801696a:	2209      	movs	r2, #9
 801696c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801696e:	e003      	b.n	8016978 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016972:	2207      	movs	r2, #7
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	e000      	b.n	801697a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016978:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801697a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801697e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016982:	3201      	adds	r2, #1
 8016984:	00d2      	lsls	r2, r2, #3
 8016986:	211a      	movs	r1, #26
 8016988:	fb01 f303 	mul.w	r3, r1, r3
 801698c:	4413      	add	r3, r2
 801698e:	3308      	adds	r3, #8
 8016990:	6a3a      	ldr	r2, [r7, #32]
 8016992:	4413      	add	r3, r2
 8016994:	3304      	adds	r3, #4
 8016996:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801699a:	69b9      	ldr	r1, [r7, #24]
 801699c:	68f8      	ldr	r0, [r7, #12]
 801699e:	f000 f86b 	bl	8016a78 <USBH_ParseEPDesc>
 80169a2:	4603      	mov	r3, r0
 80169a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80169a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169ac:	3301      	adds	r3, #1
 80169ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80169b2:	69fb      	ldr	r3, [r7, #28]
 80169b4:	791b      	ldrb	r3, [r3, #4]
 80169b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d204      	bcs.n	80169c8 <USBH_ParseCfgDesc+0x198>
 80169be:	6a3b      	ldr	r3, [r7, #32]
 80169c0:	885a      	ldrh	r2, [r3, #2]
 80169c2:	8afb      	ldrh	r3, [r7, #22]
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d8b4      	bhi.n	8016932 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	791b      	ldrb	r3, [r3, #4]
 80169cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d201      	bcs.n	80169d8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 80169d4:	2303      	movs	r3, #3
 80169d6:	e01c      	b.n	8016a12 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80169d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169dc:	3301      	adds	r3, #1
 80169de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80169e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169e6:	2b09      	cmp	r3, #9
 80169e8:	d805      	bhi.n	80169f6 <USBH_ParseCfgDesc+0x1c6>
 80169ea:	6a3b      	ldr	r3, [r7, #32]
 80169ec:	885a      	ldrh	r2, [r3, #2]
 80169ee:	8afb      	ldrh	r3, [r7, #22]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	f63f af78 	bhi.w	80168e6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80169f6:	6a3b      	ldr	r3, [r7, #32]
 80169f8:	791b      	ldrb	r3, [r3, #4]
 80169fa:	2b0a      	cmp	r3, #10
 80169fc:	bf28      	it	cs
 80169fe:	230a      	movcs	r3, #10
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d201      	bcs.n	8016a0e <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016a0a:	2303      	movs	r3, #3
 8016a0c:	e001      	b.n	8016a12 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3730      	adds	r7, #48	; 0x30
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016a1a:	b480      	push	{r7}
 8016a1c:	b083      	sub	sp, #12
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
 8016a22:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	781a      	ldrb	r2, [r3, #0]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	785a      	ldrb	r2, [r3, #1]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	789a      	ldrb	r2, [r3, #2]
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	78da      	ldrb	r2, [r3, #3]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	791a      	ldrb	r2, [r3, #4]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	795a      	ldrb	r2, [r3, #5]
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	799a      	ldrb	r2, [r3, #6]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	79da      	ldrb	r2, [r3, #7]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	7a1a      	ldrb	r2, [r3, #8]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	721a      	strb	r2, [r3, #8]
}
 8016a6c:	bf00      	nop
 8016a6e:	370c      	adds	r7, #12
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr

08016a78 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b087      	sub	sp, #28
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8016a84:	2300      	movs	r3, #0
 8016a86:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	781a      	ldrb	r2, [r3, #0]
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	785a      	ldrb	r2, [r3, #1]
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	789a      	ldrb	r2, [r3, #2]
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	78da      	ldrb	r2, [r3, #3]
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	3304      	adds	r3, #4
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	3305      	adds	r3, #5
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	b29b      	uxth	r3, r3
 8016ab8:	021b      	lsls	r3, r3, #8
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	4313      	orrs	r3, r2
 8016abe:	b29a      	uxth	r2, r3
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	799a      	ldrb	r2, [r3, #6]
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	889b      	ldrh	r3, [r3, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d009      	beq.n	8016ae8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016adc:	d804      	bhi.n	8016ae8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ae6:	d901      	bls.n	8016aec <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8016ae8:	2303      	movs	r3, #3
 8016aea:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d136      	bne.n	8016b64 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	78db      	ldrb	r3, [r3, #3]
 8016afa:	f003 0303 	and.w	r3, r3, #3
 8016afe:	2b02      	cmp	r3, #2
 8016b00:	d108      	bne.n	8016b14 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	889b      	ldrh	r3, [r3, #4]
 8016b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b0a:	f240 8097 	bls.w	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016b0e:	2303      	movs	r3, #3
 8016b10:	75fb      	strb	r3, [r7, #23]
 8016b12:	e093      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016b14:	68bb      	ldr	r3, [r7, #8]
 8016b16:	78db      	ldrb	r3, [r3, #3]
 8016b18:	f003 0303 	and.w	r3, r3, #3
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d107      	bne.n	8016b30 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	889b      	ldrh	r3, [r3, #4]
 8016b24:	2b40      	cmp	r3, #64	; 0x40
 8016b26:	f240 8089 	bls.w	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	75fb      	strb	r3, [r7, #23]
 8016b2e:	e085      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	78db      	ldrb	r3, [r3, #3]
 8016b34:	f003 0303 	and.w	r3, r3, #3
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d005      	beq.n	8016b48 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	78db      	ldrb	r3, [r3, #3]
 8016b40:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016b44:	2b03      	cmp	r3, #3
 8016b46:	d10a      	bne.n	8016b5e <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	799b      	ldrb	r3, [r3, #6]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d003      	beq.n	8016b58 <USBH_ParseEPDesc+0xe0>
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	799b      	ldrb	r3, [r3, #6]
 8016b54:	2b10      	cmp	r3, #16
 8016b56:	d970      	bls.n	8016c3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8016b58:	2303      	movs	r3, #3
 8016b5a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016b5c:	e06d      	b.n	8016c3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016b5e:	2303      	movs	r3, #3
 8016b60:	75fb      	strb	r3, [r7, #23]
 8016b62:	e06b      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016b6a:	2b01      	cmp	r3, #1
 8016b6c:	d13c      	bne.n	8016be8 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	78db      	ldrb	r3, [r3, #3]
 8016b72:	f003 0303 	and.w	r3, r3, #3
 8016b76:	2b02      	cmp	r3, #2
 8016b78:	d005      	beq.n	8016b86 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	78db      	ldrb	r3, [r3, #3]
 8016b7e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	889b      	ldrh	r3, [r3, #4]
 8016b8a:	2b40      	cmp	r3, #64	; 0x40
 8016b8c:	d956      	bls.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016b8e:	2303      	movs	r3, #3
 8016b90:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016b92:	e053      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	78db      	ldrb	r3, [r3, #3]
 8016b98:	f003 0303 	and.w	r3, r3, #3
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d10e      	bne.n	8016bbe <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	799b      	ldrb	r3, [r3, #6]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d007      	beq.n	8016bb8 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8016bac:	2b10      	cmp	r3, #16
 8016bae:	d803      	bhi.n	8016bb8 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8016bb4:	2b40      	cmp	r3, #64	; 0x40
 8016bb6:	d941      	bls.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016bb8:	2303      	movs	r3, #3
 8016bba:	75fb      	strb	r3, [r7, #23]
 8016bbc:	e03e      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016bbe:	68bb      	ldr	r3, [r7, #8]
 8016bc0:	78db      	ldrb	r3, [r3, #3]
 8016bc2:	f003 0303 	and.w	r3, r3, #3
 8016bc6:	2b03      	cmp	r3, #3
 8016bc8:	d10b      	bne.n	8016be2 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	799b      	ldrb	r3, [r3, #6]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d004      	beq.n	8016bdc <USBH_ParseEPDesc+0x164>
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	889b      	ldrh	r3, [r3, #4]
 8016bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bda:	d32f      	bcc.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016bdc:	2303      	movs	r3, #3
 8016bde:	75fb      	strb	r3, [r7, #23]
 8016be0:	e02c      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016be2:	2303      	movs	r3, #3
 8016be4:	75fb      	strb	r3, [r7, #23]
 8016be6:	e029      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d120      	bne.n	8016c34 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	78db      	ldrb	r3, [r3, #3]
 8016bf6:	f003 0303 	and.w	r3, r3, #3
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d106      	bne.n	8016c0c <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	889b      	ldrh	r3, [r3, #4]
 8016c02:	2b08      	cmp	r3, #8
 8016c04:	d01a      	beq.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016c06:	2303      	movs	r3, #3
 8016c08:	75fb      	strb	r3, [r7, #23]
 8016c0a:	e017      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	78db      	ldrb	r3, [r3, #3]
 8016c10:	f003 0303 	and.w	r3, r3, #3
 8016c14:	2b03      	cmp	r3, #3
 8016c16:	d10a      	bne.n	8016c2e <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	799b      	ldrb	r3, [r3, #6]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d003      	beq.n	8016c28 <USBH_ParseEPDesc+0x1b0>
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	889b      	ldrh	r3, [r3, #4]
 8016c24:	2b08      	cmp	r3, #8
 8016c26:	d909      	bls.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016c28:	2303      	movs	r3, #3
 8016c2a:	75fb      	strb	r3, [r7, #23]
 8016c2c:	e006      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016c2e:	2303      	movs	r3, #3
 8016c30:	75fb      	strb	r3, [r7, #23]
 8016c32:	e003      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016c34:	2303      	movs	r3, #3
 8016c36:	75fb      	strb	r3, [r7, #23]
 8016c38:	e000      	b.n	8016c3c <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016c3a:	bf00      	nop
  }

  return status;
 8016c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	371c      	adds	r7, #28
 8016c42:	46bd      	mov	sp, r7
 8016c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c48:	4770      	bx	lr

08016c4a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016c4a:	b480      	push	{r7}
 8016c4c:	b087      	sub	sp, #28
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	60f8      	str	r0, [r7, #12]
 8016c52:	60b9      	str	r1, [r7, #8]
 8016c54:	4613      	mov	r3, r2
 8016c56:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	2b03      	cmp	r3, #3
 8016c60:	d120      	bne.n	8016ca4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	781b      	ldrb	r3, [r3, #0]
 8016c66:	1e9a      	subs	r2, r3, #2
 8016c68:	88fb      	ldrh	r3, [r7, #6]
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	bf28      	it	cs
 8016c6e:	4613      	movcs	r3, r2
 8016c70:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	3302      	adds	r3, #2
 8016c76:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016c78:	2300      	movs	r3, #0
 8016c7a:	82fb      	strh	r3, [r7, #22]
 8016c7c:	e00b      	b.n	8016c96 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016c7e:	8afb      	ldrh	r3, [r7, #22]
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	4413      	add	r3, r2
 8016c84:	781a      	ldrb	r2, [r3, #0]
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	3301      	adds	r3, #1
 8016c8e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016c90:	8afb      	ldrh	r3, [r7, #22]
 8016c92:	3302      	adds	r3, #2
 8016c94:	82fb      	strh	r3, [r7, #22]
 8016c96:	8afa      	ldrh	r2, [r7, #22]
 8016c98:	8abb      	ldrh	r3, [r7, #20]
 8016c9a:	429a      	cmp	r2, r3
 8016c9c:	d3ef      	bcc.n	8016c7e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	701a      	strb	r2, [r3, #0]
  }
}
 8016ca4:	bf00      	nop
 8016ca6:	371c      	adds	r7, #28
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr

08016cb0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016cb0:	b480      	push	{r7}
 8016cb2:	b085      	sub	sp, #20
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
 8016cb8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	881a      	ldrh	r2, [r3, #0]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	4413      	add	r3, r2
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4413      	add	r3, r2
 8016cd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
}
 8016cda:	4618      	mov	r0, r3
 8016cdc:	3714      	adds	r7, #20
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr

08016ce6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016ce6:	b580      	push	{r7, lr}
 8016ce8:	b086      	sub	sp, #24
 8016cea:	af00      	add	r7, sp, #0
 8016cec:	60f8      	str	r0, [r7, #12]
 8016cee:	60b9      	str	r1, [r7, #8]
 8016cf0:	4613      	mov	r3, r2
 8016cf2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	789b      	ldrb	r3, [r3, #2]
 8016cfc:	2b01      	cmp	r3, #1
 8016cfe:	d002      	beq.n	8016d06 <USBH_CtlReq+0x20>
 8016d00:	2b02      	cmp	r3, #2
 8016d02:	d00f      	beq.n	8016d24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8016d04:	e027      	b.n	8016d56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	68ba      	ldr	r2, [r7, #8]
 8016d0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	88fa      	ldrh	r2, [r7, #6]
 8016d10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	2201      	movs	r2, #1
 8016d16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	2202      	movs	r2, #2
 8016d1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8016d1e:	2301      	movs	r3, #1
 8016d20:	75fb      	strb	r3, [r7, #23]
      break;
 8016d22:	e018      	b.n	8016d56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8016d24:	68f8      	ldr	r0, [r7, #12]
 8016d26:	f000 f81b 	bl	8016d60 <USBH_HandleControl>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8016d2e:	7dfb      	ldrb	r3, [r7, #23]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d002      	beq.n	8016d3a <USBH_CtlReq+0x54>
 8016d34:	7dfb      	ldrb	r3, [r7, #23]
 8016d36:	2b03      	cmp	r3, #3
 8016d38:	d106      	bne.n	8016d48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	2200      	movs	r2, #0
 8016d44:	761a      	strb	r2, [r3, #24]
      break;
 8016d46:	e005      	b.n	8016d54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8016d48:	7dfb      	ldrb	r3, [r7, #23]
 8016d4a:	2b02      	cmp	r3, #2
 8016d4c:	d102      	bne.n	8016d54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2201      	movs	r2, #1
 8016d52:	709a      	strb	r2, [r3, #2]
      break;
 8016d54:	bf00      	nop
  }
  return status;
 8016d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3718      	adds	r7, #24
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b086      	sub	sp, #24
 8016d64:	af02      	add	r7, sp, #8
 8016d66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016d68:	2301      	movs	r3, #1
 8016d6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	7e1b      	ldrb	r3, [r3, #24]
 8016d74:	3b01      	subs	r3, #1
 8016d76:	2b0a      	cmp	r3, #10
 8016d78:	f200 8156 	bhi.w	8017028 <USBH_HandleControl+0x2c8>
 8016d7c:	a201      	add	r2, pc, #4	; (adr r2, 8016d84 <USBH_HandleControl+0x24>)
 8016d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d82:	bf00      	nop
 8016d84:	08016db1 	.word	0x08016db1
 8016d88:	08016dcb 	.word	0x08016dcb
 8016d8c:	08016e35 	.word	0x08016e35
 8016d90:	08016e5b 	.word	0x08016e5b
 8016d94:	08016e93 	.word	0x08016e93
 8016d98:	08016ebd 	.word	0x08016ebd
 8016d9c:	08016f0f 	.word	0x08016f0f
 8016da0:	08016f31 	.word	0x08016f31
 8016da4:	08016f6d 	.word	0x08016f6d
 8016da8:	08016f93 	.word	0x08016f93
 8016dac:	08016fd1 	.word	0x08016fd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f103 0110 	add.w	r1, r3, #16
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	795b      	ldrb	r3, [r3, #5]
 8016dba:	461a      	mov	r2, r3
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f000 f943 	bl	8017048 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	2202      	movs	r2, #2
 8016dc6:	761a      	strb	r2, [r3, #24]
      break;
 8016dc8:	e139      	b.n	801703e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	795b      	ldrb	r3, [r3, #5]
 8016dce:	4619      	mov	r1, r3
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f7ed ff3d 	bl	8004c50 <USBH_LL_GetURBState>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016dda:	7bbb      	ldrb	r3, [r7, #14]
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d11e      	bne.n	8016e1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	7c1b      	ldrb	r3, [r3, #16]
 8016de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016de8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	8adb      	ldrh	r3, [r3, #22]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00a      	beq.n	8016e08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016df2:	7b7b      	ldrb	r3, [r7, #13]
 8016df4:	2b80      	cmp	r3, #128	; 0x80
 8016df6:	d103      	bne.n	8016e00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2203      	movs	r2, #3
 8016dfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016dfe:	e115      	b.n	801702c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2205      	movs	r2, #5
 8016e04:	761a      	strb	r2, [r3, #24]
      break;
 8016e06:	e111      	b.n	801702c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8016e08:	7b7b      	ldrb	r3, [r7, #13]
 8016e0a:	2b80      	cmp	r3, #128	; 0x80
 8016e0c:	d103      	bne.n	8016e16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	2209      	movs	r2, #9
 8016e12:	761a      	strb	r2, [r3, #24]
      break;
 8016e14:	e10a      	b.n	801702c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2207      	movs	r2, #7
 8016e1a:	761a      	strb	r2, [r3, #24]
      break;
 8016e1c:	e106      	b.n	801702c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016e1e:	7bbb      	ldrb	r3, [r7, #14]
 8016e20:	2b04      	cmp	r3, #4
 8016e22:	d003      	beq.n	8016e2c <USBH_HandleControl+0xcc>
 8016e24:	7bbb      	ldrb	r3, [r7, #14]
 8016e26:	2b02      	cmp	r3, #2
 8016e28:	f040 8100 	bne.w	801702c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	220b      	movs	r2, #11
 8016e30:	761a      	strb	r2, [r3, #24]
      break;
 8016e32:	e0fb      	b.n	801702c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016e3a:	b29a      	uxth	r2, r3
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6899      	ldr	r1, [r3, #8]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	899a      	ldrh	r2, [r3, #12]
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	791b      	ldrb	r3, [r3, #4]
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f000 f93a 	bl	80170c6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2204      	movs	r2, #4
 8016e56:	761a      	strb	r2, [r3, #24]
      break;
 8016e58:	e0f1      	b.n	801703e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	791b      	ldrb	r3, [r3, #4]
 8016e5e:	4619      	mov	r1, r3
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f7ed fef5 	bl	8004c50 <USBH_LL_GetURBState>
 8016e66:	4603      	mov	r3, r0
 8016e68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016e6a:	7bbb      	ldrb	r3, [r7, #14]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d102      	bne.n	8016e76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2209      	movs	r2, #9
 8016e74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016e76:	7bbb      	ldrb	r3, [r7, #14]
 8016e78:	2b05      	cmp	r3, #5
 8016e7a:	d102      	bne.n	8016e82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016e7c:	2303      	movs	r3, #3
 8016e7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016e80:	e0d6      	b.n	8017030 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8016e82:	7bbb      	ldrb	r3, [r7, #14]
 8016e84:	2b04      	cmp	r3, #4
 8016e86:	f040 80d3 	bne.w	8017030 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	220b      	movs	r2, #11
 8016e8e:	761a      	strb	r2, [r3, #24]
      break;
 8016e90:	e0ce      	b.n	8017030 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	6899      	ldr	r1, [r3, #8]
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	899a      	ldrh	r2, [r3, #12]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	795b      	ldrb	r3, [r3, #5]
 8016e9e:	2001      	movs	r0, #1
 8016ea0:	9000      	str	r0, [sp, #0]
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f000 f8ea 	bl	801707c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016eae:	b29a      	uxth	r2, r3
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2206      	movs	r2, #6
 8016eb8:	761a      	strb	r2, [r3, #24]
      break;
 8016eba:	e0c0      	b.n	801703e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	795b      	ldrb	r3, [r3, #5]
 8016ec0:	4619      	mov	r1, r3
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7ed fec4 	bl	8004c50 <USBH_LL_GetURBState>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016ecc:	7bbb      	ldrb	r3, [r7, #14]
 8016ece:	2b01      	cmp	r3, #1
 8016ed0:	d103      	bne.n	8016eda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2207      	movs	r2, #7
 8016ed6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016ed8:	e0ac      	b.n	8017034 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8016eda:	7bbb      	ldrb	r3, [r7, #14]
 8016edc:	2b05      	cmp	r3, #5
 8016ede:	d105      	bne.n	8016eec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	220c      	movs	r2, #12
 8016ee4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016ee6:	2303      	movs	r3, #3
 8016ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8016eea:	e0a3      	b.n	8017034 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016eec:	7bbb      	ldrb	r3, [r7, #14]
 8016eee:	2b02      	cmp	r3, #2
 8016ef0:	d103      	bne.n	8016efa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2205      	movs	r2, #5
 8016ef6:	761a      	strb	r2, [r3, #24]
      break;
 8016ef8:	e09c      	b.n	8017034 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8016efa:	7bbb      	ldrb	r3, [r7, #14]
 8016efc:	2b04      	cmp	r3, #4
 8016efe:	f040 8099 	bne.w	8017034 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	220b      	movs	r2, #11
 8016f06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016f08:	2302      	movs	r3, #2
 8016f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8016f0c:	e092      	b.n	8017034 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	791b      	ldrb	r3, [r3, #4]
 8016f12:	2200      	movs	r2, #0
 8016f14:	2100      	movs	r1, #0
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	f000 f8d5 	bl	80170c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2208      	movs	r2, #8
 8016f2c:	761a      	strb	r2, [r3, #24]

      break;
 8016f2e:	e086      	b.n	801703e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	791b      	ldrb	r3, [r3, #4]
 8016f34:	4619      	mov	r1, r3
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f7ed fe8a 	bl	8004c50 <USBH_LL_GetURBState>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016f40:	7bbb      	ldrb	r3, [r7, #14]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d105      	bne.n	8016f52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	220d      	movs	r2, #13
 8016f4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016f50:	e072      	b.n	8017038 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8016f52:	7bbb      	ldrb	r3, [r7, #14]
 8016f54:	2b04      	cmp	r3, #4
 8016f56:	d103      	bne.n	8016f60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	220b      	movs	r2, #11
 8016f5c:	761a      	strb	r2, [r3, #24]
      break;
 8016f5e:	e06b      	b.n	8017038 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8016f60:	7bbb      	ldrb	r3, [r7, #14]
 8016f62:	2b05      	cmp	r3, #5
 8016f64:	d168      	bne.n	8017038 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8016f66:	2303      	movs	r3, #3
 8016f68:	73fb      	strb	r3, [r7, #15]
      break;
 8016f6a:	e065      	b.n	8017038 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	795b      	ldrb	r3, [r3, #5]
 8016f70:	2201      	movs	r2, #1
 8016f72:	9200      	str	r2, [sp, #0]
 8016f74:	2200      	movs	r2, #0
 8016f76:	2100      	movs	r1, #0
 8016f78:	6878      	ldr	r0, [r7, #4]
 8016f7a:	f000 f87f 	bl	801707c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016f84:	b29a      	uxth	r2, r3
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	220a      	movs	r2, #10
 8016f8e:	761a      	strb	r2, [r3, #24]
      break;
 8016f90:	e055      	b.n	801703e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	795b      	ldrb	r3, [r3, #5]
 8016f96:	4619      	mov	r1, r3
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f7ed fe59 	bl	8004c50 <USBH_LL_GetURBState>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016fa2:	7bbb      	ldrb	r3, [r7, #14]
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	d105      	bne.n	8016fb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	220d      	movs	r2, #13
 8016fb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016fb2:	e043      	b.n	801703c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016fb4:	7bbb      	ldrb	r3, [r7, #14]
 8016fb6:	2b02      	cmp	r3, #2
 8016fb8:	d103      	bne.n	8016fc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2209      	movs	r2, #9
 8016fbe:	761a      	strb	r2, [r3, #24]
      break;
 8016fc0:	e03c      	b.n	801703c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8016fc2:	7bbb      	ldrb	r3, [r7, #14]
 8016fc4:	2b04      	cmp	r3, #4
 8016fc6:	d139      	bne.n	801703c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	220b      	movs	r2, #11
 8016fcc:	761a      	strb	r2, [r3, #24]
      break;
 8016fce:	e035      	b.n	801703c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	7e5b      	ldrb	r3, [r3, #25]
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	b2da      	uxtb	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	765a      	strb	r2, [r3, #25]
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	7e5b      	ldrb	r3, [r3, #25]
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	d806      	bhi.n	8016ff2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2201      	movs	r2, #1
 8016fe8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2201      	movs	r2, #1
 8016fee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8016ff0:	e025      	b.n	801703e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016ff8:	2106      	movs	r1, #6
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2200      	movs	r2, #0
 8017002:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	795b      	ldrb	r3, [r3, #5]
 8017008:	4619      	mov	r1, r3
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f000 f90d 	bl	801722a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	791b      	ldrb	r3, [r3, #4]
 8017014:	4619      	mov	r1, r3
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f000 f907 	bl	801722a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2200      	movs	r2, #0
 8017020:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8017022:	2302      	movs	r3, #2
 8017024:	73fb      	strb	r3, [r7, #15]
      break;
 8017026:	e00a      	b.n	801703e <USBH_HandleControl+0x2de>

    default:
      break;
 8017028:	bf00      	nop
 801702a:	e008      	b.n	801703e <USBH_HandleControl+0x2de>
      break;
 801702c:	bf00      	nop
 801702e:	e006      	b.n	801703e <USBH_HandleControl+0x2de>
      break;
 8017030:	bf00      	nop
 8017032:	e004      	b.n	801703e <USBH_HandleControl+0x2de>
      break;
 8017034:	bf00      	nop
 8017036:	e002      	b.n	801703e <USBH_HandleControl+0x2de>
      break;
 8017038:	bf00      	nop
 801703a:	e000      	b.n	801703e <USBH_HandleControl+0x2de>
      break;
 801703c:	bf00      	nop
  }

  return status;
 801703e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017040:	4618      	mov	r0, r3
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b088      	sub	sp, #32
 801704c:	af04      	add	r7, sp, #16
 801704e:	60f8      	str	r0, [r7, #12]
 8017050:	60b9      	str	r1, [r7, #8]
 8017052:	4613      	mov	r3, r2
 8017054:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017056:	79f9      	ldrb	r1, [r7, #7]
 8017058:	2300      	movs	r3, #0
 801705a:	9303      	str	r3, [sp, #12]
 801705c:	2308      	movs	r3, #8
 801705e:	9302      	str	r3, [sp, #8]
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	9301      	str	r3, [sp, #4]
 8017064:	2300      	movs	r3, #0
 8017066:	9300      	str	r3, [sp, #0]
 8017068:	2300      	movs	r3, #0
 801706a:	2200      	movs	r2, #0
 801706c:	68f8      	ldr	r0, [r7, #12]
 801706e:	f7ed fdbe 	bl	8004bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8017072:	2300      	movs	r3, #0
}
 8017074:	4618      	mov	r0, r3
 8017076:	3710      	adds	r7, #16
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}

0801707c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b088      	sub	sp, #32
 8017080:	af04      	add	r7, sp, #16
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	4611      	mov	r1, r2
 8017088:	461a      	mov	r2, r3
 801708a:	460b      	mov	r3, r1
 801708c:	80fb      	strh	r3, [r7, #6]
 801708e:	4613      	mov	r3, r2
 8017090:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017098:	2b00      	cmp	r3, #0
 801709a:	d001      	beq.n	80170a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801709c:	2300      	movs	r3, #0
 801709e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80170a0:	7979      	ldrb	r1, [r7, #5]
 80170a2:	7e3b      	ldrb	r3, [r7, #24]
 80170a4:	9303      	str	r3, [sp, #12]
 80170a6:	88fb      	ldrh	r3, [r7, #6]
 80170a8:	9302      	str	r3, [sp, #8]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	9301      	str	r3, [sp, #4]
 80170ae:	2301      	movs	r3, #1
 80170b0:	9300      	str	r3, [sp, #0]
 80170b2:	2300      	movs	r3, #0
 80170b4:	2200      	movs	r2, #0
 80170b6:	68f8      	ldr	r0, [r7, #12]
 80170b8:	f7ed fd99 	bl	8004bee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80170bc:	2300      	movs	r3, #0
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3710      	adds	r7, #16
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}

080170c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80170c6:	b580      	push	{r7, lr}
 80170c8:	b088      	sub	sp, #32
 80170ca:	af04      	add	r7, sp, #16
 80170cc:	60f8      	str	r0, [r7, #12]
 80170ce:	60b9      	str	r1, [r7, #8]
 80170d0:	4611      	mov	r1, r2
 80170d2:	461a      	mov	r2, r3
 80170d4:	460b      	mov	r3, r1
 80170d6:	80fb      	strh	r3, [r7, #6]
 80170d8:	4613      	mov	r3, r2
 80170da:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80170dc:	7979      	ldrb	r1, [r7, #5]
 80170de:	2300      	movs	r3, #0
 80170e0:	9303      	str	r3, [sp, #12]
 80170e2:	88fb      	ldrh	r3, [r7, #6]
 80170e4:	9302      	str	r3, [sp, #8]
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	9301      	str	r3, [sp, #4]
 80170ea:	2301      	movs	r3, #1
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	2300      	movs	r3, #0
 80170f0:	2201      	movs	r2, #1
 80170f2:	68f8      	ldr	r0, [r7, #12]
 80170f4:	f7ed fd7b 	bl	8004bee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80170f8:	2300      	movs	r3, #0

}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3710      	adds	r7, #16
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8017102:	b580      	push	{r7, lr}
 8017104:	b088      	sub	sp, #32
 8017106:	af04      	add	r7, sp, #16
 8017108:	60f8      	str	r0, [r7, #12]
 801710a:	60b9      	str	r1, [r7, #8]
 801710c:	4611      	mov	r1, r2
 801710e:	461a      	mov	r2, r3
 8017110:	460b      	mov	r3, r1
 8017112:	80fb      	strh	r3, [r7, #6]
 8017114:	4613      	mov	r3, r2
 8017116:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801711e:	2b00      	cmp	r3, #0
 8017120:	d001      	beq.n	8017126 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8017122:	2300      	movs	r3, #0
 8017124:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017126:	7979      	ldrb	r1, [r7, #5]
 8017128:	7e3b      	ldrb	r3, [r7, #24]
 801712a:	9303      	str	r3, [sp, #12]
 801712c:	88fb      	ldrh	r3, [r7, #6]
 801712e:	9302      	str	r3, [sp, #8]
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	9301      	str	r3, [sp, #4]
 8017134:	2301      	movs	r3, #1
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	2302      	movs	r3, #2
 801713a:	2200      	movs	r2, #0
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	f7ed fd56 	bl	8004bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3710      	adds	r7, #16
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}

0801714c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b088      	sub	sp, #32
 8017150:	af04      	add	r7, sp, #16
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	60b9      	str	r1, [r7, #8]
 8017156:	4611      	mov	r1, r2
 8017158:	461a      	mov	r2, r3
 801715a:	460b      	mov	r3, r1
 801715c:	80fb      	strh	r3, [r7, #6]
 801715e:	4613      	mov	r3, r2
 8017160:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017162:	7979      	ldrb	r1, [r7, #5]
 8017164:	2300      	movs	r3, #0
 8017166:	9303      	str	r3, [sp, #12]
 8017168:	88fb      	ldrh	r3, [r7, #6]
 801716a:	9302      	str	r3, [sp, #8]
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	9301      	str	r3, [sp, #4]
 8017170:	2301      	movs	r3, #1
 8017172:	9300      	str	r3, [sp, #0]
 8017174:	2302      	movs	r3, #2
 8017176:	2201      	movs	r2, #1
 8017178:	68f8      	ldr	r0, [r7, #12]
 801717a:	f7ed fd38 	bl	8004bee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801717e:	2300      	movs	r3, #0
}
 8017180:	4618      	mov	r0, r3
 8017182:	3710      	adds	r7, #16
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b086      	sub	sp, #24
 801718c:	af04      	add	r7, sp, #16
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	4608      	mov	r0, r1
 8017192:	4611      	mov	r1, r2
 8017194:	461a      	mov	r2, r3
 8017196:	4603      	mov	r3, r0
 8017198:	70fb      	strb	r3, [r7, #3]
 801719a:	460b      	mov	r3, r1
 801719c:	70bb      	strb	r3, [r7, #2]
 801719e:	4613      	mov	r3, r2
 80171a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80171a2:	7878      	ldrb	r0, [r7, #1]
 80171a4:	78ba      	ldrb	r2, [r7, #2]
 80171a6:	78f9      	ldrb	r1, [r7, #3]
 80171a8:	8b3b      	ldrh	r3, [r7, #24]
 80171aa:	9302      	str	r3, [sp, #8]
 80171ac:	7d3b      	ldrb	r3, [r7, #20]
 80171ae:	9301      	str	r3, [sp, #4]
 80171b0:	7c3b      	ldrb	r3, [r7, #16]
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	4603      	mov	r3, r0
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f7ed fccb 	bl	8004b52 <USBH_LL_OpenPipe>

  return USBH_OK;
 80171bc:	2300      	movs	r3, #0
}
 80171be:	4618      	mov	r0, r3
 80171c0:	3708      	adds	r7, #8
 80171c2:	46bd      	mov	sp, r7
 80171c4:	bd80      	pop	{r7, pc}

080171c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80171c6:	b580      	push	{r7, lr}
 80171c8:	b082      	sub	sp, #8
 80171ca:	af00      	add	r7, sp, #0
 80171cc:	6078      	str	r0, [r7, #4]
 80171ce:	460b      	mov	r3, r1
 80171d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80171d2:	78fb      	ldrb	r3, [r7, #3]
 80171d4:	4619      	mov	r1, r3
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7ed fcea 	bl	8004bb0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80171dc:	2300      	movs	r3, #0
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3708      	adds	r7, #8
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}

080171e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80171e6:	b580      	push	{r7, lr}
 80171e8:	b084      	sub	sp, #16
 80171ea:	af00      	add	r7, sp, #0
 80171ec:	6078      	str	r0, [r7, #4]
 80171ee:	460b      	mov	r3, r1
 80171f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80171f2:	6878      	ldr	r0, [r7, #4]
 80171f4:	f000 f839 	bl	801726a <USBH_GetFreePipe>
 80171f8:	4603      	mov	r3, r0
 80171fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80171fc:	89fb      	ldrh	r3, [r7, #14]
 80171fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017202:	4293      	cmp	r3, r2
 8017204:	d00b      	beq.n	801721e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8017206:	78fa      	ldrb	r2, [r7, #3]
 8017208:	89fb      	ldrh	r3, [r7, #14]
 801720a:	f003 030f 	and.w	r3, r3, #15
 801720e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017212:	6879      	ldr	r1, [r7, #4]
 8017214:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017218:	009b      	lsls	r3, r3, #2
 801721a:	440b      	add	r3, r1
 801721c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801721e:	89fb      	ldrh	r3, [r7, #14]
 8017220:	b2db      	uxtb	r3, r3
}
 8017222:	4618      	mov	r0, r3
 8017224:	3710      	adds	r7, #16
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}

0801722a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801722a:	b480      	push	{r7}
 801722c:	b083      	sub	sp, #12
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
 8017232:	460b      	mov	r3, r1
 8017234:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8017236:	78fb      	ldrb	r3, [r7, #3]
 8017238:	2b0f      	cmp	r3, #15
 801723a:	d80f      	bhi.n	801725c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801723c:	78fb      	ldrb	r3, [r7, #3]
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017244:	009b      	lsls	r3, r3, #2
 8017246:	4413      	add	r3, r2
 8017248:	685a      	ldr	r2, [r3, #4]
 801724a:	78fb      	ldrb	r3, [r7, #3]
 801724c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017250:	6879      	ldr	r1, [r7, #4]
 8017252:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017256:	009b      	lsls	r3, r3, #2
 8017258:	440b      	add	r3, r1
 801725a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801725c:	2300      	movs	r3, #0
}
 801725e:	4618      	mov	r0, r3
 8017260:	370c      	adds	r7, #12
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr

0801726a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801726a:	b480      	push	{r7}
 801726c:	b085      	sub	sp, #20
 801726e:	af00      	add	r7, sp, #0
 8017270:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8017272:	2300      	movs	r3, #0
 8017274:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017276:	2300      	movs	r3, #0
 8017278:	73fb      	strb	r3, [r7, #15]
 801727a:	e010      	b.n	801729e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801727c:	7bfb      	ldrb	r3, [r7, #15]
 801727e:	687a      	ldr	r2, [r7, #4]
 8017280:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017284:	009b      	lsls	r3, r3, #2
 8017286:	4413      	add	r3, r2
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801728e:	2b00      	cmp	r3, #0
 8017290:	d102      	bne.n	8017298 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8017292:	7bfb      	ldrb	r3, [r7, #15]
 8017294:	b29b      	uxth	r3, r3
 8017296:	e007      	b.n	80172a8 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017298:	7bfb      	ldrb	r3, [r7, #15]
 801729a:	3301      	adds	r3, #1
 801729c:	73fb      	strb	r3, [r7, #15]
 801729e:	7bfb      	ldrb	r3, [r7, #15]
 80172a0:	2b0f      	cmp	r3, #15
 80172a2:	d9eb      	bls.n	801727c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80172a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3714      	adds	r7, #20
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b087      	sub	sp, #28
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	4613      	mov	r3, r2
 80172c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80172c2:	2301      	movs	r3, #1
 80172c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80172c6:	2300      	movs	r3, #0
 80172c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80172ca:	4b1f      	ldr	r3, [pc, #124]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172cc:	7a5b      	ldrb	r3, [r3, #9]
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d131      	bne.n	8017338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80172d4:	4b1c      	ldr	r3, [pc, #112]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172d6:	7a5b      	ldrb	r3, [r3, #9]
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	461a      	mov	r2, r3
 80172dc:	4b1a      	ldr	r3, [pc, #104]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172de:	2100      	movs	r1, #0
 80172e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80172e2:	4b19      	ldr	r3, [pc, #100]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172e4:	7a5b      	ldrb	r3, [r3, #9]
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	4a17      	ldr	r2, [pc, #92]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172ea:	009b      	lsls	r3, r3, #2
 80172ec:	4413      	add	r3, r2
 80172ee:	68fa      	ldr	r2, [r7, #12]
 80172f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80172f2:	4b15      	ldr	r3, [pc, #84]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172f4:	7a5b      	ldrb	r3, [r3, #9]
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	461a      	mov	r2, r3
 80172fa:	4b13      	ldr	r3, [pc, #76]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 80172fc:	4413      	add	r3, r2
 80172fe:	79fa      	ldrb	r2, [r7, #7]
 8017300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017302:	4b11      	ldr	r3, [pc, #68]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 8017304:	7a5b      	ldrb	r3, [r3, #9]
 8017306:	b2db      	uxtb	r3, r3
 8017308:	1c5a      	adds	r2, r3, #1
 801730a:	b2d1      	uxtb	r1, r2
 801730c:	4a0e      	ldr	r2, [pc, #56]	; (8017348 <FATFS_LinkDriverEx+0x94>)
 801730e:	7251      	strb	r1, [r2, #9]
 8017310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017312:	7dbb      	ldrb	r3, [r7, #22]
 8017314:	3330      	adds	r3, #48	; 0x30
 8017316:	b2da      	uxtb	r2, r3
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	3301      	adds	r3, #1
 8017320:	223a      	movs	r2, #58	; 0x3a
 8017322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017324:	68bb      	ldr	r3, [r7, #8]
 8017326:	3302      	adds	r3, #2
 8017328:	222f      	movs	r2, #47	; 0x2f
 801732a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	3303      	adds	r3, #3
 8017330:	2200      	movs	r2, #0
 8017332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017334:	2300      	movs	r3, #0
 8017336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017338:	7dfb      	ldrb	r3, [r7, #23]
}
 801733a:	4618      	mov	r0, r3
 801733c:	371c      	adds	r7, #28
 801733e:	46bd      	mov	sp, r7
 8017340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017344:	4770      	bx	lr
 8017346:	bf00      	nop
 8017348:	20002048 	.word	0x20002048

0801734c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017356:	2200      	movs	r2, #0
 8017358:	6839      	ldr	r1, [r7, #0]
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7ff ffaa 	bl	80172b4 <FATFS_LinkDriverEx>
 8017360:	4603      	mov	r3, r0
}
 8017362:	4618      	mov	r0, r3
 8017364:	3708      	adds	r7, #8
 8017366:	46bd      	mov	sp, r7
 8017368:	bd80      	pop	{r7, pc}
	...

0801736c <malloc>:
 801736c:	4b02      	ldr	r3, [pc, #8]	; (8017378 <malloc+0xc>)
 801736e:	4601      	mov	r1, r0
 8017370:	6818      	ldr	r0, [r3, #0]
 8017372:	f000 b82b 	b.w	80173cc <_malloc_r>
 8017376:	bf00      	nop
 8017378:	20000094 	.word	0x20000094

0801737c <free>:
 801737c:	4b02      	ldr	r3, [pc, #8]	; (8017388 <free+0xc>)
 801737e:	4601      	mov	r1, r0
 8017380:	6818      	ldr	r0, [r3, #0]
 8017382:	f000 b901 	b.w	8017588 <_free_r>
 8017386:	bf00      	nop
 8017388:	20000094 	.word	0x20000094

0801738c <sbrk_aligned>:
 801738c:	b570      	push	{r4, r5, r6, lr}
 801738e:	4e0e      	ldr	r6, [pc, #56]	; (80173c8 <sbrk_aligned+0x3c>)
 8017390:	460c      	mov	r4, r1
 8017392:	6831      	ldr	r1, [r6, #0]
 8017394:	4605      	mov	r5, r0
 8017396:	b911      	cbnz	r1, 801739e <sbrk_aligned+0x12>
 8017398:	f000 f8ac 	bl	80174f4 <_sbrk_r>
 801739c:	6030      	str	r0, [r6, #0]
 801739e:	4621      	mov	r1, r4
 80173a0:	4628      	mov	r0, r5
 80173a2:	f000 f8a7 	bl	80174f4 <_sbrk_r>
 80173a6:	1c43      	adds	r3, r0, #1
 80173a8:	d00a      	beq.n	80173c0 <sbrk_aligned+0x34>
 80173aa:	1cc4      	adds	r4, r0, #3
 80173ac:	f024 0403 	bic.w	r4, r4, #3
 80173b0:	42a0      	cmp	r0, r4
 80173b2:	d007      	beq.n	80173c4 <sbrk_aligned+0x38>
 80173b4:	1a21      	subs	r1, r4, r0
 80173b6:	4628      	mov	r0, r5
 80173b8:	f000 f89c 	bl	80174f4 <_sbrk_r>
 80173bc:	3001      	adds	r0, #1
 80173be:	d101      	bne.n	80173c4 <sbrk_aligned+0x38>
 80173c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80173c4:	4620      	mov	r0, r4
 80173c6:	bd70      	pop	{r4, r5, r6, pc}
 80173c8:	20002058 	.word	0x20002058

080173cc <_malloc_r>:
 80173cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173d0:	1ccd      	adds	r5, r1, #3
 80173d2:	f025 0503 	bic.w	r5, r5, #3
 80173d6:	3508      	adds	r5, #8
 80173d8:	2d0c      	cmp	r5, #12
 80173da:	bf38      	it	cc
 80173dc:	250c      	movcc	r5, #12
 80173de:	2d00      	cmp	r5, #0
 80173e0:	4607      	mov	r7, r0
 80173e2:	db01      	blt.n	80173e8 <_malloc_r+0x1c>
 80173e4:	42a9      	cmp	r1, r5
 80173e6:	d905      	bls.n	80173f4 <_malloc_r+0x28>
 80173e8:	230c      	movs	r3, #12
 80173ea:	603b      	str	r3, [r7, #0]
 80173ec:	2600      	movs	r6, #0
 80173ee:	4630      	mov	r0, r6
 80173f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80174c8 <_malloc_r+0xfc>
 80173f8:	f000 f868 	bl	80174cc <__malloc_lock>
 80173fc:	f8d8 3000 	ldr.w	r3, [r8]
 8017400:	461c      	mov	r4, r3
 8017402:	bb5c      	cbnz	r4, 801745c <_malloc_r+0x90>
 8017404:	4629      	mov	r1, r5
 8017406:	4638      	mov	r0, r7
 8017408:	f7ff ffc0 	bl	801738c <sbrk_aligned>
 801740c:	1c43      	adds	r3, r0, #1
 801740e:	4604      	mov	r4, r0
 8017410:	d155      	bne.n	80174be <_malloc_r+0xf2>
 8017412:	f8d8 4000 	ldr.w	r4, [r8]
 8017416:	4626      	mov	r6, r4
 8017418:	2e00      	cmp	r6, #0
 801741a:	d145      	bne.n	80174a8 <_malloc_r+0xdc>
 801741c:	2c00      	cmp	r4, #0
 801741e:	d048      	beq.n	80174b2 <_malloc_r+0xe6>
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	4631      	mov	r1, r6
 8017424:	4638      	mov	r0, r7
 8017426:	eb04 0903 	add.w	r9, r4, r3
 801742a:	f000 f863 	bl	80174f4 <_sbrk_r>
 801742e:	4581      	cmp	r9, r0
 8017430:	d13f      	bne.n	80174b2 <_malloc_r+0xe6>
 8017432:	6821      	ldr	r1, [r4, #0]
 8017434:	1a6d      	subs	r5, r5, r1
 8017436:	4629      	mov	r1, r5
 8017438:	4638      	mov	r0, r7
 801743a:	f7ff ffa7 	bl	801738c <sbrk_aligned>
 801743e:	3001      	adds	r0, #1
 8017440:	d037      	beq.n	80174b2 <_malloc_r+0xe6>
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	442b      	add	r3, r5
 8017446:	6023      	str	r3, [r4, #0]
 8017448:	f8d8 3000 	ldr.w	r3, [r8]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d038      	beq.n	80174c2 <_malloc_r+0xf6>
 8017450:	685a      	ldr	r2, [r3, #4]
 8017452:	42a2      	cmp	r2, r4
 8017454:	d12b      	bne.n	80174ae <_malloc_r+0xe2>
 8017456:	2200      	movs	r2, #0
 8017458:	605a      	str	r2, [r3, #4]
 801745a:	e00f      	b.n	801747c <_malloc_r+0xb0>
 801745c:	6822      	ldr	r2, [r4, #0]
 801745e:	1b52      	subs	r2, r2, r5
 8017460:	d41f      	bmi.n	80174a2 <_malloc_r+0xd6>
 8017462:	2a0b      	cmp	r2, #11
 8017464:	d917      	bls.n	8017496 <_malloc_r+0xca>
 8017466:	1961      	adds	r1, r4, r5
 8017468:	42a3      	cmp	r3, r4
 801746a:	6025      	str	r5, [r4, #0]
 801746c:	bf18      	it	ne
 801746e:	6059      	strne	r1, [r3, #4]
 8017470:	6863      	ldr	r3, [r4, #4]
 8017472:	bf08      	it	eq
 8017474:	f8c8 1000 	streq.w	r1, [r8]
 8017478:	5162      	str	r2, [r4, r5]
 801747a:	604b      	str	r3, [r1, #4]
 801747c:	4638      	mov	r0, r7
 801747e:	f104 060b 	add.w	r6, r4, #11
 8017482:	f000 f829 	bl	80174d8 <__malloc_unlock>
 8017486:	f026 0607 	bic.w	r6, r6, #7
 801748a:	1d23      	adds	r3, r4, #4
 801748c:	1af2      	subs	r2, r6, r3
 801748e:	d0ae      	beq.n	80173ee <_malloc_r+0x22>
 8017490:	1b9b      	subs	r3, r3, r6
 8017492:	50a3      	str	r3, [r4, r2]
 8017494:	e7ab      	b.n	80173ee <_malloc_r+0x22>
 8017496:	42a3      	cmp	r3, r4
 8017498:	6862      	ldr	r2, [r4, #4]
 801749a:	d1dd      	bne.n	8017458 <_malloc_r+0x8c>
 801749c:	f8c8 2000 	str.w	r2, [r8]
 80174a0:	e7ec      	b.n	801747c <_malloc_r+0xb0>
 80174a2:	4623      	mov	r3, r4
 80174a4:	6864      	ldr	r4, [r4, #4]
 80174a6:	e7ac      	b.n	8017402 <_malloc_r+0x36>
 80174a8:	4634      	mov	r4, r6
 80174aa:	6876      	ldr	r6, [r6, #4]
 80174ac:	e7b4      	b.n	8017418 <_malloc_r+0x4c>
 80174ae:	4613      	mov	r3, r2
 80174b0:	e7cc      	b.n	801744c <_malloc_r+0x80>
 80174b2:	230c      	movs	r3, #12
 80174b4:	603b      	str	r3, [r7, #0]
 80174b6:	4638      	mov	r0, r7
 80174b8:	f000 f80e 	bl	80174d8 <__malloc_unlock>
 80174bc:	e797      	b.n	80173ee <_malloc_r+0x22>
 80174be:	6025      	str	r5, [r4, #0]
 80174c0:	e7dc      	b.n	801747c <_malloc_r+0xb0>
 80174c2:	605b      	str	r3, [r3, #4]
 80174c4:	deff      	udf	#255	; 0xff
 80174c6:	bf00      	nop
 80174c8:	20002054 	.word	0x20002054

080174cc <__malloc_lock>:
 80174cc:	4801      	ldr	r0, [pc, #4]	; (80174d4 <__malloc_lock+0x8>)
 80174ce:	f000 b84b 	b.w	8017568 <__retarget_lock_acquire_recursive>
 80174d2:	bf00      	nop
 80174d4:	20002194 	.word	0x20002194

080174d8 <__malloc_unlock>:
 80174d8:	4801      	ldr	r0, [pc, #4]	; (80174e0 <__malloc_unlock+0x8>)
 80174da:	f000 b846 	b.w	801756a <__retarget_lock_release_recursive>
 80174de:	bf00      	nop
 80174e0:	20002194 	.word	0x20002194

080174e4 <memset>:
 80174e4:	4402      	add	r2, r0
 80174e6:	4603      	mov	r3, r0
 80174e8:	4293      	cmp	r3, r2
 80174ea:	d100      	bne.n	80174ee <memset+0xa>
 80174ec:	4770      	bx	lr
 80174ee:	f803 1b01 	strb.w	r1, [r3], #1
 80174f2:	e7f9      	b.n	80174e8 <memset+0x4>

080174f4 <_sbrk_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4d06      	ldr	r5, [pc, #24]	; (8017510 <_sbrk_r+0x1c>)
 80174f8:	2300      	movs	r3, #0
 80174fa:	4604      	mov	r4, r0
 80174fc:	4608      	mov	r0, r1
 80174fe:	602b      	str	r3, [r5, #0]
 8017500:	f7ec fa1c 	bl	800393c <_sbrk>
 8017504:	1c43      	adds	r3, r0, #1
 8017506:	d102      	bne.n	801750e <_sbrk_r+0x1a>
 8017508:	682b      	ldr	r3, [r5, #0]
 801750a:	b103      	cbz	r3, 801750e <_sbrk_r+0x1a>
 801750c:	6023      	str	r3, [r4, #0]
 801750e:	bd38      	pop	{r3, r4, r5, pc}
 8017510:	20002198 	.word	0x20002198

08017514 <__errno>:
 8017514:	4b01      	ldr	r3, [pc, #4]	; (801751c <__errno+0x8>)
 8017516:	6818      	ldr	r0, [r3, #0]
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop
 801751c:	20000094 	.word	0x20000094

08017520 <__libc_init_array>:
 8017520:	b570      	push	{r4, r5, r6, lr}
 8017522:	4d0d      	ldr	r5, [pc, #52]	; (8017558 <__libc_init_array+0x38>)
 8017524:	4c0d      	ldr	r4, [pc, #52]	; (801755c <__libc_init_array+0x3c>)
 8017526:	1b64      	subs	r4, r4, r5
 8017528:	10a4      	asrs	r4, r4, #2
 801752a:	2600      	movs	r6, #0
 801752c:	42a6      	cmp	r6, r4
 801752e:	d109      	bne.n	8017544 <__libc_init_array+0x24>
 8017530:	4d0b      	ldr	r5, [pc, #44]	; (8017560 <__libc_init_array+0x40>)
 8017532:	4c0c      	ldr	r4, [pc, #48]	; (8017564 <__libc_init_array+0x44>)
 8017534:	f000 fb68 	bl	8017c08 <_init>
 8017538:	1b64      	subs	r4, r4, r5
 801753a:	10a4      	asrs	r4, r4, #2
 801753c:	2600      	movs	r6, #0
 801753e:	42a6      	cmp	r6, r4
 8017540:	d105      	bne.n	801754e <__libc_init_array+0x2e>
 8017542:	bd70      	pop	{r4, r5, r6, pc}
 8017544:	f855 3b04 	ldr.w	r3, [r5], #4
 8017548:	4798      	blx	r3
 801754a:	3601      	adds	r6, #1
 801754c:	e7ee      	b.n	801752c <__libc_init_array+0xc>
 801754e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017552:	4798      	blx	r3
 8017554:	3601      	adds	r6, #1
 8017556:	e7f2      	b.n	801753e <__libc_init_array+0x1e>
 8017558:	08019540 	.word	0x08019540
 801755c:	08019540 	.word	0x08019540
 8017560:	08019540 	.word	0x08019540
 8017564:	08019544 	.word	0x08019544

08017568 <__retarget_lock_acquire_recursive>:
 8017568:	4770      	bx	lr

0801756a <__retarget_lock_release_recursive>:
 801756a:	4770      	bx	lr

0801756c <memcpy>:
 801756c:	440a      	add	r2, r1
 801756e:	4291      	cmp	r1, r2
 8017570:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017574:	d100      	bne.n	8017578 <memcpy+0xc>
 8017576:	4770      	bx	lr
 8017578:	b510      	push	{r4, lr}
 801757a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801757e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017582:	4291      	cmp	r1, r2
 8017584:	d1f9      	bne.n	801757a <memcpy+0xe>
 8017586:	bd10      	pop	{r4, pc}

08017588 <_free_r>:
 8017588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801758a:	2900      	cmp	r1, #0
 801758c:	d044      	beq.n	8017618 <_free_r+0x90>
 801758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017592:	9001      	str	r0, [sp, #4]
 8017594:	2b00      	cmp	r3, #0
 8017596:	f1a1 0404 	sub.w	r4, r1, #4
 801759a:	bfb8      	it	lt
 801759c:	18e4      	addlt	r4, r4, r3
 801759e:	f7ff ff95 	bl	80174cc <__malloc_lock>
 80175a2:	4a1e      	ldr	r2, [pc, #120]	; (801761c <_free_r+0x94>)
 80175a4:	9801      	ldr	r0, [sp, #4]
 80175a6:	6813      	ldr	r3, [r2, #0]
 80175a8:	b933      	cbnz	r3, 80175b8 <_free_r+0x30>
 80175aa:	6063      	str	r3, [r4, #4]
 80175ac:	6014      	str	r4, [r2, #0]
 80175ae:	b003      	add	sp, #12
 80175b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175b4:	f7ff bf90 	b.w	80174d8 <__malloc_unlock>
 80175b8:	42a3      	cmp	r3, r4
 80175ba:	d908      	bls.n	80175ce <_free_r+0x46>
 80175bc:	6825      	ldr	r5, [r4, #0]
 80175be:	1961      	adds	r1, r4, r5
 80175c0:	428b      	cmp	r3, r1
 80175c2:	bf01      	itttt	eq
 80175c4:	6819      	ldreq	r1, [r3, #0]
 80175c6:	685b      	ldreq	r3, [r3, #4]
 80175c8:	1949      	addeq	r1, r1, r5
 80175ca:	6021      	streq	r1, [r4, #0]
 80175cc:	e7ed      	b.n	80175aa <_free_r+0x22>
 80175ce:	461a      	mov	r2, r3
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	b10b      	cbz	r3, 80175d8 <_free_r+0x50>
 80175d4:	42a3      	cmp	r3, r4
 80175d6:	d9fa      	bls.n	80175ce <_free_r+0x46>
 80175d8:	6811      	ldr	r1, [r2, #0]
 80175da:	1855      	adds	r5, r2, r1
 80175dc:	42a5      	cmp	r5, r4
 80175de:	d10b      	bne.n	80175f8 <_free_r+0x70>
 80175e0:	6824      	ldr	r4, [r4, #0]
 80175e2:	4421      	add	r1, r4
 80175e4:	1854      	adds	r4, r2, r1
 80175e6:	42a3      	cmp	r3, r4
 80175e8:	6011      	str	r1, [r2, #0]
 80175ea:	d1e0      	bne.n	80175ae <_free_r+0x26>
 80175ec:	681c      	ldr	r4, [r3, #0]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	6053      	str	r3, [r2, #4]
 80175f2:	440c      	add	r4, r1
 80175f4:	6014      	str	r4, [r2, #0]
 80175f6:	e7da      	b.n	80175ae <_free_r+0x26>
 80175f8:	d902      	bls.n	8017600 <_free_r+0x78>
 80175fa:	230c      	movs	r3, #12
 80175fc:	6003      	str	r3, [r0, #0]
 80175fe:	e7d6      	b.n	80175ae <_free_r+0x26>
 8017600:	6825      	ldr	r5, [r4, #0]
 8017602:	1961      	adds	r1, r4, r5
 8017604:	428b      	cmp	r3, r1
 8017606:	bf04      	itt	eq
 8017608:	6819      	ldreq	r1, [r3, #0]
 801760a:	685b      	ldreq	r3, [r3, #4]
 801760c:	6063      	str	r3, [r4, #4]
 801760e:	bf04      	itt	eq
 8017610:	1949      	addeq	r1, r1, r5
 8017612:	6021      	streq	r1, [r4, #0]
 8017614:	6054      	str	r4, [r2, #4]
 8017616:	e7ca      	b.n	80175ae <_free_r+0x26>
 8017618:	b003      	add	sp, #12
 801761a:	bd30      	pop	{r4, r5, pc}
 801761c:	20002054 	.word	0x20002054

08017620 <with_errno>:
 8017620:	b513      	push	{r0, r1, r4, lr}
 8017622:	4604      	mov	r4, r0
 8017624:	ed8d 0b00 	vstr	d0, [sp]
 8017628:	f7ff ff74 	bl	8017514 <__errno>
 801762c:	ed9d 0b00 	vldr	d0, [sp]
 8017630:	6004      	str	r4, [r0, #0]
 8017632:	b002      	add	sp, #8
 8017634:	bd10      	pop	{r4, pc}

08017636 <xflow>:
 8017636:	b082      	sub	sp, #8
 8017638:	b158      	cbz	r0, 8017652 <xflow+0x1c>
 801763a:	eeb1 7b40 	vneg.f64	d7, d0
 801763e:	ed8d 7b00 	vstr	d7, [sp]
 8017642:	ed9d 7b00 	vldr	d7, [sp]
 8017646:	2022      	movs	r0, #34	; 0x22
 8017648:	ee20 0b07 	vmul.f64	d0, d0, d7
 801764c:	b002      	add	sp, #8
 801764e:	f7ff bfe7 	b.w	8017620 <with_errno>
 8017652:	eeb0 7b40 	vmov.f64	d7, d0
 8017656:	e7f2      	b.n	801763e <xflow+0x8>

08017658 <__math_uflow>:
 8017658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017660 <__math_uflow+0x8>
 801765c:	f7ff bfeb 	b.w	8017636 <xflow>
 8017660:	00000000 	.word	0x00000000
 8017664:	10000000 	.word	0x10000000

08017668 <__math_oflow>:
 8017668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017670 <__math_oflow+0x8>
 801766c:	f7ff bfe3 	b.w	8017636 <xflow>
 8017670:	00000000 	.word	0x00000000
 8017674:	70000000 	.word	0x70000000

08017678 <__math_divzero>:
 8017678:	b082      	sub	sp, #8
 801767a:	2800      	cmp	r0, #0
 801767c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017680:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017684:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017688:	ed8d 7b00 	vstr	d7, [sp]
 801768c:	ed9d 0b00 	vldr	d0, [sp]
 8017690:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80176a0 <__math_divzero+0x28>
 8017694:	2022      	movs	r0, #34	; 0x22
 8017696:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801769a:	b002      	add	sp, #8
 801769c:	f7ff bfc0 	b.w	8017620 <with_errno>
	...

080176a8 <__math_invalid>:
 80176a8:	eeb0 7b40 	vmov.f64	d7, d0
 80176ac:	eeb4 7b47 	vcmp.f64	d7, d7
 80176b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176b4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80176b8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80176bc:	d602      	bvs.n	80176c4 <__math_invalid+0x1c>
 80176be:	2021      	movs	r0, #33	; 0x21
 80176c0:	f7ff bfae 	b.w	8017620 <with_errno>
 80176c4:	4770      	bx	lr

080176c6 <__math_check_uflow>:
 80176c6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80176ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ce:	d102      	bne.n	80176d6 <__math_check_uflow+0x10>
 80176d0:	2022      	movs	r0, #34	; 0x22
 80176d2:	f7ff bfa5 	b.w	8017620 <with_errno>
 80176d6:	4770      	bx	lr

080176d8 <__math_check_oflow>:
 80176d8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80176f8 <__math_check_oflow+0x20>
 80176dc:	eeb0 7bc0 	vabs.f64	d7, d0
 80176e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80176e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176e8:	dd02      	ble.n	80176f0 <__math_check_oflow+0x18>
 80176ea:	2022      	movs	r0, #34	; 0x22
 80176ec:	f7ff bf98 	b.w	8017620 <with_errno>
 80176f0:	4770      	bx	lr
 80176f2:	bf00      	nop
 80176f4:	f3af 8000 	nop.w
 80176f8:	ffffffff 	.word	0xffffffff
 80176fc:	7fefffff 	.word	0x7fefffff

08017700 <checkint>:
 8017700:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017704:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8017708:	429a      	cmp	r2, r3
 801770a:	b570      	push	{r4, r5, r6, lr}
 801770c:	dd2a      	ble.n	8017764 <checkint+0x64>
 801770e:	f240 4333 	movw	r3, #1075	; 0x433
 8017712:	429a      	cmp	r2, r3
 8017714:	dc24      	bgt.n	8017760 <checkint+0x60>
 8017716:	1a9b      	subs	r3, r3, r2
 8017718:	f1a3 0620 	sub.w	r6, r3, #32
 801771c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017720:	fa02 f403 	lsl.w	r4, r2, r3
 8017724:	fa02 f606 	lsl.w	r6, r2, r6
 8017728:	f1c3 0520 	rsb	r5, r3, #32
 801772c:	fa22 f505 	lsr.w	r5, r2, r5
 8017730:	4334      	orrs	r4, r6
 8017732:	432c      	orrs	r4, r5
 8017734:	409a      	lsls	r2, r3
 8017736:	ea20 0202 	bic.w	r2, r0, r2
 801773a:	ea21 0404 	bic.w	r4, r1, r4
 801773e:	4322      	orrs	r2, r4
 8017740:	f1a3 0420 	sub.w	r4, r3, #32
 8017744:	f1c3 0220 	rsb	r2, r3, #32
 8017748:	d10c      	bne.n	8017764 <checkint+0x64>
 801774a:	40d8      	lsrs	r0, r3
 801774c:	fa01 f302 	lsl.w	r3, r1, r2
 8017750:	4318      	orrs	r0, r3
 8017752:	40e1      	lsrs	r1, r4
 8017754:	4308      	orrs	r0, r1
 8017756:	f000 0001 	and.w	r0, r0, #1
 801775a:	f1d0 0002 	rsbs	r0, r0, #2
 801775e:	bd70      	pop	{r4, r5, r6, pc}
 8017760:	2002      	movs	r0, #2
 8017762:	e7fc      	b.n	801775e <checkint+0x5e>
 8017764:	2000      	movs	r0, #0
 8017766:	e7fa      	b.n	801775e <checkint+0x5e>

08017768 <pow>:
 8017768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801776c:	ee10 4a90 	vmov	r4, s1
 8017770:	ed2d 8b0a 	vpush	{d8-d12}
 8017774:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017778:	ee11 aa90 	vmov	sl, s3
 801777c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017780:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8017784:	429a      	cmp	r2, r3
 8017786:	ee10 5a10 	vmov	r5, s0
 801778a:	ee11 0a10 	vmov	r0, s2
 801778e:	b087      	sub	sp, #28
 8017790:	46c4      	mov	ip, r8
 8017792:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8017796:	d806      	bhi.n	80177a6 <pow+0x3e>
 8017798:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801779c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80177a0:	2b7f      	cmp	r3, #127	; 0x7f
 80177a2:	f240 8156 	bls.w	8017a52 <pow+0x2ea>
 80177a6:	1802      	adds	r2, r0, r0
 80177a8:	eb4a 010a 	adc.w	r1, sl, sl
 80177ac:	f06f 0b01 	mvn.w	fp, #1
 80177b0:	1e57      	subs	r7, r2, #1
 80177b2:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 80177b6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80177ba:	45bb      	cmp	fp, r7
 80177bc:	eb7e 0303 	sbcs.w	r3, lr, r3
 80177c0:	d242      	bcs.n	8017848 <pow+0xe0>
 80177c2:	ea52 0301 	orrs.w	r3, r2, r1
 80177c6:	f04f 0300 	mov.w	r3, #0
 80177ca:	d10c      	bne.n	80177e6 <pow+0x7e>
 80177cc:	196d      	adds	r5, r5, r5
 80177ce:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80177d2:	4164      	adcs	r4, r4
 80177d4:	42ab      	cmp	r3, r5
 80177d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80177da:	41a3      	sbcs	r3, r4
 80177dc:	f0c0 808f 	bcc.w	80178fe <pow+0x196>
 80177e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80177e4:	e02b      	b.n	801783e <pow+0xd6>
 80177e6:	4ed4      	ldr	r6, [pc, #848]	; (8017b38 <pow+0x3d0>)
 80177e8:	42b4      	cmp	r4, r6
 80177ea:	bf08      	it	eq
 80177ec:	429d      	cmpeq	r5, r3
 80177ee:	d109      	bne.n	8017804 <pow+0x9c>
 80177f0:	1800      	adds	r0, r0, r0
 80177f2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80177f6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80177fa:	4283      	cmp	r3, r0
 80177fc:	4bcf      	ldr	r3, [pc, #828]	; (8017b3c <pow+0x3d4>)
 80177fe:	eb73 030a 	sbcs.w	r3, r3, sl
 8017802:	e7eb      	b.n	80177dc <pow+0x74>
 8017804:	196d      	adds	r5, r5, r5
 8017806:	48ce      	ldr	r0, [pc, #824]	; (8017b40 <pow+0x3d8>)
 8017808:	4164      	adcs	r4, r4
 801780a:	42ab      	cmp	r3, r5
 801780c:	eb70 0604 	sbcs.w	r6, r0, r4
 8017810:	d375      	bcc.n	80178fe <pow+0x196>
 8017812:	4281      	cmp	r1, r0
 8017814:	bf08      	it	eq
 8017816:	429a      	cmpeq	r2, r3
 8017818:	d171      	bne.n	80178fe <pow+0x196>
 801781a:	4aca      	ldr	r2, [pc, #808]	; (8017b44 <pow+0x3dc>)
 801781c:	4294      	cmp	r4, r2
 801781e:	bf08      	it	eq
 8017820:	429d      	cmpeq	r5, r3
 8017822:	d0dd      	beq.n	80177e0 <pow+0x78>
 8017824:	4294      	cmp	r4, r2
 8017826:	ea6f 0a0a 	mvn.w	sl, sl
 801782a:	bf34      	ite	cc
 801782c:	2400      	movcc	r4, #0
 801782e:	2401      	movcs	r4, #1
 8017830:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8017834:	4554      	cmp	r4, sl
 8017836:	f040 81dc 	bne.w	8017bf2 <pow+0x48a>
 801783a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801783e:	b007      	add	sp, #28
 8017840:	ecbd 8b0a 	vpop	{d8-d12}
 8017844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017848:	196f      	adds	r7, r5, r5
 801784a:	eb44 0904 	adc.w	r9, r4, r4
 801784e:	1e7a      	subs	r2, r7, #1
 8017850:	f169 0300 	sbc.w	r3, r9, #0
 8017854:	4593      	cmp	fp, r2
 8017856:	eb7e 0303 	sbcs.w	r3, lr, r3
 801785a:	d225      	bcs.n	80178a8 <pow+0x140>
 801785c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017860:	2c00      	cmp	r4, #0
 8017862:	da13      	bge.n	801788c <pow+0x124>
 8017864:	4651      	mov	r1, sl
 8017866:	f7ff ff4b 	bl	8017700 <checkint>
 801786a:	2801      	cmp	r0, #1
 801786c:	d10e      	bne.n	801788c <pow+0x124>
 801786e:	eeb1 0b40 	vneg.f64	d0, d0
 8017872:	ea57 0909 	orrs.w	r9, r7, r9
 8017876:	d10b      	bne.n	8017890 <pow+0x128>
 8017878:	f1ba 0f00 	cmp.w	sl, #0
 801787c:	dadf      	bge.n	801783e <pow+0xd6>
 801787e:	b007      	add	sp, #28
 8017880:	ecbd 8b0a 	vpop	{d8-d12}
 8017884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017888:	f7ff bef6 	b.w	8017678 <__math_divzero>
 801788c:	2000      	movs	r0, #0
 801788e:	e7f0      	b.n	8017872 <pow+0x10a>
 8017890:	f1ba 0f00 	cmp.w	sl, #0
 8017894:	dad3      	bge.n	801783e <pow+0xd6>
 8017896:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801789a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801789e:	ed8d 7b00 	vstr	d7, [sp]
 80178a2:	ed9d 0b00 	vldr	d0, [sp]
 80178a6:	e7ca      	b.n	801783e <pow+0xd6>
 80178a8:	2c00      	cmp	r4, #0
 80178aa:	da2b      	bge.n	8017904 <pow+0x19c>
 80178ac:	4651      	mov	r1, sl
 80178ae:	f7ff ff27 	bl	8017700 <checkint>
 80178b2:	b930      	cbnz	r0, 80178c2 <pow+0x15a>
 80178b4:	b007      	add	sp, #28
 80178b6:	ecbd 8b0a 	vpop	{d8-d12}
 80178ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178be:	f7ff bef3 	b.w	80176a8 <__math_invalid>
 80178c2:	1e41      	subs	r1, r0, #1
 80178c4:	4248      	negs	r0, r1
 80178c6:	4148      	adcs	r0, r1
 80178c8:	0480      	lsls	r0, r0, #18
 80178ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80178ce:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80178d2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80178d6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80178da:	2b7f      	cmp	r3, #127	; 0x7f
 80178dc:	d92d      	bls.n	801793a <pow+0x1d2>
 80178de:	4b96      	ldr	r3, [pc, #600]	; (8017b38 <pow+0x3d0>)
 80178e0:	2000      	movs	r0, #0
 80178e2:	429c      	cmp	r4, r3
 80178e4:	bf08      	it	eq
 80178e6:	4285      	cmpeq	r5, r0
 80178e8:	f43f af7a 	beq.w	80177e0 <pow+0x78>
 80178ec:	f240 31bd 	movw	r1, #957	; 0x3bd
 80178f0:	428a      	cmp	r2, r1
 80178f2:	d80c      	bhi.n	801790e <pow+0x1a6>
 80178f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80178f8:	42a8      	cmp	r0, r5
 80178fa:	41a3      	sbcs	r3, r4
 80178fc:	d204      	bcs.n	8017908 <pow+0x1a0>
 80178fe:	ee31 0b00 	vadd.f64	d0, d1, d0
 8017902:	e79c      	b.n	801783e <pow+0xd6>
 8017904:	2000      	movs	r0, #0
 8017906:	e7e4      	b.n	80178d2 <pow+0x16a>
 8017908:	ee30 0b41 	vsub.f64	d0, d0, d1
 801790c:	e797      	b.n	801783e <pow+0xd6>
 801790e:	2d01      	cmp	r5, #1
 8017910:	eb74 0303 	sbcs.w	r3, r4, r3
 8017914:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017918:	bf34      	ite	cc
 801791a:	2301      	movcc	r3, #1
 801791c:	2300      	movcs	r3, #0
 801791e:	4296      	cmp	r6, r2
 8017920:	bf8c      	ite	hi
 8017922:	2600      	movhi	r6, #0
 8017924:	2601      	movls	r6, #1
 8017926:	42b3      	cmp	r3, r6
 8017928:	f000 809b 	beq.w	8017a62 <pow+0x2fa>
 801792c:	b007      	add	sp, #28
 801792e:	ecbd 8b0a 	vpop	{d8-d12}
 8017932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017936:	f7ff be97 	b.w	8017668 <__math_oflow>
 801793a:	f1bc 0f00 	cmp.w	ip, #0
 801793e:	d10b      	bne.n	8017958 <pow+0x1f0>
 8017940:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8017b28 <pow+0x3c0>
 8017944:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017948:	ec53 2b17 	vmov	r2, r3, d7
 801794c:	ee17 5a10 	vmov	r5, s14
 8017950:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017954:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017958:	4b7b      	ldr	r3, [pc, #492]	; (8017b48 <pow+0x3e0>)
 801795a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801795e:	4423      	add	r3, r4
 8017960:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017964:	1519      	asrs	r1, r3, #20
 8017966:	0d1b      	lsrs	r3, r3, #20
 8017968:	051b      	lsls	r3, r3, #20
 801796a:	1ae7      	subs	r7, r4, r3
 801796c:	4b77      	ldr	r3, [pc, #476]	; (8017b4c <pow+0x3e4>)
 801796e:	ee03 1a10 	vmov	s6, r1
 8017972:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017976:	1e2e      	subs	r6, r5, #0
 8017978:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801797c:	ec47 6b15 	vmov	d5, r6, r7
 8017980:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017984:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017988:	ed93 7b00 	vldr	d7, [r3]
 801798c:	ed93 5b02 	vldr	d5, [r3, #8]
 8017990:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017994:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017998:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801799c:	ee36 4b02 	vadd.f64	d4, d6, d2
 80179a0:	ee32 2b44 	vsub.f64	d2, d2, d4
 80179a4:	eea3 7b05 	vfma.f64	d7, d3, d5
 80179a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80179ac:	ee32 2b06 	vadd.f64	d2, d2, d6
 80179b0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80179b4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80179b8:	ee26 0b05 	vmul.f64	d0, d6, d5
 80179bc:	ee34 8b00 	vadd.f64	d8, d4, d0
 80179c0:	eeb0 9b40 	vmov.f64	d9, d0
 80179c4:	ee34 4b48 	vsub.f64	d4, d4, d8
 80179c8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80179cc:	ee34 ab00 	vadd.f64	d10, d4, d0
 80179d0:	ed93 5b06 	vldr	d5, [r3, #24]
 80179d4:	ee26 bb00 	vmul.f64	d11, d6, d0
 80179d8:	ee37 7b09 	vadd.f64	d7, d7, d9
 80179dc:	ed93 4b08 	vldr	d4, [r3, #32]
 80179e0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80179e4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80179e8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80179ec:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80179f0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80179f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80179f8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80179fc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017a00:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017a04:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017a08:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017a0c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017a10:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017a14:	ee16 3a90 	vmov	r3, s13
 8017a18:	eeb0 5b46 	vmov.f64	d5, d6
 8017a1c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017a20:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017a24:	18b2      	adds	r2, r6, r2
 8017a26:	2a3e      	cmp	r2, #62	; 0x3e
 8017a28:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017a2c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8017a30:	ee38 8b07 	vadd.f64	d8, d8, d7
 8017a34:	eea1 5b08 	vfma.f64	d5, d1, d8
 8017a38:	d91b      	bls.n	8017a72 <pow+0x30a>
 8017a3a:	2a00      	cmp	r2, #0
 8017a3c:	da0b      	bge.n	8017a56 <pow+0x2ee>
 8017a3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017a42:	ee36 0b00 	vadd.f64	d0, d6, d0
 8017a46:	2800      	cmp	r0, #0
 8017a48:	f43f aef9 	beq.w	801783e <pow+0xd6>
 8017a4c:	eeb1 0b40 	vneg.f64	d0, d0
 8017a50:	e6f5      	b.n	801783e <pow+0xd6>
 8017a52:	2000      	movs	r0, #0
 8017a54:	e780      	b.n	8017958 <pow+0x1f0>
 8017a56:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017a5a:	d909      	bls.n	8017a70 <pow+0x308>
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	f6bf af65 	bge.w	801792c <pow+0x1c4>
 8017a62:	b007      	add	sp, #28
 8017a64:	ecbd 8b0a 	vpop	{d8-d12}
 8017a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a6c:	f7ff bdf4 	b.w	8017658 <__math_uflow>
 8017a70:	2600      	movs	r6, #0
 8017a72:	4937      	ldr	r1, [pc, #220]	; (8017b50 <pow+0x3e8>)
 8017a74:	ed91 4b02 	vldr	d4, [r1, #8]
 8017a78:	ed91 3b00 	vldr	d3, [r1]
 8017a7c:	eeb0 7b44 	vmov.f64	d7, d4
 8017a80:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017a84:	ee17 5a10 	vmov	r5, s14
 8017a88:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017a8c:	ed91 4b04 	vldr	d4, [r1, #16]
 8017a90:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017a94:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017a98:	ed91 4b06 	vldr	d4, [r1, #24]
 8017a9c:	18dc      	adds	r4, r3, r3
 8017a9e:	f104 030f 	add.w	r3, r4, #15
 8017aa2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8017aa6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017aaa:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8017aae:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017ab2:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017ab6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8017aba:	ed91 4b08 	vldr	d4, [r1, #32]
 8017abe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8017ac2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017ac6:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017aca:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8017ace:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017ad2:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017ad6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8017ada:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8017ade:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8017ae2:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017ae6:	1940      	adds	r0, r0, r5
 8017ae8:	2700      	movs	r7, #0
 8017aea:	eb17 020c 	adds.w	r2, r7, ip
 8017aee:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8017af2:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017af6:	2e00      	cmp	r6, #0
 8017af8:	d176      	bne.n	8017be8 <pow+0x480>
 8017afa:	42bd      	cmp	r5, r7
 8017afc:	db2a      	blt.n	8017b54 <pow+0x3ec>
 8017afe:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8017b02:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8017b06:	4610      	mov	r0, r2
 8017b08:	ec41 0b10 	vmov	d0, r0, r1
 8017b0c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017b10:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8017b30 <pow+0x3c8>
 8017b14:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b18:	b007      	add	sp, #28
 8017b1a:	ecbd 8b0a 	vpop	{d8-d12}
 8017b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b22:	f7ff bdd9 	b.w	80176d8 <__math_check_oflow>
 8017b26:	bf00      	nop
 8017b28:	00000000 	.word	0x00000000
 8017b2c:	43300000 	.word	0x43300000
 8017b30:	00000000 	.word	0x00000000
 8017b34:	7f000000 	.word	0x7f000000
 8017b38:	3ff00000 	.word	0x3ff00000
 8017b3c:	fff00000 	.word	0xfff00000
 8017b40:	ffe00000 	.word	0xffe00000
 8017b44:	7fe00000 	.word	0x7fe00000
 8017b48:	c0196aab 	.word	0xc0196aab
 8017b4c:	080184f0 	.word	0x080184f0
 8017b50:	08017c80 	.word	0x08017c80
 8017b54:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017b58:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8017b5c:	4610      	mov	r0, r2
 8017b5e:	ec41 0b15 	vmov	d5, r0, r1
 8017b62:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8017b66:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017b6a:	ee35 7b06 	vadd.f64	d7, d5, d6
 8017b6e:	eeb0 4bc7 	vabs.f64	d4, d7
 8017b72:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8017b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8017bf8 <pow+0x490>
 8017b7e:	d52a      	bpl.n	8017bd6 <pow+0x46e>
 8017b80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017b84:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b8c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017b90:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8017b94:	bf58      	it	pl
 8017b96:	eeb0 4b43 	vmovpl.f64	d4, d3
 8017b9a:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017b9e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8017ba2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017ba6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8017baa:	ee36 6b03 	vadd.f64	d6, d6, d3
 8017bae:	ee36 7b44 	vsub.f64	d7, d6, d4
 8017bb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bba:	d104      	bne.n	8017bc6 <pow+0x45e>
 8017bbc:	4632      	mov	r2, r6
 8017bbe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017bc2:	ec43 2b17 	vmov	d7, r2, r3
 8017bc6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017bca:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017bce:	ee26 6b00 	vmul.f64	d6, d6, d0
 8017bd2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017bd6:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017bda:	b007      	add	sp, #28
 8017bdc:	ecbd 8b0a 	vpop	{d8-d12}
 8017be0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be4:	f7ff bd6f 	b.w	80176c6 <__math_check_uflow>
 8017be8:	ec43 2b10 	vmov	d0, r2, r3
 8017bec:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017bf0:	e625      	b.n	801783e <pow+0xd6>
 8017bf2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8017c00 <pow+0x498>
 8017bf6:	e622      	b.n	801783e <pow+0xd6>
 8017bf8:	00000000 	.word	0x00000000
 8017bfc:	00100000 	.word	0x00100000
	...

08017c08 <_init>:
 8017c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0a:	bf00      	nop
 8017c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c0e:	bc08      	pop	{r3}
 8017c10:	469e      	mov	lr, r3
 8017c12:	4770      	bx	lr

08017c14 <_fini>:
 8017c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c16:	bf00      	nop
 8017c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c1a:	bc08      	pop	{r3}
 8017c1c:	469e      	mov	lr, r3
 8017c1e:	4770      	bx	lr
