
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186b8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  08018950  08018950  00028950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a448  0801a448  0002a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a450  0801a450  0002a450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a454  0801a454  0002a454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  0801a458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021ec  2000009c  0801a4f4  0003009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002288  0801a4f4  00032288  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY
 14 .debug_info   00048fd7  00000000  00000000  0003010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009203  00000000  00000000  000790e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003938  00000000  00000000  000822e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c9b  00000000  00000000  00085c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004625d  00000000  00000000  000888bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f54d  00000000  00000000  000ceb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195d4a  00000000  00000000  0011e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000fdc4  00000000  00000000  002b3db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002c3b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000009c 	.word	0x2000009c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018938 	.word	0x08018938

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000a0 	.word	0x200000a0
 80002d4:	08018938 	.word	0x08018938

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tDelay_initToPool>:
{
    tDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void    tDelay_initToPool   (tDelay* const dl, uint32_t delay, uint32_t maxDelay, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
    _tMempool* m = *mp;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	617b      	str	r3, [r7, #20]
    _tDelay* d = *dl = (_tDelay*) mpool_alloc(sizeof(_tDelay), m);
 80005e8:	6979      	ldr	r1, [r7, #20]
 80005ea:	2024      	movs	r0, #36	; 0x24
 80005ec:	f000 f9df 	bl	80009ae <mpool_alloc>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	613b      	str	r3, [r7, #16]
    d->mempool = m;
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	601a      	str	r2, [r3, #0]

    d->maxDelay = maxDelay;
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	621a      	str	r2, [r3, #32]

    d->delay = delay;
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	61da      	str	r2, [r3, #28]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	6979      	ldr	r1, [r7, #20]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f9ca 	bl	80009ae <mpool_alloc>
 800061a:	4602      	mov	r2, r0
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	609a      	str	r2, [r3, #8]
    
    d->inPoint = 0;
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
    d->outPoint = 0;
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
    
    d->lastIn = 0.0f;
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
    d->lastOut = 0.0f;
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	f04f 0200 	mov.w	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
    
    d->gain = 1.0f;
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000642:	605a      	str	r2, [r3, #4]
    
    tDelay_setDelay(dl, d->delay);
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	4619      	mov	r1, r3
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f000 f82e 	bl	80006ac <tDelay_setDelay>
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <_LEAF_clip>:
    return d->lastOut;
}

Lfloat _LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
//#endif
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000662:	edc7 0a02 	vstr	s1, [r7, #8]
 8000666:	ed87 1a01 	vstr	s2, [r7, #4]

    if (val < min)
 800066a:	ed97 7a02 	vldr	s14, [r7, #8]
 800066e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067a:	d501      	bpl.n	8000680 <_LEAF_clip+0x28>
    {
        return min;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	e00b      	b.n	8000698 <_LEAF_clip+0x40>
    }
    else if (val > max)
 8000680:	ed97 7a02 	vldr	s14, [r7, #8]
 8000684:	edd7 7a01 	vldr	s15, [r7, #4]
 8000688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800068c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000690:	dd01      	ble.n	8000696 <_LEAF_clip+0x3e>
    {
        return max;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	e000      	b.n	8000698 <_LEAF_clip+0x40>
    }
    else
    {
        return val;
 8000696:	68bb      	ldr	r3, [r7, #8]
    }
}
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <tDelay_setDelay>:

void     tDelay_setDelay (tDelay* const dl, uint32_t delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    _tDelay* d = *dl;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	60fb      	str	r3, [r7, #12]

    d->delay = _LEAF_clip(0.0f, delay,  d->maxDelay);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	ee07 3a10 	vmov	s14, r3
 80006ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006d2:	eeb0 1a47 	vmov.f32	s2, s14
 80006d6:	eef0 0a67 	vmov.f32	s1, s15
 80006da:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000728 <tDelay_setDelay+0x7c>
 80006de:	f7ff ffbb 	bl	8000658 <_LEAF_clip>
 80006e2:	eef0 7a40 	vmov.f32	s15, s0
 80006e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ea:	ee17 2a90 	vmov	r2, s15
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	61da      	str	r2, [r3, #28]

    // read chases write
    if ( d->inPoint >= delay )  d->outPoint = d->inPoint - d->delay;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d807      	bhi.n	800070c <tDelay_setDelay+0x60>
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	1ad2      	subs	r2, r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	619a      	str	r2, [r3, #24]
    else                        d->outPoint = d->maxDelay + d->inPoint - d->delay;
}
 800070a:	e009      	b.n	8000720 <tDelay_setDelay+0x74>
    else                        d->outPoint = d->maxDelay + d->inPoint - d->delay;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6a1a      	ldr	r2, [r3, #32]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	441a      	add	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	619a      	str	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	00000000 	.word	0x00000000

0800072c <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	ed87 0a02 	vstr	s0, [r7, #8]
 8000738:	6079      	str	r1, [r7, #4]
 800073a:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 8000742:	69f9      	ldr	r1, [r7, #28]
 8000744:	2028      	movs	r0, #40	; 0x28
 8000746:	f000 f932 	bl	80009ae <mpool_alloc>
 800074a:	4602      	mov	r2, r0
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	69fa      	ldr	r2, [r7, #28]
 800075a:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000772:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000834 <tRamp_initToPool+0x108>
 8000776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800077e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	ed93 7a03 	vldr	s14, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	f04f 0200 	mov.w	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80007b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80007bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c4:	d504      	bpl.n	80007d0 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	691a      	ldr	r2, [r3, #16]
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	61da      	str	r2, [r3, #28]
 80007ce:	e002      	b.n	80007d6 <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	edd3 7a07 	vldr	s15, [r3, #28]
 80007e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80007f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f8:	ee07 3a90 	vmov	s15, r3
 80007fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	edd3 7a05 	vldr	s15, [r3, #20]
 8000816:	ee37 7a67 	vsub.f32	s14, s14, s15
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	3a83126f 	.word	0x3a83126f

08000838 <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	ed93 7a06 	vldr	s14, [r3, #24]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	edd3 7a05 	vldr	s15, [r3, #20]
 800085c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	edd3 7a08 	vldr	s15, [r3, #32]
 8000866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	edd3 7a01 	vldr	s15, [r3, #4]
 8000896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	ed93 7a05 	vldr	s14, [r3, #20]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80008ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b4:	db07      	blt.n	80008c6 <tRamp_tick+0x4a>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80008bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	dc12      	bgt.n	80008ec <tRamp_tick+0x70>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80008d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008da:	d80f      	bhi.n	80008fc <tRamp_tick+0x80>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	edd3 7a01 	vldr	s15, [r3, #4]
 80008e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ea:	d507      	bpl.n	80008fc <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	699a      	ldr	r2, [r3, #24]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	ee07 3a90 	vmov	s15, r3
}
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8000912:	b590      	push	{r4, r7, lr}
 8000914:	b087      	sub	sp, #28
 8000916:	af02      	add	r7, sp, #8
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685c      	ldr	r4, [r3, #4]
 8000922:	2010      	movs	r0, #16
 8000924:	f000 f902 	bl	8000b2c <mpool_align>
 8000928:	4603      	mov	r3, r0
 800092a:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	429a      	cmp	r2, r3
 8000942:	d203      	bcs.n	800094c <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6898      	ldr	r0, [r3, #8]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000960:	1ad2      	subs	r2, r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	4613      	mov	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	f000 f8ea 	bl	8000b48 <create_node>
 8000974:	4602      	mov	r2, r0
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	615a      	str	r2, [r3, #20]
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bd90      	pop	{r4, r7, pc}

08000982 <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	331c      	adds	r3, #28
 8000992:	461a      	mov	r2, r3
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	68b8      	ldr	r0, [r7, #8]
 8000998:	f7ff ffbb 	bl	8000912 <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f103 021c 	add.w	r2, r3, #28
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	619a      	str	r2, [r3, #24]
}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 80009ae:	b590      	push	{r4, r7, lr}
 80009b0:	b08d      	sub	sp, #52	; 0x34
 80009b2:	af02      	add	r7, sp, #8
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80009be:	3201      	adds	r2, #1
 80009c0:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d116      	bne.n	80009f8 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d206      	bcs.n	80009e8 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2101      	movs	r1, #1
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f9f9 	bl	8000dd8 <LEAF_internalErrorCallback>
 80009e6:	e005      	b.n	80009f4 <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f9f2 	bl	8000dd8 <LEAF_internalErrorCallback>
        }
        return NULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e095      	b.n	8000b24 <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f897 	bl	8000b2c <mpool_align>
 80009fe:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 8000a06:	e01c      	b.n	8000a42 <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d116      	bne.n	8000a42 <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d206      	bcs.n	8000a32 <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f9d4 	bl	8000dd8 <LEAF_internalErrorCallback>
 8000a30:	e005      	b.n	8000a3e <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f9cd 	bl	8000dd8 <LEAF_internalErrorCallback>
            }
            return NULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e070      	b.n	8000b24 <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8dd      	bhi.n	8000a08 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d924      	bls.n	8000ab2 <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4413      	add	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8000aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	4622      	mov	r2, r4
 8000aaa:	f000 f84d 	bl	8000b48 <create_node>
 8000aae:	6238      	str	r0, [r7, #32]
 8000ab0:	e008      	b.n	8000ac4 <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	68da      	ldr	r2, [r3, #12]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	441a      	add	r2, r3
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d102      	bne.n	8000ad4 <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	6a3a      	ldr	r2, [r7, #32]
 8000ad2:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 8000ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ad6:	f000 f855 	bl	8000b84 <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	440b      	add	r3, r1
 8000aea:	441a      	add	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dd12      	ble.n	8000b20 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	e007      	b.n	8000b16 <mpool_alloc+0x168>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3301      	adds	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f2      	bhi.n	8000b06 <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	681b      	ldr	r3, [r3, #0]
#endif
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	372c      	adds	r7, #44	; 0x2c
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}

08000b2c <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3307      	adds	r3, #7
 8000b38:	f023 0307 	bic.w	r3, r3, #7
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	441a      	add	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	601a      	str	r2, [r3, #0]
    node->next = next;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
    node->size = size;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	60da      	str	r2, [r3, #12]
    return node;
 8000b76:	697b      	ldr	r3, [r7, #20]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	371c      	adds	r7, #28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	6892      	ldr	r2, [r2, #8]
 8000b9c:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6852      	ldr	r2, [r2, #4]
 8000bae:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3318      	adds	r3, #24
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f000 f804 	bl	8000bec <tMempool_initToPool>
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	2018      	movs	r0, #24
 8000c04:	f7ff fed3 	bl	80009ae <mpool_alloc>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f7ff fe76 	bl	8000912 <mpool_create>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8000c40:	6979      	ldr	r1, [r7, #20]
 8000c42:	2018      	movs	r0, #24
 8000c44:	f7ff feb3 	bl	80009ae <mpool_alloc>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c74:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c94 <tCycle_initToPool+0x64>
 8000c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c88:	615a      	str	r2, [r3, #20]
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	4f800000 	.word	0x4f800000

08000c98 <tCycle_setFreq>:
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
}

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	ed93 7a04 	vldr	s14, [r3, #16]
 8000cb6:	edd7 7a00 	vldr	s15, [r7]
 8000cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc2:	ee17 2a90 	vmov	r2, s15
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b088      	sub	sp, #32
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8000cea:	69f9      	ldr	r1, [r7, #28]
 8000cec:	2018      	movs	r0, #24
 8000cee:	f7ff fe5e 	bl	80009ae <mpool_alloc>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	69fa      	ldr	r2, [r7, #28]
 8000d02:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	7afa      	ldrb	r2, [r7, #11]
 8000d10:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	615a      	str	r2, [r3, #20]
}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6178      	str	r0, [r7, #20]
 8000d2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d30:	60f9      	str	r1, [r7, #12]
 8000d32:	60ba      	str	r2, [r7, #8]
 8000d34:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff fe1e 	bl	8000982 <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8000d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d50:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d64:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000db8 <LEAF_init+0x94>
 8000d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LEAF_init+0x98>)
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	e009      	b.n	8000d9e <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	330e      	adds	r3, #14
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	ddf2      	ble.n	8000d8a <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	2200      	movs	r2, #0
 8000da8:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	2200      	movs	r2, #0
 8000dae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40c90fdb 	.word	0x40c90fdb
 8000dbc:	08000dc1 	.word	0x08000dc1

08000dc0 <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	330e      	adds	r3, #14
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	2201      	movs	r2, #1
 8000df0:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	4798      	blx	r3
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MIDI_Application+0x54>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d111      	bne.n	8000e38 <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MIDI_Application+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d10d      	bne.n	8000e38 <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8000e1c:	2240      	movs	r2, #64	; 0x40
 8000e1e:	4911      	ldr	r1, [pc, #68]	; (8000e64 <MIDI_Application+0x5c>)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MIDI_Application+0x60>)
 8000e22:	f003 fc8a 	bl	800473a <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MIDI_Application+0x58>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MIDI_Application+0x64>)
 8000e34:	f008 fae0 	bl	80093f8 <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MIDI_Application+0x54>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d10b      	bne.n	8000e58 <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MIDI_Application+0x58>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MIDI_Application+0x60>)
 8000e48:	f003 fc11 	bl	800466e <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MIDI_Application+0x64>)
 8000e54:	f008 fad0 	bl	80093f8 <HAL_GPIO_WritePin>
	}
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20001e24 	.word	0x20001e24
 8000e60:	20000000 	.word	0x20000000
 8000e64:	30000000 	.word	0x30000000
 8000e68:	30000460 	.word	0x30000460
 8000e6c:	58020400 	.word	0x58020400

08000e70 <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 8000e78:	4bab      	ldr	r3, [pc, #684]	; (8001128 <ProcessReceivedMidiDatas+0x2b8>)
 8000e7a:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 814a 	beq.w	800111e <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 8000e8a:	e142      	b.n	8001112 <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	4ba6      	ldr	r3, [pc, #664]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	4ba3      	ldr	r3, [pc, #652]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000ea0:	705a      	strb	r2, [r3, #1]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b9f      	ldr	r3, [pc, #636]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000eae:	709a      	strb	r2, [r3, #2]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	4b9c      	ldr	r3, [pc, #624]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000ebc:	70da      	strb	r2, [r3, #3]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8000ec4:	4b99      	ldr	r3, [pc, #612]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2bf0      	cmp	r3, #240	; 0xf0
 8000ecc:	f000 8120 	beq.w	8001110 <ProcessReceivedMidiDatas+0x2a0>
 8000ed0:	2bf0      	cmp	r3, #240	; 0xf0
 8000ed2:	f300 811e 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000ed6:	2be0      	cmp	r3, #224	; 0xe0
 8000ed8:	f000 811b 	beq.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000edc:	2be0      	cmp	r3, #224	; 0xe0
 8000ede:	f300 8118 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000ee2:	2bd0      	cmp	r3, #208	; 0xd0
 8000ee4:	f000 8115 	beq.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000ee8:	2bd0      	cmp	r3, #208	; 0xd0
 8000eea:	f300 8112 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000eee:	2bc0      	cmp	r3, #192	; 0xc0
 8000ef0:	f000 810f 	beq.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000ef4:	2bc0      	cmp	r3, #192	; 0xc0
 8000ef6:	f300 810c 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000efa:	2bb0      	cmp	r3, #176	; 0xb0
 8000efc:	d02f      	beq.n	8000f5e <ProcessReceivedMidiDatas+0xee>
 8000efe:	2bb0      	cmp	r3, #176	; 0xb0
 8000f00:	f300 8107 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000f04:	2ba0      	cmp	r3, #160	; 0xa0
 8000f06:	f000 8104 	beq.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000f0a:	2ba0      	cmp	r3, #160	; 0xa0
 8000f0c:	f300 8101 	bgt.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000f10:	2b80      	cmp	r3, #128	; 0x80
 8000f12:	d002      	beq.n	8000f1a <ProcessReceivedMidiDatas+0xaa>
 8000f14:	2b90      	cmp	r3, #144	; 0x90
 8000f16:	d011      	beq.n	8000f3c <ProcessReceivedMidiDatas+0xcc>
 8000f18:	e0fb      	b.n	8001112 <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 8000f1a:	4b84      	ldr	r3, [pc, #528]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b83      	ldr	r3, [pc, #524]	; (8001130 <ProcessReceivedMidiDatas+0x2c0>)
 8000f22:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000f24:	4b81      	ldr	r3, [pc, #516]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b82      	ldr	r3, [pc, #520]	; (8001134 <ProcessReceivedMidiDatas+0x2c4>)
 8000f2c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	4880      	ldr	r0, [pc, #512]	; (8001138 <ProcessReceivedMidiDatas+0x2c8>)
 8000f36:	f008 fa5f 	bl	80093f8 <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 8000f3a:	e0ea      	b.n	8001112 <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 8000f3c:	4b7b      	ldr	r3, [pc, #492]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <ProcessReceivedMidiDatas+0x2c0>)
 8000f44:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000f46:	4b79      	ldr	r3, [pc, #484]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f48:	78db      	ldrb	r3, [r3, #3]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b79      	ldr	r3, [pc, #484]	; (8001134 <ProcessReceivedMidiDatas+0x2c4>)
 8000f4e:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4878      	ldr	r0, [pc, #480]	; (8001138 <ProcessReceivedMidiDatas+0x2c8>)
 8000f58:	f008 fa4e 	bl	80093f8 <HAL_GPIO_WritePin>

					break;
 8000f5c:	e0d9      	b.n	8001112 <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f60:	789b      	ldrb	r3, [r3, #2]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b75      	ldr	r3, [pc, #468]	; (800113c <ProcessReceivedMidiDatas+0x2cc>)
 8000f66:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 8000f68:	4b70      	ldr	r3, [pc, #448]	; (800112c <ProcessReceivedMidiDatas+0x2bc>)
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b74      	ldr	r3, [pc, #464]	; (8001140 <ProcessReceivedMidiDatas+0x2d0>)
 8000f70:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8000f72:	4b72      	ldr	r3, [pc, #456]	; (800113c <ProcessReceivedMidiDatas+0x2cc>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b71      	ldr	r3, [pc, #452]	; (8001140 <ProcessReceivedMidiDatas+0x2d0>)
 8000f7a:	7819      	ldrb	r1, [r3, #0]
 8000f7c:	4b71      	ldr	r3, [pc, #452]	; (8001144 <ProcessReceivedMidiDatas+0x2d4>)
 8000f7e:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8000f80:	4b6e      	ldr	r3, [pc, #440]	; (800113c <ProcessReceivedMidiDatas+0x2cc>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	2b5e      	cmp	r3, #94	; 0x5e
 8000f88:	f200 80c3 	bhi.w	8001112 <ProcessReceivedMidiDatas+0x2a2>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <ProcessReceivedMidiDatas+0x124>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08001113 	.word	0x08001113
 8000f98:	08001113 	.word	0x08001113
 8000f9c:	08001113 	.word	0x08001113
 8000fa0:	08001113 	.word	0x08001113
 8000fa4:	08001113 	.word	0x08001113
 8000fa8:	08001113 	.word	0x08001113
 8000fac:	08001113 	.word	0x08001113
 8000fb0:	08001113 	.word	0x08001113
 8000fb4:	08001113 	.word	0x08001113
 8000fb8:	08001113 	.word	0x08001113
 8000fbc:	08001113 	.word	0x08001113
 8000fc0:	08001113 	.word	0x08001113
 8000fc4:	08001113 	.word	0x08001113
 8000fc8:	08001113 	.word	0x08001113
 8000fcc:	08001113 	.word	0x08001113
 8000fd0:	08001113 	.word	0x08001113
 8000fd4:	08001113 	.word	0x08001113
 8000fd8:	08001113 	.word	0x08001113
 8000fdc:	08001113 	.word	0x08001113
 8000fe0:	08001113 	.word	0x08001113
 8000fe4:	08001113 	.word	0x08001113
 8000fe8:	08001113 	.word	0x08001113
 8000fec:	08001113 	.word	0x08001113
 8000ff0:	08001113 	.word	0x08001113
 8000ff4:	08001113 	.word	0x08001113
 8000ff8:	08001113 	.word	0x08001113
 8000ffc:	08001113 	.word	0x08001113
 8001000:	08001113 	.word	0x08001113
 8001004:	08001113 	.word	0x08001113
 8001008:	08001113 	.word	0x08001113
 800100c:	08001113 	.word	0x08001113
 8001010:	08001113 	.word	0x08001113
 8001014:	08001113 	.word	0x08001113
 8001018:	08001113 	.word	0x08001113
 800101c:	08001113 	.word	0x08001113
 8001020:	08001113 	.word	0x08001113
 8001024:	08001113 	.word	0x08001113
 8001028:	08001113 	.word	0x08001113
 800102c:	08001113 	.word	0x08001113
 8001030:	08001113 	.word	0x08001113
 8001034:	08001113 	.word	0x08001113
 8001038:	08001113 	.word	0x08001113
 800103c:	08001113 	.word	0x08001113
 8001040:	08001113 	.word	0x08001113
 8001044:	08001113 	.word	0x08001113
 8001048:	08001113 	.word	0x08001113
 800104c:	08001113 	.word	0x08001113
 8001050:	08001113 	.word	0x08001113
 8001054:	08001113 	.word	0x08001113
 8001058:	08001113 	.word	0x08001113
 800105c:	08001113 	.word	0x08001113
 8001060:	08001113 	.word	0x08001113
 8001064:	08001113 	.word	0x08001113
 8001068:	08001113 	.word	0x08001113
 800106c:	08001113 	.word	0x08001113
 8001070:	08001113 	.word	0x08001113
 8001074:	08001113 	.word	0x08001113
 8001078:	08001113 	.word	0x08001113
 800107c:	08001113 	.word	0x08001113
 8001080:	08001113 	.word	0x08001113
 8001084:	08001113 	.word	0x08001113
 8001088:	08001113 	.word	0x08001113
 800108c:	08001113 	.word	0x08001113
 8001090:	08001113 	.word	0x08001113
 8001094:	08001113 	.word	0x08001113
 8001098:	08001113 	.word	0x08001113
 800109c:	08001113 	.word	0x08001113
 80010a0:	08001113 	.word	0x08001113
 80010a4:	08001113 	.word	0x08001113
 80010a8:	08001113 	.word	0x08001113
 80010ac:	08001113 	.word	0x08001113
 80010b0:	08001113 	.word	0x08001113
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001113 	.word	0x08001113
 80010bc:	08001113 	.word	0x08001113
 80010c0:	08001113 	.word	0x08001113
 80010c4:	08001113 	.word	0x08001113
 80010c8:	08001113 	.word	0x08001113
 80010cc:	08001113 	.word	0x08001113
 80010d0:	08001113 	.word	0x08001113
 80010d4:	08001113 	.word	0x08001113
 80010d8:	08001113 	.word	0x08001113
 80010dc:	08001113 	.word	0x08001113
 80010e0:	08001113 	.word	0x08001113
 80010e4:	08001113 	.word	0x08001113
 80010e8:	08001113 	.word	0x08001113
 80010ec:	08001113 	.word	0x08001113
 80010f0:	08001113 	.word	0x08001113
 80010f4:	08001113 	.word	0x08001113
 80010f8:	08001113 	.word	0x08001113
 80010fc:	08001113 	.word	0x08001113
 8001100:	08001113 	.word	0x08001113
 8001104:	08001113 	.word	0x08001113
 8001108:	08001113 	.word	0x08001113
 800110c:	08001113 	.word	0x08001113
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 8001110:	bf00      	nop
		while(numberOfPackets--)
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	1e5a      	subs	r2, r3, #1
 8001116:	81fa      	strh	r2, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f aeb7 	bne.w	8000e8c <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	30000000 	.word	0x30000000
 800112c:	2000013c 	.word	0x2000013c
 8001130:	200000b8 	.word	0x200000b8
 8001134:	200000b9 	.word	0x200000b9
 8001138:	58020000 	.word	0x58020000
 800113c:	200000ba 	.word	0x200000ba
 8001140:	200000bb 	.word	0x200000bb
 8001144:	200000bc 	.word	0x200000bc

08001148 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 8001152:	6838      	ldr	r0, [r7, #0]
 8001154:	f7ff fe8c 	bl	8000e70 <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	4904      	ldr	r1, [pc, #16]	; (800116c <USBH_MIDI_ReceiveCallback+0x24>)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <USBH_MIDI_ReceiveCallback+0x28>)
 800115e:	f003 faec 	bl	800473a <USBH_MIDI_Receive>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	30000000 	.word	0x30000000
 8001170:	30000460 	.word	0x30000460

08001174 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001198:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <MX_ADC1_Init+0x214>)
 800119a:	4a7c      	ldr	r2, [pc, #496]	; (800138c <MX_ADC1_Init+0x218>)
 800119c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800119e:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <MX_ADC1_Init+0x214>)
 80011a0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80011a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <MX_ADC1_Init+0x214>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ac:	4b76      	ldr	r3, [pc, #472]	; (8001388 <MX_ADC1_Init+0x214>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011b2:	4b75      	ldr	r3, [pc, #468]	; (8001388 <MX_ADC1_Init+0x214>)
 80011b4:	2208      	movs	r2, #8
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <MX_ADC1_Init+0x214>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <MX_ADC1_Init+0x214>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 10;
 80011c4:	4b70      	ldr	r3, [pc, #448]	; (8001388 <MX_ADC1_Init+0x214>)
 80011c6:	220a      	movs	r2, #10
 80011c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <MX_ADC1_Init+0x214>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <MX_ADC1_Init+0x214>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <MX_ADC1_Init+0x214>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <MX_ADC1_Init+0x214>)
 80011de:	2203      	movs	r2, #3
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011e2:	4b69      	ldr	r3, [pc, #420]	; (8001388 <MX_ADC1_Init+0x214>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011e8:	4b67      	ldr	r3, [pc, #412]	; (8001388 <MX_ADC1_Init+0x214>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ee:	4b66      	ldr	r3, [pc, #408]	; (8001388 <MX_ADC1_Init+0x214>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	4864      	ldr	r0, [pc, #400]	; (8001388 <MX_ADC1_Init+0x214>)
 80011f8:	f004 f958 	bl	80054ac <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001202:	f001 fee5 	bl	8002fd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	485d      	ldr	r0, [pc, #372]	; (8001388 <MX_ADC1_Init+0x214>)
 8001212:	f005 fbdb 	bl	80069cc <HAL_ADCEx_MultiModeConfigChannel>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800121c:	f001 fed8 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <MX_ADC1_Init+0x21c>)
 8001222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001224:	2306      	movs	r3, #6
 8001226:	607b      	str	r3, [r7, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001230:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4851      	ldr	r0, [pc, #324]	; (8001388 <MX_ADC1_Init+0x214>)
 8001244:	f004 fdf0 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800124e:	f001 febf 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <MX_ADC1_Init+0x220>)
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001256:	230c      	movs	r3, #12
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4849      	ldr	r0, [pc, #292]	; (8001388 <MX_ADC1_Init+0x214>)
 8001264:	f004 fde0 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800126e:	f001 feaf 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <MX_ADC1_Init+0x224>)
 8001274:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001276:	2312      	movs	r3, #18
 8001278:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4841      	ldr	r0, [pc, #260]	; (8001388 <MX_ADC1_Init+0x214>)
 8001284:	f004 fdd0 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800128e:	f001 fe9f 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001292:	4b42      	ldr	r3, [pc, #264]	; (800139c <MX_ADC1_Init+0x228>)
 8001294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001296:	2318      	movs	r3, #24
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4839      	ldr	r0, [pc, #228]	; (8001388 <MX_ADC1_Init+0x214>)
 80012a4:	f004 fdc0 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 80012ae:	f001 fe8f 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_ADC1_Init+0x22c>)
 80012b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4830      	ldr	r0, [pc, #192]	; (8001388 <MX_ADC1_Init+0x214>)
 80012c6:	f004 fdaf 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80012d0:	f001 fe7e 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_ADC1_Init+0x230>)
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012d8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4828      	ldr	r0, [pc, #160]	; (8001388 <MX_ADC1_Init+0x214>)
 80012e8:	f004 fd9e 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80012f2:	f001 fe6d 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <MX_ADC1_Init+0x234>)
 80012f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012fa:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_ADC1_Init+0x214>)
 800130a:	f004 fd8d 	bl	8005e28 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 8001314:	f001 fe5c 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_ADC1_Init+0x238>)
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800131c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001320:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <MX_ADC1_Init+0x214>)
 800132c:	f004 fd7c 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8001336:	f001 fe4b 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_ADC1_Init+0x23c>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800133e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_ADC1_Init+0x214>)
 800134e:	f004 fd6b 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001358:	f001 fe3a 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_ADC1_Init+0x240>)
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001364:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_ADC1_Init+0x214>)
 8001370:	f004 fd5a 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 800137a:	f001 fe29 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000140 	.word	0x20000140
 800138c:	40022000 	.word	0x40022000
 8001390:	1d500080 	.word	0x1d500080
 8001394:	4fb80000 	.word	0x4fb80000
 8001398:	3ef08000 	.word	0x3ef08000
 800139c:	0c900008 	.word	0x0c900008
 80013a0:	4b840000 	.word	0x4b840000
 80013a4:	3ac04000 	.word	0x3ac04000
 80013a8:	10c00010 	.word	0x10c00010
 80013ac:	21800100 	.word	0x21800100
 80013b0:	25b00200 	.word	0x25b00200
 80013b4:	14f00020 	.word	0x14f00020

080013b8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	615a      	str	r2, [r3, #20]
 80013ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <MX_ADC3_Init+0x124>)
 80013d2:	4a43      	ldr	r2, [pc, #268]	; (80014e0 <MX_ADC3_Init+0x128>)
 80013d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <MX_ADC3_Init+0x124>)
 80013d8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80013dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <MX_ADC3_Init+0x124>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013e4:	4b3d      	ldr	r3, [pc, #244]	; (80014dc <MX_ADC3_Init+0x124>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <MX_ADC3_Init+0x124>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <MX_ADC3_Init+0x124>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <MX_ADC3_Init+0x124>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <MX_ADC3_Init+0x124>)
 80013fe:	2205      	movs	r2, #5
 8001400:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <MX_ADC3_Init+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001408:	4b34      	ldr	r3, [pc, #208]	; (80014dc <MX_ADC3_Init+0x124>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <MX_ADC3_Init+0x124>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <MX_ADC3_Init+0x124>)
 8001416:	2200      	movs	r2, #0
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <MX_ADC3_Init+0x124>)
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_ADC3_Init+0x124>)
 8001422:	2200      	movs	r2, #0
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_ADC3_Init+0x124>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <MX_ADC3_Init+0x124>)
 8001430:	f004 f83c 	bl	80054ac <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800143a:	f001 fdc9 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <MX_ADC3_Init+0x12c>)
 8001440:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001442:	2306      	movs	r3, #6
 8001444:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001450:	2304      	movs	r3, #4
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <MX_ADC3_Init+0x124>)
 8001462:	f004 fce1 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800146c:	f001 fdb0 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001470:	230c      	movs	r3, #12
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <MX_ADC3_Init+0x124>)
 800147a:	f004 fcd5 	bl	8005e28 <HAL_ADC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001484:	f001 fda4 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001488:	2312      	movs	r3, #18
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <MX_ADC3_Init+0x124>)
 8001492:	f004 fcc9 	bl	8005e28 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 800149c:	f001 fd98 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014a0:	2318      	movs	r3, #24
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_ADC3_Init+0x124>)
 80014aa:	f004 fcbd 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80014b4:	f001 fd8c 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80014b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <MX_ADC3_Init+0x124>)
 80014c4:	f004 fcb0 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 80014ce:	f001 fd7f 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001a4 	.word	0x200001a4
 80014e0:	58026000 	.word	0x58026000
 80014e4:	08600004 	.word	0x08600004

080014e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	; 0x38
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6d      	ldr	r2, [pc, #436]	; (80016bc <HAL_ADC_MspInit+0x1d4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	f040 80a3 	bne.w	8001652 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800150c:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800150e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001512:	4a6b      	ldr	r2, [pc, #428]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800151c:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800151e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153a:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001584:	2332      	movs	r3, #50	; 0x32
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001588:	2303      	movs	r3, #3
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	484b      	ldr	r0, [pc, #300]	; (80016c4 <HAL_ADC_MspInit+0x1dc>)
 8001598:	f007 fd66 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800159c:	23ff      	movs	r3, #255	; 0xff
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4846      	ldr	r0, [pc, #280]	; (80016c8 <HAL_ADC_MspInit+0x1e0>)
 80015b0:	f007 fd5a 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b4:	2303      	movs	r3, #3
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4841      	ldr	r0, [pc, #260]	; (80016cc <HAL_ADC_MspInit+0x1e4>)
 80015c8:	f007 fd4e 	bl	8009068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015ce:	4a41      	ldr	r2, [pc, #260]	; (80016d4 <HAL_ADC_MspInit+0x1ec>)
 80015d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015d4:	2209      	movs	r2, #9
 80015d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 8001606:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800160a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 800160e:	2204      	movs	r2, #4
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 800161a:	2200      	movs	r2, #0
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001624:	482a      	ldr	r0, [pc, #168]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 8001626:	f005 fc3b 	bl	8006ea0 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001630:	f001 fcce 	bl	8002fd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 8001638:	64da      	str	r2, [r3, #76]	; 0x4c
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_ADC_MspInit+0x1e8>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2012      	movs	r0, #18
 8001646:	f005 fb7a 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800164a:	2012      	movs	r0, #18
 800164c:	f005 fb91 	bl	8006d72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001650:	e02f      	b.n	80016b2 <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <HAL_ADC_MspInit+0x1f0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d12a      	bne.n	80016b2 <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 8001682:	f043 0320 	orr.w	r3, r3, #32
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <HAL_ADC_MspInit+0x1d8>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001698:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <HAL_ADC_MspInit+0x1f4>)
 80016ae:	f007 fcdb 	bl	8009068 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40022000 	.word	0x40022000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58020800 	.word	0x58020800
 80016c8:	58020000 	.word	0x58020000
 80016cc:	58020400 	.word	0x58020400
 80016d0:	20000208 	.word	0x20000208
 80016d4:	40020010 	.word	0x40020010
 80016d8:	58026000 	.word	0x58026000
 80016dc:	58021400 	.word	0x58021400

080016e0 <audioInit>:




void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 80016ec:	4b5f      	ldr	r3, [pc, #380]	; (800186c <audioInit+0x18c>)
 80016ee:	4a60      	ldr	r2, [pc, #384]	; (8001870 <audioInit+0x190>)
 80016f0:	4960      	ldr	r1, [pc, #384]	; (8001874 <audioInit+0x194>)
 80016f2:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001878 <audioInit+0x198>
 80016f6:	4861      	ldr	r0, [pc, #388]	; (800187c <audioInit+0x19c>)
 80016f8:	f7ff fb14 	bl	8000d24 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 80016fc:	4b5f      	ldr	r3, [pc, #380]	; (800187c <audioInit+0x19c>)
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	495f      	ldr	r1, [pc, #380]	; (8001880 <audioInit+0x1a0>)
 8001704:	485f      	ldr	r0, [pc, #380]	; (8001884 <audioInit+0x1a4>)
 8001706:	f7ff fa5f 	bl	8000bc8 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <audioInit+0x19c>)
 800170c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001710:	495d      	ldr	r1, [pc, #372]	; (8001888 <audioInit+0x1a8>)
 8001712:	485e      	ldr	r0, [pc, #376]	; (800188c <audioInit+0x1ac>)
 8001714:	f7ff fa58 	bl	8000bc8 <tMempool_init>

	for (int i = 0; i < 6; i++)
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	e00d      	b.n	800173a <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4a5b      	ldr	r2, [pc, #364]	; (8001890 <audioInit+0x1b0>)
 8001724:	4413      	add	r3, r2
 8001726:	4a57      	ldr	r2, [pc, #348]	; (8001884 <audioInit+0x1a4>)
 8001728:	2101      	movs	r1, #1
 800172a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fffc 	bl	800072c <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	2b05      	cmp	r3, #5
 800173e:	ddee      	ble.n	800171e <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	e009      	b.n	800175a <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 8001746:	4a4f      	ldr	r2, [pc, #316]	; (8001884 <audioInit+0x1a4>)
 8001748:	2101      	movs	r1, #1
 800174a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800174e:	4851      	ldr	r0, [pc, #324]	; (8001894 <audioInit+0x1b4>)
 8001750:	f7fe ffec 	bl	800072c <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	3301      	adds	r3, #1
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	ddf2      	ble.n	8001746 <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <audioInit+0x1a4>)
 8001762:	2100      	movs	r1, #0
 8001764:	484c      	ldr	r0, [pc, #304]	; (8001898 <audioInit+0x1b8>)
 8001766:	f7ff fab6 	bl	8000cd6 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e013      	b.n	8001798 <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4a49      	ldr	r2, [pc, #292]	; (800189c <audioInit+0x1bc>)
 8001776:	4413      	add	r3, r2
 8001778:	4942      	ldr	r1, [pc, #264]	; (8001884 <audioInit+0x1a4>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa58 	bl	8000c30 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <audioInit+0x1bc>)
 8001786:	4413      	add	r3, r2
 8001788:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80018a0 <audioInit+0x1c0>
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa83 	bl	8000c98 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b05      	cmp	r3, #5
 800179c:	dde8      	ble.n	8001770 <audioInit+0x90>
	}

	for(int i = 0; i < 2; i++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	e00c      	b.n	80017be <audioInit+0xde>
	{
		tDelay_initToPool(&del[i], SAMPLE_RATE, MAX_DELAY, &largePool);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4a3e      	ldr	r2, [pc, #248]	; (80018a4 <audioInit+0x1c4>)
 80017aa:	1898      	adds	r0, r3, r2
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <audioInit+0x1ac>)
 80017ae:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <audioInit+0x1c8>)
 80017b0:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80017b4:	f7fe ff0e 	bl	80005d4 <tDelay_initToPool>
	for(int i = 0; i < 2; i++)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	3301      	adds	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	ddef      	ble.n	80017a4 <audioInit+0xc4>
	}


	HAL_Delay(10);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f003 fc25 	bl	8005014 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e007      	b.n	80017e0 <audioInit+0x100>
	{
		audioOutBuffer[i] = 0;
 80017d0:	4a36      	ldr	r2, [pc, #216]	; (80018ac <audioInit+0x1cc>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2100      	movs	r1, #0
 80017d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b7f      	cmp	r3, #127	; 0x7f
 80017e4:	ddf4      	ble.n	80017d0 <audioInit+0xf0>
	}



	HAL_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f003 fc14 	bl	8005014 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	492f      	ldr	r1, [pc, #188]	; (80018ac <audioInit+0x1cc>)
 80017f0:	68b8      	ldr	r0, [r7, #8]
 80017f2:	f00e f81d 	bl	800f830 <HAL_SAI_Transmit_DMA>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <audioInit+0x1d0>)
 80017fc:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	492c      	ldr	r1, [pc, #176]	; (80018b4 <audioInit+0x1d4>)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f00e f8ca 	bl	800f99c <HAL_SAI_Receive_DMA>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <audioInit+0x1d8>)
 800180e:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fd2d 	bl	8002270 <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e01e      	b.n	800185a <audioInit+0x17a>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 800181c:	4a27      	ldr	r2, [pc, #156]	; (80018bc <audioInit+0x1dc>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <audioInit+0x1e0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <audioInit+0x1e4>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4a20      	ldr	r2, [pc, #128]	; (80018c8 <audioInit+0x1e8>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b07      	cmp	r3, #7
 800185e:	dddd      	ble.n	800181c <audioInit+0x13c>
	}

}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	08002f0d 	.word	0x08002f0d
 8001870:	0007a120 	.word	0x0007a120
 8001874:	24000000 	.word	0x24000000
 8001878:	473b8000 	.word	0x473b8000
 800187c:	200016c8 	.word	0x200016c8
 8001880:	20000340 	.word	0x20000340
 8001884:	20001718 	.word	0x20001718
 8001888:	60000000 	.word	0x60000000
 800188c:	2000171c 	.word	0x2000171c
 8001890:	200002c4 	.word	0x200002c4
 8001894:	20000300 	.word	0x20000300
 8001898:	200002dc 	.word	0x200002dc
 800189c:	200002e0 	.word	0x200002e0
 80018a0:	43dc0000 	.word	0x43dc0000
 80018a4:	200002f8 	.word	0x200002f8
 80018a8:	0003a980 	.word	0x0003a980
 80018ac:	30000040 	.word	0x30000040
 80018b0:	20000280 	.word	0x20000280
 80018b4:	30000240 	.word	0x30000240
 80018b8:	20000281 	.word	0x20000281
 80018bc:	20001720 	.word	0x20001720
 80018c0:	20001740 	.word	0x20001740
 80018c4:	20001760 	.word	0x20001760
 80018c8:	20001780 	.word	0x20001780

080018cc <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

	frameCounter++;
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <audioFrame+0x23c>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <audioFrame+0x23c>)
 80018e4:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 80018e6:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <audioFrame+0x23c>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d904      	bls.n	80018f8 <audioFrame+0x2c>
	{
		frameCounter = 0;
 80018ee:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <audioFrame+0x23c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 80018f4:	f000 faa4 	bl	8001e40 <buttonCheck>
	}

	for (i = 0; i < 6; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e017      	b.n	800192e <audioFrame+0x62>
	{
		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <audioFrame+0x240>)
 8001904:	441a      	add	r2, r3
 8001906:	4982      	ldr	r1, [pc, #520]	; (8001b10 <audioFrame+0x244>)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b14 <audioFrame+0x248>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	4610      	mov	r0, r2
 8001924:	f7fe ff88 	bl	8000838 <tRamp_setDest>
	for (i = 0; i < 6; i++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b05      	cmp	r3, #5
 8001932:	dde4      	ble.n	80018fe <audioFrame+0x32>
	}

	/** read the inputs of the external knobs with multiplex **/
	if (count_knob < STEPS_MAX - 1){
 8001934:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <audioFrame+0x24c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b06      	cmp	r3, #6
 800193a:	d80f      	bhi.n	800195c <audioFrame+0x90>
		mux_pull_values(&randomness, &halls, &fc, &vari, count_knob);
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <audioFrame+0x24c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <audioFrame+0x250>)
 8001944:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <audioFrame+0x254>)
 8001946:	4977      	ldr	r1, [pc, #476]	; (8001b24 <audioFrame+0x258>)
 8001948:	4877      	ldr	r0, [pc, #476]	; (8001b28 <audioFrame+0x25c>)
 800194a:	f002 fb83 	bl	8004054 <mux_pull_values>
		count_knob++;
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <audioFrame+0x24c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <audioFrame+0x24c>)
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e00a      	b.n	8001972 <audioFrame+0xa6>
	}
	else{
		mux_pull_values(&randomness, &halls, &fc, &vari, 7);
 800195c:	2307      	movs	r3, #7
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <audioFrame+0x250>)
 8001962:	4a6f      	ldr	r2, [pc, #444]	; (8001b20 <audioFrame+0x254>)
 8001964:	496f      	ldr	r1, [pc, #444]	; (8001b24 <audioFrame+0x258>)
 8001966:	4870      	ldr	r0, [pc, #448]	; (8001b28 <audioFrame+0x25c>)
 8001968:	f002 fb74 	bl	8004054 <mux_pull_values>
		count_knob = 0;
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <audioFrame+0x24c>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	}
	/*>-<*/


	/** check if button[2] is held for hall calibration **/
	if(buttonHeld[0] == 1){
 8001972:	4b6e      	ldr	r3, [pc, #440]	; (8001b2c <audioFrame+0x260>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d140      	bne.n	80019fc <audioFrame+0x130>
		for(int j = 0; j < NUM_HALLS; j++){
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e030      	b.n	80019e2 <audioFrame+0x116>
			halls_cali[j] = halls_cali[j] * ((float)halls_cali_count / (float)(halls_cali_count+1)) + halls[j] / (halls_cali_count+1);
 8001980:	4a6b      	ldr	r2, [pc, #428]	; (8001b30 <audioFrame+0x264>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <audioFrame+0x268>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <audioFrame+0x268>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <audioFrame+0x258>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	ed93 6a00 	vldr	s12, [r3]
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <audioFrame+0x268>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <audioFrame+0x264>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0; j < NUM_HALLS; j++){
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	ddcb      	ble.n	8001980 <audioFrame+0xb4>
		}
		halls_cali_count++;
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <audioFrame+0x268>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <audioFrame+0x268>)
 80019f2:	801a      	strh	r2, [r3, #0]
		halls_cali_done = 2; // 0: cali never happened, 1: cali done, 2: cali in progress
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <audioFrame+0x26c>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	e009      	b.n	8001a10 <audioFrame+0x144>
	}
	else {
		halls_cali_count = 0;
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <audioFrame+0x268>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	801a      	strh	r2, [r3, #0]
		if(halls_cali_done == 2){
 8001a02:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <audioFrame+0x26c>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d102      	bne.n	8001a10 <audioFrame+0x144>
			halls_cali_done = 1;
 8001a0a:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <audioFrame+0x26c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	801a      	strh	r2, [r3, #0]
		}
	}
	/*>-<*/

	/** find xs and ys **/
	if (halls_cali_done){
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <audioFrame+0x26c>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01c      	beq.n	8001a52 <audioFrame+0x186>
		for (int j = 0; j < NUM_HALLS; j++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e016      	b.n	8001a4c <audioFrame+0x180>
			halls_shift[j] = halls[j] - halls_cali[j];
 8001a1e:	4a41      	ldr	r2, [pc, #260]	; (8001b24 <audioFrame+0x258>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	4a41      	ldr	r2, [pc, #260]	; (8001b30 <audioFrame+0x264>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <audioFrame+0x270>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < NUM_HALLS; j++){
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	dde5      	ble.n	8001a1e <audioFrame+0x152>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <audioFrame+0x274>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d051      	beq.n	8001afe <audioFrame+0x232>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e04b      	b.n	8001af8 <audioFrame+0x22c>
		{

			if ((i & 1) == 0)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11e      	bne.n	8001aa8 <audioFrame+0x1dc>
			{
				current_sample = (int32_t)(audioTickR((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31)) * TWO_TO_23);
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <audioFrame+0x278>)
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001b48 <audioFrame+0x27c>
 8001a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	f000 f9c2 	bl	8001e14 <audioTickR>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b4c <audioFrame+0x280>
 8001a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e01d      	b.n	8001ae4 <audioFrame+0x218>
			}
			else
			{
				current_sample = (int32_t)(audioTickL((float) ((audioInBuffer[buffer_offset + i] << 8) * INV_TWO_TO_31)) * TWO_TO_23);
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <audioFrame+0x278>)
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001b48 <audioFrame+0x27c>
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	f000 f845 	bl	8001b58 <audioTickL>
 8001ace:	eef0 7a40 	vmov.f32	s15, s0
 8001ad2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b4c <audioFrame+0x280>
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ade:	ee17 3a90 	vmov	r3, s15
 8001ae2:	613b      	str	r3, [r7, #16]

//			if (LED_States[2] == 1){		//mute
//				current_sample *= 0;
//			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4919      	ldr	r1, [pc, #100]	; (8001b50 <audioFrame+0x284>)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b3f      	cmp	r3, #63	; 0x3f
 8001afc:	ddb0      	ble.n	8001a60 <audioFrame+0x194>

		}
	}
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002c0 	.word	0x200002c0
 8001b0c:	200002c4 	.word	0x200002c4
 8001b10:	30000440 	.word	0x30000440
 8001b14:	377ffff6 	.word	0x377ffff6
 8001b18:	200017a4 	.word	0x200017a4
 8001b1c:	20001740 	.word	0x20001740
 8001b20:	20001720 	.word	0x20001720
 8001b24:	200017a8 	.word	0x200017a8
 8001b28:	200017a0 	.word	0x200017a0
 8001b2c:	200002b0 	.word	0x200002b0
 8001b30:	200017e8 	.word	0x200017e8
 8001b34:	20001868 	.word	0x20001868
 8001b38:	2000186a 	.word	0x2000186a
 8001b3c:	20001828 	.word	0x20001828
 8001b40:	20000282 	.word	0x20000282
 8001b44:	30000240 	.word	0x30000240
 8001b48:	2ffffff6 	.word	0x2ffffff6
 8001b4c:	4b000000 	.word	0x4b000000
 8001b50:	30000040 	.word	0x30000040
 8001b54:	00000000 	.word	0x00000000

08001b58 <audioTickL>:
float del_mix = 0.5f, del_fb = 1.0f;
int del_len = SAMPLE_RATE;
float a0 = 0.0f, a1 = 0.0f, a2 = 0.0f, b1 = 0.0f, b2 = 0.0f;

float audioTickL(float audioIn)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a01 	vstr	s0, [r7, #4]
//
//	sampleL += audioIn;
	/*>-<*/

	/* delay */
	filter_fc = tRamp_tick(&adc[0]) * 1550.0f + 50.0f;
 8001b62:	4899      	ldr	r0, [pc, #612]	; (8001dc8 <audioTickL+0x270>)
 8001b64:	f7fe fe8a 	bl	800087c <tRamp_tick>
 8001b68:	eef0 7a40 	vmov.f32	s15, s0
 8001b6c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001dcc <audioTickL+0x274>
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001dd0 <audioTickL+0x278>
 8001b78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b7c:	4b95      	ldr	r3, [pc, #596]	; (8001dd4 <audioTickL+0x27c>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
	filter_k = tan(PI * filter_fc * INV_SAMPLE_RATE);
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <audioTickL+0x27c>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001dd8 <audioTickL+0x280>
 8001b8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b90:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001ddc <audioTickL+0x284>
 8001b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b9c:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba0:	f016 f89e 	bl	8017ce0 <tan>
 8001ba4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <audioTickL+0x288>)
 8001bae:	edc3 7a00 	vstr	s15, [r3]
	filter_c = (filter_k - 1.0f) / (filter_k + 1.0f);
 8001bb2:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <audioTickL+0x288>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bbc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8001bc0:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <audioTickL+0x288>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd2:	4b84      	ldr	r3, [pc, #528]	; (8001de4 <audioTickL+0x28c>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	del_mix = 1 - tRamp_tick(&adc[1]);
 8001bd8:	4883      	ldr	r0, [pc, #524]	; (8001de8 <audioTickL+0x290>)
 8001bda:	f7fe fe4f 	bl	800087c <tRamp_tick>
 8001bde:	eef0 7a40 	vmov.f32	s15, s0
 8001be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	4b80      	ldr	r3, [pc, #512]	; (8001dec <audioTickL+0x294>)
 8001bec:	edc3 7a00 	vstr	s15, [r3]
	del_len = (int)(pow(SAMPLE_RATE, (2 * tRamp_tick(&adc[2]) - 1)) + 1);
 8001bf0:	487f      	ldr	r0, [pc, #508]	; (8001df0 <audioTickL+0x298>)
 8001bf2:	f7fe fe43 	bl	800087c <tRamp_tick>
 8001bf6:	eef0 7a40 	vmov.f32	s15, s0
 8001bfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c0a:	eeb0 1b47 	vmov.f64	d1, d7
 8001c0e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8001dc0 <audioTickL+0x268>
 8001c12:	f015 fe15 	bl	8017840 <pow>
 8001c16:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001c1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001c26:	ee17 2a90 	vmov	r2, s15
 8001c2a:	4b72      	ldr	r3, [pc, #456]	; (8001df4 <audioTickL+0x29c>)
 8001c2c:	601a      	str	r2, [r3, #0]
	del_fb = tRamp_tick(&adc[3]);
 8001c2e:	4872      	ldr	r0, [pc, #456]	; (8001df8 <audioTickL+0x2a0>)
 8001c30:	f7fe fe24 	bl	800087c <tRamp_tick>
 8001c34:	eef0 7a40 	vmov.f32	s15, s0
 8001c38:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <audioTickL+0x2a4>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]

	a0 = del_mix + (1 - del_mix) * filter_c;
 8001c3e:	4b6b      	ldr	r3, [pc, #428]	; (8001dec <audioTickL+0x294>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <audioTickL+0x28c>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <audioTickL+0x294>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <audioTickL+0x2a8>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]
	a1 = 1 - del_mix;
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <audioTickL+0x294>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c74:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <audioTickL+0x2ac>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
	b1 = filter_c * del_fb * (1 - del_mix);
 8001c7a:	4b5a      	ldr	r3, [pc, #360]	; (8001de4 <audioTickL+0x28c>)
 8001c7c:	ed93 7a00 	vldr	s14, [r3]
 8001c80:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <audioTickL+0x2a4>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <audioTickL+0x294>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <audioTickL+0x2b0>)
 8001c9e:	edc3 7a00 	vstr	s15, [r3]

	// Delay tick
	// // input x
	del[0]->delay = del_len;
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <audioTickL+0x29c>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <audioTickL+0x2b4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61da      	str	r2, [r3, #28]
	del[1]->delay = del_len;
 8001cac:	4b51      	ldr	r3, [pc, #324]	; (8001df4 <audioTickL+0x29c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <audioTickL+0x2b4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	61da      	str	r2, [r3, #28]

	del[0]->lastIn = audioIn;
 8001cb6:	4b55      	ldr	r3, [pc, #340]	; (8001e0c <audioTickL+0x2b4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
	del[0]->buff[del[0]->inPoint] = audioIn * del[0]->gain;
 8001cbe:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <audioTickL+0x2b4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <audioTickL+0x2b4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <audioTickL+0x2b4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	edc3 7a00 	vstr	s15, [r3]
	if (++(del[0]->inPoint) == del[0]->maxDelay)     del[0]->inPoint = 0;
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <audioTickL+0x2b4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	3201      	adds	r2, #1
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <audioTickL+0x2b4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d103      	bne.n	8001d00 <audioTickL+0x1a8>
 8001cf8:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <audioTickL+0x2b4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]

	// // output x
	del[0]->lastOut = del[0]->buff[del[0]->outPoint];
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <audioTickL+0x2b4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <audioTickL+0x2b4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	441a      	add	r2, r3
 8001d10:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <audioTickL+0x2b4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	60da      	str	r2, [r3, #12]
	if (++(del[0]->outPoint) == del[0]->maxDelay)    del[0]->outPoint = 0;
 8001d18:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <audioTickL+0x2b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	3201      	adds	r2, #1
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <audioTickL+0x2b4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d103      	bne.n	8001d36 <audioTickL+0x1de>
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <audioTickL+0x2b4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]

	sampleL = a0 * audioIn + a1 * del[0]->lastOut - b1 * del[1]->lastOut;
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <audioTickL+0x2a8>)
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <audioTickL+0x2b4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <audioTickL+0x2ac>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <audioTickL+0x2b4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <audioTickL+0x2b0>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <audioTickL+0x2b8>)
 8001d72:	edc3 7a00 	vstr	s15, [r3]
	del[1]->buff[del[1]->inPoint] = sampleL;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <audioTickL+0x2b4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <audioTickL+0x2b4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	4a22      	ldr	r2, [pc, #136]	; (8001e10 <audioTickL+0x2b8>)
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	601a      	str	r2, [r3, #0]
	if (++(del[1]->inPoint) == del[1]->maxDelay)     del[1]->inPoint = 0;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <audioTickL+0x2b4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	3201      	adds	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <audioTickL+0x2b4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d103      	bne.n	8001daa <audioTickL+0x252>
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <audioTickL+0x2b4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
	/*>-<*/

	return sampleL;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <audioTickL+0x2b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	ee07 3a90 	vmov	s15, r3
}
 8001db2:	eeb0 0a67 	vmov.f32	s0, s15
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40e77000 	.word	0x40e77000
 8001dc8:	200002c4 	.word	0x200002c4
 8001dcc:	44c1c000 	.word	0x44c1c000
 8001dd0:	42480000 	.word	0x42480000
 8001dd4:	20001874 	.word	0x20001874
 8001dd8:	40490fdb 	.word	0x40490fdb
 8001ddc:	473b8000 	.word	0x473b8000
 8001de0:	20001878 	.word	0x20001878
 8001de4:	2000187c 	.word	0x2000187c
 8001de8:	200002c8 	.word	0x200002c8
 8001dec:	20000004 	.word	0x20000004
 8001df0:	200002cc 	.word	0x200002cc
 8001df4:	2000000c 	.word	0x2000000c
 8001df8:	200002d0 	.word	0x200002d0
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	20001880 	.word	0x20001880
 8001e04:	20001884 	.word	0x20001884
 8001e08:	20001888 	.word	0x20001888
 8001e0c:	200002f8 	.word	0x200002f8
 8001e10:	2000186c 	.word	0x2000186c

08001e14 <audioTickR>:
uint32_t myCounter = 0;


float rightIn = 0.0f;
float audioTickR(float audioIn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a01 	vstr	s0, [r7, #4]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

//	sampleR = audioIn;
	sampleR = 0.0f;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <audioTickR+0x28>)
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	return sampleR;
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <audioTickR+0x28>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	ee07 3a90 	vmov	s15, r3
}
 8001e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20001870 	.word	0x20001870

08001e40 <buttonCheck>:

void buttonCheck(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	489b      	ldr	r0, [pc, #620]	; (80020b8 <buttonCheck+0x278>)
 8001e4a:	f007 fabd 	bl	80093c8 <HAL_GPIO_ReadPin>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b97      	ldr	r3, [pc, #604]	; (80020bc <buttonCheck+0x27c>)
 8001e5e:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8001e60:	2180      	movs	r1, #128	; 0x80
 8001e62:	4895      	ldr	r0, [pc, #596]	; (80020b8 <buttonCheck+0x278>)
 8001e64:	f007 fab0 	bl	80093c8 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <buttonCheck+0x27c>)
 8001e78:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7e:	4890      	ldr	r0, [pc, #576]	; (80020c0 <buttonCheck+0x280>)
 8001e80:	f007 faa2 	bl	80093c8 <HAL_GPIO_ReadPin>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <buttonCheck+0x27c>)
 8001e94:	709a      	strb	r2, [r3, #2]

	for (int i = 0; i < NUM_BUTTONS; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e09e      	b.n	8001fda <buttonCheck+0x19a>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8001e9c:	4a87      	ldr	r2, [pc, #540]	; (80020bc <buttonCheck+0x27c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781a      	ldrb	r2, [r3, #0]
 8001ea4:	4987      	ldr	r1, [pc, #540]	; (80020c4 <buttonCheck+0x284>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d00e      	beq.n	8001ece <buttonCheck+0x8e>
 8001eb0:	4a85      	ldr	r2, [pc, #532]	; (80020c8 <buttonCheck+0x288>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d808      	bhi.n	8001ece <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8001ebc:	4a82      	ldr	r2, [pc, #520]	; (80020c8 <buttonCheck+0x288>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	4980      	ldr	r1, [pc, #512]	; (80020c8 <buttonCheck+0x288>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8001ece:	4a7b      	ldr	r2, [pc, #492]	; (80020bc <buttonCheck+0x27c>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	497b      	ldr	r1, [pc, #492]	; (80020c4 <buttonCheck+0x284>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	440b      	add	r3, r1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d01e      	beq.n	8001f20 <buttonCheck+0xe0>
 8001ee2:	4a79      	ldr	r2, [pc, #484]	; (80020c8 <buttonCheck+0x288>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	d918      	bls.n	8001f20 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8001eee:	4a73      	ldr	r2, [pc, #460]	; (80020bc <buttonCheck+0x27c>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d104      	bne.n	8001f04 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8001efa:	4a74      	ldr	r2, [pc, #464]	; (80020cc <buttonCheck+0x28c>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2101      	movs	r1, #1
 8001f00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <buttonCheck+0x27c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	7819      	ldrb	r1, [r3, #0]
 8001f0c:	4a6d      	ldr	r2, [pc, #436]	; (80020c4 <buttonCheck+0x284>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	460a      	mov	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 8001f16:	4a6c      	ldr	r2, [pc, #432]	; (80020c8 <buttonCheck+0x288>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }

	  if (buttonHeld[i] == 0)
 8001f20:	4a6b      	ldr	r2, [pc, #428]	; (80020d0 <buttonCheck+0x290>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d12d      	bne.n	8001f88 <buttonCheck+0x148>
	  {
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] < 1000))
 8001f2c:	4a63      	ldr	r2, [pc, #396]	; (80020bc <buttonCheck+0x27c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00f      	beq.n	8001f58 <buttonCheck+0x118>
 8001f38:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <buttonCheck+0x294>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f44:	d208      	bcs.n	8001f58 <buttonCheck+0x118>
	  {
		  buttonCountersHeld[i]++;
 8001f46:	4a63      	ldr	r2, [pc, #396]	; (80020d4 <buttonCheck+0x294>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	4960      	ldr	r1, [pc, #384]	; (80020d4 <buttonCheck+0x294>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != 0) && (buttonCountersHeld[i] >= 1000))
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <buttonCheck+0x27c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d037      	beq.n	8001fd4 <buttonCheck+0x194>
 8001f64:	4a5b      	ldr	r2, [pc, #364]	; (80020d4 <buttonCheck+0x294>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f70:	d330      	bcc.n	8001fd4 <buttonCheck+0x194>
	  {
	 	  buttonHeld[i] = 1;
 8001f72:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <buttonCheck+0x290>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2101      	movs	r1, #1
 8001f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	  buttonCountersHeld[i] = 0;
 8001f7c:	4a55      	ldr	r2, [pc, #340]	; (80020d4 <buttonCheck+0x294>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2100      	movs	r1, #0
 8001f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f86:	e025      	b.n	8001fd4 <buttonCheck+0x194>
	  }
	  }
	  else
	  {
		  if ((buttonValues[i] == 0) && buttonCountersHeld[i] < 50)
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <buttonCheck+0x27c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <buttonCheck+0x174>
 8001f94:	4a4f      	ldr	r2, [pc, #316]	; (80020d4 <buttonCheck+0x294>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	2b31      	cmp	r3, #49	; 0x31
 8001f9e:	d809      	bhi.n	8001fb4 <buttonCheck+0x174>
		  {
			  buttonCountersHeld[i]++;
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <buttonCheck+0x294>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	494a      	ldr	r1, [pc, #296]	; (80020d4 <buttonCheck+0x294>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001fb2:	e00f      	b.n	8001fd4 <buttonCheck+0x194>
	  	  }
		  else if (buttonValues[i] == 0)
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <buttonCheck+0x27c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <buttonCheck+0x194>
	  	  {
	  	 	  buttonHeld[i] = 0;
 8001fc0:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <buttonCheck+0x290>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	 	  buttonCountersHeld[i] = 0;
 8001fca:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <buttonCheck+0x294>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	f77f af5d 	ble.w	8001e9c <buttonCheck+0x5c>
	  }


	}

	if (buttonPressed[0] == 1)
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <buttonCheck+0x28c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d119      	bne.n	800201e <buttonCheck+0x1de>
	{
		if (LED_States[0] == 0)
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <buttonCheck+0x298>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <buttonCheck+0x1c6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4838      	ldr	r0, [pc, #224]	; (80020dc <buttonCheck+0x29c>)
 8001ffa:	f007 f9fd 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[0] = 1;
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <buttonCheck+0x298>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <buttonCheck+0x1d8>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200c:	4833      	ldr	r0, [pc, #204]	; (80020dc <buttonCheck+0x29c>)
 800200e:	f007 f9f3 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[0] = 0;
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <buttonCheck+0x298>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		}
		buttonPressed[0] = 0;
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <buttonCheck+0x28c>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
	}

	if (buttonPressed[1] == 1)
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <buttonCheck+0x28c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d116      	bne.n	8002054 <buttonCheck+0x214>
	{
		if (LED_States[1] == 0)
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <buttonCheck+0x298>)
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <buttonCheck+0x202>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	4829      	ldr	r0, [pc, #164]	; (80020dc <buttonCheck+0x29c>)
 8002036:	f007 f9df 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <buttonCheck+0x298>)
 800203c:	2201      	movs	r2, #1
 800203e:	705a      	strb	r2, [r3, #1]
 8002040:	e008      	b.n	8002054 <buttonCheck+0x214>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002048:	4824      	ldr	r0, [pc, #144]	; (80020dc <buttonCheck+0x29c>)
 800204a:	f007 f9d5 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <buttonCheck+0x298>)
 8002050:	2200      	movs	r2, #0
 8002052:	705a      	strb	r2, [r3, #1]
		}
//		buttonPressed[1] = 0;
	}

	if (buttonPressed[2] == 1)
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <buttonCheck+0x28c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <buttonCheck+0x250>
	{
		if (LED_States[2] == 0)
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <buttonCheck+0x298>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <buttonCheck+0x238>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206a:	4815      	ldr	r0, [pc, #84]	; (80020c0 <buttonCheck+0x280>)
 800206c:	f007 f9c4 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <buttonCheck+0x298>)
 8002072:	2201      	movs	r2, #1
 8002074:	709a      	strb	r2, [r3, #2]
 8002076:	e008      	b.n	800208a <buttonCheck+0x24a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207e:	4810      	ldr	r0, [pc, #64]	; (80020c0 <buttonCheck+0x280>)
 8002080:	f007 f9ba 	bl	80093f8 <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <buttonCheck+0x298>)
 8002086:	2200      	movs	r2, #0
 8002088:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <buttonCheck+0x28c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
	}

	if (buttonHeld[0] == 1)
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <buttonCheck+0x290>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <buttonCheck+0x264>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2140      	movs	r1, #64	; 0x40
 800209c:	4810      	ldr	r0, [pc, #64]	; (80020e0 <buttonCheck+0x2a0>)
 800209e:	f007 f9ab 	bl	80093f8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
}
 80020a2:	e004      	b.n	80020ae <buttonCheck+0x26e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2140      	movs	r1, #64	; 0x40
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <buttonCheck+0x2a0>)
 80020aa:	f007 f9a5 	bl	80093f8 <HAL_GPIO_WritePin>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58021800 	.word	0x58021800
 80020bc:	20000284 	.word	0x20000284
 80020c0:	58020c00 	.word	0x58020c00
 80020c4:	20000288 	.word	0x20000288
 80020c8:	2000028c 	.word	0x2000028c
 80020cc:	20000298 	.word	0x20000298
 80020d0:	200002b0 	.word	0x200002b0
 80020d4:	200002a4 	.word	0x200002a4
 80020d8:	200002bc 	.word	0x200002bc
 80020dc:	58020000 	.word	0x58020000
 80020e0:	58020800 	.word	0x58020800

080020e4 <HAL_SAI_ErrorCallback>:
		}
	}
}

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	;
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	;
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  ;
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8002128:	2040      	movs	r0, #64	; 0x40
 800212a:	f7ff fbcf 	bl	80018cc <audioFrame>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff fbc4 	bl	80018cc <audioFrame>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002156:	f000 f879 	bl	800224c <BSP_SD_IsDetected>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002160:	2302      	movs	r3, #2
 8002162:	e012      	b.n	800218a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8002164:	480b      	ldr	r0, [pc, #44]	; (8002194 <BSP_SD_Init+0x48>)
 8002166:	f00d fefe 	bl	800ff66 <HAL_SD_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002178:	4806      	ldr	r0, [pc, #24]	; (8002194 <BSP_SD_Init+0x48>)
 800217a:	f00e fdb9 	bl	8010cf0 <HAL_SD_ConfigWideBusOperation>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8002188:	79fb      	ldrb	r3, [r7, #7]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20001b58 	.word	0x20001b58

08002198 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	4806      	ldr	r0, [pc, #24]	; (80021d0 <BSP_SD_ReadBlocks+0x38>)
 80021b6:	f00d fff5 	bl	80101a4 <HAL_SD_ReadBlocks>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20001b58 	.word	0x20001b58

080021d4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4806      	ldr	r0, [pc, #24]	; (800220c <BSP_SD_WriteBlocks+0x38>)
 80021f2:	f00e f961 	bl	80104b8 <HAL_SD_WriteBlocks>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8002200:	7dfb      	ldrb	r3, [r7, #23]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001b58 	.word	0x20001b58

08002210 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <BSP_SD_GetCardState+0x1c>)
 8002216:	f00e fe7d 	bl	8010f14 <HAL_SD_GetCardState>
 800221a:	4603      	mov	r3, r0
 800221c:	2b04      	cmp	r3, #4
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20001b58 	.word	0x20001b58

08002230 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <BSP_SD_GetCardInfo+0x18>)
 800223c:	f00e fd2c 	bl	8010c98 <HAL_SD_GetCardInfo>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20001b58 	.word	0x20001b58

0800224c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8002252:	2301      	movs	r3, #1
 8002254:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8002256:	f000 f911 	bl	800247c <BSP_PlatformIsDetected>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8002260:	2300      	movs	r3, #0
 8002262:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	b2db      	uxtb	r3, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af02      	add	r7, sp, #8
 8002276:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800227e:	4858      	ldr	r0, [pc, #352]	; (80023e0 <AudioCodec_init+0x170>)
 8002280:	f007 f8ba 	bl	80093f8 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8002284:	2002      	movs	r0, #2
 8002286:	f002 fec5 	bl	8005014 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800228a:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <AudioCodec_init+0x174>)
 800228c:	2207      	movs	r2, #7
 800228e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8002290:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <AudioCodec_init+0x174>)
 8002292:	2203      	movs	r2, #3
 8002294:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002296:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <AudioCodec_init+0x178>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	4b54      	ldr	r3, [pc, #336]	; (80023ec <AudioCodec_init+0x17c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	4a50      	ldr	r2, [pc, #320]	; (80023e4 <AudioCodec_init+0x174>)
 80022a4:	2120      	movs	r1, #32
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f008 fe64 	bl	800af74 <HAL_I2C_Master_Transmit>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <AudioCodec_init+0x180>)
 80022b2:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 80022b4:	4b4b      	ldr	r3, [pc, #300]	; (80023e4 <AudioCodec_init+0x174>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <AudioCodec_init+0x174>)
 80022bc:	2241      	movs	r2, #65	; 0x41
 80022be:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80022c0:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <AudioCodec_init+0x178>)
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	4b49      	ldr	r3, [pc, #292]	; (80023ec <AudioCodec_init+0x17c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <AudioCodec_init+0x174>)
 80022ce:	2120      	movs	r1, #32
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f008 fe4f 	bl	800af74 <HAL_I2C_Master_Transmit>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <AudioCodec_init+0x180>)
 80022dc:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <AudioCodec_init+0x174>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <AudioCodec_init+0x174>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <AudioCodec_init+0x178>)
 80022ec:	881a      	ldrh	r2, [r3, #0]
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <AudioCodec_init+0x17c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <AudioCodec_init+0x174>)
 80022f8:	2120      	movs	r1, #32
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f008 fe3a 	bl	800af74 <HAL_I2C_Master_Transmit>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <AudioCodec_init+0x180>)
 8002306:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <AudioCodec_init+0x174>)
 800230a:	2203      	movs	r2, #3
 800230c:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 800230e:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <AudioCodec_init+0x174>)
 8002310:	2279      	movs	r2, #121	; 0x79
 8002312:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002314:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <AudioCodec_init+0x178>)
 8002316:	881a      	ldrh	r2, [r3, #0]
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <AudioCodec_init+0x17c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	4a30      	ldr	r2, [pc, #192]	; (80023e4 <AudioCodec_init+0x174>)
 8002322:	2120      	movs	r1, #32
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f008 fe25 	bl	800af74 <HAL_I2C_Master_Transmit>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <AudioCodec_init+0x180>)
 8002330:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <AudioCodec_init+0x174>)
 8002334:	2204      	movs	r2, #4
 8002336:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <AudioCodec_init+0x174>)
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <AudioCodec_init+0x178>)
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <AudioCodec_init+0x17c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <AudioCodec_init+0x174>)
 800234c:	2120      	movs	r1, #32
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f008 fe10 	bl	800af74 <HAL_I2C_Master_Transmit>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <AudioCodec_init+0x180>)
 800235a:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <AudioCodec_init+0x174>)
 800235e:	2205      	movs	r2, #5
 8002360:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <AudioCodec_init+0x174>)
 8002364:	2201      	movs	r2, #1
 8002366:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <AudioCodec_init+0x178>)
 800236a:	881a      	ldrh	r2, [r3, #0]
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <AudioCodec_init+0x17c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <AudioCodec_init+0x174>)
 8002376:	2120      	movs	r1, #32
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f008 fdfb 	bl	800af74 <HAL_I2C_Master_Transmit>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <AudioCodec_init+0x180>)
 8002384:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <AudioCodec_init+0x174>)
 8002388:	2206      	movs	r2, #6
 800238a:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <AudioCodec_init+0x174>)
 800238e:	2210      	movs	r2, #16
 8002390:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <AudioCodec_init+0x178>)
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <AudioCodec_init+0x17c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <AudioCodec_init+0x174>)
 80023a0:	2120      	movs	r1, #32
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f008 fde6 	bl	800af74 <HAL_I2C_Master_Transmit>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <AudioCodec_init+0x180>)
 80023ae:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <AudioCodec_init+0x174>)
 80023b2:	2207      	movs	r2, #7
 80023b4:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <AudioCodec_init+0x174>)
 80023b8:	2202      	movs	r2, #2
 80023ba:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <AudioCodec_init+0x178>)
 80023be:	881a      	ldrh	r2, [r3, #0]
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <AudioCodec_init+0x17c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <AudioCodec_init+0x174>)
 80023ca:	2120      	movs	r1, #32
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f008 fdd1 	bl	800af74 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <AudioCodec_init+0x184>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]

}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58020800 	.word	0x58020800
 80023e4:	2000188c 	.word	0x2000188c
 80023e8:	20000010 	.word	0x20000010
 80023ec:	20000014 	.word	0x20000014
 80023f0:	2000188e 	.word	0x2000188e
 80023f4:	20000282 	.word	0x20000282

080023f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_DMA_Init+0x5c>)
 8002400:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002404:	4a13      	ldr	r2, [pc, #76]	; (8002454 <MX_DMA_Init+0x5c>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_DMA_Init+0x5c>)
 8002410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	200b      	movs	r0, #11
 8002422:	f004 fc8c 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002426:	200b      	movs	r0, #11
 8002428:	f004 fca3 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	200c      	movs	r0, #12
 8002432:	f004 fc84 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002436:	200c      	movs	r0, #12
 8002438:	f004 fc9b 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	200d      	movs	r0, #13
 8002442:	f004 fc7c 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002446:	200d      	movs	r0, #13
 8002448:	f004 fc93 	bl	8006d72 <HAL_NVIC_EnableIRQ>

}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58024400 	.word	0x58024400

08002458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800245c:	4904      	ldr	r1, [pc, #16]	; (8002470 <MX_FATFS_Init+0x18>)
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_FATFS_Init+0x1c>)
 8002460:	f014 ffec 	bl	801743c <FATFS_LinkDriver>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <MX_FATFS_Init+0x20>)
 800246a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20001890 	.word	0x20001890
 8002474:	08018958 	.word	0x08018958
 8002478:	2000188f 	.word	0x2000188f

0800247c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248a:	4806      	ldr	r0, [pc, #24]	; (80024a4 <BSP_PlatformIsDetected+0x28>)
 800248c:	f006 ff9c 	bl	80093c8 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8002496:	2300      	movs	r3, #0
 8002498:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800249a:	79fb      	ldrb	r3, [r7, #7]
}  
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	58020800 	.word	0x58020800

080024a8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
 80024bc:	615a      	str	r2, [r3, #20]
 80024be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <MX_FMC_Init+0xa0>)
 80024c2:	4a22      	ldr	r2, [pc, #136]	; (800254c <MX_FMC_Init+0xa4>)
 80024c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <MX_FMC_Init+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <MX_FMC_Init+0xa0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <MX_FMC_Init+0xa0>)
 80024d4:	2208      	movs	r2, #8
 80024d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <MX_FMC_Init+0xa0>)
 80024da:	2210      	movs	r2, #16
 80024dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_FMC_Init+0xa0>)
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_FMC_Init+0xa0>)
 80024e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <MX_FMC_Init+0xa0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_FMC_Init+0xa0>)
 80024f4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80024f8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <MX_FMC_Init+0xa0>)
 80024fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <MX_FMC_Init+0xa0>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002508:	2302      	movs	r3, #2
 800250a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 800250c:	2306      	movs	r3, #6
 800250e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002510:	2304      	movs	r3, #4
 8002512:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8002514:	2306      	movs	r3, #6
 8002516:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002518:	2302      	movs	r3, #2
 800251a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002520:	2302      	movs	r3, #2
 8002522:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <MX_FMC_Init+0xa0>)
 800252a:	f00f f8cd 	bl	80116c8 <HAL_SDRAM_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002534:	f000 fd4c 	bl	8002fd0 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8002538:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800253c:	f002 fd9a 	bl	8005074 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002540:	bf00      	nop
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20001894 	.word	0x20001894
 800254c:	52004140 	.word	0x52004140

08002550 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002550:	b580      	push	{r7, lr}
 8002552:	b0b8      	sub	sp, #224	; 0xe0
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002566:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_FMC_MspInit+0x15c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8099 	bne.w	80026a2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8002570:	4b4e      	ldr	r3, [pc, #312]	; (80026ac <HAL_FMC_MspInit+0x15c>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	22c0      	movs	r2, #192	; 0xc0
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f015 f828 	bl	80175d4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002590:	2300      	movs	r3, #0
 8002592:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	4618      	mov	r0, r3
 800259a:	f00a f8b7 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80025a4:	f000 fd14 	bl	8002fd0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025a8:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_FMC_MspInit+0x160>)
 80025aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <HAL_FMC_MspInit+0x160>)
 80025b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_FMC_MspInit+0x160>)
 80025ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e0:	230c      	movs	r3, #12
 80025e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025ea:	4619      	mov	r1, r3
 80025ec:	4831      	ldr	r0, [pc, #196]	; (80026b4 <HAL_FMC_MspInit+0x164>)
 80025ee:	f006 fd3b 	bl	8009068 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80025f2:	230d      	movs	r3, #13
 80025f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800260a:	230c      	movs	r3, #12
 800260c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002614:	4619      	mov	r1, r3
 8002616:	4828      	ldr	r0, [pc, #160]	; (80026b8 <HAL_FMC_MspInit+0x168>)
 8002618:	f006 fd26 	bl	8009068 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800261c:	f248 1337 	movw	r3, #33079	; 0x8137
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002636:	230c      	movs	r3, #12
 8002638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002640:	4619      	mov	r1, r3
 8002642:	481e      	ldr	r0, [pc, #120]	; (80026bc <HAL_FMC_MspInit+0x16c>)
 8002644:	f006 fd10 	bl	8009068 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002648:	f64f 7383 	movw	r3, #65411	; 0xff83
 800264c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002662:	230c      	movs	r3, #12
 8002664:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800266c:	4619      	mov	r1, r3
 800266e:	4814      	ldr	r0, [pc, #80]	; (80026c0 <HAL_FMC_MspInit+0x170>)
 8002670:	f006 fcfa 	bl	8009068 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002674:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800268e:	230c      	movs	r3, #12
 8002690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002698:	4619      	mov	r1, r3
 800269a:	480a      	ldr	r0, [pc, #40]	; (80026c4 <HAL_FMC_MspInit+0x174>)
 800269c:	f006 fce4 	bl	8009068 <HAL_GPIO_Init>
 80026a0:	e000      	b.n	80026a4 <HAL_FMC_MspInit+0x154>
    return;
 80026a2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026a4:	37e0      	adds	r7, #224	; 0xe0
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200018c8 	.word	0x200018c8
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58021400 	.word	0x58021400
 80026b8:	58020800 	.word	0x58020800
 80026bc:	58021800 	.word	0x58021800
 80026c0:	58021000 	.word	0x58021000
 80026c4:	58020c00 	.word	0x58020c00

080026c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026d0:	f7ff ff3e 	bl	8002550 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08e      	sub	sp, #56	; 0x38
 80026e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026f2:	4b9b      	ldr	r3, [pc, #620]	; (8002960 <MX_GPIO_Init+0x284>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f8:	4a99      	ldr	r2, [pc, #612]	; (8002960 <MX_GPIO_Init+0x284>)
 80026fa:	f043 0310 	orr.w	r3, r3, #16
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002702:	4b97      	ldr	r3, [pc, #604]	; (8002960 <MX_GPIO_Init+0x284>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002710:	4b93      	ldr	r3, [pc, #588]	; (8002960 <MX_GPIO_Init+0x284>)
 8002712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002716:	4a92      	ldr	r2, [pc, #584]	; (8002960 <MX_GPIO_Init+0x284>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002720:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <MX_GPIO_Init+0x284>)
 8002722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800272e:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <MX_GPIO_Init+0x284>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002734:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <MX_GPIO_Init+0x284>)
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <MX_GPIO_Init+0x284>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274c:	4b84      	ldr	r3, [pc, #528]	; (8002960 <MX_GPIO_Init+0x284>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	4a83      	ldr	r2, [pc, #524]	; (8002960 <MX_GPIO_Init+0x284>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800275c:	4b80      	ldr	r3, [pc, #512]	; (8002960 <MX_GPIO_Init+0x284>)
 800275e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <MX_GPIO_Init+0x284>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	4a7b      	ldr	r2, [pc, #492]	; (8002960 <MX_GPIO_Init+0x284>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800277a:	4b79      	ldr	r3, [pc, #484]	; (8002960 <MX_GPIO_Init+0x284>)
 800277c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <MX_GPIO_Init+0x284>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278e:	4a74      	ldr	r2, [pc, #464]	; (8002960 <MX_GPIO_Init+0x284>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <MX_GPIO_Init+0x284>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027a6:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <MX_GPIO_Init+0x284>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a6c      	ldr	r2, [pc, #432]	; (8002960 <MX_GPIO_Init+0x284>)
 80027ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <MX_GPIO_Init+0x284>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	4b66      	ldr	r3, [pc, #408]	; (8002960 <MX_GPIO_Init+0x284>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	4a65      	ldr	r2, [pc, #404]	; (8002960 <MX_GPIO_Init+0x284>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <MX_GPIO_Init+0x284>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	f244 0140 	movw	r1, #16448	; 0x4040
 80027e8:	485e      	ldr	r0, [pc, #376]	; (8002964 <MX_GPIO_Init+0x288>)
 80027ea:	f006 fe05 	bl	80093f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80027ee:	2200      	movs	r2, #0
 80027f0:	f24f 1110 	movw	r1, #61712	; 0xf110
 80027f4:	485c      	ldr	r0, [pc, #368]	; (8002968 <MX_GPIO_Init+0x28c>)
 80027f6:	f006 fdff 	bl	80093f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002800:	485a      	ldr	r0, [pc, #360]	; (800296c <MX_GPIO_Init+0x290>)
 8002802:	f006 fdf9 	bl	80093f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 7140 	mov.w	r1, #768	; 0x300
 800280c:	4858      	ldr	r0, [pc, #352]	; (8002970 <MX_GPIO_Init+0x294>)
 800280e:	f006 fdf3 	bl	80093f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	4619      	mov	r1, r3
 8002826:	484f      	ldr	r0, [pc, #316]	; (8002964 <MX_GPIO_Init+0x288>)
 8002828:	f006 fc1e 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 800282c:	f244 0340 	movw	r3, #16448	; 0x4040
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002842:	4619      	mov	r1, r3
 8002844:	4847      	ldr	r0, [pc, #284]	; (8002964 <MX_GPIO_Init+0x288>)
 8002846:	f006 fc0f 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002850:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285e:	4619      	mov	r1, r3
 8002860:	4840      	ldr	r0, [pc, #256]	; (8002964 <MX_GPIO_Init+0x288>)
 8002862:	f006 fc01 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002866:	2304      	movs	r3, #4
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286a:	2300      	movs	r3, #0
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	483b      	ldr	r0, [pc, #236]	; (8002968 <MX_GPIO_Init+0x28c>)
 800287a:	f006 fbf5 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800287e:	f24f 1310 	movw	r3, #61712	; 0xf110
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4834      	ldr	r0, [pc, #208]	; (8002968 <MX_GPIO_Init+0x28c>)
 8002898:	f006 fbe6 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800289c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	4619      	mov	r1, r3
 80028b0:	482e      	ldr	r0, [pc, #184]	; (800296c <MX_GPIO_Init+0x290>)
 80028b2:	f006 fbd9 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4827      	ldr	r0, [pc, #156]	; (800296c <MX_GPIO_Init+0x290>)
 80028d0:	f006 fbca 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80028d4:	f242 0378 	movw	r3, #8312	; 0x2078
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028da:	2303      	movs	r3, #3
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e6:	4619      	mov	r1, r3
 80028e8:	4820      	ldr	r0, [pc, #128]	; (800296c <MX_GPIO_Init+0x290>)
 80028ea:	f006 fbbd 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 80028ee:	f243 0308 	movw	r3, #12296	; 0x3008
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028f4:	2303      	movs	r3, #3
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	4619      	mov	r1, r3
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <MX_GPIO_Init+0x298>)
 8002904:	f006 fbb0 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	4816      	ldr	r0, [pc, #88]	; (8002974 <MX_GPIO_Init+0x298>)
 800291c:	f006 fba4 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002920:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002926:	2301      	movs	r3, #1
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002936:	4619      	mov	r1, r3
 8002938:	480d      	ldr	r0, [pc, #52]	; (8002970 <MX_GPIO_Init+0x294>)
 800293a:	f006 fb95 	bl	8009068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800293e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002944:	2303      	movs	r3, #3
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <MX_GPIO_Init+0x294>)
 8002954:	f006 fb88 	bl	8009068 <HAL_GPIO_Init>

}
 8002958:	bf00      	nop
 800295a:	3738      	adds	r7, #56	; 0x38
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024400 	.word	0x58024400
 8002964:	58020800 	.word	0x58020800
 8002968:	58020400 	.word	0x58020400
 800296c:	58020c00 	.word	0x58020c00
 8002970:	58020000 	.word	0x58020000
 8002974:	58021800 	.word	0x58021800

08002978 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_I2C2_Init+0x74>)
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <MX_I2C2_Init+0x78>)
 8002980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <MX_I2C2_Init+0x74>)
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <MX_I2C2_Init+0x7c>)
 8002986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <MX_I2C2_Init+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <MX_I2C2_Init+0x74>)
 8002990:	2201      	movs	r2, #1
 8002992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_I2C2_Init+0x74>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_I2C2_Init+0x74>)
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_I2C2_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_I2C2_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_I2C2_Init+0x74>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029b2:	480e      	ldr	r0, [pc, #56]	; (80029ec <MX_I2C2_Init+0x74>)
 80029b4:	f008 fa4e 	bl	800ae54 <HAL_I2C_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80029be:	f000 fb07 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c2:	2100      	movs	r1, #0
 80029c4:	4809      	ldr	r0, [pc, #36]	; (80029ec <MX_I2C2_Init+0x74>)
 80029c6:	f008 fdd9 	bl	800b57c <HAL_I2CEx_ConfigAnalogFilter>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029d0:	f000 fafe 	bl	8002fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029d4:	2100      	movs	r1, #0
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_I2C2_Init+0x74>)
 80029d8:	f008 fe1b 	bl	800b612 <HAL_I2CEx_ConfigDigitalFilter>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029e2:	f000 faf5 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200018cc 	.word	0x200018cc
 80029f0:	40005800 	.word	0x40005800
 80029f4:	505097f4 	.word	0x505097f4

080029f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0ba      	sub	sp, #232	; 0xe8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	22c0      	movs	r2, #192	; 0xc0
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f014 fddb 	bl	80175d4 <memset>
  if(i2cHandle->Instance==I2C2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_I2C_MspInit+0xc8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d146      	bne.n	8002ab6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a28:	f04f 0208 	mov.w	r2, #8
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f009 fe64 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a4a:	f000 fac1 	bl	8002fd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a74:	2312      	movs	r3, #18
 8002a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a86:	2304      	movs	r3, #4
 8002a88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a90:	4619      	mov	r1, r3
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <HAL_I2C_MspInit+0xd0>)
 8002a94:	f006 fae8 	bl	8009068 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a9e:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_I2C_MspInit+0xcc>)
 8002aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	37e8      	adds	r7, #232	; 0xe8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40005800 	.word	0x40005800
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	58020400 	.word	0x58020400

08002acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 8002ad2:	f000 fa3b 	bl	8002f4c <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <main+0x17c>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11b      	bne.n	8002b1a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae2:	f3bf 8f4f 	dsb	sy
}
 8002ae6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ae8:	f3bf 8f6f 	isb	sy
}
 8002aec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002aee:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <main+0x17c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002af6:	f3bf 8f4f 	dsb	sy
}
 8002afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002afc:	f3bf 8f6f 	isb	sy
}
 8002b00:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <main+0x17c>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <main+0x17c>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b0e:	f3bf 8f4f 	dsb	sy
}
 8002b12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b14:	f3bf 8f6f 	isb	sy
}
 8002b18:	e000      	b.n	8002b1c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002b1a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <main+0x17c>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d138      	bne.n	8002b9a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <main+0x17c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b30:	f3bf 8f4f 	dsb	sy
}
 8002b34:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002b36:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <main+0x17c>)
 8002b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0b5b      	lsrs	r3, r3, #13
 8002b42:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b46:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b50:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002b5a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b60:	4939      	ldr	r1, [pc, #228]	; (8002c48 <main+0x17c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1e5a      	subs	r2, r3, #1
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ef      	bne.n	8002b52 <main+0x86>
    } while(sets-- != 0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	60ba      	str	r2, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7c:	f3bf 8f4f 	dsb	sy
}
 8002b80:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <main+0x17c>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <main+0x17c>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b8e:	f3bf 8f4f 	dsb	sy
}
 8002b92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b94:	f3bf 8f6f 	isb	sy
}
 8002b98:	e000      	b.n	8002b9c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002b9a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b9c:	f002 f9a8 	bl	8004ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba0:	f000 f860 	bl	8002c64 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ba4:	f000 f90e 	bl	8002dc4 <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ba8:	f7ff fd98 	bl	80026dc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bac:	f7ff fc24 	bl	80023f8 <MX_DMA_Init>
  MX_FMC_Init();
 8002bb0:	f7ff fc7a 	bl	80024a8 <MX_FMC_Init>
  MX_ADC1_Init();
 8002bb4:	f7fe fade 	bl	8001174 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002bb8:	f7fe fbfe 	bl	80013b8 <MX_ADC3_Init>
  MX_I2C2_Init();
 8002bbc:	f7ff fedc 	bl	8002978 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8002bc0:	f000 fca6 	bl	8003510 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002bc4:	f000 fd3e 	bl	8003644 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002bc8:	f7ff fc46 	bl	8002458 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002bcc:	f000 fa54 	bl	8003078 <MX_SAI1_Init>
  MX_TIM3_Init();
 8002bd0:	f000 ffc8 	bl	8003b64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002bd4:	f001 f83e 	bl	8003c54 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002bd8:	f001 f8ca 	bl	8003d70 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002bdc:	f000 ff32 	bl	8003a44 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8002be0:	f001 fa7c 	bl	80040dc <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002be4:	f000 f9f8 	bl	8002fd8 <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002be8:	f001 fb54 	bl	8004294 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf2:	4816      	ldr	r0, [pc, #88]	; (8002c4c <main+0x180>)
 8002bf4:	f006 fc00 	bl	80093f8 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002bf8:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8002bfc:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	eee1 3a10 	vmsr	fpscr, r3
}
 8002c10:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 8002c12:	220a      	movs	r2, #10
 8002c14:	490e      	ldr	r1, [pc, #56]	; (8002c50 <main+0x184>)
 8002c16:	480f      	ldr	r0, [pc, #60]	; (8002c54 <main+0x188>)
 8002c18:	f002 fdea 	bl	80057f0 <HAL_ADC_Start_DMA>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <main+0x15a>
	{
	  Error_Handler();
 8002c22:	f000 f9d5 	bl	8002fd0 <Error_Handler>
	}
//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  HAL_Delay(10);
 8002c26:	200a      	movs	r0, #10
 8002c28:	f002 f9f4 	bl	8005014 <HAL_Delay>

  SDRAM_Initialization_sequence();
 8002c2c:	f000 f90a 	bl	8002e44 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f002 f9ef 	bl	8005014 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <main+0x18c>)
 8002c38:	4908      	ldr	r1, [pc, #32]	; (8002c5c <main+0x190>)
 8002c3a:	4809      	ldr	r0, [pc, #36]	; (8002c60 <main+0x194>)
 8002c3c:	f7fe fd50 	bl	80016e0 <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002c40:	f001 fb50 	bl	80042e4 <MX_USB_HOST_Process>
 8002c44:	e7fc      	b.n	8002c40 <main+0x174>
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	58020800 	.word	0x58020800
 8002c50:	30000440 	.word	0x30000440
 8002c54:	20000140 	.word	0x20000140
 8002c58:	200019cc 	.word	0x200019cc
 8002c5c:	20001934 	.word	0x20001934
 8002c60:	200018cc 	.word	0x200018cc

08002c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b09e      	sub	sp, #120	; 0x78
 8002c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c6e:	224c      	movs	r2, #76	; 0x4c
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f014 fcae 	bl	80175d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f014 fca7 	bl	80175d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002c86:	2002      	movs	r0, #2
 8002c88:	f008 fd10 	bl	800b6ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <SystemClock_Config+0x154>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4a48      	ldr	r2, [pc, #288]	; (8002db8 <SystemClock_Config+0x154>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <SystemClock_Config+0x154>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <SystemClock_Config+0x158>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4a44      	ldr	r2, [pc, #272]	; (8002dbc <SystemClock_Config+0x158>)
 8002cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <SystemClock_Config+0x158>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002cbe:	bf00      	nop
 8002cc0:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <SystemClock_Config+0x158>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d1f8      	bne.n	8002cc0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <SystemClock_Config+0x15c>)
 8002cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <SystemClock_Config+0x15c>)
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <SystemClock_Config+0x15c>)
 8002ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <SystemClock_Config+0x158>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <SystemClock_Config+0x158>)
 8002cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <SystemClock_Config+0x158>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <SystemClock_Config+0x154>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <SystemClock_Config+0x154>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <SystemClock_Config+0x154>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d1e:	bf00      	nop
 8002d20:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <SystemClock_Config+0x158>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	d1f8      	bne.n	8002d20 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002d2e:	2321      	movs	r3, #33	; 0x21
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d40:	2302      	movs	r3, #2
 8002d42:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002d44:	2305      	movs	r3, #5
 8002d46:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002d48:	23c0      	movs	r3, #192	; 0xc0
 8002d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d50:	2302      	movs	r3, #2
 8002d52:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d54:	2302      	movs	r3, #2
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 fce9 	bl	800b740 <HAL_RCC_OscConfig>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002d74:	f000 f92c 	bl	8002fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d78:	233f      	movs	r3, #63	; 0x3f
 8002d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002d84:	2308      	movs	r3, #8
 8002d86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002d88:	2340      	movs	r3, #64	; 0x40
 8002d8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002d8c:	2340      	movs	r3, #64	; 0x40
 8002d8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f009 f927 	bl	800bff4 <HAL_RCC_ClockConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8002dac:	f000 f910 	bl	8002fd0 <Error_Handler>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3778      	adds	r7, #120	; 0x78
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	58000400 	.word	0x58000400
 8002dbc:	58024800 	.word	0x58024800
 8002dc0:	58024400 	.word	0x58024400

08002dc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0b0      	sub	sp, #192	; 0xc0
 8002dc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dca:	463b      	mov	r3, r7
 8002dcc:	22c0      	movs	r2, #192	; 0xc0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f014 fbff 	bl	80175d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <PeriphCommonClock_Config+0x68>)
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002de0:	2319      	movs	r3, #25
 8002de2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8002de4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002de8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8002dea:	2307      	movs	r3, #7
 8002dec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002dee:	2302      	movs	r3, #2
 8002df0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e06:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e12:	463b      	mov	r3, r7
 8002e14:	4618      	mov	r0, r3
 8002e16:	f009 fc79 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002e20:	f000 f8d6 	bl	8002fd0 <Error_Handler>
  }
}
 8002e24:	bf00      	nop
 8002e26:	37c0      	adds	r7, #192	; 0xc0
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	00090100 	.word	0x00090100

08002e30 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	;
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e52:	2310      	movs	r3, #16
 8002e54:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002e56:	2301      	movs	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e64:	4619      	mov	r1, r3
 8002e66:	4828      	ldr	r0, [pc, #160]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002e68:	f00e fc6a 	bl	8011740 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f002 f8d1 	bl	8005014 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002e72:	2302      	movs	r3, #2
 8002e74:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e76:	2310      	movs	r3, #16
 8002e78:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e88:	4619      	mov	r1, r3
 8002e8a:	481f      	ldr	r0, [pc, #124]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002e8c:	f00e fc58 	bl	8011740 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 8002e90:	f240 2322 	movw	r3, #546	; 0x222
 8002e94:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8002e96:	2304      	movs	r3, #4
 8002e98:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eac:	4619      	mov	r1, r3
 8002eae:	4816      	ldr	r0, [pc, #88]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002eb0:	f00e fc46 	bl	8011740 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002eb8:	2310      	movs	r3, #16
 8002eba:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480e      	ldr	r0, [pc, #56]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002ece:	f00e fc37 	bl	8011740 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f002 f89e 	bl	8005014 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002edc:	2310      	movs	r3, #16
 8002ede:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002ef2:	f00e fc25 	bl	8011740 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8002ef6:	f240 5169 	movw	r1, #1385	; 0x569
 8002efa:	4803      	ldr	r0, [pc, #12]	; (8002f08 <SDRAM_Initialization_sequence+0xc4>)
 8002efc:	f00e fc55 	bl	80117aa <HAL_SDRAM_ProgramRefreshRate>
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20001894 	.word	0x20001894

08002f0c <randomNumber>:


float randomNumber(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002f12:	463b      	mov	r3, r7
 8002f14:	4619      	mov	r1, r3
 8002f16:	480b      	ldr	r0, [pc, #44]	; (8002f44 <randomNumber+0x38>)
 8002f18:	f00c f958 	bl	800f1cc <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002f48 <randomNumber+0x3c>
 8002f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2e:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	ee07 3a90 	vmov	s15, r3
}
 8002f38:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20001920 	.word	0x20001920
 8002f48:	2f80000d 	.word	0x2f80000d

08002f4c <MPU_Conf>:


void MPU_Conf(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8002f52:	f003 ff29 	bl	8006da8 <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8002f5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002f5e:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002f60:	2311      	movs	r3, #17
 8002f62:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002f64:	2303      	movs	r3, #3
 8002f66:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002f84:	463b      	mov	r3, r7
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 ff46 	bl	8006e18 <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8002f90:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002f94:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002f96:	230f      	movs	r3, #15
 8002f98:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002faa:	2301      	movs	r3, #1
 8002fac:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002fba:	463b      	mov	r3, r7
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 ff2b 	bl	8006e18 <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002fc2:	2004      	movs	r0, #4
 8002fc4:	f003 ff08 	bl	8006dd8 <HAL_MPU_Enable>
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 8002fd4:	e7fe      	b.n	8002fd4 <Error_Handler+0x4>
	...

08002fd8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <MX_RNG_Init+0x24>)
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <MX_RNG_Init+0x28>)
 8002fe0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <MX_RNG_Init+0x24>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002fe8:	4804      	ldr	r0, [pc, #16]	; (8002ffc <MX_RNG_Init+0x24>)
 8002fea:	f00c f88d 	bl	800f108 <HAL_RNG_Init>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002ff4:	f7ff ffec 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20001920 	.word	0x20001920
 8003000:	48021800 	.word	0x48021800

08003004 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b0b4      	sub	sp, #208	; 0xd0
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800300c:	f107 0310 	add.w	r3, r7, #16
 8003010:	22c0      	movs	r2, #192	; 0xc0
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f014 fadd 	bl	80175d4 <memset>
  if(rngHandle->Instance==RNG)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_RNG_MspInit+0x6c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d121      	bne.n	8003068 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003024:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f009 fb66 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8003046:	f7ff ffc3 	bl	8002fd0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RNG_MspInit+0x70>)
 800304c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_RNG_MspInit+0x70>)
 8003052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003056:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RNG_MspInit+0x70>)
 800305c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003068:	bf00      	nop
 800306a:	37d0      	adds	r7, #208	; 0xd0
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	48021800 	.word	0x48021800
 8003074:	58024400 	.word	0x58024400

08003078 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <MX_SAI1_Init+0xb0>)
 800307e:	4a2b      	ldr	r2, [pc, #172]	; (800312c <MX_SAI1_Init+0xb4>)
 8003080:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <MX_SAI1_Init+0xb0>)
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <MX_SAI1_Init+0xb0>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <MX_SAI1_Init+0xb0>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <MX_SAI1_Init+0xb0>)
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <MX_SAI1_Init+0xb0>)
 800309c:	2201      	movs	r2, #1
 800309e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030a2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80030a6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80030c0:	2302      	movs	r3, #2
 80030c2:	2202      	movs	r2, #2
 80030c4:	2100      	movs	r1, #0
 80030c6:	4818      	ldr	r0, [pc, #96]	; (8003128 <MX_SAI1_Init+0xb0>)
 80030c8:	f00c f8d6 	bl	800f278 <HAL_SAI_InitProtocol>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 80030d2:	f7ff ff7d 	bl	8002fd0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030d8:	4a16      	ldr	r2, [pc, #88]	; (8003134 <MX_SAI1_Init+0xbc>)
 80030da:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030de:	2203      	movs	r2, #3
 80030e0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <MX_SAI1_Init+0xb8>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <MX_SAI1_Init+0xb8>)
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <MX_SAI1_Init+0xb8>)
 8003108:	2200      	movs	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800310c:	2302      	movs	r3, #2
 800310e:	2202      	movs	r2, #2
 8003110:	2100      	movs	r1, #0
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <MX_SAI1_Init+0xb8>)
 8003114:	f00c f8b0 	bl	800f278 <HAL_SAI_InitProtocol>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800311e:	f7ff ff57 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20001934 	.word	0x20001934
 800312c:	40015804 	.word	0x40015804
 8003130:	200019cc 	.word	0x200019cc
 8003134:	40015824 	.word	0x40015824

08003138 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_SAI_MspInit+0x1ec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d179      	bne.n	800323e <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800314a:	4b77      	ldr	r3, [pc, #476]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 8003154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003158:	4a74      	ldr	r2, [pc, #464]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 800315a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800315e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 8003164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003170:	4b6d      	ldr	r3, [pc, #436]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	4a6c      	ldr	r2, [pc, #432]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 8003178:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 800317a:	2324      	movs	r3, #36	; 0x24
 800317c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800318a:	2306      	movs	r3, #6
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800318e:	f107 0314 	add.w	r3, r7, #20
 8003192:	4619      	mov	r1, r3
 8003194:	4866      	ldr	r0, [pc, #408]	; (8003330 <HAL_SAI_MspInit+0x1f8>)
 8003196:	f005 ff67 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800319a:	2350      	movs	r3, #80	; 0x50
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a6:	2302      	movs	r3, #2
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80031aa:	2306      	movs	r3, #6
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	485e      	ldr	r0, [pc, #376]	; (8003330 <HAL_SAI_MspInit+0x1f8>)
 80031b6:	f005 ff57 	bl	8009068 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 80031ba:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031bc:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_SAI_MspInit+0x200>)
 80031be:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80031c0:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031c2:	2257      	movs	r2, #87	; 0x57
 80031c4:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031c8:	2240      	movs	r2, #64	; 0x40
 80031ca:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e0:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031e8:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031f0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031f2:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80031f8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031fa:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 80031fc:	2204      	movs	r2, #4
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 8003208:	2200      	movs	r2, #0
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003212:	4848      	ldr	r0, [pc, #288]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 8003214:	f003 fe44 	bl	8006ea0 <HAL_DMA_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 800321e:	f7ff fed7 	bl	8002fd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a43      	ldr	r2, [pc, #268]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 8003226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800322a:	4a42      	ldr	r2, [pc, #264]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a40      	ldr	r2, [pc, #256]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 8003234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003238:	4a3e      	ldr	r2, [pc, #248]	; (8003334 <HAL_SAI_MspInit+0x1fc>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3e      	ldr	r2, [pc, #248]	; (800333c <HAL_SAI_MspInit+0x204>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d169      	bne.n	800331c <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10e      	bne.n	800326e <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 8003252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003256:	4a35      	ldr	r2, [pc, #212]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 8003258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800325c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_SAI_MspInit+0x1f4>)
 8003262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <HAL_SAI_MspInit+0x1f0>)
 8003276:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003278:	2308      	movs	r3, #8
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003284:	2302      	movs	r3, #2
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003288:	2306      	movs	r3, #6
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	4827      	ldr	r0, [pc, #156]	; (8003330 <HAL_SAI_MspInit+0x1f8>)
 8003294:	f005 fee8 	bl	8009068 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <HAL_SAI_MspInit+0x208>)
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <HAL_SAI_MspInit+0x20c>)
 800329c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032a0:	2258      	movs	r2, #88	; 0x58
 80032a2:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a4:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b6:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032b8:	4b21      	ldr	r3, [pc, #132]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032be:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032c6:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80032c8:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ce:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032d6:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032da:	2204      	movs	r2, #4
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80032de:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80032e4:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80032f0:	4813      	ldr	r0, [pc, #76]	; (8003340 <HAL_SAI_MspInit+0x208>)
 80032f2:	f003 fdd5 	bl	8006ea0 <HAL_DMA_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 80032fc:	f7ff fe68 	bl	8002fd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <HAL_SAI_MspInit+0x208>)
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_SAI_MspInit+0x208>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_SAI_MspInit+0x208>)
 8003312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_SAI_MspInit+0x208>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40015804 	.word	0x40015804
 8003328:	20001b54 	.word	0x20001b54
 800332c:	58024400 	.word	0x58024400
 8003330:	58021000 	.word	0x58021000
 8003334:	20001a64 	.word	0x20001a64
 8003338:	40020028 	.word	0x40020028
 800333c:	40015824 	.word	0x40015824
 8003340:	20001adc 	.word	0x20001adc
 8003344:	40020040 	.word	0x40020040

08003348 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <SD_CheckStatus+0x38>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003358:	f7fe ff5a 	bl	8002210 <BSP_SD_GetCardState>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <SD_CheckStatus+0x38>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <SD_CheckStatus+0x38>)
 8003370:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <SD_CheckStatus+0x38>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000018 	.word	0x20000018

08003384 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <SD_initialize+0x38>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003394:	f7fe feda 	bl	800214c <BSP_SD_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ffd1 	bl	8003348 <SD_CheckStatus>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <SD_initialize+0x38>)
 80033ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <SD_initialize+0x38>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b2db      	uxtb	r3, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000018 	.word	0x20000018

080033c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ffbb 	bl	8003348 <SD_CheckStatus>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4603      	mov	r3, r0
 80033ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f7fe fecd 	bl	8002198 <BSP_SD_ReadBlocks>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003404:	bf00      	nop
 8003406:	f7fe ff03 	bl	8002210 <BSP_SD_GetCardState>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1fa      	bne.n	8003406 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003414:	7dfb      	ldrb	r3, [r7, #23]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	68b8      	ldr	r0, [r7, #8]
 800343c:	f7fe feca 	bl	80021d4 <BSP_SD_WriteBlocks>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003446:	bf00      	nop
 8003448:	f7fe fee2 	bl	8002210 <BSP_SD_GetCardState>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1fa      	bne.n	8003448 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	603a      	str	r2, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
 800346c:	460b      	mov	r3, r1
 800346e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003476:	4b25      	ldr	r3, [pc, #148]	; (800350c <SD_ioctl+0xac>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <SD_ioctl+0x28>
 8003484:	2303      	movs	r3, #3
 8003486:	e03c      	b.n	8003502 <SD_ioctl+0xa2>

  switch (cmd)
 8003488:	79bb      	ldrb	r3, [r7, #6]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d834      	bhi.n	80034f8 <SD_ioctl+0x98>
 800348e:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <SD_ioctl+0x34>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034ad 	.word	0x080034ad
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034df 	.word	0x080034df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034aa:	e028      	b.n	80034fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe febd 	bl	8002230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80034b6:	6a3a      	ldr	r2, [r7, #32]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034c2:	e01c      	b.n	80034fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe feb1 	bl	8002230 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034dc:	e00f      	b.n	80034fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fea4 	bl	8002230 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	0a5a      	lsrs	r2, r3, #9
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034f6:	e002      	b.n	80034fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80034f8:	2304      	movs	r3, #4
 80034fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80034fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003502:	4618      	mov	r0, r3
 8003504:	3730      	adds	r7, #48	; 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000018 	.word	0x20000018

08003510 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <MX_SDMMC1_SD_Init+0x38>)
 8003518:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 800351c:	2200      	movs	r2, #0
 800351e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 8003528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800352c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <MX_SDMMC1_SD_Init+0x34>)
 8003536:	2200      	movs	r2, #0
 8003538:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	20001b58 	.word	0x20001b58
 8003548:	52007000 	.word	0x52007000

0800354c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a32      	ldr	r2, [pc, #200]	; (8003634 <HAL_SD_MspInit+0xe8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d15e      	bne.n	800362c <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800356e:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_SD_MspInit+0xec>)
 8003570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003574:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_SD_MspInit+0xec>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_SD_MspInit+0xec>)
 8003580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358c:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_SD_MspInit+0xec>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_SD_MspInit+0xec>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_SD_MspInit+0xec>)
 800359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <HAL_SD_MspInit+0xec>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b0:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_SD_MspInit+0xec>)
 80035b2:	f043 0308 	orr.w	r3, r3, #8
 80035b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_SD_MspInit+0xec>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80035c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d6:	2303      	movs	r3, #3
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035da:	230c      	movs	r3, #12
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	4619      	mov	r1, r3
 80035e4:	4815      	ldr	r0, [pc, #84]	; (800363c <HAL_SD_MspInit+0xf0>)
 80035e6:	f005 fd3f 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035fc:	230c      	movs	r3, #12
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <HAL_SD_MspInit+0xf0>)
 8003608:	f005 fd2e 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800360c:	2304      	movs	r3, #4
 800360e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003614:	2301      	movs	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800361c:	230c      	movs	r3, #12
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <HAL_SD_MspInit+0xf4>)
 8003628:	f005 fd1e 	bl	8009068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800362c:	bf00      	nop
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	52007000 	.word	0x52007000
 8003638:	58024400 	.word	0x58024400
 800363c:	58020800 	.word	0x58020800
 8003640:	58020c00 	.word	0x58020c00

08003644 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <MX_SPI1_Init+0xa4>)
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <MX_SPI1_Init+0xa8>)
 800364c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003650:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800365c:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <MX_SPI1_Init+0xa4>)
 800365e:	2207      	movs	r2, #7
 8003660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003662:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003668:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <MX_SPI1_Init+0xa4>)
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003678:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800367c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003686:	2200      	movs	r2, #0
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <MX_SPI1_Init+0xa4>)
 800368c:	2200      	movs	r2, #0
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003692:	2200      	movs	r2, #0
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <MX_SPI1_Init+0xa4>)
 8003698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800369c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036aa:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036d4:	4804      	ldr	r0, [pc, #16]	; (80036e8 <MX_SPI1_Init+0xa4>)
 80036d6:	f00e f891 	bl	80117fc <HAL_SPI_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80036e0:	f7ff fc76 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20001bd4 	.word	0x20001bd4
 80036ec:	40013000 	.word	0x40013000

080036f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0bc      	sub	sp, #240	; 0xf0
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003708:	f107 0318 	add.w	r3, r7, #24
 800370c:	22c0      	movs	r2, #192	; 0xc0
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f013 ff5f 	bl	80175d4 <memset>
  if(spiHandle->Instance==SPI1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_SPI_MspInit+0x10c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d169      	bne.n	80037f4 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800372c:	2300      	movs	r3, #0
 800372e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003730:	f107 0318 	add.w	r3, r7, #24
 8003734:	4618      	mov	r0, r3
 8003736:	f008 ffe9 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003740:	f7ff fc46 	bl	8002fd0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800374a:	4a2d      	ldr	r2, [pc, #180]	; (8003800 <HAL_SPI_MspInit+0x110>)
 800374c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003750:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003762:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_SPI_MspInit+0x110>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_SPI_MspInit+0x110>)
 8003792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a4:	2302      	movs	r3, #2
 80037a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037b6:	2305      	movs	r3, #5
 80037b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037c0:	4619      	mov	r1, r3
 80037c2:	4810      	ldr	r0, [pc, #64]	; (8003804 <HAL_SPI_MspInit+0x114>)
 80037c4:	f005 fc50 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80037c8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80037cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037e2:	2305      	movs	r3, #5
 80037e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <HAL_SPI_MspInit+0x118>)
 80037f0:	f005 fc3a 	bl	8009068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80037f4:	bf00      	nop
 80037f6:	37f0      	adds	r7, #240	; 0xf0
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40013000 	.word	0x40013000
 8003800:	58024400 	.word	0x58024400
 8003804:	58020c00 	.word	0x58020c00
 8003808:	58021800 	.word	0x58021800

0800380c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_MspInit+0x30>)
 8003814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <HAL_MspInit+0x30>)
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_MspInit+0x30>)
 8003824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	58024400 	.word	0x58024400

08003840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <HardFault_Handler+0x4>

08003854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <MemManage_Handler+0x4>

0800385a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800385e:	e7fe      	b.n	800385e <BusFault_Handler+0x4>

08003860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003864:	e7fe      	b.n	8003864 <UsageFault_Handler+0x4>

08003866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003866:	b480      	push	{r7}
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003894:	f001 fb9e 	bl	8004fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}

0800389c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <DMA1_Stream0_IRQHandler+0x10>)
 80038a2:	f004 f8c3 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000208 	.word	0x20000208

080038b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <DMA1_Stream1_IRQHandler+0x10>)
 80038b6:	f004 f8b9 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20001a64 	.word	0x20001a64

080038c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA1_Stream2_IRQHandler+0x10>)
 80038ca:	f004 f8af 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20001adc 	.word	0x20001adc

080038d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <ADC_IRQHandler+0x10>)
 80038de:	f002 f84b 	bl	8005978 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000140 	.word	0x20000140

080038ec <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 80038f2:	f006 f805 	bl	8009900 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20001e2c 	.word	0x20001e2c

08003900 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8003906:	f005 fffb 	bl	8009900 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20001e2c 	.word	0x20001e2c

08003914 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <OTG_FS_IRQHandler+0x10>)
 800391a:	f005 fff1 	bl	8009900 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20001e2c 	.word	0x20001e2c

08003928 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <_sbrk+0x50>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <_sbrk+0x16>
		heap_end = &end;
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <_sbrk+0x50>)
 800393a:	4a10      	ldr	r2, [pc, #64]	; (800397c <_sbrk+0x54>)
 800393c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <_sbrk+0x50>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <_sbrk+0x50>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	466a      	mov	r2, sp
 800394e:	4293      	cmp	r3, r2
 8003950:	d907      	bls.n	8003962 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003952:	f013 fe57 	bl	8017604 <__errno>
 8003956:	4603      	mov	r3, r0
 8003958:	220c      	movs	r2, #12
 800395a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003960:	e006      	b.n	8003970 <_sbrk+0x48>
	}

	heap_end += incr;
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <_sbrk+0x50>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	4a03      	ldr	r2, [pc, #12]	; (8003978 <_sbrk+0x50>)
 800396c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800396e:	68fb      	ldr	r3, [r7, #12]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20001c5c 	.word	0x20001c5c
 800397c:	20002288 	.word	0x20002288

08003980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <SystemInit+0xac>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <SystemInit+0xac>)
 800398c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <SystemInit+0xb0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <SystemInit+0xb0>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a0:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <SystemInit+0xb0>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <SystemInit+0xb0>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4921      	ldr	r1, [pc, #132]	; (8003a30 <SystemInit+0xb0>)
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <SystemInit+0xb4>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <SystemInit+0xb0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <SystemInit+0xb0>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <SystemInit+0xb0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <SystemInit+0xb0>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <SystemInit+0xb0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <SystemInit+0xb0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <SystemInit+0xb0>)
 80039d8:	2200      	movs	r2, #0
 80039da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <SystemInit+0xb0>)
 80039de:	2200      	movs	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <SystemInit+0xb0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <SystemInit+0xb0>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <SystemInit+0xb0>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <SystemInit+0xb0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <SystemInit+0xb0>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <SystemInit+0xb0>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <SystemInit+0xb8>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <SystemInit+0xbc>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a12:	d202      	bcs.n	8003a1a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <SystemInit+0xc0>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <SystemInit+0xac>)
 8003a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a20:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00
 8003a30:	58024400 	.word	0x58024400
 8003a34:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a38:	5c001000 	.word	0x5c001000
 8003a3c:	ffff0000 	.word	0xffff0000
 8003a40:	51008108 	.word	0x51008108

08003a44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b096      	sub	sp, #88	; 0x58
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	615a      	str	r2, [r3, #20]
 8003a68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	222c      	movs	r2, #44	; 0x2c
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f013 fdaf 	bl	80175d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a78:	4a39      	ldr	r2, [pc, #228]	; (8003b60 <MX_TIM1_Init+0x11c>)
 8003a7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a90:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003aa2:	482e      	ldr	r0, [pc, #184]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003aa4:	f00e f840 	bl	8011b28 <HAL_TIM_PWM_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003aae:	f7ff fa8f 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003abe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4825      	ldr	r0, [pc, #148]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003ac6:	f00e fea1 	bl	801280c <HAL_TIMEx_MasterConfigSynchronization>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003ad0:	f7ff fa7e 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad4:	2360      	movs	r3, #96	; 0x60
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003aec:	2300      	movs	r3, #0
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003af4:	2208      	movs	r2, #8
 8003af6:	4619      	mov	r1, r3
 8003af8:	4818      	ldr	r0, [pc, #96]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003afa:	f00e f86d 	bl	8011bd8 <HAL_TIM_PWM_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b04:	f7ff fa64 	bl	8002fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4807      	ldr	r0, [pc, #28]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003b3e:	f00e fef3 	bl	8012928 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003b48:	f7ff fa42 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b4c:	4803      	ldr	r0, [pc, #12]	; (8003b5c <MX_TIM1_Init+0x118>)
 8003b4e:	f000 f9b7 	bl	8003ec0 <HAL_TIM_MspPostInit>

}
 8003b52:	bf00      	nop
 8003b54:	3758      	adds	r7, #88	; 0x58
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20001c60 	.word	0x20001c60
 8003b60:	40010000 	.word	0x40010000

08003b64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b78:	f107 031c 	add.w	r3, r7, #28
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b84:	463b      	mov	r3, r7
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	615a      	str	r2, [r3, #20]
 8003b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003b98:	4a2d      	ldr	r2, [pc, #180]	; (8003c50 <MX_TIM3_Init+0xec>)
 8003b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb0:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bbc:	4823      	ldr	r0, [pc, #140]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003bbe:	f00d ff5c 	bl	8011a7a <HAL_TIM_Base_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003bc8:	f7ff fa02 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	481c      	ldr	r0, [pc, #112]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003bda:	f00e f911 	bl	8011e00 <HAL_TIM_ConfigClockSource>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003be4:	f7ff f9f4 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003be8:	4818      	ldr	r0, [pc, #96]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003bea:	f00d ff9d 	bl	8011b28 <HAL_TIM_PWM_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003bf4:	f7ff f9ec 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	4811      	ldr	r0, [pc, #68]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003c08:	f00e fe00 	bl	801280c <HAL_TIMEx_MasterConfigSynchronization>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003c12:	f7ff f9dd 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c16:	2360      	movs	r3, #96	; 0x60
 8003c18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c26:	463b      	mov	r3, r7
 8003c28:	2204      	movs	r2, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4807      	ldr	r0, [pc, #28]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003c2e:	f00d ffd3 	bl	8011bd8 <HAL_TIM_PWM_ConfigChannel>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003c38:	f7ff f9ca 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c3c:	4803      	ldr	r0, [pc, #12]	; (8003c4c <MX_TIM3_Init+0xe8>)
 8003c3e:	f000 f93f 	bl	8003ec0 <HAL_TIM_MspPostInit>

}
 8003c42:	bf00      	nop
 8003c44:	3738      	adds	r7, #56	; 0x38
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20001cac 	.word	0x20001cac
 8003c50:	40000400 	.word	0x40000400

08003c54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c74:	463b      	mov	r3, r7
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c86:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <MX_TIM4_Init+0x118>)
 8003c8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c98:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cac:	482e      	ldr	r0, [pc, #184]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003cae:	f00d fee4 	bl	8011a7a <HAL_TIM_Base_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003cb8:	f7ff f98a 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4827      	ldr	r0, [pc, #156]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003cca:	f00e f899 	bl	8011e00 <HAL_TIM_ConfigClockSource>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003cd4:	f7ff f97c 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003cd8:	4823      	ldr	r0, [pc, #140]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003cda:	f00d ff25 	bl	8011b28 <HAL_TIM_PWM_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ce4:	f7ff f974 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	481c      	ldr	r0, [pc, #112]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003cf8:	f00e fd88 	bl	801280c <HAL_TIMEx_MasterConfigSynchronization>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003d02:	f7ff f965 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d06:	2360      	movs	r3, #96	; 0x60
 8003d08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d16:	463b      	mov	r3, r7
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4812      	ldr	r0, [pc, #72]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003d1e:	f00d ff5b 	bl	8011bd8 <HAL_TIM_PWM_ConfigChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003d28:	f7ff f952 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	2204      	movs	r2, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	480d      	ldr	r0, [pc, #52]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003d34:	f00d ff50 	bl	8011bd8 <HAL_TIM_PWM_ConfigChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003d3e:	f7ff f947 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d42:	463b      	mov	r3, r7
 8003d44:	220c      	movs	r2, #12
 8003d46:	4619      	mov	r1, r3
 8003d48:	4807      	ldr	r0, [pc, #28]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003d4a:	f00d ff45 	bl	8011bd8 <HAL_TIM_PWM_ConfigChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8003d54:	f7ff f93c 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003d58:	4803      	ldr	r0, [pc, #12]	; (8003d68 <MX_TIM4_Init+0x114>)
 8003d5a:	f000 f8b1 	bl	8003ec0 <HAL_TIM_MspPostInit>

}
 8003d5e:	bf00      	nop
 8003d60:	3738      	adds	r7, #56	; 0x38
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20001cf8 	.word	0x20001cf8
 8003d6c:	40000800 	.word	0x40000800

08003d70 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <MX_TIM7_Init+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d98:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003da0:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003da2:	f00d fe6a 	bl	8011a7a <HAL_TIM_Base_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003dac:	f7ff f910 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_TIM7_Init+0x64>)
 8003dbe:	f00e fd25 	bl	801280c <HAL_TIMEx_MasterConfigSynchronization>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003dc8:	f7ff f902 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20001d44 	.word	0x20001d44
 8003dd8:	40001400 	.word	0x40001400

08003ddc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_TIM_PWM_MspInit+0x40>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <HAL_TIM_PWM_MspInit+0x40>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_TIM_PWM_MspInit+0x40>)
 8003e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	58024400 	.word	0x58024400

08003e20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <HAL_TIM_Base_MspInit+0x90>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10f      	bne.n	8003e52 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e38:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003e50:	e028      	b.n	8003ea4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_TIM_Base_MspInit+0x98>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10f      	bne.n	8003e7c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
}
 8003e7a:	e013      	b.n	8003ea4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_TIM_Base_MspInit+0x9c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e8c:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e8e:	f043 0320 	orr.w	r3, r3, #32
 8003e92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <HAL_TIM_Base_MspInit+0x94>)
 8003e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40001400 	.word	0x40001400

08003ec0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a38      	ldr	r2, [pc, #224]	; (8003fc0 <HAL_TIM_MspPostInit+0x100>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d120      	bne.n	8003f24 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee8:	4a36      	ldr	r2, [pc, #216]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	482a      	ldr	r0, [pc, #168]	; (8003fc8 <HAL_TIM_MspPostInit+0x108>)
 8003f1e:	f005 f8a3 	bl	8009068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003f22:	e049      	b.n	8003fb8 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <HAL_TIM_MspPostInit+0x10c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d11f      	bne.n	8003f6e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f36:	f043 0302 	orr.w	r3, r3, #2
 8003f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	2302      	movs	r3, #2
 8003f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <HAL_TIM_MspPostInit+0x110>)
 8003f68:	f005 f87e 	bl	8009068 <HAL_GPIO_Init>
}
 8003f6c:	e024      	b.n	8003fb8 <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_TIM_MspPostInit+0x114>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d11f      	bne.n	8003fb8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f7e:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_TIM_MspPostInit+0x104>)
 8003f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003f96:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <HAL_TIM_MspPostInit+0x110>)
 8003fb4:	f005 f858 	bl	8009068 <HAL_GPIO_Init>
}
 8003fb8:	bf00      	nop
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	58020000 	.word	0x58020000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	58020400 	.word	0x58020400
 8003fd4:	40000800 	.word	0x40000800

08003fd8 <mux_select_pin>:
uint16_t ADC_values[NUM_ADC_CHANNELS] __ATTR_RAM_D2;

const int mux_sel_pin[3] = {MUX_SEL_PIN_A, MUX_SEL_PIN_B, MUX_SEL_PIN_C};

void mux_select_pin(int pin)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++){
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e01f      	b.n	8004026 <mux_select_pin+0x4e>
		if(pin & (1 << i)){
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	fa42 f303 	asr.w	r3, r2, r3
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <mux_select_pin+0x34>
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_SET);
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <mux_select_pin+0x74>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2201      	movs	r2, #1
 8004002:	4619      	mov	r1, r3
 8004004:	4812      	ldr	r0, [pc, #72]	; (8004050 <mux_select_pin+0x78>)
 8004006:	f005 f9f7 	bl	80093f8 <HAL_GPIO_WritePin>
 800400a:	e009      	b.n	8004020 <mux_select_pin+0x48>
		}
		else{
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_RESET);
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <mux_select_pin+0x74>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	b29b      	uxth	r3, r3
 8004016:	2200      	movs	r2, #0
 8004018:	4619      	mov	r1, r3
 800401a:	480d      	ldr	r0, [pc, #52]	; (8004050 <mux_select_pin+0x78>)
 800401c:	f005 f9ec 	bl	80093f8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++){
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b02      	cmp	r3, #2
 800402a:	dddc      	ble.n	8003fe6 <mux_select_pin+0xe>
		}
	}

	for(int i=0; i < 30000; i++){}
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	e002      	b.n	8004038 <mux_select_pin+0x60>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3301      	adds	r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f247 522f 	movw	r2, #29999	; 0x752f
 800403e:	4293      	cmp	r3, r2
 8004040:	ddf7      	ble.n	8004032 <mux_select_pin+0x5a>
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	0801897c 	.word	0x0801897c
 8004050:	58020400 	.word	0x58020400

08004054 <mux_pull_values>:


void mux_pull_values(float *randomness, float *halls, float *fc, float *vari, int i){
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]

	mux_select_pin(i);
 8004062:	69b8      	ldr	r0, [r7, #24]
 8004064:	f7ff ffb8 	bl	8003fd8 <mux_select_pin>
//	fc[0] = ADC_values[0]; fc[1] = ADC_values[1]; fc[2] = ADC_values[2];
//	vari[0] = ADC_values[3]; vari[1] = ADC_values[4]; vari[2] = ADC_values[5];
	/////////////////

	//test with halls
	fc[i] = ADC_values[6];
 8004068:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <mux_pull_values+0x84>)
 800406a:	8999      	ldrh	r1, [r3, #12]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	ee07 1a90 	vmov	s15, r1
 8004078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407c:	edc3 7a00 	vstr	s15, [r3]
	vari[i] = ADC_values[7];
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <mux_pull_values+0x84>)
 8004082:	89d9      	ldrh	r1, [r3, #14]
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4413      	add	r3, r2
 800408c:	ee07 1a90 	vmov	s15, r1
 8004090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004094:	edc3 7a00 	vstr	s15, [r3]
	halls[i] = ADC_values[8];
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <mux_pull_values+0x84>)
 800409a:	8a19      	ldrh	r1, [r3, #16]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	4413      	add	r3, r2
 80040a4:	ee07 1a90 	vmov	s15, r1
 80040a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ac:	edc3 7a00 	vstr	s15, [r3]
	halls[i + 8] = ADC_values[9];
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <mux_pull_values+0x84>)
 80040b2:	8a59      	ldrh	r1, [r3, #18]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	3308      	adds	r3, #8
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4413      	add	r3, r2
 80040be:	ee07 1a90 	vmov	s15, r1
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	edc3 7a00 	vstr	s15, [r3]
	/////////////////

	randomness = ADC_values[0];
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <mux_pull_values+0x84>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	30000440 	.word	0x30000440

080040dc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <MX_USART6_UART_Init+0x90>)
 80040e2:	4a23      	ldr	r2, [pc, #140]	; (8004170 <MX_USART6_UART_Init+0x94>)
 80040e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <MX_USART6_UART_Init+0x90>)
 80040e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	; (800416c <MX_USART6_UART_Init+0x90>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <MX_USART6_UART_Init+0x90>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80040fa:	4b1c      	ldr	r3, [pc, #112]	; (800416c <MX_USART6_UART_Init+0x90>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004102:	2204      	movs	r2, #4
 8004104:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004106:	4b19      	ldr	r3, [pc, #100]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <MX_USART6_UART_Init+0x90>)
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004114:	2200      	movs	r2, #0
 8004116:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <MX_USART6_UART_Init+0x90>)
 800411a:	2200      	movs	r2, #0
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004124:	4811      	ldr	r0, [pc, #68]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004126:	f00e fc7d 	bl	8012a24 <HAL_UART_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8004130:	f7fe ff4e 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004134:	2100      	movs	r1, #0
 8004136:	480d      	ldr	r0, [pc, #52]	; (800416c <MX_USART6_UART_Init+0x90>)
 8004138:	f00f fc7f 	bl	8013a3a <HAL_UARTEx_SetTxFifoThreshold>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8004142:	f7fe ff45 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004146:	2100      	movs	r1, #0
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <MX_USART6_UART_Init+0x90>)
 800414a:	f00f fcb4 	bl	8013ab6 <HAL_UARTEx_SetRxFifoThreshold>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004154:	f7fe ff3c 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <MX_USART6_UART_Init+0x90>)
 800415a:	f00f fc35 	bl	80139c8 <HAL_UARTEx_DisableFifoMode>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004164:	f7fe ff34 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20001d90 	.word	0x20001d90
 8004170:	40011400 	.word	0x40011400

08004174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0bc      	sub	sp, #240	; 0xf0
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800418c:	f107 0318 	add.w	r3, r7, #24
 8004190:	22c0      	movs	r2, #192	; 0xc0
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f013 fa1d 	bl	80175d4 <memset>
  if(uartHandle->Instance==USART6)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_UART_MspInit+0x110>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d16a      	bne.n	800427a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80041a4:	f04f 0201 	mov.w	r2, #1
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041b6:	f107 0318 	add.w	r3, r7, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f008 faa6 	bl	800c70c <HAL_RCCEx_PeriphCLKConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041c6:	f7fe ff03 	bl	8002fd0 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d0:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041d2:	f043 0320 	orr.w	r3, r3, #32
 80041d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041da:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e8:	4b27      	ldr	r3, [pc, #156]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <HAL_UART_MspInit+0x114>)
 80041fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_UART_MspInit+0x114>)
 8004208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_UART_MspInit+0x114>)
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_UART_MspInit+0x114>)
 8004218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422a:	2302      	movs	r3, #2
 800422c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800423c:	2307      	movs	r3, #7
 800423e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004242:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004246:	4619      	mov	r1, r3
 8004248:	4810      	ldr	r0, [pc, #64]	; (800428c <HAL_UART_MspInit+0x118>)
 800424a:	f004 ff0d 	bl	8009068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800424e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004268:	2307      	movs	r3, #7
 800426a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800426e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004272:	4619      	mov	r1, r3
 8004274:	4806      	ldr	r0, [pc, #24]	; (8004290 <HAL_UART_MspInit+0x11c>)
 8004276:	f004 fef7 	bl	8009068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800427a:	bf00      	nop
 800427c:	37f0      	adds	r7, #240	; 0xf0
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40011400 	.word	0x40011400
 8004288:	58024400 	.word	0x58024400
 800428c:	58020800 	.word	0x58020800
 8004290:	58021800 	.word	0x58021800

08004294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004298:	2201      	movs	r2, #1
 800429a:	490f      	ldr	r1, [pc, #60]	; (80042d8 <MX_USB_HOST_Init+0x44>)
 800429c:	480f      	ldr	r0, [pc, #60]	; (80042dc <MX_USB_HOST_Init+0x48>)
 800429e:	f011 fb73 	bl	8015988 <USBH_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80042a8:	f7fe fe92 	bl	8002fd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 80042ac:	490c      	ldr	r1, [pc, #48]	; (80042e0 <MX_USB_HOST_Init+0x4c>)
 80042ae:	480b      	ldr	r0, [pc, #44]	; (80042dc <MX_USB_HOST_Init+0x48>)
 80042b0:	f011 fc19 	bl	8015ae6 <USBH_RegisterClass>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80042ba:	f7fe fe89 	bl	8002fd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80042be:	4807      	ldr	r0, [pc, #28]	; (80042dc <MX_USB_HOST_Init+0x48>)
 80042c0:	f011 fc9e 	bl	8015c00 <USBH_Start>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80042ca:	f7fe fe81 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80042ce:	f007 fa27 	bl	800b720 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	30000460 	.word	0x30000460
 80042e0:	20000024 	.word	0x20000024

080042e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80042e8:	4803      	ldr	r0, [pc, #12]	; (80042f8 <MX_USB_HOST_Process+0x14>)
 80042ea:	f011 fcb5 	bl	8015c58 <USBH_Process>
  MIDI_Application();
 80042ee:	f7fc fd8b 	bl	8000e08 <MIDI_Application>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	30000460 	.word	0x30000460

080042fc <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	3b01      	subs	r3, #1
 800430c:	2b04      	cmp	r3, #4
 800430e:	d839      	bhi.n	8004384 <USBH_UserProcess+0x88>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <USBH_UserProcess+0x1c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004385 	.word	0x08004385
 800431c:	0800436f 	.word	0x0800436f
 8004320:	08004385 	.word	0x08004385
 8004324:	0800437d 	.word	0x0800437d
 8004328:	0800432d 	.word	0x0800432d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <USBH_UserProcess+0x94>)
 800432e:	2203      	movs	r2, #3
 8004330:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 8004332:	4818      	ldr	r0, [pc, #96]	; (8004394 <USBH_UserProcess+0x98>)
 8004334:	f011 fc74 	bl	8015c20 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e007      	b.n	800434e <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 800433e:	4a16      	ldr	r2, [pc, #88]	; (8004398 <USBH_UserProcess+0x9c>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3301      	adds	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b3f      	cmp	r3, #63	; 0x3f
 8004352:	ddf4      	ble.n	800433e <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8004354:	2201      	movs	r2, #1
 8004356:	4911      	ldr	r1, [pc, #68]	; (800439c <USBH_UserProcess+0xa0>)
 8004358:	480e      	ldr	r0, [pc, #56]	; (8004394 <USBH_UserProcess+0x98>)
 800435a:	f011 fb15 	bl	8015988 <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 800435e:	4910      	ldr	r1, [pc, #64]	; (80043a0 <USBH_UserProcess+0xa4>)
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <USBH_UserProcess+0x98>)
 8004362:	f011 fbc0 	bl	8015ae6 <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 8004366:	480b      	ldr	r0, [pc, #44]	; (8004394 <USBH_UserProcess+0x98>)
 8004368:	f011 fc4a 	bl	8015c00 <USBH_Start>
	break;
 800436c:	e00b      	b.n	8004386 <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <USBH_UserProcess+0x94>)
 8004370:	2202      	movs	r2, #2
 8004372:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <USBH_UserProcess+0xa8>)
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
  break;
 800437a:	e004      	b.n	8004386 <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <USBH_UserProcess+0x94>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
  break;
 8004382:	e000      	b.n	8004386 <USBH_UserProcess+0x8a>

  default:
  break;
 8004384:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20001e24 	.word	0x20001e24
 8004394:	30000460 	.word	0x30000460
 8004398:	30000000 	.word	0x30000000
 800439c:	080042fd 	.word	0x080042fd
 80043a0:	20000024 	.word	0x20000024
 80043a4:	20000000 	.word	0x20000000

080043a8 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af04      	add	r7, sp, #16
 80043ae:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 80043b0:	2302      	movs	r3, #2
 80043b2:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 80043b8:	23ff      	movs	r3, #255	; 0xff
 80043ba:	2203      	movs	r2, #3
 80043bc:	2101      	movs	r1, #1
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f011 fbd8 	bl	8015b74 <USBH_FindInterface>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 80043c8:	7bbb      	ldrb	r3, [r7, #14]
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d102      	bne.n	80043d4 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 80043ce:	2302      	movs	r3, #2
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e0f2      	b.n	80045ba <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 80043d4:	7bbb      	ldrb	r3, [r7, #14]
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f011 fbaf 	bl	8015b3c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80043e4:	201c      	movs	r0, #28
 80043e6:	f013 f839 	bl	801745c <malloc>
 80043ea:	4603      	mov	r3, r0
 80043ec:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80043fe:	4619      	mov	r1, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	231a      	movs	r3, #26
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b25b      	sxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	da1c      	bge.n	8004450 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800441c:	4619      	mov	r1, r3
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	231a      	movs	r3, #26
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004438:	4619      	mov	r1, r3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	231a      	movs	r3, #26
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	811a      	strh	r2, [r3, #8]
 800444e:	e01b      	b.n	8004488 <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004456:	4619      	mov	r1, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	231a      	movs	r3, #26
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004472:	4619      	mov	r1, r3
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	231a      	movs	r3, #26
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800448e:	4619      	mov	r1, r3
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	231a      	movs	r3, #26
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b25b      	sxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da1c      	bge.n	80044e0 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80044ac:	4619      	mov	r1, r3
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	231a      	movs	r3, #26
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80044c8:	4619      	mov	r1, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	231a      	movs	r3, #26
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	811a      	strh	r2, [r3, #8]
 80044de:	e01b      	b.n	8004518 <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80044e6:	4619      	mov	r1, r3
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	231a      	movs	r3, #26
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004502:	4619      	mov	r1, r3
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	231a      	movs	r3, #26
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004512:	881a      	ldrh	r2, [r3, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f012 fed9 	bl	80172d6 <USBH_AllocPipe>
 8004524:	4603      	mov	r3, r0
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f012 fecf 	bl	80172d6 <USBH_AllocPipe>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	7899      	ldrb	r1, [r3, #2]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	78d8      	ldrb	r0, [r3, #3]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	88d2      	ldrh	r2, [r2, #6]
 8004558:	9202      	str	r2, [sp, #8]
 800455a:	2202      	movs	r2, #2
 800455c:	9201      	str	r2, [sp, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4623      	mov	r3, r4
 8004562:	4602      	mov	r2, r0
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f012 fe87 	bl	8017278 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	7859      	ldrb	r1, [r3, #1]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	7918      	ldrb	r0, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	8912      	ldrh	r2, [r2, #8]
 8004582:	9202      	str	r2, [sp, #8]
 8004584:	2202      	movs	r2, #2
 8004586:	9201      	str	r2, [sp, #4]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4623      	mov	r3, r4
 800458c:	4602      	mov	r2, r0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f012 fe72 	bl	8017278 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2200      	movs	r2, #0
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fbf6 	bl	8004d94 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	789b      	ldrb	r3, [r3, #2]
 80045ac:	2200      	movs	r2, #0
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fbef 	bl	8004d94 <USBH_LL_SetToggle>
		status = USBH_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd90      	pop	{r4, r7, pc}

080045c4 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	789b      	ldrb	r3, [r3, #2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	789b      	ldrb	r3, [r3, #2]
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f012 fe66 	bl	80172b6 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	789b      	ldrb	r3, [r3, #2]
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f012 fe92 	bl	801731a <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f012 fe53 	bl	80172b6 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f012 fe7f 	bl	801731a <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4618      	mov	r0, r3
 8004638:	f012 ff18 	bl	801746c <free>
		phost->pActiveClass->pData = 0;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800465e:	2102      	movs	r1, #2
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3

	return USBH_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b0b      	cmp	r3, #11
 8004688:	d10e      	bne.n	80046a8 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f012 fe0d 	bl	80172b6 <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	789b      	ldrb	r3, [r3, #2]
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f012 fe07 	bl	80172b6 <USBH_ClosePipe>
  }
  return USBH_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d012      	beq.n	80046fa <USBH_MIDI_Process+0x48>
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	dc1d      	bgt.n	8004714 <USBH_MIDI_Process+0x62>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <USBH_MIDI_Process+0x30>
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d003      	beq.n	80046e8 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80046e0:	e018      	b.n	8004714 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
		break;
 80046e6:	e018      	b.n	800471a <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f851 	bl	8004790 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8c0 	bl	8004874 <MIDI_ProcessReception>
		status = USBH_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
		break;
 80046f8:	e00f      	b.n	800471a <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 80046fa:	2100      	movs	r1, #0
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f012 f837 	bl	8016770 <USBH_ClrFeature>
 8004702:	4603      	mov	r3, r0
 8004704:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
		break;
 8004712:	e001      	b.n	8004718 <USBH_MIDI_Process+0x66>
		break;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <USBH_MIDI_Process+0x68>
		break;
 8004718:	bf00      	nop

	}

	return status;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <USBH_MIDI_Receive+0x2c>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10d      	bne.n	8004782 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2203      	movs	r2, #3
 800477c:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	7e1b      	ldrb	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <MIDI_ProcessTransmission+0x24>
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d021      	beq.n	80047f6 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80047b2:	e05a      	b.n	800486a <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8a9a      	ldrh	r2, [r3, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	88db      	ldrh	r3, [r3, #6]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d90b      	bls.n	80047d8 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68d9      	ldr	r1, [r3, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88da      	ldrh	r2, [r3, #6]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	789b      	ldrb	r3, [r3, #2]
 80047cc:	2001      	movs	r0, #1
 80047ce:	9000      	str	r0, [sp, #0]
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f012 fd0e 	bl	80171f2 <USBH_BulkSendData>
 80047d6:	e00a      	b.n	80047ee <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68d9      	ldr	r1, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8a9a      	ldrh	r2, [r3, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	789b      	ldrb	r3, [r3, #2]
 80047e4:	2001      	movs	r0, #1
 80047e6:	9000      	str	r0, [sp, #0]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f012 fd02 	bl	80171f2 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2202      	movs	r2, #2
 80047f2:	761a      	strb	r2, [r3, #24]
		break;
 80047f4:	e039      	b.n	800486a <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fa9f 	bl	8004d40 <USBH_LL_GetURBState>
 8004802:	4603      	mov	r3, r0
 8004804:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d127      	bne.n	800485c <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8a9a      	ldrh	r2, [r3, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88db      	ldrh	r3, [r3, #6]
 8004814:	429a      	cmp	r2, r3
 8004816:	d90f      	bls.n	8004838 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8a9a      	ldrh	r2, [r3, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88db      	ldrh	r3, [r3, #6]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	88d2      	ldrh	r2, [r2, #6]
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	e002      	b.n	800483e <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8a9b      	ldrh	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	761a      	strb	r2, [r3, #24]
		break;
 800484c:	e00c      	b.n	8004868 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f86d 	bl	8004934 <USBH_MIDI_TransmitCallback>
		break;
 800485a:	e005      	b.n	8004868 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 800485c:	7afb      	ldrb	r3, [r7, #11]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d102      	bne.n	8004868 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	761a      	strb	r2, [r3, #24]
		break;
 8004868:	bf00      	nop
	}
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004886:	2300      	movs	r3, #0
 8004888:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	7e5b      	ldrb	r3, [r3, #25]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d002      	beq.n	8004898 <MIDI_ProcessReception+0x24>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d00d      	beq.n	80048b2 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8004896:	e047      	b.n	8004928 <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2204      	movs	r2, #4
 800489c:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	891a      	ldrh	r2, [r3, #8]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f012 fcc6 	bl	801723c <USBH_BulkReceiveData>
		break;
 80048b0:	e03a      	b.n	8004928 <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa41 	bl	8004d40 <USBH_LL_GetURBState>
 80048be:	4603      	mov	r3, r0
 80048c0:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d12e      	bne.n	8004926 <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <MIDI_ProcessReception+0xbc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	785b      	ldrb	r3, [r3, #1]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9a1 	bl	8004c1c <USBH_LL_GetLastXferSize>
 80048da:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	8adb      	ldrh	r3, [r3, #22]
 80048e0:	461a      	mov	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d017      	beq.n	8004918 <MIDI_ProcessReception+0xa4>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	891b      	ldrh	r3, [r3, #8]
 80048ec:	461a      	mov	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d911      	bls.n	8004918 <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	8ada      	ldrh	r2, [r3, #22]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b29a      	uxth	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	441a      	add	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2203      	movs	r2, #3
 8004914:	765a      	strb	r2, [r3, #25]
		break;
 8004916:	e006      	b.n	8004926 <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2200      	movs	r2, #0
 800491c:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc fc11 	bl	8001148 <USBH_MIDI_ReceiveCallback>
		break;
 8004926:	bf00      	nop
	}
}
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20001e28 	.word	0x20001e28

08004934 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <HAL_HCD_MspInit+0xb8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d146      	bne.n	80049f8 <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 800496c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004970:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 800497c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004988:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800498c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498e:	2302      	movs	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004996:	2303      	movs	r3, #3
 8004998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800499a:	230a      	movs	r3, #10
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	4619      	mov	r1, r3
 80049a4:	4818      	ldr	r0, [pc, #96]	; (8004a08 <HAL_HCD_MspInit+0xc0>)
 80049a6:	f004 fb5f 	bl	8009068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80049aa:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 80049ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 80049b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_HCD_MspInit+0xbc>)
 80049bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2106      	movs	r1, #6
 80049cc:	2062      	movs	r0, #98	; 0x62
 80049ce:	f002 f9b6 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80049d2:	2062      	movs	r0, #98	; 0x62
 80049d4:	f002 f9cd 	bl	8006d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 80049d8:	2200      	movs	r2, #0
 80049da:	2106      	movs	r1, #6
 80049dc:	2063      	movs	r0, #99	; 0x63
 80049de:	f002 f9ae 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80049e2:	2063      	movs	r0, #99	; 0x63
 80049e4:	f002 f9c5 	bl	8006d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80049e8:	2200      	movs	r2, #0
 80049ea:	2100      	movs	r1, #0
 80049ec:	2065      	movs	r0, #101	; 0x65
 80049ee:	f002 f9a6 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80049f2:	2065      	movs	r0, #101	; 0x65
 80049f4:	f002 f9bd 	bl	8006d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80049f8:	bf00      	nop
 80049fa:	3728      	adds	r7, #40	; 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40080000 	.word	0x40080000
 8004a04:	58024400 	.word	0x58024400
 8004a08:	58020000 	.word	0x58020000

08004a0c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f011 fcfd 	bl	801641a <USBH_LL_IncTimer>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a36:	4618      	mov	r0, r3
 8004a38:	f011 fd35 	bl	80164a6 <USBH_LL_Connect>
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a52:	4618      	mov	r0, r3
 8004a54:	f011 fd3e 	bl	80164d4 <USBH_LL_Disconnect>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f011 fcef 	bl	801646e <USBH_LL_PortEnabled>
} 
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f011 fcef 	bl	801648a <USBH_LL_PortDisabled>
} 
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d129      	bne.n	8004b1a <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004ac6:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <USBH_LL_Init+0x70>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <USBH_LL_Init+0x70>)
 8004ad2:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <USBH_LL_Init+0x70>)
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <USBH_LL_Init+0x74>)
 8004ada:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <USBH_LL_Init+0x70>)
 8004ade:	2210      	movs	r2, #16
 8004ae0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <USBH_LL_Init+0x70>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <USBH_LL_Init+0x70>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <USBH_LL_Init+0x70>)
 8004af0:	2202      	movs	r2, #2
 8004af2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <USBH_LL_Init+0x70>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004afa:	480a      	ldr	r0, [pc, #40]	; (8004b24 <USBH_LL_Init+0x70>)
 8004afc:	f004 fc95 	bl	800942a <HAL_HCD_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8004b06:	f7fe fa63 	bl	8002fd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004b0a:	4806      	ldr	r0, [pc, #24]	; (8004b24 <USBH_LL_Init+0x70>)
 8004b0c:	f005 f87d 	bl	8009c0a <HAL_HCD_GetCurrentFrame>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f011 fc71 	bl	80163fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20001e2c 	.word	0x20001e2c
 8004b28:	40080000 	.word	0x40080000

08004b2c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 ffeb 	bl	8009b1e <HAL_HCD_Start>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f95c 	bl	8004e0c <USBH_Get_USB_Status>
 8004b54:	4603      	mov	r3, r0
 8004b56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f004 fff3 	bl	8009b64 <HAL_HCD_Stop>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f941 	bl	8004e0c <USBH_Get_USB_Status>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f005 f83b 	bl	8009c26 <HAL_HCD_GetCurrentSpeed>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d00c      	beq.n	8004bd0 <USBH_LL_GetSpeed+0x38>
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d80d      	bhi.n	8004bd6 <USBH_LL_GetSpeed+0x3e>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <USBH_LL_GetSpeed+0x2c>
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d003      	beq.n	8004bca <USBH_LL_GetSpeed+0x32>
 8004bc2:	e008      	b.n	8004bd6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8004bc8:	e008      	b.n	8004bdc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8004bce:	e005      	b.n	8004bdc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8004bd4:	e002      	b.n	8004bdc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8004bda:	bf00      	nop
  }
  return  speed;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f004 ffce 	bl	8009b9e <HAL_HCD_ResetPort>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f8ff 	bl	8004e0c <USBH_Get_USB_Status>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f004 ffd5 	bl	8009be2 <HAL_HCD_HC_GetXferCount>
 8004c38:	4603      	mov	r3, r0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004c42:	b590      	push	{r4, r7, lr}
 8004c44:	b089      	sub	sp, #36	; 0x24
 8004c46:	af04      	add	r7, sp, #16
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4603      	mov	r3, r0
 8004c52:	70fb      	strb	r3, [r7, #3]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70bb      	strb	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004c6a:	787c      	ldrb	r4, [r7, #1]
 8004c6c:	78ba      	ldrb	r2, [r7, #2]
 8004c6e:	78f9      	ldrb	r1, [r7, #3]
 8004c70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	4623      	mov	r3, r4
 8004c82:	f004 fc34 	bl	80094ee <HAL_HCD_HC_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f8bd 	bl	8004e0c <USBH_Get_USB_Status>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f004 fca4 	bl	800960c <HAL_HCD_HC_Halt>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 f89e 	bl	8004e0c <USBH_Get_USB_Status>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004cde:	b590      	push	{r4, r7, lr}
 8004ce0:	b089      	sub	sp, #36	; 0x24
 8004ce2:	af04      	add	r7, sp, #16
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	461a      	mov	r2, r3
 8004cec:	4603      	mov	r3, r0
 8004cee:	70fb      	strb	r3, [r7, #3]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70bb      	strb	r3, [r7, #2]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8004d06:	787c      	ldrb	r4, [r7, #1]
 8004d08:	78ba      	ldrb	r2, [r7, #2]
 8004d0a:	78f9      	ldrb	r1, [r7, #3]
 8004d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d10:	9303      	str	r3, [sp, #12]
 8004d12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d14:	9302      	str	r3, [sp, #8]
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4623      	mov	r3, r4
 8004d22:	f004 fc97 	bl	8009654 <HAL_HCD_HC_SubmitRequest>
 8004d26:	4603      	mov	r3, r0
 8004d28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f86d 	bl	8004e0c <USBH_Get_USB_Status>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd90      	pop	{r4, r7, pc}

08004d40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4611      	mov	r1, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f004 ff2f 	bl	8009bba <HAL_HCD_HC_GetURBState>
 8004d5c:	4603      	mov	r3, r0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d103      	bne.n	8004d84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 f870 	bl	8004e64 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004d84:	20c8      	movs	r0, #200	; 0xc8
 8004d86:	f000 f945 	bl	8005014 <HAL_Delay>
  return USBH_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
 8004da0:	4613      	mov	r3, r2
 8004da2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004daa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	212c      	movs	r1, #44	; 0x2c
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	333b      	adds	r3, #59	; 0x3b
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	212c      	movs	r1, #44	; 0x2c
 8004dc6:	fb01 f303 	mul.w	r3, r1, r3
 8004dca:	4413      	add	r3, r2
 8004dcc:	3354      	adds	r3, #84	; 0x54
 8004dce:	78ba      	ldrb	r2, [r7, #2]
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e008      	b.n	8004de6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	212c      	movs	r1, #44	; 0x2c
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3355      	adds	r3, #85	; 0x55
 8004de2:	78ba      	ldrb	r2, [r7, #2]
 8004de4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f909 	bl	8005014 <HAL_Delay>
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d817      	bhi.n	8004e50 <USBH_Get_USB_Status+0x44>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <USBH_Get_USB_Status+0x1c>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e3f 	.word	0x08004e3f
 8004e30:	08004e45 	.word	0x08004e45
 8004e34:	08004e4b 	.word	0x08004e4b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e3c:	e00b      	b.n	8004e56 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	73fb      	strb	r3, [r7, #15]
    break;
 8004e42:	e008      	b.n	8004e56 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
    break;
 8004e48:	e005      	b.n	8004e56 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8004e4e:	e002      	b.n	8004e56 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004e50:	2302      	movs	r3, #2
 8004e52:	73fb      	strb	r3, [r7, #15]
    break;
 8004e54:	bf00      	nop
  }
  return usb_status;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e001      	b.n	8004e82 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	461a      	mov	r2, r3
 8004e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e8a:	4803      	ldr	r0, [pc, #12]	; (8004e98 <MX_DriverVbusFS+0x34>)
 8004e8c:	f004 fab4 	bl	80093f8 <HAL_GPIO_WritePin>
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	58020400 	.word	0x58020400

08004e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ed4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ea0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ea2:	e003      	b.n	8004eac <LoopCopyDataInit>

08004ea4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ea6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ea8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004eaa:	3104      	adds	r1, #4

08004eac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004eac:	480b      	ldr	r0, [pc, #44]	; (8004edc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004eb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004eb4:	d3f6      	bcc.n	8004ea4 <CopyDataInit>
  ldr  r2, =_sbss
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004eb8:	e002      	b.n	8004ec0 <LoopFillZerobss>

08004eba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004eba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ebc:	f842 3b04 	str.w	r3, [r2], #4

08004ec0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ec2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ec4:	d3f9      	bcc.n	8004eba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ec6:	f7fe fd5b 	bl	8003980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eca:	f012 fba1 	bl	8017610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ece:	f7fd fdfd 	bl	8002acc <main>
  bx  lr    
 8004ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ed4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ed8:	0801a458 	.word	0x0801a458
  ldr  r0, =_sdata
 8004edc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ee0:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8004ee4:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8004ee8:	20002288 	.word	0x20002288

08004eec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <ADC3_IRQHandler>
	...

08004ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	f001 ff16 	bl	8006d28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004efc:	f007 fa30 	bl	800c360 <HAL_RCC_GetSysClockFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_Init+0x68>)
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	4913      	ldr	r1, [pc, #76]	; (8004f5c <HAL_Init+0x6c>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
 8004f18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_Init+0x68>)
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <HAL_Init+0x6c>)
 8004f24:	5cd3      	ldrb	r3, [r2, r3]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <HAL_Init+0x70>)
 8004f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <HAL_Init+0x74>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f000 f814 	bl	8004f68 <HAL_InitTick>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e002      	b.n	8004f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f4a:	f7fe fc5f 	bl	800380c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	0801896c 	.word	0x0801896c
 8004f60:	20000020 	.word	0x20000020
 8004f64:	2000001c 	.word	0x2000001c

08004f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004f70:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_InitTick+0x60>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e021      	b.n	8004fc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_InitTick+0x64>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_InitTick+0x60>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4619      	mov	r1, r3
 8004f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fefb 	bl	8006d8e <HAL_SYSTICK_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e00e      	b.n	8004fc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d80a      	bhi.n	8004fbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa8:	2200      	movs	r2, #0
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb0:	f001 fec5 	bl	8006d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fb4:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <HAL_InitTick+0x68>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e000      	b.n	8004fc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000048 	.word	0x20000048
 8004fcc:	2000001c 	.word	0x2000001c
 8004fd0:	20000044 	.word	0x20000044

08004fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_IncTick+0x20>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_IncTick+0x24>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <HAL_IncTick+0x24>)
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000048 	.word	0x20000048
 8004ff8:	20002130 	.word	0x20002130

08004ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8005000:	4b03      	ldr	r3, [pc, #12]	; (8005010 <HAL_GetTick+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20002130 	.word	0x20002130

08005014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800501c:	f7ff ffee 	bl	8004ffc <HAL_GetTick>
 8005020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502c:	d005      	beq.n	800503a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <HAL_Delay+0x44>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800503a:	bf00      	nop
 800503c:	f7ff ffde 	bl	8004ffc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	429a      	cmp	r2, r3
 800504a:	d8f7      	bhi.n	800503c <HAL_Delay+0x28>
  {
  }
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000048 	.word	0x20000048

0800505c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_GetREVID+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0c1b      	lsrs	r3, r3, #16
}
 8005066:	4618      	mov	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	5c001000 	.word	0x5c001000

08005074 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_SetFMCMemorySwappingConfig+0x24>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005084:	4904      	ldr	r1, [pc, #16]	; (8005098 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	52004000 	.word	0x52004000

0800509c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3360      	adds	r3, #96	; 0x60
 8005116:	461a      	mov	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	430b      	orrs	r3, r1
 8005132:	431a      	orrs	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	611a      	str	r2, [r3, #16]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3360      	adds	r3, #96	; 0x60
 8005186:	461a      	mov	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	431a      	orrs	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	601a      	str	r2, [r3, #0]
  }
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b087      	sub	sp, #28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3330      	adds	r3, #48	; 0x30
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	4413      	add	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	211f      	movs	r1, #31
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	401a      	ands	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0e9b      	lsrs	r3, r3, #26
 800520a:	f003 011f 	and.w	r1, r3, #31
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa01 f303 	lsl.w	r3, r1, r3
 8005218:	431a      	orrs	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f023 0203 	bic.w	r2, r3, #3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3314      	adds	r3, #20
 8005286:	461a      	mov	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	0e5b      	lsrs	r3, r3, #25
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	0d1b      	lsrs	r3, r3, #20
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	2107      	movs	r1, #7
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0d1b      	lsrs	r3, r3, #20
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0318 	and.w	r3, r3, #24
 80052ee:	4908      	ldr	r1, [pc, #32]	; (8005310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052f0:	40d9      	lsrs	r1, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	400b      	ands	r3, r1
 80052f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	000fffff 	.word	0x000fffff

08005314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 031f 	and.w	r3, r3, #31
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <LL_ADC_DisableDeepPowerDown+0x20>)
 800535a:	4013      	ands	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6093      	str	r3, [r2, #8]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	5fffffc0 	.word	0x5fffffc0

08005370 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005384:	d101      	bne.n	800538a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <LL_ADC_EnableInternalRegulator+0x24>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	6fffffc0 	.word	0x6fffffc0

080053c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d4:	d101      	bne.n	80053da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <LL_ADC_Enable+0x24>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	f043 0201 	orr.w	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	7fffffc0 	.word	0x7fffffc0

08005410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <LL_ADC_IsEnabled+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_ADC_IsEnabled+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <LL_ADC_REG_StartConversion+0x24>)
 8005446:	4013      	ands	r3, r2
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	7fffffc0 	.word	0x7fffffc0

08005460 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b04      	cmp	r3, #4
 8005472:	d101      	bne.n	8005478 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d101      	bne.n	800549e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e18f      	b.n	80057e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fc f807 	bl	80014e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ff3f 	bl	8005370 <LL_ADC_IsDeepPowerDownEnabled>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff25 	bl	800534c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff5a 	bl	80053c0 <LL_ADC_IsInternalRegulatorEnabled>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d114      	bne.n	800553c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ff3e 	bl	8005398 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800551c:	4b87      	ldr	r3, [pc, #540]	; (800573c <HAL_ADC_Init+0x290>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	4a87      	ldr	r2, [pc, #540]	; (8005740 <HAL_ADC_Init+0x294>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	099b      	lsrs	r3, r3, #6
 800552a:	3301      	adds	r3, #1
 800552c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800552e:	e002      	b.n	8005536 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f9      	bne.n	8005530 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff3d 	bl	80053c0 <LL_ADC_IsInternalRegulatorEnabled>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10d      	bne.n	8005568 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	f043 0210 	orr.w	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	f043 0201 	orr.w	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff77 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 8005572:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	f040 8129 	bne.w	80057d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 8125 	bne.w	80057d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff36 	bl	8005410 <LL_ADC_IsEnabled>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d136      	bne.n	8005618 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a65      	ldr	r2, [pc, #404]	; (8005744 <HAL_ADC_Init+0x298>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_ADC_Init+0x112>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a63      	ldr	r2, [pc, #396]	; (8005748 <HAL_ADC_Init+0x29c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10e      	bne.n	80055dc <HAL_ADC_Init+0x130>
 80055be:	4861      	ldr	r0, [pc, #388]	; (8005744 <HAL_ADC_Init+0x298>)
 80055c0:	f7ff ff26 	bl	8005410 <LL_ADC_IsEnabled>
 80055c4:	4604      	mov	r4, r0
 80055c6:	4860      	ldr	r0, [pc, #384]	; (8005748 <HAL_ADC_Init+0x29c>)
 80055c8:	f7ff ff22 	bl	8005410 <LL_ADC_IsEnabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4323      	orrs	r3, r4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	e008      	b.n	80055ee <HAL_ADC_Init+0x142>
 80055dc:	485b      	ldr	r0, [pc, #364]	; (800574c <HAL_ADC_Init+0x2a0>)
 80055de:	f7ff ff17 	bl	8005410 <LL_ADC_IsEnabled>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d012      	beq.n	8005618 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a53      	ldr	r2, [pc, #332]	; (8005744 <HAL_ADC_Init+0x298>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_ADC_Init+0x15a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a51      	ldr	r2, [pc, #324]	; (8005748 <HAL_ADC_Init+0x29c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d101      	bne.n	800560a <HAL_ADC_Init+0x15e>
 8005606:	4a52      	ldr	r2, [pc, #328]	; (8005750 <HAL_ADC_Init+0x2a4>)
 8005608:	e000      	b.n	800560c <HAL_ADC_Init+0x160>
 800560a:	4a52      	ldr	r2, [pc, #328]	; (8005754 <HAL_ADC_Init+0x2a8>)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7ff fd42 	bl	800509c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005618:	f7ff fd20 	bl	800505c <HAL_GetREVID>
 800561c:	4603      	mov	r3, r0
 800561e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005622:	4293      	cmp	r3, r2
 8005624:	d914      	bls.n	8005650 <HAL_ADC_Init+0x1a4>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b10      	cmp	r3, #16
 800562c:	d110      	bne.n	8005650 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7d5b      	ldrb	r3, [r3, #21]
 8005632:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005638:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800563e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7f1b      	ldrb	r3, [r3, #28]
 8005644:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005646:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005648:	f043 030c 	orr.w	r3, r3, #12
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e00d      	b.n	800566c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	7d5b      	ldrb	r3, [r3, #21]
 8005654:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800565a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005660:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	7f1b      	ldrb	r3, [r3, #28]
 8005666:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7f1b      	ldrb	r3, [r3, #28]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	3b01      	subs	r3, #1
 800567a:	045b      	lsls	r3, r3, #17
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	4b2c      	ldr	r3, [pc, #176]	; (8005758 <HAL_ADC_Init+0x2ac>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fed2 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 80056bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff fedf 	bl	8005486 <LL_ADC_INJ_IsConversionOngoing>
 80056c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d15f      	bne.n	8005790 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d15c      	bne.n	8005790 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7d1b      	ldrb	r3, [r3, #20]
 80056da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <HAL_ADC_Init+0x2b0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	69b9      	ldr	r1, [r7, #24]
 80056f4:	430b      	orrs	r3, r1
 80056f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d130      	bne.n	8005764 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <HAL_ADC_Init+0x2b4>)
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005716:	3a01      	subs	r2, #1
 8005718:	0411      	lsls	r1, r2, #16
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800571e:	4311      	orrs	r1, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005724:	4311      	orrs	r1, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800572a:	430a      	orrs	r2, r1
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	611a      	str	r2, [r3, #16]
 8005738:	e01c      	b.n	8005774 <HAL_ADC_Init+0x2c8>
 800573a:	bf00      	nop
 800573c:	2000001c 	.word	0x2000001c
 8005740:	053e2d63 	.word	0x053e2d63
 8005744:	40022000 	.word	0x40022000
 8005748:	40022100 	.word	0x40022100
 800574c:	58026000 	.word	0x58026000
 8005750:	40022300 	.word	0x40022300
 8005754:	58026300 	.word	0x58026300
 8005758:	fff0c003 	.word	0xfff0c003
 800575c:	ffffbffc 	.word	0xffffbffc
 8005760:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 ffba 	bl	8006704 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10c      	bne.n	80057b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f023 010f 	bic.w	r1, r3, #15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
 80057b0:	e007      	b.n	80057c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 020f 	bic.w	r2, r2, #15
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
 80057d2:	e007      	b.n	80057e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0210 	orr.w	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3724      	adds	r7, #36	; 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}
 80057ee:	bf00      	nop

080057f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a55      	ldr	r2, [pc, #340]	; (8005958 <HAL_ADC_Start_DMA+0x168>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_ADC_Start_DMA+0x20>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a54      	ldr	r2, [pc, #336]	; (800595c <HAL_ADC_Start_DMA+0x16c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_ADC_Start_DMA+0x24>
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <HAL_ADC_Start_DMA+0x170>)
 8005812:	e000      	b.n	8005816 <HAL_ADC_Start_DMA+0x26>
 8005814:	4b53      	ldr	r3, [pc, #332]	; (8005964 <HAL_ADC_Start_DMA+0x174>)
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fd7c 	bl	8005314 <LL_ADC_GetMultimode>
 800581c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fe1c 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 808c 	bne.w	8005948 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_ADC_Start_DMA+0x4e>
 800583a:	2302      	movs	r3, #2
 800583c:	e087      	b.n	800594e <HAL_ADC_Start_DMA+0x15e>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b05      	cmp	r3, #5
 8005850:	d002      	beq.n	8005858 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b09      	cmp	r3, #9
 8005856:	d170      	bne.n	800593a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fe35 	bl	80064c8 <ADC_Enable>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d163      	bne.n	8005930 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <HAL_ADC_Start_DMA+0x178>)
 800586e:	4013      	ands	r3, r2
 8005870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a37      	ldr	r2, [pc, #220]	; (800595c <HAL_ADC_Start_DMA+0x16c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d002      	beq.n	8005888 <HAL_ADC_Start_DMA+0x98>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	e000      	b.n	800588a <HAL_ADC_Start_DMA+0x9a>
 8005888:	4b33      	ldr	r3, [pc, #204]	; (8005958 <HAL_ADC_Start_DMA+0x168>)
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	4293      	cmp	r3, r2
 8005890:	d002      	beq.n	8005898 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f023 0206 	bic.w	r2, r3, #6
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	659a      	str	r2, [r3, #88]	; 0x58
 80058bc:	e002      	b.n	80058c4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <HAL_ADC_Start_DMA+0x17c>)
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <HAL_ADC_Start_DMA+0x180>)
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <HAL_ADC_Start_DMA+0x184>)
 80058da:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	221c      	movs	r2, #28
 80058e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0210 	orr.w	r2, r2, #16
 80058fa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7ff fc8f 	bl	800522a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3340      	adds	r3, #64	; 0x40
 8005916:	4619      	mov	r1, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f001 fe1c 	bl	8007558 <HAL_DMA_Start_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fd85 	bl	8005438 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800592e:	e00d      	b.n	800594c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8005938:	e008      	b.n	800594c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005946:	e001      	b.n	800594c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005948:	2302      	movs	r3, #2
 800594a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40022000 	.word	0x40022000
 800595c:	40022100 	.word	0x40022100
 8005960:	40022300 	.word	0x40022300
 8005964:	58026300 	.word	0x58026300
 8005968:	fffff0fe 	.word	0xfffff0fe
 800596c:	080065dd 	.word	0x080065dd
 8005970:	080066b5 	.word	0x080066b5
 8005974:	080066d1 	.word	0x080066d1

08005978 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005980:	2300      	movs	r3, #0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a87      	ldr	r2, [pc, #540]	; (8005bb8 <HAL_ADC_IRQHandler+0x240>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_ADC_IRQHandler+0x30>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a86      	ldr	r2, [pc, #536]	; (8005bbc <HAL_ADC_IRQHandler+0x244>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d101      	bne.n	80059ac <HAL_ADC_IRQHandler+0x34>
 80059a8:	4b85      	ldr	r3, [pc, #532]	; (8005bc0 <HAL_ADC_IRQHandler+0x248>)
 80059aa:	e000      	b.n	80059ae <HAL_ADC_IRQHandler+0x36>
 80059ac:	4b85      	ldr	r3, [pc, #532]	; (8005bc4 <HAL_ADC_IRQHandler+0x24c>)
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fcb0 	bl	8005314 <LL_ADC_GetMultimode>
 80059b4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_ADC_IRQHandler+0x78>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d012      	beq.n	80059f0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 ffe8 	bl	80069b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2202      	movs	r2, #2
 80059ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <HAL_ADC_IRQHandler+0x8c>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8083 	beq.w	8005b16 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d07d      	beq.n	8005b16 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fbb8 	bl	80051ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d062      	beq.n	8005b08 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a5d      	ldr	r2, [pc, #372]	; (8005bbc <HAL_ADC_IRQHandler+0x244>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d002      	beq.n	8005a52 <HAL_ADC_IRQHandler+0xda>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	e000      	b.n	8005a54 <HAL_ADC_IRQHandler+0xdc>
 8005a52:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_ADC_IRQHandler+0x240>)
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d008      	beq.n	8005a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d002      	beq.n	8005a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d104      	bne.n	8005a78 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e00c      	b.n	8005a92 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a4f      	ldr	r2, [pc, #316]	; (8005bbc <HAL_ADC_IRQHandler+0x244>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d002      	beq.n	8005a88 <HAL_ADC_IRQHandler+0x110>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	e000      	b.n	8005a8a <HAL_ADC_IRQHandler+0x112>
 8005a88:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_ADC_IRQHandler+0x240>)
 8005a8a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d135      	bne.n	8005b08 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d12e      	bne.n	8005b08 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fcd6 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11a      	bne.n	8005af0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 020c 	bic.w	r2, r2, #12
 8005ac8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d112      	bne.n	8005b08 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	f043 0201 	orr.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
 8005aee:	e00b      	b.n	8005b08 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af4:	f043 0210 	orr.w	r2, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	f043 0201 	orr.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fd f991 	bl	8002e30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	220c      	movs	r2, #12
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x1b2>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80a0 	beq.w	8005c76 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 809a 	beq.w	8005c76 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d105      	bne.n	8005b5a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fb76 	bl	8005250 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005b64:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fb1e 	bl	80051ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b70:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <HAL_ADC_IRQHandler+0x244>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d002      	beq.n	8005b82 <HAL_ADC_IRQHandler+0x20a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	e000      	b.n	8005b84 <HAL_ADC_IRQHandler+0x20c>
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <HAL_ADC_IRQHandler+0x240>)
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d008      	beq.n	8005b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d002      	beq.n	8005b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b07      	cmp	r3, #7
 8005b9c:	d104      	bne.n	8005ba8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	e014      	b.n	8005bd2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a03      	ldr	r2, [pc, #12]	; (8005bbc <HAL_ADC_IRQHandler+0x244>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00a      	beq.n	8005bc8 <HAL_ADC_IRQHandler+0x250>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	e008      	b.n	8005bca <HAL_ADC_IRQHandler+0x252>
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40022100 	.word	0x40022100
 8005bc0:	40022300 	.word	0x40022300
 8005bc4:	58026300 	.word	0x58026300
 8005bc8:	4b84      	ldr	r3, [pc, #528]	; (8005ddc <HAL_ADC_IRQHandler+0x464>)
 8005bca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d047      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <HAL_ADC_IRQHandler+0x27a>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d03f      	beq.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d13a      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d133      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d12e      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fc39 	bl	8005486 <LL_ADC_INJ_IsConversionOngoing>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11a      	bne.n	8005c50 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d112      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c46:	f043 0201 	orr.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8005c4e:	e00b      	b.n	8005c68 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f043 0210 	orr.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fe7d 	bl	8006968 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2260      	movs	r2, #96	; 0x60
 8005c74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_ADC_IRQHandler+0x32c>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8b2 	bl	8005e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <HAL_ADC_IRQHandler+0x35c>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fe63 	bl	8006990 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <HAL_ADC_IRQHandler+0x38c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fe55 	bl	80069a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d043      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x41e>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d03e      	beq.n	8005d96 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005d20:	2301      	movs	r3, #1
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	e021      	b.n	8005d6a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <HAL_ADC_IRQHandler+0x464>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_ADC_IRQHandler+0x3c8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <HAL_ADC_IRQHandler+0x468>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_ADC_IRQHandler+0x3cc>
 8005d40:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <HAL_ADC_IRQHandler+0x46c>)
 8005d42:	e000      	b.n	8005d46 <HAL_ADC_IRQHandler+0x3ce>
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <HAL_ADC_IRQHandler+0x470>)
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff faf2 	bl	8005330 <LL_ADC_GetMultiDMATransfer>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00b      	beq.n	8005d6a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005d52:	2301      	movs	r3, #1
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	e008      	b.n	8005d6a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005d66:	2301      	movs	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10e      	bne.n	8005d8e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f043 0202 	orr.w	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f843 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2210      	movs	r2, #16
 8005d94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d018      	beq.n	8005dd2 <HAL_ADC_IRQHandler+0x45a>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d013      	beq.n	8005dd2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	f043 0208 	orr.w	r2, r3, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fdd5 	bl	800697c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005dd2:	bf00      	nop
 8005dd4:	3728      	adds	r7, #40	; 0x28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40022100 	.word	0x40022100
 8005de4:	40022300 	.word	0x40022300
 8005de8:	58026300 	.word	0x58026300

08005dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b0a1      	sub	sp, #132	; 0x84
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a9d      	ldr	r2, [pc, #628]	; (80060b8 <HAL_ADC_ConfigChannel+0x290>)
 8005e42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADC_ConfigChannel+0x2a>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e321      	b.n	8006496 <HAL_ADC_ConfigChannel+0x66e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fafe 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 8306 	bne.w	8006478 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <HAL_ADC_ConfigChannel+0x62>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	0e9b      	lsrs	r3, r3, #26
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	e016      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x90>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	e003      	b.n	8005eae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea8:	fab3 f383 	clz	r3, r3
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	69d1      	ldr	r1, [r2, #28]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6859      	ldr	r1, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7ff f97d 	bl	80051d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fabf 	bl	8005460 <LL_ADC_REG_IsConversionOngoing>
 8005ee2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff facc 	bl	8005486 <LL_ADC_INJ_IsConversionOngoing>
 8005eee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 80b3 	bne.w	800605e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 80af 	bne.w	800605e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6819      	ldr	r1, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f7ff f9b2 	bl	8005276 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <HAL_ADC_ConfigChannel+0x294>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f1e:	d10b      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x110>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	e01d      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x14c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x136>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	e00a      	b.n	8005f74 <HAL_ADC_ConfigChannel+0x14c>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	089b      	lsrs	r3, r3, #2
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d027      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6919      	ldr	r1, [r3, #16]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f8c:	f7ff f8ba 	bl	8005104 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6919      	ldr	r1, [r3, #16]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	7e5b      	ldrb	r3, [r3, #25]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d102      	bne.n	8005fa6 <HAL_ADC_ConfigChannel+0x17e>
 8005fa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fa4:	e000      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x180>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f7ff f8e4 	bl	8005176 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6919      	ldr	r1, [r3, #16]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	7e1b      	ldrb	r3, [r3, #24]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d102      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x19c>
 8005fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fc2:	e000      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x19e>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f7ff f8bc 	bl	8005144 <LL_ADC_SetDataRightShift>
 8005fcc:	e047      	b.n	800605e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	069b      	lsls	r3, r3, #26
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d107      	bne.n	8005ff2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ff0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	069b      	lsls	r3, r3, #26
 8006002:	429a      	cmp	r2, r3
 8006004:	d107      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006014:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800601c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	069b      	lsls	r3, r3, #26
 8006026:	429a      	cmp	r2, r3
 8006028:	d107      	bne.n	800603a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006038:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006040:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	069b      	lsls	r3, r3, #26
 800604a:	429a      	cmp	r2, r3
 800604c:	d107      	bne.n	800605e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800605c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f9d4 	bl	8005410 <LL_ADC_IsEnabled>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 820d 	bne.w	800648a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	461a      	mov	r2, r3
 800607e:	f7ff f925 	bl	80052cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	4a0c      	ldr	r2, [pc, #48]	; (80060b8 <HAL_ADC_ConfigChannel+0x290>)
 8006088:	4293      	cmp	r3, r2
 800608a:	f040 8133 	bne.w	80062f4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800609a:	2b00      	cmp	r3, #0
 800609c:	d110      	bne.n	80060c0 <HAL_ADC_ConfigChannel+0x298>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	0e9b      	lsrs	r3, r3, #26
 80060a4:	3301      	adds	r3, #1
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b09      	cmp	r3, #9
 80060ac:	bf94      	ite	ls
 80060ae:	2301      	movls	r3, #1
 80060b0:	2300      	movhi	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	e01e      	b.n	80060f4 <HAL_ADC_ConfigChannel+0x2cc>
 80060b6:	bf00      	nop
 80060b8:	47ff0000 	.word	0x47ff0000
 80060bc:	5c001000 	.word	0x5c001000
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c8:	fa93 f3a3 	rbit	r3, r3
 80060cc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80060ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80060d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80060d8:	2320      	movs	r3, #32
 80060da:	e003      	b.n	80060e4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80060dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060de:	fab3 f383 	clz	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	3301      	adds	r3, #1
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	bf94      	ite	ls
 80060ee:	2301      	movls	r3, #1
 80060f0:	2300      	movhi	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d079      	beq.n	80061ec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006100:	2b00      	cmp	r3, #0
 8006102:	d107      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x2ec>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	0e9b      	lsrs	r3, r3, #26
 800610a:	3301      	adds	r3, #1
 800610c:	069b      	lsls	r3, r3, #26
 800610e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006112:	e015      	b.n	8006140 <HAL_ADC_ConfigChannel+0x318>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	fa93 f3a3 	rbit	r3, r3
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800612c:	2320      	movs	r3, #32
 800612e:	e003      	b.n	8006138 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006132:	fab3 f383 	clz	r3, r3
 8006136:	b2db      	uxtb	r3, r3
 8006138:	3301      	adds	r3, #1
 800613a:	069b      	lsls	r3, r3, #26
 800613c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_ADC_ConfigChannel+0x338>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	0e9b      	lsrs	r3, r3, #26
 8006152:	3301      	adds	r3, #1
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2101      	movs	r1, #1
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	e017      	b.n	8006190 <HAL_ADC_ConfigChannel+0x368>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006168:	fa93 f3a3 	rbit	r3, r3
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006178:	2320      	movs	r3, #32
 800617a:	e003      	b.n	8006184 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	3301      	adds	r3, #1
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2101      	movs	r1, #1
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	ea42 0103 	orr.w	r1, r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <HAL_ADC_ConfigChannel+0x38e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	0e9b      	lsrs	r3, r3, #26
 80061a6:	3301      	adds	r3, #1
 80061a8:	f003 021f 	and.w	r2, r3, #31
 80061ac:	4613      	mov	r3, r2
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	4413      	add	r3, r2
 80061b2:	051b      	lsls	r3, r3, #20
 80061b4:	e018      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x3c0>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	fa93 f3a3 	rbit	r3, r3
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80061ce:	2320      	movs	r3, #32
 80061d0:	e003      	b.n	80061da <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	fab3 f383 	clz	r3, r3
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	3301      	adds	r3, #1
 80061dc:	f003 021f 	and.w	r2, r3, #31
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061e8:	430b      	orrs	r3, r1
 80061ea:	e07e      	b.n	80062ea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d107      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x3e0>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	0e9b      	lsrs	r3, r3, #26
 80061fe:	3301      	adds	r3, #1
 8006200:	069b      	lsls	r3, r3, #26
 8006202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006206:	e015      	b.n	8006234 <HAL_ADC_ConfigChannel+0x40c>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	fa93 f3a3 	rbit	r3, r3
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006220:	2320      	movs	r3, #32
 8006222:	e003      	b.n	800622c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	3301      	adds	r3, #1
 800622e:	069b      	lsls	r3, r3, #26
 8006230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <HAL_ADC_ConfigChannel+0x42c>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0e9b      	lsrs	r3, r3, #26
 8006246:	3301      	adds	r3, #1
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2101      	movs	r1, #1
 800624e:	fa01 f303 	lsl.w	r3, r1, r3
 8006252:	e017      	b.n	8006284 <HAL_ADC_ConfigChannel+0x45c>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	fa93 f3a3 	rbit	r3, r3
 8006260:	61bb      	str	r3, [r7, #24]
  return result;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800626c:	2320      	movs	r3, #32
 800626e:	e003      	b.n	8006278 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	fab3 f383 	clz	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	3301      	adds	r3, #1
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2101      	movs	r1, #1
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	ea42 0103 	orr.w	r1, r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10d      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x488>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	0e9b      	lsrs	r3, r3, #26
 800629a:	3301      	adds	r3, #1
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	3b1e      	subs	r3, #30
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062ae:	e01b      	b.n	80062e8 <HAL_ADC_ConfigChannel+0x4c0>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	60fb      	str	r3, [r7, #12]
  return result;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80062c8:	2320      	movs	r3, #32
 80062ca:	e003      	b.n	80062d4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	fab3 f383 	clz	r3, r3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	f003 021f 	and.w	r2, r3, #31
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	3b1e      	subs	r3, #30
 80062e2:	051b      	lsls	r3, r3, #20
 80062e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e8:	430b      	orrs	r3, r1
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	6892      	ldr	r2, [r2, #8]
 80062ee:	4619      	mov	r1, r3
 80062f0:	f7fe ffc1 	bl	8005276 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f280 80c6 	bge.w	800648a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a67      	ldr	r2, [pc, #412]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_ADC_ConfigChannel+0x4ea>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a65      	ldr	r2, [pc, #404]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d101      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x4ee>
 8006312:	4b65      	ldr	r3, [pc, #404]	; (80064a8 <HAL_ADC_ConfigChannel+0x680>)
 8006314:	e000      	b.n	8006318 <HAL_ADC_ConfigChannel+0x4f0>
 8006316:	4b65      	ldr	r3, [pc, #404]	; (80064ac <HAL_ADC_ConfigChannel+0x684>)
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fee5 	bl	80050e8 <LL_ADC_GetCommonPathInternalCh>
 800631e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5e      	ldr	r2, [pc, #376]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_ADC_ConfigChannel+0x50c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5d      	ldr	r2, [pc, #372]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10e      	bne.n	8006352 <HAL_ADC_ConfigChannel+0x52a>
 8006334:	485a      	ldr	r0, [pc, #360]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 8006336:	f7ff f86b 	bl	8005410 <LL_ADC_IsEnabled>
 800633a:	4604      	mov	r4, r0
 800633c:	4859      	ldr	r0, [pc, #356]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 800633e:	f7ff f867 	bl	8005410 <LL_ADC_IsEnabled>
 8006342:	4603      	mov	r3, r0
 8006344:	4323      	orrs	r3, r4
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	e008      	b.n	8006364 <HAL_ADC_ConfigChannel+0x53c>
 8006352:	4857      	ldr	r0, [pc, #348]	; (80064b0 <HAL_ADC_ConfigChannel+0x688>)
 8006354:	f7ff f85c 	bl	8005410 <LL_ADC_IsEnabled>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	bf0c      	ite	eq
 800635e:	2301      	moveq	r3, #1
 8006360:	2300      	movne	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d07d      	beq.n	8006464 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a51      	ldr	r2, [pc, #324]	; (80064b4 <HAL_ADC_ConfigChannel+0x68c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d130      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x5ac>
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d12b      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a4b      	ldr	r2, [pc, #300]	; (80064b0 <HAL_ADC_ConfigChannel+0x688>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f040 8081 	bne.w	800648a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a44      	ldr	r2, [pc, #272]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_ADC_ConfigChannel+0x574>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a43      	ldr	r2, [pc, #268]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_ADC_ConfigChannel+0x578>
 800639c:	4a42      	ldr	r2, [pc, #264]	; (80064a8 <HAL_ADC_ConfigChannel+0x680>)
 800639e:	e000      	b.n	80063a2 <HAL_ADC_ConfigChannel+0x57a>
 80063a0:	4a42      	ldr	r2, [pc, #264]	; (80064ac <HAL_ADC_ConfigChannel+0x684>)
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe fe89 	bl	80050c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063b0:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <HAL_ADC_ConfigChannel+0x690>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	099b      	lsrs	r3, r3, #6
 80063b6:	4a41      	ldr	r2, [pc, #260]	; (80064bc <HAL_ADC_ConfigChannel+0x694>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	099b      	lsrs	r3, r3, #6
 80063be:	3301      	adds	r3, #1
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063c4:	e002      	b.n	80063cc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f9      	bne.n	80063c6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063d2:	e05a      	b.n	800648a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a39      	ldr	r2, [pc, #228]	; (80064c0 <HAL_ADC_ConfigChannel+0x698>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d11e      	bne.n	800641c <HAL_ADC_ConfigChannel+0x5f4>
 80063de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d119      	bne.n	800641c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a30      	ldr	r2, [pc, #192]	; (80064b0 <HAL_ADC_ConfigChannel+0x688>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d14b      	bne.n	800648a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2a      	ldr	r2, [pc, #168]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_ADC_ConfigChannel+0x5de>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x5e2>
 8006406:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <HAL_ADC_ConfigChannel+0x680>)
 8006408:	e000      	b.n	800640c <HAL_ADC_ConfigChannel+0x5e4>
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <HAL_ADC_ConfigChannel+0x684>)
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fe fe54 	bl	80050c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800641a:	e036      	b.n	800648a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <HAL_ADC_ConfigChannel+0x69c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d131      	bne.n	800648a <HAL_ADC_ConfigChannel+0x662>
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d12c      	bne.n	800648a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <HAL_ADC_ConfigChannel+0x688>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d127      	bne.n	800648a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <HAL_ADC_ConfigChannel+0x678>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_ADC_ConfigChannel+0x626>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <HAL_ADC_ConfigChannel+0x67c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d101      	bne.n	8006452 <HAL_ADC_ConfigChannel+0x62a>
 800644e:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <HAL_ADC_ConfigChannel+0x680>)
 8006450:	e000      	b.n	8006454 <HAL_ADC_ConfigChannel+0x62c>
 8006452:	4a16      	ldr	r2, [pc, #88]	; (80064ac <HAL_ADC_ConfigChannel+0x684>)
 8006454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800645a:	4619      	mov	r1, r3
 800645c:	4610      	mov	r0, r2
 800645e:	f7fe fe30 	bl	80050c2 <LL_ADC_SetCommonPathInternalCh>
 8006462:	e012      	b.n	800648a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006476:	e008      	b.n	800648a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006492:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006496:	4618      	mov	r0, r3
 8006498:	3784      	adds	r7, #132	; 0x84
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}
 800649e:	bf00      	nop
 80064a0:	40022000 	.word	0x40022000
 80064a4:	40022100 	.word	0x40022100
 80064a8:	40022300 	.word	0x40022300
 80064ac:	58026300 	.word	0x58026300
 80064b0:	58026000 	.word	0x58026000
 80064b4:	cb840000 	.word	0xcb840000
 80064b8:	2000001c 	.word	0x2000001c
 80064bc:	053e2d63 	.word	0x053e2d63
 80064c0:	c7520000 	.word	0xc7520000
 80064c4:	cfb80000 	.word	0xcfb80000

080064c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe ff9b 	bl	8005410 <LL_ADC_IsEnabled>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d16e      	bne.n	80065be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <ADC_Enable+0x100>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f043 0210 	orr.w	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	f043 0201 	orr.w	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e05a      	b.n	80065c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe ff6a 	bl	80053e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006514:	f7fe fd72 	bl	8004ffc <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2b      	ldr	r2, [pc, #172]	; (80065cc <ADC_Enable+0x104>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <ADC_Enable+0x66>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a29      	ldr	r2, [pc, #164]	; (80065d0 <ADC_Enable+0x108>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <ADC_Enable+0x6a>
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <ADC_Enable+0x10c>)
 8006530:	e000      	b.n	8006534 <ADC_Enable+0x6c>
 8006532:	4b29      	ldr	r3, [pc, #164]	; (80065d8 <ADC_Enable+0x110>)
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe feed 	bl	8005314 <LL_ADC_GetMultimode>
 800653a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <ADC_Enable+0x108>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d002      	beq.n	800654c <ADC_Enable+0x84>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	e000      	b.n	800654e <ADC_Enable+0x86>
 800654c:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <ADC_Enable+0x104>)
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d130      	bne.n	80065be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800655c:	e028      	b.n	80065b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe ff54 	bl	8005410 <LL_ADC_IsEnabled>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe ff38 	bl	80053e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006578:	f7fe fd40 	bl	8004ffc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d914      	bls.n	80065b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d00d      	beq.n	80065b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	f043 0210 	orr.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	f043 0201 	orr.w	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e007      	b.n	80065c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d1cf      	bne.n	800655e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	8000003f 	.word	0x8000003f
 80065cc:	40022000 	.word	0x40022000
 80065d0:	40022100 	.word	0x40022100
 80065d4:	40022300 	.word	0x40022300
 80065d8:	58026300 	.word	0x58026300

080065dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d14b      	bne.n	800668e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d021      	beq.n	8006654 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fdc9 	bl	80051ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d032      	beq.n	8006686 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d12b      	bne.n	8006686 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11f      	bne.n	8006686 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	f043 0201 	orr.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
 8006652:	e018      	b.n	8006686 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d111      	bne.n	8006686 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d105      	bne.n	8006686 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fc fbd2 	bl	8002e30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800668c:	e00e      	b.n	80066ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fbba 	bl	8005e14 <HAL_ADC_ErrorCallback>
}
 80066a0:	e004      	b.n	80066ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fb92 	bl	8005dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fb8c 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a7a      	ldr	r2, [pc, #488]	; (80068fc <ADC_ConfigureBoostMode+0x1f8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <ADC_ConfigureBoostMode+0x1c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a79      	ldr	r2, [pc, #484]	; (8006900 <ADC_ConfigureBoostMode+0x1fc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d109      	bne.n	8006734 <ADC_ConfigureBoostMode+0x30>
 8006720:	4b78      	ldr	r3, [pc, #480]	; (8006904 <ADC_ConfigureBoostMode+0x200>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e008      	b.n	8006746 <ADC_ConfigureBoostMode+0x42>
 8006734:	4b74      	ldr	r3, [pc, #464]	; (8006908 <ADC_ConfigureBoostMode+0x204>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01c      	beq.n	8006784 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800674a:	f005 ff83 	bl	800c654 <HAL_RCC_GetHCLKFreq>
 800674e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006758:	d010      	beq.n	800677c <ADC_ConfigureBoostMode+0x78>
 800675a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800675e:	d873      	bhi.n	8006848 <ADC_ConfigureBoostMode+0x144>
 8006760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006764:	d002      	beq.n	800676c <ADC_ConfigureBoostMode+0x68>
 8006766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676a:	d16d      	bne.n	8006848 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	60fb      	str	r3, [r7, #12]
        break;
 800677a:	e068      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	60fb      	str	r3, [r7, #12]
        break;
 8006782:	e064      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006784:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f007 f9c8 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 8006790:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800679a:	d051      	beq.n	8006840 <ADC_ConfigureBoostMode+0x13c>
 800679c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80067a0:	d854      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80067a6:	d047      	beq.n	8006838 <ADC_ConfigureBoostMode+0x134>
 80067a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80067ac:	d84e      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80067b2:	d03d      	beq.n	8006830 <ADC_ConfigureBoostMode+0x12c>
 80067b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80067b8:	d848      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067be:	d033      	beq.n	8006828 <ADC_ConfigureBoostMode+0x124>
 80067c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c4:	d842      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067ca:	d029      	beq.n	8006820 <ADC_ConfigureBoostMode+0x11c>
 80067cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80067d0:	d83c      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067d6:	d01a      	beq.n	800680e <ADC_ConfigureBoostMode+0x10a>
 80067d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80067dc:	d836      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067e2:	d014      	beq.n	800680e <ADC_ConfigureBoostMode+0x10a>
 80067e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80067e8:	d830      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ee:	d00e      	beq.n	800680e <ADC_ConfigureBoostMode+0x10a>
 80067f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f4:	d82a      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 80067f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067fa:	d008      	beq.n	800680e <ADC_ConfigureBoostMode+0x10a>
 80067fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006800:	d824      	bhi.n	800684c <ADC_ConfigureBoostMode+0x148>
 8006802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006806:	d002      	beq.n	800680e <ADC_ConfigureBoostMode+0x10a>
 8006808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800680c:	d11e      	bne.n	800684c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	0c9b      	lsrs	r3, r3, #18
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	60fb      	str	r3, [r7, #12]
        break;
 800681e:	e016      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	60fb      	str	r3, [r7, #12]
        break;
 8006826:	e012      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	60fb      	str	r3, [r7, #12]
        break;
 800682e:	e00e      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	60fb      	str	r3, [r7, #12]
        break;
 8006836:	e00a      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	09db      	lsrs	r3, r3, #7
 800683c:	60fb      	str	r3, [r7, #12]
        break;
 800683e:	e006      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	60fb      	str	r3, [r7, #12]
        break;
 8006846:	e002      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800684c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800684e:	f7fe fc05 	bl	800505c <HAL_GetREVID>
 8006852:	4603      	mov	r3, r0
 8006854:	f241 0203 	movw	r2, #4099	; 0x1003
 8006858:	4293      	cmp	r3, r2
 800685a:	d815      	bhi.n	8006888 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a2b      	ldr	r2, [pc, #172]	; (800690c <ADC_ConfigureBoostMode+0x208>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d908      	bls.n	8006876 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006872:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006874:	e03e      	b.n	80068f4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006884:	609a      	str	r2, [r3, #8]
}
 8006886:	e035      	b.n	80068f4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a1f      	ldr	r2, [pc, #124]	; (8006910 <ADC_ConfigureBoostMode+0x20c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d808      	bhi.n	80068a8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068a4:	609a      	str	r2, [r3, #8]
}
 80068a6:	e025      	b.n	80068f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <ADC_ConfigureBoostMode+0x210>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d80a      	bhi.n	80068c6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c2:	609a      	str	r2, [r3, #8]
}
 80068c4:	e016      	b.n	80068f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <ADC_ConfigureBoostMode+0x214>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d80a      	bhi.n	80068e4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e0:	609a      	str	r2, [r3, #8]
}
 80068e2:	e007      	b.n	80068f4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40022000 	.word	0x40022000
 8006900:	40022100 	.word	0x40022100
 8006904:	40022300 	.word	0x40022300
 8006908:	58026300 	.word	0x58026300
 800690c:	01312d00 	.word	0x01312d00
 8006910:	005f5e10 	.word	0x005f5e10
 8006914:	00bebc20 	.word	0x00bebc20
 8006918:	017d7840 	.word	0x017d7840

0800691c <LL_ADC_IsEnabled>:
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <LL_ADC_IsEnabled+0x18>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <LL_ADC_IsEnabled+0x1a>
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <LL_ADC_REG_IsConversionOngoing>:
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b04      	cmp	r3, #4
 8006954:	d101      	bne.n	800695a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b09f      	sub	sp, #124	; 0x7c
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e0be      	b.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80069f2:	2300      	movs	r3, #0
 80069f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80069f6:	2300      	movs	r3, #0
 80069f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a5c      	ldr	r2, [pc, #368]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d102      	bne.n	8006a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a04:	4b5b      	ldr	r3, [pc, #364]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	e001      	b.n	8006a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f043 0220 	orr.w	r2, r3, #32
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e09d      	b.n	8006b68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff ff87 	bl	8006942 <LL_ADC_REG_IsConversionOngoing>
 8006a34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff ff81 	bl	8006942 <LL_ADC_REG_IsConversionOngoing>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d17f      	bne.n	8006b46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d17c      	bne.n	8006b46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a47      	ldr	r2, [pc, #284]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a46      	ldr	r2, [pc, #280]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006a60:	4b45      	ldr	r3, [pc, #276]	; (8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006a62:	e000      	b.n	8006a66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006a64:	4b45      	ldr	r3, [pc, #276]	; (8006b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006a66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d039      	beq.n	8006ae4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3a      	ldr	r2, [pc, #232]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d004      	beq.n	8006a96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a38      	ldr	r2, [pc, #224]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10e      	bne.n	8006ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006a96:	4836      	ldr	r0, [pc, #216]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006a98:	f7ff ff40 	bl	800691c <LL_ADC_IsEnabled>
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4835      	ldr	r0, [pc, #212]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006aa0:	f7ff ff3c 	bl	800691c <LL_ADC_IsEnabled>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4323      	orrs	r3, r4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e008      	b.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006ab4:	4832      	ldr	r0, [pc, #200]	; (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ab6:	f7ff ff31 	bl	800691c <LL_ADC_IsEnabled>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d047      	beq.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	4b2d      	ldr	r3, [pc, #180]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	6892      	ldr	r2, [r2, #8]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	431a      	orrs	r2, r3
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ae2:	e03a      	b.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1e      	ldr	r2, [pc, #120]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10e      	bne.n	8006b22 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006b04:	481a      	ldr	r0, [pc, #104]	; (8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006b06:	f7ff ff09 	bl	800691c <LL_ADC_IsEnabled>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4819      	ldr	r0, [pc, #100]	; (8006b74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006b0e:	f7ff ff05 	bl	800691c <LL_ADC_IsEnabled>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4323      	orrs	r3, r4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	e008      	b.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006b22:	4817      	ldr	r0, [pc, #92]	; (8006b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006b24:	f7ff fefa 	bl	800691c <LL_ADC_IsEnabled>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf0c      	ite	eq
 8006b2e:	2301      	moveq	r3, #1
 8006b30:	2300      	movne	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b44:	e009      	b.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006b58:	e000      	b.n	8006b5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	377c      	adds	r7, #124	; 0x7c
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd90      	pop	{r4, r7, pc}
 8006b70:	40022000 	.word	0x40022000
 8006b74:	40022100 	.word	0x40022100
 8006b78:	40022300 	.word	0x40022300
 8006b7c:	58026300 	.word	0x58026300
 8006b80:	58026000 	.word	0x58026000
 8006b84:	fffff0e0 	.word	0xfffff0e0

08006b88 <__NVIC_SetPriorityGrouping>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <__NVIC_SetPriorityGrouping+0x44>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bb6:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	60d3      	str	r3, [r2, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000ed00 	.word	0xe000ed00
 8006bcc:	05fa0000 	.word	0x05fa0000

08006bd0 <__NVIC_GetPriorityGrouping>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 0307 	and.w	r3, r3, #7
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	e000ed00 	.word	0xe000ed00

08006bec <__NVIC_EnableIRQ>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db0b      	blt.n	8006c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	f003 021f 	and.w	r2, r3, #31
 8006c04:	4907      	ldr	r1, [pc, #28]	; (8006c24 <__NVIC_EnableIRQ+0x38>)
 8006c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	e000e100 	.word	0xe000e100

08006c28 <__NVIC_SetPriority>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db0a      	blt.n	8006c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	490c      	ldr	r1, [pc, #48]	; (8006c74 <__NVIC_SetPriority+0x4c>)
 8006c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c50:	e00a      	b.n	8006c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	4908      	ldr	r1, [pc, #32]	; (8006c78 <__NVIC_SetPriority+0x50>)
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	0112      	lsls	r2, r2, #4
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	440b      	add	r3, r1
 8006c66:	761a      	strb	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000e100 	.word	0xe000e100
 8006c78:	e000ed00 	.word	0xe000ed00

08006c7c <NVIC_EncodePriority>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f1c3 0307 	rsb	r3, r3, #7
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	bf28      	it	cs
 8006c9a:	2304      	movcs	r3, #4
 8006c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d902      	bls.n	8006cac <NVIC_EncodePriority+0x30>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3b03      	subs	r3, #3
 8006caa:	e000      	b.n	8006cae <NVIC_EncodePriority+0x32>
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43d9      	mvns	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd4:	4313      	orrs	r3, r2
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf4:	d301      	bcc.n	8006cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00f      	b.n	8006d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <SysTick_Config+0x40>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d02:	210f      	movs	r1, #15
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d08:	f7ff ff8e 	bl	8006c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <SysTick_Config+0x40>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <SysTick_Config+0x40>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000e010 	.word	0xe000e010

08006d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff29 	bl	8006b88 <__NVIC_SetPriorityGrouping>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	4603      	mov	r3, r0
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d4c:	f7ff ff40 	bl	8006bd0 <__NVIC_GetPriorityGrouping>
 8006d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	6978      	ldr	r0, [r7, #20]
 8006d58:	f7ff ff90 	bl	8006c7c <NVIC_EncodePriority>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d62:	4611      	mov	r1, r2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff ff5f 	bl	8006c28 <__NVIC_SetPriority>
}
 8006d6a:	bf00      	nop
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ff33 	bl	8006bec <__NVIC_EnableIRQ>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ffa4 	bl	8006ce4 <SysTick_Config>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006dac:	f3bf 8f5f 	dmb	sy
}
 8006db0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <HAL_MPU_Disable+0x28>)
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	4a06      	ldr	r2, [pc, #24]	; (8006dd0 <HAL_MPU_Disable+0x28>)
 8006db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dbc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <HAL_MPU_Disable+0x2c>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	605a      	str	r2, [r3, #4]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	e000ed00 	.word	0xe000ed00
 8006dd4:	e000ed90 	.word	0xe000ed90

08006dd8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006de0:	4a0b      	ldr	r2, [pc, #44]	; (8006e10 <HAL_MPU_Enable+0x38>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <HAL_MPU_Enable+0x3c>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <HAL_MPU_Enable+0x3c>)
 8006df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006df6:	f3bf 8f4f 	dsb	sy
}
 8006dfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006dfc:	f3bf 8f6f 	isb	sy
}
 8006e00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000ed90 	.word	0xe000ed90
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	785a      	ldrb	r2, [r3, #1]
 8006e24:	4b1d      	ldr	r3, [pc, #116]	; (8006e9c <HAL_MPU_ConfigRegion+0x84>)
 8006e26:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d029      	beq.n	8006e84 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006e30:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_MPU_ConfigRegion+0x84>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7adb      	ldrb	r3, [r3, #11]
 8006e42:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7a9b      	ldrb	r3, [r3, #10]
 8006e4a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006e4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7b5b      	ldrb	r3, [r3, #13]
 8006e52:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7b9b      	ldrb	r3, [r3, #14]
 8006e5a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	7bdb      	ldrb	r3, [r3, #15]
 8006e62:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7a5b      	ldrb	r3, [r3, #9]
 8006e6a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7a1b      	ldrb	r3, [r3, #8]
 8006e72:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e74:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e7c:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e7e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e80:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006e82:	e005      	b.n	8006e90 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <HAL_MPU_ConfigRegion+0x84>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006e8a:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <HAL_MPU_ConfigRegion+0x84>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	611a      	str	r2, [r3, #16]
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	e000ed90 	.word	0xe000ed90

08006ea0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ea8:	f7fe f8a8 	bl	8004ffc <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e316      	b.n	80074e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a66      	ldr	r2, [pc, #408]	; (8007058 <HAL_DMA_Init+0x1b8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d04a      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a65      	ldr	r2, [pc, #404]	; (800705c <HAL_DMA_Init+0x1bc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d045      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a63      	ldr	r2, [pc, #396]	; (8007060 <HAL_DMA_Init+0x1c0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d040      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a62      	ldr	r2, [pc, #392]	; (8007064 <HAL_DMA_Init+0x1c4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d03b      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a60      	ldr	r2, [pc, #384]	; (8007068 <HAL_DMA_Init+0x1c8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d036      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5f      	ldr	r2, [pc, #380]	; (800706c <HAL_DMA_Init+0x1cc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d031      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5d      	ldr	r2, [pc, #372]	; (8007070 <HAL_DMA_Init+0x1d0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d02c      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <HAL_DMA_Init+0x1d4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d027      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a5a      	ldr	r2, [pc, #360]	; (8007078 <HAL_DMA_Init+0x1d8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a59      	ldr	r2, [pc, #356]	; (800707c <HAL_DMA_Init+0x1dc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d01d      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a57      	ldr	r2, [pc, #348]	; (8007080 <HAL_DMA_Init+0x1e0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a56      	ldr	r2, [pc, #344]	; (8007084 <HAL_DMA_Init+0x1e4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a54      	ldr	r2, [pc, #336]	; (8007088 <HAL_DMA_Init+0x1e8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a53      	ldr	r2, [pc, #332]	; (800708c <HAL_DMA_Init+0x1ec>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a51      	ldr	r2, [pc, #324]	; (8007090 <HAL_DMA_Init+0x1f0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_DMA_Init+0xb8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a50      	ldr	r2, [pc, #320]	; (8007094 <HAL_DMA_Init+0x1f4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d101      	bne.n	8006f5c <HAL_DMA_Init+0xbc>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <HAL_DMA_Init+0xbe>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 813b 	beq.w	80071da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a37      	ldr	r2, [pc, #220]	; (8007058 <HAL_DMA_Init+0x1b8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04a      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a36      	ldr	r2, [pc, #216]	; (800705c <HAL_DMA_Init+0x1bc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d045      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a34      	ldr	r2, [pc, #208]	; (8007060 <HAL_DMA_Init+0x1c0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d040      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a33      	ldr	r2, [pc, #204]	; (8007064 <HAL_DMA_Init+0x1c4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d03b      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a31      	ldr	r2, [pc, #196]	; (8007068 <HAL_DMA_Init+0x1c8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d036      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a30      	ldr	r2, [pc, #192]	; (800706c <HAL_DMA_Init+0x1cc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d031      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <HAL_DMA_Init+0x1d0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d02c      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <HAL_DMA_Init+0x1d4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d027      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <HAL_DMA_Init+0x1d8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d022      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2a      	ldr	r2, [pc, #168]	; (800707c <HAL_DMA_Init+0x1dc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d01d      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a28      	ldr	r2, [pc, #160]	; (8007080 <HAL_DMA_Init+0x1e0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d018      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a27      	ldr	r2, [pc, #156]	; (8007084 <HAL_DMA_Init+0x1e4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d013      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_DMA_Init+0x1e8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00e      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <HAL_DMA_Init+0x1ec>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d009      	beq.n	8007014 <HAL_DMA_Init+0x174>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a22      	ldr	r2, [pc, #136]	; (8007090 <HAL_DMA_Init+0x1f0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_DMA_Init+0x174>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a21      	ldr	r2, [pc, #132]	; (8007094 <HAL_DMA_Init+0x1f4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d108      	bne.n	8007026 <HAL_DMA_Init+0x186>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e007      	b.n	8007036 <HAL_DMA_Init+0x196>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007036:	e02f      	b.n	8007098 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007038:	f7fd ffe0 	bl	8004ffc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b05      	cmp	r3, #5
 8007044:	d928      	bls.n	8007098 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2203      	movs	r2, #3
 8007050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e246      	b.n	80074e6 <HAL_DMA_Init+0x646>
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1c8      	bne.n	8007038 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4b83      	ldr	r3, [pc, #524]	; (80072c0 <HAL_DMA_Init+0x420>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80070be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d107      	bne.n	80070fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	4313      	orrs	r3, r2
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80070fc:	4b71      	ldr	r3, [pc, #452]	; (80072c4 <HAL_DMA_Init+0x424>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b71      	ldr	r3, [pc, #452]	; (80072c8 <HAL_DMA_Init+0x428>)
 8007102:	4013      	ands	r3, r2
 8007104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007108:	d328      	bcc.n	800715c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b28      	cmp	r3, #40	; 0x28
 8007110:	d903      	bls.n	800711a <HAL_DMA_Init+0x27a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d917      	bls.n	800714a <HAL_DMA_Init+0x2aa>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b3e      	cmp	r3, #62	; 0x3e
 8007120:	d903      	bls.n	800712a <HAL_DMA_Init+0x28a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b42      	cmp	r3, #66	; 0x42
 8007128:	d90f      	bls.n	800714a <HAL_DMA_Init+0x2aa>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b46      	cmp	r3, #70	; 0x46
 8007130:	d903      	bls.n	800713a <HAL_DMA_Init+0x29a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b48      	cmp	r3, #72	; 0x48
 8007138:	d907      	bls.n	800714a <HAL_DMA_Init+0x2aa>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b4e      	cmp	r3, #78	; 0x4e
 8007140:	d905      	bls.n	800714e <HAL_DMA_Init+0x2ae>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b52      	cmp	r3, #82	; 0x52
 8007148:	d801      	bhi.n	800714e <HAL_DMA_Init+0x2ae>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <HAL_DMA_Init+0x2b0>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800715a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0307 	bic.w	r3, r3, #7
 8007172:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b04      	cmp	r3, #4
 8007184:	d117      	bne.n	80071b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00e      	beq.n	80071b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fddb 	bl	8008d54 <DMA_CheckFifoParam>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e197      	b.n	80074e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fd16 	bl	8008bf0 <DMA_CalcBaseAndBitshift>
 80071c4:	4603      	mov	r3, r0
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	223f      	movs	r2, #63	; 0x3f
 80071d2:	409a      	lsls	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e0cd      	b.n	8007376 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3b      	ldr	r2, [pc, #236]	; (80072cc <HAL_DMA_Init+0x42c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d022      	beq.n	800722a <HAL_DMA_Init+0x38a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a39      	ldr	r2, [pc, #228]	; (80072d0 <HAL_DMA_Init+0x430>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01d      	beq.n	800722a <HAL_DMA_Init+0x38a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a38      	ldr	r2, [pc, #224]	; (80072d4 <HAL_DMA_Init+0x434>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d018      	beq.n	800722a <HAL_DMA_Init+0x38a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a36      	ldr	r2, [pc, #216]	; (80072d8 <HAL_DMA_Init+0x438>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <HAL_DMA_Init+0x38a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a35      	ldr	r2, [pc, #212]	; (80072dc <HAL_DMA_Init+0x43c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00e      	beq.n	800722a <HAL_DMA_Init+0x38a>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a33      	ldr	r2, [pc, #204]	; (80072e0 <HAL_DMA_Init+0x440>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <HAL_DMA_Init+0x38a>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a32      	ldr	r2, [pc, #200]	; (80072e4 <HAL_DMA_Init+0x444>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <HAL_DMA_Init+0x38a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a30      	ldr	r2, [pc, #192]	; (80072e8 <HAL_DMA_Init+0x448>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <HAL_DMA_Init+0x38e>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <HAL_DMA_Init+0x390>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8097 	beq.w	8007364 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <HAL_DMA_Init+0x42c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d021      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_DMA_Init+0x430>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01c      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_DMA_Init+0x434>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d017      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <HAL_DMA_Init+0x438>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d012      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <HAL_DMA_Init+0x43c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00d      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <HAL_DMA_Init+0x440>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d008      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_DMA_Init+0x444>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <HAL_DMA_Init+0x3e4>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a19      	ldr	r2, [pc, #100]	; (80072e8 <HAL_DMA_Init+0x448>)
 8007282:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <HAL_DMA_Init+0x44c>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d021      	beq.n	80072f0 <HAL_DMA_Init+0x450>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d102      	bne.n	80072ba <HAL_DMA_Init+0x41a>
 80072b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072b8:	e01b      	b.n	80072f2 <HAL_DMA_Init+0x452>
 80072ba:	2300      	movs	r3, #0
 80072bc:	e019      	b.n	80072f2 <HAL_DMA_Init+0x452>
 80072be:	bf00      	nop
 80072c0:	fe10803f 	.word	0xfe10803f
 80072c4:	5c001000 	.word	0x5c001000
 80072c8:	ffff0000 	.word	0xffff0000
 80072cc:	58025408 	.word	0x58025408
 80072d0:	5802541c 	.word	0x5802541c
 80072d4:	58025430 	.word	0x58025430
 80072d8:	58025444 	.word	0x58025444
 80072dc:	58025458 	.word	0x58025458
 80072e0:	5802546c 	.word	0x5802546c
 80072e4:	58025480 	.word	0x58025480
 80072e8:	58025494 	.word	0x58025494
 80072ec:	fffe000f 	.word	0xfffe000f
 80072f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68d2      	ldr	r2, [r2, #12]
 80072f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007310:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007318:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007320:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	4b6e      	ldr	r3, [pc, #440]	; (80074f0 <HAL_DMA_Init+0x650>)
 8007338:	4413      	add	r3, r2
 800733a:	4a6e      	ldr	r2, [pc, #440]	; (80074f4 <HAL_DMA_Init+0x654>)
 800733c:	fba2 2303 	umull	r2, r3, r2, r3
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	009a      	lsls	r2, r3, #2
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fc51 	bl	8008bf0 <DMA_CalcBaseAndBitshift>
 800734e:	4603      	mov	r3, r0
 8007350:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2201      	movs	r2, #1
 800735c:	409a      	lsls	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	e008      	b.n	8007376 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2240      	movs	r2, #64	; 0x40
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2203      	movs	r2, #3
 800736e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e0b7      	b.n	80074e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a5f      	ldr	r2, [pc, #380]	; (80074f8 <HAL_DMA_Init+0x658>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d072      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a5d      	ldr	r2, [pc, #372]	; (80074fc <HAL_DMA_Init+0x65c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d06d      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a5c      	ldr	r2, [pc, #368]	; (8007500 <HAL_DMA_Init+0x660>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d068      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5a      	ldr	r2, [pc, #360]	; (8007504 <HAL_DMA_Init+0x664>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d063      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a59      	ldr	r2, [pc, #356]	; (8007508 <HAL_DMA_Init+0x668>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d05e      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a57      	ldr	r2, [pc, #348]	; (800750c <HAL_DMA_Init+0x66c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d059      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a56      	ldr	r2, [pc, #344]	; (8007510 <HAL_DMA_Init+0x670>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d054      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a54      	ldr	r2, [pc, #336]	; (8007514 <HAL_DMA_Init+0x674>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d04f      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a53      	ldr	r2, [pc, #332]	; (8007518 <HAL_DMA_Init+0x678>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d04a      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a51      	ldr	r2, [pc, #324]	; (800751c <HAL_DMA_Init+0x67c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d045      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a50      	ldr	r2, [pc, #320]	; (8007520 <HAL_DMA_Init+0x680>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d040      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a4e      	ldr	r2, [pc, #312]	; (8007524 <HAL_DMA_Init+0x684>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d03b      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4d      	ldr	r2, [pc, #308]	; (8007528 <HAL_DMA_Init+0x688>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d036      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a4b      	ldr	r2, [pc, #300]	; (800752c <HAL_DMA_Init+0x68c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d031      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4a      	ldr	r2, [pc, #296]	; (8007530 <HAL_DMA_Init+0x690>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d02c      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a48      	ldr	r2, [pc, #288]	; (8007534 <HAL_DMA_Init+0x694>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d027      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a47      	ldr	r2, [pc, #284]	; (8007538 <HAL_DMA_Init+0x698>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d022      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a45      	ldr	r2, [pc, #276]	; (800753c <HAL_DMA_Init+0x69c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01d      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a44      	ldr	r2, [pc, #272]	; (8007540 <HAL_DMA_Init+0x6a0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d018      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a42      	ldr	r2, [pc, #264]	; (8007544 <HAL_DMA_Init+0x6a4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a41      	ldr	r2, [pc, #260]	; (8007548 <HAL_DMA_Init+0x6a8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a3f      	ldr	r2, [pc, #252]	; (800754c <HAL_DMA_Init+0x6ac>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d009      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3e      	ldr	r2, [pc, #248]	; (8007550 <HAL_DMA_Init+0x6b0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d004      	beq.n	8007466 <HAL_DMA_Init+0x5c6>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a3c      	ldr	r2, [pc, #240]	; (8007554 <HAL_DMA_Init+0x6b4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d101      	bne.n	800746a <HAL_DMA_Init+0x5ca>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <HAL_DMA_Init+0x5cc>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d032      	beq.n	80074d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fceb 	bl	8008e4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d102      	bne.n	8007484 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007498:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <HAL_DMA_Init+0x624>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d80c      	bhi.n	80074c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fd68 	bl	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	e008      	b.n	80074d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	a7fdabf8 	.word	0xa7fdabf8
 80074f4:	cccccccd 	.word	0xcccccccd
 80074f8:	40020010 	.word	0x40020010
 80074fc:	40020028 	.word	0x40020028
 8007500:	40020040 	.word	0x40020040
 8007504:	40020058 	.word	0x40020058
 8007508:	40020070 	.word	0x40020070
 800750c:	40020088 	.word	0x40020088
 8007510:	400200a0 	.word	0x400200a0
 8007514:	400200b8 	.word	0x400200b8
 8007518:	40020410 	.word	0x40020410
 800751c:	40020428 	.word	0x40020428
 8007520:	40020440 	.word	0x40020440
 8007524:	40020458 	.word	0x40020458
 8007528:	40020470 	.word	0x40020470
 800752c:	40020488 	.word	0x40020488
 8007530:	400204a0 	.word	0x400204a0
 8007534:	400204b8 	.word	0x400204b8
 8007538:	58025408 	.word	0x58025408
 800753c:	5802541c 	.word	0x5802541c
 8007540:	58025430 	.word	0x58025430
 8007544:	58025444 	.word	0x58025444
 8007548:	58025458 	.word	0x58025458
 800754c:	5802546c 	.word	0x5802546c
 8007550:	58025480 	.word	0x58025480
 8007554:	58025494 	.word	0x58025494

08007558 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e226      	b.n	80079c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_DMA_Start_IT+0x2a>
 800757e:	2302      	movs	r3, #2
 8007580:	e21f      	b.n	80079c2 <HAL_DMA_Start_IT+0x46a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b01      	cmp	r3, #1
 8007594:	f040 820a 	bne.w	80079ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a68      	ldr	r2, [pc, #416]	; (800774c <HAL_DMA_Start_IT+0x1f4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d04a      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a66      	ldr	r2, [pc, #408]	; (8007750 <HAL_DMA_Start_IT+0x1f8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d045      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a65      	ldr	r2, [pc, #404]	; (8007754 <HAL_DMA_Start_IT+0x1fc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d040      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a63      	ldr	r2, [pc, #396]	; (8007758 <HAL_DMA_Start_IT+0x200>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d03b      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a62      	ldr	r2, [pc, #392]	; (800775c <HAL_DMA_Start_IT+0x204>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d036      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a60      	ldr	r2, [pc, #384]	; (8007760 <HAL_DMA_Start_IT+0x208>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d031      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a5f      	ldr	r2, [pc, #380]	; (8007764 <HAL_DMA_Start_IT+0x20c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d02c      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5d      	ldr	r2, [pc, #372]	; (8007768 <HAL_DMA_Start_IT+0x210>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d027      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5c      	ldr	r2, [pc, #368]	; (800776c <HAL_DMA_Start_IT+0x214>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d022      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5a      	ldr	r2, [pc, #360]	; (8007770 <HAL_DMA_Start_IT+0x218>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01d      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a59      	ldr	r2, [pc, #356]	; (8007774 <HAL_DMA_Start_IT+0x21c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d018      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a57      	ldr	r2, [pc, #348]	; (8007778 <HAL_DMA_Start_IT+0x220>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a56      	ldr	r2, [pc, #344]	; (800777c <HAL_DMA_Start_IT+0x224>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00e      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a54      	ldr	r2, [pc, #336]	; (8007780 <HAL_DMA_Start_IT+0x228>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d009      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a53      	ldr	r2, [pc, #332]	; (8007784 <HAL_DMA_Start_IT+0x22c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_DMA_Start_IT+0xee>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a51      	ldr	r2, [pc, #324]	; (8007788 <HAL_DMA_Start_IT+0x230>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d108      	bne.n	8007658 <HAL_DMA_Start_IT+0x100>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	e007      	b.n	8007668 <HAL_DMA_Start_IT+0x110>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0201 	bic.w	r2, r2, #1
 8007666:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f001 f912 	bl	8008898 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a34      	ldr	r2, [pc, #208]	; (800774c <HAL_DMA_Start_IT+0x1f4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d04a      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a33      	ldr	r2, [pc, #204]	; (8007750 <HAL_DMA_Start_IT+0x1f8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d045      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a31      	ldr	r2, [pc, #196]	; (8007754 <HAL_DMA_Start_IT+0x1fc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d040      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a30      	ldr	r2, [pc, #192]	; (8007758 <HAL_DMA_Start_IT+0x200>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d03b      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2e      	ldr	r2, [pc, #184]	; (800775c <HAL_DMA_Start_IT+0x204>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d036      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2d      	ldr	r2, [pc, #180]	; (8007760 <HAL_DMA_Start_IT+0x208>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d031      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2b      	ldr	r2, [pc, #172]	; (8007764 <HAL_DMA_Start_IT+0x20c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d02c      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <HAL_DMA_Start_IT+0x210>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d027      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a28      	ldr	r2, [pc, #160]	; (800776c <HAL_DMA_Start_IT+0x214>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d022      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a27      	ldr	r2, [pc, #156]	; (8007770 <HAL_DMA_Start_IT+0x218>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d01d      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a25      	ldr	r2, [pc, #148]	; (8007774 <HAL_DMA_Start_IT+0x21c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d018      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a24      	ldr	r2, [pc, #144]	; (8007778 <HAL_DMA_Start_IT+0x220>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a22      	ldr	r2, [pc, #136]	; (800777c <HAL_DMA_Start_IT+0x224>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00e      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a21      	ldr	r2, [pc, #132]	; (8007780 <HAL_DMA_Start_IT+0x228>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d009      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <HAL_DMA_Start_IT+0x22c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <HAL_DMA_Start_IT+0x1bc>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1e      	ldr	r2, [pc, #120]	; (8007788 <HAL_DMA_Start_IT+0x230>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <HAL_DMA_Start_IT+0x1c0>
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <HAL_DMA_Start_IT+0x1c2>
 8007718:	2300      	movs	r3, #0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d036      	beq.n	800778c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f023 021e 	bic.w	r2, r3, #30
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0216 	orr.w	r2, r2, #22
 8007730:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d03e      	beq.n	80077b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0208 	orr.w	r2, r2, #8
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e035      	b.n	80077b8 <HAL_DMA_Start_IT+0x260>
 800774c:	40020010 	.word	0x40020010
 8007750:	40020028 	.word	0x40020028
 8007754:	40020040 	.word	0x40020040
 8007758:	40020058 	.word	0x40020058
 800775c:	40020070 	.word	0x40020070
 8007760:	40020088 	.word	0x40020088
 8007764:	400200a0 	.word	0x400200a0
 8007768:	400200b8 	.word	0x400200b8
 800776c:	40020410 	.word	0x40020410
 8007770:	40020428 	.word	0x40020428
 8007774:	40020440 	.word	0x40020440
 8007778:	40020458 	.word	0x40020458
 800777c:	40020470 	.word	0x40020470
 8007780:	40020488 	.word	0x40020488
 8007784:	400204a0 	.word	0x400204a0
 8007788:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f023 020e 	bic.w	r2, r3, #14
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 020a 	orr.w	r2, r2, #10
 800779e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0204 	orr.w	r2, r2, #4
 80077b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a83      	ldr	r2, [pc, #524]	; (80079cc <HAL_DMA_Start_IT+0x474>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d072      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a82      	ldr	r2, [pc, #520]	; (80079d0 <HAL_DMA_Start_IT+0x478>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d06d      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a80      	ldr	r2, [pc, #512]	; (80079d4 <HAL_DMA_Start_IT+0x47c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d068      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a7f      	ldr	r2, [pc, #508]	; (80079d8 <HAL_DMA_Start_IT+0x480>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d063      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a7d      	ldr	r2, [pc, #500]	; (80079dc <HAL_DMA_Start_IT+0x484>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d05e      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a7c      	ldr	r2, [pc, #496]	; (80079e0 <HAL_DMA_Start_IT+0x488>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d059      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a7a      	ldr	r2, [pc, #488]	; (80079e4 <HAL_DMA_Start_IT+0x48c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d054      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a79      	ldr	r2, [pc, #484]	; (80079e8 <HAL_DMA_Start_IT+0x490>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d04f      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a77      	ldr	r2, [pc, #476]	; (80079ec <HAL_DMA_Start_IT+0x494>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d04a      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a76      	ldr	r2, [pc, #472]	; (80079f0 <HAL_DMA_Start_IT+0x498>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d045      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a74      	ldr	r2, [pc, #464]	; (80079f4 <HAL_DMA_Start_IT+0x49c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d040      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a73      	ldr	r2, [pc, #460]	; (80079f8 <HAL_DMA_Start_IT+0x4a0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d03b      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a71      	ldr	r2, [pc, #452]	; (80079fc <HAL_DMA_Start_IT+0x4a4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d036      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a70      	ldr	r2, [pc, #448]	; (8007a00 <HAL_DMA_Start_IT+0x4a8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d031      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a6e      	ldr	r2, [pc, #440]	; (8007a04 <HAL_DMA_Start_IT+0x4ac>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d02c      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6d      	ldr	r2, [pc, #436]	; (8007a08 <HAL_DMA_Start_IT+0x4b0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d027      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a6b      	ldr	r2, [pc, #428]	; (8007a0c <HAL_DMA_Start_IT+0x4b4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d022      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a6a      	ldr	r2, [pc, #424]	; (8007a10 <HAL_DMA_Start_IT+0x4b8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d01d      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a68      	ldr	r2, [pc, #416]	; (8007a14 <HAL_DMA_Start_IT+0x4bc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d018      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a67      	ldr	r2, [pc, #412]	; (8007a18 <HAL_DMA_Start_IT+0x4c0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d013      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a65      	ldr	r2, [pc, #404]	; (8007a1c <HAL_DMA_Start_IT+0x4c4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00e      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a64      	ldr	r2, [pc, #400]	; (8007a20 <HAL_DMA_Start_IT+0x4c8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d009      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a62      	ldr	r2, [pc, #392]	; (8007a24 <HAL_DMA_Start_IT+0x4cc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d004      	beq.n	80078a8 <HAL_DMA_Start_IT+0x350>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a61      	ldr	r2, [pc, #388]	; (8007a28 <HAL_DMA_Start_IT+0x4d0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d101      	bne.n	80078ac <HAL_DMA_Start_IT+0x354>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <HAL_DMA_Start_IT+0x356>
 80078ac:	2300      	movs	r3, #0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01a      	beq.n	80078e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d007      	beq.n	80078d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a37      	ldr	r2, [pc, #220]	; (80079cc <HAL_DMA_Start_IT+0x474>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d04a      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a36      	ldr	r2, [pc, #216]	; (80079d0 <HAL_DMA_Start_IT+0x478>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d045      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a34      	ldr	r2, [pc, #208]	; (80079d4 <HAL_DMA_Start_IT+0x47c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d040      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <HAL_DMA_Start_IT+0x480>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d03b      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a31      	ldr	r2, [pc, #196]	; (80079dc <HAL_DMA_Start_IT+0x484>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d036      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a30      	ldr	r2, [pc, #192]	; (80079e0 <HAL_DMA_Start_IT+0x488>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d031      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a2e      	ldr	r2, [pc, #184]	; (80079e4 <HAL_DMA_Start_IT+0x48c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d02c      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2d      	ldr	r2, [pc, #180]	; (80079e8 <HAL_DMA_Start_IT+0x490>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d027      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <HAL_DMA_Start_IT+0x494>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d022      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <HAL_DMA_Start_IT+0x498>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d01d      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <HAL_DMA_Start_IT+0x49c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d018      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <HAL_DMA_Start_IT+0x4a0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a25      	ldr	r2, [pc, #148]	; (80079fc <HAL_DMA_Start_IT+0x4a4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00e      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a24      	ldr	r2, [pc, #144]	; (8007a00 <HAL_DMA_Start_IT+0x4a8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d009      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a22      	ldr	r2, [pc, #136]	; (8007a04 <HAL_DMA_Start_IT+0x4ac>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <HAL_DMA_Start_IT+0x430>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <HAL_DMA_Start_IT+0x4b0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d108      	bne.n	800799a <HAL_DMA_Start_IT+0x442>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e012      	b.n	80079c0 <HAL_DMA_Start_IT+0x468>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e009      	b.n	80079c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40020010 	.word	0x40020010
 80079d0:	40020028 	.word	0x40020028
 80079d4:	40020040 	.word	0x40020040
 80079d8:	40020058 	.word	0x40020058
 80079dc:	40020070 	.word	0x40020070
 80079e0:	40020088 	.word	0x40020088
 80079e4:	400200a0 	.word	0x400200a0
 80079e8:	400200b8 	.word	0x400200b8
 80079ec:	40020410 	.word	0x40020410
 80079f0:	40020428 	.word	0x40020428
 80079f4:	40020440 	.word	0x40020440
 80079f8:	40020458 	.word	0x40020458
 80079fc:	40020470 	.word	0x40020470
 8007a00:	40020488 	.word	0x40020488
 8007a04:	400204a0 	.word	0x400204a0
 8007a08:	400204b8 	.word	0x400204b8
 8007a0c:	58025408 	.word	0x58025408
 8007a10:	5802541c 	.word	0x5802541c
 8007a14:	58025430 	.word	0x58025430
 8007a18:	58025444 	.word	0x58025444
 8007a1c:	58025458 	.word	0x58025458
 8007a20:	5802546c 	.word	0x5802546c
 8007a24:	58025480 	.word	0x58025480
 8007a28:	58025494 	.word	0x58025494

08007a2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a38:	4b67      	ldr	r3, [pc, #412]	; (8007bd8 <HAL_DMA_IRQHandler+0x1ac>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a67      	ldr	r2, [pc, #412]	; (8007bdc <HAL_DMA_IRQHandler+0x1b0>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0a9b      	lsrs	r3, r3, #10
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a5f      	ldr	r2, [pc, #380]	; (8007be0 <HAL_DMA_IRQHandler+0x1b4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d04a      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a5d      	ldr	r2, [pc, #372]	; (8007be4 <HAL_DMA_IRQHandler+0x1b8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d045      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a5c      	ldr	r2, [pc, #368]	; (8007be8 <HAL_DMA_IRQHandler+0x1bc>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d040      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5a      	ldr	r2, [pc, #360]	; (8007bec <HAL_DMA_IRQHandler+0x1c0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d03b      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a59      	ldr	r2, [pc, #356]	; (8007bf0 <HAL_DMA_IRQHandler+0x1c4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d036      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a57      	ldr	r2, [pc, #348]	; (8007bf4 <HAL_DMA_IRQHandler+0x1c8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d031      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a56      	ldr	r2, [pc, #344]	; (8007bf8 <HAL_DMA_IRQHandler+0x1cc>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d02c      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a54      	ldr	r2, [pc, #336]	; (8007bfc <HAL_DMA_IRQHandler+0x1d0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d027      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a53      	ldr	r2, [pc, #332]	; (8007c00 <HAL_DMA_IRQHandler+0x1d4>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d022      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a51      	ldr	r2, [pc, #324]	; (8007c04 <HAL_DMA_IRQHandler+0x1d8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01d      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a50      	ldr	r2, [pc, #320]	; (8007c08 <HAL_DMA_IRQHandler+0x1dc>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a4e      	ldr	r2, [pc, #312]	; (8007c0c <HAL_DMA_IRQHandler+0x1e0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a4d      	ldr	r2, [pc, #308]	; (8007c10 <HAL_DMA_IRQHandler+0x1e4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a4b      	ldr	r2, [pc, #300]	; (8007c14 <HAL_DMA_IRQHandler+0x1e8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a4a      	ldr	r2, [pc, #296]	; (8007c18 <HAL_DMA_IRQHandler+0x1ec>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_DMA_IRQHandler+0xd2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a48      	ldr	r2, [pc, #288]	; (8007c1c <HAL_DMA_IRQHandler+0x1f0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_DMA_IRQHandler+0xd6>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <HAL_DMA_IRQHandler+0xd8>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 842b 	beq.w	8008360 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2208      	movs	r2, #8
 8007b14:	409a      	lsls	r2, r3
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80a2 	beq.w	8007c64 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2e      	ldr	r2, [pc, #184]	; (8007be0 <HAL_DMA_IRQHandler+0x1b4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d04a      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <HAL_DMA_IRQHandler+0x1b8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d045      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <HAL_DMA_IRQHandler+0x1bc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d040      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <HAL_DMA_IRQHandler+0x1c0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d03b      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <HAL_DMA_IRQHandler+0x1c4>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d036      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a27      	ldr	r2, [pc, #156]	; (8007bf4 <HAL_DMA_IRQHandler+0x1c8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d031      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <HAL_DMA_IRQHandler+0x1cc>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d02c      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a24      	ldr	r2, [pc, #144]	; (8007bfc <HAL_DMA_IRQHandler+0x1d0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d027      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <HAL_DMA_IRQHandler+0x1d4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d022      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <HAL_DMA_IRQHandler+0x1d8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d01d      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_DMA_IRQHandler+0x1dc>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d018      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <HAL_DMA_IRQHandler+0x1e0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d013      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1c      	ldr	r2, [pc, #112]	; (8007c10 <HAL_DMA_IRQHandler+0x1e4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00e      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_DMA_IRQHandler+0x1e8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_DMA_IRQHandler+0x1ec>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0x194>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <HAL_DMA_IRQHandler+0x1f0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d12f      	bne.n	8007c20 <HAL_DMA_IRQHandler+0x1f4>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf14      	ite	ne
 8007bce:	2301      	movne	r3, #1
 8007bd0:	2300      	moveq	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	e02e      	b.n	8007c34 <HAL_DMA_IRQHandler+0x208>
 8007bd6:	bf00      	nop
 8007bd8:	2000001c 	.word	0x2000001c
 8007bdc:	1b4e81b5 	.word	0x1b4e81b5
 8007be0:	40020010 	.word	0x40020010
 8007be4:	40020028 	.word	0x40020028
 8007be8:	40020040 	.word	0x40020040
 8007bec:	40020058 	.word	0x40020058
 8007bf0:	40020070 	.word	0x40020070
 8007bf4:	40020088 	.word	0x40020088
 8007bf8:	400200a0 	.word	0x400200a0
 8007bfc:	400200b8 	.word	0x400200b8
 8007c00:	40020410 	.word	0x40020410
 8007c04:	40020428 	.word	0x40020428
 8007c08:	40020440 	.word	0x40020440
 8007c0c:	40020458 	.word	0x40020458
 8007c10:	40020470 	.word	0x40020470
 8007c14:	40020488 	.word	0x40020488
 8007c18:	400204a0 	.word	0x400204a0
 8007c1c:	400204b8 	.word	0x400204b8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d015      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0204 	bic.w	r2, r2, #4
 8007c46:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	2208      	movs	r2, #8
 8007c52:	409a      	lsls	r2, r3
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d06e      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a69      	ldr	r2, [pc, #420]	; (8007e24 <HAL_DMA_IRQHandler+0x3f8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d04a      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a67      	ldr	r2, [pc, #412]	; (8007e28 <HAL_DMA_IRQHandler+0x3fc>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d045      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a66      	ldr	r2, [pc, #408]	; (8007e2c <HAL_DMA_IRQHandler+0x400>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d040      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a64      	ldr	r2, [pc, #400]	; (8007e30 <HAL_DMA_IRQHandler+0x404>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d03b      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a63      	ldr	r2, [pc, #396]	; (8007e34 <HAL_DMA_IRQHandler+0x408>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d036      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a61      	ldr	r2, [pc, #388]	; (8007e38 <HAL_DMA_IRQHandler+0x40c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d031      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a60      	ldr	r2, [pc, #384]	; (8007e3c <HAL_DMA_IRQHandler+0x410>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d02c      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5e      	ldr	r2, [pc, #376]	; (8007e40 <HAL_DMA_IRQHandler+0x414>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d027      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a5d      	ldr	r2, [pc, #372]	; (8007e44 <HAL_DMA_IRQHandler+0x418>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d022      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a5b      	ldr	r2, [pc, #364]	; (8007e48 <HAL_DMA_IRQHandler+0x41c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d01d      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a5a      	ldr	r2, [pc, #360]	; (8007e4c <HAL_DMA_IRQHandler+0x420>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d018      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a58      	ldr	r2, [pc, #352]	; (8007e50 <HAL_DMA_IRQHandler+0x424>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a57      	ldr	r2, [pc, #348]	; (8007e54 <HAL_DMA_IRQHandler+0x428>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a55      	ldr	r2, [pc, #340]	; (8007e58 <HAL_DMA_IRQHandler+0x42c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a54      	ldr	r2, [pc, #336]	; (8007e5c <HAL_DMA_IRQHandler+0x430>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x2ee>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a52      	ldr	r2, [pc, #328]	; (8007e60 <HAL_DMA_IRQHandler+0x434>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d10a      	bne.n	8007d30 <HAL_DMA_IRQHandler+0x304>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	e003      	b.n	8007d38 <HAL_DMA_IRQHandler+0x30c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00d      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d50:	f043 0202 	orr.w	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	2204      	movs	r2, #4
 8007d62:	409a      	lsls	r2, r3
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 808f 	beq.w	8007e8c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2c      	ldr	r2, [pc, #176]	; (8007e24 <HAL_DMA_IRQHandler+0x3f8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d04a      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <HAL_DMA_IRQHandler+0x3fc>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d045      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <HAL_DMA_IRQHandler+0x400>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d040      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a27      	ldr	r2, [pc, #156]	; (8007e30 <HAL_DMA_IRQHandler+0x404>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d03b      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a26      	ldr	r2, [pc, #152]	; (8007e34 <HAL_DMA_IRQHandler+0x408>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d036      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a24      	ldr	r2, [pc, #144]	; (8007e38 <HAL_DMA_IRQHandler+0x40c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d031      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a23      	ldr	r2, [pc, #140]	; (8007e3c <HAL_DMA_IRQHandler+0x410>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d02c      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <HAL_DMA_IRQHandler+0x414>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d027      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a20      	ldr	r2, [pc, #128]	; (8007e44 <HAL_DMA_IRQHandler+0x418>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d022      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <HAL_DMA_IRQHandler+0x41c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d01d      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <HAL_DMA_IRQHandler+0x420>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d018      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <HAL_DMA_IRQHandler+0x424>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <HAL_DMA_IRQHandler+0x428>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00e      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <HAL_DMA_IRQHandler+0x42c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d009      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <HAL_DMA_IRQHandler+0x430>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d004      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x3e2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <HAL_DMA_IRQHandler+0x434>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d12a      	bne.n	8007e64 <HAL_DMA_IRQHandler+0x438>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bf14      	ite	ne
 8007e1c:	2301      	movne	r3, #1
 8007e1e:	2300      	moveq	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	e023      	b.n	8007e6c <HAL_DMA_IRQHandler+0x440>
 8007e24:	40020010 	.word	0x40020010
 8007e28:	40020028 	.word	0x40020028
 8007e2c:	40020040 	.word	0x40020040
 8007e30:	40020058 	.word	0x40020058
 8007e34:	40020070 	.word	0x40020070
 8007e38:	40020088 	.word	0x40020088
 8007e3c:	400200a0 	.word	0x400200a0
 8007e40:	400200b8 	.word	0x400200b8
 8007e44:	40020410 	.word	0x40020410
 8007e48:	40020428 	.word	0x40020428
 8007e4c:	40020440 	.word	0x40020440
 8007e50:	40020458 	.word	0x40020458
 8007e54:	40020470 	.word	0x40020470
 8007e58:	40020488 	.word	0x40020488
 8007e5c:	400204a0 	.word	0x400204a0
 8007e60:	400204b8 	.word	0x400204b8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00d      	beq.n	8007e8c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	2204      	movs	r2, #4
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e84:	f043 0204 	orr.w	r2, r3, #4
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	2210      	movs	r2, #16
 8007e96:	409a      	lsls	r2, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80a6 	beq.w	8007fee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a85      	ldr	r2, [pc, #532]	; (80080bc <HAL_DMA_IRQHandler+0x690>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d04a      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a83      	ldr	r2, [pc, #524]	; (80080c0 <HAL_DMA_IRQHandler+0x694>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d045      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a82      	ldr	r2, [pc, #520]	; (80080c4 <HAL_DMA_IRQHandler+0x698>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d040      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a80      	ldr	r2, [pc, #512]	; (80080c8 <HAL_DMA_IRQHandler+0x69c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d03b      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a7f      	ldr	r2, [pc, #508]	; (80080cc <HAL_DMA_IRQHandler+0x6a0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d036      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a7d      	ldr	r2, [pc, #500]	; (80080d0 <HAL_DMA_IRQHandler+0x6a4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d031      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a7c      	ldr	r2, [pc, #496]	; (80080d4 <HAL_DMA_IRQHandler+0x6a8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d02c      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a7a      	ldr	r2, [pc, #488]	; (80080d8 <HAL_DMA_IRQHandler+0x6ac>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d027      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a79      	ldr	r2, [pc, #484]	; (80080dc <HAL_DMA_IRQHandler+0x6b0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d022      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a77      	ldr	r2, [pc, #476]	; (80080e0 <HAL_DMA_IRQHandler+0x6b4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d01d      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a76      	ldr	r2, [pc, #472]	; (80080e4 <HAL_DMA_IRQHandler+0x6b8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d018      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a74      	ldr	r2, [pc, #464]	; (80080e8 <HAL_DMA_IRQHandler+0x6bc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d013      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a73      	ldr	r2, [pc, #460]	; (80080ec <HAL_DMA_IRQHandler+0x6c0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00e      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a71      	ldr	r2, [pc, #452]	; (80080f0 <HAL_DMA_IRQHandler+0x6c4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d009      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a70      	ldr	r2, [pc, #448]	; (80080f4 <HAL_DMA_IRQHandler+0x6c8>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x516>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a6e      	ldr	r2, [pc, #440]	; (80080f8 <HAL_DMA_IRQHandler+0x6cc>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d10a      	bne.n	8007f58 <HAL_DMA_IRQHandler+0x52c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bf14      	ite	ne
 8007f50:	2301      	movne	r3, #1
 8007f52:	2300      	moveq	r3, #0
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	e009      	b.n	8007f6c <HAL_DMA_IRQHandler+0x540>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bf14      	ite	ne
 8007f66:	2301      	movne	r3, #1
 8007f68:	2300      	moveq	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d03e      	beq.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	2210      	movs	r2, #16
 8007f7a:	409a      	lsls	r2, r3
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d018      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d108      	bne.n	8007fae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d024      	beq.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
 8007fac:	e01f      	b.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01b      	beq.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	e016      	b.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d107      	bne.n	8007fde <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0208 	bic.w	r2, r2, #8
 8007fdc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8110 	beq.w	8008224 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <HAL_DMA_IRQHandler+0x690>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d04a      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a2b      	ldr	r2, [pc, #172]	; (80080c0 <HAL_DMA_IRQHandler+0x694>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d045      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a29      	ldr	r2, [pc, #164]	; (80080c4 <HAL_DMA_IRQHandler+0x698>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d040      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a28      	ldr	r2, [pc, #160]	; (80080c8 <HAL_DMA_IRQHandler+0x69c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d03b      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a26      	ldr	r2, [pc, #152]	; (80080cc <HAL_DMA_IRQHandler+0x6a0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d036      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <HAL_DMA_IRQHandler+0x6a4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d031      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <HAL_DMA_IRQHandler+0x6a8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d02c      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <HAL_DMA_IRQHandler+0x6ac>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d027      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a20      	ldr	r2, [pc, #128]	; (80080dc <HAL_DMA_IRQHandler+0x6b0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d022      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <HAL_DMA_IRQHandler+0x6b4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d01d      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <HAL_DMA_IRQHandler+0x6b8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d018      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a1c      	ldr	r2, [pc, #112]	; (80080e8 <HAL_DMA_IRQHandler+0x6bc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d013      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <HAL_DMA_IRQHandler+0x6c0>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d00e      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a19      	ldr	r2, [pc, #100]	; (80080f0 <HAL_DMA_IRQHandler+0x6c4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d009      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <HAL_DMA_IRQHandler+0x6c8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d004      	beq.n	80080a4 <HAL_DMA_IRQHandler+0x678>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <HAL_DMA_IRQHandler+0x6cc>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d12b      	bne.n	80080fc <HAL_DMA_IRQHandler+0x6d0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0310 	and.w	r3, r3, #16
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bf14      	ite	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	2300      	moveq	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	e02a      	b.n	8008110 <HAL_DMA_IRQHandler+0x6e4>
 80080ba:	bf00      	nop
 80080bc:	40020010 	.word	0x40020010
 80080c0:	40020028 	.word	0x40020028
 80080c4:	40020040 	.word	0x40020040
 80080c8:	40020058 	.word	0x40020058
 80080cc:	40020070 	.word	0x40020070
 80080d0:	40020088 	.word	0x40020088
 80080d4:	400200a0 	.word	0x400200a0
 80080d8:	400200b8 	.word	0x400200b8
 80080dc:	40020410 	.word	0x40020410
 80080e0:	40020428 	.word	0x40020428
 80080e4:	40020440 	.word	0x40020440
 80080e8:	40020458 	.word	0x40020458
 80080ec:	40020470 	.word	0x40020470
 80080f0:	40020488 	.word	0x40020488
 80080f4:	400204a0 	.word	0x400204a0
 80080f8:	400204b8 	.word	0x400204b8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2301      	movne	r3, #1
 800810c:	2300      	moveq	r3, #0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 8087 	beq.w	8008224 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2220      	movs	r2, #32
 8008120:	409a      	lsls	r2, r3
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b04      	cmp	r3, #4
 8008130:	d139      	bne.n	80081a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0216 	bic.w	r2, r2, #22
 8008140:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695a      	ldr	r2, [r3, #20]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008150:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_DMA_IRQHandler+0x736>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0208 	bic.w	r2, r2, #8
 8008170:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	223f      	movs	r2, #63	; 0x3f
 800817c:	409a      	lsls	r2, r3
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 834a 	beq.w	8008830 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
          }
          return;
 80081a4:	e344      	b.n	8008830 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d018      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d108      	bne.n	80081d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02c      	beq.n	8008224 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	e027      	b.n	8008224 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d023      	beq.n	8008224 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
 80081e4:	e01e      	b.n	8008224 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10f      	bne.n	8008214 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0210 	bic.w	r2, r2, #16
 8008202:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8306 	beq.w	800883a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 8088 	beq.w	800834c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2204      	movs	r2, #4
 8008240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a7a      	ldr	r2, [pc, #488]	; (8008434 <HAL_DMA_IRQHandler+0xa08>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d04a      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a79      	ldr	r2, [pc, #484]	; (8008438 <HAL_DMA_IRQHandler+0xa0c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d045      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a77      	ldr	r2, [pc, #476]	; (800843c <HAL_DMA_IRQHandler+0xa10>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d040      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a76      	ldr	r2, [pc, #472]	; (8008440 <HAL_DMA_IRQHandler+0xa14>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d03b      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a74      	ldr	r2, [pc, #464]	; (8008444 <HAL_DMA_IRQHandler+0xa18>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d036      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a73      	ldr	r2, [pc, #460]	; (8008448 <HAL_DMA_IRQHandler+0xa1c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d031      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a71      	ldr	r2, [pc, #452]	; (800844c <HAL_DMA_IRQHandler+0xa20>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02c      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a70      	ldr	r2, [pc, #448]	; (8008450 <HAL_DMA_IRQHandler+0xa24>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d027      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a6e      	ldr	r2, [pc, #440]	; (8008454 <HAL_DMA_IRQHandler+0xa28>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6d      	ldr	r2, [pc, #436]	; (8008458 <HAL_DMA_IRQHandler+0xa2c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d01d      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a6b      	ldr	r2, [pc, #428]	; (800845c <HAL_DMA_IRQHandler+0xa30>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a6a      	ldr	r2, [pc, #424]	; (8008460 <HAL_DMA_IRQHandler+0xa34>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a68      	ldr	r2, [pc, #416]	; (8008464 <HAL_DMA_IRQHandler+0xa38>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a67      	ldr	r2, [pc, #412]	; (8008468 <HAL_DMA_IRQHandler+0xa3c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a65      	ldr	r2, [pc, #404]	; (800846c <HAL_DMA_IRQHandler+0xa40>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x8b8>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a64      	ldr	r2, [pc, #400]	; (8008470 <HAL_DMA_IRQHandler+0xa44>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d108      	bne.n	80082f6 <HAL_DMA_IRQHandler+0x8ca>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	e007      	b.n	8008306 <HAL_DMA_IRQHandler+0x8da>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	429a      	cmp	r2, r3
 8008310:	d307      	bcc.n	8008322 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f2      	bne.n	8008306 <HAL_DMA_IRQHandler+0x8da>
 8008320:	e000      	b.n	8008324 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008322:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2203      	movs	r2, #3
 8008336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800833a:	e003      	b.n	8008344 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8272 	beq.w	800883a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
 800835e:	e26c      	b.n	800883a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a43      	ldr	r2, [pc, #268]	; (8008474 <HAL_DMA_IRQHandler+0xa48>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d022      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a42      	ldr	r2, [pc, #264]	; (8008478 <HAL_DMA_IRQHandler+0xa4c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d01d      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a40      	ldr	r2, [pc, #256]	; (800847c <HAL_DMA_IRQHandler+0xa50>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d018      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a3f      	ldr	r2, [pc, #252]	; (8008480 <HAL_DMA_IRQHandler+0xa54>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d013      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a3d      	ldr	r2, [pc, #244]	; (8008484 <HAL_DMA_IRQHandler+0xa58>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00e      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a3c      	ldr	r2, [pc, #240]	; (8008488 <HAL_DMA_IRQHandler+0xa5c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d009      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a3a      	ldr	r2, [pc, #232]	; (800848c <HAL_DMA_IRQHandler+0xa60>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d004      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x984>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a39      	ldr	r2, [pc, #228]	; (8008490 <HAL_DMA_IRQHandler+0xa64>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d101      	bne.n	80083b4 <HAL_DMA_IRQHandler+0x988>
 80083b0:	2301      	movs	r3, #1
 80083b2:	e000      	b.n	80083b6 <HAL_DMA_IRQHandler+0x98a>
 80083b4:	2300      	movs	r3, #0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 823f 	beq.w	800883a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c8:	f003 031f 	and.w	r3, r3, #31
 80083cc:	2204      	movs	r2, #4
 80083ce:	409a      	lsls	r2, r3
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80cd 	beq.w	8008574 <HAL_DMA_IRQHandler+0xb48>
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 80c7 	beq.w	8008574 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	2204      	movs	r2, #4
 80083f0:	409a      	lsls	r2, r3
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d049      	beq.n	8008494 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8210 	beq.w	8008834 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800841c:	e20a      	b.n	8008834 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8206 	beq.w	8008834 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008430:	e200      	b.n	8008834 <HAL_DMA_IRQHandler+0xe08>
 8008432:	bf00      	nop
 8008434:	40020010 	.word	0x40020010
 8008438:	40020028 	.word	0x40020028
 800843c:	40020040 	.word	0x40020040
 8008440:	40020058 	.word	0x40020058
 8008444:	40020070 	.word	0x40020070
 8008448:	40020088 	.word	0x40020088
 800844c:	400200a0 	.word	0x400200a0
 8008450:	400200b8 	.word	0x400200b8
 8008454:	40020410 	.word	0x40020410
 8008458:	40020428 	.word	0x40020428
 800845c:	40020440 	.word	0x40020440
 8008460:	40020458 	.word	0x40020458
 8008464:	40020470 	.word	0x40020470
 8008468:	40020488 	.word	0x40020488
 800846c:	400204a0 	.word	0x400204a0
 8008470:	400204b8 	.word	0x400204b8
 8008474:	58025408 	.word	0x58025408
 8008478:	5802541c 	.word	0x5802541c
 800847c:	58025430 	.word	0x58025430
 8008480:	58025444 	.word	0x58025444
 8008484:	58025458 	.word	0x58025458
 8008488:	5802546c 	.word	0x5802546c
 800848c:	58025480 	.word	0x58025480
 8008490:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d160      	bne.n	8008560 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a7f      	ldr	r2, [pc, #508]	; (80086a0 <HAL_DMA_IRQHandler+0xc74>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d04a      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a7d      	ldr	r2, [pc, #500]	; (80086a4 <HAL_DMA_IRQHandler+0xc78>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d045      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a7c      	ldr	r2, [pc, #496]	; (80086a8 <HAL_DMA_IRQHandler+0xc7c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d040      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a7a      	ldr	r2, [pc, #488]	; (80086ac <HAL_DMA_IRQHandler+0xc80>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d03b      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a79      	ldr	r2, [pc, #484]	; (80086b0 <HAL_DMA_IRQHandler+0xc84>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d036      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a77      	ldr	r2, [pc, #476]	; (80086b4 <HAL_DMA_IRQHandler+0xc88>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d031      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a76      	ldr	r2, [pc, #472]	; (80086b8 <HAL_DMA_IRQHandler+0xc8c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d02c      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a74      	ldr	r2, [pc, #464]	; (80086bc <HAL_DMA_IRQHandler+0xc90>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d027      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a73      	ldr	r2, [pc, #460]	; (80086c0 <HAL_DMA_IRQHandler+0xc94>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d022      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a71      	ldr	r2, [pc, #452]	; (80086c4 <HAL_DMA_IRQHandler+0xc98>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a70      	ldr	r2, [pc, #448]	; (80086c8 <HAL_DMA_IRQHandler+0xc9c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d018      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a6e      	ldr	r2, [pc, #440]	; (80086cc <HAL_DMA_IRQHandler+0xca0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a6d      	ldr	r2, [pc, #436]	; (80086d0 <HAL_DMA_IRQHandler+0xca4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a6b      	ldr	r2, [pc, #428]	; (80086d4 <HAL_DMA_IRQHandler+0xca8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6a      	ldr	r2, [pc, #424]	; (80086d8 <HAL_DMA_IRQHandler+0xcac>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_DMA_IRQHandler+0xb12>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a68      	ldr	r2, [pc, #416]	; (80086dc <HAL_DMA_IRQHandler+0xcb0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d108      	bne.n	8008550 <HAL_DMA_IRQHandler+0xb24>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0208 	bic.w	r2, r2, #8
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e007      	b.n	8008560 <HAL_DMA_IRQHandler+0xb34>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0204 	bic.w	r2, r2, #4
 800855e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8165 	beq.w	8008834 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008572:	e15f      	b.n	8008834 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2202      	movs	r2, #2
 800857e:	409a      	lsls	r2, r3
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80c5 	beq.w	8008714 <HAL_DMA_IRQHandler+0xce8>
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 80bf 	beq.w	8008714 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	2202      	movs	r2, #2
 80085a0:	409a      	lsls	r2, r3
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d018      	beq.n	80085e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 813a 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085cc:	e134      	b.n	8008838 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8130 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085e0:	e12a      	b.n	8008838 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f040 8089 	bne.w	8008700 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2b      	ldr	r2, [pc, #172]	; (80086a0 <HAL_DMA_IRQHandler+0xc74>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d04a      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <HAL_DMA_IRQHandler+0xc78>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d045      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <HAL_DMA_IRQHandler+0xc7c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d040      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a26      	ldr	r2, [pc, #152]	; (80086ac <HAL_DMA_IRQHandler+0xc80>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d03b      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a25      	ldr	r2, [pc, #148]	; (80086b0 <HAL_DMA_IRQHandler+0xc84>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d036      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a23      	ldr	r2, [pc, #140]	; (80086b4 <HAL_DMA_IRQHandler+0xc88>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d031      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a22      	ldr	r2, [pc, #136]	; (80086b8 <HAL_DMA_IRQHandler+0xc8c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d02c      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a20      	ldr	r2, [pc, #128]	; (80086bc <HAL_DMA_IRQHandler+0xc90>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d027      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <HAL_DMA_IRQHandler+0xc94>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d022      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <HAL_DMA_IRQHandler+0xc98>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01d      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1c      	ldr	r2, [pc, #112]	; (80086c8 <HAL_DMA_IRQHandler+0xc9c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d018      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1a      	ldr	r2, [pc, #104]	; (80086cc <HAL_DMA_IRQHandler+0xca0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <HAL_DMA_IRQHandler+0xca4>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00e      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <HAL_DMA_IRQHandler+0xca8>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <HAL_DMA_IRQHandler+0xcac>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <HAL_DMA_IRQHandler+0xc62>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a14      	ldr	r2, [pc, #80]	; (80086dc <HAL_DMA_IRQHandler+0xcb0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d128      	bne.n	80086e0 <HAL_DMA_IRQHandler+0xcb4>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0214 	bic.w	r2, r2, #20
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e027      	b.n	80086f0 <HAL_DMA_IRQHandler+0xcc4>
 80086a0:	40020010 	.word	0x40020010
 80086a4:	40020028 	.word	0x40020028
 80086a8:	40020040 	.word	0x40020040
 80086ac:	40020058 	.word	0x40020058
 80086b0:	40020070 	.word	0x40020070
 80086b4:	40020088 	.word	0x40020088
 80086b8:	400200a0 	.word	0x400200a0
 80086bc:	400200b8 	.word	0x400200b8
 80086c0:	40020410 	.word	0x40020410
 80086c4:	40020428 	.word	0x40020428
 80086c8:	40020440 	.word	0x40020440
 80086cc:	40020458 	.word	0x40020458
 80086d0:	40020470 	.word	0x40020470
 80086d4:	40020488 	.word	0x40020488
 80086d8:	400204a0 	.word	0x400204a0
 80086dc:	400204b8 	.word	0x400204b8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 020a 	bic.w	r2, r2, #10
 80086ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8097 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008712:	e091      	b.n	8008838 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	2208      	movs	r2, #8
 800871e:	409a      	lsls	r2, r3
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	4013      	ands	r3, r2
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8088 	beq.w	800883a <HAL_DMA_IRQHandler+0xe0e>
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f003 0308 	and.w	r3, r3, #8
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8082 	beq.w	800883a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a41      	ldr	r2, [pc, #260]	; (8008840 <HAL_DMA_IRQHandler+0xe14>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d04a      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a3f      	ldr	r2, [pc, #252]	; (8008844 <HAL_DMA_IRQHandler+0xe18>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d045      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a3e      	ldr	r2, [pc, #248]	; (8008848 <HAL_DMA_IRQHandler+0xe1c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d040      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a3c      	ldr	r2, [pc, #240]	; (800884c <HAL_DMA_IRQHandler+0xe20>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d03b      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a3b      	ldr	r2, [pc, #236]	; (8008850 <HAL_DMA_IRQHandler+0xe24>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d036      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a39      	ldr	r2, [pc, #228]	; (8008854 <HAL_DMA_IRQHandler+0xe28>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d031      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a38      	ldr	r2, [pc, #224]	; (8008858 <HAL_DMA_IRQHandler+0xe2c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d02c      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a36      	ldr	r2, [pc, #216]	; (800885c <HAL_DMA_IRQHandler+0xe30>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d027      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a35      	ldr	r2, [pc, #212]	; (8008860 <HAL_DMA_IRQHandler+0xe34>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d022      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a33      	ldr	r2, [pc, #204]	; (8008864 <HAL_DMA_IRQHandler+0xe38>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01d      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a32      	ldr	r2, [pc, #200]	; (8008868 <HAL_DMA_IRQHandler+0xe3c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a30      	ldr	r2, [pc, #192]	; (800886c <HAL_DMA_IRQHandler+0xe40>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a2f      	ldr	r2, [pc, #188]	; (8008870 <HAL_DMA_IRQHandler+0xe44>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a2d      	ldr	r2, [pc, #180]	; (8008874 <HAL_DMA_IRQHandler+0xe48>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <HAL_DMA_IRQHandler+0xe4c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xdaa>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a2a      	ldr	r2, [pc, #168]	; (800887c <HAL_DMA_IRQHandler+0xe50>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d108      	bne.n	80087e8 <HAL_DMA_IRQHandler+0xdbc>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 021c 	bic.w	r2, r2, #28
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e007      	b.n	80087f8 <HAL_DMA_IRQHandler+0xdcc>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 020e 	bic.w	r2, r2, #14
 80087f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	2201      	movs	r2, #1
 8008802:	409a      	lsls	r2, r3
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
 800882e:	e004      	b.n	800883a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008830:	bf00      	nop
 8008832:	e002      	b.n	800883a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008834:	bf00      	nop
 8008836:	e000      	b.n	800883a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008838:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800883a:	3728      	adds	r7, #40	; 0x28
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40020010 	.word	0x40020010
 8008844:	40020028 	.word	0x40020028
 8008848:	40020040 	.word	0x40020040
 800884c:	40020058 	.word	0x40020058
 8008850:	40020070 	.word	0x40020070
 8008854:	40020088 	.word	0x40020088
 8008858:	400200a0 	.word	0x400200a0
 800885c:	400200b8 	.word	0x400200b8
 8008860:	40020410 	.word	0x40020410
 8008864:	40020428 	.word	0x40020428
 8008868:	40020440 	.word	0x40020440
 800886c:	40020458 	.word	0x40020458
 8008870:	40020470 	.word	0x40020470
 8008874:	40020488 	.word	0x40020488
 8008878:	400204a0 	.word	0x400204a0
 800887c:	400204b8 	.word	0x400204b8

08008880 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a7f      	ldr	r2, [pc, #508]	; (8008ab4 <DMA_SetConfig+0x21c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d072      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a7d      	ldr	r2, [pc, #500]	; (8008ab8 <DMA_SetConfig+0x220>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d06d      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a7c      	ldr	r2, [pc, #496]	; (8008abc <DMA_SetConfig+0x224>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d068      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a7a      	ldr	r2, [pc, #488]	; (8008ac0 <DMA_SetConfig+0x228>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d063      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a79      	ldr	r2, [pc, #484]	; (8008ac4 <DMA_SetConfig+0x22c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d05e      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a77      	ldr	r2, [pc, #476]	; (8008ac8 <DMA_SetConfig+0x230>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d059      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a76      	ldr	r2, [pc, #472]	; (8008acc <DMA_SetConfig+0x234>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d054      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a74      	ldr	r2, [pc, #464]	; (8008ad0 <DMA_SetConfig+0x238>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d04f      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a73      	ldr	r2, [pc, #460]	; (8008ad4 <DMA_SetConfig+0x23c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d04a      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a71      	ldr	r2, [pc, #452]	; (8008ad8 <DMA_SetConfig+0x240>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d045      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a70      	ldr	r2, [pc, #448]	; (8008adc <DMA_SetConfig+0x244>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d040      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a6e      	ldr	r2, [pc, #440]	; (8008ae0 <DMA_SetConfig+0x248>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d03b      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a6d      	ldr	r2, [pc, #436]	; (8008ae4 <DMA_SetConfig+0x24c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d036      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a6b      	ldr	r2, [pc, #428]	; (8008ae8 <DMA_SetConfig+0x250>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d031      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a6a      	ldr	r2, [pc, #424]	; (8008aec <DMA_SetConfig+0x254>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d02c      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a68      	ldr	r2, [pc, #416]	; (8008af0 <DMA_SetConfig+0x258>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d027      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a67      	ldr	r2, [pc, #412]	; (8008af4 <DMA_SetConfig+0x25c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d022      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a65      	ldr	r2, [pc, #404]	; (8008af8 <DMA_SetConfig+0x260>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a64      	ldr	r2, [pc, #400]	; (8008afc <DMA_SetConfig+0x264>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a62      	ldr	r2, [pc, #392]	; (8008b00 <DMA_SetConfig+0x268>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a61      	ldr	r2, [pc, #388]	; (8008b04 <DMA_SetConfig+0x26c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a5f      	ldr	r2, [pc, #380]	; (8008b08 <DMA_SetConfig+0x270>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a5e      	ldr	r2, [pc, #376]	; (8008b0c <DMA_SetConfig+0x274>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <DMA_SetConfig+0x10a>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a5c      	ldr	r2, [pc, #368]	; (8008b10 <DMA_SetConfig+0x278>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <DMA_SetConfig+0x10e>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <DMA_SetConfig+0x110>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00d      	beq.n	80089c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d004      	beq.n	80089c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a39      	ldr	r2, [pc, #228]	; (8008ab4 <DMA_SetConfig+0x21c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d04a      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a38      	ldr	r2, [pc, #224]	; (8008ab8 <DMA_SetConfig+0x220>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d045      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a36      	ldr	r2, [pc, #216]	; (8008abc <DMA_SetConfig+0x224>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d040      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a35      	ldr	r2, [pc, #212]	; (8008ac0 <DMA_SetConfig+0x228>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d03b      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a33      	ldr	r2, [pc, #204]	; (8008ac4 <DMA_SetConfig+0x22c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d036      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a32      	ldr	r2, [pc, #200]	; (8008ac8 <DMA_SetConfig+0x230>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d031      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a30      	ldr	r2, [pc, #192]	; (8008acc <DMA_SetConfig+0x234>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d02c      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a2f      	ldr	r2, [pc, #188]	; (8008ad0 <DMA_SetConfig+0x238>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d027      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a2d      	ldr	r2, [pc, #180]	; (8008ad4 <DMA_SetConfig+0x23c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d022      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a2c      	ldr	r2, [pc, #176]	; (8008ad8 <DMA_SetConfig+0x240>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d01d      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <DMA_SetConfig+0x244>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d018      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a29      	ldr	r2, [pc, #164]	; (8008ae0 <DMA_SetConfig+0x248>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d013      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <DMA_SetConfig+0x24c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00e      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <DMA_SetConfig+0x250>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d009      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a24      	ldr	r2, [pc, #144]	; (8008aec <DMA_SetConfig+0x254>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d004      	beq.n	8008a68 <DMA_SetConfig+0x1d0>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a23      	ldr	r2, [pc, #140]	; (8008af0 <DMA_SetConfig+0x258>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d101      	bne.n	8008a6c <DMA_SetConfig+0x1d4>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e000      	b.n	8008a6e <DMA_SetConfig+0x1d6>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d059      	beq.n	8008b26 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	223f      	movs	r2, #63	; 0x3f
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a90:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d138      	bne.n	8008b14 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ab2:	e086      	b.n	8008bc2 <DMA_SetConfig+0x32a>
 8008ab4:	40020010 	.word	0x40020010
 8008ab8:	40020028 	.word	0x40020028
 8008abc:	40020040 	.word	0x40020040
 8008ac0:	40020058 	.word	0x40020058
 8008ac4:	40020070 	.word	0x40020070
 8008ac8:	40020088 	.word	0x40020088
 8008acc:	400200a0 	.word	0x400200a0
 8008ad0:	400200b8 	.word	0x400200b8
 8008ad4:	40020410 	.word	0x40020410
 8008ad8:	40020428 	.word	0x40020428
 8008adc:	40020440 	.word	0x40020440
 8008ae0:	40020458 	.word	0x40020458
 8008ae4:	40020470 	.word	0x40020470
 8008ae8:	40020488 	.word	0x40020488
 8008aec:	400204a0 	.word	0x400204a0
 8008af0:	400204b8 	.word	0x400204b8
 8008af4:	58025408 	.word	0x58025408
 8008af8:	5802541c 	.word	0x5802541c
 8008afc:	58025430 	.word	0x58025430
 8008b00:	58025444 	.word	0x58025444
 8008b04:	58025458 	.word	0x58025458
 8008b08:	5802546c 	.word	0x5802546c
 8008b0c:	58025480 	.word	0x58025480
 8008b10:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]
}
 8008b24:	e04d      	b.n	8008bc2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a29      	ldr	r2, [pc, #164]	; (8008bd0 <DMA_SetConfig+0x338>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d022      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a27      	ldr	r2, [pc, #156]	; (8008bd4 <DMA_SetConfig+0x33c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d01d      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a26      	ldr	r2, [pc, #152]	; (8008bd8 <DMA_SetConfig+0x340>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d018      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a24      	ldr	r2, [pc, #144]	; (8008bdc <DMA_SetConfig+0x344>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d013      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a23      	ldr	r2, [pc, #140]	; (8008be0 <DMA_SetConfig+0x348>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00e      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a21      	ldr	r2, [pc, #132]	; (8008be4 <DMA_SetConfig+0x34c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d009      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a20      	ldr	r2, [pc, #128]	; (8008be8 <DMA_SetConfig+0x350>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d004      	beq.n	8008b76 <DMA_SetConfig+0x2de>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1e      	ldr	r2, [pc, #120]	; (8008bec <DMA_SetConfig+0x354>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d101      	bne.n	8008b7a <DMA_SetConfig+0x2e2>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <DMA_SetConfig+0x2e4>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d020      	beq.n	8008bc2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	2201      	movs	r2, #1
 8008b8a:	409a      	lsls	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d108      	bne.n	8008bb2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	60da      	str	r2, [r3, #12]
}
 8008bb0:	e007      	b.n	8008bc2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	60da      	str	r2, [r3, #12]
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	58025408 	.word	0x58025408
 8008bd4:	5802541c 	.word	0x5802541c
 8008bd8:	58025430 	.word	0x58025430
 8008bdc:	58025444 	.word	0x58025444
 8008be0:	58025458 	.word	0x58025458
 8008be4:	5802546c 	.word	0x5802546c
 8008be8:	58025480 	.word	0x58025480
 8008bec:	58025494 	.word	0x58025494

08008bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a42      	ldr	r2, [pc, #264]	; (8008d08 <DMA_CalcBaseAndBitshift+0x118>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d04a      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a41      	ldr	r2, [pc, #260]	; (8008d0c <DMA_CalcBaseAndBitshift+0x11c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d045      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a3f      	ldr	r2, [pc, #252]	; (8008d10 <DMA_CalcBaseAndBitshift+0x120>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d040      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3e      	ldr	r2, [pc, #248]	; (8008d14 <DMA_CalcBaseAndBitshift+0x124>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d03b      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3c      	ldr	r2, [pc, #240]	; (8008d18 <DMA_CalcBaseAndBitshift+0x128>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d036      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3b      	ldr	r2, [pc, #236]	; (8008d1c <DMA_CalcBaseAndBitshift+0x12c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d031      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a39      	ldr	r2, [pc, #228]	; (8008d20 <DMA_CalcBaseAndBitshift+0x130>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d02c      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a38      	ldr	r2, [pc, #224]	; (8008d24 <DMA_CalcBaseAndBitshift+0x134>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d027      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a36      	ldr	r2, [pc, #216]	; (8008d28 <DMA_CalcBaseAndBitshift+0x138>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d022      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a35      	ldr	r2, [pc, #212]	; (8008d2c <DMA_CalcBaseAndBitshift+0x13c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d01d      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a33      	ldr	r2, [pc, #204]	; (8008d30 <DMA_CalcBaseAndBitshift+0x140>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d018      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a32      	ldr	r2, [pc, #200]	; (8008d34 <DMA_CalcBaseAndBitshift+0x144>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d013      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a30      	ldr	r2, [pc, #192]	; (8008d38 <DMA_CalcBaseAndBitshift+0x148>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00e      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2f      	ldr	r2, [pc, #188]	; (8008d3c <DMA_CalcBaseAndBitshift+0x14c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d009      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	; (8008d40 <DMA_CalcBaseAndBitshift+0x150>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d004      	beq.n	8008c98 <DMA_CalcBaseAndBitshift+0xa8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2c      	ldr	r2, [pc, #176]	; (8008d44 <DMA_CalcBaseAndBitshift+0x154>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d101      	bne.n	8008c9c <DMA_CalcBaseAndBitshift+0xac>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e000      	b.n	8008c9e <DMA_CalcBaseAndBitshift+0xae>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d024      	beq.n	8008cec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	3b10      	subs	r3, #16
 8008caa:	4a27      	ldr	r2, [pc, #156]	; (8008d48 <DMA_CalcBaseAndBitshift+0x158>)
 8008cac:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb0:	091b      	lsrs	r3, r3, #4
 8008cb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	4a24      	ldr	r2, [pc, #144]	; (8008d4c <DMA_CalcBaseAndBitshift+0x15c>)
 8008cbc:	5cd3      	ldrb	r3, [r2, r3]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d908      	bls.n	8008cdc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <DMA_CalcBaseAndBitshift+0x160>)
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8008cda:	e00d      	b.n	8008cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <DMA_CalcBaseAndBitshift+0x160>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8008cea:	e005      	b.n	8008cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	40020010 	.word	0x40020010
 8008d0c:	40020028 	.word	0x40020028
 8008d10:	40020040 	.word	0x40020040
 8008d14:	40020058 	.word	0x40020058
 8008d18:	40020070 	.word	0x40020070
 8008d1c:	40020088 	.word	0x40020088
 8008d20:	400200a0 	.word	0x400200a0
 8008d24:	400200b8 	.word	0x400200b8
 8008d28:	40020410 	.word	0x40020410
 8008d2c:	40020428 	.word	0x40020428
 8008d30:	40020440 	.word	0x40020440
 8008d34:	40020458 	.word	0x40020458
 8008d38:	40020470 	.word	0x40020470
 8008d3c:	40020488 	.word	0x40020488
 8008d40:	400204a0 	.word	0x400204a0
 8008d44:	400204b8 	.word	0x400204b8
 8008d48:	aaaaaaab 	.word	0xaaaaaaab
 8008d4c:	08018988 	.word	0x08018988
 8008d50:	fffffc00 	.word	0xfffffc00

08008d54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d120      	bne.n	8008daa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d858      	bhi.n	8008e22 <DMA_CheckFifoParam+0xce>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <DMA_CheckFifoParam+0x24>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d9b 	.word	0x08008d9b
 8008d80:	08008d89 	.word	0x08008d89
 8008d84:	08008e23 	.word	0x08008e23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d048      	beq.n	8008e26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d98:	e045      	b.n	8008e26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008da2:	d142      	bne.n	8008e2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008da8:	e03f      	b.n	8008e2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db2:	d123      	bne.n	8008dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d838      	bhi.n	8008e2e <DMA_CheckFifoParam+0xda>
 8008dbc:	a201      	add	r2, pc, #4	; (adr r2, 8008dc4 <DMA_CheckFifoParam+0x70>)
 8008dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc2:	bf00      	nop
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008ddb 	.word	0x08008ddb
 8008dcc:	08008dd5 	.word	0x08008dd5
 8008dd0:	08008ded 	.word	0x08008ded
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8008dd8:	e030      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d025      	beq.n	8008e32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dea:	e022      	b.n	8008e32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008df4:	d11f      	bne.n	8008e36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dfa:	e01c      	b.n	8008e36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d902      	bls.n	8008e0a <DMA_CheckFifoParam+0xb6>
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d003      	beq.n	8008e10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008e08:	e018      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8008e0e:	e015      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00e      	beq.n	8008e3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e00b      	b.n	8008e3a <DMA_CheckFifoParam+0xe6>
        break;
 8008e22:	bf00      	nop
 8008e24:	e00a      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        break;
 8008e26:	bf00      	nop
 8008e28:	e008      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        break;
 8008e2a:	bf00      	nop
 8008e2c:	e006      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        break;
 8008e2e:	bf00      	nop
 8008e30:	e004      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        break;
 8008e32:	bf00      	nop
 8008e34:	e002      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
        break;
 8008e36:	bf00      	nop
 8008e38:	e000      	b.n	8008e3c <DMA_CheckFifoParam+0xe8>
    break;
 8008e3a:	bf00      	nop
    }
  }

  return status;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a38      	ldr	r2, [pc, #224]	; (8008f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d022      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a36      	ldr	r2, [pc, #216]	; (8008f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01d      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a35      	ldr	r2, [pc, #212]	; (8008f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d018      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a33      	ldr	r2, [pc, #204]	; (8008f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a32      	ldr	r2, [pc, #200]	; (8008f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a30      	ldr	r2, [pc, #192]	; (8008f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d009      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a2f      	ldr	r2, [pc, #188]	; (8008f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d004      	beq.n	8008eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a2d      	ldr	r2, [pc, #180]	; (8008f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d101      	bne.n	8008eae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	3b08      	subs	r3, #8
 8008ebc:	4a28      	ldr	r2, [pc, #160]	; (8008f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	091b      	lsrs	r3, r3, #4
 8008ec4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4b26      	ldr	r3, [pc, #152]	; (8008f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008ed8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f003 031f 	and.w	r3, r3, #31
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	409a      	lsls	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008ee8:	e024      	b.n	8008f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	3b10      	subs	r3, #16
 8008ef2:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d806      	bhi.n	8008f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d902      	bls.n	8008f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	4b18      	ldr	r3, [pc, #96]	; (8008f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a16      	ldr	r2, [pc, #88]	; (8008f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008f24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f003 031f 	and.w	r3, r3, #31
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	409a      	lsls	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	58025408 	.word	0x58025408
 8008f44:	5802541c 	.word	0x5802541c
 8008f48:	58025430 	.word	0x58025430
 8008f4c:	58025444 	.word	0x58025444
 8008f50:	58025458 	.word	0x58025458
 8008f54:	5802546c 	.word	0x5802546c
 8008f58:	58025480 	.word	0x58025480
 8008f5c:	58025494 	.word	0x58025494
 8008f60:	cccccccd 	.word	0xcccccccd
 8008f64:	16009600 	.word	0x16009600
 8008f68:	58025880 	.word	0x58025880
 8008f6c:	aaaaaaab 	.word	0xaaaaaaab
 8008f70:	400204b8 	.word	0x400204b8
 8008f74:	4002040f 	.word	0x4002040f
 8008f78:	10008200 	.word	0x10008200
 8008f7c:	40020880 	.word	0x40020880

08008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04a      	beq.n	800902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d847      	bhi.n	800902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a25      	ldr	r2, [pc, #148]	; (8009038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d022      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a24      	ldr	r2, [pc, #144]	; (800903c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d01d      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a22      	ldr	r2, [pc, #136]	; (8009040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d018      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a21      	ldr	r2, [pc, #132]	; (8009044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d013      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1f      	ldr	r2, [pc, #124]	; (8009048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00e      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1e      	ldr	r2, [pc, #120]	; (800904c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d009      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1c      	ldr	r2, [pc, #112]	; (8009050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d004      	beq.n	8008fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a1b      	ldr	r2, [pc, #108]	; (8009054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d101      	bne.n	8008ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e000      	b.n	8008ff2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4b17      	ldr	r3, [pc, #92]	; (8009058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	461a      	mov	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a15      	ldr	r2, [pc, #84]	; (800905c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009008:	671a      	str	r2, [r3, #112]	; 0x70
 800900a:	e009      	b.n	8009020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4b14      	ldr	r3, [pc, #80]	; (8009060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	461a      	mov	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a11      	ldr	r2, [pc, #68]	; (8009064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800901e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3b01      	subs	r3, #1
 8009024:	2201      	movs	r2, #1
 8009026:	409a      	lsls	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800902c:	bf00      	nop
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	58025408 	.word	0x58025408
 800903c:	5802541c 	.word	0x5802541c
 8009040:	58025430 	.word	0x58025430
 8009044:	58025444 	.word	0x58025444
 8009048:	58025458 	.word	0x58025458
 800904c:	5802546c 	.word	0x5802546c
 8009050:	58025480 	.word	0x58025480
 8009054:	58025494 	.word	0x58025494
 8009058:	1600963f 	.word	0x1600963f
 800905c:	58025940 	.word	0x58025940
 8009060:	1000823f 	.word	0x1000823f
 8009064:	40020940 	.word	0x40020940

08009068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	; 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009072:	2300      	movs	r3, #0
 8009074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009076:	4b89      	ldr	r3, [pc, #548]	; (800929c <HAL_GPIO_Init+0x234>)
 8009078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800907a:	e194      	b.n	80093a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	2101      	movs	r1, #1
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	fa01 f303 	lsl.w	r3, r1, r3
 8009088:	4013      	ands	r3, r2
 800908a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 8186 	beq.w	80093a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	2b01      	cmp	r3, #1
 800909e:	d005      	beq.n	80090ac <HAL_GPIO_Init+0x44>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f003 0303 	and.w	r3, r3, #3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d130      	bne.n	800910e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	2203      	movs	r2, #3
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	43db      	mvns	r3, r3
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	4013      	ands	r3, r2
 80090c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80090e2:	2201      	movs	r2, #1
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43db      	mvns	r3, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4013      	ands	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	f003 0201 	and.w	r2, r3, #1
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	4313      	orrs	r3, r2
 8009106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69ba      	ldr	r2, [r7, #24]
 800910c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d017      	beq.n	800914a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	2203      	movs	r2, #3
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	43db      	mvns	r3, r3
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4013      	ands	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	4313      	orrs	r3, r2
 8009142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d123      	bne.n	800919e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	08da      	lsrs	r2, r3, #3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3208      	adds	r2, #8
 800915e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	220f      	movs	r2, #15
 800916e:	fa02 f303 	lsl.w	r3, r2, r3
 8009172:	43db      	mvns	r3, r3
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	4013      	ands	r3, r2
 8009178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	691a      	ldr	r2, [r3, #16]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	4313      	orrs	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	08da      	lsrs	r2, r3, #3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3208      	adds	r2, #8
 8009198:	69b9      	ldr	r1, [r7, #24]
 800919a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	2203      	movs	r2, #3
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	43db      	mvns	r3, r3
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	4013      	ands	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f003 0203 	and.w	r2, r3, #3
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80e0 	beq.w	80093a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091e0:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <HAL_GPIO_Init+0x238>)
 80091e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091e6:	4a2e      	ldr	r2, [pc, #184]	; (80092a0 <HAL_GPIO_Init+0x238>)
 80091e8:	f043 0302 	orr.w	r3, r3, #2
 80091ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80091f0:	4b2b      	ldr	r3, [pc, #172]	; (80092a0 <HAL_GPIO_Init+0x238>)
 80091f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091fe:	4a29      	ldr	r2, [pc, #164]	; (80092a4 <HAL_GPIO_Init+0x23c>)
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	089b      	lsrs	r3, r3, #2
 8009204:	3302      	adds	r3, #2
 8009206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	220f      	movs	r2, #15
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43db      	mvns	r3, r3
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	4013      	ands	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a20      	ldr	r2, [pc, #128]	; (80092a8 <HAL_GPIO_Init+0x240>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d052      	beq.n	80092d0 <HAL_GPIO_Init+0x268>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a1f      	ldr	r2, [pc, #124]	; (80092ac <HAL_GPIO_Init+0x244>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d031      	beq.n	8009296 <HAL_GPIO_Init+0x22e>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a1e      	ldr	r2, [pc, #120]	; (80092b0 <HAL_GPIO_Init+0x248>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d02b      	beq.n	8009292 <HAL_GPIO_Init+0x22a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <HAL_GPIO_Init+0x24c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d025      	beq.n	800928e <HAL_GPIO_Init+0x226>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1c      	ldr	r2, [pc, #112]	; (80092b8 <HAL_GPIO_Init+0x250>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d01f      	beq.n	800928a <HAL_GPIO_Init+0x222>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <HAL_GPIO_Init+0x254>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d019      	beq.n	8009286 <HAL_GPIO_Init+0x21e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <HAL_GPIO_Init+0x258>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d013      	beq.n	8009282 <HAL_GPIO_Init+0x21a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <HAL_GPIO_Init+0x25c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00d      	beq.n	800927e <HAL_GPIO_Init+0x216>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <HAL_GPIO_Init+0x260>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d007      	beq.n	800927a <HAL_GPIO_Init+0x212>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <HAL_GPIO_Init+0x264>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d101      	bne.n	8009276 <HAL_GPIO_Init+0x20e>
 8009272:	2309      	movs	r3, #9
 8009274:	e02d      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 8009276:	230a      	movs	r3, #10
 8009278:	e02b      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 800927a:	2308      	movs	r3, #8
 800927c:	e029      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 800927e:	2307      	movs	r3, #7
 8009280:	e027      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 8009282:	2306      	movs	r3, #6
 8009284:	e025      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 8009286:	2305      	movs	r3, #5
 8009288:	e023      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 800928a:	2304      	movs	r3, #4
 800928c:	e021      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 800928e:	2303      	movs	r3, #3
 8009290:	e01f      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 8009292:	2302      	movs	r3, #2
 8009294:	e01d      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 8009296:	2301      	movs	r3, #1
 8009298:	e01b      	b.n	80092d2 <HAL_GPIO_Init+0x26a>
 800929a:	bf00      	nop
 800929c:	58000080 	.word	0x58000080
 80092a0:	58024400 	.word	0x58024400
 80092a4:	58000400 	.word	0x58000400
 80092a8:	58020000 	.word	0x58020000
 80092ac:	58020400 	.word	0x58020400
 80092b0:	58020800 	.word	0x58020800
 80092b4:	58020c00 	.word	0x58020c00
 80092b8:	58021000 	.word	0x58021000
 80092bc:	58021400 	.word	0x58021400
 80092c0:	58021800 	.word	0x58021800
 80092c4:	58021c00 	.word	0x58021c00
 80092c8:	58022000 	.word	0x58022000
 80092cc:	58022400 	.word	0x58022400
 80092d0:	2300      	movs	r3, #0
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	f002 0203 	and.w	r2, r2, #3
 80092d8:	0092      	lsls	r2, r2, #2
 80092da:	4093      	lsls	r3, r2
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	4313      	orrs	r3, r2
 80092e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80092e2:	4938      	ldr	r1, [pc, #224]	; (80093c4 <HAL_GPIO_Init+0x35c>)
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	089b      	lsrs	r3, r3, #2
 80092e8:	3302      	adds	r3, #2
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80092f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	43db      	mvns	r3, r3
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	4013      	ands	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	4313      	orrs	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800931e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	43db      	mvns	r3, r3
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	4013      	ands	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	43db      	mvns	r3, r3
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	4013      	ands	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	43db      	mvns	r3, r3
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	4013      	ands	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	4313      	orrs	r3, r2
 8009398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	69ba      	ldr	r2, [r7, #24]
 800939e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	3301      	adds	r3, #1
 80093a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f47f ae63 	bne.w	800907c <HAL_GPIO_Init+0x14>
  }
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3724      	adds	r7, #36	; 0x24
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	58000400 	.word	0x58000400

080093c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	887b      	ldrh	r3, [r7, #2]
 80093da:	4013      	ands	r3, r2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e001      	b.n	80093ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	807b      	strh	r3, [r7, #2]
 8009404:	4613      	mov	r3, r2
 8009406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009408:	787b      	ldrb	r3, [r7, #1]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800940e:	887a      	ldrh	r2, [r7, #2]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009414:	e003      	b.n	800941e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009416:	887b      	ldrh	r3, [r7, #2]
 8009418:	041a      	lsls	r2, r3, #16
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	619a      	str	r2, [r3, #24]
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800942a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942c:	b08f      	sub	sp, #60	; 0x3c
 800942e:	af0a      	add	r7, sp, #40	; 0x28
 8009430:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e054      	b.n	80094e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fb fa76 	bl	8004948 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2203      	movs	r2, #3
 8009460:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f00b faf3 	bl	8014a66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	687e      	ldr	r6, [r7, #4]
 8009488:	466d      	mov	r5, sp
 800948a:	f106 0410 	add.w	r4, r6, #16
 800948e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800949a:	e885 0003 	stmia.w	r5, {r0, r1}
 800949e:	1d33      	adds	r3, r6, #4
 80094a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094a2:	6838      	ldr	r0, [r7, #0]
 80094a4:	f00b fa60 	bl	8014968 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2101      	movs	r1, #1
 80094ae:	4618      	mov	r0, r3
 80094b0:	f00b faea 	bl	8014a88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	687e      	ldr	r6, [r7, #4]
 80094bc:	466d      	mov	r5, sp
 80094be:	f106 0410 	add.w	r4, r6, #16
 80094c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80094d2:	1d33      	adds	r3, r6, #4
 80094d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094d6:	6838      	ldr	r0, [r7, #0]
 80094d8:	f00b fc92 	bl	8014e00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094ee <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094ee:	b590      	push	{r4, r7, lr}
 80094f0:	b089      	sub	sp, #36	; 0x24
 80094f2:	af04      	add	r7, sp, #16
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	70fb      	strb	r3, [r7, #3]
 8009500:	460b      	mov	r3, r1
 8009502:	70bb      	strb	r3, [r7, #2]
 8009504:	4613      	mov	r3, r2
 8009506:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_HCD_HC_Init+0x28>
 8009512:	2302      	movs	r3, #2
 8009514:	e076      	b.n	8009604 <HAL_HCD_HC_Init+0x116>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	212c      	movs	r1, #44	; 0x2c
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	333d      	adds	r3, #61	; 0x3d
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	212c      	movs	r1, #44	; 0x2c
 8009536:	fb01 f303 	mul.w	r3, r1, r3
 800953a:	4413      	add	r3, r2
 800953c:	3338      	adds	r3, #56	; 0x38
 800953e:	787a      	ldrb	r2, [r7, #1]
 8009540:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	212c      	movs	r1, #44	; 0x2c
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	4413      	add	r3, r2
 800954e:	3340      	adds	r3, #64	; 0x40
 8009550:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009552:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	212c      	movs	r1, #44	; 0x2c
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4413      	add	r3, r2
 8009560:	3339      	adds	r3, #57	; 0x39
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	212c      	movs	r1, #44	; 0x2c
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	4413      	add	r3, r2
 8009572:	333f      	adds	r3, #63	; 0x3f
 8009574:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009578:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	78ba      	ldrb	r2, [r7, #2]
 800957e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009582:	b2d0      	uxtb	r0, r2
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	212c      	movs	r1, #44	; 0x2c
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	333a      	adds	r3, #58	; 0x3a
 8009590:	4602      	mov	r2, r0
 8009592:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009594:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009598:	2b00      	cmp	r3, #0
 800959a:	da09      	bge.n	80095b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	212c      	movs	r1, #44	; 0x2c
 80095a2:	fb01 f303 	mul.w	r3, r1, r3
 80095a6:	4413      	add	r3, r2
 80095a8:	333b      	adds	r3, #59	; 0x3b
 80095aa:	2201      	movs	r2, #1
 80095ac:	701a      	strb	r2, [r3, #0]
 80095ae:	e008      	b.n	80095c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	212c      	movs	r1, #44	; 0x2c
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	333b      	adds	r3, #59	; 0x3b
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	212c      	movs	r1, #44	; 0x2c
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	4413      	add	r3, r2
 80095ce:	333c      	adds	r3, #60	; 0x3c
 80095d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80095d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	787c      	ldrb	r4, [r7, #1]
 80095dc:	78ba      	ldrb	r2, [r7, #2]
 80095de:	78f9      	ldrb	r1, [r7, #3]
 80095e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	4623      	mov	r3, r4
 80095f2:	f00b fd87 	bl	8015104 <USB_HC_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	bd90      	pop	{r4, r7, pc}

0800960c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_HCD_HC_Halt+0x1e>
 8009626:	2302      	movs	r3, #2
 8009628:	e00f      	b.n	800964a <HAL_HCD_HC_Halt+0x3e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	78fa      	ldrb	r2, [r7, #3]
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f00b ffd9 	bl	80155f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	461a      	mov	r2, r3
 8009662:	4603      	mov	r3, r0
 8009664:	70fb      	strb	r3, [r7, #3]
 8009666:	460b      	mov	r3, r1
 8009668:	70bb      	strb	r3, [r7, #2]
 800966a:	4613      	mov	r3, r2
 800966c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	212c      	movs	r1, #44	; 0x2c
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	333b      	adds	r3, #59	; 0x3b
 800967c:	78ba      	ldrb	r2, [r7, #2]
 800967e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	212c      	movs	r1, #44	; 0x2c
 8009686:	fb01 f303 	mul.w	r3, r1, r3
 800968a:	4413      	add	r3, r2
 800968c:	333f      	adds	r3, #63	; 0x3f
 800968e:	787a      	ldrb	r2, [r7, #1]
 8009690:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009692:	7c3b      	ldrb	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d112      	bne.n	80096be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	212c      	movs	r1, #44	; 0x2c
 800969e:	fb01 f303 	mul.w	r3, r1, r3
 80096a2:	4413      	add	r3, r2
 80096a4:	3342      	adds	r3, #66	; 0x42
 80096a6:	2203      	movs	r2, #3
 80096a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	212c      	movs	r1, #44	; 0x2c
 80096b0:	fb01 f303 	mul.w	r3, r1, r3
 80096b4:	4413      	add	r3, r2
 80096b6:	333d      	adds	r3, #61	; 0x3d
 80096b8:	7f3a      	ldrb	r2, [r7, #28]
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e008      	b.n	80096d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	212c      	movs	r1, #44	; 0x2c
 80096c4:	fb01 f303 	mul.w	r3, r1, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	3342      	adds	r3, #66	; 0x42
 80096cc:	2202      	movs	r2, #2
 80096ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80096d0:	787b      	ldrb	r3, [r7, #1]
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	f200 80c6 	bhi.w	8009864 <HAL_HCD_HC_SubmitRequest+0x210>
 80096d8:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80096da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096de:	bf00      	nop
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	08009851 	.word	0x08009851
 80096e8:	08009755 	.word	0x08009755
 80096ec:	080097d3 	.word	0x080097d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80096f0:	7c3b      	ldrb	r3, [r7, #16]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	f040 80b8 	bne.w	8009868 <HAL_HCD_HC_SubmitRequest+0x214>
 80096f8:	78bb      	ldrb	r3, [r7, #2]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f040 80b4 	bne.w	8009868 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009700:	8b3b      	ldrh	r3, [r7, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d108      	bne.n	8009718 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	212c      	movs	r1, #44	; 0x2c
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	4413      	add	r3, r2
 8009712:	3355      	adds	r3, #85	; 0x55
 8009714:	2201      	movs	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	212c      	movs	r1, #44	; 0x2c
 800971e:	fb01 f303 	mul.w	r3, r1, r3
 8009722:	4413      	add	r3, r2
 8009724:	3355      	adds	r3, #85	; 0x55
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	212c      	movs	r1, #44	; 0x2c
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	3342      	adds	r3, #66	; 0x42
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800973e:	e093      	b.n	8009868 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	212c      	movs	r1, #44	; 0x2c
 8009746:	fb01 f303 	mul.w	r3, r1, r3
 800974a:	4413      	add	r3, r2
 800974c:	3342      	adds	r3, #66	; 0x42
 800974e:	2202      	movs	r2, #2
 8009750:	701a      	strb	r2, [r3, #0]
      break;
 8009752:	e089      	b.n	8009868 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009754:	78bb      	ldrb	r3, [r7, #2]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d11d      	bne.n	8009796 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	212c      	movs	r1, #44	; 0x2c
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	3355      	adds	r3, #85	; 0x55
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	212c      	movs	r1, #44	; 0x2c
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	4413      	add	r3, r2
 800977a:	3342      	adds	r3, #66	; 0x42
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009780:	e073      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	212c      	movs	r1, #44	; 0x2c
 8009788:	fb01 f303 	mul.w	r3, r1, r3
 800978c:	4413      	add	r3, r2
 800978e:	3342      	adds	r3, #66	; 0x42
 8009790:	2202      	movs	r2, #2
 8009792:	701a      	strb	r2, [r3, #0]
      break;
 8009794:	e069      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	212c      	movs	r1, #44	; 0x2c
 800979c:	fb01 f303 	mul.w	r3, r1, r3
 80097a0:	4413      	add	r3, r2
 80097a2:	3354      	adds	r3, #84	; 0x54
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	212c      	movs	r1, #44	; 0x2c
 80097b0:	fb01 f303 	mul.w	r3, r1, r3
 80097b4:	4413      	add	r3, r2
 80097b6:	3342      	adds	r3, #66	; 0x42
 80097b8:	2200      	movs	r2, #0
 80097ba:	701a      	strb	r2, [r3, #0]
      break;
 80097bc:	e055      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	212c      	movs	r1, #44	; 0x2c
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	3342      	adds	r3, #66	; 0x42
 80097cc:	2202      	movs	r2, #2
 80097ce:	701a      	strb	r2, [r3, #0]
      break;
 80097d0:	e04b      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80097d2:	78bb      	ldrb	r3, [r7, #2]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11d      	bne.n	8009814 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	212c      	movs	r1, #44	; 0x2c
 80097de:	fb01 f303 	mul.w	r3, r1, r3
 80097e2:	4413      	add	r3, r2
 80097e4:	3355      	adds	r3, #85	; 0x55
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	212c      	movs	r1, #44	; 0x2c
 80097f2:	fb01 f303 	mul.w	r3, r1, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	3342      	adds	r3, #66	; 0x42
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80097fe:	e034      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	212c      	movs	r1, #44	; 0x2c
 8009806:	fb01 f303 	mul.w	r3, r1, r3
 800980a:	4413      	add	r3, r2
 800980c:	3342      	adds	r3, #66	; 0x42
 800980e:	2202      	movs	r2, #2
 8009810:	701a      	strb	r2, [r3, #0]
      break;
 8009812:	e02a      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	212c      	movs	r1, #44	; 0x2c
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	3354      	adds	r3, #84	; 0x54
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	212c      	movs	r1, #44	; 0x2c
 800982e:	fb01 f303 	mul.w	r3, r1, r3
 8009832:	4413      	add	r3, r2
 8009834:	3342      	adds	r3, #66	; 0x42
 8009836:	2200      	movs	r2, #0
 8009838:	701a      	strb	r2, [r3, #0]
      break;
 800983a:	e016      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	212c      	movs	r1, #44	; 0x2c
 8009842:	fb01 f303 	mul.w	r3, r1, r3
 8009846:	4413      	add	r3, r2
 8009848:	3342      	adds	r3, #66	; 0x42
 800984a:	2202      	movs	r2, #2
 800984c:	701a      	strb	r2, [r3, #0]
      break;
 800984e:	e00c      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	212c      	movs	r1, #44	; 0x2c
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	4413      	add	r3, r2
 800985c:	3342      	adds	r3, #66	; 0x42
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
      break;
 8009862:	e002      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009864:	bf00      	nop
 8009866:	e000      	b.n	800986a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8009868:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800986a:	78fb      	ldrb	r3, [r7, #3]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	212c      	movs	r1, #44	; 0x2c
 8009870:	fb01 f303 	mul.w	r3, r1, r3
 8009874:	4413      	add	r3, r2
 8009876:	3344      	adds	r3, #68	; 0x44
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	8b3a      	ldrh	r2, [r7, #24]
 8009880:	6879      	ldr	r1, [r7, #4]
 8009882:	202c      	movs	r0, #44	; 0x2c
 8009884:	fb00 f303 	mul.w	r3, r0, r3
 8009888:	440b      	add	r3, r1
 800988a:	334c      	adds	r3, #76	; 0x4c
 800988c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	212c      	movs	r1, #44	; 0x2c
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	4413      	add	r3, r2
 800989a:	3360      	adds	r3, #96	; 0x60
 800989c:	2200      	movs	r2, #0
 800989e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	212c      	movs	r1, #44	; 0x2c
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	4413      	add	r3, r2
 80098ac:	3350      	adds	r3, #80	; 0x50
 80098ae:	2200      	movs	r2, #0
 80098b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	212c      	movs	r1, #44	; 0x2c
 80098b8:	fb01 f303 	mul.w	r3, r1, r3
 80098bc:	4413      	add	r3, r2
 80098be:	3339      	adds	r3, #57	; 0x39
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	212c      	movs	r1, #44	; 0x2c
 80098ca:	fb01 f303 	mul.w	r3, r1, r3
 80098ce:	4413      	add	r3, r2
 80098d0:	3361      	adds	r3, #97	; 0x61
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6818      	ldr	r0, [r3, #0]
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	222c      	movs	r2, #44	; 0x2c
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	3338      	adds	r3, #56	; 0x38
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	18d1      	adds	r1, r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	f00b fd2c 	bl	801534c <USB_HC_StartXfer>
 80098f4:	4603      	mov	r3, r0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop

08009900 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f00b fa30 	bl	8014d7c <USB_GetMode>
 800991c:	4603      	mov	r3, r0
 800991e:	2b01      	cmp	r3, #1
 8009920:	f040 80fa 	bne.w	8009b18 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f00b f9f3 	bl	8014d14 <USB_ReadInterrupts>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80f0 	beq.w	8009b16 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f00b f9ea 	bl	8014d14 <USB_ReadInterrupts>
 8009940:	4603      	mov	r3, r0
 8009942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800994a:	d104      	bne.n	8009956 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009954:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f00b f9da 	bl	8014d14 <USB_ReadInterrupts>
 8009960:	4603      	mov	r3, r0
 8009962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800996a:	d104      	bne.n	8009976 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f00b f9ca 	bl	8014d14 <USB_ReadInterrupts>
 8009980:	4603      	mov	r3, r0
 8009982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800998a:	d104      	bne.n	8009996 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009994:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f00b f9ba 	bl	8014d14 <USB_ReadInterrupts>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d103      	bne.n	80099b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2202      	movs	r2, #2
 80099b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f00b f9ac 	bl	8014d14 <USB_ReadInterrupts>
 80099bc:	4603      	mov	r3, r0
 80099be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c6:	d120      	bne.n	8009a0a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80099d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d113      	bne.n	8009a0a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80099e2:	2110      	movs	r1, #16
 80099e4:	6938      	ldr	r0, [r7, #16]
 80099e6:	f00b f89b 	bl	8014b20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80099ea:	6938      	ldr	r0, [r7, #16]
 80099ec:	f00b f8cc 	bl	8014b88 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d105      	bne.n	8009a04 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2101      	movs	r1, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f00b fab8 	bl	8014f74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7fb f81d 	bl	8004a44 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f00b f980 	bl	8014d14 <USB_ReadInterrupts>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a1e:	d102      	bne.n	8009a26 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f9a3 	bl	800ad6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f00b f972 	bl	8014d14 <USB_ReadInterrupts>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f003 0308 	and.w	r3, r3, #8
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d106      	bne.n	8009a48 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fa ffe6 	bl	8004a0c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2208      	movs	r2, #8
 8009a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f00b f961 	bl	8014d14 <USB_ReadInterrupts>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d101      	bne.n	8009a60 <HAL_HCD_IRQHandler+0x160>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <HAL_HCD_IRQHandler+0x162>
 8009a60:	2300      	movs	r3, #0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d012      	beq.n	8009a8c <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	699a      	ldr	r2, [r3, #24]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0210 	bic.w	r2, r2, #16
 8009a74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 f8a6 	bl	800abc8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f042 0210 	orr.w	r2, r2, #16
 8009a8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f00b f93f 	bl	8014d14 <USB_ReadInterrupts>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aa0:	d13a      	bne.n	8009b18 <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f00b fd92 	bl	80155d0 <USB_HC_ReadInterrupt>
 8009aac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	617b      	str	r3, [r7, #20]
 8009ab2:	e025      	b.n	8009b00 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d018      	beq.n	8009afa <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ade:	d106      	bne.n	8009aee <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8ab 	bl	8009c42 <HCD_HC_IN_IRQHandler>
 8009aec:	e005      	b.n	8009afa <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fcb5 	bl	800a464 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	3301      	adds	r3, #1
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d3d4      	bcc.n	8009ab4 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b12:	615a      	str	r2, [r3, #20]
 8009b14:	e000      	b.n	8009b18 <HAL_HCD_IRQHandler+0x218>
      return;
 8009b16:	bf00      	nop
    }
  }
}
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_HCD_Start+0x16>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e013      	b.n	8009b5c <HAL_HCD_Start+0x3e>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2101      	movs	r1, #1
 8009b42:	4618      	mov	r0, r3
 8009b44:	f00b fa7d 	bl	8015042 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f00a ff79 	bl	8014a44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d101      	bne.n	8009b7a <HAL_HCD_Stop+0x16>
 8009b76:	2302      	movs	r3, #2
 8009b78:	e00d      	b.n	8009b96 <HAL_HCD_Stop+0x32>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f00b fe6c 	bl	8015864 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f00b fa1f 	bl	8014fee <USB_ResetPort>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	212c      	movs	r1, #44	; 0x2c
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	3360      	adds	r3, #96	; 0x60
 8009bd4:	781b      	ldrb	r3, [r3, #0]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b083      	sub	sp, #12
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	460b      	mov	r3, r1
 8009bec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	212c      	movs	r1, #44	; 0x2c
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	3350      	adds	r3, #80	; 0x50
 8009bfc:	681b      	ldr	r3, [r3, #0]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f00b fa63 	bl	80150e2 <USB_GetCurrentFrame>
 8009c1c:	4603      	mov	r3, r0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f00b fa3e 	bl	80150b4 <USB_GetHostSpeed>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f00b f86a 	bl	8014d3a <USB_ReadChInterrupts>
 8009c66:	4603      	mov	r3, r0
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d119      	bne.n	8009ca4 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	2304      	movs	r3, #4
 8009c80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	212c      	movs	r1, #44	; 0x2c
 8009c88:	fb01 f303 	mul.w	r3, r1, r3
 8009c8c:	4413      	add	r3, r2
 8009c8e:	3361      	adds	r3, #97	; 0x61
 8009c90:	2207      	movs	r2, #7
 8009c92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f00b fca8 	bl	80155f2 <USB_HC_Halt>
 8009ca2:	e09a      	b.n	8009dda <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f00b f844 	bl	8014d3a <USB_ReadChInterrupts>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cbc:	d11a      	bne.n	8009cf4 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	212c      	movs	r1, #44	; 0x2c
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	4413      	add	r3, r2
 8009cde:	3361      	adds	r3, #97	; 0x61
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	78fa      	ldrb	r2, [r7, #3]
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f00b fc80 	bl	80155f2 <USB_HC_Halt>
 8009cf2:	e072      	b.n	8009dda <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	78fa      	ldrb	r2, [r7, #3]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f00b f81c 	bl	8014d3a <USB_ReadChInterrupts>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d119      	bne.n	8009d40 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d18:	461a      	mov	r2, r3
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	212c      	movs	r1, #44	; 0x2c
 8009d24:	fb01 f303 	mul.w	r3, r1, r3
 8009d28:	4413      	add	r3, r2
 8009d2a:	3361      	adds	r3, #97	; 0x61
 8009d2c:	2206      	movs	r2, #6
 8009d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f00b fc5a 	bl	80155f2 <USB_HC_Halt>
 8009d3e:	e04c      	b.n	8009dda <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f00a fff6 	bl	8014d3a <USB_ReadChInterrupts>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d58:	d11a      	bne.n	8009d90 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d66:	461a      	mov	r2, r3
 8009d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	212c      	movs	r1, #44	; 0x2c
 8009d74:	fb01 f303 	mul.w	r3, r1, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	3361      	adds	r3, #97	; 0x61
 8009d7c:	2209      	movs	r2, #9
 8009d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f00b fc32 	bl	80155f2 <USB_HC_Halt>
 8009d8e:	e024      	b.n	8009dda <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	4611      	mov	r1, r2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f00a ffce 	bl	8014d3a <USB_ReadChInterrupts>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da4:	2b80      	cmp	r3, #128	; 0x80
 8009da6:	d118      	bne.n	8009dda <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db4:	461a      	mov	r2, r3
 8009db6:	2380      	movs	r3, #128	; 0x80
 8009db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	212c      	movs	r1, #44	; 0x2c
 8009dc0:	fb01 f303 	mul.w	r3, r1, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3361      	adds	r3, #97	; 0x61
 8009dc8:	2207      	movs	r2, #7
 8009dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f00b fc0c 	bl	80155f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f00a ffa9 	bl	8014d3a <USB_ReadChInterrupts>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df2:	d111      	bne.n	8009e18 <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	78fa      	ldrb	r2, [r7, #3]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f00b fbf8 	bl	80155f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e14:	6093      	str	r3, [r2, #8]
 8009e16:	e322      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f00a ff8a 	bl	8014d3a <USB_ReadChInterrupts>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	f040 80f0 	bne.w	800a012 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009e32:	78fb      	ldrb	r3, [r7, #3]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3e:	461a      	mov	r2, r3
 8009e40:	2320      	movs	r3, #32
 8009e42:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d019      	beq.n	8009e80 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	212c      	movs	r1, #44	; 0x2c
 8009e52:	fb01 f303 	mul.w	r3, r1, r3
 8009e56:	4413      	add	r3, r2
 8009e58:	3348      	adds	r3, #72	; 0x48
 8009e5a:	6819      	ldr	r1, [r3, #0]
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	1a8a      	subs	r2, r1, r2
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	202c      	movs	r0, #44	; 0x2c
 8009e76:	fb00 f303 	mul.w	r3, r0, r3
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3350      	adds	r3, #80	; 0x50
 8009e7e:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	212c      	movs	r1, #44	; 0x2c
 8009e86:	fb01 f303 	mul.w	r3, r1, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3361      	adds	r3, #97	; 0x61
 8009e8e:	2201      	movs	r2, #1
 8009e90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	212c      	movs	r1, #44	; 0x2c
 8009e98:	fb01 f303 	mul.w	r3, r1, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	335c      	adds	r3, #92	; 0x5c
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	212c      	movs	r1, #44	; 0x2c
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	4413      	add	r3, r2
 8009ec2:	333f      	adds	r3, #63	; 0x3f
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d009      	beq.n	8009ede <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	212c      	movs	r1, #44	; 0x2c
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	333f      	adds	r3, #63	; 0x3f
 8009ed8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d110      	bne.n	8009f00 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f00b fb83 	bl	80155f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef8:	461a      	mov	r2, r3
 8009efa:	2310      	movs	r3, #16
 8009efc:	6093      	str	r3, [r2, #8]
 8009efe:	e039      	b.n	8009f74 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	212c      	movs	r1, #44	; 0x2c
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	333f      	adds	r3, #63	; 0x3f
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d009      	beq.n	8009f28 <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	212c      	movs	r1, #44	; 0x2c
 8009f1a:	fb01 f303 	mul.w	r3, r1, r3
 8009f1e:	4413      	add	r3, r2
 8009f20:	333f      	adds	r3, #63	; 0x3f
 8009f22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d125      	bne.n	8009f74 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f46:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	212c      	movs	r1, #44	; 0x2c
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	4413      	add	r3, r2
 8009f54:	3360      	adds	r3, #96	; 0x60
 8009f56:	2201      	movs	r2, #1
 8009f58:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	212c      	movs	r1, #44	; 0x2c
 8009f60:	fb01 f303 	mul.w	r3, r1, r3
 8009f64:	4413      	add	r3, r2
 8009f66:	3360      	adds	r3, #96	; 0x60
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7fa fd76 	bl	8004a60 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d135      	bne.n	8009fe8 <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	212c      	movs	r1, #44	; 0x2c
 8009f82:	fb01 f303 	mul.w	r3, r1, r3
 8009f86:	4413      	add	r3, r2
 8009f88:	3350      	adds	r3, #80	; 0x50
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	202c      	movs	r0, #44	; 0x2c
 8009f92:	fb00 f202 	mul.w	r2, r0, r2
 8009f96:	440a      	add	r2, r1
 8009f98:	3240      	adds	r2, #64	; 0x40
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	202c      	movs	r0, #44	; 0x2c
 8009fa6:	fb00 f202 	mul.w	r2, r0, r2
 8009faa:	440a      	add	r2, r1
 8009fac:	3240      	adds	r2, #64	; 0x40
 8009fae:	8812      	ldrh	r2, [r2, #0]
 8009fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 8250 	beq.w	800a45e <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	212c      	movs	r1, #44	; 0x2c
 8009fc4:	fb01 f303 	mul.w	r3, r1, r3
 8009fc8:	4413      	add	r3, r2
 8009fca:	3354      	adds	r3, #84	; 0x54
 8009fcc:	781a      	ldrb	r2, [r3, #0]
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	f082 0201 	eor.w	r2, r2, #1
 8009fd4:	b2d0      	uxtb	r0, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	212c      	movs	r1, #44	; 0x2c
 8009fda:	fb01 f303 	mul.w	r3, r1, r3
 8009fde:	4413      	add	r3, r2
 8009fe0:	3354      	adds	r3, #84	; 0x54
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	e23a      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	212c      	movs	r1, #44	; 0x2c
 8009fee:	fb01 f303 	mul.w	r3, r1, r3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3354      	adds	r3, #84	; 0x54
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	f082 0201 	eor.w	r2, r2, #1
 8009ffe:	b2d0      	uxtb	r0, r2
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	212c      	movs	r1, #44	; 0x2c
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	4413      	add	r3, r2
 800a00a:	3354      	adds	r3, #84	; 0x54
 800a00c:	4602      	mov	r2, r0
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	e225      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f00a fe8d 	bl	8014d3a <USB_ReadChInterrupts>
 800a020:	4603      	mov	r3, r0
 800a022:	f003 0320 	and.w	r3, r3, #32
 800a026:	2b20      	cmp	r3, #32
 800a028:	d109      	bne.n	800a03e <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4413      	add	r3, r2
 800a032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a036:	461a      	mov	r2, r3
 800a038:	2320      	movs	r3, #32
 800a03a:	6093      	str	r3, [r2, #8]
 800a03c:	e20f      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	4611      	mov	r1, r2
 800a046:	4618      	mov	r0, r3
 800a048:	f00a fe77 	bl	8014d3a <USB_ReadChInterrupts>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b02      	cmp	r3, #2
 800a054:	f040 8168 	bne.w	800a328 <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a064:	461a      	mov	r2, r3
 800a066:	2302      	movs	r3, #2
 800a068:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	212c      	movs	r1, #44	; 0x2c
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	4413      	add	r3, r2
 800a076:	3361      	adds	r3, #97	; 0x61
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d112      	bne.n	800a0a4 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	212c      	movs	r1, #44	; 0x2c
 800a084:	fb01 f303 	mul.w	r3, r1, r3
 800a088:	4413      	add	r3, r2
 800a08a:	3361      	adds	r3, #97	; 0x61
 800a08c:	2202      	movs	r2, #2
 800a08e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	212c      	movs	r1, #44	; 0x2c
 800a096:	fb01 f303 	mul.w	r3, r1, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	3360      	adds	r3, #96	; 0x60
 800a09e:	2201      	movs	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e133      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	212c      	movs	r1, #44	; 0x2c
 800a0aa:	fb01 f303 	mul.w	r3, r1, r3
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3361      	adds	r3, #97	; 0x61
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b06      	cmp	r3, #6
 800a0b6:	d112      	bne.n	800a0de <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	212c      	movs	r1, #44	; 0x2c
 800a0be:	fb01 f303 	mul.w	r3, r1, r3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	3361      	adds	r3, #97	; 0x61
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	212c      	movs	r1, #44	; 0x2c
 800a0d0:	fb01 f303 	mul.w	r3, r1, r3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3360      	adds	r3, #96	; 0x60
 800a0d8:	2205      	movs	r2, #5
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	e116      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	212c      	movs	r1, #44	; 0x2c
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3361      	adds	r3, #97	; 0x61
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b07      	cmp	r3, #7
 800a0f0:	d009      	beq.n	800a106 <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	212c      	movs	r1, #44	; 0x2c
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3361      	adds	r3, #97	; 0x61
 800a100:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a102:	2b09      	cmp	r3, #9
 800a104:	d158      	bne.n	800a1b8 <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	212c      	movs	r1, #44	; 0x2c
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	4413      	add	r3, r2
 800a112:	3361      	adds	r3, #97	; 0x61
 800a114:	2202      	movs	r2, #2
 800a116:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	222c      	movs	r2, #44	; 0x2c
 800a11e:	fb03 f202 	mul.w	r2, r3, r2
 800a122:	440a      	add	r2, r1
 800a124:	325c      	adds	r2, #92	; 0x5c
 800a126:	6812      	ldr	r2, [r2, #0]
 800a128:	3201      	adds	r2, #1
 800a12a:	6879      	ldr	r1, [r7, #4]
 800a12c:	202c      	movs	r0, #44	; 0x2c
 800a12e:	fb00 f303 	mul.w	r3, r0, r3
 800a132:	440b      	add	r3, r1
 800a134:	335c      	adds	r3, #92	; 0x5c
 800a136:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a138:	78fb      	ldrb	r3, [r7, #3]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	212c      	movs	r1, #44	; 0x2c
 800a13e:	fb01 f303 	mul.w	r3, r1, r3
 800a142:	4413      	add	r3, r2
 800a144:	335c      	adds	r3, #92	; 0x5c
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d912      	bls.n	800a172 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	212c      	movs	r1, #44	; 0x2c
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	4413      	add	r3, r2
 800a158:	335c      	adds	r3, #92	; 0x5c
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	212c      	movs	r1, #44	; 0x2c
 800a164:	fb01 f303 	mul.w	r3, r1, r3
 800a168:	4413      	add	r3, r2
 800a16a:	3360      	adds	r3, #96	; 0x60
 800a16c:	2204      	movs	r2, #4
 800a16e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a170:	e0cc      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a172:	78fb      	ldrb	r3, [r7, #3]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	212c      	movs	r1, #44	; 0x2c
 800a178:	fb01 f303 	mul.w	r3, r1, r3
 800a17c:	4413      	add	r3, r2
 800a17e:	3360      	adds	r3, #96	; 0x60
 800a180:	2202      	movs	r2, #2
 800a182:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a19a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a1b6:	e0a9      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	212c      	movs	r1, #44	; 0x2c
 800a1be:	fb01 f303 	mul.w	r3, r1, r3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	3361      	adds	r3, #97	; 0x61
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b05      	cmp	r3, #5
 800a1ca:	d109      	bne.n	800a1e0 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	212c      	movs	r1, #44	; 0x2c
 800a1d2:	fb01 f303 	mul.w	r3, r1, r3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3361      	adds	r3, #97	; 0x61
 800a1da:	2202      	movs	r2, #2
 800a1dc:	701a      	strb	r2, [r3, #0]
 800a1de:	e095      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	212c      	movs	r1, #44	; 0x2c
 800a1e6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3361      	adds	r3, #97	; 0x61
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d109      	bne.n	800a208 <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	212c      	movs	r1, #44	; 0x2c
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	4413      	add	r3, r2
 800a200:	3361      	adds	r3, #97	; 0x61
 800a202:	2202      	movs	r2, #2
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	e081      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a208:	78fb      	ldrb	r3, [r7, #3]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	212c      	movs	r1, #44	; 0x2c
 800a20e:	fb01 f303 	mul.w	r3, r1, r3
 800a212:	4413      	add	r3, r2
 800a214:	3361      	adds	r3, #97	; 0x61
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d13f      	bne.n	800a29c <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	212c      	movs	r1, #44	; 0x2c
 800a222:	fb01 f303 	mul.w	r3, r1, r3
 800a226:	4413      	add	r3, r2
 800a228:	3361      	adds	r3, #97	; 0x61
 800a22a:	2202      	movs	r2, #2
 800a22c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a22e:	78fb      	ldrb	r3, [r7, #3]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	212c      	movs	r1, #44	; 0x2c
 800a234:	fb01 f303 	mul.w	r3, r1, r3
 800a238:	4413      	add	r3, r2
 800a23a:	3360      	adds	r3, #96	; 0x60
 800a23c:	2202      	movs	r2, #2
 800a23e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	212c      	movs	r1, #44	; 0x2c
 800a246:	fb01 f303 	mul.w	r3, r1, r3
 800a24a:	4413      	add	r3, r2
 800a24c:	333f      	adds	r3, #63	; 0x3f
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	212c      	movs	r1, #44	; 0x2c
 800a25a:	fb01 f303 	mul.w	r3, r1, r3
 800a25e:	4413      	add	r3, r2
 800a260:	333f      	adds	r3, #63	; 0x3f
 800a262:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a264:	2b02      	cmp	r3, #2
 800a266:	d151      	bne.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a268:	78fb      	ldrb	r3, [r7, #3]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a27e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a286:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	461a      	mov	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e037      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a29c:	78fb      	ldrb	r3, [r7, #3]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	212c      	movs	r1, #44	; 0x2c
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3361      	adds	r3, #97	; 0x61
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d122      	bne.n	800a2f6 <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	212c      	movs	r1, #44	; 0x2c
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3361      	adds	r3, #97	; 0x61
 800a2be:	2202      	movs	r2, #2
 800a2c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	222c      	movs	r2, #44	; 0x2c
 800a2c8:	fb03 f202 	mul.w	r2, r3, r2
 800a2cc:	440a      	add	r2, r1
 800a2ce:	325c      	adds	r2, #92	; 0x5c
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	202c      	movs	r0, #44	; 0x2c
 800a2d8:	fb00 f303 	mul.w	r3, r0, r3
 800a2dc:	440b      	add	r3, r1
 800a2de:	335c      	adds	r3, #92	; 0x5c
 800a2e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a2e2:	78fb      	ldrb	r3, [r7, #3]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	212c      	movs	r1, #44	; 0x2c
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3360      	adds	r3, #96	; 0x60
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e00a      	b.n	800a30c <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	212c      	movs	r1, #44	; 0x2c
 800a2fc:	fb01 f303 	mul.w	r3, r1, r3
 800a300:	4413      	add	r3, r2
 800a302:	3361      	adds	r3, #97	; 0x61
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b02      	cmp	r3, #2
 800a308:	f000 80a8 	beq.w	800a45c <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	212c      	movs	r1, #44	; 0x2c
 800a312:	fb01 f303 	mul.w	r3, r1, r3
 800a316:	4413      	add	r3, r2
 800a318:	3360      	adds	r3, #96	; 0x60
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7fa fb9d 	bl	8004a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a326:	e09a      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f00a fd02 	bl	8014d3a <USB_ReadChInterrupts>
 800a336:	4603      	mov	r3, r0
 800a338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33c:	2b40      	cmp	r3, #64	; 0x40
 800a33e:	d122      	bne.n	800a386 <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4413      	add	r3, r2
 800a348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34c:	461a      	mov	r2, r3
 800a34e:	2340      	movs	r3, #64	; 0x40
 800a350:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	212c      	movs	r1, #44	; 0x2c
 800a358:	fb01 f303 	mul.w	r3, r1, r3
 800a35c:	4413      	add	r3, r2
 800a35e:	3361      	adds	r3, #97	; 0x61
 800a360:	2205      	movs	r2, #5
 800a362:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	212c      	movs	r1, #44	; 0x2c
 800a36a:	fb01 f303 	mul.w	r3, r1, r3
 800a36e:	4413      	add	r3, r2
 800a370:	335c      	adds	r3, #92	; 0x5c
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f00b f937 	bl	80155f2 <USB_HC_Halt>
 800a384:	e06b      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f00a fcd3 	bl	8014d3a <USB_ReadChInterrupts>
 800a394:	4603      	mov	r3, r0
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	d15f      	bne.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	212c      	movs	r1, #44	; 0x2c
 800a3a4:	fb01 f303 	mul.w	r3, r1, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	333f      	adds	r3, #63	; 0x3f
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d119      	bne.n	800a3e6 <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	212c      	movs	r1, #44	; 0x2c
 800a3b8:	fb01 f303 	mul.w	r3, r1, r3
 800a3bc:	4413      	add	r3, r2
 800a3be:	335c      	adds	r3, #92	; 0x5c
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	212c      	movs	r1, #44	; 0x2c
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	3361      	adds	r3, #97	; 0x61
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f00b f907 	bl	80155f2 <USB_HC_Halt>
 800a3e4:	e030      	b.n	800a448 <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	212c      	movs	r1, #44	; 0x2c
 800a3ec:	fb01 f303 	mul.w	r3, r1, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	333f      	adds	r3, #63	; 0x3f
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d009      	beq.n	800a40e <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	212c      	movs	r1, #44	; 0x2c
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	4413      	add	r3, r2
 800a406:	333f      	adds	r3, #63	; 0x3f
 800a408:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d11c      	bne.n	800a448 <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	212c      	movs	r1, #44	; 0x2c
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	4413      	add	r3, r2
 800a41a:	335c      	adds	r3, #92	; 0x5c
 800a41c:	2200      	movs	r2, #0
 800a41e:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10f      	bne.n	800a448 <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	212c      	movs	r1, #44	; 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3361      	adds	r3, #97	; 0x61
 800a436:	2204      	movs	r2, #4
 800a438:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f00b f8d5 	bl	80155f2 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a454:	461a      	mov	r2, r3
 800a456:	2310      	movs	r3, #16
 800a458:	6093      	str	r3, [r2, #8]
 800a45a:	e000      	b.n	800a45e <HCD_HC_IN_IRQHandler+0x81c>
        return;
 800a45c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f00a fc59 	bl	8014d3a <USB_ReadChInterrupts>
 800a488:	4603      	mov	r3, r0
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d119      	bne.n	800a4c6 <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a492:	78fb      	ldrb	r3, [r7, #3]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49e:	461a      	mov	r2, r3
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	212c      	movs	r1, #44	; 0x2c
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	3361      	adds	r3, #97	; 0x61
 800a4b2:	2207      	movs	r2, #7
 800a4b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	78fa      	ldrb	r2, [r7, #3]
 800a4bc:	4611      	mov	r1, r2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f00b f897 	bl	80155f2 <USB_HC_Halt>
 800a4c4:	e37d      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f00a fc33 	bl	8014d3a <USB_ReadChInterrupts>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b20      	cmp	r3, #32
 800a4dc:	d136      	bne.n	800a54c <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	2320      	movs	r3, #32
 800a4ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	212c      	movs	r1, #44	; 0x2c
 800a4f6:	fb01 f303 	mul.w	r3, r1, r3
 800a4fa:	4413      	add	r3, r2
 800a4fc:	333d      	adds	r3, #61	; 0x3d
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b01      	cmp	r3, #1
 800a502:	f040 835e 	bne.w	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	212c      	movs	r1, #44	; 0x2c
 800a50c:	fb01 f303 	mul.w	r3, r1, r3
 800a510:	4413      	add	r3, r2
 800a512:	333d      	adds	r3, #61	; 0x3d
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	212c      	movs	r1, #44	; 0x2c
 800a51e:	fb01 f303 	mul.w	r3, r1, r3
 800a522:	4413      	add	r3, r2
 800a524:	3360      	adds	r3, #96	; 0x60
 800a526:	2202      	movs	r2, #2
 800a528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	212c      	movs	r1, #44	; 0x2c
 800a530:	fb01 f303 	mul.w	r3, r1, r3
 800a534:	4413      	add	r3, r2
 800a536:	3361      	adds	r3, #97	; 0x61
 800a538:	2203      	movs	r2, #3
 800a53a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	78fa      	ldrb	r2, [r7, #3]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f00b f854 	bl	80155f2 <USB_HC_Halt>
 800a54a:	e33a      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f00a fbf0 	bl	8014d3a <USB_ReadChInterrupts>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a564:	d111      	bne.n	800a58a <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a566:	78fb      	ldrb	r3, [r7, #3]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a572:	461a      	mov	r2, r3
 800a574:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a578:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f00b f835 	bl	80155f2 <USB_HC_Halt>
 800a588:	e31b      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f00a fbd1 	bl	8014d3a <USB_ReadChInterrupts>
 800a598:	4603      	mov	r3, r0
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d140      	bne.n	800a624 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	212c      	movs	r1, #44	; 0x2c
 800a5a8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	335c      	adds	r3, #92	; 0x5c
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f00a fbbc 	bl	8014d3a <USB_ReadChInterrupts>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c8:	2b40      	cmp	r3, #64	; 0x40
 800a5ca:	d111      	bne.n	800a5f0 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a5cc:	78fb      	ldrb	r3, [r7, #3]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	212c      	movs	r1, #44	; 0x2c
 800a5d2:	fb01 f303 	mul.w	r3, r1, r3
 800a5d6:	4413      	add	r3, r2
 800a5d8:	333d      	adds	r3, #61	; 0x3d
 800a5da:	2201      	movs	r2, #1
 800a5dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a5f0:	78fb      	ldrb	r3, [r7, #3]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2301      	movs	r3, #1
 800a600:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	212c      	movs	r1, #44	; 0x2c
 800a608:	fb01 f303 	mul.w	r3, r1, r3
 800a60c:	4413      	add	r3, r2
 800a60e:	3361      	adds	r3, #97	; 0x61
 800a610:	2201      	movs	r2, #1
 800a612:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f00a ffe8 	bl	80155f2 <USB_HC_Halt>
 800a622:	e2ce      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	78fa      	ldrb	r2, [r7, #3]
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f00a fb84 	bl	8014d3a <USB_ReadChInterrupts>
 800a632:	4603      	mov	r3, r0
 800a634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a638:	2b40      	cmp	r3, #64	; 0x40
 800a63a:	d12b      	bne.n	800a694 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	212c      	movs	r1, #44	; 0x2c
 800a642:	fb01 f303 	mul.w	r3, r1, r3
 800a646:	4413      	add	r3, r2
 800a648:	3361      	adds	r3, #97	; 0x61
 800a64a:	2205      	movs	r2, #5
 800a64c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	212c      	movs	r1, #44	; 0x2c
 800a654:	fb01 f303 	mul.w	r3, r1, r3
 800a658:	4413      	add	r3, r2
 800a65a:	333d      	adds	r3, #61	; 0x3d
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a660:	78fb      	ldrb	r3, [r7, #3]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	212c      	movs	r1, #44	; 0x2c
 800a666:	fb01 f303 	mul.w	r3, r1, r3
 800a66a:	4413      	add	r3, r2
 800a66c:	335c      	adds	r3, #92	; 0x5c
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	78fa      	ldrb	r2, [r7, #3]
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f00a ffb9 	bl	80155f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a680:	78fb      	ldrb	r3, [r7, #3]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	4413      	add	r3, r2
 800a688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68c:	461a      	mov	r2, r3
 800a68e:	2340      	movs	r3, #64	; 0x40
 800a690:	6093      	str	r3, [r2, #8]
 800a692:	e296      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	4611      	mov	r1, r2
 800a69c:	4618      	mov	r0, r3
 800a69e:	f00a fb4c 	bl	8014d3a <USB_ReadChInterrupts>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d119      	bne.n	800a6e0 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	212c      	movs	r1, #44	; 0x2c
 800a6c4:	fb01 f303 	mul.w	r3, r1, r3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	3361      	adds	r3, #97	; 0x61
 800a6cc:	2206      	movs	r2, #6
 800a6ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	78fa      	ldrb	r2, [r7, #3]
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f00a ff8a 	bl	80155f2 <USB_HC_Halt>
 800a6de:	e270      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f00a fb26 	bl	8014d3a <USB_ReadChInterrupts>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b10      	cmp	r3, #16
 800a6f6:	d13f      	bne.n	800a778 <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	212c      	movs	r1, #44	; 0x2c
 800a6fe:	fb01 f303 	mul.w	r3, r1, r3
 800a702:	4413      	add	r3, r2
 800a704:	335c      	adds	r3, #92	; 0x5c
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	212c      	movs	r1, #44	; 0x2c
 800a710:	fb01 f303 	mul.w	r3, r1, r3
 800a714:	4413      	add	r3, r2
 800a716:	3361      	adds	r3, #97	; 0x61
 800a718:	2204      	movs	r2, #4
 800a71a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	212c      	movs	r1, #44	; 0x2c
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	4413      	add	r3, r2
 800a728:	333d      	adds	r3, #61	; 0x3d
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d112      	bne.n	800a756 <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	212c      	movs	r1, #44	; 0x2c
 800a736:	fb01 f303 	mul.w	r3, r1, r3
 800a73a:	4413      	add	r3, r2
 800a73c:	333c      	adds	r3, #60	; 0x3c
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d108      	bne.n	800a756 <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	212c      	movs	r1, #44	; 0x2c
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	4413      	add	r3, r2
 800a750:	333d      	adds	r3, #61	; 0x3d
 800a752:	2201      	movs	r2, #1
 800a754:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	78fa      	ldrb	r2, [r7, #3]
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f00a ff47 	bl	80155f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a770:	461a      	mov	r2, r3
 800a772:	2310      	movs	r3, #16
 800a774:	6093      	str	r3, [r2, #8]
 800a776:	e224      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	78fa      	ldrb	r2, [r7, #3]
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f00a fada 	bl	8014d3a <USB_ReadChInterrupts>
 800a786:	4603      	mov	r3, r0
 800a788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d161      	bne.n	800a854 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d110      	bne.n	800a7ba <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	212c      	movs	r1, #44	; 0x2c
 800a79e:	fb01 f303 	mul.w	r3, r1, r3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3361      	adds	r3, #97	; 0x61
 800a7a6:	2207      	movs	r2, #7
 800a7a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f00a ff1d 	bl	80155f2 <USB_HC_Halt>
 800a7b8:	e042      	b.n	800a840 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800a7ba:	78fb      	ldrb	r3, [r7, #3]
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	222c      	movs	r2, #44	; 0x2c
 800a7c0:	fb03 f202 	mul.w	r2, r3, r2
 800a7c4:	440a      	add	r2, r1
 800a7c6:	325c      	adds	r2, #92	; 0x5c
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	202c      	movs	r0, #44	; 0x2c
 800a7d0:	fb00 f303 	mul.w	r3, r0, r3
 800a7d4:	440b      	add	r3, r1
 800a7d6:	335c      	adds	r3, #92	; 0x5c
 800a7d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	212c      	movs	r1, #44	; 0x2c
 800a7e0:	fb01 f303 	mul.w	r3, r1, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	335c      	adds	r3, #92	; 0x5c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d91f      	bls.n	800a82e <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	212c      	movs	r1, #44	; 0x2c
 800a7f4:	fb01 f303 	mul.w	r3, r1, r3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	335c      	adds	r3, #92	; 0x5c
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	212c      	movs	r1, #44	; 0x2c
 800a806:	fb01 f303 	mul.w	r3, r1, r3
 800a80a:	4413      	add	r3, r2
 800a80c:	3360      	adds	r3, #96	; 0x60
 800a80e:	2204      	movs	r2, #4
 800a810:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a812:	78fb      	ldrb	r3, [r7, #3]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	212c      	movs	r1, #44	; 0x2c
 800a818:	fb01 f303 	mul.w	r3, r1, r3
 800a81c:	4413      	add	r3, r2
 800a81e:	3360      	adds	r3, #96	; 0x60
 800a820:	781a      	ldrb	r2, [r3, #0]
 800a822:	78fb      	ldrb	r3, [r7, #3]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7fa f91a 	bl	8004a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a82c:	e008      	b.n	800a840 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	212c      	movs	r1, #44	; 0x2c
 800a834:	fb01 f303 	mul.w	r3, r1, r3
 800a838:	4413      	add	r3, r2
 800a83a:	3360      	adds	r3, #96	; 0x60
 800a83c:	2202      	movs	r2, #2
 800a83e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	4413      	add	r3, r2
 800a848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84c:	461a      	mov	r2, r3
 800a84e:	2380      	movs	r3, #128	; 0x80
 800a850:	6093      	str	r3, [r2, #8]
 800a852:	e1b6      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	78fa      	ldrb	r2, [r7, #3]
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f00a fa6c 	bl	8014d3a <USB_ReadChInterrupts>
 800a862:	4603      	mov	r3, r0
 800a864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86c:	d11a      	bne.n	800a8a4 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	212c      	movs	r1, #44	; 0x2c
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	4413      	add	r3, r2
 800a87a:	3361      	adds	r3, #97	; 0x61
 800a87c:	2209      	movs	r2, #9
 800a87e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	4611      	mov	r1, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f00a feb2 	bl	80155f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	4413      	add	r3, r2
 800a896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a89a:	461a      	mov	r2, r3
 800a89c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a0:	6093      	str	r3, [r2, #8]
 800a8a2:	e18e      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f00a fa44 	bl	8014d3a <USB_ReadChInterrupts>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	f040 8182 	bne.w	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	212c      	movs	r1, #44	; 0x2c
 800a8d6:	fb01 f303 	mul.w	r3, r1, r3
 800a8da:	4413      	add	r3, r2
 800a8dc:	3361      	adds	r3, #97	; 0x61
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	f040 8087 	bne.w	800a9f4 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	212c      	movs	r1, #44	; 0x2c
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	3361      	adds	r3, #97	; 0x61
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	212c      	movs	r1, #44	; 0x2c
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	3360      	adds	r3, #96	; 0x60
 800a906:	2201      	movs	r2, #1
 800a908:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	212c      	movs	r1, #44	; 0x2c
 800a910:	fb01 f303 	mul.w	r3, r1, r3
 800a914:	4413      	add	r3, r2
 800a916:	333f      	adds	r3, #63	; 0x3f
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d00a      	beq.n	800a934 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	212c      	movs	r1, #44	; 0x2c
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	4413      	add	r3, r2
 800a92a:	333f      	adds	r3, #63	; 0x3f
 800a92c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a92e:	2b03      	cmp	r3, #3
 800a930:	f040 8138 	bne.w	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d113      	bne.n	800a964 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a93c:	78fb      	ldrb	r3, [r7, #3]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	212c      	movs	r1, #44	; 0x2c
 800a942:	fb01 f303 	mul.w	r3, r1, r3
 800a946:	4413      	add	r3, r2
 800a948:	3355      	adds	r3, #85	; 0x55
 800a94a:	781a      	ldrb	r2, [r3, #0]
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	f082 0201 	eor.w	r2, r2, #1
 800a952:	b2d0      	uxtb	r0, r2
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	212c      	movs	r1, #44	; 0x2c
 800a958:	fb01 f303 	mul.w	r3, r1, r3
 800a95c:	4413      	add	r3, r2
 800a95e:	3355      	adds	r3, #85	; 0x55
 800a960:	4602      	mov	r2, r0
 800a962:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	f040 811b 	bne.w	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
 800a96e:	78fb      	ldrb	r3, [r7, #3]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	212c      	movs	r1, #44	; 0x2c
 800a974:	fb01 f303 	mul.w	r3, r1, r3
 800a978:	4413      	add	r3, r2
 800a97a:	334c      	adds	r3, #76	; 0x4c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8110 	beq.w	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	212c      	movs	r1, #44	; 0x2c
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	4413      	add	r3, r2
 800a990:	334c      	adds	r3, #76	; 0x4c
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	78fa      	ldrb	r2, [r7, #3]
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	202c      	movs	r0, #44	; 0x2c
 800a99a:	fb00 f202 	mul.w	r2, r0, r2
 800a99e:	440a      	add	r2, r1
 800a9a0:	3240      	adds	r2, #64	; 0x40
 800a9a2:	8812      	ldrh	r2, [r2, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	202c      	movs	r0, #44	; 0x2c
 800a9ae:	fb00 f202 	mul.w	r2, r0, r2
 800a9b2:	440a      	add	r2, r1
 800a9b4:	3240      	adds	r2, #64	; 0x40
 800a9b6:	8812      	ldrh	r2, [r2, #0]
 800a9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9bc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80ed 	beq.w	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a9ca:	78fb      	ldrb	r3, [r7, #3]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	212c      	movs	r1, #44	; 0x2c
 800a9d0:	fb01 f303 	mul.w	r3, r1, r3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	3355      	adds	r3, #85	; 0x55
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	78fb      	ldrb	r3, [r7, #3]
 800a9dc:	f082 0201 	eor.w	r2, r2, #1
 800a9e0:	b2d0      	uxtb	r0, r2
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	212c      	movs	r1, #44	; 0x2c
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3355      	adds	r3, #85	; 0x55
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e0d7      	b.n	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	212c      	movs	r1, #44	; 0x2c
 800a9fa:	fb01 f303 	mul.w	r3, r1, r3
 800a9fe:	4413      	add	r3, r2
 800aa00:	3361      	adds	r3, #97	; 0x61
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d109      	bne.n	800aa1c <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	212c      	movs	r1, #44	; 0x2c
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	3361      	adds	r3, #97	; 0x61
 800aa16:	2202      	movs	r2, #2
 800aa18:	701a      	strb	r2, [r3, #0]
 800aa1a:	e0c3      	b.n	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	212c      	movs	r1, #44	; 0x2c
 800aa22:	fb01 f303 	mul.w	r3, r1, r3
 800aa26:	4413      	add	r3, r2
 800aa28:	3361      	adds	r3, #97	; 0x61
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d112      	bne.n	800aa56 <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	212c      	movs	r1, #44	; 0x2c
 800aa36:	fb01 f303 	mul.w	r3, r1, r3
 800aa3a:	4413      	add	r3, r2
 800aa3c:	3361      	adds	r3, #97	; 0x61
 800aa3e:	2202      	movs	r2, #2
 800aa40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	212c      	movs	r1, #44	; 0x2c
 800aa48:	fb01 f303 	mul.w	r3, r1, r3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	3360      	adds	r3, #96	; 0x60
 800aa50:	2202      	movs	r2, #2
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e0a6      	b.n	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	212c      	movs	r1, #44	; 0x2c
 800aa5c:	fb01 f303 	mul.w	r3, r1, r3
 800aa60:	4413      	add	r3, r2
 800aa62:	3361      	adds	r3, #97	; 0x61
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d112      	bne.n	800aa90 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aa6a:	78fb      	ldrb	r3, [r7, #3]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	212c      	movs	r1, #44	; 0x2c
 800aa70:	fb01 f303 	mul.w	r3, r1, r3
 800aa74:	4413      	add	r3, r2
 800aa76:	3361      	adds	r3, #97	; 0x61
 800aa78:	2202      	movs	r2, #2
 800aa7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	212c      	movs	r1, #44	; 0x2c
 800aa82:	fb01 f303 	mul.w	r3, r1, r3
 800aa86:	4413      	add	r3, r2
 800aa88:	3360      	adds	r3, #96	; 0x60
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	e089      	b.n	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	212c      	movs	r1, #44	; 0x2c
 800aa96:	fb01 f303 	mul.w	r3, r1, r3
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3361      	adds	r3, #97	; 0x61
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b06      	cmp	r3, #6
 800aaa2:	d112      	bne.n	800aaca <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	212c      	movs	r1, #44	; 0x2c
 800aaaa:	fb01 f303 	mul.w	r3, r1, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	3361      	adds	r3, #97	; 0x61
 800aab2:	2202      	movs	r2, #2
 800aab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	212c      	movs	r1, #44	; 0x2c
 800aabc:	fb01 f303 	mul.w	r3, r1, r3
 800aac0:	4413      	add	r3, r2
 800aac2:	3360      	adds	r3, #96	; 0x60
 800aac4:	2205      	movs	r2, #5
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	e06c      	b.n	800aba4 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800aaca:	78fb      	ldrb	r3, [r7, #3]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	212c      	movs	r1, #44	; 0x2c
 800aad0:	fb01 f303 	mul.w	r3, r1, r3
 800aad4:	4413      	add	r3, r2
 800aad6:	3361      	adds	r3, #97	; 0x61
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b07      	cmp	r3, #7
 800aadc:	d009      	beq.n	800aaf2 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	212c      	movs	r1, #44	; 0x2c
 800aae4:	fb01 f303 	mul.w	r3, r1, r3
 800aae8:	4413      	add	r3, r2
 800aaea:	3361      	adds	r3, #97	; 0x61
 800aaec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800aaee:	2b09      	cmp	r3, #9
 800aaf0:	d166      	bne.n	800abc0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	212c      	movs	r1, #44	; 0x2c
 800aaf8:	fb01 f303 	mul.w	r3, r1, r3
 800aafc:	4413      	add	r3, r2
 800aafe:	3361      	adds	r3, #97	; 0x61
 800ab00:	2202      	movs	r2, #2
 800ab02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	222c      	movs	r2, #44	; 0x2c
 800ab0a:	fb03 f202 	mul.w	r2, r3, r2
 800ab0e:	440a      	add	r2, r1
 800ab10:	325c      	adds	r2, #92	; 0x5c
 800ab12:	6812      	ldr	r2, [r2, #0]
 800ab14:	3201      	adds	r2, #1
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	202c      	movs	r0, #44	; 0x2c
 800ab1a:	fb00 f303 	mul.w	r3, r0, r3
 800ab1e:	440b      	add	r3, r1
 800ab20:	335c      	adds	r3, #92	; 0x5c
 800ab22:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	212c      	movs	r1, #44	; 0x2c
 800ab2a:	fb01 f303 	mul.w	r3, r1, r3
 800ab2e:	4413      	add	r3, r2
 800ab30:	335c      	adds	r3, #92	; 0x5c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d912      	bls.n	800ab5e <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	212c      	movs	r1, #44	; 0x2c
 800ab3e:	fb01 f303 	mul.w	r3, r1, r3
 800ab42:	4413      	add	r3, r2
 800ab44:	335c      	adds	r3, #92	; 0x5c
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	212c      	movs	r1, #44	; 0x2c
 800ab50:	fb01 f303 	mul.w	r3, r1, r3
 800ab54:	4413      	add	r3, r2
 800ab56:	3360      	adds	r3, #96	; 0x60
 800ab58:	2204      	movs	r2, #4
 800ab5a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ab5c:	e021      	b.n	800aba2 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	212c      	movs	r1, #44	; 0x2c
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	4413      	add	r3, r2
 800ab6a:	3360      	adds	r3, #96	; 0x60
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab86:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab8e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aba2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	212c      	movs	r1, #44	; 0x2c
 800abaa:	fb01 f303 	mul.w	r3, r1, r3
 800abae:	4413      	add	r3, r2
 800abb0:	3360      	adds	r3, #96	; 0x60
 800abb2:	781a      	ldrb	r2, [r3, #0]
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7f9 ff51 	bl	8004a60 <HAL_HCD_HC_NotifyURBChange_Callback>
 800abbe:	e000      	b.n	800abc2 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800abc0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	; 0x28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f003 030f 	and.w	r3, r3, #15
 800abe8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	0c5b      	lsrs	r3, r3, #17
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	091b      	lsrs	r3, r3, #4
 800abf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abfc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d004      	beq.n	800ac0e <HCD_RXQLVL_IRQHandler+0x46>
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	f000 80a9 	beq.w	800ad5e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ac0c:	e0aa      	b.n	800ad64 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 80a6 	beq.w	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	212c      	movs	r1, #44	; 0x2c
 800ac1c:	fb01 f303 	mul.w	r3, r1, r3
 800ac20:	4413      	add	r3, r2
 800ac22:	3344      	adds	r3, #68	; 0x44
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 809b 	beq.w	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	212c      	movs	r1, #44	; 0x2c
 800ac32:	fb01 f303 	mul.w	r3, r1, r3
 800ac36:	4413      	add	r3, r2
 800ac38:	3350      	adds	r3, #80	; 0x50
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	441a      	add	r2, r3
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	202c      	movs	r0, #44	; 0x2c
 800ac46:	fb00 f303 	mul.w	r3, r0, r3
 800ac4a:	440b      	add	r3, r1
 800ac4c:	334c      	adds	r3, #76	; 0x4c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d87a      	bhi.n	800ad4a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	212c      	movs	r1, #44	; 0x2c
 800ac5e:	fb01 f303 	mul.w	r3, r1, r3
 800ac62:	4413      	add	r3, r2
 800ac64:	3344      	adds	r3, #68	; 0x44
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f009 fff9 	bl	8014c64 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	212c      	movs	r1, #44	; 0x2c
 800ac78:	fb01 f303 	mul.w	r3, r1, r3
 800ac7c:	4413      	add	r3, r2
 800ac7e:	3344      	adds	r3, #68	; 0x44
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	441a      	add	r2, r3
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	202c      	movs	r0, #44	; 0x2c
 800ac8c:	fb00 f303 	mul.w	r3, r0, r3
 800ac90:	440b      	add	r3, r1
 800ac92:	3344      	adds	r3, #68	; 0x44
 800ac94:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	212c      	movs	r1, #44	; 0x2c
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	4413      	add	r3, r2
 800aca2:	3350      	adds	r3, #80	; 0x50
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	441a      	add	r2, r3
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	202c      	movs	r0, #44	; 0x2c
 800acb0:	fb00 f303 	mul.w	r3, r0, r3
 800acb4:	440b      	add	r3, r1
 800acb6:	3350      	adds	r3, #80	; 0x50
 800acb8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	0cdb      	lsrs	r3, r3, #19
 800acca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	212c      	movs	r1, #44	; 0x2c
 800acd6:	fb01 f303 	mul.w	r3, r1, r3
 800acda:	4413      	add	r3, r2
 800acdc:	3340      	adds	r3, #64	; 0x40
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d13c      	bne.n	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d039      	beq.n	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	212c      	movs	r1, #44	; 0x2c
 800ad26:	fb01 f303 	mul.w	r3, r1, r3
 800ad2a:	4413      	add	r3, r2
 800ad2c:	3354      	adds	r3, #84	; 0x54
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	f083 0301 	eor.w	r3, r3, #1
 800ad34:	b2d8      	uxtb	r0, r3
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	212c      	movs	r1, #44	; 0x2c
 800ad3c:	fb01 f303 	mul.w	r3, r1, r3
 800ad40:	4413      	add	r3, r2
 800ad42:	3354      	adds	r3, #84	; 0x54
 800ad44:	4602      	mov	r2, r0
 800ad46:	701a      	strb	r2, [r3, #0]
      break;
 800ad48:	e00b      	b.n	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	212c      	movs	r1, #44	; 0x2c
 800ad50:	fb01 f303 	mul.w	r3, r1, r3
 800ad54:	4413      	add	r3, r2
 800ad56:	3360      	adds	r3, #96	; 0x60
 800ad58:	2204      	movs	r2, #4
 800ad5a:	701a      	strb	r2, [r3, #0]
      break;
 800ad5c:	e001      	b.n	800ad62 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800ad5e:	bf00      	nop
 800ad60:	e000      	b.n	800ad64 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800ad62:	bf00      	nop
  }
}
 800ad64:	bf00      	nop
 800ad66:	3728      	adds	r7, #40	; 0x28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ad98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d10b      	bne.n	800adbc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d102      	bne.n	800adb4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f9 fe3a 	bl	8004a28 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f043 0302 	orr.w	r3, r3, #2
 800adba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	d132      	bne.n	800ae2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	f043 0308 	orr.w	r3, r3, #8
 800adcc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b04      	cmp	r3, #4
 800add6:	d126      	bne.n	800ae26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	2b02      	cmp	r3, #2
 800adde:	d113      	bne.n	800ae08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800ade6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adea:	d106      	bne.n	800adfa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2102      	movs	r1, #2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f00a f8be 	bl	8014f74 <USB_InitFSLSPClkSel>
 800adf8:	e011      	b.n	800ae1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2101      	movs	r1, #1
 800ae00:	4618      	mov	r0, r3
 800ae02:	f00a f8b7 	bl	8014f74 <USB_InitFSLSPClkSel>
 800ae06:	e00a      	b.n	800ae1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d106      	bne.n	800ae1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae16:	461a      	mov	r2, r3
 800ae18:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ae1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7f9 fe2c 	bl	8004a7c <HAL_HCD_PortEnabled_Callback>
 800ae24:	e002      	b.n	800ae2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7f9 fe36 	bl	8004a98 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d103      	bne.n	800ae3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae44:	461a      	mov	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6013      	str	r3, [r2, #0]
}
 800ae4a:	bf00      	nop
 800ae4c:	3718      	adds	r7, #24
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e07f      	b.n	800af66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7f7 fdbc 	bl	80029f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2224      	movs	r2, #36	; 0x24
 800ae84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0201 	bic.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689a      	ldr	r2, [r3, #8]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aeb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d107      	bne.n	800aece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aeca:	609a      	str	r2, [r3, #8]
 800aecc:	e006      	b.n	800aedc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689a      	ldr	r2, [r3, #8]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aeda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d104      	bne.n	800aeee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aeec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	6859      	ldr	r1, [r3, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <HAL_I2C_Init+0x11c>)
 800aefa:	430b      	orrs	r3, r1
 800aefc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	691a      	ldr	r2, [r3, #16]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	430a      	orrs	r2, r1
 800af26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	69d9      	ldr	r1, [r3, #28]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1a      	ldr	r2, [r3, #32]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f042 0201 	orr.w	r2, r2, #1
 800af46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	02008000 	.word	0x02008000

0800af74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	607a      	str	r2, [r7, #4]
 800af7e:	461a      	mov	r2, r3
 800af80:	460b      	mov	r3, r1
 800af82:	817b      	strh	r3, [r7, #10]
 800af84:	4613      	mov	r3, r2
 800af86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b20      	cmp	r3, #32
 800af92:	f040 80da 	bne.w	800b14a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_I2C_Master_Transmit+0x30>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e0d3      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800afac:	f7fa f826 	bl	8004ffc <HAL_GetTick>
 800afb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2319      	movs	r3, #25
 800afb8:	2201      	movs	r2, #1
 800afba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f000 f8f0 	bl	800b1a4 <I2C_WaitOnFlagUntilTimeout>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e0be      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2221      	movs	r2, #33	; 0x21
 800afd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2210      	movs	r2, #16
 800afda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	893a      	ldrh	r2, [r7, #8]
 800afee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800affa:	b29b      	uxth	r3, r3
 800affc:	2bff      	cmp	r3, #255	; 0xff
 800affe:	d90e      	bls.n	800b01e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	22ff      	movs	r2, #255	; 0xff
 800b004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	8979      	ldrh	r1, [r7, #10]
 800b00e:	4b51      	ldr	r3, [pc, #324]	; (800b154 <HAL_I2C_Master_Transmit+0x1e0>)
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 fa7e 	bl	800b518 <I2C_TransferConfig>
 800b01c:	e06c      	b.n	800b0f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b022:	b29a      	uxth	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	8979      	ldrh	r1, [r7, #10]
 800b030:	4b48      	ldr	r3, [pc, #288]	; (800b154 <HAL_I2C_Master_Transmit+0x1e0>)
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fa6d 	bl	800b518 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800b03e:	e05b      	b.n	800b0f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	6a39      	ldr	r1, [r7, #32]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f8fc 	bl	800b242 <I2C_WaitOnTXISFlagUntilTimeout>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e07b      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b06e:	b29b      	uxth	r3, r3
 800b070:	3b01      	subs	r3, #1
 800b072:	b29a      	uxth	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b29a      	uxth	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b088:	b29b      	uxth	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d034      	beq.n	800b0f8 <HAL_I2C_Master_Transmit+0x184>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d130      	bne.n	800b0f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 f87f 	bl	800b1a4 <I2C_WaitOnFlagUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e04d      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2bff      	cmp	r3, #255	; 0xff
 800b0b8:	d90e      	bls.n	800b0d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	22ff      	movs	r2, #255	; 0xff
 800b0be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	8979      	ldrh	r1, [r7, #10]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 fa21 	bl	800b518 <I2C_TransferConfig>
 800b0d6:	e00f      	b.n	800b0f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	8979      	ldrh	r1, [r7, #10]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fa10 	bl	800b518 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d19e      	bne.n	800b040 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	6a39      	ldr	r1, [r7, #32]
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 f8e2 	bl	800b2d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	e01a      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2220      	movs	r2, #32
 800b11c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6859      	ldr	r1, [r3, #4]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <HAL_I2C_Master_Transmit+0x1e4>)
 800b12a:	400b      	ands	r3, r1
 800b12c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2220      	movs	r2, #32
 800b132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	e000      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b14a:	2302      	movs	r3, #2
  }
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	80002000 	.word	0x80002000
 800b158:	fe00e800 	.word	0xfe00e800

0800b15c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d103      	bne.n	800b17a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2200      	movs	r2, #0
 800b178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	f003 0301 	and.w	r3, r3, #1
 800b184:	2b01      	cmp	r3, #1
 800b186:	d007      	beq.n	800b198 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	699a      	ldr	r2, [r3, #24]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	619a      	str	r2, [r3, #24]
  }
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1b4:	e031      	b.n	800b21a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1bc:	d02d      	beq.n	800b21a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1be:	f7f9 ff1d 	bl	8004ffc <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d302      	bcc.n	800b1d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d122      	bne.n	800b21a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	4013      	ands	r3, r2
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	bf0c      	ite	eq
 800b1e4:	2301      	moveq	r3, #1
 800b1e6:	2300      	movne	r3, #0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d113      	bne.n	800b21a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f6:	f043 0220 	orr.w	r2, r3, #32
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2220      	movs	r2, #32
 800b202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e00f      	b.n	800b23a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	699a      	ldr	r2, [r3, #24]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	4013      	ands	r3, r2
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	429a      	cmp	r2, r3
 800b228:	bf0c      	ite	eq
 800b22a:	2301      	moveq	r3, #1
 800b22c:	2300      	movne	r3, #0
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	461a      	mov	r2, r3
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	429a      	cmp	r2, r3
 800b236:	d0be      	beq.n	800b1b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b24e:	e033      	b.n	800b2b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f87f 	bl	800b358 <I2C_IsErrorOccurred>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e031      	b.n	800b2c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b26a:	d025      	beq.n	800b2b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b26c:	f7f9 fec6 	bl	8004ffc <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d302      	bcc.n	800b282 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d11a      	bne.n	800b2b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d013      	beq.n	800b2b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b294:	f043 0220 	orr.w	r2, r3, #32
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2220      	movs	r2, #32
 800b2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e007      	b.n	800b2c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	f003 0302 	and.w	r3, r3, #2
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d1c4      	bne.n	800b250 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2dc:	e02f      	b.n	800b33e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	68b9      	ldr	r1, [r7, #8]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f838 	bl	800b358 <I2C_IsErrorOccurred>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e02d      	b.n	800b34e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2f2:	f7f9 fe83 	bl	8004ffc <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d302      	bcc.n	800b308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11a      	bne.n	800b33e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b20      	cmp	r3, #32
 800b314:	d013      	beq.n	800b33e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31a:	f043 0220 	orr.w	r2, r3, #32
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2220      	movs	r2, #32
 800b326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e007      	b.n	800b34e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b20      	cmp	r3, #32
 800b34a:	d1c8      	bne.n	800b2de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	d068      	beq.n	800b456 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2210      	movs	r2, #16
 800b38a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b38c:	e049      	b.n	800b422 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b394:	d045      	beq.n	800b422 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b396:	f7f9 fe31 	bl	8004ffc <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d302      	bcc.n	800b3ac <I2C_IsErrorOccurred+0x54>
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d13a      	bne.n	800b422 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3ce:	d121      	bne.n	800b414 <I2C_IsErrorOccurred+0xbc>
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3d6:	d01d      	beq.n	800b414 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b3d8:	7cfb      	ldrb	r3, [r7, #19]
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d01a      	beq.n	800b414 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b3ee:	f7f9 fe05 	bl	8004ffc <HAL_GetTick>
 800b3f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b3f4:	e00e      	b.n	800b414 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b3f6:	f7f9 fe01 	bl	8004ffc <HAL_GetTick>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	2b19      	cmp	r3, #25
 800b402:	d907      	bls.n	800b414 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	f043 0320 	orr.w	r3, r3, #32
 800b40a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b412:	e006      	b.n	800b422 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b20      	cmp	r3, #32
 800b420:	d1e9      	bne.n	800b3f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b20      	cmp	r3, #32
 800b42e:	d003      	beq.n	800b438 <I2C_IsErrorOccurred+0xe0>
 800b430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0aa      	beq.n	800b38e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d103      	bne.n	800b448 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2220      	movs	r2, #32
 800b446:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	f043 0304 	orr.w	r3, r3, #4
 800b44e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00b      	beq.n	800b480 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	f043 0301 	orr.w	r3, r3, #1
 800b46e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00b      	beq.n	800b4a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f043 0308 	orr.w	r3, r3, #8
 800b490:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b49a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00b      	beq.n	800b4c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	f043 0302 	orr.w	r3, r3, #2
 800b4b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b4c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01c      	beq.n	800b506 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff fe45 	bl	800b15c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6859      	ldr	r1, [r3, #4]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <I2C_IsErrorOccurred+0x1bc>)
 800b4de:	400b      	ands	r3, r1
 800b4e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3728      	adds	r7, #40	; 0x28
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	fe00e800 	.word	0xfe00e800

0800b518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	460b      	mov	r3, r1
 800b524:	817b      	strh	r3, [r7, #10]
 800b526:	4613      	mov	r3, r2
 800b528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b52a:	897b      	ldrh	r3, [r7, #10]
 800b52c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b530:	7a7b      	ldrb	r3, [r7, #9]
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b538:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	4313      	orrs	r3, r2
 800b542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b546:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	0d5b      	lsrs	r3, r3, #21
 800b552:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b556:	4b08      	ldr	r3, [pc, #32]	; (800b578 <I2C_TransferConfig+0x60>)
 800b558:	430b      	orrs	r3, r1
 800b55a:	43db      	mvns	r3, r3
 800b55c:	ea02 0103 	and.w	r1, r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	430a      	orrs	r2, r1
 800b568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	03ff63ff 	.word	0x03ff63ff

0800b57c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b20      	cmp	r3, #32
 800b590:	d138      	bne.n	800b604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d101      	bne.n	800b5a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b59c:	2302      	movs	r3, #2
 800b59e:	e032      	b.n	800b606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2224      	movs	r2, #36	; 0x24
 800b5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 0201 	bic.w	r2, r2, #1
 800b5be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6819      	ldr	r1, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f042 0201 	orr.w	r2, r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e000      	b.n	800b606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b20      	cmp	r3, #32
 800b626:	d139      	bne.n	800b69c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d101      	bne.n	800b636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b632:	2302      	movs	r3, #2
 800b634:	e033      	b.n	800b69e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2224      	movs	r2, #36	; 0x24
 800b642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0201 	bic.w	r2, r2, #1
 800b654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	021b      	lsls	r3, r3, #8
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0201 	orr.w	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	e000      	b.n	800b69e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b69c:	2302      	movs	r3, #2
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
	...

0800b6ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b6b4:	4b19      	ldr	r3, [pc, #100]	; (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d00a      	beq.n	800b6d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b6c0:	4b16      	ldr	r3, [pc, #88]	; (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f003 0307 	and.w	r3, r3, #7
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d001      	beq.n	800b6d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e01f      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e01d      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b6d6:	4b11      	ldr	r3, [pc, #68]	; (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f023 0207 	bic.w	r2, r3, #7
 800b6de:	490f      	ldr	r1, [pc, #60]	; (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b6e6:	f7f9 fc89 	bl	8004ffc <HAL_GetTick>
 800b6ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b6ec:	e009      	b.n	800b702 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b6ee:	f7f9 fc85 	bl	8004ffc <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6fc:	d901      	bls.n	800b702 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e007      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b702:	4b06      	ldr	r3, [pc, #24]	; (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70e:	d1ee      	bne.n	800b6ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	58024800 	.word	0x58024800

0800b720 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b720:	b480      	push	{r7}
 800b722:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	4a04      	ldr	r2, [pc, #16]	; (800b73c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b72a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b72e:	60d3      	str	r3, [r2, #12]
}
 800b730:	bf00      	nop
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	58024800 	.word	0x58024800

0800b740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08c      	sub	sp, #48	; 0x30
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d102      	bne.n	800b754 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	f000 bc48 	b.w	800bfe4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f000 8088 	beq.w	800b872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b762:	4b99      	ldr	r3, [pc, #612]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b76a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b76c:	4b96      	ldr	r3, [pc, #600]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b770:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	2b10      	cmp	r3, #16
 800b776:	d007      	beq.n	800b788 <HAL_RCC_OscConfig+0x48>
 800b778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77a:	2b18      	cmp	r3, #24
 800b77c:	d111      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x62>
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	f003 0303 	and.w	r3, r3, #3
 800b784:	2b02      	cmp	r3, #2
 800b786:	d10c      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b788:	4b8f      	ldr	r3, [pc, #572]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d06d      	beq.n	800b870 <HAL_RCC_OscConfig+0x130>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d169      	bne.n	800b870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	f000 bc21 	b.w	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7aa:	d106      	bne.n	800b7ba <HAL_RCC_OscConfig+0x7a>
 800b7ac:	4b86      	ldr	r3, [pc, #536]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a85      	ldr	r2, [pc, #532]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	e02e      	b.n	800b818 <HAL_RCC_OscConfig+0xd8>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10c      	bne.n	800b7dc <HAL_RCC_OscConfig+0x9c>
 800b7c2:	4b81      	ldr	r3, [pc, #516]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a80      	ldr	r2, [pc, #512]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	4b7e      	ldr	r3, [pc, #504]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a7d      	ldr	r2, [pc, #500]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	e01d      	b.n	800b818 <HAL_RCC_OscConfig+0xd8>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7e4:	d10c      	bne.n	800b800 <HAL_RCC_OscConfig+0xc0>
 800b7e6:	4b78      	ldr	r3, [pc, #480]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a77      	ldr	r2, [pc, #476]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7f0:	6013      	str	r3, [r2, #0]
 800b7f2:	4b75      	ldr	r3, [pc, #468]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a74      	ldr	r2, [pc, #464]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b7f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	e00b      	b.n	800b818 <HAL_RCC_OscConfig+0xd8>
 800b800:	4b71      	ldr	r3, [pc, #452]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a70      	ldr	r2, [pc, #448]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	4b6e      	ldr	r3, [pc, #440]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a6d      	ldr	r2, [pc, #436]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d013      	beq.n	800b848 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b820:	f7f9 fbec 	bl	8004ffc <HAL_GetTick>
 800b824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b826:	e008      	b.n	800b83a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b828:	f7f9 fbe8 	bl	8004ffc <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b64      	cmp	r3, #100	; 0x64
 800b834:	d901      	bls.n	800b83a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e3d4      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b83a:	4b63      	ldr	r3, [pc, #396]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0f0      	beq.n	800b828 <HAL_RCC_OscConfig+0xe8>
 800b846:	e014      	b.n	800b872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b848:	f7f9 fbd8 	bl	8004ffc <HAL_GetTick>
 800b84c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b84e:	e008      	b.n	800b862 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b850:	f7f9 fbd4 	bl	8004ffc <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b64      	cmp	r3, #100	; 0x64
 800b85c:	d901      	bls.n	800b862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e3c0      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b862:	4b59      	ldr	r3, [pc, #356]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1f0      	bne.n	800b850 <HAL_RCC_OscConfig+0x110>
 800b86e:	e000      	b.n	800b872 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80ca 	beq.w	800ba14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b880:	4b51      	ldr	r3, [pc, #324]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b888:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b88a:	4b4f      	ldr	r3, [pc, #316]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <HAL_RCC_OscConfig+0x166>
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	2b18      	cmp	r3, #24
 800b89a:	d156      	bne.n	800b94a <HAL_RCC_OscConfig+0x20a>
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d151      	bne.n	800b94a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8a6:	4b48      	ldr	r3, [pc, #288]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d005      	beq.n	800b8be <HAL_RCC_OscConfig+0x17e>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e392      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8be:	4b42      	ldr	r3, [pc, #264]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f023 0219 	bic.w	r2, r3, #25
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	493f      	ldr	r1, [pc, #252]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d0:	f7f9 fb94 	bl	8004ffc <HAL_GetTick>
 800b8d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8d6:	e008      	b.n	800b8ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8d8:	f7f9 fb90 	bl	8004ffc <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e37c      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8ea:	4b37      	ldr	r3, [pc, #220]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0f0      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8f6:	f7f9 fbb1 	bl	800505c <HAL_GetREVID>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f241 0203 	movw	r2, #4099	; 0x1003
 800b900:	4293      	cmp	r3, r2
 800b902:	d817      	bhi.n	800b934 <HAL_RCC_OscConfig+0x1f4>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	2b40      	cmp	r3, #64	; 0x40
 800b90a:	d108      	bne.n	800b91e <HAL_RCC_OscConfig+0x1de>
 800b90c:	4b2e      	ldr	r3, [pc, #184]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b914:	4a2c      	ldr	r2, [pc, #176]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b91a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b91c:	e07a      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b91e:	4b2a      	ldr	r3, [pc, #168]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	031b      	lsls	r3, r3, #12
 800b92c:	4926      	ldr	r1, [pc, #152]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b932:	e06f      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	061b      	lsls	r3, r3, #24
 800b942:	4921      	ldr	r1, [pc, #132]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b944:	4313      	orrs	r3, r2
 800b946:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b948:	e064      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d047      	beq.n	800b9e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b952:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f023 0219 	bic.w	r2, r3, #25
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	491a      	ldr	r1, [pc, #104]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b960:	4313      	orrs	r3, r2
 800b962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b964:	f7f9 fb4a 	bl	8004ffc <HAL_GetTick>
 800b968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b96a:	e008      	b.n	800b97e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b96c:	f7f9 fb46 	bl	8004ffc <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d901      	bls.n	800b97e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e332      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b97e:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f0      	beq.n	800b96c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b98a:	f7f9 fb67 	bl	800505c <HAL_GetREVID>
 800b98e:	4603      	mov	r3, r0
 800b990:	f241 0203 	movw	r2, #4099	; 0x1003
 800b994:	4293      	cmp	r3, r2
 800b996:	d819      	bhi.n	800b9cc <HAL_RCC_OscConfig+0x28c>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b40      	cmp	r3, #64	; 0x40
 800b99e:	d108      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x272>
 800b9a0:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b9a8:	4a07      	ldr	r2, [pc, #28]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b9aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ae:	6053      	str	r3, [r2, #4]
 800b9b0:	e030      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
 800b9b2:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	031b      	lsls	r3, r3, #12
 800b9c0:	4901      	ldr	r1, [pc, #4]	; (800b9c8 <HAL_RCC_OscConfig+0x288>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	604b      	str	r3, [r1, #4]
 800b9c6:	e025      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
 800b9c8:	58024400 	.word	0x58024400
 800b9cc:	4b9a      	ldr	r3, [pc, #616]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	061b      	lsls	r3, r3, #24
 800b9da:	4997      	ldr	r1, [pc, #604]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	604b      	str	r3, [r1, #4]
 800b9e0:	e018      	b.n	800ba14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9e2:	4b95      	ldr	r3, [pc, #596]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a94      	ldr	r2, [pc, #592]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800b9e8:	f023 0301 	bic.w	r3, r3, #1
 800b9ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ee:	f7f9 fb05 	bl	8004ffc <HAL_GetTick>
 800b9f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b9f4:	e008      	b.n	800ba08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9f6:	f7f9 fb01 	bl	8004ffc <HAL_GetTick>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d901      	bls.n	800ba08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e2ed      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ba08:	4b8b      	ldr	r3, [pc, #556]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1f0      	bne.n	800b9f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0310 	and.w	r3, r3, #16
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 80a9 	beq.w	800bb74 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba22:	4b85      	ldr	r3, [pc, #532]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba2c:	4b82      	ldr	r3, [pc, #520]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d007      	beq.n	800ba48 <HAL_RCC_OscConfig+0x308>
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b18      	cmp	r3, #24
 800ba3c:	d13a      	bne.n	800bab4 <HAL_RCC_OscConfig+0x374>
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f003 0303 	and.w	r3, r3, #3
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d135      	bne.n	800bab4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ba48:	4b7b      	ldr	r3, [pc, #492]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <HAL_RCC_OscConfig+0x320>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	2b80      	cmp	r3, #128	; 0x80
 800ba5a:	d001      	beq.n	800ba60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e2c1      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba60:	f7f9 fafc 	bl	800505c <HAL_GetREVID>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f241 0203 	movw	r2, #4099	; 0x1003
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d817      	bhi.n	800ba9e <HAL_RCC_OscConfig+0x35e>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d108      	bne.n	800ba88 <HAL_RCC_OscConfig+0x348>
 800ba76:	4b70      	ldr	r3, [pc, #448]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ba7e:	4a6e      	ldr	r2, [pc, #440]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ba86:	e075      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba88:	4b6b      	ldr	r3, [pc, #428]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	069b      	lsls	r3, r3, #26
 800ba96:	4968      	ldr	r1, [pc, #416]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ba9c:	e06a      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba9e:	4b66      	ldr	r3, [pc, #408]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	061b      	lsls	r3, r3, #24
 800baac:	4962      	ldr	r1, [pc, #392]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bab2:	e05f      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d042      	beq.n	800bb42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800babc:	4b5e      	ldr	r3, [pc, #376]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a5d      	ldr	r2, [pc, #372]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac8:	f7f9 fa98 	bl	8004ffc <HAL_GetTick>
 800bacc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bace:	e008      	b.n	800bae2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bad0:	f7f9 fa94 	bl	8004ffc <HAL_GetTick>
 800bad4:	4602      	mov	r2, r0
 800bad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	2b02      	cmp	r3, #2
 800badc:	d901      	bls.n	800bae2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e280      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bae2:	4b55      	ldr	r3, [pc, #340]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0f0      	beq.n	800bad0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800baee:	f7f9 fab5 	bl	800505c <HAL_GetREVID>
 800baf2:	4603      	mov	r3, r0
 800baf4:	f241 0203 	movw	r2, #4099	; 0x1003
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d817      	bhi.n	800bb2c <HAL_RCC_OscConfig+0x3ec>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d108      	bne.n	800bb16 <HAL_RCC_OscConfig+0x3d6>
 800bb04:	4b4c      	ldr	r3, [pc, #304]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bb0c:	4a4a      	ldr	r2, [pc, #296]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb12:	6053      	str	r3, [r2, #4]
 800bb14:	e02e      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
 800bb16:	4b48      	ldr	r3, [pc, #288]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	069b      	lsls	r3, r3, #26
 800bb24:	4944      	ldr	r1, [pc, #272]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	604b      	str	r3, [r1, #4]
 800bb2a:	e023      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
 800bb2c:	4b42      	ldr	r3, [pc, #264]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	061b      	lsls	r3, r3, #24
 800bb3a:	493f      	ldr	r1, [pc, #252]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60cb      	str	r3, [r1, #12]
 800bb40:	e018      	b.n	800bb74 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bb42:	4b3d      	ldr	r3, [pc, #244]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a3c      	ldr	r2, [pc, #240]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb4e:	f7f9 fa55 	bl	8004ffc <HAL_GetTick>
 800bb52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bb54:	e008      	b.n	800bb68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bb56:	f7f9 fa51 	bl	8004ffc <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d901      	bls.n	800bb68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e23d      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bb68:	4b33      	ldr	r3, [pc, #204]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f0      	bne.n	800bb56 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d036      	beq.n	800bbee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d019      	beq.n	800bbbc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb88:	4b2b      	ldr	r3, [pc, #172]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb8c:	4a2a      	ldr	r2, [pc, #168]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bb8e:	f043 0301 	orr.w	r3, r3, #1
 800bb92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb94:	f7f9 fa32 	bl	8004ffc <HAL_GetTick>
 800bb98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb9a:	e008      	b.n	800bbae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb9c:	f7f9 fa2e 	bl	8004ffc <HAL_GetTick>
 800bba0:	4602      	mov	r2, r0
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d901      	bls.n	800bbae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e21a      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bbae:	4b22      	ldr	r3, [pc, #136]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f0      	beq.n	800bb9c <HAL_RCC_OscConfig+0x45c>
 800bbba:	e018      	b.n	800bbee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbbc:	4b1e      	ldr	r3, [pc, #120]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc0:	4a1d      	ldr	r2, [pc, #116]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bbc2:	f023 0301 	bic.w	r3, r3, #1
 800bbc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc8:	f7f9 fa18 	bl	8004ffc <HAL_GetTick>
 800bbcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbd0:	f7f9 fa14 	bl	8004ffc <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e200      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1f0      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d039      	beq.n	800bc6e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d01c      	beq.n	800bc3c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc02:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a0c      	ldr	r2, [pc, #48]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bc08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bc0e:	f7f9 f9f5 	bl	8004ffc <HAL_GetTick>
 800bc12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc14:	e008      	b.n	800bc28 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc16:	f7f9 f9f1 	bl	8004ffc <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d901      	bls.n	800bc28 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e1dd      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc28:	4b03      	ldr	r3, [pc, #12]	; (800bc38 <HAL_RCC_OscConfig+0x4f8>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d0f0      	beq.n	800bc16 <HAL_RCC_OscConfig+0x4d6>
 800bc34:	e01b      	b.n	800bc6e <HAL_RCC_OscConfig+0x52e>
 800bc36:	bf00      	nop
 800bc38:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bc3c:	4b9b      	ldr	r3, [pc, #620]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a9a      	ldr	r2, [pc, #616]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bc42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bc48:	f7f9 f9d8 	bl	8004ffc <HAL_GetTick>
 800bc4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bc4e:	e008      	b.n	800bc62 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc50:	f7f9 f9d4 	bl	8004ffc <HAL_GetTick>
 800bc54:	4602      	mov	r2, r0
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	d901      	bls.n	800bc62 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e1c0      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bc62:	4b92      	ldr	r3, [pc, #584]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1f0      	bne.n	800bc50 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f000 8081 	beq.w	800bd7e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bc7c:	4b8c      	ldr	r3, [pc, #560]	; (800beb0 <HAL_RCC_OscConfig+0x770>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a8b      	ldr	r2, [pc, #556]	; (800beb0 <HAL_RCC_OscConfig+0x770>)
 800bc82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc88:	f7f9 f9b8 	bl	8004ffc <HAL_GetTick>
 800bc8c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc8e:	e008      	b.n	800bca2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc90:	f7f9 f9b4 	bl	8004ffc <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	2b64      	cmp	r3, #100	; 0x64
 800bc9c:	d901      	bls.n	800bca2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e1a0      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bca2:	4b83      	ldr	r3, [pc, #524]	; (800beb0 <HAL_RCC_OscConfig+0x770>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f0      	beq.n	800bc90 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d106      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x584>
 800bcb6:	4b7d      	ldr	r3, [pc, #500]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcba:	4a7c      	ldr	r2, [pc, #496]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcbc:	f043 0301 	orr.w	r3, r3, #1
 800bcc0:	6713      	str	r3, [r2, #112]	; 0x70
 800bcc2:	e02d      	b.n	800bd20 <HAL_RCC_OscConfig+0x5e0>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10c      	bne.n	800bce6 <HAL_RCC_OscConfig+0x5a6>
 800bccc:	4b77      	ldr	r3, [pc, #476]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd0:	4a76      	ldr	r2, [pc, #472]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	6713      	str	r3, [r2, #112]	; 0x70
 800bcd8:	4b74      	ldr	r3, [pc, #464]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcdc:	4a73      	ldr	r2, [pc, #460]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcde:	f023 0304 	bic.w	r3, r3, #4
 800bce2:	6713      	str	r3, [r2, #112]	; 0x70
 800bce4:	e01c      	b.n	800bd20 <HAL_RCC_OscConfig+0x5e0>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	2b05      	cmp	r3, #5
 800bcec:	d10c      	bne.n	800bd08 <HAL_RCC_OscConfig+0x5c8>
 800bcee:	4b6f      	ldr	r3, [pc, #444]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf2:	4a6e      	ldr	r2, [pc, #440]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcf4:	f043 0304 	orr.w	r3, r3, #4
 800bcf8:	6713      	str	r3, [r2, #112]	; 0x70
 800bcfa:	4b6c      	ldr	r3, [pc, #432]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bcfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfe:	4a6b      	ldr	r2, [pc, #428]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd00:	f043 0301 	orr.w	r3, r3, #1
 800bd04:	6713      	str	r3, [r2, #112]	; 0x70
 800bd06:	e00b      	b.n	800bd20 <HAL_RCC_OscConfig+0x5e0>
 800bd08:	4b68      	ldr	r3, [pc, #416]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0c:	4a67      	ldr	r2, [pc, #412]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd0e:	f023 0301 	bic.w	r3, r3, #1
 800bd12:	6713      	str	r3, [r2, #112]	; 0x70
 800bd14:	4b65      	ldr	r3, [pc, #404]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd18:	4a64      	ldr	r2, [pc, #400]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd1a:	f023 0304 	bic.w	r3, r3, #4
 800bd1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d015      	beq.n	800bd54 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd28:	f7f9 f968 	bl	8004ffc <HAL_GetTick>
 800bd2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd2e:	e00a      	b.n	800bd46 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd30:	f7f9 f964 	bl	8004ffc <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d901      	bls.n	800bd46 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	e14e      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd46:	4b59      	ldr	r3, [pc, #356]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0ee      	beq.n	800bd30 <HAL_RCC_OscConfig+0x5f0>
 800bd52:	e014      	b.n	800bd7e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd54:	f7f9 f952 	bl	8004ffc <HAL_GetTick>
 800bd58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bd5a:	e00a      	b.n	800bd72 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd5c:	f7f9 f94e 	bl	8004ffc <HAL_GetTick>
 800bd60:	4602      	mov	r2, r0
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d901      	bls.n	800bd72 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	e138      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bd72:	4b4e      	ldr	r3, [pc, #312]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1ee      	bne.n	800bd5c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 812d 	beq.w	800bfe2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bd88:	4b48      	ldr	r3, [pc, #288]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd90:	2b18      	cmp	r3, #24
 800bd92:	f000 80bd 	beq.w	800bf10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	f040 809e 	bne.w	800bedc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bda0:	4b42      	ldr	r3, [pc, #264]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a41      	ldr	r2, [pc, #260]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bda6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdac:	f7f9 f926 	bl	8004ffc <HAL_GetTick>
 800bdb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdb4:	f7f9 f922 	bl	8004ffc <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d901      	bls.n	800bdc6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e10e      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdc6:	4b39      	ldr	r3, [pc, #228]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f0      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdd2:	4b36      	ldr	r3, [pc, #216]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bdd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdd6:	4b37      	ldr	r3, [pc, #220]	; (800beb4 <HAL_RCC_OscConfig+0x774>)
 800bdd8:	4013      	ands	r3, r2
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bde2:	0112      	lsls	r2, r2, #4
 800bde4:	430a      	orrs	r2, r1
 800bde6:	4931      	ldr	r1, [pc, #196]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	628b      	str	r3, [r1, #40]	; 0x28
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	025b      	lsls	r3, r3, #9
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	3b01      	subs	r3, #1
 800be08:	041b      	lsls	r3, r3, #16
 800be0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be0e:	431a      	orrs	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be14:	3b01      	subs	r3, #1
 800be16:	061b      	lsls	r3, r3, #24
 800be18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be1c:	4923      	ldr	r1, [pc, #140]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800be22:	4b22      	ldr	r3, [pc, #136]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	4a21      	ldr	r2, [pc, #132]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be28:	f023 0301 	bic.w	r3, r3, #1
 800be2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800be2e:	4b1f      	ldr	r3, [pc, #124]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be32:	4b21      	ldr	r3, [pc, #132]	; (800beb8 <HAL_RCC_OscConfig+0x778>)
 800be34:	4013      	ands	r3, r2
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800be3a:	00d2      	lsls	r2, r2, #3
 800be3c:	491b      	ldr	r1, [pc, #108]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800be42:	4b1a      	ldr	r3, [pc, #104]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be46:	f023 020c 	bic.w	r2, r3, #12
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	4917      	ldr	r1, [pc, #92]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be50:	4313      	orrs	r3, r2
 800be52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800be54:	4b15      	ldr	r3, [pc, #84]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be58:	f023 0202 	bic.w	r2, r3, #2
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be60:	4912      	ldr	r1, [pc, #72]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be62:	4313      	orrs	r3, r2
 800be64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800be66:	4b11      	ldr	r3, [pc, #68]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6a:	4a10      	ldr	r2, [pc, #64]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be72:	4b0e      	ldr	r3, [pc, #56]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	4a0d      	ldr	r2, [pc, #52]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800be7e:	4b0b      	ldr	r3, [pc, #44]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	4a0a      	ldr	r2, [pc, #40]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800be88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8e:	4a07      	ldr	r2, [pc, #28]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be96:	4b05      	ldr	r3, [pc, #20]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a04      	ldr	r2, [pc, #16]	; (800beac <HAL_RCC_OscConfig+0x76c>)
 800be9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea2:	f7f9 f8ab 	bl	8004ffc <HAL_GetTick>
 800bea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bea8:	e011      	b.n	800bece <HAL_RCC_OscConfig+0x78e>
 800beaa:	bf00      	nop
 800beac:	58024400 	.word	0x58024400
 800beb0:	58024800 	.word	0x58024800
 800beb4:	fffffc0c 	.word	0xfffffc0c
 800beb8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bebc:	f7f9 f89e 	bl	8004ffc <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d901      	bls.n	800bece <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e08a      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bece:	4b47      	ldr	r3, [pc, #284]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0f0      	beq.n	800bebc <HAL_RCC_OscConfig+0x77c>
 800beda:	e082      	b.n	800bfe2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bedc:	4b43      	ldr	r3, [pc, #268]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a42      	ldr	r2, [pc, #264]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bee8:	f7f9 f888 	bl	8004ffc <HAL_GetTick>
 800beec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800beee:	e008      	b.n	800bf02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bef0:	f7f9 f884 	bl	8004ffc <HAL_GetTick>
 800bef4:	4602      	mov	r2, r0
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b02      	cmp	r3, #2
 800befc:	d901      	bls.n	800bf02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e070      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf02:	4b3a      	ldr	r3, [pc, #232]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1f0      	bne.n	800bef0 <HAL_RCC_OscConfig+0x7b0>
 800bf0e:	e068      	b.n	800bfe2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bf10:	4b36      	ldr	r3, [pc, #216]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bf16:	4b35      	ldr	r3, [pc, #212]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d031      	beq.n	800bf88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f003 0203 	and.w	r2, r3, #3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d12a      	bne.n	800bf88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	091b      	lsrs	r3, r3, #4
 800bf36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d122      	bne.n	800bf88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d11a      	bne.n	800bf88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	0a5b      	lsrs	r3, r3, #9
 800bf56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d111      	bne.n	800bf88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	0c1b      	lsrs	r3, r3, #16
 800bf68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d108      	bne.n	800bf88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	0e1b      	lsrs	r3, r3, #24
 800bf7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d001      	beq.n	800bf8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e02b      	b.n	800bfe4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bf8c:	4b17      	ldr	r3, [pc, #92]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf90:	08db      	lsrs	r3, r3, #3
 800bf92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d01f      	beq.n	800bfe2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bfa2:	4b12      	ldr	r3, [pc, #72]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	4a11      	ldr	r2, [pc, #68]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfa8:	f023 0301 	bic.w	r3, r3, #1
 800bfac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bfae:	f7f9 f825 	bl	8004ffc <HAL_GetTick>
 800bfb2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bfb4:	bf00      	nop
 800bfb6:	f7f9 f821 	bl	8004ffc <HAL_GetTick>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d0f9      	beq.n	800bfb6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bfc2:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <HAL_RCC_OscConfig+0x8b0>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bfce:	00d2      	lsls	r2, r2, #3
 800bfd0:	4906      	ldr	r1, [pc, #24]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bfd6:	4b05      	ldr	r3, [pc, #20]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	4a04      	ldr	r2, [pc, #16]	; (800bfec <HAL_RCC_OscConfig+0x8ac>)
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3730      	adds	r7, #48	; 0x30
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	58024400 	.word	0x58024400
 800bff0:	ffff0007 	.word	0xffff0007

0800bff4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e19c      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c008:	4b8a      	ldr	r3, [pc, #552]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 030f 	and.w	r3, r3, #15
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d910      	bls.n	800c038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c016:	4b87      	ldr	r3, [pc, #540]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f023 020f 	bic.w	r2, r3, #15
 800c01e:	4985      	ldr	r1, [pc, #532]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	4313      	orrs	r3, r2
 800c024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c026:	4b83      	ldr	r3, [pc, #524]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 030f 	and.w	r3, r3, #15
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d001      	beq.n	800c038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e184      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0304 	and.w	r3, r3, #4
 800c040:	2b00      	cmp	r3, #0
 800c042:	d010      	beq.n	800c066 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	691a      	ldr	r2, [r3, #16]
 800c048:	4b7b      	ldr	r3, [pc, #492]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c050:	429a      	cmp	r2, r3
 800c052:	d908      	bls.n	800c066 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c054:	4b78      	ldr	r3, [pc, #480]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c056:	699b      	ldr	r3, [r3, #24]
 800c058:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	4975      	ldr	r1, [pc, #468]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c062:	4313      	orrs	r3, r2
 800c064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0308 	and.w	r3, r3, #8
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d010      	beq.n	800c094 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	695a      	ldr	r2, [r3, #20]
 800c076:	4b70      	ldr	r3, [pc, #448]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c078:	69db      	ldr	r3, [r3, #28]
 800c07a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c07e:	429a      	cmp	r2, r3
 800c080:	d908      	bls.n	800c094 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c082:	4b6d      	ldr	r3, [pc, #436]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	496a      	ldr	r1, [pc, #424]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c090:	4313      	orrs	r3, r2
 800c092:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d010      	beq.n	800c0c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699a      	ldr	r2, [r3, #24]
 800c0a4:	4b64      	ldr	r3, [pc, #400]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d908      	bls.n	800c0c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c0b0:	4b61      	ldr	r3, [pc, #388]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	495e      	ldr	r1, [pc, #376]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0320 	and.w	r3, r3, #32
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d010      	beq.n	800c0f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	69da      	ldr	r2, [r3, #28]
 800c0d2:	4b59      	ldr	r3, [pc, #356]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d908      	bls.n	800c0f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c0de:	4b56      	ldr	r3, [pc, #344]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	4953      	ldr	r1, [pc, #332]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68da      	ldr	r2, [r3, #12]
 800c100:	4b4d      	ldr	r3, [pc, #308]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f003 030f 	and.w	r3, r3, #15
 800c108:	429a      	cmp	r2, r3
 800c10a:	d908      	bls.n	800c11e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c10c:	4b4a      	ldr	r3, [pc, #296]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f023 020f 	bic.w	r2, r3, #15
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	4947      	ldr	r1, [pc, #284]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d055      	beq.n	800c1d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c12a:	4b43      	ldr	r3, [pc, #268]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	4940      	ldr	r1, [pc, #256]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	2b02      	cmp	r3, #2
 800c142:	d107      	bne.n	800c154 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c144:	4b3c      	ldr	r3, [pc, #240]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d121      	bne.n	800c194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e0f6      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d107      	bne.n	800c16c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c15c:	4b36      	ldr	r3, [pc, #216]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d115      	bne.n	800c194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e0ea      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d107      	bne.n	800c184 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c174:	4b30      	ldr	r3, [pc, #192]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e0de      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c184:	4b2c      	ldr	r3, [pc, #176]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e0d6      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c194:	4b28      	ldr	r3, [pc, #160]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	f023 0207 	bic.w	r2, r3, #7
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4925      	ldr	r1, [pc, #148]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1a6:	f7f8 ff29 	bl	8004ffc <HAL_GetTick>
 800c1aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1ac:	e00a      	b.n	800c1c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1ae:	f7f8 ff25 	bl	8004ffc <HAL_GetTick>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d901      	bls.n	800c1c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c1c0:	2303      	movs	r3, #3
 800c1c2:	e0be      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1c4:	4b1c      	ldr	r3, [pc, #112]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d1eb      	bne.n	800c1ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d010      	beq.n	800c204 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	4b14      	ldr	r3, [pc, #80]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	f003 030f 	and.w	r3, r3, #15
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d208      	bcs.n	800c204 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1f2:	4b11      	ldr	r3, [pc, #68]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f023 020f 	bic.w	r2, r3, #15
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	490e      	ldr	r1, [pc, #56]	; (800c238 <HAL_RCC_ClockConfig+0x244>)
 800c200:	4313      	orrs	r3, r2
 800c202:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c204:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 030f 	and.w	r3, r3, #15
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d214      	bcs.n	800c23c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f023 020f 	bic.w	r2, r3, #15
 800c21a:	4906      	ldr	r1, [pc, #24]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	4313      	orrs	r3, r2
 800c220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c222:	4b04      	ldr	r3, [pc, #16]	; (800c234 <HAL_RCC_ClockConfig+0x240>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 030f 	and.w	r3, r3, #15
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d005      	beq.n	800c23c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e086      	b.n	800c342 <HAL_RCC_ClockConfig+0x34e>
 800c234:	52002000 	.word	0x52002000
 800c238:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d010      	beq.n	800c26a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	4b3f      	ldr	r3, [pc, #252]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c254:	429a      	cmp	r2, r3
 800c256:	d208      	bcs.n	800c26a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c258:	4b3c      	ldr	r3, [pc, #240]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	4939      	ldr	r1, [pc, #228]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c266:	4313      	orrs	r3, r2
 800c268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0308 	and.w	r3, r3, #8
 800c272:	2b00      	cmp	r3, #0
 800c274:	d010      	beq.n	800c298 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	695a      	ldr	r2, [r3, #20]
 800c27a:	4b34      	ldr	r3, [pc, #208]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c282:	429a      	cmp	r2, r3
 800c284:	d208      	bcs.n	800c298 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c286:	4b31      	ldr	r3, [pc, #196]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	492e      	ldr	r1, [pc, #184]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c294:	4313      	orrs	r3, r2
 800c296:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d010      	beq.n	800c2c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2aa:	69db      	ldr	r3, [r3, #28]
 800c2ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d208      	bcs.n	800c2c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2b6:	69db      	ldr	r3, [r3, #28]
 800c2b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	4922      	ldr	r1, [pc, #136]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d010      	beq.n	800c2f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69da      	ldr	r2, [r3, #28]
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d208      	bcs.n	800c2f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c2e2:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	4917      	ldr	r1, [pc, #92]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c2f4:	f000 f834 	bl	800c360 <HAL_RCC_GetSysClockFreq>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	4b14      	ldr	r3, [pc, #80]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	f003 030f 	and.w	r3, r3, #15
 800c304:	4912      	ldr	r1, [pc, #72]	; (800c350 <HAL_RCC_ClockConfig+0x35c>)
 800c306:	5ccb      	ldrb	r3, [r1, r3]
 800c308:	f003 031f 	and.w	r3, r3, #31
 800c30c:	fa22 f303 	lsr.w	r3, r2, r3
 800c310:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c312:	4b0e      	ldr	r3, [pc, #56]	; (800c34c <HAL_RCC_ClockConfig+0x358>)
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	f003 030f 	and.w	r3, r3, #15
 800c31a:	4a0d      	ldr	r2, [pc, #52]	; (800c350 <HAL_RCC_ClockConfig+0x35c>)
 800c31c:	5cd3      	ldrb	r3, [r2, r3]
 800c31e:	f003 031f 	and.w	r3, r3, #31
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	fa22 f303 	lsr.w	r3, r2, r3
 800c328:	4a0a      	ldr	r2, [pc, #40]	; (800c354 <HAL_RCC_ClockConfig+0x360>)
 800c32a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c32c:	4a0a      	ldr	r2, [pc, #40]	; (800c358 <HAL_RCC_ClockConfig+0x364>)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <HAL_RCC_ClockConfig+0x368>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4618      	mov	r0, r3
 800c338:	f7f8 fe16 	bl	8004f68 <HAL_InitTick>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	58024400 	.word	0x58024400
 800c350:	0801896c 	.word	0x0801896c
 800c354:	20000020 	.word	0x20000020
 800c358:	2000001c 	.word	0x2000001c
 800c35c:	20000044 	.word	0x20000044

0800c360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c360:	b480      	push	{r7}
 800c362:	b089      	sub	sp, #36	; 0x24
 800c364:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c366:	4bb3      	ldr	r3, [pc, #716]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c36e:	2b18      	cmp	r3, #24
 800c370:	f200 8155 	bhi.w	800c61e <HAL_RCC_GetSysClockFreq+0x2be>
 800c374:	a201      	add	r2, pc, #4	; (adr r2, 800c37c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37a:	bf00      	nop
 800c37c:	0800c3e1 	.word	0x0800c3e1
 800c380:	0800c61f 	.word	0x0800c61f
 800c384:	0800c61f 	.word	0x0800c61f
 800c388:	0800c61f 	.word	0x0800c61f
 800c38c:	0800c61f 	.word	0x0800c61f
 800c390:	0800c61f 	.word	0x0800c61f
 800c394:	0800c61f 	.word	0x0800c61f
 800c398:	0800c61f 	.word	0x0800c61f
 800c39c:	0800c407 	.word	0x0800c407
 800c3a0:	0800c61f 	.word	0x0800c61f
 800c3a4:	0800c61f 	.word	0x0800c61f
 800c3a8:	0800c61f 	.word	0x0800c61f
 800c3ac:	0800c61f 	.word	0x0800c61f
 800c3b0:	0800c61f 	.word	0x0800c61f
 800c3b4:	0800c61f 	.word	0x0800c61f
 800c3b8:	0800c61f 	.word	0x0800c61f
 800c3bc:	0800c40d 	.word	0x0800c40d
 800c3c0:	0800c61f 	.word	0x0800c61f
 800c3c4:	0800c61f 	.word	0x0800c61f
 800c3c8:	0800c61f 	.word	0x0800c61f
 800c3cc:	0800c61f 	.word	0x0800c61f
 800c3d0:	0800c61f 	.word	0x0800c61f
 800c3d4:	0800c61f 	.word	0x0800c61f
 800c3d8:	0800c61f 	.word	0x0800c61f
 800c3dc:	0800c413 	.word	0x0800c413
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3e0:	4b94      	ldr	r3, [pc, #592]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d009      	beq.n	800c400 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3ec:	4b91      	ldr	r3, [pc, #580]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	08db      	lsrs	r3, r3, #3
 800c3f2:	f003 0303 	and.w	r3, r3, #3
 800c3f6:	4a90      	ldr	r2, [pc, #576]	; (800c638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c3fe:	e111      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c400:	4b8d      	ldr	r3, [pc, #564]	; (800c638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c402:	61bb      	str	r3, [r7, #24]
      break;
 800c404:	e10e      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c406:	4b8d      	ldr	r3, [pc, #564]	; (800c63c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c408:	61bb      	str	r3, [r7, #24]
      break;
 800c40a:	e10b      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c40c:	4b8c      	ldr	r3, [pc, #560]	; (800c640 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c40e:	61bb      	str	r3, [r7, #24]
      break;
 800c410:	e108      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c412:	4b88      	ldr	r3, [pc, #544]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c41c:	4b85      	ldr	r3, [pc, #532]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	091b      	lsrs	r3, r3, #4
 800c422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c426:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c428:	4b82      	ldr	r3, [pc, #520]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c432:	4b80      	ldr	r3, [pc, #512]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c436:	08db      	lsrs	r3, r3, #3
 800c438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	fb02 f303 	mul.w	r3, r2, r3
 800c442:	ee07 3a90 	vmov	s15, r3
 800c446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 80e1 	beq.w	800c618 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	f000 8083 	beq.w	800c564 <HAL_RCC_GetSysClockFreq+0x204>
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b02      	cmp	r3, #2
 800c462:	f200 80a1 	bhi.w	800c5a8 <HAL_RCC_GetSysClockFreq+0x248>
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <HAL_RCC_GetSysClockFreq+0x114>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d056      	beq.n	800c520 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c472:	e099      	b.n	800c5a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c474:	4b6f      	ldr	r3, [pc, #444]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0320 	and.w	r3, r3, #32
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d02d      	beq.n	800c4dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c480:	4b6c      	ldr	r3, [pc, #432]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	08db      	lsrs	r3, r3, #3
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	4a6b      	ldr	r2, [pc, #428]	; (800c638 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	ee07 3a90 	vmov	s15, r3
 800c498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4aa:	4b62      	ldr	r3, [pc, #392]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b2:	ee07 3a90 	vmov	s15, r3
 800c4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4be:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c4da:	e087      	b.n	800c5ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c648 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ee:	4b51      	ldr	r3, [pc, #324]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f6:	ee07 3a90 	vmov	s15, r3
 800c4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c502:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c51a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c51e:	e065      	b.n	800c5ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	ee07 3a90 	vmov	s15, r3
 800c526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c52a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c64c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c532:	4b40      	ldr	r3, [pc, #256]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c53a:	ee07 3a90 	vmov	s15, r3
 800c53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c542:	ed97 6a02 	vldr	s12, [r7, #8]
 800c546:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c55e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c562:	e043      	b.n	800c5ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	ee07 3a90 	vmov	s15, r3
 800c56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c650 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c576:	4b2f      	ldr	r3, [pc, #188]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c586:	ed97 6a02 	vldr	s12, [r7, #8]
 800c58a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5a6:	e021      	b.n	800c5ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	ee07 3a90 	vmov	s15, r3
 800c5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c64c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b1e      	ldr	r3, [pc, #120]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c644 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c5ec:	4b11      	ldr	r3, [pc, #68]	; (800c634 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f0:	0a5b      	lsrs	r3, r3, #9
 800c5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	ee07 3a90 	vmov	s15, r3
 800c600:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c604:	edd7 6a07 	vldr	s13, [r7, #28]
 800c608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c610:	ee17 3a90 	vmov	r3, s15
 800c614:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c616:	e005      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c618:	2300      	movs	r3, #0
 800c61a:	61bb      	str	r3, [r7, #24]
      break;
 800c61c:	e002      	b.n	800c624 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c620:	61bb      	str	r3, [r7, #24]
      break;
 800c622:	bf00      	nop
  }

  return sysclockfreq;
 800c624:	69bb      	ldr	r3, [r7, #24]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3724      	adds	r7, #36	; 0x24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	58024400 	.word	0x58024400
 800c638:	03d09000 	.word	0x03d09000
 800c63c:	003d0900 	.word	0x003d0900
 800c640:	017d7840 	.word	0x017d7840
 800c644:	46000000 	.word	0x46000000
 800c648:	4c742400 	.word	0x4c742400
 800c64c:	4a742400 	.word	0x4a742400
 800c650:	4bbebc20 	.word	0x4bbebc20

0800c654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c65a:	f7ff fe81 	bl	800c360 <HAL_RCC_GetSysClockFreq>
 800c65e:	4602      	mov	r2, r0
 800c660:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	0a1b      	lsrs	r3, r3, #8
 800c666:	f003 030f 	and.w	r3, r3, #15
 800c66a:	490f      	ldr	r1, [pc, #60]	; (800c6a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c66c:	5ccb      	ldrb	r3, [r1, r3]
 800c66e:	f003 031f 	and.w	r3, r3, #31
 800c672:	fa22 f303 	lsr.w	r3, r2, r3
 800c676:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	4a09      	ldr	r2, [pc, #36]	; (800c6a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c682:	5cd3      	ldrb	r3, [r2, r3]
 800c684:	f003 031f 	and.w	r3, r3, #31
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	fa22 f303 	lsr.w	r3, r2, r3
 800c68e:	4a07      	ldr	r2, [pc, #28]	; (800c6ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c690:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c692:	4a07      	ldr	r2, [pc, #28]	; (800c6b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c69a:	681b      	ldr	r3, [r3, #0]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	58024400 	.word	0x58024400
 800c6a8:	0801896c 	.word	0x0801896c
 800c6ac:	20000020 	.word	0x20000020
 800c6b0:	2000001c 	.word	0x2000001c

0800c6b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c6b8:	f7ff ffcc 	bl	800c654 <HAL_RCC_GetHCLKFreq>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	4b06      	ldr	r3, [pc, #24]	; (800c6d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	091b      	lsrs	r3, r3, #4
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	4904      	ldr	r1, [pc, #16]	; (800c6dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c6ca:	5ccb      	ldrb	r3, [r1, r3]
 800c6cc:	f003 031f 	and.w	r3, r3, #31
 800c6d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	58024400 	.word	0x58024400
 800c6dc:	0801896c 	.word	0x0801896c

0800c6e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c6e4:	f7ff ffb6 	bl	800c654 <HAL_RCC_GetHCLKFreq>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	f003 0307 	and.w	r3, r3, #7
 800c6f4:	4904      	ldr	r1, [pc, #16]	; (800c708 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c6f6:	5ccb      	ldrb	r3, [r1, r3]
 800c6f8:	f003 031f 	and.w	r3, r3, #31
 800c6fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c700:	4618      	mov	r0, r3
 800c702:	bd80      	pop	{r7, pc}
 800c704:	58024400 	.word	0x58024400
 800c708:	0801896c 	.word	0x0801896c

0800c70c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c70c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c710:	b0ca      	sub	sp, #296	; 0x128
 800c712:	af00      	add	r7, sp, #0
 800c714:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c718:	2300      	movs	r3, #0
 800c71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c71e:	2300      	movs	r3, #0
 800c720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c730:	2500      	movs	r5, #0
 800c732:	ea54 0305 	orrs.w	r3, r4, r5
 800c736:	d049      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c73e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c742:	d02f      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c748:	d828      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c74a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c74e:	d01a      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c754:	d822      	bhi.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c75e:	d007      	beq.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c760:	e01c      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c762:	4bb8      	ldr	r3, [pc, #736]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c766:	4ab7      	ldr	r2, [pc, #732]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c76c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c76e:	e01a      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c774:	3308      	adds	r3, #8
 800c776:	2102      	movs	r1, #2
 800c778:	4618      	mov	r0, r3
 800c77a:	f002 fb61 	bl	800ee40 <RCCEx_PLL2_Config>
 800c77e:	4603      	mov	r3, r0
 800c780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c784:	e00f      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c78a:	3328      	adds	r3, #40	; 0x28
 800c78c:	2102      	movs	r1, #2
 800c78e:	4618      	mov	r0, r3
 800c790:	f002 fc08 	bl	800efa4 <RCCEx_PLL3_Config>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c79a:	e004      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c7a2:	e000      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c7a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c7ae:	4ba5      	ldr	r3, [pc, #660]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7bc:	4aa1      	ldr	r2, [pc, #644]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7be:	430b      	orrs	r3, r1
 800c7c0:	6513      	str	r3, [r2, #80]	; 0x50
 800c7c2:	e003      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c7d8:	f04f 0900 	mov.w	r9, #0
 800c7dc:	ea58 0309 	orrs.w	r3, r8, r9
 800c7e0:	d047      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e8:	2b04      	cmp	r3, #4
 800c7ea:	d82a      	bhi.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c7ec:	a201      	add	r2, pc, #4	; (adr r2, 800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f2:	bf00      	nop
 800c7f4:	0800c809 	.word	0x0800c809
 800c7f8:	0800c817 	.word	0x0800c817
 800c7fc:	0800c82d 	.word	0x0800c82d
 800c800:	0800c84b 	.word	0x0800c84b
 800c804:	0800c84b 	.word	0x0800c84b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c808:	4b8e      	ldr	r3, [pc, #568]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80c:	4a8d      	ldr	r2, [pc, #564]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c80e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c814:	e01a      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c81a:	3308      	adds	r3, #8
 800c81c:	2100      	movs	r1, #0
 800c81e:	4618      	mov	r0, r3
 800c820:	f002 fb0e 	bl	800ee40 <RCCEx_PLL2_Config>
 800c824:	4603      	mov	r3, r0
 800c826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c82a:	e00f      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c830:	3328      	adds	r3, #40	; 0x28
 800c832:	2100      	movs	r1, #0
 800c834:	4618      	mov	r0, r3
 800c836:	f002 fbb5 	bl	800efa4 <RCCEx_PLL3_Config>
 800c83a:	4603      	mov	r3, r0
 800c83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c840:	e004      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c848:	e000      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10a      	bne.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c854:	4b7b      	ldr	r3, [pc, #492]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c858:	f023 0107 	bic.w	r1, r3, #7
 800c85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c862:	4a78      	ldr	r2, [pc, #480]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c864:	430b      	orrs	r3, r1
 800c866:	6513      	str	r3, [r2, #80]	; 0x50
 800c868:	e003      	b.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c86a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c86e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	ea5a 030b 	orrs.w	r3, sl, fp
 800c886:	d04c      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c892:	d030      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c898:	d829      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c89a:	2bc0      	cmp	r3, #192	; 0xc0
 800c89c:	d02d      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c89e:	2bc0      	cmp	r3, #192	; 0xc0
 800c8a0:	d825      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c8a2:	2b80      	cmp	r3, #128	; 0x80
 800c8a4:	d018      	beq.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c8a6:	2b80      	cmp	r3, #128	; 0x80
 800c8a8:	d821      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c8ae:	2b40      	cmp	r3, #64	; 0x40
 800c8b0:	d007      	beq.n	800c8c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c8b2:	e01c      	b.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8b4:	4b63      	ldr	r3, [pc, #396]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b8:	4a62      	ldr	r2, [pc, #392]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c8ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c8c0:	e01c      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f002 fab8 	bl	800ee40 <RCCEx_PLL2_Config>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c8d6:	e011      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8dc:	3328      	adds	r3, #40	; 0x28
 800c8de:	2100      	movs	r1, #0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f002 fb5f 	bl	800efa4 <RCCEx_PLL3_Config>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c8ec:	e006      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c8f4:	e002      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c8f6:	bf00      	nop
 800c8f8:	e000      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c8fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c904:	4b4f      	ldr	r3, [pc, #316]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c908:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c912:	4a4c      	ldr	r2, [pc, #304]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c914:	430b      	orrs	r3, r1
 800c916:	6513      	str	r3, [r2, #80]	; 0x50
 800c918:	e003      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c91e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c92e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c932:	2300      	movs	r3, #0
 800c934:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c938:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c93c:	460b      	mov	r3, r1
 800c93e:	4313      	orrs	r3, r2
 800c940:	d053      	beq.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c94a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c94e:	d035      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c954:	d82e      	bhi.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c956:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c95a:	d031      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c95c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c960:	d828      	bhi.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c966:	d01a      	beq.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c96c:	d822      	bhi.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d003      	beq.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c976:	d007      	beq.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c978:	e01c      	b.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c97a:	4b32      	ldr	r3, [pc, #200]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	4a31      	ldr	r2, [pc, #196]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c984:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c986:	e01c      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c98c:	3308      	adds	r3, #8
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f002 fa55 	bl	800ee40 <RCCEx_PLL2_Config>
 800c996:	4603      	mov	r3, r0
 800c998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c99c:	e011      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9a2:	3328      	adds	r3, #40	; 0x28
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f002 fafc 	bl	800efa4 <RCCEx_PLL3_Config>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9b2:	e006      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c9ba:	e002      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c9bc:	bf00      	nop
 800c9be:	e000      	b.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10b      	bne.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c9da:	4a1a      	ldr	r2, [pc, #104]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9dc:	430b      	orrs	r3, r1
 800c9de:	6593      	str	r3, [r2, #88]	; 0x58
 800c9e0:	e003      	b.n	800c9ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c9f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ca00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ca04:	460b      	mov	r3, r1
 800ca06:	4313      	orrs	r3, r2
 800ca08:	d056      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ca0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca16:	d038      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ca18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca1c:	d831      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ca1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca22:	d034      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ca24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca28:	d82b      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ca2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca2e:	d01d      	beq.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ca30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca34:	d825      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d006      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ca3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ca3e:	d00a      	beq.n	800ca56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ca40:	e01f      	b.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ca42:	bf00      	nop
 800ca44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca48:	4ba2      	ldr	r3, [pc, #648]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	4aa1      	ldr	r2, [pc, #644]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca54:	e01c      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f002 f9ee 	bl	800ee40 <RCCEx_PLL2_Config>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ca6a:	e011      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca70:	3328      	adds	r3, #40	; 0x28
 800ca72:	2100      	movs	r1, #0
 800ca74:	4618      	mov	r0, r3
 800ca76:	f002 fa95 	bl	800efa4 <RCCEx_PLL3_Config>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca80:	e006      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca88:	e002      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ca8a:	bf00      	nop
 800ca8c:	e000      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ca8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10b      	bne.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ca98:	4b8e      	ldr	r3, [pc, #568]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800caa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800caa8:	4a8a      	ldr	r2, [pc, #552]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caaa:	430b      	orrs	r3, r1
 800caac:	6593      	str	r3, [r2, #88]	; 0x58
 800caae:	e003      	b.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cab4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cac8:	2300      	movs	r3, #0
 800caca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cace:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cad2:	460b      	mov	r3, r1
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d03a      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cadc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cade:	2b30      	cmp	r3, #48	; 0x30
 800cae0:	d01f      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cae2:	2b30      	cmp	r3, #48	; 0x30
 800cae4:	d819      	bhi.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d00c      	beq.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800caea:	2b20      	cmp	r3, #32
 800caec:	d815      	bhi.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d019      	beq.n	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800caf2:	2b10      	cmp	r3, #16
 800caf4:	d111      	bne.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caf6:	4b77      	ldr	r3, [pc, #476]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cafa:	4a76      	ldr	r2, [pc, #472]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cafc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cb02:	e011      	b.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb08:	3308      	adds	r3, #8
 800cb0a:	2102      	movs	r1, #2
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f002 f997 	bl	800ee40 <RCCEx_PLL2_Config>
 800cb12:	4603      	mov	r3, r0
 800cb14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cb18:	e006      	b.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb20:	e002      	b.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cb22:	bf00      	nop
 800cb24:	e000      	b.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cb26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cb30:	4b68      	ldr	r3, [pc, #416]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb3e:	4a65      	ldr	r2, [pc, #404]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cb40:	430b      	orrs	r3, r1
 800cb42:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb44:	e003      	b.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cb5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cb64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	d051      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb78:	d035      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cb7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb7e:	d82e      	bhi.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cb80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb84:	d031      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cb86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb8a:	d828      	bhi.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cb8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb90:	d01a      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cb92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb96:	d822      	bhi.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cb9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba0:	d007      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cba2:	e01c      	b.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cba4:	4b4b      	ldr	r3, [pc, #300]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	4a4a      	ldr	r2, [pc, #296]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cbb0:	e01c      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	2100      	movs	r1, #0
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f002 f940 	bl	800ee40 <RCCEx_PLL2_Config>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cbc6:	e011      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbcc:	3328      	adds	r3, #40	; 0x28
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f002 f9e7 	bl	800efa4 <RCCEx_PLL3_Config>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cbdc:	e006      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cbe4:	e002      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cbe6:	bf00      	nop
 800cbe8:	e000      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cbea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cbf4:	4b37      	ldr	r3, [pc, #220]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbf8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc02:	4a34      	ldr	r2, [pc, #208]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc04:	430b      	orrs	r3, r1
 800cc06:	6513      	str	r3, [r2, #80]	; 0x50
 800cc08:	e003      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800cc1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc22:	2300      	movs	r3, #0
 800cc24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cc28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	d056      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc3c:	d033      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cc3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc42:	d82c      	bhi.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cc44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc48:	d02f      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cc4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc4e:	d826      	bhi.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cc50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc54:	d02b      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cc56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc5a:	d820      	bhi.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cc5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc60:	d012      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800cc62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc66:	d81a      	bhi.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d022      	beq.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cc6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc70:	d115      	bne.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc76:	3308      	adds	r3, #8
 800cc78:	2101      	movs	r1, #1
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f002 f8e0 	bl	800ee40 <RCCEx_PLL2_Config>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc86:	e015      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc8c:	3328      	adds	r3, #40	; 0x28
 800cc8e:	2101      	movs	r1, #1
 800cc90:	4618      	mov	r0, r3
 800cc92:	f002 f987 	bl	800efa4 <RCCEx_PLL3_Config>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc9c:	e00a      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cca4:	e006      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cca6:	bf00      	nop
 800cca8:	e004      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ccaa:	bf00      	nop
 800ccac:	e002      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ccae:	bf00      	nop
 800ccb0:	e000      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ccb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10d      	bne.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccc0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ccc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccca:	4a02      	ldr	r2, [pc, #8]	; (800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6513      	str	r3, [r2, #80]	; 0x50
 800ccd0:	e006      	b.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ccd2:	bf00      	nop
 800ccd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ccec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccf6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	d055      	beq.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd0c:	d033      	beq.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cd0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd12:	d82c      	bhi.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cd14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd18:	d02f      	beq.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd1e:	d826      	bhi.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cd20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd24:	d02b      	beq.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cd26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd2a:	d820      	bhi.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cd2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd30:	d012      	beq.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cd32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd36:	d81a      	bhi.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d022      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cd3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd40:	d115      	bne.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd46:	3308      	adds	r3, #8
 800cd48:	2101      	movs	r1, #1
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f002 f878 	bl	800ee40 <RCCEx_PLL2_Config>
 800cd50:	4603      	mov	r3, r0
 800cd52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cd56:	e015      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd5c:	3328      	adds	r3, #40	; 0x28
 800cd5e:	2101      	movs	r1, #1
 800cd60:	4618      	mov	r0, r3
 800cd62:	f002 f91f 	bl	800efa4 <RCCEx_PLL3_Config>
 800cd66:	4603      	mov	r3, r0
 800cd68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cd6c:	e00a      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd74:	e006      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cd76:	bf00      	nop
 800cd78:	e004      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cd7a:	bf00      	nop
 800cd7c:	e002      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cd7e:	bf00      	nop
 800cd80:	e000      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cd82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10b      	bne.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cd8c:	4ba3      	ldr	r3, [pc, #652]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd90:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd9c:	4a9f      	ldr	r2, [pc, #636]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	6593      	str	r3, [r2, #88]	; 0x58
 800cda2:	e003      	b.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cda8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cdac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cdb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cdc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	d037      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdd6:	d00e      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cdd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cddc:	d816      	bhi.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d018      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cde2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cde6:	d111      	bne.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cde8:	4b8c      	ldr	r3, [pc, #560]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	4a8b      	ldr	r2, [pc, #556]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cdee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cdf4:	e00f      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdfa:	3308      	adds	r3, #8
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f002 f81e 	bl	800ee40 <RCCEx_PLL2_Config>
 800ce04:	4603      	mov	r3, r0
 800ce06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ce0a:	e004      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce12:	e000      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800ce14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ce1e:	4b7f      	ldr	r3, [pc, #508]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce22:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ce26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2c:	4a7b      	ldr	r2, [pc, #492]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce2e:	430b      	orrs	r3, r1
 800ce30:	6513      	str	r3, [r2, #80]	; 0x50
 800ce32:	e003      	b.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ce3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ce48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ce52:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ce56:	460b      	mov	r3, r1
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	d039      	beq.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ce5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d81c      	bhi.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ce66:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800cea9 	.word	0x0800cea9
 800ce70:	0800ce7d 	.word	0x0800ce7d
 800ce74:	0800ce8b 	.word	0x0800ce8b
 800ce78:	0800cea9 	.word	0x0800cea9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce7c:	4b67      	ldr	r3, [pc, #412]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	4a66      	ldr	r2, [pc, #408]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce88:	e00f      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce8e:	3308      	adds	r3, #8
 800ce90:	2102      	movs	r1, #2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f001 ffd4 	bl	800ee40 <RCCEx_PLL2_Config>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce9e:	e004      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cea6:	e000      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800cea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10a      	bne.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ceb2:	4b5a      	ldr	r3, [pc, #360]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ceb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb6:	f023 0103 	bic.w	r1, r3, #3
 800ceba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec0:	4a56      	ldr	r2, [pc, #344]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cec2:	430b      	orrs	r3, r1
 800cec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cec6:	e003      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ced0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ced4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800cedc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cee0:	2300      	movs	r3, #0
 800cee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cee6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ceea:	460b      	mov	r3, r1
 800ceec:	4313      	orrs	r3, r2
 800ceee:	f000 809f 	beq.w	800d030 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cef2:	4b4b      	ldr	r3, [pc, #300]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a4a      	ldr	r2, [pc, #296]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cefc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cefe:	f7f8 f87d 	bl	8004ffc <HAL_GetTick>
 800cf02:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf06:	e00b      	b.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf08:	f7f8 f878 	bl	8004ffc <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	2b64      	cmp	r3, #100	; 0x64
 800cf16:	d903      	bls.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf1e:	e005      	b.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf20:	4b3f      	ldr	r3, [pc, #252]	; (800d020 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0ed      	beq.n	800cf08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cf2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d179      	bne.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cf34:	4b39      	ldr	r3, [pc, #228]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf40:	4053      	eors	r3, r2
 800cf42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d015      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf4a:	4b34      	ldr	r3, [pc, #208]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cf56:	4b31      	ldr	r3, [pc, #196]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5a:	4a30      	ldr	r2, [pc, #192]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cf62:	4b2e      	ldr	r3, [pc, #184]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf66:	4a2d      	ldr	r2, [pc, #180]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cf6e:	4a2b      	ldr	r2, [pc, #172]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800cf74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cf76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf82:	d118      	bne.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf84:	f7f8 f83a 	bl	8004ffc <HAL_GetTick>
 800cf88:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf8c:	e00d      	b.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf8e:	f7f8 f835 	bl	8004ffc <HAL_GetTick>
 800cf92:	4602      	mov	r2, r0
 800cf94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d903      	bls.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800cfa8:	e005      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cfaa:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0eb      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800cfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d129      	bne.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cfc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfce:	d10e      	bne.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800cfd0:	4b12      	ldr	r3, [pc, #72]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cfe0:	091a      	lsrs	r2, r3, #4
 800cfe2:	4b10      	ldr	r3, [pc, #64]	; (800d024 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	4a0d      	ldr	r2, [pc, #52]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfe8:	430b      	orrs	r3, r1
 800cfea:	6113      	str	r3, [r2, #16]
 800cfec:	e005      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800cfee:	4b0b      	ldr	r3, [pc, #44]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cff8:	6113      	str	r3, [r2, #16]
 800cffa:	4b08      	ldr	r3, [pc, #32]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cffc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00a:	4a04      	ldr	r2, [pc, #16]	; (800d01c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d00c:	430b      	orrs	r3, r1
 800d00e:	6713      	str	r3, [r2, #112]	; 0x70
 800d010:	e00e      	b.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d01a:	e009      	b.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d01c:	58024400 	.word	0x58024400
 800d020:	58024800 	.word	0x58024800
 800d024:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d02c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d038:	f002 0301 	and.w	r3, r2, #1
 800d03c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d040:	2300      	movs	r3, #0
 800d042:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d046:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4313      	orrs	r3, r2
 800d04e:	f000 8089 	beq.w	800d164 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d058:	2b28      	cmp	r3, #40	; 0x28
 800d05a:	d86b      	bhi.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d05c:	a201      	add	r2, pc, #4	; (adr r2, 800d064 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d062:	bf00      	nop
 800d064:	0800d13d 	.word	0x0800d13d
 800d068:	0800d135 	.word	0x0800d135
 800d06c:	0800d135 	.word	0x0800d135
 800d070:	0800d135 	.word	0x0800d135
 800d074:	0800d135 	.word	0x0800d135
 800d078:	0800d135 	.word	0x0800d135
 800d07c:	0800d135 	.word	0x0800d135
 800d080:	0800d135 	.word	0x0800d135
 800d084:	0800d109 	.word	0x0800d109
 800d088:	0800d135 	.word	0x0800d135
 800d08c:	0800d135 	.word	0x0800d135
 800d090:	0800d135 	.word	0x0800d135
 800d094:	0800d135 	.word	0x0800d135
 800d098:	0800d135 	.word	0x0800d135
 800d09c:	0800d135 	.word	0x0800d135
 800d0a0:	0800d135 	.word	0x0800d135
 800d0a4:	0800d11f 	.word	0x0800d11f
 800d0a8:	0800d135 	.word	0x0800d135
 800d0ac:	0800d135 	.word	0x0800d135
 800d0b0:	0800d135 	.word	0x0800d135
 800d0b4:	0800d135 	.word	0x0800d135
 800d0b8:	0800d135 	.word	0x0800d135
 800d0bc:	0800d135 	.word	0x0800d135
 800d0c0:	0800d135 	.word	0x0800d135
 800d0c4:	0800d13d 	.word	0x0800d13d
 800d0c8:	0800d135 	.word	0x0800d135
 800d0cc:	0800d135 	.word	0x0800d135
 800d0d0:	0800d135 	.word	0x0800d135
 800d0d4:	0800d135 	.word	0x0800d135
 800d0d8:	0800d135 	.word	0x0800d135
 800d0dc:	0800d135 	.word	0x0800d135
 800d0e0:	0800d135 	.word	0x0800d135
 800d0e4:	0800d13d 	.word	0x0800d13d
 800d0e8:	0800d135 	.word	0x0800d135
 800d0ec:	0800d135 	.word	0x0800d135
 800d0f0:	0800d135 	.word	0x0800d135
 800d0f4:	0800d135 	.word	0x0800d135
 800d0f8:	0800d135 	.word	0x0800d135
 800d0fc:	0800d135 	.word	0x0800d135
 800d100:	0800d135 	.word	0x0800d135
 800d104:	0800d13d 	.word	0x0800d13d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d10c:	3308      	adds	r3, #8
 800d10e:	2101      	movs	r1, #1
 800d110:	4618      	mov	r0, r3
 800d112:	f001 fe95 	bl	800ee40 <RCCEx_PLL2_Config>
 800d116:	4603      	mov	r3, r0
 800d118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d11c:	e00f      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d122:	3328      	adds	r3, #40	; 0x28
 800d124:	2101      	movs	r1, #1
 800d126:	4618      	mov	r0, r3
 800d128:	f001 ff3c 	bl	800efa4 <RCCEx_PLL3_Config>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d132:	e004      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d13a:	e000      	b.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d13c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d142:	2b00      	cmp	r3, #0
 800d144:	d10a      	bne.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d146:	4bbf      	ldr	r3, [pc, #764]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d154:	4abb      	ldr	r2, [pc, #748]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d156:	430b      	orrs	r3, r1
 800d158:	6553      	str	r3, [r2, #84]	; 0x54
 800d15a:	e003      	b.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d15c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f002 0302 	and.w	r3, r2, #2
 800d170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d174:	2300      	movs	r3, #0
 800d176:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d17a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d17e:	460b      	mov	r3, r1
 800d180:	4313      	orrs	r3, r2
 800d182:	d041      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	d824      	bhi.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d18e:	a201      	add	r2, pc, #4	; (adr r2, 800d194 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1e1 	.word	0x0800d1e1
 800d198:	0800d1ad 	.word	0x0800d1ad
 800d19c:	0800d1c3 	.word	0x0800d1c3
 800d1a0:	0800d1e1 	.word	0x0800d1e1
 800d1a4:	0800d1e1 	.word	0x0800d1e1
 800d1a8:	0800d1e1 	.word	0x0800d1e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 fe43 	bl	800ee40 <RCCEx_PLL2_Config>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d1c0:	e00f      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1c6:	3328      	adds	r3, #40	; 0x28
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f001 feea 	bl	800efa4 <RCCEx_PLL3_Config>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d1d6:	e004      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1de:	e000      	b.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10a      	bne.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d1ea:	4b96      	ldr	r3, [pc, #600]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ee:	f023 0107 	bic.w	r1, r3, #7
 800d1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1f8:	4a92      	ldr	r2, [pc, #584]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1fa:	430b      	orrs	r3, r1
 800d1fc:	6553      	str	r3, [r2, #84]	; 0x54
 800d1fe:	e003      	b.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f002 0304 	and.w	r3, r2, #4
 800d214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d218:	2300      	movs	r3, #0
 800d21a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d21e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d222:	460b      	mov	r3, r1
 800d224:	4313      	orrs	r3, r2
 800d226:	d044      	beq.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d22c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d230:	2b05      	cmp	r3, #5
 800d232:	d825      	bhi.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d234:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23a:	bf00      	nop
 800d23c:	0800d289 	.word	0x0800d289
 800d240:	0800d255 	.word	0x0800d255
 800d244:	0800d26b 	.word	0x0800d26b
 800d248:	0800d289 	.word	0x0800d289
 800d24c:	0800d289 	.word	0x0800d289
 800d250:	0800d289 	.word	0x0800d289
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d258:	3308      	adds	r3, #8
 800d25a:	2101      	movs	r1, #1
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 fdef 	bl	800ee40 <RCCEx_PLL2_Config>
 800d262:	4603      	mov	r3, r0
 800d264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d268:	e00f      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d26e:	3328      	adds	r3, #40	; 0x28
 800d270:	2101      	movs	r1, #1
 800d272:	4618      	mov	r0, r3
 800d274:	f001 fe96 	bl	800efa4 <RCCEx_PLL3_Config>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d27e:	e004      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d286:	e000      	b.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10b      	bne.n	800d2aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d292:	4b6c      	ldr	r3, [pc, #432]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d296:	f023 0107 	bic.w	r1, r3, #7
 800d29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d29e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2a2:	4a68      	ldr	r2, [pc, #416]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	6593      	str	r3, [r2, #88]	; 0x58
 800d2a8:	e003      	b.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	f002 0320 	and.w	r3, r2, #32
 800d2be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	d055      	beq.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2de:	d033      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d2e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2e4:	d82c      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ea:	d02f      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d2ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f0:	d826      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d2f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2f6:	d02b      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d2f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2fc:	d820      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d2fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d302:	d012      	beq.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d308:	d81a      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d022      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d30e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d312:	d115      	bne.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d318:	3308      	adds	r3, #8
 800d31a:	2100      	movs	r1, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f001 fd8f 	bl	800ee40 <RCCEx_PLL2_Config>
 800d322:	4603      	mov	r3, r0
 800d324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d328:	e015      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d32e:	3328      	adds	r3, #40	; 0x28
 800d330:	2102      	movs	r1, #2
 800d332:	4618      	mov	r0, r3
 800d334:	f001 fe36 	bl	800efa4 <RCCEx_PLL3_Config>
 800d338:	4603      	mov	r3, r0
 800d33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d33e:	e00a      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d346:	e006      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d348:	bf00      	nop
 800d34a:	e004      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d34c:	bf00      	nop
 800d34e:	e002      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d350:	bf00      	nop
 800d352:	e000      	b.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d354:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10b      	bne.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d35e:	4b39      	ldr	r3, [pc, #228]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d362:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d36e:	4a35      	ldr	r2, [pc, #212]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d370:	430b      	orrs	r3, r1
 800d372:	6553      	str	r3, [r2, #84]	; 0x54
 800d374:	e003      	b.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d37a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d38a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d38e:	2300      	movs	r3, #0
 800d390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d394:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d398:	460b      	mov	r3, r1
 800d39a:	4313      	orrs	r3, r2
 800d39c:	d058      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3aa:	d033      	beq.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d3ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3b0:	d82c      	bhi.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b6:	d02f      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3bc:	d826      	bhi.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d3be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3c2:	d02b      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d3c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3c8:	d820      	bhi.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d3ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3ce:	d012      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d3d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3d4:	d81a      	bhi.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d022      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d3da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3de:	d115      	bne.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f001 fd29 	bl	800ee40 <RCCEx_PLL2_Config>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d3f4:	e015      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3fa:	3328      	adds	r3, #40	; 0x28
 800d3fc:	2102      	movs	r1, #2
 800d3fe:	4618      	mov	r0, r3
 800d400:	f001 fdd0 	bl	800efa4 <RCCEx_PLL3_Config>
 800d404:	4603      	mov	r3, r0
 800d406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d40a:	e00a      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d412:	e006      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d414:	bf00      	nop
 800d416:	e004      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d418:	bf00      	nop
 800d41a:	e002      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d41c:	bf00      	nop
 800d41e:	e000      	b.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10e      	bne.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d42a:	4b06      	ldr	r3, [pc, #24]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d42e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d43a:	4a02      	ldr	r2, [pc, #8]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d43c:	430b      	orrs	r3, r1
 800d43e:	6593      	str	r3, [r2, #88]	; 0x58
 800d440:	e006      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d442:	bf00      	nop
 800d444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d45c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d460:	2300      	movs	r3, #0
 800d462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d466:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d46a:	460b      	mov	r3, r1
 800d46c:	4313      	orrs	r3, r2
 800d46e:	d055      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d474:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d478:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d47c:	d033      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d47e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d482:	d82c      	bhi.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d488:	d02f      	beq.n	800d4ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d48e:	d826      	bhi.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d490:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d494:	d02b      	beq.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d496:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d49a:	d820      	bhi.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d49c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4a0:	d012      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d4a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4a6:	d81a      	bhi.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d022      	beq.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d4ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4b0:	d115      	bne.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f001 fcc0 	bl	800ee40 <RCCEx_PLL2_Config>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d4c6:	e015      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4cc:	3328      	adds	r3, #40	; 0x28
 800d4ce:	2102      	movs	r1, #2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 fd67 	bl	800efa4 <RCCEx_PLL3_Config>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d4dc:	e00a      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d4e4:	e006      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d4e6:	bf00      	nop
 800d4e8:	e004      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d4ea:	bf00      	nop
 800d4ec:	e002      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d4ee:	bf00      	nop
 800d4f0:	e000      	b.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d4f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10b      	bne.n	800d514 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d4fc:	4ba1      	ldr	r3, [pc, #644]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d500:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d50c:	4a9d      	ldr	r2, [pc, #628]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d50e:	430b      	orrs	r3, r1
 800d510:	6593      	str	r3, [r2, #88]	; 0x58
 800d512:	e003      	b.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f002 0308 	and.w	r3, r2, #8
 800d528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d52c:	2300      	movs	r3, #0
 800d52e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d532:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d536:	460b      	mov	r3, r1
 800d538:	4313      	orrs	r3, r2
 800d53a:	d01e      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d548:	d10c      	bne.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d54e:	3328      	adds	r3, #40	; 0x28
 800d550:	2102      	movs	r1, #2
 800d552:	4618      	mov	r0, r3
 800d554:	f001 fd26 	bl	800efa4 <RCCEx_PLL3_Config>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d564:	4b87      	ldr	r3, [pc, #540]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d568:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d574:	4a83      	ldr	r2, [pc, #524]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d576:	430b      	orrs	r3, r1
 800d578:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f002 0310 	and.w	r3, r2, #16
 800d586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d58a:	2300      	movs	r3, #0
 800d58c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d590:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d594:	460b      	mov	r3, r1
 800d596:	4313      	orrs	r3, r2
 800d598:	d01e      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5a6:	d10c      	bne.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ac:	3328      	adds	r3, #40	; 0x28
 800d5ae:	2102      	movs	r1, #2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f001 fcf7 	bl	800efa4 <RCCEx_PLL3_Config>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5c2:	4b70      	ldr	r3, [pc, #448]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5d2:	4a6c      	ldr	r2, [pc, #432]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5d4:	430b      	orrs	r3, r1
 800d5d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d5e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	d03e      	beq.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d604:	d022      	beq.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d60a:	d81b      	bhi.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d614:	d00b      	beq.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d616:	e015      	b.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d61c:	3308      	adds	r3, #8
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f001 fc0d 	bl	800ee40 <RCCEx_PLL2_Config>
 800d626:	4603      	mov	r3, r0
 800d628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d62c:	e00f      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d632:	3328      	adds	r3, #40	; 0x28
 800d634:	2102      	movs	r1, #2
 800d636:	4618      	mov	r0, r3
 800d638:	f001 fcb4 	bl	800efa4 <RCCEx_PLL3_Config>
 800d63c:	4603      	mov	r3, r0
 800d63e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d642:	e004      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d64a:	e000      	b.n	800d64e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d64c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d64e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10b      	bne.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d656:	4b4b      	ldr	r3, [pc, #300]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d65a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d662:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d666:	4a47      	ldr	r2, [pc, #284]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d668:	430b      	orrs	r3, r1
 800d66a:	6593      	str	r3, [r2, #88]	; 0x58
 800d66c:	e003      	b.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d66e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d682:	67bb      	str	r3, [r7, #120]	; 0x78
 800d684:	2300      	movs	r3, #0
 800d686:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d688:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d68c:	460b      	mov	r3, r1
 800d68e:	4313      	orrs	r3, r2
 800d690:	d03b      	beq.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d69e:	d01f      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d6a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d6a4:	d818      	bhi.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6aa:	d003      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d6ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6b0:	d007      	beq.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d6b2:	e011      	b.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6b4:	4b33      	ldr	r3, [pc, #204]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	4a32      	ldr	r2, [pc, #200]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d6c0:	e00f      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c6:	3328      	adds	r3, #40	; 0x28
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f001 fc6a 	bl	800efa4 <RCCEx_PLL3_Config>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d6d6:	e004      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d6de:	e000      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d6ea:	4b26      	ldr	r3, [pc, #152]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6fa:	4a22      	ldr	r2, [pc, #136]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	6553      	str	r3, [r2, #84]	; 0x54
 800d700:	e003      	b.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d706:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d716:	673b      	str	r3, [r7, #112]	; 0x70
 800d718:	2300      	movs	r3, #0
 800d71a:	677b      	str	r3, [r7, #116]	; 0x74
 800d71c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d720:	460b      	mov	r3, r1
 800d722:	4313      	orrs	r3, r2
 800d724:	d034      	beq.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d003      	beq.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d734:	d007      	beq.n	800d746 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d736:	e011      	b.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d738:	4b12      	ldr	r3, [pc, #72]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	4a11      	ldr	r2, [pc, #68]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d744:	e00e      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d74a:	3308      	adds	r3, #8
 800d74c:	2102      	movs	r1, #2
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 fb76 	bl	800ee40 <RCCEx_PLL2_Config>
 800d754:	4603      	mov	r3, r0
 800d756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d75a:	e003      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d75c:	2301      	movs	r3, #1
 800d75e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10d      	bne.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d76e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d77a:	4a02      	ldr	r2, [pc, #8]	; (800d784 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d77c:	430b      	orrs	r3, r1
 800d77e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d780:	e006      	b.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d782:	bf00      	nop
 800d784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d78c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d798:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d79c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d79e:	2300      	movs	r3, #0
 800d7a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	d00c      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b0:	3328      	adds	r3, #40	; 0x28
 800d7b2:	2102      	movs	r1, #2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f001 fbf5 	bl	800efa4 <RCCEx_PLL3_Config>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d7d2:	663b      	str	r3, [r7, #96]	; 0x60
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	667b      	str	r3, [r7, #100]	; 0x64
 800d7d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	d038      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7ee:	d018      	beq.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d7f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7f4:	d811      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d7f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7fa:	d014      	beq.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d7fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d800:	d80b      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d011      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d80a:	d106      	bne.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d80c:	4bc3      	ldr	r3, [pc, #780]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	4ac2      	ldr	r2, [pc, #776]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d818:	e008      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d820:	e004      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d822:	bf00      	nop
 800d824:	e002      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d826:	bf00      	nop
 800d828:	e000      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10b      	bne.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d834:	4bb9      	ldr	r3, [pc, #740]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d838:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d844:	4ab5      	ldr	r2, [pc, #724]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d846:	430b      	orrs	r3, r1
 800d848:	6553      	str	r3, [r2, #84]	; 0x54
 800d84a:	e003      	b.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d850:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d860:	65bb      	str	r3, [r7, #88]	; 0x58
 800d862:	2300      	movs	r3, #0
 800d864:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d866:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d86a:	460b      	mov	r3, r1
 800d86c:	4313      	orrs	r3, r2
 800d86e:	d009      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d870:	4baa      	ldr	r3, [pc, #680]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d874:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d87c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87e:	4aa7      	ldr	r2, [pc, #668]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d880:	430b      	orrs	r3, r1
 800d882:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d890:	653b      	str	r3, [r7, #80]	; 0x50
 800d892:	2300      	movs	r3, #0
 800d894:	657b      	str	r3, [r7, #84]	; 0x54
 800d896:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d89a:	460b      	mov	r3, r1
 800d89c:	4313      	orrs	r3, r2
 800d89e:	d00a      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d8a0:	4b9e      	ldr	r3, [pc, #632]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d8b0:	4a9a      	ldr	r2, [pc, #616]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d8b2:	430b      	orrs	r3, r1
 800d8b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d8c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	d009      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d8d2:	4b92      	ldr	r3, [pc, #584]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d8d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e0:	4a8e      	ldr	r2, [pc, #568]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d8e2:	430b      	orrs	r3, r1
 800d8e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d8f2:	643b      	str	r3, [r7, #64]	; 0x40
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d8f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4313      	orrs	r3, r2
 800d900:	d00e      	beq.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d902:	4b86      	ldr	r3, [pc, #536]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	4a85      	ldr	r2, [pc, #532]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d90c:	6113      	str	r3, [r2, #16]
 800d90e:	4b83      	ldr	r3, [pc, #524]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d910:	6919      	ldr	r1, [r3, #16]
 800d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d916:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d91a:	4a80      	ldr	r2, [pc, #512]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d91c:	430b      	orrs	r3, r1
 800d91e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d92c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d92e:	2300      	movs	r3, #0
 800d930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d932:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d936:	460b      	mov	r3, r1
 800d938:	4313      	orrs	r3, r2
 800d93a:	d009      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d93c:	4b77      	ldr	r3, [pc, #476]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d940:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d94a:	4a74      	ldr	r2, [pc, #464]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d94c:	430b      	orrs	r3, r1
 800d94e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d95c:	633b      	str	r3, [r7, #48]	; 0x30
 800d95e:	2300      	movs	r3, #0
 800d960:	637b      	str	r3, [r7, #52]	; 0x34
 800d962:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d966:	460b      	mov	r3, r1
 800d968:	4313      	orrs	r3, r2
 800d96a:	d00a      	beq.n	800d982 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d96c:	4b6b      	ldr	r3, [pc, #428]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d970:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d97c:	4a67      	ldr	r2, [pc, #412]	; (800db1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d97e:	430b      	orrs	r3, r1
 800d980:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	2100      	movs	r1, #0
 800d98c:	62b9      	str	r1, [r7, #40]	; 0x28
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d994:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d998:	460b      	mov	r3, r1
 800d99a:	4313      	orrs	r3, r2
 800d99c:	d011      	beq.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f001 fa4a 	bl	800ee40 <RCCEx_PLL2_Config>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	6239      	str	r1, [r7, #32]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d9d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	d011      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e2:	3308      	adds	r3, #8
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f001 fa2a 	bl	800ee40 <RCCEx_PLL2_Config>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800da02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	2100      	movs	r1, #0
 800da0c:	61b9      	str	r1, [r7, #24]
 800da0e:	f003 0304 	and.w	r3, r3, #4
 800da12:	61fb      	str	r3, [r7, #28]
 800da14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800da18:	460b      	mov	r3, r1
 800da1a:	4313      	orrs	r3, r2
 800da1c:	d011      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da22:	3308      	adds	r3, #8
 800da24:	2102      	movs	r1, #2
 800da26:	4618      	mov	r0, r3
 800da28:	f001 fa0a 	bl	800ee40 <RCCEx_PLL2_Config>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800da32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800da42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	2100      	movs	r1, #0
 800da4c:	6139      	str	r1, [r7, #16]
 800da4e:	f003 0308 	and.w	r3, r3, #8
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800da58:	460b      	mov	r3, r1
 800da5a:	4313      	orrs	r3, r2
 800da5c:	d011      	beq.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da62:	3328      	adds	r3, #40	; 0x28
 800da64:	2100      	movs	r1, #0
 800da66:	4618      	mov	r0, r3
 800da68:	f001 fa9c 	bl	800efa4 <RCCEx_PLL3_Config>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800da72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800da82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	2100      	movs	r1, #0
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	f003 0310 	and.w	r3, r3, #16
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800da98:	460b      	mov	r3, r1
 800da9a:	4313      	orrs	r3, r2
 800da9c:	d011      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa2:	3328      	adds	r3, #40	; 0x28
 800daa4:	2101      	movs	r1, #1
 800daa6:	4618      	mov	r0, r3
 800daa8:	f001 fa7c 	bl	800efa4 <RCCEx_PLL3_Config>
 800daac:	4603      	mov	r3, r0
 800daae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dabe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	2100      	movs	r1, #0
 800dacc:	6039      	str	r1, [r7, #0]
 800dace:	f003 0320 	and.w	r3, r3, #32
 800dad2:	607b      	str	r3, [r7, #4]
 800dad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dad8:	460b      	mov	r3, r1
 800dada:	4313      	orrs	r3, r2
 800dadc:	d011      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae2:	3328      	adds	r3, #40	; 0x28
 800dae4:	2102      	movs	r1, #2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f001 fa5c 	bl	800efa4 <RCCEx_PLL3_Config>
 800daec:	4603      	mov	r3, r0
 800daee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800daf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d003      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dafe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800db02:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800db06:	2b00      	cmp	r3, #0
 800db08:	d101      	bne.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	e000      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
}
 800db10:	4618      	mov	r0, r3
 800db12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800db16:	46bd      	mov	sp, r7
 800db18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db1c:	58024400 	.word	0x58024400

0800db20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b090      	sub	sp, #64	; 0x40
 800db24:	af00      	add	r7, sp, #0
 800db26:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800db2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db2e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800db32:	430b      	orrs	r3, r1
 800db34:	f040 8094 	bne.w	800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800db38:	4b9e      	ldr	r3, [pc, #632]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db3c:	f003 0307 	and.w	r3, r3, #7
 800db40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	2b04      	cmp	r3, #4
 800db46:	f200 8087 	bhi.w	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800db4a:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800db65 	.word	0x0800db65
 800db54:	0800db8d 	.word	0x0800db8d
 800db58:	0800dbb5 	.word	0x0800dbb5
 800db5c:	0800dc51 	.word	0x0800dc51
 800db60:	0800dbdd 	.word	0x0800dbdd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db64:	4b93      	ldr	r3, [pc, #588]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db70:	d108      	bne.n	800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db76:	4618      	mov	r0, r3
 800db78:	f001 f810 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db80:	f000 bd45 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db88:	f000 bd41 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db8c:	4b89      	ldr	r3, [pc, #548]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db98:	d108      	bne.n	800dbac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db9a:	f107 0318 	add.w	r3, r7, #24
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 fd54 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dba8:	f000 bd31 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbb0:	f000 bd2d 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dbb4:	4b7f      	ldr	r3, [pc, #508]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbc0:	d108      	bne.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbc2:	f107 030c 	add.w	r3, r7, #12
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 fe94 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbd0:	f000 bd1d 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbd8:	f000 bd19 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dbdc:	4b75      	ldr	r3, [pc, #468]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbe4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dbe6:	4b73      	ldr	r3, [pc, #460]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0304 	and.w	r3, r3, #4
 800dbee:	2b04      	cmp	r3, #4
 800dbf0:	d10c      	bne.n	800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800dbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d109      	bne.n	800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbf8:	4b6e      	ldr	r3, [pc, #440]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	08db      	lsrs	r3, r3, #3
 800dbfe:	f003 0303 	and.w	r3, r3, #3
 800dc02:	4a6d      	ldr	r2, [pc, #436]	; (800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dc04:	fa22 f303 	lsr.w	r3, r2, r3
 800dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc0a:	e01f      	b.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc0c:	4b69      	ldr	r3, [pc, #420]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc18:	d106      	bne.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc20:	d102      	bne.n	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc22:	4b66      	ldr	r3, [pc, #408]	; (800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800dc24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc26:	e011      	b.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc28:	4b62      	ldr	r3, [pc, #392]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc34:	d106      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800dc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc3c:	d102      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc3e:	4b60      	ldr	r3, [pc, #384]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dc40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc42:	e003      	b.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dc48:	f000 bce1 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dc4c:	f000 bcdf 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc50:	4b5c      	ldr	r3, [pc, #368]	; (800ddc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800dc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc54:	f000 bcdb 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc5c:	f000 bcd7 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800dc60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc64:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800dc68:	430b      	orrs	r3, r1
 800dc6a:	f040 80ad 	bne.w	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800dc6e:	4b51      	ldr	r3, [pc, #324]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc72:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800dc76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc7e:	d056      	beq.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc86:	f200 8090 	bhi.w	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	2bc0      	cmp	r3, #192	; 0xc0
 800dc8e:	f000 8088 	beq.w	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	2bc0      	cmp	r3, #192	; 0xc0
 800dc96:	f200 8088 	bhi.w	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2b80      	cmp	r3, #128	; 0x80
 800dc9e:	d032      	beq.n	800dd06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	2b80      	cmp	r3, #128	; 0x80
 800dca4:	f200 8081 	bhi.w	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d003      	beq.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	2b40      	cmp	r3, #64	; 0x40
 800dcb2:	d014      	beq.n	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800dcb4:	e079      	b.n	800ddaa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dcb6:	4b3f      	ldr	r3, [pc, #252]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcc2:	d108      	bne.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 ff67 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcd2:	f000 bc9c 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcda:	f000 bc98 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcde:	4b35      	ldr	r3, [pc, #212]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcea:	d108      	bne.n	800dcfe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcec:	f107 0318 	add.w	r3, r7, #24
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 fcab 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcfa:	f000 bc88 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd02:	f000 bc84 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd06:	4b2b      	ldr	r3, [pc, #172]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd12:	d108      	bne.n	800dd26 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd14:	f107 030c 	add.w	r3, r7, #12
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 fdeb 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd22:	f000 bc74 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd2a:	f000 bc70 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd2e:	4b21      	ldr	r3, [pc, #132]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd38:	4b1e      	ldr	r3, [pc, #120]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f003 0304 	and.w	r3, r3, #4
 800dd40:	2b04      	cmp	r3, #4
 800dd42:	d10c      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800dd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d109      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd4a:	4b1a      	ldr	r3, [pc, #104]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	08db      	lsrs	r3, r3, #3
 800dd50:	f003 0303 	and.w	r3, r3, #3
 800dd54:	4a18      	ldr	r2, [pc, #96]	; (800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dd56:	fa22 f303 	lsr.w	r3, r2, r3
 800dd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd5c:	e01f      	b.n	800dd9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd5e:	4b15      	ldr	r3, [pc, #84]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd6a:	d106      	bne.n	800dd7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800dd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd72:	d102      	bne.n	800dd7a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dd74:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd78:	e011      	b.n	800dd9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd7a:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd86:	d106      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800dd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd8e:	d102      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd90:	4b0b      	ldr	r3, [pc, #44]	; (800ddc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dd92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd94:	e003      	b.n	800dd9e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dd9a:	f000 bc38 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dd9e:	f000 bc36 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dda2:	4b08      	ldr	r3, [pc, #32]	; (800ddc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800dda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dda6:	f000 bc32 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddae:	f000 bc2e 	b.w	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ddb2:	bf00      	nop
 800ddb4:	58024400 	.word	0x58024400
 800ddb8:	03d09000 	.word	0x03d09000
 800ddbc:	003d0900 	.word	0x003d0900
 800ddc0:	017d7840 	.word	0x017d7840
 800ddc4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ddc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddcc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ddd0:	430b      	orrs	r3, r1
 800ddd2:	f040 809c 	bne.w	800df0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ddd6:	4b9e      	ldr	r3, [pc, #632]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ddd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddda:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ddde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dde6:	d054      	beq.n	800de92 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddee:	f200 808b 	bhi.w	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ddf8:	f000 8083 	beq.w	800df02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ddfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800de02:	f200 8081 	bhi.w	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de0c:	d02f      	beq.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de14:	d878      	bhi.n	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800de1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de22:	d012      	beq.n	800de4a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800de24:	e070      	b.n	800df08 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de26:	4b8a      	ldr	r3, [pc, #552]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de32:	d107      	bne.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de38:	4618      	mov	r0, r3
 800de3a:	f000 feaf 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de42:	e3e4      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de48:	e3e1      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de4a:	4b81      	ldr	r3, [pc, #516]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de56:	d107      	bne.n	800de68 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de58:	f107 0318 	add.w	r3, r7, #24
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fbf5 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de66:	e3d2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de68:	2300      	movs	r3, #0
 800de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de6c:	e3cf      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de6e:	4b78      	ldr	r3, [pc, #480]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de7a:	d107      	bne.n	800de8c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	4618      	mov	r0, r3
 800de82:	f000 fd37 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de8a:	e3c0      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de90:	e3bd      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de92:	4b6f      	ldr	r3, [pc, #444]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de9c:	4b6c      	ldr	r3, [pc, #432]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 0304 	and.w	r3, r3, #4
 800dea4:	2b04      	cmp	r3, #4
 800dea6:	d10c      	bne.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800dea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d109      	bne.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800deae:	4b68      	ldr	r3, [pc, #416]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	08db      	lsrs	r3, r3, #3
 800deb4:	f003 0303 	and.w	r3, r3, #3
 800deb8:	4a66      	ldr	r2, [pc, #408]	; (800e054 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800deba:	fa22 f303 	lsr.w	r3, r2, r3
 800debe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dec0:	e01e      	b.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dec2:	4b63      	ldr	r3, [pc, #396]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dece:	d106      	bne.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ded0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ded6:	d102      	bne.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ded8:	4b5f      	ldr	r3, [pc, #380]	; (800e058 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800deda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dedc:	e010      	b.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dede:	4b5c      	ldr	r3, [pc, #368]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800deea:	d106      	bne.n	800defa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800deec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800def2:	d102      	bne.n	800defa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800def4:	4b59      	ldr	r3, [pc, #356]	; (800e05c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800def6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800def8:	e002      	b.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800defe:	e386      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df00:	e385      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800df02:	4b57      	ldr	r3, [pc, #348]	; (800e060 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800df04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df06:	e382      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df0c:	e37f      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800df0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df12:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800df16:	430b      	orrs	r3, r1
 800df18:	f040 80a7 	bne.w	800e06a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800df1c:	4b4c      	ldr	r3, [pc, #304]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df20:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800df24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df2c:	d055      	beq.n	800dfda <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df34:	f200 8096 	bhi.w	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800df3e:	f000 8084 	beq.w	800e04a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800df48:	f200 808c 	bhi.w	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800df4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df52:	d030      	beq.n	800dfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df5a:	f200 8083 	bhi.w	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	2b00      	cmp	r3, #0
 800df62:	d004      	beq.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df6a:	d012      	beq.n	800df92 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800df6c:	e07a      	b.n	800e064 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df6e:	4b38      	ldr	r3, [pc, #224]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df7a:	d107      	bne.n	800df8c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fe0b 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df8a:	e340      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df90:	e33d      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df92:	4b2f      	ldr	r3, [pc, #188]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df9e:	d107      	bne.n	800dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfa0:	f107 0318 	add.w	r3, r7, #24
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f000 fb51 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfae:	e32e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfb4:	e32b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dfb6:	4b26      	ldr	r3, [pc, #152]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfc2:	d107      	bne.n	800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfc4:	f107 030c 	add.w	r3, r7, #12
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fc93 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfd2:	e31c      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd8:	e319      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dfda:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dfdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dfe2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dfe4:	4b1a      	ldr	r3, [pc, #104]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f003 0304 	and.w	r3, r3, #4
 800dfec:	2b04      	cmp	r3, #4
 800dfee:	d10c      	bne.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800dff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d109      	bne.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dff6:	4b16      	ldr	r3, [pc, #88]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	08db      	lsrs	r3, r3, #3
 800dffc:	f003 0303 	and.w	r3, r3, #3
 800e000:	4a14      	ldr	r2, [pc, #80]	; (800e054 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e002:	fa22 f303 	lsr.w	r3, r2, r3
 800e006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e008:	e01e      	b.n	800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e00a:	4b11      	ldr	r3, [pc, #68]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e016:	d106      	bne.n	800e026 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e01a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e01e:	d102      	bne.n	800e026 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e020:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e024:	e010      	b.n	800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e026:	4b0a      	ldr	r3, [pc, #40]	; (800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e02e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e032:	d106      	bne.n	800e042 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e03a:	d102      	bne.n	800e042 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e03c:	4b07      	ldr	r3, [pc, #28]	; (800e05c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e040:	e002      	b.n	800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e046:	e2e2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e048:	e2e1      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e04a:	4b05      	ldr	r3, [pc, #20]	; (800e060 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e04e:	e2de      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e050:	58024400 	.word	0x58024400
 800e054:	03d09000 	.word	0x03d09000
 800e058:	003d0900 	.word	0x003d0900
 800e05c:	017d7840 	.word	0x017d7840
 800e060:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e068:	e2d1      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e06e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e072:	430b      	orrs	r3, r1
 800e074:	f040 809c 	bne.w	800e1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e078:	4b93      	ldr	r3, [pc, #588]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e07c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e080:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e088:	d054      	beq.n	800e134 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e090:	f200 808b 	bhi.w	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e09a:	f000 8083 	beq.w	800e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e0a4:	f200 8081 	bhi.w	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0ae:	d02f      	beq.n	800e110 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0b6:	d878      	bhi.n	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d004      	beq.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0c4:	d012      	beq.n	800e0ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e0c6:	e070      	b.n	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e0c8:	4b7f      	ldr	r3, [pc, #508]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0d4:	d107      	bne.n	800e0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 fd5e 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e4:	e293      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ea:	e290      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0ec:	4b76      	ldr	r3, [pc, #472]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0f8:	d107      	bne.n	800e10a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0fa:	f107 0318 	add.w	r3, r7, #24
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 faa4 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e108:	e281      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e10e:	e27e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e110:	4b6d      	ldr	r3, [pc, #436]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e11c:	d107      	bne.n	800e12e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e11e:	f107 030c 	add.w	r3, r7, #12
 800e122:	4618      	mov	r0, r3
 800e124:	f000 fbe6 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e12c:	e26f      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e132:	e26c      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e134:	4b64      	ldr	r3, [pc, #400]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e13c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e13e:	4b62      	ldr	r3, [pc, #392]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0304 	and.w	r3, r3, #4
 800e146:	2b04      	cmp	r3, #4
 800e148:	d10c      	bne.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d109      	bne.n	800e164 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e150:	4b5d      	ldr	r3, [pc, #372]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	08db      	lsrs	r3, r3, #3
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	4a5c      	ldr	r2, [pc, #368]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e15c:	fa22 f303 	lsr.w	r3, r2, r3
 800e160:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e162:	e01e      	b.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e164:	4b58      	ldr	r3, [pc, #352]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e170:	d106      	bne.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e178:	d102      	bne.n	800e180 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e17a:	4b55      	ldr	r3, [pc, #340]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e17e:	e010      	b.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e180:	4b51      	ldr	r3, [pc, #324]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e18c:	d106      	bne.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e194:	d102      	bne.n	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e196:	4b4f      	ldr	r3, [pc, #316]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e19a:	e002      	b.n	800e1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e1a0:	e235      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e1a2:	e234      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1a4:	4b4c      	ldr	r3, [pc, #304]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a8:	e231      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ae:	e22e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1b4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e1b8:	430b      	orrs	r3, r1
 800e1ba:	f040 808f 	bne.w	800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e1be:	4b42      	ldr	r3, [pc, #264]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e1c6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e1ce:	d06b      	beq.n	800e2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e1d6:	d874      	bhi.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1de:	d056      	beq.n	800e28e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e1e6:	d86c      	bhi.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e1ee:	d03b      	beq.n	800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e1f6:	d864      	bhi.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1fe:	d021      	beq.n	800e244 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e206:	d85c      	bhi.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d004      	beq.n	800e218 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e214:	d004      	beq.n	800e220 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e216:	e054      	b.n	800e2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e218:	f7fe fa4c 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 800e21c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e21e:	e1f6      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e220:	4b29      	ldr	r3, [pc, #164]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e22c:	d107      	bne.n	800e23e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e22e:	f107 0318 	add.w	r3, r7, #24
 800e232:	4618      	mov	r0, r3
 800e234:	f000 fa0a 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e23c:	e1e7      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e242:	e1e4      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e244:	4b20      	ldr	r3, [pc, #128]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e250:	d107      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e252:	f107 030c 	add.w	r3, r7, #12
 800e256:	4618      	mov	r0, r3
 800e258:	f000 fb4c 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e260:	e1d5      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e266:	e1d2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e268:	4b17      	ldr	r3, [pc, #92]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	2b04      	cmp	r3, #4
 800e272:	d109      	bne.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e274:	4b14      	ldr	r3, [pc, #80]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	08db      	lsrs	r3, r3, #3
 800e27a:	f003 0303 	and.w	r3, r3, #3
 800e27e:	4a13      	ldr	r2, [pc, #76]	; (800e2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e280:	fa22 f303 	lsr.w	r3, r2, r3
 800e284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e286:	e1c2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e288:	2300      	movs	r3, #0
 800e28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e28c:	e1bf      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e28e:	4b0e      	ldr	r3, [pc, #56]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e29a:	d102      	bne.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e29c:	4b0c      	ldr	r3, [pc, #48]	; (800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2a0:	e1b5      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2a6:	e1b2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e2a8:	4b07      	ldr	r3, [pc, #28]	; (800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2b4:	d102      	bne.n	800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e2b6:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2ba:	e1a8      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c0:	e1a5      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c6:	e1a2      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2c8:	58024400 	.word	0x58024400
 800e2cc:	03d09000 	.word	0x03d09000
 800e2d0:	003d0900 	.word	0x003d0900
 800e2d4:	017d7840 	.word	0x017d7840
 800e2d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e2e4:	430b      	orrs	r3, r1
 800e2e6:	d173      	bne.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e2e8:	4b9c      	ldr	r3, [pc, #624]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e2f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2f8:	d02f      	beq.n	800e35a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e300:	d863      	bhi.n	800e3ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	2b00      	cmp	r3, #0
 800e306:	d004      	beq.n	800e312 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e30e:	d012      	beq.n	800e336 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e310:	e05b      	b.n	800e3ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e312:	4b92      	ldr	r3, [pc, #584]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e31a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e31e:	d107      	bne.n	800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e320:	f107 0318 	add.w	r3, r7, #24
 800e324:	4618      	mov	r0, r3
 800e326:	f000 f991 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e32e:	e16e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e330:	2300      	movs	r3, #0
 800e332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e334:	e16b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e336:	4b89      	ldr	r3, [pc, #548]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e342:	d107      	bne.n	800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	4618      	mov	r0, r3
 800e34a:	f000 fad3 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e352:	e15c      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e358:	e159      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e35a:	4b80      	ldr	r3, [pc, #512]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e35e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e362:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e364:	4b7d      	ldr	r3, [pc, #500]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f003 0304 	and.w	r3, r3, #4
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d10c      	bne.n	800e38a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e372:	2b00      	cmp	r3, #0
 800e374:	d109      	bne.n	800e38a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e376:	4b79      	ldr	r3, [pc, #484]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	08db      	lsrs	r3, r3, #3
 800e37c:	f003 0303 	and.w	r3, r3, #3
 800e380:	4a77      	ldr	r2, [pc, #476]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e382:	fa22 f303 	lsr.w	r3, r2, r3
 800e386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e388:	e01e      	b.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e38a:	4b74      	ldr	r3, [pc, #464]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e396:	d106      	bne.n	800e3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e39e:	d102      	bne.n	800e3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3a0:	4b70      	ldr	r3, [pc, #448]	; (800e564 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3a4:	e010      	b.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3a6:	4b6d      	ldr	r3, [pc, #436]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3b2:	d106      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3ba:	d102      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e3bc:	4b6a      	ldr	r3, [pc, #424]	; (800e568 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3c0:	e002      	b.n	800e3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e3c6:	e122      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e3c8:	e121      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ce:	e11e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3d4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e3d8:	430b      	orrs	r3, r1
 800e3da:	d133      	bne.n	800e444 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e3dc:	4b5f      	ldr	r3, [pc, #380]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f2:	d012      	beq.n	800e41a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e3f4:	e023      	b.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e3f6:	4b59      	ldr	r3, [pc, #356]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e402:	d107      	bne.n	800e414 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 fbc7 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e412:	e0fc      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e414:	2300      	movs	r3, #0
 800e416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e418:	e0f9      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e41a:	4b50      	ldr	r3, [pc, #320]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e426:	d107      	bne.n	800e438 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e428:	f107 0318 	add.w	r3, r7, #24
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 f90d 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e436:	e0ea      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43c:	e0e7      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e442:	e0e4      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e444:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e448:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e44c:	430b      	orrs	r3, r1
 800e44e:	f040 808d 	bne.w	800e56c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e452:	4b42      	ldr	r3, [pc, #264]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e456:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e45a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e462:	d06b      	beq.n	800e53c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e46a:	d874      	bhi.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e472:	d056      	beq.n	800e522 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e47a:	d86c      	bhi.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e482:	d03b      	beq.n	800e4fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e48a:	d864      	bhi.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e492:	d021      	beq.n	800e4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e49a:	d85c      	bhi.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d004      	beq.n	800e4ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4a8:	d004      	beq.n	800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e4aa:	e054      	b.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e4ac:	f000 f8b8 	bl	800e620 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4b2:	e0ac      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4b4:	4b29      	ldr	r3, [pc, #164]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4c0:	d107      	bne.n	800e4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4c2:	f107 0318 	add.w	r3, r7, #24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f8c0 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4d0:	e09d      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d6:	e09a      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4d8:	4b20      	ldr	r3, [pc, #128]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4e4:	d107      	bne.n	800e4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4e6:	f107 030c 	add.w	r3, r7, #12
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f000 fa02 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4f4:	e08b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4fa:	e088      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e4fc:	4b17      	ldr	r3, [pc, #92]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0304 	and.w	r3, r3, #4
 800e504:	2b04      	cmp	r3, #4
 800e506:	d109      	bne.n	800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e508:	4b14      	ldr	r3, [pc, #80]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	08db      	lsrs	r3, r3, #3
 800e50e:	f003 0303 	and.w	r3, r3, #3
 800e512:	4a13      	ldr	r2, [pc, #76]	; (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e514:	fa22 f303 	lsr.w	r3, r2, r3
 800e518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e51a:	e078      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e520:	e075      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e522:	4b0e      	ldr	r3, [pc, #56]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e52e:	d102      	bne.n	800e536 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e530:	4b0c      	ldr	r3, [pc, #48]	; (800e564 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e534:	e06b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e53a:	e068      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e53c:	4b07      	ldr	r3, [pc, #28]	; (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e548:	d102      	bne.n	800e550 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e54a:	4b07      	ldr	r3, [pc, #28]	; (800e568 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e54e:	e05e      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e554:	e05b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e55a:	e058      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e55c:	58024400 	.word	0x58024400
 800e560:	03d09000 	.word	0x03d09000
 800e564:	003d0900 	.word	0x003d0900
 800e568:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e570:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e574:	430b      	orrs	r3, r1
 800e576:	d148      	bne.n	800e60a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e578:	4b27      	ldr	r3, [pc, #156]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e57c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e580:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e588:	d02a      	beq.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e590:	d838      	bhi.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e59e:	d00d      	beq.n	800e5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e5a0:	e030      	b.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e5a2:	4b1d      	ldr	r3, [pc, #116]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5ae:	d102      	bne.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e5b0:	4b1a      	ldr	r3, [pc, #104]	; (800e61c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5b4:	e02b      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ba:	e028      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e5bc:	4b16      	ldr	r3, [pc, #88]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5c8:	d107      	bne.n	800e5da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 fae4 	bl	800eb9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5d8:	e019      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5de:	e016      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5e0:	4b0d      	ldr	r3, [pc, #52]	; (800e618 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5ec:	d107      	bne.n	800e5fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5ee:	f107 0318 	add.w	r3, r7, #24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 f82a 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5fc:	e007      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e602:	e004      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e604:	2300      	movs	r3, #0
 800e606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e608:	e001      	b.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e610:	4618      	mov	r0, r3
 800e612:	3740      	adds	r7, #64	; 0x40
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	58024400 	.word	0x58024400
 800e61c:	017d7840 	.word	0x017d7840

0800e620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e624:	f7fe f816 	bl	800c654 <HAL_RCC_GetHCLKFreq>
 800e628:	4602      	mov	r2, r0
 800e62a:	4b06      	ldr	r3, [pc, #24]	; (800e644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e62c:	6a1b      	ldr	r3, [r3, #32]
 800e62e:	091b      	lsrs	r3, r3, #4
 800e630:	f003 0307 	and.w	r3, r3, #7
 800e634:	4904      	ldr	r1, [pc, #16]	; (800e648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e636:	5ccb      	ldrb	r3, [r1, r3]
 800e638:	f003 031f 	and.w	r3, r3, #31
 800e63c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e640:	4618      	mov	r0, r3
 800e642:	bd80      	pop	{r7, pc}
 800e644:	58024400 	.word	0x58024400
 800e648:	0801896c 	.word	0x0801896c

0800e64c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b089      	sub	sp, #36	; 0x24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e654:	4ba1      	ldr	r3, [pc, #644]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e658:	f003 0303 	and.w	r3, r3, #3
 800e65c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e65e:	4b9f      	ldr	r3, [pc, #636]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e662:	0b1b      	lsrs	r3, r3, #12
 800e664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e66a:	4b9c      	ldr	r3, [pc, #624]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66e:	091b      	lsrs	r3, r3, #4
 800e670:	f003 0301 	and.w	r3, r3, #1
 800e674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e676:	4b99      	ldr	r3, [pc, #612]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e67a:	08db      	lsrs	r3, r3, #3
 800e67c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e680:	693a      	ldr	r2, [r7, #16]
 800e682:	fb02 f303 	mul.w	r3, r2, r3
 800e686:	ee07 3a90 	vmov	s15, r3
 800e68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e68e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 8111 	beq.w	800e8bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	f000 8083 	beq.w	800e7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	f200 80a1 	bhi.w	800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d056      	beq.n	800e764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e6b6:	e099      	b.n	800e7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6b8:	4b88      	ldr	r3, [pc, #544]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f003 0320 	and.w	r3, r3, #32
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d02d      	beq.n	800e720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e6c4:	4b85      	ldr	r3, [pc, #532]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	08db      	lsrs	r3, r3, #3
 800e6ca:	f003 0303 	and.w	r3, r3, #3
 800e6ce:	4a84      	ldr	r2, [pc, #528]	; (800e8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	ee07 3a90 	vmov	s15, r3
 800e6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	ee07 3a90 	vmov	s15, r3
 800e6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ee:	4b7b      	ldr	r3, [pc, #492]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6f6:	ee07 3a90 	vmov	s15, r3
 800e6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e702:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e70e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e71a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e71e:	e087      	b.n	800e830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	ee07 3a90 	vmov	s15, r3
 800e726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e72a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e732:	4b6a      	ldr	r3, [pc, #424]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e73a:	ee07 3a90 	vmov	s15, r3
 800e73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e742:	ed97 6a03 	vldr	s12, [r7, #12]
 800e746:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e75e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e762:	e065      	b.n	800e830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	ee07 3a90 	vmov	s15, r3
 800e76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e776:	4b59      	ldr	r3, [pc, #356]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e77e:	ee07 3a90 	vmov	s15, r3
 800e782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e786:	ed97 6a03 	vldr	s12, [r7, #12]
 800e78a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7a6:	e043      	b.n	800e830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	ee07 3a90 	vmov	s15, r3
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7ba:	4b48      	ldr	r3, [pc, #288]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7c2:	ee07 3a90 	vmov	s15, r3
 800e7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7ea:	e021      	b.n	800e830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	ee07 3a90 	vmov	s15, r3
 800e7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7fe:	4b37      	ldr	r3, [pc, #220]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e806:	ee07 3a90 	vmov	s15, r3
 800e80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e812:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e82e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e830:	4b2a      	ldr	r3, [pc, #168]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e834:	0a5b      	lsrs	r3, r3, #9
 800e836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e83a:	ee07 3a90 	vmov	s15, r3
 800e83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e84a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e84e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e856:	ee17 2a90 	vmov	r2, s15
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e85e:	4b1f      	ldr	r3, [pc, #124]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e862:	0c1b      	lsrs	r3, r3, #16
 800e864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e868:	ee07 3a90 	vmov	s15, r3
 800e86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e874:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e878:	edd7 6a07 	vldr	s13, [r7, #28]
 800e87c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e884:	ee17 2a90 	vmov	r2, s15
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e88c:	4b13      	ldr	r3, [pc, #76]	; (800e8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e890:	0e1b      	lsrs	r3, r3, #24
 800e892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e896:	ee07 3a90 	vmov	s15, r3
 800e89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e89e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8b2:	ee17 2a90 	vmov	r2, s15
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e8ba:	e008      	b.n	800e8ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	609a      	str	r2, [r3, #8]
}
 800e8ce:	bf00      	nop
 800e8d0:	3724      	adds	r7, #36	; 0x24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	58024400 	.word	0x58024400
 800e8e0:	03d09000 	.word	0x03d09000
 800e8e4:	46000000 	.word	0x46000000
 800e8e8:	4c742400 	.word	0x4c742400
 800e8ec:	4a742400 	.word	0x4a742400
 800e8f0:	4bbebc20 	.word	0x4bbebc20

0800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b089      	sub	sp, #36	; 0x24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8fc:	4ba1      	ldr	r3, [pc, #644]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e900:	f003 0303 	and.w	r3, r3, #3
 800e904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e906:	4b9f      	ldr	r3, [pc, #636]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90a:	0d1b      	lsrs	r3, r3, #20
 800e90c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e912:	4b9c      	ldr	r3, [pc, #624]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e916:	0a1b      	lsrs	r3, r3, #8
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e91e:	4b99      	ldr	r3, [pc, #612]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e922:	08db      	lsrs	r3, r3, #3
 800e924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	fb02 f303 	mul.w	r3, r2, r3
 800e92e:	ee07 3a90 	vmov	s15, r3
 800e932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 8111 	beq.w	800eb64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	2b02      	cmp	r3, #2
 800e946:	f000 8083 	beq.w	800ea50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	f200 80a1 	bhi.w	800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d056      	beq.n	800ea0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e95e:	e099      	b.n	800ea94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e960:	4b88      	ldr	r3, [pc, #544]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d02d      	beq.n	800e9c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e96c:	4b85      	ldr	r3, [pc, #532]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	08db      	lsrs	r3, r3, #3
 800e972:	f003 0303 	and.w	r3, r3, #3
 800e976:	4a84      	ldr	r2, [pc, #528]	; (800eb88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e978:	fa22 f303 	lsr.w	r3, r2, r3
 800e97c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	ee07 3a90 	vmov	s15, r3
 800e984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	ee07 3a90 	vmov	s15, r3
 800e98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e996:	4b7b      	ldr	r3, [pc, #492]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99e:	ee07 3a90 	vmov	s15, r3
 800e9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800eb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e9c6:	e087      	b.n	800ead8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	ee07 3a90 	vmov	s15, r3
 800e9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800eb90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9da:	4b6a      	ldr	r3, [pc, #424]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9e2:	ee07 3a90 	vmov	s15, r3
 800e9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800eb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea0a:	e065      	b.n	800ead8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	ee07 3a90 	vmov	s15, r3
 800ea12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800eb94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ea1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea1e:	4b59      	ldr	r3, [pc, #356]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea26:	ee07 3a90 	vmov	s15, r3
 800ea2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800eb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ea36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea4e:	e043      	b.n	800ead8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	ee07 3a90 	vmov	s15, r3
 800ea56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800eb98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ea5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea62:	4b48      	ldr	r3, [pc, #288]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea6a:	ee07 3a90 	vmov	s15, r3
 800ea6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800eb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ea7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea92:	e021      	b.n	800ead8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	ee07 3a90 	vmov	s15, r3
 800ea9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eb94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800eaa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eaa6:	4b37      	ldr	r3, [pc, #220]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaae:	ee07 3a90 	vmov	s15, r3
 800eab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800eaba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800eb8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ead2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ead6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ead8:	4b2a      	ldr	r3, [pc, #168]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eadc:	0a5b      	lsrs	r3, r3, #9
 800eade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae2:	ee07 3a90 	vmov	s15, r3
 800eae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eaf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eafe:	ee17 2a90 	vmov	r2, s15
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800eb06:	4b1f      	ldr	r3, [pc, #124]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0a:	0c1b      	lsrs	r3, r3, #16
 800eb0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb10:	ee07 3a90 	vmov	s15, r3
 800eb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb20:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb2c:	ee17 2a90 	vmov	r2, s15
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800eb34:	4b13      	ldr	r3, [pc, #76]	; (800eb84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb38:	0e1b      	lsrs	r3, r3, #24
 800eb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb3e:	ee07 3a90 	vmov	s15, r3
 800eb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb5a:	ee17 2a90 	vmov	r2, s15
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800eb62:	e008      	b.n	800eb76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	609a      	str	r2, [r3, #8]
}
 800eb76:	bf00      	nop
 800eb78:	3724      	adds	r7, #36	; 0x24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	58024400 	.word	0x58024400
 800eb88:	03d09000 	.word	0x03d09000
 800eb8c:	46000000 	.word	0x46000000
 800eb90:	4c742400 	.word	0x4c742400
 800eb94:	4a742400 	.word	0x4a742400
 800eb98:	4bbebc20 	.word	0x4bbebc20

0800eb9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b089      	sub	sp, #36	; 0x24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eba4:	4ba0      	ldr	r3, [pc, #640]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba8:	f003 0303 	and.w	r3, r3, #3
 800ebac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ebae:	4b9e      	ldr	r3, [pc, #632]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	091b      	lsrs	r3, r3, #4
 800ebb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebb8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ebba:	4b9b      	ldr	r3, [pc, #620]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ebc4:	4b98      	ldr	r3, [pc, #608]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc8:	08db      	lsrs	r3, r3, #3
 800ebca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebce:	693a      	ldr	r2, [r7, #16]
 800ebd0:	fb02 f303 	mul.w	r3, r2, r3
 800ebd4:	ee07 3a90 	vmov	s15, r3
 800ebd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebdc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f000 8111 	beq.w	800ee0a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	f000 8083 	beq.w	800ecf6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	f200 80a1 	bhi.w	800ed3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d056      	beq.n	800ecb2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ec04:	e099      	b.n	800ed3a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec06:	4b88      	ldr	r3, [pc, #544]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d02d      	beq.n	800ec6e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec12:	4b85      	ldr	r3, [pc, #532]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	08db      	lsrs	r3, r3, #3
 800ec18:	f003 0303 	and.w	r3, r3, #3
 800ec1c:	4a83      	ldr	r2, [pc, #524]	; (800ee2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ec1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec22:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	ee07 3a90 	vmov	s15, r3
 800ec2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	ee07 3a90 	vmov	s15, r3
 800ec34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec3c:	4b7a      	ldr	r3, [pc, #488]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec44:	ee07 3a90 	vmov	s15, r3
 800ec48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec50:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ee30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ec54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec6c:	e087      	b.n	800ed7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	ee07 3a90 	vmov	s15, r3
 800ec74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec78:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ec7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec80:	4b69      	ldr	r3, [pc, #420]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec88:	ee07 3a90 	vmov	s15, r3
 800ec8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec94:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ee30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ec98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecb0:	e065      	b.n	800ed7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	ee07 3a90 	vmov	s15, r3
 800ecb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecbc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ee38 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ecc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecc4:	4b58      	ldr	r3, [pc, #352]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eccc:	ee07 3a90 	vmov	s15, r3
 800ecd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecd8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ee30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ecdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ece0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ece4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ece8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecf4:	e043      	b.n	800ed7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	ee07 3a90 	vmov	s15, r3
 800ecfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed00:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ee3c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ed04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed08:	4b47      	ldr	r3, [pc, #284]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed10:	ee07 3a90 	vmov	s15, r3
 800ed14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed18:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed1c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ee30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ed20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed38:	e021      	b.n	800ed7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	ee07 3a90 	vmov	s15, r3
 800ed40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed44:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ee34 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ed48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed4c:	4b36      	ldr	r3, [pc, #216]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed54:	ee07 3a90 	vmov	s15, r3
 800ed58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed60:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ee30 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ed64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed7c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ed7e:	4b2a      	ldr	r3, [pc, #168]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	0a5b      	lsrs	r3, r3, #9
 800ed84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed88:	ee07 3a90 	vmov	s15, r3
 800ed8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed98:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eda4:	ee17 2a90 	vmov	r2, s15
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800edac:	4b1e      	ldr	r3, [pc, #120]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800edae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb6:	ee07 3a90 	vmov	s15, r3
 800edba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edd2:	ee17 2a90 	vmov	r2, s15
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800edda:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edde:	0e1b      	lsrs	r3, r3, #24
 800ede0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ede4:	ee07 3a90 	vmov	s15, r3
 800ede8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800edf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee00:	ee17 2a90 	vmov	r2, s15
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ee08:	e008      	b.n	800ee1c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	609a      	str	r2, [r3, #8]
}
 800ee1c:	bf00      	nop
 800ee1e:	3724      	adds	r7, #36	; 0x24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr
 800ee28:	58024400 	.word	0x58024400
 800ee2c:	03d09000 	.word	0x03d09000
 800ee30:	46000000 	.word	0x46000000
 800ee34:	4c742400 	.word	0x4c742400
 800ee38:	4a742400 	.word	0x4a742400
 800ee3c:	4bbebc20 	.word	0x4bbebc20

0800ee40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ee4e:	4b53      	ldr	r3, [pc, #332]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ee50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee52:	f003 0303 	and.w	r3, r3, #3
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d101      	bne.n	800ee5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e099      	b.n	800ef92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ee5e:	4b4f      	ldr	r3, [pc, #316]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a4e      	ldr	r2, [pc, #312]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ee64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee6a:	f7f6 f8c7 	bl	8004ffc <HAL_GetTick>
 800ee6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ee70:	e008      	b.n	800ee84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ee72:	f7f6 f8c3 	bl	8004ffc <HAL_GetTick>
 800ee76:	4602      	mov	r2, r0
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	1ad3      	subs	r3, r2, r3
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d901      	bls.n	800ee84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ee80:	2303      	movs	r3, #3
 800ee82:	e086      	b.n	800ef92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ee84:	4b45      	ldr	r3, [pc, #276]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f0      	bne.n	800ee72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ee90:	4b42      	ldr	r3, [pc, #264]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ee92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	031b      	lsls	r3, r3, #12
 800ee9e:	493f      	ldr	r1, [pc, #252]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eea0:	4313      	orrs	r3, r2
 800eea2:	628b      	str	r3, [r1, #40]	; 0x28
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	025b      	lsls	r3, r3, #9
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	431a      	orrs	r2, r3
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	041b      	lsls	r3, r3, #16
 800eec2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eec6:	431a      	orrs	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	3b01      	subs	r3, #1
 800eece:	061b      	lsls	r3, r3, #24
 800eed0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eed4:	4931      	ldr	r1, [pc, #196]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eed6:	4313      	orrs	r3, r2
 800eed8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800eeda:	4b30      	ldr	r3, [pc, #192]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	695b      	ldr	r3, [r3, #20]
 800eee6:	492d      	ldr	r1, [pc, #180]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eee8:	4313      	orrs	r3, r2
 800eeea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800eeec:	4b2b      	ldr	r3, [pc, #172]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	f023 0220 	bic.w	r2, r3, #32
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	4928      	ldr	r1, [pc, #160]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800eefa:	4313      	orrs	r3, r2
 800eefc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800eefe:	4b27      	ldr	r3, [pc, #156]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	4a26      	ldr	r2, [pc, #152]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef04:	f023 0310 	bic.w	r3, r3, #16
 800ef08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ef0a:	4b24      	ldr	r3, [pc, #144]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef0e:	4b24      	ldr	r3, [pc, #144]	; (800efa0 <RCCEx_PLL2_Config+0x160>)
 800ef10:	4013      	ands	r3, r2
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	69d2      	ldr	r2, [r2, #28]
 800ef16:	00d2      	lsls	r2, r2, #3
 800ef18:	4920      	ldr	r1, [pc, #128]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ef1e:	4b1f      	ldr	r3, [pc, #124]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef22:	4a1e      	ldr	r2, [pc, #120]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef24:	f043 0310 	orr.w	r3, r3, #16
 800ef28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d106      	bne.n	800ef3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ef30:	4b1a      	ldr	r3, [pc, #104]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef34:	4a19      	ldr	r2, [pc, #100]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ef3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef3c:	e00f      	b.n	800ef5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d106      	bne.n	800ef52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ef44:	4b15      	ldr	r3, [pc, #84]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef48:	4a14      	ldr	r2, [pc, #80]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef50:	e005      	b.n	800ef5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ef52:	4b12      	ldr	r3, [pc, #72]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef56:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ef5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ef5e:	4b0f      	ldr	r3, [pc, #60]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a0e      	ldr	r2, [pc, #56]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ef68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef6a:	f7f6 f847 	bl	8004ffc <HAL_GetTick>
 800ef6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ef70:	e008      	b.n	800ef84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ef72:	f7f6 f843 	bl	8004ffc <HAL_GetTick>
 800ef76:	4602      	mov	r2, r0
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d901      	bls.n	800ef84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ef80:	2303      	movs	r3, #3
 800ef82:	e006      	b.n	800ef92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <RCCEx_PLL2_Config+0x15c>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d0f0      	beq.n	800ef72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	58024400 	.word	0x58024400
 800efa0:	ffff0007 	.word	0xffff0007

0800efa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800efb2:	4b53      	ldr	r3, [pc, #332]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800efb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb6:	f003 0303 	and.w	r3, r3, #3
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d101      	bne.n	800efc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e099      	b.n	800f0f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800efc2:	4b4f      	ldr	r3, [pc, #316]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a4e      	ldr	r2, [pc, #312]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800efc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800efce:	f7f6 f815 	bl	8004ffc <HAL_GetTick>
 800efd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800efd4:	e008      	b.n	800efe8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800efd6:	f7f6 f811 	bl	8004ffc <HAL_GetTick>
 800efda:	4602      	mov	r2, r0
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d901      	bls.n	800efe8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800efe4:	2303      	movs	r3, #3
 800efe6:	e086      	b.n	800f0f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800efe8:	4b45      	ldr	r3, [pc, #276]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1f0      	bne.n	800efd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800eff4:	4b42      	ldr	r3, [pc, #264]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800eff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	051b      	lsls	r3, r3, #20
 800f002:	493f      	ldr	r1, [pc, #252]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f004:	4313      	orrs	r3, r2
 800f006:	628b      	str	r3, [r1, #40]	; 0x28
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	3b01      	subs	r3, #1
 800f00e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	3b01      	subs	r3, #1
 800f018:	025b      	lsls	r3, r3, #9
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	431a      	orrs	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	3b01      	subs	r3, #1
 800f024:	041b      	lsls	r3, r3, #16
 800f026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f02a:	431a      	orrs	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	3b01      	subs	r3, #1
 800f032:	061b      	lsls	r3, r3, #24
 800f034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f038:	4931      	ldr	r1, [pc, #196]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f03a:	4313      	orrs	r3, r2
 800f03c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f03e:	4b30      	ldr	r3, [pc, #192]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	695b      	ldr	r3, [r3, #20]
 800f04a:	492d      	ldr	r1, [pc, #180]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f04c:	4313      	orrs	r3, r2
 800f04e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f050:	4b2b      	ldr	r3, [pc, #172]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f054:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	4928      	ldr	r1, [pc, #160]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f05e:	4313      	orrs	r3, r2
 800f060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f062:	4b27      	ldr	r3, [pc, #156]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f066:	4a26      	ldr	r2, [pc, #152]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f06e:	4b24      	ldr	r3, [pc, #144]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f072:	4b24      	ldr	r3, [pc, #144]	; (800f104 <RCCEx_PLL3_Config+0x160>)
 800f074:	4013      	ands	r3, r2
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	69d2      	ldr	r2, [r2, #28]
 800f07a:	00d2      	lsls	r2, r2, #3
 800f07c:	4920      	ldr	r1, [pc, #128]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f07e:	4313      	orrs	r3, r2
 800f080:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f082:	4b1f      	ldr	r3, [pc, #124]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f086:	4a1e      	ldr	r2, [pc, #120]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d106      	bne.n	800f0a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f094:	4b1a      	ldr	r3, [pc, #104]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f098:	4a19      	ldr	r2, [pc, #100]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f09a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f09e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f0a0:	e00f      	b.n	800f0c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d106      	bne.n	800f0b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f0a8:	4b15      	ldr	r3, [pc, #84]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ac:	4a14      	ldr	r2, [pc, #80]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f0b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f0b4:	e005      	b.n	800f0c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f0b6:	4b12      	ldr	r3, [pc, #72]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ba:	4a11      	ldr	r2, [pc, #68]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f0c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f0c2:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a0e      	ldr	r2, [pc, #56]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0ce:	f7f5 ff95 	bl	8004ffc <HAL_GetTick>
 800f0d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f0d4:	e008      	b.n	800f0e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f0d6:	f7f5 ff91 	bl	8004ffc <HAL_GetTick>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d901      	bls.n	800f0e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e006      	b.n	800f0f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f0e8:	4b05      	ldr	r3, [pc, #20]	; (800f100 <RCCEx_PLL3_Config+0x15c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d0f0      	beq.n	800f0d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	58024400 	.word	0x58024400
 800f104:	ffff0007 	.word	0xffff0007

0800f108 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f116:	2301      	movs	r3, #1
 800f118:	e054      	b.n	800f1c4 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7a5b      	ldrb	r3, [r3, #9]
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d105      	bne.n	800f130 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f3 ff6a 	bl	8003004 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2202      	movs	r2, #2
 800f134:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f023 0120 	bic.w	r1, r3, #32
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	430a      	orrs	r2, r1
 800f14a:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f042 0204 	orr.w	r2, r2, #4
 800f15a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f166:	2b40      	cmp	r3, #64	; 0x40
 800f168:	d104      	bne.n	800f174 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2204      	movs	r2, #4
 800f16e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	e027      	b.n	800f1c4 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f174:	f7f5 ff42 	bl	8004ffc <HAL_GetTick>
 800f178:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f17a:	e015      	b.n	800f1a8 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f17c:	f7f5 ff3e 	bl	8004ffc <HAL_GetTick>
 800f180:	4602      	mov	r2, r0
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	2b02      	cmp	r3, #2
 800f188:	d90e      	bls.n	800f1a8 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f003 0304 	and.w	r3, r3, #4
 800f194:	2b04      	cmp	r3, #4
 800f196:	d107      	bne.n	800f1a8 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2204      	movs	r2, #4
 800f19c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2202      	movs	r2, #2
 800f1a2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e00d      	b.n	800f1c4 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	f003 0304 	and.w	r3, r3, #4
 800f1b2:	2b04      	cmp	r3, #4
 800f1b4:	d0e2      	beq.n	800f17c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	7a1b      	ldrb	r3, [r3, #8]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d101      	bne.n	800f1e6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e044      	b.n	800f270 <HAL_RNG_GenerateRandomNumber+0xa4>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7a5b      	ldrb	r3, [r3, #9]
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d133      	bne.n	800f25e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2202      	movs	r2, #2
 800f1fa:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800f1fc:	f7f5 fefe 	bl	8004ffc <HAL_GetTick>
 800f200:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f202:	e018      	b.n	800f236 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f204:	f7f5 fefa 	bl	8004ffc <HAL_GetTick>
 800f208:	4602      	mov	r2, r0
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d911      	bls.n	800f236 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	f003 0301 	and.w	r3, r3, #1
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d00a      	beq.n	800f236 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2201      	movs	r2, #1
 800f224:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2202      	movs	r2, #2
 800f22a:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e01c      	b.n	800f270 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b01      	cmp	r3, #1
 800f242:	d1df      	bne.n	800f204 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691a      	ldr	r2, [r3, #16]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	725a      	strb	r2, [r3, #9]
 800f25c:	e004      	b.n	800f268 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2204      	movs	r2, #4
 800f262:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	721a      	strb	r2, [r3, #8]

  return status;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b086      	sub	sp, #24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d904      	bls.n	800f296 <HAL_SAI_InitProtocol+0x1e>
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	3b03      	subs	r3, #3
 800f290:	2b01      	cmp	r3, #1
 800f292:	d812      	bhi.n	800f2ba <HAL_SAI_InitProtocol+0x42>
 800f294:	e008      	b.n	800f2a8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	68b9      	ldr	r1, [r7, #8]
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 fc11 	bl	800fac4 <SAI_InitI2S>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	75fb      	strb	r3, [r7, #23]
      break;
 800f2a6:	e00b      	b.n	800f2c0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	68b9      	ldr	r1, [r7, #8]
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f000 fcba 	bl	800fc28 <SAI_InitPCM>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f2b8:	e002      	b.n	800f2c0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800f2be:	bf00      	nop
  }

  if (status == HAL_OK)
 800f2c0:	7dfb      	ldrb	r3, [r7, #23]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d104      	bne.n	800f2d0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 f808 	bl	800f2dc <HAL_SAI_Init>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08a      	sub	sp, #40	; 0x28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d101      	bne.n	800f2ee <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e28e      	b.n	800f80c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f2ee:	f7f5 feb5 	bl	800505c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d113      	bne.n	800f324 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a96      	ldr	r2, [pc, #600]	; (800f55c <HAL_SAI_Init+0x280>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d004      	beq.n	800f310 <HAL_SAI_Init+0x34>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4a95      	ldr	r2, [pc, #596]	; (800f560 <HAL_SAI_Init+0x284>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d107      	bne.n	800f320 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800f314:	2b01      	cmp	r3, #1
 800f316:	d103      	bne.n	800f320 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d001      	beq.n	800f324 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e273      	b.n	800f80c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a8c      	ldr	r2, [pc, #560]	; (800f55c <HAL_SAI_Init+0x280>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d004      	beq.n	800f338 <HAL_SAI_Init+0x5c>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4a8c      	ldr	r2, [pc, #560]	; (800f564 <HAL_SAI_Init+0x288>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d102      	bne.n	800f33e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800f338:	4b8b      	ldr	r3, [pc, #556]	; (800f568 <HAL_SAI_Init+0x28c>)
 800f33a:	61bb      	str	r3, [r7, #24]
 800f33c:	e028      	b.n	800f390 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a8a      	ldr	r2, [pc, #552]	; (800f56c <HAL_SAI_Init+0x290>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d004      	beq.n	800f352 <HAL_SAI_Init+0x76>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a88      	ldr	r2, [pc, #544]	; (800f570 <HAL_SAI_Init+0x294>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d102      	bne.n	800f358 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800f352:	4b88      	ldr	r3, [pc, #544]	; (800f574 <HAL_SAI_Init+0x298>)
 800f354:	61bb      	str	r3, [r7, #24]
 800f356:	e01b      	b.n	800f390 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a86      	ldr	r2, [pc, #536]	; (800f578 <HAL_SAI_Init+0x29c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d004      	beq.n	800f36c <HAL_SAI_Init+0x90>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a85      	ldr	r2, [pc, #532]	; (800f57c <HAL_SAI_Init+0x2a0>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d102      	bne.n	800f372 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800f36c:	4b84      	ldr	r3, [pc, #528]	; (800f580 <HAL_SAI_Init+0x2a4>)
 800f36e:	61bb      	str	r3, [r7, #24]
 800f370:	e00e      	b.n	800f390 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4a7a      	ldr	r2, [pc, #488]	; (800f560 <HAL_SAI_Init+0x284>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d004      	beq.n	800f386 <HAL_SAI_Init+0xaa>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a80      	ldr	r2, [pc, #512]	; (800f584 <HAL_SAI_Init+0x2a8>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d102      	bne.n	800f38c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800f386:	4b80      	ldr	r3, [pc, #512]	; (800f588 <HAL_SAI_Init+0x2ac>)
 800f388:	61bb      	str	r3, [r7, #24]
 800f38a:	e001      	b.n	800f390 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e23d      	b.n	800f80c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d106      	bne.n	800f3aa <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7f3 fec7 	bl	8003138 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 fcf6 	bl	800fd9c <SAI_Disable>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e228      	b.n	800f80c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2202      	movs	r2, #2
 800f3be:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	d00c      	beq.n	800f3e4 <HAL_SAI_Init+0x108>
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d80d      	bhi.n	800f3ea <HAL_SAI_Init+0x10e>
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <HAL_SAI_Init+0xfc>
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d003      	beq.n	800f3de <HAL_SAI_Init+0x102>
 800f3d6:	e008      	b.n	800f3ea <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f3dc:	e008      	b.n	800f3f0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f3de:	2310      	movs	r3, #16
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f3e2:	e005      	b.n	800f3f0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f3e4:	2320      	movs	r3, #32
 800f3e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f3e8:	e002      	b.n	800f3f0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f3ee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	2b05      	cmp	r3, #5
 800f3f6:	d832      	bhi.n	800f45e <HAL_SAI_Init+0x182>
 800f3f8:	a201      	add	r2, pc, #4	; (adr r2, 800f400 <HAL_SAI_Init+0x124>)
 800f3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3fe:	bf00      	nop
 800f400:	0800f419 	.word	0x0800f419
 800f404:	0800f41f 	.word	0x0800f41f
 800f408:	0800f427 	.word	0x0800f427
 800f40c:	0800f42f 	.word	0x0800f42f
 800f410:	0800f43f 	.word	0x0800f43f
 800f414:	0800f44f 	.word	0x0800f44f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	61fb      	str	r3, [r7, #28]
      break;
 800f41c:	e022      	b.n	800f464 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f422:	61fb      	str	r3, [r7, #28]
      break;
 800f424:	e01e      	b.n	800f464 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f42a:	61fb      	str	r3, [r7, #28]
      break;
 800f42c:	e01a      	b.n	800f464 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f42e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f432:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	f043 0301 	orr.w	r3, r3, #1
 800f43a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f43c:	e012      	b.n	800f464 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f43e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f442:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	f043 0302 	orr.w	r3, r3, #2
 800f44a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f44c:	e00a      	b.n	800f464 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f44e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f452:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	f043 0303 	orr.w	r3, r3, #3
 800f45a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f45c:	e002      	b.n	800f464 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	61fb      	str	r3, [r7, #28]
      break;
 800f462:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f468:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f000 80c5 	beq.w	800f5fe <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a37      	ldr	r2, [pc, #220]	; (800f55c <HAL_SAI_Init+0x280>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d004      	beq.n	800f48c <HAL_SAI_Init+0x1b0>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a37      	ldr	r2, [pc, #220]	; (800f564 <HAL_SAI_Init+0x288>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d106      	bne.n	800f49a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f48c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f490:	f04f 0100 	mov.w	r1, #0
 800f494:	f7fe fb44 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 800f498:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4a33      	ldr	r2, [pc, #204]	; (800f56c <HAL_SAI_Init+0x290>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d004      	beq.n	800f4ae <HAL_SAI_Init+0x1d2>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4a31      	ldr	r2, [pc, #196]	; (800f570 <HAL_SAI_Init+0x294>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d106      	bne.n	800f4bc <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800f4ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f4b2:	f04f 0100 	mov.w	r1, #0
 800f4b6:	f7fe fb33 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 800f4ba:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a2d      	ldr	r2, [pc, #180]	; (800f578 <HAL_SAI_Init+0x29c>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d004      	beq.n	800f4d0 <HAL_SAI_Init+0x1f4>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a2c      	ldr	r2, [pc, #176]	; (800f57c <HAL_SAI_Init+0x2a0>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d106      	bne.n	800f4de <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f4d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f4d4:	f04f 0100 	mov.w	r1, #0
 800f4d8:	f7fe fb22 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 800f4dc:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a1f      	ldr	r2, [pc, #124]	; (800f560 <HAL_SAI_Init+0x284>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d106      	bne.n	800f4f6 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f4e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f4ec:	f04f 0100 	mov.w	r1, #0
 800f4f0:	f7fe fb16 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 800f4f4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a22      	ldr	r2, [pc, #136]	; (800f584 <HAL_SAI_Init+0x2a8>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d106      	bne.n	800f50e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f500:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f504:	f04f 0100 	mov.w	r1, #0
 800f508:	f7fe fb0a 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 800f50c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	699b      	ldr	r3, [r3, #24]
 800f512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f516:	d139      	bne.n	800f58c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f51c:	2b04      	cmp	r3, #4
 800f51e:	d102      	bne.n	800f526 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f520:	2340      	movs	r3, #64	; 0x40
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e00a      	b.n	800f53c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f52a:	2b08      	cmp	r3, #8
 800f52c:	d103      	bne.n	800f536 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f52e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e002      	b.n	800f53c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f53a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	4613      	mov	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	4619      	mov	r1, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6a1b      	ldr	r3, [r3, #32]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	fb02 f303 	mul.w	r3, r2, r3
 800f552:	fbb1 f3f3 	udiv	r3, r1, r3
 800f556:	613b      	str	r3, [r7, #16]
 800f558:	e030      	b.n	800f5bc <HAL_SAI_Init+0x2e0>
 800f55a:	bf00      	nop
 800f55c:	40015804 	.word	0x40015804
 800f560:	58005404 	.word	0x58005404
 800f564:	40015824 	.word	0x40015824
 800f568:	40015800 	.word	0x40015800
 800f56c:	40015c04 	.word	0x40015c04
 800f570:	40015c24 	.word	0x40015c24
 800f574:	40015c00 	.word	0x40015c00
 800f578:	40016004 	.word	0x40016004
 800f57c:	40016024 	.word	0x40016024
 800f580:	40016000 	.word	0x40016000
 800f584:	58005424 	.word	0x58005424
 800f588:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f594:	d101      	bne.n	800f59a <HAL_SAI_Init+0x2be>
 800f596:	2302      	movs	r3, #2
 800f598:	e000      	b.n	800f59c <HAL_SAI_Init+0x2c0>
 800f59a:	2301      	movs	r3, #1
 800f59c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	4413      	add	r3, r2
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	68ba      	ldr	r2, [r7, #8]
 800f5b0:	fb02 f303 	mul.w	r3, r2, r3
 800f5b4:	021b      	lsls	r3, r3, #8
 800f5b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800f5ba:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	4a95      	ldr	r2, [pc, #596]	; (800f814 <HAL_SAI_Init+0x538>)
 800f5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c4:	08da      	lsrs	r2, r3, #3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f5ca:	6939      	ldr	r1, [r7, #16]
 800f5cc:	4b91      	ldr	r3, [pc, #580]	; (800f814 <HAL_SAI_Init+0x538>)
 800f5ce:	fba3 2301 	umull	r2, r3, r3, r1
 800f5d2:	08da      	lsrs	r2, r3, #3
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	1aca      	subs	r2, r1, r3
 800f5de:	2a08      	cmp	r2, #8
 800f5e0:	d904      	bls.n	800f5ec <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f0:	2b04      	cmp	r3, #4
 800f5f2:	d104      	bne.n	800f5fe <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f8:	085a      	lsrs	r2, r3, #1
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d003      	beq.n	800f60e <HAL_SAI_Init+0x332>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d109      	bne.n	800f622 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f612:	2b01      	cmp	r3, #1
 800f614:	d101      	bne.n	800f61a <HAL_SAI_Init+0x33e>
 800f616:	2300      	movs	r3, #0
 800f618:	e001      	b.n	800f61e <HAL_SAI_Init+0x342>
 800f61a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f61e:	623b      	str	r3, [r7, #32]
 800f620:	e008      	b.n	800f634 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f626:	2b01      	cmp	r3, #1
 800f628:	d102      	bne.n	800f630 <HAL_SAI_Init+0x354>
 800f62a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f62e:	e000      	b.n	800f632 <HAL_SAI_Init+0x356>
 800f630:	2300      	movs	r3, #0
 800f632:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f634:	f7f5 fd12 	bl	800505c <HAL_GetREVID>
 800f638:	4603      	mov	r3, r0
 800f63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f63e:	d331      	bcc.n	800f6a4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6819      	ldr	r1, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	4b73      	ldr	r3, [pc, #460]	; (800f818 <HAL_SAI_Init+0x53c>)
 800f64c:	400b      	ands	r3, r1
 800f64e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6819      	ldr	r1, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	685a      	ldr	r2, [r3, #4]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f65e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f664:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f66a:	431a      	orrs	r2, r3
 800f66c:	6a3b      	ldr	r3, [r7, #32]
 800f66e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f678:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	695b      	ldr	r3, [r3, #20]
 800f67e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f684:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68a:	051b      	lsls	r3, r3, #20
 800f68c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f692:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	691b      	ldr	r3, [r3, #16]
 800f698:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	430a      	orrs	r2, r1
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	e02d      	b.n	800f700 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6819      	ldr	r1, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	4b5b      	ldr	r3, [pc, #364]	; (800f81c <HAL_SAI_Init+0x540>)
 800f6b0:	400b      	ands	r3, r1
 800f6b2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6819      	ldr	r1, [r3, #0]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6c2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f6c8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6ce:	431a      	orrs	r2, r3
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f6dc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f6e8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ee:	051b      	lsls	r3, r3, #20
 800f6f0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f6f6:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	430a      	orrs	r2, r1
 800f6fe:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6859      	ldr	r1, [r3, #4]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	4b45      	ldr	r3, [pc, #276]	; (800f820 <HAL_SAI_Init+0x544>)
 800f70c:	400b      	ands	r3, r1
 800f70e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6859      	ldr	r1, [r3, #4]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	69da      	ldr	r2, [r3, #28]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f71e:	431a      	orrs	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f724:	431a      	orrs	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	430a      	orrs	r2, r1
 800f72c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6899      	ldr	r1, [r3, #8]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	4b3a      	ldr	r3, [pc, #232]	; (800f824 <HAL_SAI_Init+0x548>)
 800f73a:	400b      	ands	r3, r1
 800f73c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	6899      	ldr	r1, [r3, #8]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f748:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f74e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f754:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f75a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f760:	3b01      	subs	r3, #1
 800f762:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f764:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	430a      	orrs	r2, r1
 800f76c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68d9      	ldr	r1, [r3, #12]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f77c:	400b      	ands	r3, r1
 800f77e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	68d9      	ldr	r1, [r3, #12]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f78e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f794:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f796:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f79c:	3b01      	subs	r3, #1
 800f79e:	021b      	lsls	r3, r3, #8
 800f7a0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	4a1e      	ldr	r2, [pc, #120]	; (800f828 <HAL_SAI_Init+0x54c>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d004      	beq.n	800f7be <HAL_SAI_Init+0x4e2>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a1c      	ldr	r2, [pc, #112]	; (800f82c <HAL_SAI_Init+0x550>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d119      	bne.n	800f7f2 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7c2:	f023 0201 	bic.w	r2, r3, #1
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d10e      	bne.n	800f7f2 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f7e0:	431a      	orrs	r2, r3
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ea:	f043 0201 	orr.w	r2, r3, #1
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3728      	adds	r7, #40	; 0x28
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	cccccccd 	.word	0xcccccccd
 800f818:	f005c010 	.word	0xf005c010
 800f81c:	f805c010 	.word	0xf805c010
 800f820:	ffff1ff0 	.word	0xffff1ff0
 800f824:	fff88000 	.word	0xfff88000
 800f828:	40015804 	.word	0x40015804
 800f82c:	58005404 	.word	0x58005404

0800f830 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	4613      	mov	r3, r2
 800f83c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f83e:	f7f5 fbdd 	bl	8004ffc <HAL_GetTick>
 800f842:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <HAL_SAI_Transmit_DMA+0x20>
 800f84a:	88fb      	ldrh	r3, [r7, #6]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	e098      	b.n	800f986 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	f040 8091 	bne.w	800f984 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d101      	bne.n	800f870 <HAL_SAI_Transmit_DMA+0x40>
 800f86c:	2302      	movs	r3, #2
 800f86e:	e08a      	b.n	800f986 <HAL_SAI_Transmit_DMA+0x156>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2201      	movs	r2, #1
 800f874:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	88fa      	ldrh	r2, [r7, #6]
 800f882:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	88fa      	ldrh	r2, [r7, #6]
 800f88a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2200      	movs	r2, #0
 800f892:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2212      	movs	r2, #18
 800f89a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8a4:	4a3a      	ldr	r2, [pc, #232]	; (800f990 <HAL_SAI_Transmit_DMA+0x160>)
 800f8a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8ae:	4a39      	ldr	r2, [pc, #228]	; (800f994 <HAL_SAI_Transmit_DMA+0x164>)
 800f8b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8b8:	4a37      	ldr	r2, [pc, #220]	; (800f998 <HAL_SAI_Transmit_DMA+0x168>)
 800f8ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	331c      	adds	r3, #28
 800f8d8:	461a      	mov	r2, r3
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f8e0:	f7f7 fe3a 	bl	8007558 <HAL_DMA_Start_IT>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d005      	beq.n	800f8f6 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e047      	b.n	800f986 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f000 fa17 	bl	800fd2c <SAI_InterruptFlag>
 800f8fe:	4601      	mov	r1, r0
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	691a      	ldr	r2, [r3, #16]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	430a      	orrs	r2, r1
 800f90c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f91c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f91e:	e015      	b.n	800f94c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f920:	f7f5 fb6c 	bl	8004ffc <HAL_GetTick>
 800f924:	4602      	mov	r2, r0
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	1ad3      	subs	r3, r2, r3
 800f92a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f92e:	d90d      	bls.n	800f94c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f936:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2200      	movs	r2, #0
 800f944:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800f948:	2303      	movs	r3, #3
 800f94a:	e01c      	b.n	800f986 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f956:	2b00      	cmp	r3, #0
 800f958:	d0e2      	beq.n	800f920 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d107      	bne.n	800f978 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f976:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2200      	movs	r2, #0
 800f97c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	e000      	b.n	800f986 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800f984:	2302      	movs	r3, #2
  }
}
 800f986:	4618      	mov	r0, r3
 800f988:	3718      	adds	r7, #24
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	0800fe71 	.word	0x0800fe71
 800f994:	0800fe11 	.word	0x0800fe11
 800f998:	0800ff09 	.word	0x0800ff09

0800f99c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	60b9      	str	r1, [r7, #8]
 800f9a6:	4613      	mov	r3, r2
 800f9a8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <HAL_SAI_Receive_DMA+0x1a>
 800f9b0:	88fb      	ldrh	r3, [r7, #6]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	e079      	b.n	800faae <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d172      	bne.n	800faac <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d101      	bne.n	800f9d4 <HAL_SAI_Receive_DMA+0x38>
 800f9d0:	2302      	movs	r3, #2
 800f9d2:	e06c      	b.n	800faae <HAL_SAI_Receive_DMA+0x112>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	88fa      	ldrh	r2, [r7, #6]
 800f9e6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2222      	movs	r2, #34	; 0x22
 800f9fe:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa08:	4a2b      	ldr	r2, [pc, #172]	; (800fab8 <HAL_SAI_Receive_DMA+0x11c>)
 800fa0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa12:	4a2a      	ldr	r2, [pc, #168]	; (800fabc <HAL_SAI_Receive_DMA+0x120>)
 800fa14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa1c:	4a28      	ldr	r2, [pc, #160]	; (800fac0 <HAL_SAI_Receive_DMA+0x124>)
 800fa1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa26:	2200      	movs	r2, #0
 800fa28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	331c      	adds	r3, #28
 800fa36:	4619      	mov	r1, r3
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fa44:	f7f7 fd88 	bl	8007558 <HAL_DMA_Start_IT>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d005      	beq.n	800fa5a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e029      	b.n	800faae <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f000 f965 	bl	800fd2c <SAI_InterruptFlag>
 800fa62:	4601      	mov	r1, r0
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	691a      	ldr	r2, [r3, #16]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	430a      	orrs	r2, r1
 800fa70:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa80:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d107      	bne.n	800faa0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fa9e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	e000      	b.n	800faae <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800faac:	2302      	movs	r3, #2
  }
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	0800feed 	.word	0x0800feed
 800fabc:	0800fe8d 	.word	0x0800fe8d
 800fac0:	0800ff09 	.word	0x0800ff09

0800fac4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fad2:	2300      	movs	r3, #0
 800fad4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <SAI_InitI2S+0x2e>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d103      	bne.n	800fafa <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2200      	movs	r2, #0
 800faf6:	651a      	str	r2, [r3, #80]	; 0x50
 800faf8:	e002      	b.n	800fb00 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	2201      	movs	r2, #1
 800fafe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fb06:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb0e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800fb26:	2301      	movs	r3, #1
 800fb28:	e077      	b.n	800fc1a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d107      	bne.n	800fb40 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2200      	movs	r2, #0
 800fb34:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fb3c:	665a      	str	r2, [r3, #100]	; 0x64
 800fb3e:	e006      	b.n	800fb4e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb46:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b03      	cmp	r3, #3
 800fb52:	d84f      	bhi.n	800fbf4 <SAI_InitI2S+0x130>
 800fb54:	a201      	add	r2, pc, #4	; (adr r2, 800fb5c <SAI_InitI2S+0x98>)
 800fb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb5a:	bf00      	nop
 800fb5c:	0800fb6d 	.word	0x0800fb6d
 800fb60:	0800fb8f 	.word	0x0800fb8f
 800fb64:	0800fbb1 	.word	0x0800fbb1
 800fb68:	0800fbd3 	.word	0x0800fbd3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2280      	movs	r2, #128	; 0x80
 800fb70:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	085b      	lsrs	r3, r3, #1
 800fb76:	015a      	lsls	r2, r3, #5
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	085b      	lsrs	r3, r3, #1
 800fb80:	011a      	lsls	r2, r3, #4
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2240      	movs	r2, #64	; 0x40
 800fb8a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fb8c:	e035      	b.n	800fbfa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2280      	movs	r2, #128	; 0x80
 800fb92:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	085b      	lsrs	r3, r3, #1
 800fb98:	019a      	lsls	r2, r3, #6
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	085b      	lsrs	r3, r3, #1
 800fba2:	015a      	lsls	r2, r3, #5
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2280      	movs	r2, #128	; 0x80
 800fbac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fbae:	e024      	b.n	800fbfa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	22c0      	movs	r2, #192	; 0xc0
 800fbb4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	085b      	lsrs	r3, r3, #1
 800fbba:	019a      	lsls	r2, r3, #6
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	085b      	lsrs	r3, r3, #1
 800fbc4:	015a      	lsls	r2, r3, #5
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2280      	movs	r2, #128	; 0x80
 800fbce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fbd0:	e013      	b.n	800fbfa <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	22e0      	movs	r2, #224	; 0xe0
 800fbd6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	085b      	lsrs	r3, r3, #1
 800fbdc:	019a      	lsls	r2, r3, #6
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	085b      	lsrs	r3, r3, #1
 800fbe6:	015a      	lsls	r2, r3, #5
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2280      	movs	r2, #128	; 0x80
 800fbf0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fbf2:	e002      	b.n	800fbfa <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800fbf8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d10b      	bne.n	800fc18 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d102      	bne.n	800fc0c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2210      	movs	r2, #16
 800fc0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d102      	bne.n	800fc18 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2208      	movs	r2, #8
 800fc16:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
 800fc34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <SAI_InitPCM+0x2e>
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d103      	bne.n	800fc5e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	651a      	str	r2, [r3, #80]	; 0x50
 800fc5c:	e002      	b.n	800fc64 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fc70:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800fc78:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc8c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2b04      	cmp	r3, #4
 800fc92:	d103      	bne.n	800fc9c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	659a      	str	r2, [r3, #88]	; 0x58
 800fc9a:	e002      	b.n	800fca2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	220d      	movs	r2, #13
 800fca0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	d837      	bhi.n	800fd18 <SAI_InitPCM+0xf0>
 800fca8:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <SAI_InitPCM+0x88>)
 800fcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcae:	bf00      	nop
 800fcb0:	0800fcc1 	.word	0x0800fcc1
 800fcb4:	0800fcd7 	.word	0x0800fcd7
 800fcb8:	0800fced 	.word	0x0800fced
 800fcbc:	0800fd03 	.word	0x0800fd03
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2280      	movs	r2, #128	; 0x80
 800fcc4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	011a      	lsls	r2, r3, #4
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2240      	movs	r2, #64	; 0x40
 800fcd2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fcd4:	e023      	b.n	800fd1e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2280      	movs	r2, #128	; 0x80
 800fcda:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2280      	movs	r2, #128	; 0x80
 800fce8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fcea:	e018      	b.n	800fd1e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	22c0      	movs	r2, #192	; 0xc0
 800fcf0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	015a      	lsls	r2, r3, #5
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2280      	movs	r2, #128	; 0x80
 800fcfe:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fd00:	e00d      	b.n	800fd1e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	22e0      	movs	r2, #224	; 0xe0
 800fd06:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	015a      	lsls	r2, r3, #5
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2280      	movs	r2, #128	; 0x80
 800fd14:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800fd16:	e002      	b.n	800fd1e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	75fb      	strb	r3, [r7, #23]
      break;
 800fd1c:	bf00      	nop
  }

  return status;
 800fd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	371c      	adds	r7, #28
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	460b      	mov	r3, r1
 800fd36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d103      	bne.n	800fd4a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f043 0308 	orr.w	r3, r3, #8
 800fd48:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd4e:	2b08      	cmp	r3, #8
 800fd50:	d10b      	bne.n	800fd6a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d003      	beq.n	800fd62 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d103      	bne.n	800fd6a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f043 0310 	orr.w	r3, r3, #16
 800fd68:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d003      	beq.n	800fd7a <SAI_InterruptFlag+0x4e>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d104      	bne.n	800fd84 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800fd80:	60fb      	str	r3, [r7, #12]
 800fd82:	e003      	b.n	800fd8c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f043 0304 	orr.w	r3, r3, #4
 800fd8a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
	...

0800fd9c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800fda4:	4b18      	ldr	r3, [pc, #96]	; (800fe08 <SAI_Disable+0x6c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a18      	ldr	r2, [pc, #96]	; (800fe0c <SAI_Disable+0x70>)
 800fdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fdae:	0b1b      	lsrs	r3, r3, #12
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800fdc6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d10a      	bne.n	800fde4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fdd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800fdde:	2303      	movs	r3, #3
 800fde0:	72fb      	strb	r3, [r7, #11]
      break;
 800fde2:	e009      	b.n	800fdf8 <SAI_Disable+0x5c>
    }
    count--;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	3b01      	subs	r3, #1
 800fde8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e7      	bne.n	800fdc8 <SAI_Disable+0x2c>

  return status;
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	2000001c 	.word	0x2000001c
 800fe0c:	95cbec1b 	.word	0x95cbec1b

0800fe10 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	69db      	ldr	r3, [r3, #28]
 800fe22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe26:	d01c      	beq.n	800fe62 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fe3e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fe40:	2100      	movs	r1, #0
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f7ff ff72 	bl	800fd2c <SAI_InterruptFlag>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	43d9      	mvns	r1, r3
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	691a      	ldr	r2, [r3, #16]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	400a      	ands	r2, r1
 800fe58:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7f2 f948 	bl	80020f8 <HAL_SAI_TxCpltCallback>
#endif
}
 800fe68:	bf00      	nop
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	f7f2 f944 	bl	800210c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800fe84:	bf00      	nop
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe98:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	69db      	ldr	r3, [r3, #28]
 800fe9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fea2:	d01c      	beq.n	800fede <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800feb2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800febc:	2100      	movs	r1, #0
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f7ff ff34 	bl	800fd2c <SAI_InterruptFlag>
 800fec4:	4603      	mov	r3, r0
 800fec6:	43d9      	mvns	r1, r3
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	691a      	ldr	r2, [r3, #16]
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	400a      	ands	r2, r1
 800fed4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f7f2 f91e 	bl	8002120 <HAL_SAI_RxCpltCallback>
#endif
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f7f2 f91b 	bl	8002136 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800ff00:	bf00      	nop
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff14:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7f8 fcb2 	bl	8008880 <HAL_DMA_GetError>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b02      	cmp	r3, #2
 800ff20:	d01d      	beq.n	800ff5e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ff40:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f7ff ff2a 	bl	800fd9c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7f2 f8c3 	bl	80020e4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800ff5e:	bf00      	nop
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b08a      	sub	sp, #40	; 0x28
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d101      	bne.n	800ff78 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e075      	b.n	8010064 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d105      	bne.n	800ff90 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f3 fade 	bl	800354c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2204      	movs	r2, #4
 800ff94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f867 	bl	801006c <HAL_SD_InitCard>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d001      	beq.n	800ffa8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e05d      	b.n	8010064 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ffa8:	f107 0308 	add.w	r3, r7, #8
 800ffac:	4619      	mov	r1, r3
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fdb4 	bl	8010b1c <HAL_SD_GetCardStatus>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e052      	b.n	8010064 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ffbe:	7e3b      	ldrb	r3, [r7, #24]
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ffc4:	7e7b      	ldrb	r3, [r7, #25]
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d10a      	bne.n	800ffe8 <HAL_SD_Init+0x82>
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <HAL_SD_Init+0x78>
 800ffd8:	6a3b      	ldr	r3, [r7, #32]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d004      	beq.n	800ffe8 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffe4:	659a      	str	r2, [r3, #88]	; 0x58
 800ffe6:	e00b      	b.n	8010000 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d104      	bne.n	800fffa <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fff6:	659a      	str	r2, [r3, #88]	; 0x58
 800fff8:	e002      	b.n	8010000 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 fe72 	bl	8010cf0 <HAL_SD_ConfigWideBusOperation>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8010012:	2301      	movs	r3, #1
 8010014:	e026      	b.n	8010064 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8010016:	f7f4 fff1 	bl	8004ffc <HAL_GetTick>
 801001a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801001c:	e011      	b.n	8010042 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801001e:	f7f4 ffed 	bl	8004ffc <HAL_GetTick>
 8010022:	4602      	mov	r2, r0
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801002c:	d109      	bne.n	8010042 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010034:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 801003e:	2303      	movs	r3, #3
 8010040:	e010      	b.n	8010064 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 ff66 	bl	8010f14 <HAL_SD_GetCardState>
 8010048:	4603      	mov	r3, r0
 801004a:	2b04      	cmp	r3, #4
 801004c:	d1e7      	bne.n	801001e <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3728      	adds	r7, #40	; 0x28
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b08d      	sub	sp, #52	; 0x34
 8010070:	af02      	add	r7, sp, #8
 8010072:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8010074:	2300      	movs	r3, #0
 8010076:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8010078:	2300      	movs	r3, #0
 801007a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801007c:	2300      	movs	r3, #0
 801007e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8010080:	2300      	movs	r3, #0
 8010082:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010084:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010088:	f04f 0100 	mov.w	r1, #0
 801008c:	f7fd fd48 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 8010090:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	2b00      	cmp	r3, #0
 8010096:	d109      	bne.n	80100ac <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80100a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e070      	b.n	801018e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	0a1b      	lsrs	r3, r3, #8
 80100b0:	4a39      	ldr	r2, [pc, #228]	; (8010198 <HAL_SD_InitCard+0x12c>)
 80100b2:	fba2 2303 	umull	r2, r3, r2, r3
 80100b6:	091b      	lsrs	r3, r3, #4
 80100b8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681c      	ldr	r4, [r3, #0]
 80100be:	466a      	mov	r2, sp
 80100c0:	f107 0318 	add.w	r3, r7, #24
 80100c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80100c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80100cc:	f107 030c 	add.w	r3, r7, #12
 80100d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100d2:	4620      	mov	r0, r4
 80100d4:	f003 fe7e 	bl	8013dd4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4618      	mov	r0, r3
 80100de:	f003 fec1 	bl	8013e64 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d005      	beq.n	80100f4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	005b      	lsls	r3, r3, #1
 80100ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80100f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d007      	beq.n	801010a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80100fa:	4a28      	ldr	r2, [pc, #160]	; (801019c <HAL_SD_InitCard+0x130>)
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010102:	3301      	adds	r3, #1
 8010104:	4618      	mov	r0, r3
 8010106:	f7f4 ff85 	bl	8005014 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fff0 	bl	80110f0 <SD_PowerON>
 8010110:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010112:	6a3b      	ldr	r3, [r7, #32]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00b      	beq.n	8010130 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010124:	6a3b      	ldr	r3, [r7, #32]
 8010126:	431a      	orrs	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801012c:	2301      	movs	r3, #1
 801012e:	e02e      	b.n	801018e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 ff0f 	bl	8010f54 <SD_InitCard>
 8010136:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010138:	6a3b      	ldr	r3, [r7, #32]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d00b      	beq.n	8010156 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2201      	movs	r2, #1
 8010142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801014a:	6a3b      	ldr	r3, [r7, #32]
 801014c:	431a      	orrs	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	e01b      	b.n	801018e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801015e:	4618      	mov	r0, r3
 8010160:	f003 ff16 	bl	8013f90 <SDMMC_CmdBlockLength>
 8010164:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00f      	beq.n	801018c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a0b      	ldr	r2, [pc, #44]	; (80101a0 <HAL_SD_InitCard+0x134>)
 8010172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	431a      	orrs	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2201      	movs	r2, #1
 8010184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	e000      	b.n	801018e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	372c      	adds	r7, #44	; 0x2c
 8010192:	46bd      	mov	sp, r7
 8010194:	bd90      	pop	{r4, r7, pc}
 8010196:	bf00      	nop
 8010198:	014f8b59 	.word	0x014f8b59
 801019c:	00012110 	.word	0x00012110
 80101a0:	1fe00fff 	.word	0x1fe00fff

080101a4 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b092      	sub	sp, #72	; 0x48
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80101b2:	f7f4 ff23 	bl	8004ffc <HAL_GetTick>
 80101b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d107      	bne.n	80101d6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80101d2:	2301      	movs	r3, #1
 80101d4:	e167      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	2b01      	cmp	r3, #1
 80101e0:	f040 815a 	bne.w	8010498 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2200      	movs	r2, #0
 80101e8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80101ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	441a      	add	r2, r3
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d907      	bls.n	8010208 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010204:	2301      	movs	r3, #1
 8010206:	e14e      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2203      	movs	r2, #3
 801020c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2200      	movs	r2, #0
 8010216:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801021c:	2b01      	cmp	r3, #1
 801021e:	d002      	beq.n	8010226 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	025b      	lsls	r3, r3, #9
 8010224:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801022a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	025b      	lsls	r3, r3, #9
 8010230:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010232:	2390      	movs	r3, #144	; 0x90
 8010234:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010236:	2302      	movs	r3, #2
 8010238:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801023a:	2300      	movs	r3, #0
 801023c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801023e:	2300      	movs	r3, #0
 8010240:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	f107 0214 	add.w	r2, r7, #20
 801024a:	4611      	mov	r1, r2
 801024c:	4618      	mov	r0, r3
 801024e:	f003 fe73 	bl	8013f38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68da      	ldr	r2, [r3, #12]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010260:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	2b01      	cmp	r3, #1
 8010266:	d90a      	bls.n	801027e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2202      	movs	r2, #2
 801026c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010274:	4618      	mov	r0, r3
 8010276:	f003 fed1 	bl	801401c <SDMMC_CmdReadMultiBlock>
 801027a:	6478      	str	r0, [r7, #68]	; 0x44
 801027c:	e009      	b.n	8010292 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2201      	movs	r2, #1
 8010282:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801028a:	4618      	mov	r0, r3
 801028c:	f003 fea3 	bl	8013fd6 <SDMMC_CmdReadSingleBlock>
 8010290:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8010292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010294:	2b00      	cmp	r3, #0
 8010296:	d012      	beq.n	80102be <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a84      	ldr	r2, [pc, #528]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 801029e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102a6:	431a      	orrs	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2200      	movs	r2, #0
 80102b8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80102ba:	2301      	movs	r3, #1
 80102bc:	e0f3      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80102c2:	e058      	b.n	8010376 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d033      	beq.n	801033a <HAL_SD_ReadBlocks+0x196>
 80102d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102d4:	2b1f      	cmp	r3, #31
 80102d6:	d930      	bls.n	801033a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80102d8:	2300      	movs	r3, #0
 80102da:	643b      	str	r3, [r7, #64]	; 0x40
 80102dc:	e027      	b.n	801032e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f003 fda0 	bl	8013e28 <SDMMC_ReadFIFO>
 80102e8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80102f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f4:	3301      	adds	r3, #1
 80102f6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	0a1b      	lsrs	r3, r3, #8
 80102fc:	b2da      	uxtb	r2, r3
 80102fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010300:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010304:	3301      	adds	r3, #1
 8010306:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	0c1b      	lsrs	r3, r3, #16
 801030c:	b2da      	uxtb	r2, r3
 801030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010310:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010314:	3301      	adds	r3, #1
 8010316:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	0e1b      	lsrs	r3, r3, #24
 801031c:	b2da      	uxtb	r2, r3
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010320:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8010322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010324:	3301      	adds	r3, #1
 8010326:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8010328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801032a:	3301      	adds	r3, #1
 801032c:	643b      	str	r3, [r7, #64]	; 0x40
 801032e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010330:	2b07      	cmp	r3, #7
 8010332:	d9d4      	bls.n	80102de <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010336:	3b20      	subs	r3, #32
 8010338:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801033a:	f7f4 fe5f 	bl	8004ffc <HAL_GetTick>
 801033e:	4602      	mov	r2, r0
 8010340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010346:	429a      	cmp	r2, r3
 8010348:	d902      	bls.n	8010350 <HAL_SD_ReadBlocks+0x1ac>
 801034a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034c:	2b00      	cmp	r3, #0
 801034e:	d112      	bne.n	8010376 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4a56      	ldr	r2, [pc, #344]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 8010356:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801035c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2201      	movs	r2, #1
 8010368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8010372:	2303      	movs	r3, #3
 8010374:	e097      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801037c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010380:	2b00      	cmp	r3, #0
 8010382:	d09f      	beq.n	80102c4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68da      	ldr	r2, [r3, #12]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010392:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d022      	beq.n	80103e8 <HAL_SD_ReadBlocks+0x244>
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d91f      	bls.n	80103e8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ac:	2b03      	cmp	r3, #3
 80103ae:	d01b      	beq.n	80103e8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f003 fe9b 	bl	80140f0 <SDMMC_CmdStopTransfer>
 80103ba:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80103bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d012      	beq.n	80103e8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4a3a      	ldr	r2, [pc, #232]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 80103c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103d0:	431a      	orrs	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2201      	movs	r2, #1
 80103da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2200      	movs	r2, #0
 80103e2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80103e4:	2301      	movs	r3, #1
 80103e6:	e05e      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ee:	f003 0308 	and.w	r3, r3, #8
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d012      	beq.n	801041c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4a2d      	ldr	r2, [pc, #180]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 80103fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010402:	f043 0208 	orr.w	r2, r3, #8
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2201      	movs	r2, #1
 801040e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2200      	movs	r2, #0
 8010416:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010418:	2301      	movs	r3, #1
 801041a:	e044      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010422:	f003 0302 	and.w	r3, r3, #2
 8010426:	2b00      	cmp	r3, #0
 8010428:	d012      	beq.n	8010450 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a20      	ldr	r2, [pc, #128]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 8010430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010436:	f043 0202 	orr.w	r2, r3, #2
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2201      	movs	r2, #1
 8010442:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2200      	movs	r2, #0
 801044a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801044c:	2301      	movs	r3, #1
 801044e:	e02a      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010456:	f003 0320 	and.w	r3, r3, #32
 801045a:	2b00      	cmp	r3, #0
 801045c:	d012      	beq.n	8010484 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a13      	ldr	r2, [pc, #76]	; (80104b0 <HAL_SD_ReadBlocks+0x30c>)
 8010464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801046a:	f043 0220 	orr.w	r2, r3, #32
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2201      	movs	r2, #1
 8010476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2200      	movs	r2, #0
 801047e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010480:	2301      	movs	r3, #1
 8010482:	e010      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a0a      	ldr	r2, [pc, #40]	; (80104b4 <HAL_SD_ReadBlocks+0x310>)
 801048a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	e006      	b.n	80104a6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801049c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80104a4:	2301      	movs	r3, #1
  }
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3748      	adds	r7, #72	; 0x48
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	1fe00fff 	.word	0x1fe00fff
 80104b4:	18000f3a 	.word	0x18000f3a

080104b8 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b092      	sub	sp, #72	; 0x48
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
 80104c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80104c6:	f7f4 fd99 	bl	8004ffc <HAL_GetTick>
 80104ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d107      	bne.n	80104ea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80104e6:	2301      	movs	r3, #1
 80104e8:	e16b      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	f040 815e 	bne.w	80107b4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2200      	movs	r2, #0
 80104fc:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80104fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	441a      	add	r2, r3
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010508:	429a      	cmp	r2, r3
 801050a:	d907      	bls.n	801051c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010510:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010518:	2301      	movs	r3, #1
 801051a:	e152      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2203      	movs	r2, #3
 8010520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2200      	movs	r2, #0
 801052a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010530:	2b01      	cmp	r3, #1
 8010532:	d002      	beq.n	801053a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8010534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010536:	025b      	lsls	r3, r3, #9
 8010538:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801053e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	025b      	lsls	r3, r3, #9
 8010544:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010546:	2390      	movs	r3, #144	; 0x90
 8010548:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801054a:	2300      	movs	r3, #0
 801054c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801054e:	2300      	movs	r3, #0
 8010550:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010552:	2300      	movs	r3, #0
 8010554:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f107 0218 	add.w	r2, r7, #24
 801055e:	4611      	mov	r1, r2
 8010560:	4618      	mov	r0, r3
 8010562:	f003 fce9 	bl	8013f38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68da      	ldr	r2, [r3, #12]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010574:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b01      	cmp	r3, #1
 801057a:	d90a      	bls.n	8010592 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2220      	movs	r2, #32
 8010580:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010588:	4618      	mov	r0, r3
 801058a:	f003 fd8d 	bl	80140a8 <SDMMC_CmdWriteMultiBlock>
 801058e:	6478      	str	r0, [r7, #68]	; 0x44
 8010590:	e009      	b.n	80105a6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2210      	movs	r2, #16
 8010596:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801059e:	4618      	mov	r0, r3
 80105a0:	f003 fd5f 	bl	8014062 <SDMMC_CmdWriteSingleBlock>
 80105a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80105a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d012      	beq.n	80105d2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a86      	ldr	r2, [pc, #536]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 80105b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ba:	431a      	orrs	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2200      	movs	r2, #0
 80105cc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80105ce:	2301      	movs	r3, #1
 80105d0:	e0f7      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80105d6:	e05c      	b.n	8010692 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d037      	beq.n	8010656 <HAL_SD_WriteBlocks+0x19e>
 80105e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e8:	2b1f      	cmp	r3, #31
 80105ea:	d934      	bls.n	8010656 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80105ec:	2300      	movs	r3, #0
 80105ee:	643b      	str	r3, [r7, #64]	; 0x40
 80105f0:	e02b      	b.n	801064a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80105f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	3301      	adds	r3, #1
 80105fc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	021a      	lsls	r2, r3, #8
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	4313      	orrs	r3, r2
 8010608:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	3301      	adds	r3, #1
 801060e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	041a      	lsls	r2, r3, #16
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	4313      	orrs	r3, r2
 801061a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801061c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061e:	3301      	adds	r3, #1
 8010620:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	061a      	lsls	r2, r3, #24
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	4313      	orrs	r3, r2
 801062c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010630:	3301      	adds	r3, #1
 8010632:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f107 0214 	add.w	r2, r7, #20
 801063c:	4611      	mov	r1, r2
 801063e:	4618      	mov	r0, r3
 8010640:	f003 fbff 	bl	8013e42 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8010644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010646:	3301      	adds	r3, #1
 8010648:	643b      	str	r3, [r7, #64]	; 0x40
 801064a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064c:	2b07      	cmp	r3, #7
 801064e:	d9d0      	bls.n	80105f2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010652:	3b20      	subs	r3, #32
 8010654:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8010656:	f7f4 fcd1 	bl	8004ffc <HAL_GetTick>
 801065a:	4602      	mov	r2, r0
 801065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010662:	429a      	cmp	r2, r3
 8010664:	d902      	bls.n	801066c <HAL_SD_WriteBlocks+0x1b4>
 8010666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010668:	2b00      	cmp	r3, #0
 801066a:	d112      	bne.n	8010692 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a56      	ldr	r2, [pc, #344]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 8010672:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801067a:	431a      	orrs	r2, r3
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2201      	movs	r2, #1
 8010684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 801068e:	2303      	movs	r3, #3
 8010690:	e097      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010698:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 801069c:	2b00      	cmp	r3, #0
 801069e:	d09b      	beq.n	80105d8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	68da      	ldr	r2, [r3, #12]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80106ae:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d022      	beq.n	8010704 <HAL_SD_WriteBlocks+0x24c>
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d91f      	bls.n	8010704 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c8:	2b03      	cmp	r3, #3
 80106ca:	d01b      	beq.n	8010704 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f003 fd0d 	bl	80140f0 <SDMMC_CmdStopTransfer>
 80106d6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80106d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d012      	beq.n	8010704 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4a3a      	ldr	r2, [pc, #232]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 80106e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ec:	431a      	orrs	r2, r3
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2201      	movs	r2, #1
 80106f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2200      	movs	r2, #0
 80106fe:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010700:	2301      	movs	r3, #1
 8010702:	e05e      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801070a:	f003 0308 	and.w	r3, r3, #8
 801070e:	2b00      	cmp	r3, #0
 8010710:	d012      	beq.n	8010738 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4a2d      	ldr	r2, [pc, #180]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 8010718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801071e:	f043 0208 	orr.w	r2, r3, #8
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2201      	movs	r2, #1
 801072a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	e044      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801073e:	f003 0302 	and.w	r3, r3, #2
 8010742:	2b00      	cmp	r3, #0
 8010744:	d012      	beq.n	801076c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a20      	ldr	r2, [pc, #128]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 801074c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010752:	f043 0202 	orr.w	r2, r3, #2
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2200      	movs	r2, #0
 8010766:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010768:	2301      	movs	r3, #1
 801076a:	e02a      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010772:	f003 0310 	and.w	r3, r3, #16
 8010776:	2b00      	cmp	r3, #0
 8010778:	d012      	beq.n	80107a0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a13      	ldr	r2, [pc, #76]	; (80107cc <HAL_SD_WriteBlocks+0x314>)
 8010780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010786:	f043 0210 	orr.w	r2, r3, #16
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2201      	movs	r2, #1
 8010792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2200      	movs	r2, #0
 801079a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	e010      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4a0a      	ldr	r2, [pc, #40]	; (80107d0 <HAL_SD_WriteBlocks+0x318>)
 80107a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	e006      	b.n	80107c2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80107c0:	2301      	movs	r3, #1
  }
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3748      	adds	r7, #72	; 0x48
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	1fe00fff 	.word	0x1fe00fff
 80107d0:	18000f3a 	.word	0x18000f3a

080107d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107e2:	0f9b      	lsrs	r3, r3, #30
 80107e4:	b2da      	uxtb	r2, r3
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107ee:	0e9b      	lsrs	r3, r3, #26
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	f003 030f 	and.w	r3, r3, #15
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010800:	0e1b      	lsrs	r3, r3, #24
 8010802:	b2db      	uxtb	r3, r3
 8010804:	f003 0303 	and.w	r3, r3, #3
 8010808:	b2da      	uxtb	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010812:	0c1b      	lsrs	r3, r3, #16
 8010814:	b2da      	uxtb	r2, r3
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801081e:	0a1b      	lsrs	r3, r3, #8
 8010820:	b2da      	uxtb	r2, r3
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801082a:	b2da      	uxtb	r2, r3
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010834:	0d1b      	lsrs	r3, r3, #20
 8010836:	b29a      	uxth	r2, r3
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010840:	0c1b      	lsrs	r3, r3, #16
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 030f 	and.w	r3, r3, #15
 8010848:	b2da      	uxtb	r2, r3
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010852:	0bdb      	lsrs	r3, r3, #15
 8010854:	b2db      	uxtb	r3, r3
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	b2da      	uxtb	r2, r3
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010864:	0b9b      	lsrs	r3, r3, #14
 8010866:	b2db      	uxtb	r3, r3
 8010868:	f003 0301 	and.w	r3, r3, #1
 801086c:	b2da      	uxtb	r2, r3
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010876:	0b5b      	lsrs	r3, r3, #13
 8010878:	b2db      	uxtb	r3, r3
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	b2da      	uxtb	r2, r3
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010888:	0b1b      	lsrs	r3, r3, #12
 801088a:	b2db      	uxtb	r3, r3
 801088c:	f003 0301 	and.w	r3, r3, #1
 8010890:	b2da      	uxtb	r2, r3
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2200      	movs	r2, #0
 801089a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d163      	bne.n	801096c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108a8:	009a      	lsls	r2, r3, #2
 80108aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80108ae:	4013      	ands	r3, r2
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80108b4:	0f92      	lsrs	r2, r2, #30
 80108b6:	431a      	orrs	r2, r3
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108c0:	0edb      	lsrs	r3, r3, #27
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	f003 0307 	and.w	r3, r3, #7
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108d2:	0e1b      	lsrs	r3, r3, #24
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	f003 0307 	and.w	r3, r3, #7
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108e4:	0d5b      	lsrs	r3, r3, #21
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	f003 0307 	and.w	r3, r3, #7
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108f6:	0c9b      	lsrs	r3, r3, #18
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010908:	0bdb      	lsrs	r3, r3, #15
 801090a:	b2db      	uxtb	r3, r3
 801090c:	f003 0307 	and.w	r3, r3, #7
 8010910:	b2da      	uxtb	r2, r3
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	1c5a      	adds	r2, r3, #1
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	7e1b      	ldrb	r3, [r3, #24]
 8010924:	b2db      	uxtb	r3, r3
 8010926:	f003 0307 	and.w	r3, r3, #7
 801092a:	3302      	adds	r3, #2
 801092c:	2201      	movs	r2, #1
 801092e:	fa02 f303 	lsl.w	r3, r2, r3
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010936:	fb03 f202 	mul.w	r2, r3, r2
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	7a1b      	ldrb	r3, [r3, #8]
 8010942:	b2db      	uxtb	r3, r3
 8010944:	f003 030f 	and.w	r3, r3, #15
 8010948:	2201      	movs	r2, #1
 801094a:	409a      	lsls	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010958:	0a52      	lsrs	r2, r2, #9
 801095a:	fb03 f202 	mul.w	r2, r3, r2
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010968:	655a      	str	r2, [r3, #84]	; 0x54
 801096a:	e031      	b.n	80109d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010970:	2b01      	cmp	r3, #1
 8010972:	d11d      	bne.n	80109b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010978:	041b      	lsls	r3, r3, #16
 801097a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010982:	0c1b      	lsrs	r3, r3, #16
 8010984:	431a      	orrs	r2, r3
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	691b      	ldr	r3, [r3, #16]
 801098e:	3301      	adds	r3, #1
 8010990:	029a      	lsls	r2, r3, #10
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	655a      	str	r2, [r3, #84]	; 0x54
 80109ae:	e00f      	b.n	80109d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a58      	ldr	r2, [pc, #352]	; (8010b18 <HAL_SD_GetCardCSD+0x344>)
 80109b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80109cc:	2301      	movs	r3, #1
 80109ce:	e09d      	b.n	8010b0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109d4:	0b9b      	lsrs	r3, r3, #14
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	f003 0301 	and.w	r3, r3, #1
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109e6:	09db      	lsrs	r3, r3, #7
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a08:	0fdb      	lsrs	r3, r3, #31
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a14:	0f5b      	lsrs	r3, r3, #29
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	f003 0303 	and.w	r3, r3, #3
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a26:	0e9b      	lsrs	r3, r3, #26
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	f003 0307 	and.w	r3, r3, #7
 8010a2e:	b2da      	uxtb	r2, r3
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a38:	0d9b      	lsrs	r3, r3, #22
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	f003 030f 	and.w	r3, r3, #15
 8010a40:	b2da      	uxtb	r2, r3
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a4a:	0d5b      	lsrs	r3, r3, #21
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	f003 0301 	and.w	r3, r3, #1
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a66:	0c1b      	lsrs	r3, r3, #16
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	f003 0301 	and.w	r3, r3, #1
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a7a:	0bdb      	lsrs	r3, r3, #15
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	f003 0301 	and.w	r3, r3, #1
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a8e:	0b9b      	lsrs	r3, r3, #14
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	f003 0301 	and.w	r3, r3, #1
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010aa2:	0b5b      	lsrs	r3, r3, #13
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	f003 0301 	and.w	r3, r3, #1
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ab6:	0b1b      	lsrs	r3, r3, #12
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010aca:	0a9b      	lsrs	r3, r3, #10
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	f003 0303 	and.w	r3, r3, #3
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ade:	0a1b      	lsrs	r3, r3, #8
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 0303 	and.w	r3, r3, #3
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010af2:	085b      	lsrs	r3, r3, #1
 8010af4:	b2db      	uxtb	r3, r3
 8010af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010afa:	b2da      	uxtb	r2, r3
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2201      	movs	r2, #1
 8010b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	1fe00fff 	.word	0x1fe00fff

08010b1c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b094      	sub	sp, #80	; 0x50
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8010b26:	2300      	movs	r3, #0
 8010b28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	2b03      	cmp	r3, #3
 8010b36:	d101      	bne.n	8010b3c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e0a7      	b.n	8010c8c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010b3c:	f107 0308 	add.w	r3, r7, #8
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 fb62 	bl	801120c <SD_SendSDStatus>
 8010b48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d011      	beq.n	8010b74 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a4f      	ldr	r2, [pc, #316]	; (8010c94 <HAL_SD_GetCardStatus+0x178>)
 8010b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b5e:	431a      	orrs	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2201      	movs	r2, #1
 8010b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010b72:	e070      	b.n	8010c56 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	099b      	lsrs	r3, r3, #6
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f003 0303 	and.w	r3, r3, #3
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	095b      	lsrs	r3, r3, #5
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	f003 0301 	and.w	r3, r3, #1
 8010b8e:	b2da      	uxtb	r2, r3
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	0a1b      	lsrs	r3, r3, #8
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	0e1b      	lsrs	r3, r3, #24
 8010ba4:	b29b      	uxth	r3, r3
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	061a      	lsls	r2, r3, #24
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	021b      	lsls	r3, r3, #8
 8010bb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010bba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	0a1b      	lsrs	r3, r3, #8
 8010bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010bc4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	0e1b      	lsrs	r3, r3, #24
 8010bca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	b2da      	uxtb	r2, r3
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	0a1b      	lsrs	r3, r3, #8
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	0d1b      	lsrs	r3, r3, #20
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	f003 030f 	and.w	r3, r3, #15
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	0c1b      	lsrs	r3, r3, #16
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	4313      	orrs	r3, r2
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	0a9b      	lsrs	r3, r3, #10
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	0a1b      	lsrs	r3, r3, #8
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	f003 0303 	and.w	r3, r3, #3
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	091b      	lsrs	r3, r3, #4
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	f003 030f 	and.w	r3, r3, #15
 8010c38:	b2da      	uxtb	r2, r3
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	f003 030f 	and.w	r3, r3, #15
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	0e1b      	lsrs	r3, r3, #24
 8010c50:	b2da      	uxtb	r2, r3
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f003 f996 	bl	8013f90 <SDMMC_CmdBlockLength>
 8010c64:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8010c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00d      	beq.n	8010c88 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a08      	ldr	r2, [pc, #32]	; (8010c94 <HAL_SD_GetCardStatus+0x178>)
 8010c72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c78:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8010c88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3750      	adds	r7, #80	; 0x50
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	1fe00fff 	.word	0x1fe00fff

08010c98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b08d      	sub	sp, #52	; 0x34
 8010cf4:	af02      	add	r7, sp, #8
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2203      	movs	r2, #3
 8010d04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0c:	2b03      	cmp	r3, #3
 8010d0e:	d02e      	beq.n	8010d6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d16:	d106      	bne.n	8010d26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	635a      	str	r2, [r3, #52]	; 0x34
 8010d24:	e029      	b.n	8010d7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d2c:	d10a      	bne.n	8010d44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 fb64 	bl	80113fc <SD_WideBus_Enable>
 8010d34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	431a      	orrs	r2, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	635a      	str	r2, [r3, #52]	; 0x34
 8010d42:	e01a      	b.n	8010d7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10a      	bne.n	8010d60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fba1 	bl	8011492 <SD_WideBus_Disable>
 8010d50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d56:	6a3b      	ldr	r3, [r7, #32]
 8010d58:	431a      	orrs	r2, r3
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8010d5e:	e00c      	b.n	8010d7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8010d6c:	e005      	b.n	8010d7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d007      	beq.n	8010d92 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4a5f      	ldr	r2, [pc, #380]	; (8010f04 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d90:	e096      	b.n	8010ec0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8010d92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8010d96:	f04f 0100 	mov.w	r1, #0
 8010d9a:	f7fc fec1 	bl	800db20 <HAL_RCCEx_GetPeriphCLKFreq>
 8010d9e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f000 8083 	beq.w	8010eae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	695a      	ldr	r2, [r3, #20]
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	4950      	ldr	r1, [pc, #320]	; (8010f08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010dc6:	fba1 1303 	umull	r1, r3, r1, r3
 8010dca:	0e1b      	lsrs	r3, r3, #24
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d303      	bcc.n	8010dd8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	61bb      	str	r3, [r7, #24]
 8010dd6:	e05a      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010de0:	d103      	bne.n	8010dea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	61bb      	str	r3, [r7, #24]
 8010de8:	e051      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010df2:	d126      	bne.n	8010e42 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	695b      	ldr	r3, [r3, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d10e      	bne.n	8010e1a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	4a43      	ldr	r2, [pc, #268]	; (8010f0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d906      	bls.n	8010e12 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	4a40      	ldr	r2, [pc, #256]	; (8010f08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010e08:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0c:	0e5b      	lsrs	r3, r3, #25
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	e03d      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	695b      	ldr	r3, [r3, #20]
 8010e16:	61bb      	str	r3, [r7, #24]
 8010e18:	e039      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	695b      	ldr	r3, [r3, #20]
 8010e1e:	005b      	lsls	r3, r3, #1
 8010e20:	69fa      	ldr	r2, [r7, #28]
 8010e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e26:	4a39      	ldr	r2, [pc, #228]	; (8010f0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d906      	bls.n	8010e3a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	4a36      	ldr	r2, [pc, #216]	; (8010f08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010e30:	fba2 2303 	umull	r2, r3, r2, r3
 8010e34:	0e5b      	lsrs	r3, r3, #25
 8010e36:	61bb      	str	r3, [r7, #24]
 8010e38:	e029      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	695b      	ldr	r3, [r3, #20]
 8010e3e:	61bb      	str	r3, [r7, #24]
 8010e40:	e025      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10e      	bne.n	8010e68 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	4a30      	ldr	r2, [pc, #192]	; (8010f10 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d906      	bls.n	8010e60 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	4a2c      	ldr	r2, [pc, #176]	; (8010f08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010e56:	fba2 2303 	umull	r2, r3, r2, r3
 8010e5a:	0e1b      	lsrs	r3, r3, #24
 8010e5c:	61bb      	str	r3, [r7, #24]
 8010e5e:	e016      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	695b      	ldr	r3, [r3, #20]
 8010e64:	61bb      	str	r3, [r7, #24]
 8010e66:	e012      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	695b      	ldr	r3, [r3, #20]
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e74:	4a26      	ldr	r2, [pc, #152]	; (8010f10 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d906      	bls.n	8010e88 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	4a22      	ldr	r2, [pc, #136]	; (8010f08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8010e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e82:	0e1b      	lsrs	r3, r3, #24
 8010e84:	61bb      	str	r3, [r7, #24]
 8010e86:	e002      	b.n	8010e8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	695b      	ldr	r3, [r3, #20]
 8010e8c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681c      	ldr	r4, [r3, #0]
 8010e92:	466a      	mov	r2, sp
 8010e94:	f107 0314 	add.w	r3, r7, #20
 8010e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010ea0:	f107 0308 	add.w	r3, r7, #8
 8010ea4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f002 ff94 	bl	8013dd4 <SDMMC_Init>
 8010eac:	e008      	b.n	8010ec0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f003 f861 	bl	8013f90 <SDMMC_CmdBlockLength>
 8010ece:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00c      	beq.n	8010ef0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a0a      	ldr	r2, [pc, #40]	; (8010f04 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010edc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ee2:	6a3b      	ldr	r3, [r7, #32]
 8010ee4:	431a      	orrs	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010eea:	2301      	movs	r3, #1
 8010eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	372c      	adds	r7, #44	; 0x2c
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd90      	pop	{r4, r7, pc}
 8010f04:	1fe00fff 	.word	0x1fe00fff
 8010f08:	55e63b89 	.word	0x55e63b89
 8010f0c:	02faf080 	.word	0x02faf080
 8010f10:	017d7840 	.word	0x017d7840

08010f14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010f20:	f107 030c 	add.w	r3, r7, #12
 8010f24:	4619      	mov	r1, r3
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 fa40 	bl	80113ac <SD_SendStatus>
 8010f2c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d005      	beq.n	8010f40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	431a      	orrs	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	0a5b      	lsrs	r3, r3, #9
 8010f44:	f003 030f 	and.w	r3, r3, #15
 8010f48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010f4a:	693b      	ldr	r3, [r7, #16]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3718      	adds	r7, #24
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b090      	sub	sp, #64	; 0x40
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010f60:	f7f4 f84c 	bl	8004ffc <HAL_GetTick>
 8010f64:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f002 ff8b 	bl	8013e86 <SDMMC_GetPowerState>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010f76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010f7a:	e0b5      	b.n	80110e8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	d02e      	beq.n	8010fe2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f003 f9d6 	bl	801433a <SDMMC_CmdSendCID>
 8010f8e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d001      	beq.n	8010f9a <SD_InitCard+0x46>
    {
      return errorstate;
 8010f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f98:	e0a6      	b.n	80110e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f002 ffb6 	bl	8013f12 <SDMMC_GetResponse>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2104      	movs	r1, #4
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f002 ffad 	bl	8013f12 <SDMMC_GetResponse>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	2108      	movs	r1, #8
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f002 ffa4 	bl	8013f12 <SDMMC_GetResponse>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	210c      	movs	r1, #12
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f002 ff9b 	bl	8013f12 <SDMMC_GetResponse>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe6:	2b03      	cmp	r3, #3
 8010fe8:	d01d      	beq.n	8011026 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010fea:	e019      	b.n	8011020 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f107 020a 	add.w	r2, r7, #10
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f003 f9de 	bl	80143b8 <SDMMC_CmdSetRelAdd>
 8010ffc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <SD_InitCard+0xb4>
      {
        return errorstate;
 8011004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011006:	e06f      	b.n	80110e8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8011008:	f7f3 fff8 	bl	8004ffc <HAL_GetTick>
 801100c:	4602      	mov	r2, r0
 801100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	f241 3287 	movw	r2, #4999	; 0x1387
 8011016:	4293      	cmp	r3, r2
 8011018:	d902      	bls.n	8011020 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 801101a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801101e:	e063      	b.n	80110e8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8011020:	897b      	ldrh	r3, [r7, #10]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d0e2      	beq.n	8010fec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	2b03      	cmp	r3, #3
 801102c:	d036      	beq.n	801109c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801102e:	897b      	ldrh	r3, [r7, #10]
 8011030:	461a      	mov	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801103e:	041b      	lsls	r3, r3, #16
 8011040:	4619      	mov	r1, r3
 8011042:	4610      	mov	r0, r2
 8011044:	f003 f998 	bl	8014378 <SDMMC_CmdSendCSD>
 8011048:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 801104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104c:	2b00      	cmp	r3, #0
 801104e:	d001      	beq.n	8011054 <SD_InitCard+0x100>
    {
      return errorstate;
 8011050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011052:	e049      	b.n	80110e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2100      	movs	r1, #0
 801105a:	4618      	mov	r0, r3
 801105c:	f002 ff59 	bl	8013f12 <SDMMC_GetResponse>
 8011060:	4602      	mov	r2, r0
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2104      	movs	r1, #4
 801106c:	4618      	mov	r0, r3
 801106e:	f002 ff50 	bl	8013f12 <SDMMC_GetResponse>
 8011072:	4602      	mov	r2, r0
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2108      	movs	r1, #8
 801107e:	4618      	mov	r0, r3
 8011080:	f002 ff47 	bl	8013f12 <SDMMC_GetResponse>
 8011084:	4602      	mov	r2, r0
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	210c      	movs	r1, #12
 8011090:	4618      	mov	r0, r3
 8011092:	f002 ff3e 	bl	8013f12 <SDMMC_GetResponse>
 8011096:	4602      	mov	r2, r0
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2104      	movs	r1, #4
 80110a2:	4618      	mov	r0, r3
 80110a4:	f002 ff35 	bl	8013f12 <SDMMC_GetResponse>
 80110a8:	4603      	mov	r3, r0
 80110aa:	0d1a      	lsrs	r2, r3, #20
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80110b0:	f107 030c 	add.w	r3, r7, #12
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff fb8c 	bl	80107d4 <HAL_SD_GetCardCSD>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d002      	beq.n	80110c8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80110c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80110c6:	e00f      	b.n	80110e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110d0:	041b      	lsls	r3, r3, #16
 80110d2:	4619      	mov	r1, r3
 80110d4:	4610      	mov	r0, r2
 80110d6:	f003 f847 	bl	8014168 <SDMMC_CmdSelDesel>
 80110da:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80110dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d001      	beq.n	80110e6 <SD_InitCard+0x192>
  {
    return errorstate;
 80110e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e4:	e000      	b.n	80110e8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3740      	adds	r7, #64	; 0x40
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80110fc:	2300      	movs	r3, #0
 80110fe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8011100:	2300      	movs	r3, #0
 8011102:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4618      	mov	r0, r3
 801110a:	f003 f850 	bl	80141ae <SDMMC_CmdGoIdleState>
 801110e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d001      	beq.n	801111a <SD_PowerON+0x2a>
  {
    return errorstate;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	e072      	b.n	8011200 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	4618      	mov	r0, r3
 8011120:	f003 f863 	bl	80141ea <SDMMC_CmdOperCond>
 8011124:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801112c:	d10d      	bne.n	801114a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4618      	mov	r0, r3
 801113a:	f003 f838 	bl	80141ae <SDMMC_CmdGoIdleState>
 801113e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d004      	beq.n	8011150 <SD_PowerON+0x60>
    {
      return errorstate;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	e05a      	b.n	8011200 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2201      	movs	r2, #1
 801114e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011154:	2b01      	cmp	r3, #1
 8011156:	d137      	bne.n	80111c8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2100      	movs	r1, #0
 801115e:	4618      	mov	r0, r3
 8011160:	f003 f863 	bl	801422a <SDMMC_CmdAppCommand>
 8011164:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d02d      	beq.n	80111c8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801116c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011170:	e046      	b.n	8011200 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f003 f856 	bl	801422a <SDMMC_CmdAppCommand>
 801117e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <SD_PowerON+0x9a>
    {
      return errorstate;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	e03a      	b.n	8011200 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	491e      	ldr	r1, [pc, #120]	; (8011208 <SD_PowerON+0x118>)
 8011190:	4618      	mov	r0, r3
 8011192:	f003 f86d 	bl	8014270 <SDMMC_CmdAppOperCommand>
 8011196:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d002      	beq.n	80111a4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801119e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80111a2:	e02d      	b.n	8011200 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2100      	movs	r1, #0
 80111aa:	4618      	mov	r0, r3
 80111ac:	f002 feb1 	bl	8013f12 <SDMMC_GetResponse>
 80111b0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	0fdb      	lsrs	r3, r3, #31
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	d101      	bne.n	80111be <SD_PowerON+0xce>
 80111ba:	2301      	movs	r3, #1
 80111bc:	e000      	b.n	80111c0 <SD_PowerON+0xd0>
 80111be:	2300      	movs	r3, #0
 80111c0:	613b      	str	r3, [r7, #16]

    count++;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	3301      	adds	r3, #1
 80111c6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d802      	bhi.n	80111d8 <SD_PowerON+0xe8>
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0cc      	beq.n	8011172 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80111de:	4293      	cmp	r3, r2
 80111e0:	d902      	bls.n	80111e8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80111e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80111e6:	e00b      	b.n	8011200 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2201      	movs	r2, #1
 80111fc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80111fe:	2300      	movs	r3, #0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	c1100000 	.word	0xc1100000

0801120c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b08c      	sub	sp, #48	; 0x30
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011216:	f7f3 fef1 	bl	8004ffc <HAL_GetTick>
 801121a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2100      	movs	r1, #0
 8011226:	4618      	mov	r0, r3
 8011228:	f002 fe73 	bl	8013f12 <SDMMC_GetResponse>
 801122c:	4603      	mov	r3, r0
 801122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011236:	d102      	bne.n	801123e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801123c:	e0b0      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2140      	movs	r1, #64	; 0x40
 8011244:	4618      	mov	r0, r3
 8011246:	f002 fea3 	bl	8013f90 <SDMMC_CmdBlockLength>
 801124a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801124c:	6a3b      	ldr	r3, [r7, #32]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d005      	beq.n	801125e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	e0a0      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011266:	041b      	lsls	r3, r3, #16
 8011268:	4619      	mov	r1, r3
 801126a:	4610      	mov	r0, r2
 801126c:	f002 ffdd 	bl	801422a <SDMMC_CmdAppCommand>
 8011270:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d005      	beq.n	8011284 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	e08d      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011288:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 801128a:	2340      	movs	r3, #64	; 0x40
 801128c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801128e:	2360      	movs	r3, #96	; 0x60
 8011290:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011292:	2302      	movs	r3, #2
 8011294:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011296:	2300      	movs	r3, #0
 8011298:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801129a:	2301      	movs	r3, #1
 801129c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f107 0208 	add.w	r2, r7, #8
 80112a6:	4611      	mov	r1, r2
 80112a8:	4618      	mov	r0, r3
 80112aa:	f002 fe45 	bl	8013f38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f003 f8c5 	bl	8014442 <SDMMC_CmdStatusRegister>
 80112b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d02b      	beq.n	8011318 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80112c8:	6a3b      	ldr	r3, [r7, #32]
 80112ca:	e069      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d013      	beq.n	8011302 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80112da:	2300      	movs	r3, #0
 80112dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112de:	e00d      	b.n	80112fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f002 fd9f 	bl	8013e28 <SDMMC_ReadFIFO>
 80112ea:	4602      	mov	r2, r0
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	601a      	str	r2, [r3, #0]
        pData++;
 80112f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f2:	3304      	adds	r3, #4
 80112f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	3301      	adds	r3, #1
 80112fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fe:	2b07      	cmp	r3, #7
 8011300:	d9ee      	bls.n	80112e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011302:	f7f3 fe7b 	bl	8004ffc <HAL_GetTick>
 8011306:	4602      	mov	r2, r0
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011310:	d102      	bne.n	8011318 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011312:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011316:	e043      	b.n	80113a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801131e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8011322:	2b00      	cmp	r3, #0
 8011324:	d0d2      	beq.n	80112cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801132c:	f003 0308 	and.w	r3, r3, #8
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011334:	2308      	movs	r3, #8
 8011336:	e033      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801133e:	f003 0302 	and.w	r3, r3, #2
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011346:	2302      	movs	r3, #2
 8011348:	e02a      	b.n	80113a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011350:	f003 0320 	and.w	r3, r3, #32
 8011354:	2b00      	cmp	r3, #0
 8011356:	d017      	beq.n	8011388 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8011358:	2320      	movs	r3, #32
 801135a:	e021      	b.n	80113a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4618      	mov	r0, r3
 8011362:	f002 fd61 	bl	8013e28 <SDMMC_ReadFIFO>
 8011366:	4602      	mov	r2, r0
 8011368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136a:	601a      	str	r2, [r3, #0]
    pData++;
 801136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136e:	3304      	adds	r3, #4
 8011370:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011372:	f7f3 fe43 	bl	8004ffc <HAL_GetTick>
 8011376:	4602      	mov	r2, r0
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011380:	d102      	bne.n	8011388 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011382:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011386:	e00b      	b.n	80113a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1e2      	bne.n	801135c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a03      	ldr	r2, [pc, #12]	; (80113a8 <SD_SendSDStatus+0x19c>)
 801139c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801139e:	2300      	movs	r3, #0
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3730      	adds	r7, #48	; 0x30
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	18000f3a 	.word	0x18000f3a

080113ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d102      	bne.n	80113c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80113bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80113c0:	e018      	b.n	80113f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113ca:	041b      	lsls	r3, r3, #16
 80113cc:	4619      	mov	r1, r3
 80113ce:	4610      	mov	r0, r2
 80113d0:	f003 f814 	bl	80143fc <SDMMC_CmdSendStatus>
 80113d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d001      	beq.n	80113e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	e009      	b.n	80113f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2100      	movs	r1, #0
 80113e6:	4618      	mov	r0, r3
 80113e8:	f002 fd93 	bl	8013f12 <SDMMC_GetResponse>
 80113ec:	4602      	mov	r2, r0
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8011404:	2300      	movs	r3, #0
 8011406:	60fb      	str	r3, [r7, #12]
 8011408:	2300      	movs	r3, #0
 801140a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2100      	movs	r1, #0
 8011412:	4618      	mov	r0, r3
 8011414:	f002 fd7d 	bl	8013f12 <SDMMC_GetResponse>
 8011418:	4603      	mov	r3, r0
 801141a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801141e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011422:	d102      	bne.n	801142a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011428:	e02f      	b.n	801148a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801142a:	f107 030c 	add.w	r3, r7, #12
 801142e:	4619      	mov	r1, r3
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 f879 	bl	8011528 <SD_FindSCR>
 8011436:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d001      	beq.n	8011442 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	e023      	b.n	801148a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01c      	beq.n	8011486 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011454:	041b      	lsls	r3, r3, #16
 8011456:	4619      	mov	r1, r3
 8011458:	4610      	mov	r0, r2
 801145a:	f002 fee6 	bl	801422a <SDMMC_CmdAppCommand>
 801145e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d001      	beq.n	801146a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	e00f      	b.n	801148a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2102      	movs	r1, #2
 8011470:	4618      	mov	r0, r3
 8011472:	f002 ff1d 	bl	80142b0 <SDMMC_CmdBusWidth>
 8011476:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d001      	beq.n	8011482 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	e003      	b.n	801148a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011482:	2300      	movs	r3, #0
 8011484:	e001      	b.n	801148a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011492:	b580      	push	{r7, lr}
 8011494:	b086      	sub	sp, #24
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801149a:	2300      	movs	r3, #0
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	2300      	movs	r3, #0
 80114a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2100      	movs	r1, #0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f002 fd32 	bl	8013f12 <SDMMC_GetResponse>
 80114ae:	4603      	mov	r3, r0
 80114b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80114b8:	d102      	bne.n	80114c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80114ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80114be:	e02f      	b.n	8011520 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	4619      	mov	r1, r3
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 f82e 	bl	8011528 <SD_FindSCR>
 80114cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	e023      	b.n	8011520 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d01c      	beq.n	801151c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ea:	041b      	lsls	r3, r3, #16
 80114ec:	4619      	mov	r1, r3
 80114ee:	4610      	mov	r0, r2
 80114f0:	f002 fe9b 	bl	801422a <SDMMC_CmdAppCommand>
 80114f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	e00f      	b.n	8011520 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2100      	movs	r1, #0
 8011506:	4618      	mov	r0, r3
 8011508:	f002 fed2 	bl	80142b0 <SDMMC_CmdBusWidth>
 801150c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	e003      	b.n	8011520 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011518:	2300      	movs	r3, #0
 801151a:	e001      	b.n	8011520 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801151c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011520:	4618      	mov	r0, r3
 8011522:	3718      	adds	r7, #24
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b08e      	sub	sp, #56	; 0x38
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011532:	f7f3 fd63 	bl	8004ffc <HAL_GetTick>
 8011536:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011538:	2300      	movs	r3, #0
 801153a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801153c:	2300      	movs	r3, #0
 801153e:	60bb      	str	r3, [r7, #8]
 8011540:	2300      	movs	r3, #0
 8011542:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2108      	movs	r1, #8
 801154e:	4618      	mov	r0, r3
 8011550:	f002 fd1e 	bl	8013f90 <SDMMC_CmdBlockLength>
 8011554:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <SD_FindSCR+0x38>
  {
    return errorstate;
 801155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155e:	e0ad      	b.n	80116bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011568:	041b      	lsls	r3, r3, #16
 801156a:	4619      	mov	r1, r3
 801156c:	4610      	mov	r0, r2
 801156e:	f002 fe5c 	bl	801422a <SDMMC_CmdAppCommand>
 8011572:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	2b00      	cmp	r3, #0
 8011578:	d001      	beq.n	801157e <SD_FindSCR+0x56>
  {
    return errorstate;
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	e09e      	b.n	80116bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801157e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011582:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011584:	2308      	movs	r3, #8
 8011586:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8011588:	2330      	movs	r3, #48	; 0x30
 801158a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801158c:	2302      	movs	r3, #2
 801158e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011590:	2300      	movs	r3, #0
 8011592:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011594:	2301      	movs	r3, #1
 8011596:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f107 0210 	add.w	r2, r7, #16
 80115a0:	4611      	mov	r1, r2
 80115a2:	4618      	mov	r0, r3
 80115a4:	f002 fcc8 	bl	8013f38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4618      	mov	r0, r3
 80115ae:	f002 fea2 	bl	80142f6 <SDMMC_CmdSendSCR>
 80115b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d027      	beq.n	801160a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80115ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115bc:	e07e      	b.n	80116bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d113      	bne.n	80115f4 <SD_FindSCR+0xcc>
 80115cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d110      	bne.n	80115f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f002 fc26 	bl	8013e28 <SDMMC_ReadFIFO>
 80115dc:	4603      	mov	r3, r0
 80115de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f002 fc1f 	bl	8013e28 <SDMMC_ReadFIFO>
 80115ea:	4603      	mov	r3, r0
 80115ec:	60fb      	str	r3, [r7, #12]
      index++;
 80115ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f0:	3301      	adds	r3, #1
 80115f2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80115f4:	f7f3 fd02 	bl	8004ffc <HAL_GetTick>
 80115f8:	4602      	mov	r2, r0
 80115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011602:	d102      	bne.n	801160a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011608:	e058      	b.n	80116bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011610:	f240 532a 	movw	r3, #1322	; 0x52a
 8011614:	4013      	ands	r3, r2
 8011616:	2b00      	cmp	r3, #0
 8011618:	d0d1      	beq.n	80115be <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011620:	f003 0308 	and.w	r3, r3, #8
 8011624:	2b00      	cmp	r3, #0
 8011626:	d005      	beq.n	8011634 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2208      	movs	r2, #8
 801162e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011630:	2308      	movs	r3, #8
 8011632:	e043      	b.n	80116bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801163a:	f003 0302 	and.w	r3, r3, #2
 801163e:	2b00      	cmp	r3, #0
 8011640:	d005      	beq.n	801164e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2202      	movs	r2, #2
 8011648:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801164a:	2302      	movs	r3, #2
 801164c:	e036      	b.n	80116bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011654:	f003 0320 	and.w	r3, r3, #32
 8011658:	2b00      	cmp	r3, #0
 801165a:	d005      	beq.n	8011668 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2220      	movs	r2, #32
 8011662:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011664:	2320      	movs	r3, #32
 8011666:	e029      	b.n	80116bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a15      	ldr	r2, [pc, #84]	; (80116c4 <SD_FindSCR+0x19c>)
 801166e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	061a      	lsls	r2, r3, #24
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	021b      	lsls	r3, r3, #8
 8011678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801167c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	0a1b      	lsrs	r3, r3, #8
 8011682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8011686:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	0e1b      	lsrs	r3, r3, #24
 801168c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	601a      	str	r2, [r3, #0]
    scr++;
 8011692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011694:	3304      	adds	r3, #4
 8011696:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	061a      	lsls	r2, r3, #24
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	021b      	lsls	r3, r3, #8
 80116a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80116a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	0a1b      	lsrs	r3, r3, #8
 80116aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80116ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	0e1b      	lsrs	r3, r3, #24
 80116b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80116b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3738      	adds	r7, #56	; 0x38
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	18000f3a 	.word	0x18000f3a

080116c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d101      	bne.n	80116dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80116d8:	2301      	movs	r3, #1
 80116da:	e02b      	b.n	8011734 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d106      	bne.n	80116f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7f0 ffe9 	bl	80026c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2202      	movs	r2, #2
 80116fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3304      	adds	r3, #4
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f002 fa61 	bl	8013bd0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	461a      	mov	r2, r3
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	f002 fab5 	bl	8013c88 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801171e:	4b07      	ldr	r3, [pc, #28]	; (801173c <HAL_SDRAM_Init+0x74>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	4a06      	ldr	r2, [pc, #24]	; (801173c <HAL_SDRAM_Init+0x74>)
 8011724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011728:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2201      	movs	r2, #1
 801172e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	52004000 	.word	0x52004000

08011740 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011752:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011754:	7dfb      	ldrb	r3, [r7, #23]
 8011756:	2b02      	cmp	r3, #2
 8011758:	d101      	bne.n	801175e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801175a:	2302      	movs	r3, #2
 801175c:	e021      	b.n	80117a2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801175e:	7dfb      	ldrb	r3, [r7, #23]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d002      	beq.n	801176a <HAL_SDRAM_SendCommand+0x2a>
 8011764:	7dfb      	ldrb	r3, [r7, #23]
 8011766:	2b05      	cmp	r3, #5
 8011768:	d118      	bne.n	801179c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2202      	movs	r2, #2
 801176e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	68b9      	ldr	r1, [r7, #8]
 801177a:	4618      	mov	r0, r3
 801177c:	f002 faee 	bl	8013d5c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2b02      	cmp	r3, #2
 8011786:	d104      	bne.n	8011792 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2205      	movs	r2, #5
 801178c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011790:	e006      	b.n	80117a0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2201      	movs	r2, #1
 8011796:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801179a:	e001      	b.n	80117a0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801179c:	2301      	movs	r3, #1
 801179e:	e000      	b.n	80117a2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3718      	adds	r7, #24
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b082      	sub	sp, #8
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d101      	bne.n	80117c4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80117c0:	2302      	movs	r3, #2
 80117c2:	e016      	b.n	80117f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d10f      	bne.n	80117f0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2202      	movs	r2, #2
 80117d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	4618      	mov	r0, r3
 80117e0:	f002 fae0 	bl	8013da4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80117ec:	2300      	movs	r3, #0
 80117ee:	e000      	b.n	80117f2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80117f0:	2301      	movs	r3, #1
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3708      	adds	r7, #8
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d101      	bne.n	801180e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801180a:	2301      	movs	r3, #1
 801180c:	e10f      	b.n	8011a2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4a87      	ldr	r2, [pc, #540]	; (8011a38 <HAL_SPI_Init+0x23c>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d00f      	beq.n	801183e <HAL_SPI_Init+0x42>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4a86      	ldr	r2, [pc, #536]	; (8011a3c <HAL_SPI_Init+0x240>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d00a      	beq.n	801183e <HAL_SPI_Init+0x42>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a84      	ldr	r2, [pc, #528]	; (8011a40 <HAL_SPI_Init+0x244>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d005      	beq.n	801183e <HAL_SPI_Init+0x42>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	2b0f      	cmp	r3, #15
 8011838:	d901      	bls.n	801183e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801183a:	2301      	movs	r3, #1
 801183c:	e0f7      	b.n	8011a2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 f900 	bl	8011a44 <SPI_GetPacketSize>
 8011844:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a7b      	ldr	r2, [pc, #492]	; (8011a38 <HAL_SPI_Init+0x23c>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d00c      	beq.n	801186a <HAL_SPI_Init+0x6e>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	4a79      	ldr	r2, [pc, #484]	; (8011a3c <HAL_SPI_Init+0x240>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d007      	beq.n	801186a <HAL_SPI_Init+0x6e>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a78      	ldr	r2, [pc, #480]	; (8011a40 <HAL_SPI_Init+0x244>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d002      	beq.n	801186a <HAL_SPI_Init+0x6e>
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b08      	cmp	r3, #8
 8011868:	d811      	bhi.n	801188e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801186e:	4a72      	ldr	r2, [pc, #456]	; (8011a38 <HAL_SPI_Init+0x23c>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d009      	beq.n	8011888 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a70      	ldr	r2, [pc, #448]	; (8011a3c <HAL_SPI_Init+0x240>)
 801187a:	4293      	cmp	r3, r2
 801187c:	d004      	beq.n	8011888 <HAL_SPI_Init+0x8c>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	4a6f      	ldr	r2, [pc, #444]	; (8011a40 <HAL_SPI_Init+0x244>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d104      	bne.n	8011892 <HAL_SPI_Init+0x96>
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2b10      	cmp	r3, #16
 801188c:	d901      	bls.n	8011892 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801188e:	2301      	movs	r3, #1
 8011890:	e0cd      	b.n	8011a2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011898:	b2db      	uxtb	r3, r3
 801189a:	2b00      	cmp	r3, #0
 801189c:	d106      	bne.n	80118ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7f1 ff22 	bl	80036f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2202      	movs	r2, #2
 80118b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f022 0201 	bic.w	r2, r2, #1
 80118c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80118ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	699b      	ldr	r3, [r3, #24]
 80118d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80118d8:	d119      	bne.n	801190e <HAL_SPI_Init+0x112>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80118e2:	d103      	bne.n	80118ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d008      	beq.n	80118fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10c      	bne.n	801190e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80118f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80118fc:	d107      	bne.n	801190e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	681a      	ldr	r2, [r3, #0]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801190c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00f      	beq.n	801193a <HAL_SPI_Init+0x13e>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	2b06      	cmp	r3, #6
 8011920:	d90b      	bls.n	801193a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	430a      	orrs	r2, r1
 8011936:	601a      	str	r2, [r3, #0]
 8011938:	e007      	b.n	801194a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	69da      	ldr	r2, [r3, #28]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011952:	431a      	orrs	r2, r3
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	431a      	orrs	r2, r3
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801195c:	ea42 0103 	orr.w	r1, r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	68da      	ldr	r2, [r3, #12]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	430a      	orrs	r2, r1
 801196a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011974:	431a      	orrs	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801197a:	431a      	orrs	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	699b      	ldr	r3, [r3, #24]
 8011980:	431a      	orrs	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	431a      	orrs	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	695b      	ldr	r3, [r3, #20]
 801198c:	431a      	orrs	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a1b      	ldr	r3, [r3, #32]
 8011992:	431a      	orrs	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	685b      	ldr	r3, [r3, #4]
 8011998:	431a      	orrs	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801199e:	431a      	orrs	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	431a      	orrs	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119aa:	ea42 0103 	orr.w	r1, r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	430a      	orrs	r2, r1
 80119b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d113      	bne.n	80119ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80119d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80119e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f022 0201 	bic.w	r2, r2, #1
 80119f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00a      	beq.n	8011a1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	430a      	orrs	r2, r1
 8011a1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3710      	adds	r7, #16
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	40013000 	.word	0x40013000
 8011a3c:	40003800 	.word	0x40003800
 8011a40:	40003c00 	.word	0x40003c00

08011a44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b085      	sub	sp, #20
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a50:	095b      	lsrs	r3, r3, #5
 8011a52:	3301      	adds	r3, #1
 8011a54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	3307      	adds	r3, #7
 8011a62:	08db      	lsrs	r3, r3, #3
 8011a64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	68fa      	ldr	r2, [r7, #12]
 8011a6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3714      	adds	r7, #20
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr

08011a7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b082      	sub	sp, #8
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d101      	bne.n	8011a8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	e049      	b.n	8011b20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d106      	bne.n	8011aa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f7f2 f9bd 	bl	8003e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	4610      	mov	r0, r2
 8011aba:	f000 fa99 	bl	8011ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2201      	movs	r2, #1
 8011aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2201      	movs	r2, #1
 8011aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2201      	movs	r2, #1
 8011afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2201      	movs	r2, #1
 8011b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2201      	movs	r2, #1
 8011b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011b1e:	2300      	movs	r3, #0
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d101      	bne.n	8011b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	e049      	b.n	8011bce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b40:	b2db      	uxtb	r3, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7f2 f944 	bl	8003ddc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2202      	movs	r2, #2
 8011b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3304      	adds	r3, #4
 8011b64:	4619      	mov	r1, r3
 8011b66:	4610      	mov	r0, r2
 8011b68:	f000 fa42 	bl	8011ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2201      	movs	r2, #1
 8011b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2201      	movs	r2, #1
 8011b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2201      	movs	r2, #1
 8011b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2201      	movs	r2, #1
 8011b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2201      	movs	r2, #1
 8011b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2201      	movs	r2, #1
 8011b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2201      	movs	r2, #1
 8011bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2201      	movs	r2, #1
 8011bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011bcc:	2300      	movs	r3, #0
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
	...

08011bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	60f8      	str	r0, [r7, #12]
 8011be0:	60b9      	str	r1, [r7, #8]
 8011be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011be4:	2300      	movs	r3, #0
 8011be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bee:	2b01      	cmp	r3, #1
 8011bf0:	d101      	bne.n	8011bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	e0ff      	b.n	8011df6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b14      	cmp	r3, #20
 8011c02:	f200 80f0 	bhi.w	8011de6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011c06:	a201      	add	r2, pc, #4	; (adr r2, 8011c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c0c:	08011c61 	.word	0x08011c61
 8011c10:	08011de7 	.word	0x08011de7
 8011c14:	08011de7 	.word	0x08011de7
 8011c18:	08011de7 	.word	0x08011de7
 8011c1c:	08011ca1 	.word	0x08011ca1
 8011c20:	08011de7 	.word	0x08011de7
 8011c24:	08011de7 	.word	0x08011de7
 8011c28:	08011de7 	.word	0x08011de7
 8011c2c:	08011ce3 	.word	0x08011ce3
 8011c30:	08011de7 	.word	0x08011de7
 8011c34:	08011de7 	.word	0x08011de7
 8011c38:	08011de7 	.word	0x08011de7
 8011c3c:	08011d23 	.word	0x08011d23
 8011c40:	08011de7 	.word	0x08011de7
 8011c44:	08011de7 	.word	0x08011de7
 8011c48:	08011de7 	.word	0x08011de7
 8011c4c:	08011d65 	.word	0x08011d65
 8011c50:	08011de7 	.word	0x08011de7
 8011c54:	08011de7 	.word	0x08011de7
 8011c58:	08011de7 	.word	0x08011de7
 8011c5c:	08011da5 	.word	0x08011da5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68b9      	ldr	r1, [r7, #8]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f000 fa5c 	bl	8012124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	699a      	ldr	r2, [r3, #24]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f042 0208 	orr.w	r2, r2, #8
 8011c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	699a      	ldr	r2, [r3, #24]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f022 0204 	bic.w	r2, r2, #4
 8011c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	6999      	ldr	r1, [r3, #24]
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	691a      	ldr	r2, [r3, #16]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	430a      	orrs	r2, r1
 8011c9c:	619a      	str	r2, [r3, #24]
      break;
 8011c9e:	e0a5      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	68b9      	ldr	r1, [r7, #8]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 facc 	bl	8012244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	699a      	ldr	r2, [r3, #24]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	699a      	ldr	r2, [r3, #24]
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	6999      	ldr	r1, [r3, #24]
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	691b      	ldr	r3, [r3, #16]
 8011cd6:	021a      	lsls	r2, r3, #8
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	430a      	orrs	r2, r1
 8011cde:	619a      	str	r2, [r3, #24]
      break;
 8011ce0:	e084      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68b9      	ldr	r1, [r7, #8]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f000 fb35 	bl	8012358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	69da      	ldr	r2, [r3, #28]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f042 0208 	orr.w	r2, r2, #8
 8011cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	69da      	ldr	r2, [r3, #28]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f022 0204 	bic.w	r2, r2, #4
 8011d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	69d9      	ldr	r1, [r3, #28]
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	691a      	ldr	r2, [r3, #16]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	430a      	orrs	r2, r1
 8011d1e:	61da      	str	r2, [r3, #28]
      break;
 8011d20:	e064      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68b9      	ldr	r1, [r7, #8]
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f000 fb9d 	bl	8012468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	69da      	ldr	r2, [r3, #28]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	69da      	ldr	r2, [r3, #28]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	69d9      	ldr	r1, [r3, #28]
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	021a      	lsls	r2, r3, #8
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	430a      	orrs	r2, r1
 8011d60:	61da      	str	r2, [r3, #28]
      break;
 8011d62:	e043      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	68b9      	ldr	r1, [r7, #8]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 fbe6 	bl	801253c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f042 0208 	orr.w	r2, r2, #8
 8011d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f022 0204 	bic.w	r2, r2, #4
 8011d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	691a      	ldr	r2, [r3, #16]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	430a      	orrs	r2, r1
 8011da0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011da2:	e023      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68b9      	ldr	r1, [r7, #8]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fc2a 	bl	8012604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011dbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011dce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	021a      	lsls	r2, r3, #8
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	430a      	orrs	r2, r1
 8011de2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011de4:	e002      	b.n	8011dec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011de6:	2301      	movs	r3, #1
 8011de8:	75fb      	strb	r3, [r7, #23]
      break;
 8011dea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop

08011e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d101      	bne.n	8011e1c <HAL_TIM_ConfigClockSource+0x1c>
 8011e18:	2302      	movs	r3, #2
 8011e1a:	e0dc      	b.n	8011fd6 <HAL_TIM_ConfigClockSource+0x1d6>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2202      	movs	r2, #2
 8011e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	689b      	ldr	r3, [r3, #8]
 8011e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	4b6a      	ldr	r3, [pc, #424]	; (8011fe0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011e38:	4013      	ands	r3, r2
 8011e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	68ba      	ldr	r2, [r7, #8]
 8011e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	4a64      	ldr	r2, [pc, #400]	; (8011fe4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	f000 80a9 	beq.w	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011e58:	4a62      	ldr	r2, [pc, #392]	; (8011fe4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	f200 80ae 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011e60:	4a61      	ldr	r2, [pc, #388]	; (8011fe8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011e62:	4293      	cmp	r3, r2
 8011e64:	f000 80a1 	beq.w	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011e68:	4a5f      	ldr	r2, [pc, #380]	; (8011fe8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	f200 80a6 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011e70:	4a5e      	ldr	r2, [pc, #376]	; (8011fec <HAL_TIM_ConfigClockSource+0x1ec>)
 8011e72:	4293      	cmp	r3, r2
 8011e74:	f000 8099 	beq.w	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011e78:	4a5c      	ldr	r2, [pc, #368]	; (8011fec <HAL_TIM_ConfigClockSource+0x1ec>)
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	f200 809e 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011e80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011e84:	f000 8091 	beq.w	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011e88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011e8c:	f200 8096 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e94:	f000 8089 	beq.w	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e9c:	f200 808e 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ea4:	d03e      	beq.n	8011f24 <HAL_TIM_ConfigClockSource+0x124>
 8011ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011eaa:	f200 8087 	bhi.w	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eb2:	f000 8086 	beq.w	8011fc2 <HAL_TIM_ConfigClockSource+0x1c2>
 8011eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eba:	d87f      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ebc:	2b70      	cmp	r3, #112	; 0x70
 8011ebe:	d01a      	beq.n	8011ef6 <HAL_TIM_ConfigClockSource+0xf6>
 8011ec0:	2b70      	cmp	r3, #112	; 0x70
 8011ec2:	d87b      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ec4:	2b60      	cmp	r3, #96	; 0x60
 8011ec6:	d050      	beq.n	8011f6a <HAL_TIM_ConfigClockSource+0x16a>
 8011ec8:	2b60      	cmp	r3, #96	; 0x60
 8011eca:	d877      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ecc:	2b50      	cmp	r3, #80	; 0x50
 8011ece:	d03c      	beq.n	8011f4a <HAL_TIM_ConfigClockSource+0x14a>
 8011ed0:	2b50      	cmp	r3, #80	; 0x50
 8011ed2:	d873      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ed4:	2b40      	cmp	r3, #64	; 0x40
 8011ed6:	d058      	beq.n	8011f8a <HAL_TIM_ConfigClockSource+0x18a>
 8011ed8:	2b40      	cmp	r3, #64	; 0x40
 8011eda:	d86f      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011edc:	2b30      	cmp	r3, #48	; 0x30
 8011ede:	d064      	beq.n	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011ee0:	2b30      	cmp	r3, #48	; 0x30
 8011ee2:	d86b      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011ee4:	2b20      	cmp	r3, #32
 8011ee6:	d060      	beq.n	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011ee8:	2b20      	cmp	r3, #32
 8011eea:	d867      	bhi.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d05c      	beq.n	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011ef0:	2b10      	cmp	r3, #16
 8011ef2:	d05a      	beq.n	8011faa <HAL_TIM_ConfigClockSource+0x1aa>
 8011ef4:	e062      	b.n	8011fbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011f06:	f000 fc61 	bl	80127cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	609a      	str	r2, [r3, #8]
      break;
 8011f22:	e04f      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011f34:	f000 fc4a 	bl	80127cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	689a      	ldr	r2, [r3, #8]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f46:	609a      	str	r2, [r3, #8]
      break;
 8011f48:	e03c      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f56:	461a      	mov	r2, r3
 8011f58:	f000 fbba 	bl	80126d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2150      	movs	r1, #80	; 0x50
 8011f62:	4618      	mov	r0, r3
 8011f64:	f000 fc14 	bl	8012790 <TIM_ITRx_SetConfig>
      break;
 8011f68:	e02c      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011f76:	461a      	mov	r2, r3
 8011f78:	f000 fbd9 	bl	801272e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2160      	movs	r1, #96	; 0x60
 8011f82:	4618      	mov	r0, r3
 8011f84:	f000 fc04 	bl	8012790 <TIM_ITRx_SetConfig>
      break;
 8011f88:	e01c      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011f96:	461a      	mov	r2, r3
 8011f98:	f000 fb9a 	bl	80126d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2140      	movs	r1, #64	; 0x40
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f000 fbf4 	bl	8012790 <TIM_ITRx_SetConfig>
      break;
 8011fa8:	e00c      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	f000 fbeb 	bl	8012790 <TIM_ITRx_SetConfig>
      break;
 8011fba:	e003      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8011fc0:	e000      	b.n	8011fc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	ffceff88 	.word	0xffceff88
 8011fe4:	00100040 	.word	0x00100040
 8011fe8:	00100030 	.word	0x00100030
 8011fec:	00100020 	.word	0x00100020

08011ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4a40      	ldr	r2, [pc, #256]	; (8012104 <TIM_Base_SetConfig+0x114>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d013      	beq.n	8012030 <TIM_Base_SetConfig+0x40>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801200e:	d00f      	beq.n	8012030 <TIM_Base_SetConfig+0x40>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	4a3d      	ldr	r2, [pc, #244]	; (8012108 <TIM_Base_SetConfig+0x118>)
 8012014:	4293      	cmp	r3, r2
 8012016:	d00b      	beq.n	8012030 <TIM_Base_SetConfig+0x40>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	4a3c      	ldr	r2, [pc, #240]	; (801210c <TIM_Base_SetConfig+0x11c>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d007      	beq.n	8012030 <TIM_Base_SetConfig+0x40>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	4a3b      	ldr	r2, [pc, #236]	; (8012110 <TIM_Base_SetConfig+0x120>)
 8012024:	4293      	cmp	r3, r2
 8012026:	d003      	beq.n	8012030 <TIM_Base_SetConfig+0x40>
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	4a3a      	ldr	r2, [pc, #232]	; (8012114 <TIM_Base_SetConfig+0x124>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d108      	bne.n	8012042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	4313      	orrs	r3, r2
 8012040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	4a2f      	ldr	r2, [pc, #188]	; (8012104 <TIM_Base_SetConfig+0x114>)
 8012046:	4293      	cmp	r3, r2
 8012048:	d01f      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012050:	d01b      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	4a2c      	ldr	r2, [pc, #176]	; (8012108 <TIM_Base_SetConfig+0x118>)
 8012056:	4293      	cmp	r3, r2
 8012058:	d017      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	4a2b      	ldr	r2, [pc, #172]	; (801210c <TIM_Base_SetConfig+0x11c>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d013      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4a2a      	ldr	r2, [pc, #168]	; (8012110 <TIM_Base_SetConfig+0x120>)
 8012066:	4293      	cmp	r3, r2
 8012068:	d00f      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	4a29      	ldr	r2, [pc, #164]	; (8012114 <TIM_Base_SetConfig+0x124>)
 801206e:	4293      	cmp	r3, r2
 8012070:	d00b      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	4a28      	ldr	r2, [pc, #160]	; (8012118 <TIM_Base_SetConfig+0x128>)
 8012076:	4293      	cmp	r3, r2
 8012078:	d007      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	4a27      	ldr	r2, [pc, #156]	; (801211c <TIM_Base_SetConfig+0x12c>)
 801207e:	4293      	cmp	r3, r2
 8012080:	d003      	beq.n	801208a <TIM_Base_SetConfig+0x9a>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4a26      	ldr	r2, [pc, #152]	; (8012120 <TIM_Base_SetConfig+0x130>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d108      	bne.n	801209c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	4313      	orrs	r3, r2
 801209a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	695b      	ldr	r3, [r3, #20]
 80120a6:	4313      	orrs	r3, r2
 80120a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68fa      	ldr	r2, [r7, #12]
 80120ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	689a      	ldr	r2, [r3, #8]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	4a10      	ldr	r2, [pc, #64]	; (8012104 <TIM_Base_SetConfig+0x114>)
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d00f      	beq.n	80120e8 <TIM_Base_SetConfig+0xf8>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	4a12      	ldr	r2, [pc, #72]	; (8012114 <TIM_Base_SetConfig+0x124>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d00b      	beq.n	80120e8 <TIM_Base_SetConfig+0xf8>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	4a11      	ldr	r2, [pc, #68]	; (8012118 <TIM_Base_SetConfig+0x128>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d007      	beq.n	80120e8 <TIM_Base_SetConfig+0xf8>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	4a10      	ldr	r2, [pc, #64]	; (801211c <TIM_Base_SetConfig+0x12c>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d003      	beq.n	80120e8 <TIM_Base_SetConfig+0xf8>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	4a0f      	ldr	r2, [pc, #60]	; (8012120 <TIM_Base_SetConfig+0x130>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d103      	bne.n	80120f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	691a      	ldr	r2, [r3, #16]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2201      	movs	r2, #1
 80120f4:	615a      	str	r2, [r3, #20]
}
 80120f6:	bf00      	nop
 80120f8:	3714      	adds	r7, #20
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	40010000 	.word	0x40010000
 8012108:	40000400 	.word	0x40000400
 801210c:	40000800 	.word	0x40000800
 8012110:	40000c00 	.word	0x40000c00
 8012114:	40010400 	.word	0x40010400
 8012118:	40014000 	.word	0x40014000
 801211c:	40014400 	.word	0x40014400
 8012120:	40014800 	.word	0x40014800

08012124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012124:	b480      	push	{r7}
 8012126:	b087      	sub	sp, #28
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6a1b      	ldr	r3, [r3, #32]
 8012132:	f023 0201 	bic.w	r2, r3, #1
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6a1b      	ldr	r3, [r3, #32]
 801213e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	699b      	ldr	r3, [r3, #24]
 801214a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801214c:	68fa      	ldr	r2, [r7, #12]
 801214e:	4b37      	ldr	r3, [pc, #220]	; (801222c <TIM_OC1_SetConfig+0x108>)
 8012150:	4013      	ands	r3, r2
 8012152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f023 0303 	bic.w	r3, r3, #3
 801215a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	4313      	orrs	r3, r2
 8012164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	f023 0302 	bic.w	r3, r3, #2
 801216c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	4313      	orrs	r3, r2
 8012176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4a2d      	ldr	r2, [pc, #180]	; (8012230 <TIM_OC1_SetConfig+0x10c>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d00f      	beq.n	80121a0 <TIM_OC1_SetConfig+0x7c>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4a2c      	ldr	r2, [pc, #176]	; (8012234 <TIM_OC1_SetConfig+0x110>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d00b      	beq.n	80121a0 <TIM_OC1_SetConfig+0x7c>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a2b      	ldr	r2, [pc, #172]	; (8012238 <TIM_OC1_SetConfig+0x114>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d007      	beq.n	80121a0 <TIM_OC1_SetConfig+0x7c>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	4a2a      	ldr	r2, [pc, #168]	; (801223c <TIM_OC1_SetConfig+0x118>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d003      	beq.n	80121a0 <TIM_OC1_SetConfig+0x7c>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4a29      	ldr	r2, [pc, #164]	; (8012240 <TIM_OC1_SetConfig+0x11c>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d10c      	bne.n	80121ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f023 0308 	bic.w	r3, r3, #8
 80121a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	697a      	ldr	r2, [r7, #20]
 80121ae:	4313      	orrs	r3, r2
 80121b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	f023 0304 	bic.w	r3, r3, #4
 80121b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4a1c      	ldr	r2, [pc, #112]	; (8012230 <TIM_OC1_SetConfig+0x10c>)
 80121be:	4293      	cmp	r3, r2
 80121c0:	d00f      	beq.n	80121e2 <TIM_OC1_SetConfig+0xbe>
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4a1b      	ldr	r2, [pc, #108]	; (8012234 <TIM_OC1_SetConfig+0x110>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d00b      	beq.n	80121e2 <TIM_OC1_SetConfig+0xbe>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4a1a      	ldr	r2, [pc, #104]	; (8012238 <TIM_OC1_SetConfig+0x114>)
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d007      	beq.n	80121e2 <TIM_OC1_SetConfig+0xbe>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4a19      	ldr	r2, [pc, #100]	; (801223c <TIM_OC1_SetConfig+0x118>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d003      	beq.n	80121e2 <TIM_OC1_SetConfig+0xbe>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4a18      	ldr	r2, [pc, #96]	; (8012240 <TIM_OC1_SetConfig+0x11c>)
 80121de:	4293      	cmp	r3, r2
 80121e0:	d111      	bne.n	8012206 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80121f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	695b      	ldr	r3, [r3, #20]
 80121f6:	693a      	ldr	r2, [r7, #16]
 80121f8:	4313      	orrs	r3, r2
 80121fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	699b      	ldr	r3, [r3, #24]
 8012200:	693a      	ldr	r2, [r7, #16]
 8012202:	4313      	orrs	r3, r2
 8012204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	693a      	ldr	r2, [r7, #16]
 801220a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	697a      	ldr	r2, [r7, #20]
 801221e:	621a      	str	r2, [r3, #32]
}
 8012220:	bf00      	nop
 8012222:	371c      	adds	r7, #28
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	fffeff8f 	.word	0xfffeff8f
 8012230:	40010000 	.word	0x40010000
 8012234:	40010400 	.word	0x40010400
 8012238:	40014000 	.word	0x40014000
 801223c:	40014400 	.word	0x40014400
 8012240:	40014800 	.word	0x40014800

08012244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012244:	b480      	push	{r7}
 8012246:	b087      	sub	sp, #28
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6a1b      	ldr	r3, [r3, #32]
 8012252:	f023 0210 	bic.w	r2, r3, #16
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6a1b      	ldr	r3, [r3, #32]
 801225e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	699b      	ldr	r3, [r3, #24]
 801226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	4b34      	ldr	r3, [pc, #208]	; (8012340 <TIM_OC2_SetConfig+0xfc>)
 8012270:	4013      	ands	r3, r2
 8012272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801227a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	021b      	lsls	r3, r3, #8
 8012282:	68fa      	ldr	r2, [r7, #12]
 8012284:	4313      	orrs	r3, r2
 8012286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	f023 0320 	bic.w	r3, r3, #32
 801228e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	011b      	lsls	r3, r3, #4
 8012296:	697a      	ldr	r2, [r7, #20]
 8012298:	4313      	orrs	r3, r2
 801229a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	4a29      	ldr	r2, [pc, #164]	; (8012344 <TIM_OC2_SetConfig+0x100>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d003      	beq.n	80122ac <TIM_OC2_SetConfig+0x68>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	4a28      	ldr	r2, [pc, #160]	; (8012348 <TIM_OC2_SetConfig+0x104>)
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d10d      	bne.n	80122c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	011b      	lsls	r3, r3, #4
 80122ba:	697a      	ldr	r2, [r7, #20]
 80122bc:	4313      	orrs	r3, r2
 80122be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4a1e      	ldr	r2, [pc, #120]	; (8012344 <TIM_OC2_SetConfig+0x100>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d00f      	beq.n	80122f0 <TIM_OC2_SetConfig+0xac>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	4a1d      	ldr	r2, [pc, #116]	; (8012348 <TIM_OC2_SetConfig+0x104>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d00b      	beq.n	80122f0 <TIM_OC2_SetConfig+0xac>
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	4a1c      	ldr	r2, [pc, #112]	; (801234c <TIM_OC2_SetConfig+0x108>)
 80122dc:	4293      	cmp	r3, r2
 80122de:	d007      	beq.n	80122f0 <TIM_OC2_SetConfig+0xac>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4a1b      	ldr	r2, [pc, #108]	; (8012350 <TIM_OC2_SetConfig+0x10c>)
 80122e4:	4293      	cmp	r3, r2
 80122e6:	d003      	beq.n	80122f0 <TIM_OC2_SetConfig+0xac>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	4a1a      	ldr	r2, [pc, #104]	; (8012354 <TIM_OC2_SetConfig+0x110>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d113      	bne.n	8012318 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80122f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	695b      	ldr	r3, [r3, #20]
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	693a      	ldr	r2, [r7, #16]
 8012308:	4313      	orrs	r3, r2
 801230a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	699b      	ldr	r3, [r3, #24]
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	693a      	ldr	r2, [r7, #16]
 8012314:	4313      	orrs	r3, r2
 8012316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	693a      	ldr	r2, [r7, #16]
 801231c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	685a      	ldr	r2, [r3, #4]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	697a      	ldr	r2, [r7, #20]
 8012330:	621a      	str	r2, [r3, #32]
}
 8012332:	bf00      	nop
 8012334:	371c      	adds	r7, #28
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr
 801233e:	bf00      	nop
 8012340:	feff8fff 	.word	0xfeff8fff
 8012344:	40010000 	.word	0x40010000
 8012348:	40010400 	.word	0x40010400
 801234c:	40014000 	.word	0x40014000
 8012350:	40014400 	.word	0x40014400
 8012354:	40014800 	.word	0x40014800

08012358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012358:	b480      	push	{r7}
 801235a:	b087      	sub	sp, #28
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6a1b      	ldr	r3, [r3, #32]
 8012372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	69db      	ldr	r3, [r3, #28]
 801237e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	4b33      	ldr	r3, [pc, #204]	; (8012450 <TIM_OC3_SetConfig+0xf8>)
 8012384:	4013      	ands	r3, r2
 8012386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f023 0303 	bic.w	r3, r3, #3
 801238e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	68fa      	ldr	r2, [r7, #12]
 8012396:	4313      	orrs	r3, r2
 8012398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80123a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	689b      	ldr	r3, [r3, #8]
 80123a6:	021b      	lsls	r3, r3, #8
 80123a8:	697a      	ldr	r2, [r7, #20]
 80123aa:	4313      	orrs	r3, r2
 80123ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a28      	ldr	r2, [pc, #160]	; (8012454 <TIM_OC3_SetConfig+0xfc>)
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d003      	beq.n	80123be <TIM_OC3_SetConfig+0x66>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4a27      	ldr	r2, [pc, #156]	; (8012458 <TIM_OC3_SetConfig+0x100>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d10d      	bne.n	80123da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80123c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	021b      	lsls	r3, r3, #8
 80123cc:	697a      	ldr	r2, [r7, #20]
 80123ce:	4313      	orrs	r3, r2
 80123d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80123d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4a1d      	ldr	r2, [pc, #116]	; (8012454 <TIM_OC3_SetConfig+0xfc>)
 80123de:	4293      	cmp	r3, r2
 80123e0:	d00f      	beq.n	8012402 <TIM_OC3_SetConfig+0xaa>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4a1c      	ldr	r2, [pc, #112]	; (8012458 <TIM_OC3_SetConfig+0x100>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d00b      	beq.n	8012402 <TIM_OC3_SetConfig+0xaa>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4a1b      	ldr	r2, [pc, #108]	; (801245c <TIM_OC3_SetConfig+0x104>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d007      	beq.n	8012402 <TIM_OC3_SetConfig+0xaa>
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	4a1a      	ldr	r2, [pc, #104]	; (8012460 <TIM_OC3_SetConfig+0x108>)
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d003      	beq.n	8012402 <TIM_OC3_SetConfig+0xaa>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4a19      	ldr	r2, [pc, #100]	; (8012464 <TIM_OC3_SetConfig+0x10c>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d113      	bne.n	801242a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	695b      	ldr	r3, [r3, #20]
 8012416:	011b      	lsls	r3, r3, #4
 8012418:	693a      	ldr	r2, [r7, #16]
 801241a:	4313      	orrs	r3, r2
 801241c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	699b      	ldr	r3, [r3, #24]
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	693a      	ldr	r2, [r7, #16]
 8012426:	4313      	orrs	r3, r2
 8012428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	693a      	ldr	r2, [r7, #16]
 801242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	685a      	ldr	r2, [r3, #4]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	697a      	ldr	r2, [r7, #20]
 8012442:	621a      	str	r2, [r3, #32]
}
 8012444:	bf00      	nop
 8012446:	371c      	adds	r7, #28
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr
 8012450:	fffeff8f 	.word	0xfffeff8f
 8012454:	40010000 	.word	0x40010000
 8012458:	40010400 	.word	0x40010400
 801245c:	40014000 	.word	0x40014000
 8012460:	40014400 	.word	0x40014400
 8012464:	40014800 	.word	0x40014800

08012468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012468:	b480      	push	{r7}
 801246a:	b087      	sub	sp, #28
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6a1b      	ldr	r3, [r3, #32]
 8012476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6a1b      	ldr	r3, [r3, #32]
 8012482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	69db      	ldr	r3, [r3, #28]
 801248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	4b24      	ldr	r3, [pc, #144]	; (8012524 <TIM_OC4_SetConfig+0xbc>)
 8012494:	4013      	ands	r3, r2
 8012496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801249e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	021b      	lsls	r3, r3, #8
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80124b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	031b      	lsls	r3, r3, #12
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	4313      	orrs	r3, r2
 80124be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	4a19      	ldr	r2, [pc, #100]	; (8012528 <TIM_OC4_SetConfig+0xc0>)
 80124c4:	4293      	cmp	r3, r2
 80124c6:	d00f      	beq.n	80124e8 <TIM_OC4_SetConfig+0x80>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	4a18      	ldr	r2, [pc, #96]	; (801252c <TIM_OC4_SetConfig+0xc4>)
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d00b      	beq.n	80124e8 <TIM_OC4_SetConfig+0x80>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	4a17      	ldr	r2, [pc, #92]	; (8012530 <TIM_OC4_SetConfig+0xc8>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d007      	beq.n	80124e8 <TIM_OC4_SetConfig+0x80>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	4a16      	ldr	r2, [pc, #88]	; (8012534 <TIM_OC4_SetConfig+0xcc>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d003      	beq.n	80124e8 <TIM_OC4_SetConfig+0x80>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	4a15      	ldr	r2, [pc, #84]	; (8012538 <TIM_OC4_SetConfig+0xd0>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d109      	bne.n	80124fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80124ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	695b      	ldr	r3, [r3, #20]
 80124f4:	019b      	lsls	r3, r3, #6
 80124f6:	697a      	ldr	r2, [r7, #20]
 80124f8:	4313      	orrs	r3, r2
 80124fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	697a      	ldr	r2, [r7, #20]
 8012500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68fa      	ldr	r2, [r7, #12]
 8012506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	693a      	ldr	r2, [r7, #16]
 8012514:	621a      	str	r2, [r3, #32]
}
 8012516:	bf00      	nop
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	feff8fff 	.word	0xfeff8fff
 8012528:	40010000 	.word	0x40010000
 801252c:	40010400 	.word	0x40010400
 8012530:	40014000 	.word	0x40014000
 8012534:	40014400 	.word	0x40014400
 8012538:	40014800 	.word	0x40014800

0801253c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801253c:	b480      	push	{r7}
 801253e:	b087      	sub	sp, #28
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6a1b      	ldr	r3, [r3, #32]
 801254a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6a1b      	ldr	r3, [r3, #32]
 8012556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	4b21      	ldr	r3, [pc, #132]	; (80125ec <TIM_OC5_SetConfig+0xb0>)
 8012568:	4013      	ands	r3, r2
 801256a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	4313      	orrs	r3, r2
 8012574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801257c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	689b      	ldr	r3, [r3, #8]
 8012582:	041b      	lsls	r3, r3, #16
 8012584:	693a      	ldr	r2, [r7, #16]
 8012586:	4313      	orrs	r3, r2
 8012588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4a18      	ldr	r2, [pc, #96]	; (80125f0 <TIM_OC5_SetConfig+0xb4>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d00f      	beq.n	80125b2 <TIM_OC5_SetConfig+0x76>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	4a17      	ldr	r2, [pc, #92]	; (80125f4 <TIM_OC5_SetConfig+0xb8>)
 8012596:	4293      	cmp	r3, r2
 8012598:	d00b      	beq.n	80125b2 <TIM_OC5_SetConfig+0x76>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4a16      	ldr	r2, [pc, #88]	; (80125f8 <TIM_OC5_SetConfig+0xbc>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d007      	beq.n	80125b2 <TIM_OC5_SetConfig+0x76>
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4a15      	ldr	r2, [pc, #84]	; (80125fc <TIM_OC5_SetConfig+0xc0>)
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d003      	beq.n	80125b2 <TIM_OC5_SetConfig+0x76>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4a14      	ldr	r2, [pc, #80]	; (8012600 <TIM_OC5_SetConfig+0xc4>)
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d109      	bne.n	80125c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80125b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	695b      	ldr	r3, [r3, #20]
 80125be:	021b      	lsls	r3, r3, #8
 80125c0:	697a      	ldr	r2, [r7, #20]
 80125c2:	4313      	orrs	r3, r2
 80125c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	697a      	ldr	r2, [r7, #20]
 80125ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	68fa      	ldr	r2, [r7, #12]
 80125d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	685a      	ldr	r2, [r3, #4]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	693a      	ldr	r2, [r7, #16]
 80125de:	621a      	str	r2, [r3, #32]
}
 80125e0:	bf00      	nop
 80125e2:	371c      	adds	r7, #28
 80125e4:	46bd      	mov	sp, r7
 80125e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ea:	4770      	bx	lr
 80125ec:	fffeff8f 	.word	0xfffeff8f
 80125f0:	40010000 	.word	0x40010000
 80125f4:	40010400 	.word	0x40010400
 80125f8:	40014000 	.word	0x40014000
 80125fc:	40014400 	.word	0x40014400
 8012600:	40014800 	.word	0x40014800

08012604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012604:	b480      	push	{r7}
 8012606:	b087      	sub	sp, #28
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
 801260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a1b      	ldr	r3, [r3, #32]
 8012612:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a1b      	ldr	r3, [r3, #32]
 801261e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801262a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	4b22      	ldr	r3, [pc, #136]	; (80126b8 <TIM_OC6_SetConfig+0xb4>)
 8012630:	4013      	ands	r3, r2
 8012632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	021b      	lsls	r3, r3, #8
 801263a:	68fa      	ldr	r2, [r7, #12]
 801263c:	4313      	orrs	r3, r2
 801263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	051b      	lsls	r3, r3, #20
 801264e:	693a      	ldr	r2, [r7, #16]
 8012650:	4313      	orrs	r3, r2
 8012652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4a19      	ldr	r2, [pc, #100]	; (80126bc <TIM_OC6_SetConfig+0xb8>)
 8012658:	4293      	cmp	r3, r2
 801265a:	d00f      	beq.n	801267c <TIM_OC6_SetConfig+0x78>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	4a18      	ldr	r2, [pc, #96]	; (80126c0 <TIM_OC6_SetConfig+0xbc>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d00b      	beq.n	801267c <TIM_OC6_SetConfig+0x78>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4a17      	ldr	r2, [pc, #92]	; (80126c4 <TIM_OC6_SetConfig+0xc0>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d007      	beq.n	801267c <TIM_OC6_SetConfig+0x78>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a16      	ldr	r2, [pc, #88]	; (80126c8 <TIM_OC6_SetConfig+0xc4>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d003      	beq.n	801267c <TIM_OC6_SetConfig+0x78>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a15      	ldr	r2, [pc, #84]	; (80126cc <TIM_OC6_SetConfig+0xc8>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d109      	bne.n	8012690 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	695b      	ldr	r3, [r3, #20]
 8012688:	029b      	lsls	r3, r3, #10
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	4313      	orrs	r3, r2
 801268e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	697a      	ldr	r2, [r7, #20]
 8012694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	685a      	ldr	r2, [r3, #4]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	693a      	ldr	r2, [r7, #16]
 80126a8:	621a      	str	r2, [r3, #32]
}
 80126aa:	bf00      	nop
 80126ac:	371c      	adds	r7, #28
 80126ae:	46bd      	mov	sp, r7
 80126b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	feff8fff 	.word	0xfeff8fff
 80126bc:	40010000 	.word	0x40010000
 80126c0:	40010400 	.word	0x40010400
 80126c4:	40014000 	.word	0x40014000
 80126c8:	40014400 	.word	0x40014400
 80126cc:	40014800 	.word	0x40014800

080126d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b087      	sub	sp, #28
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6a1b      	ldr	r3, [r3, #32]
 80126e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	f023 0201 	bic.w	r2, r3, #1
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	699b      	ldr	r3, [r3, #24]
 80126f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80126fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	011b      	lsls	r3, r3, #4
 8012700:	693a      	ldr	r2, [r7, #16]
 8012702:	4313      	orrs	r3, r2
 8012704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	f023 030a 	bic.w	r3, r3, #10
 801270c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801270e:	697a      	ldr	r2, [r7, #20]
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	4313      	orrs	r3, r2
 8012714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	693a      	ldr	r2, [r7, #16]
 801271a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	697a      	ldr	r2, [r7, #20]
 8012720:	621a      	str	r2, [r3, #32]
}
 8012722:	bf00      	nop
 8012724:	371c      	adds	r7, #28
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr

0801272e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801272e:	b480      	push	{r7}
 8012730:	b087      	sub	sp, #28
 8012732:	af00      	add	r7, sp, #0
 8012734:	60f8      	str	r0, [r7, #12]
 8012736:	60b9      	str	r1, [r7, #8]
 8012738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6a1b      	ldr	r3, [r3, #32]
 801273e:	f023 0210 	bic.w	r2, r3, #16
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6a1b      	ldr	r3, [r3, #32]
 8012750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	031b      	lsls	r3, r3, #12
 801275e:	697a      	ldr	r2, [r7, #20]
 8012760:	4313      	orrs	r3, r2
 8012762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801276a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	011b      	lsls	r3, r3, #4
 8012770:	693a      	ldr	r2, [r7, #16]
 8012772:	4313      	orrs	r3, r2
 8012774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	697a      	ldr	r2, [r7, #20]
 801277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	693a      	ldr	r2, [r7, #16]
 8012780:	621a      	str	r2, [r3, #32]
}
 8012782:	bf00      	nop
 8012784:	371c      	adds	r7, #28
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr
	...

08012790 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012790:	b480      	push	{r7}
 8012792:	b085      	sub	sp, #20
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80127a0:	68fa      	ldr	r2, [r7, #12]
 80127a2:	4b09      	ldr	r3, [pc, #36]	; (80127c8 <TIM_ITRx_SetConfig+0x38>)
 80127a4:	4013      	ands	r3, r2
 80127a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80127a8:	683a      	ldr	r2, [r7, #0]
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	4313      	orrs	r3, r2
 80127ae:	f043 0307 	orr.w	r3, r3, #7
 80127b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	68fa      	ldr	r2, [r7, #12]
 80127b8:	609a      	str	r2, [r3, #8]
}
 80127ba:	bf00      	nop
 80127bc:	3714      	adds	r7, #20
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	ffcfff8f 	.word	0xffcfff8f

080127cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b087      	sub	sp, #28
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	607a      	str	r2, [r7, #4]
 80127d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	689b      	ldr	r3, [r3, #8]
 80127de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80127e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	021a      	lsls	r2, r3, #8
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	431a      	orrs	r2, r3
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	4313      	orrs	r3, r2
 80127f4:	697a      	ldr	r2, [r7, #20]
 80127f6:	4313      	orrs	r3, r2
 80127f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	697a      	ldr	r2, [r7, #20]
 80127fe:	609a      	str	r2, [r3, #8]
}
 8012800:	bf00      	nop
 8012802:	371c      	adds	r7, #28
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr

0801280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801281c:	2b01      	cmp	r3, #1
 801281e:	d101      	bne.n	8012824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012820:	2302      	movs	r3, #2
 8012822:	e06d      	b.n	8012900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2201      	movs	r2, #1
 8012828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2202      	movs	r2, #2
 8012830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a30      	ldr	r2, [pc, #192]	; (801290c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d004      	beq.n	8012858 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4a2f      	ldr	r2, [pc, #188]	; (8012910 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d108      	bne.n	801286a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801285e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	4313      	orrs	r3, r2
 8012868:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012870:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	4313      	orrs	r3, r2
 801287a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a20      	ldr	r2, [pc, #128]	; (801290c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d022      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012896:	d01d      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a1d      	ldr	r2, [pc, #116]	; (8012914 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d018      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4a1c      	ldr	r2, [pc, #112]	; (8012918 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d013      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a1a      	ldr	r2, [pc, #104]	; (801291c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d00e      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4a15      	ldr	r2, [pc, #84]	; (8012910 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d009      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4a16      	ldr	r2, [pc, #88]	; (8012920 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d004      	beq.n	80128d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a15      	ldr	r2, [pc, #84]	; (8012924 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d10c      	bne.n	80128ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	4313      	orrs	r3, r2
 80128e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2201      	movs	r2, #1
 80128f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2200      	movs	r2, #0
 80128fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	4618      	mov	r0, r3
 8012902:	3714      	adds	r7, #20
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr
 801290c:	40010000 	.word	0x40010000
 8012910:	40010400 	.word	0x40010400
 8012914:	40000400 	.word	0x40000400
 8012918:	40000800 	.word	0x40000800
 801291c:	40000c00 	.word	0x40000c00
 8012920:	40001800 	.word	0x40001800
 8012924:	40014000 	.word	0x40014000

08012928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012928:	b480      	push	{r7}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012932:	2300      	movs	r3, #0
 8012934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801293c:	2b01      	cmp	r3, #1
 801293e:	d101      	bne.n	8012944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012940:	2302      	movs	r3, #2
 8012942:	e065      	b.n	8012a10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	4313      	orrs	r3, r2
 8012958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	4313      	orrs	r3, r2
 8012966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	4313      	orrs	r3, r2
 8012974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4313      	orrs	r3, r2
 8012982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	691b      	ldr	r3, [r3, #16]
 801298e:	4313      	orrs	r3, r2
 8012990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	695b      	ldr	r3, [r3, #20]
 801299c:	4313      	orrs	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129aa:	4313      	orrs	r3, r2
 80129ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	699b      	ldr	r3, [r3, #24]
 80129b8:	041b      	lsls	r3, r3, #16
 80129ba:	4313      	orrs	r3, r2
 80129bc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	4a16      	ldr	r2, [pc, #88]	; (8012a1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d004      	beq.n	80129d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	4a14      	ldr	r2, [pc, #80]	; (8012a20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80129ce:	4293      	cmp	r3, r2
 80129d0:	d115      	bne.n	80129fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129dc:	051b      	lsls	r3, r3, #20
 80129de:	4313      	orrs	r3, r2
 80129e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	4313      	orrs	r3, r2
 80129ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	6a1b      	ldr	r3, [r3, #32]
 80129fa:	4313      	orrs	r3, r2
 80129fc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	68fa      	ldr	r2, [r7, #12]
 8012a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3714      	adds	r7, #20
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr
 8012a1c:	40010000 	.word	0x40010000
 8012a20:	40010400 	.word	0x40010400

08012a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d101      	bne.n	8012a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012a32:	2301      	movs	r3, #1
 8012a34:	e042      	b.n	8012abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d106      	bne.n	8012a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7f1 fb93 	bl	8004174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2224      	movs	r2, #36	; 0x24
 8012a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	f022 0201 	bic.w	r2, r2, #1
 8012a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 f82c 	bl	8012ac4 <UART_SetConfig>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d101      	bne.n	8012a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e022      	b.n	8012abc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d002      	beq.n	8012a84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 fd88 	bl	8013594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	685a      	ldr	r2, [r3, #4]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	689a      	ldr	r2, [r3, #8]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f042 0201 	orr.w	r2, r2, #1
 8012ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f000 fe0f 	bl	80136d8 <UART_CheckIdleState>
 8012aba:	4603      	mov	r3, r0
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ac8:	b092      	sub	sp, #72	; 0x48
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	689a      	ldr	r2, [r3, #8]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	691b      	ldr	r3, [r3, #16]
 8012adc:	431a      	orrs	r2, r3
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	695b      	ldr	r3, [r3, #20]
 8012ae2:	431a      	orrs	r2, r3
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	69db      	ldr	r3, [r3, #28]
 8012ae8:	4313      	orrs	r3, r2
 8012aea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	4bbe      	ldr	r3, [pc, #760]	; (8012dec <UART_SetConfig+0x328>)
 8012af4:	4013      	ands	r3, r2
 8012af6:	697a      	ldr	r2, [r7, #20]
 8012af8:	6812      	ldr	r2, [r2, #0]
 8012afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012afc:	430b      	orrs	r3, r1
 8012afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	68da      	ldr	r2, [r3, #12]
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	430a      	orrs	r2, r1
 8012b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	699b      	ldr	r3, [r3, #24]
 8012b1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	4ab3      	ldr	r2, [pc, #716]	; (8012df0 <UART_SetConfig+0x32c>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d004      	beq.n	8012b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	6a1b      	ldr	r3, [r3, #32]
 8012b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	689a      	ldr	r2, [r3, #8]
 8012b36:	4baf      	ldr	r3, [pc, #700]	; (8012df4 <UART_SetConfig+0x330>)
 8012b38:	4013      	ands	r3, r2
 8012b3a:	697a      	ldr	r2, [r7, #20]
 8012b3c:	6812      	ldr	r2, [r2, #0]
 8012b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b40:	430b      	orrs	r3, r1
 8012b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4a:	f023 010f 	bic.w	r1, r3, #15
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	430a      	orrs	r2, r1
 8012b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	4aa6      	ldr	r2, [pc, #664]	; (8012df8 <UART_SetConfig+0x334>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d177      	bne.n	8012c54 <UART_SetConfig+0x190>
 8012b64:	4ba5      	ldr	r3, [pc, #660]	; (8012dfc <UART_SetConfig+0x338>)
 8012b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012b6c:	2b28      	cmp	r3, #40	; 0x28
 8012b6e:	d86d      	bhi.n	8012c4c <UART_SetConfig+0x188>
 8012b70:	a201      	add	r2, pc, #4	; (adr r2, 8012b78 <UART_SetConfig+0xb4>)
 8012b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b76:	bf00      	nop
 8012b78:	08012c1d 	.word	0x08012c1d
 8012b7c:	08012c4d 	.word	0x08012c4d
 8012b80:	08012c4d 	.word	0x08012c4d
 8012b84:	08012c4d 	.word	0x08012c4d
 8012b88:	08012c4d 	.word	0x08012c4d
 8012b8c:	08012c4d 	.word	0x08012c4d
 8012b90:	08012c4d 	.word	0x08012c4d
 8012b94:	08012c4d 	.word	0x08012c4d
 8012b98:	08012c25 	.word	0x08012c25
 8012b9c:	08012c4d 	.word	0x08012c4d
 8012ba0:	08012c4d 	.word	0x08012c4d
 8012ba4:	08012c4d 	.word	0x08012c4d
 8012ba8:	08012c4d 	.word	0x08012c4d
 8012bac:	08012c4d 	.word	0x08012c4d
 8012bb0:	08012c4d 	.word	0x08012c4d
 8012bb4:	08012c4d 	.word	0x08012c4d
 8012bb8:	08012c2d 	.word	0x08012c2d
 8012bbc:	08012c4d 	.word	0x08012c4d
 8012bc0:	08012c4d 	.word	0x08012c4d
 8012bc4:	08012c4d 	.word	0x08012c4d
 8012bc8:	08012c4d 	.word	0x08012c4d
 8012bcc:	08012c4d 	.word	0x08012c4d
 8012bd0:	08012c4d 	.word	0x08012c4d
 8012bd4:	08012c4d 	.word	0x08012c4d
 8012bd8:	08012c35 	.word	0x08012c35
 8012bdc:	08012c4d 	.word	0x08012c4d
 8012be0:	08012c4d 	.word	0x08012c4d
 8012be4:	08012c4d 	.word	0x08012c4d
 8012be8:	08012c4d 	.word	0x08012c4d
 8012bec:	08012c4d 	.word	0x08012c4d
 8012bf0:	08012c4d 	.word	0x08012c4d
 8012bf4:	08012c4d 	.word	0x08012c4d
 8012bf8:	08012c3d 	.word	0x08012c3d
 8012bfc:	08012c4d 	.word	0x08012c4d
 8012c00:	08012c4d 	.word	0x08012c4d
 8012c04:	08012c4d 	.word	0x08012c4d
 8012c08:	08012c4d 	.word	0x08012c4d
 8012c0c:	08012c4d 	.word	0x08012c4d
 8012c10:	08012c4d 	.word	0x08012c4d
 8012c14:	08012c4d 	.word	0x08012c4d
 8012c18:	08012c45 	.word	0x08012c45
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c22:	e222      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c24:	2304      	movs	r3, #4
 8012c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c2a:	e21e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c2c:	2308      	movs	r3, #8
 8012c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c32:	e21a      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c34:	2310      	movs	r3, #16
 8012c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c3a:	e216      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c3c:	2320      	movs	r3, #32
 8012c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c42:	e212      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c44:	2340      	movs	r3, #64	; 0x40
 8012c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c4a:	e20e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c4c:	2380      	movs	r3, #128	; 0x80
 8012c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c52:	e20a      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a69      	ldr	r2, [pc, #420]	; (8012e00 <UART_SetConfig+0x33c>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d130      	bne.n	8012cc0 <UART_SetConfig+0x1fc>
 8012c5e:	4b67      	ldr	r3, [pc, #412]	; (8012dfc <UART_SetConfig+0x338>)
 8012c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c62:	f003 0307 	and.w	r3, r3, #7
 8012c66:	2b05      	cmp	r3, #5
 8012c68:	d826      	bhi.n	8012cb8 <UART_SetConfig+0x1f4>
 8012c6a:	a201      	add	r2, pc, #4	; (adr r2, 8012c70 <UART_SetConfig+0x1ac>)
 8012c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c70:	08012c89 	.word	0x08012c89
 8012c74:	08012c91 	.word	0x08012c91
 8012c78:	08012c99 	.word	0x08012c99
 8012c7c:	08012ca1 	.word	0x08012ca1
 8012c80:	08012ca9 	.word	0x08012ca9
 8012c84:	08012cb1 	.word	0x08012cb1
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c8e:	e1ec      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c90:	2304      	movs	r3, #4
 8012c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c96:	e1e8      	b.n	801306a <UART_SetConfig+0x5a6>
 8012c98:	2308      	movs	r3, #8
 8012c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c9e:	e1e4      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ca0:	2310      	movs	r3, #16
 8012ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ca6:	e1e0      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ca8:	2320      	movs	r3, #32
 8012caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cae:	e1dc      	b.n	801306a <UART_SetConfig+0x5a6>
 8012cb0:	2340      	movs	r3, #64	; 0x40
 8012cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cb6:	e1d8      	b.n	801306a <UART_SetConfig+0x5a6>
 8012cb8:	2380      	movs	r3, #128	; 0x80
 8012cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cbe:	e1d4      	b.n	801306a <UART_SetConfig+0x5a6>
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a4f      	ldr	r2, [pc, #316]	; (8012e04 <UART_SetConfig+0x340>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d130      	bne.n	8012d2c <UART_SetConfig+0x268>
 8012cca:	4b4c      	ldr	r3, [pc, #304]	; (8012dfc <UART_SetConfig+0x338>)
 8012ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cce:	f003 0307 	and.w	r3, r3, #7
 8012cd2:	2b05      	cmp	r3, #5
 8012cd4:	d826      	bhi.n	8012d24 <UART_SetConfig+0x260>
 8012cd6:	a201      	add	r2, pc, #4	; (adr r2, 8012cdc <UART_SetConfig+0x218>)
 8012cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cdc:	08012cf5 	.word	0x08012cf5
 8012ce0:	08012cfd 	.word	0x08012cfd
 8012ce4:	08012d05 	.word	0x08012d05
 8012ce8:	08012d0d 	.word	0x08012d0d
 8012cec:	08012d15 	.word	0x08012d15
 8012cf0:	08012d1d 	.word	0x08012d1d
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cfa:	e1b6      	b.n	801306a <UART_SetConfig+0x5a6>
 8012cfc:	2304      	movs	r3, #4
 8012cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d02:	e1b2      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d04:	2308      	movs	r3, #8
 8012d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d0a:	e1ae      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d0c:	2310      	movs	r3, #16
 8012d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d12:	e1aa      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d14:	2320      	movs	r3, #32
 8012d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d1a:	e1a6      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d1c:	2340      	movs	r3, #64	; 0x40
 8012d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d22:	e1a2      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d24:	2380      	movs	r3, #128	; 0x80
 8012d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d2a:	e19e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a35      	ldr	r2, [pc, #212]	; (8012e08 <UART_SetConfig+0x344>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d130      	bne.n	8012d98 <UART_SetConfig+0x2d4>
 8012d36:	4b31      	ldr	r3, [pc, #196]	; (8012dfc <UART_SetConfig+0x338>)
 8012d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d3a:	f003 0307 	and.w	r3, r3, #7
 8012d3e:	2b05      	cmp	r3, #5
 8012d40:	d826      	bhi.n	8012d90 <UART_SetConfig+0x2cc>
 8012d42:	a201      	add	r2, pc, #4	; (adr r2, 8012d48 <UART_SetConfig+0x284>)
 8012d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d48:	08012d61 	.word	0x08012d61
 8012d4c:	08012d69 	.word	0x08012d69
 8012d50:	08012d71 	.word	0x08012d71
 8012d54:	08012d79 	.word	0x08012d79
 8012d58:	08012d81 	.word	0x08012d81
 8012d5c:	08012d89 	.word	0x08012d89
 8012d60:	2300      	movs	r3, #0
 8012d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d66:	e180      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d68:	2304      	movs	r3, #4
 8012d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d6e:	e17c      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d70:	2308      	movs	r3, #8
 8012d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d76:	e178      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d78:	2310      	movs	r3, #16
 8012d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d7e:	e174      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d80:	2320      	movs	r3, #32
 8012d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d86:	e170      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d88:	2340      	movs	r3, #64	; 0x40
 8012d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d8e:	e16c      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d90:	2380      	movs	r3, #128	; 0x80
 8012d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d96:	e168      	b.n	801306a <UART_SetConfig+0x5a6>
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a1b      	ldr	r2, [pc, #108]	; (8012e0c <UART_SetConfig+0x348>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d142      	bne.n	8012e28 <UART_SetConfig+0x364>
 8012da2:	4b16      	ldr	r3, [pc, #88]	; (8012dfc <UART_SetConfig+0x338>)
 8012da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012da6:	f003 0307 	and.w	r3, r3, #7
 8012daa:	2b05      	cmp	r3, #5
 8012dac:	d838      	bhi.n	8012e20 <UART_SetConfig+0x35c>
 8012dae:	a201      	add	r2, pc, #4	; (adr r2, 8012db4 <UART_SetConfig+0x2f0>)
 8012db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db4:	08012dcd 	.word	0x08012dcd
 8012db8:	08012dd5 	.word	0x08012dd5
 8012dbc:	08012ddd 	.word	0x08012ddd
 8012dc0:	08012de5 	.word	0x08012de5
 8012dc4:	08012e11 	.word	0x08012e11
 8012dc8:	08012e19 	.word	0x08012e19
 8012dcc:	2300      	movs	r3, #0
 8012dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dd2:	e14a      	b.n	801306a <UART_SetConfig+0x5a6>
 8012dd4:	2304      	movs	r3, #4
 8012dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dda:	e146      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ddc:	2308      	movs	r3, #8
 8012dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012de2:	e142      	b.n	801306a <UART_SetConfig+0x5a6>
 8012de4:	2310      	movs	r3, #16
 8012de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dea:	e13e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012dec:	cfff69f3 	.word	0xcfff69f3
 8012df0:	58000c00 	.word	0x58000c00
 8012df4:	11fff4ff 	.word	0x11fff4ff
 8012df8:	40011000 	.word	0x40011000
 8012dfc:	58024400 	.word	0x58024400
 8012e00:	40004400 	.word	0x40004400
 8012e04:	40004800 	.word	0x40004800
 8012e08:	40004c00 	.word	0x40004c00
 8012e0c:	40005000 	.word	0x40005000
 8012e10:	2320      	movs	r3, #32
 8012e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e16:	e128      	b.n	801306a <UART_SetConfig+0x5a6>
 8012e18:	2340      	movs	r3, #64	; 0x40
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1e:	e124      	b.n	801306a <UART_SetConfig+0x5a6>
 8012e20:	2380      	movs	r3, #128	; 0x80
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e26:	e120      	b.n	801306a <UART_SetConfig+0x5a6>
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4acb      	ldr	r2, [pc, #812]	; (801315c <UART_SetConfig+0x698>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d176      	bne.n	8012f20 <UART_SetConfig+0x45c>
 8012e32:	4bcb      	ldr	r3, [pc, #812]	; (8013160 <UART_SetConfig+0x69c>)
 8012e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012e3a:	2b28      	cmp	r3, #40	; 0x28
 8012e3c:	d86c      	bhi.n	8012f18 <UART_SetConfig+0x454>
 8012e3e:	a201      	add	r2, pc, #4	; (adr r2, 8012e44 <UART_SetConfig+0x380>)
 8012e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e44:	08012ee9 	.word	0x08012ee9
 8012e48:	08012f19 	.word	0x08012f19
 8012e4c:	08012f19 	.word	0x08012f19
 8012e50:	08012f19 	.word	0x08012f19
 8012e54:	08012f19 	.word	0x08012f19
 8012e58:	08012f19 	.word	0x08012f19
 8012e5c:	08012f19 	.word	0x08012f19
 8012e60:	08012f19 	.word	0x08012f19
 8012e64:	08012ef1 	.word	0x08012ef1
 8012e68:	08012f19 	.word	0x08012f19
 8012e6c:	08012f19 	.word	0x08012f19
 8012e70:	08012f19 	.word	0x08012f19
 8012e74:	08012f19 	.word	0x08012f19
 8012e78:	08012f19 	.word	0x08012f19
 8012e7c:	08012f19 	.word	0x08012f19
 8012e80:	08012f19 	.word	0x08012f19
 8012e84:	08012ef9 	.word	0x08012ef9
 8012e88:	08012f19 	.word	0x08012f19
 8012e8c:	08012f19 	.word	0x08012f19
 8012e90:	08012f19 	.word	0x08012f19
 8012e94:	08012f19 	.word	0x08012f19
 8012e98:	08012f19 	.word	0x08012f19
 8012e9c:	08012f19 	.word	0x08012f19
 8012ea0:	08012f19 	.word	0x08012f19
 8012ea4:	08012f01 	.word	0x08012f01
 8012ea8:	08012f19 	.word	0x08012f19
 8012eac:	08012f19 	.word	0x08012f19
 8012eb0:	08012f19 	.word	0x08012f19
 8012eb4:	08012f19 	.word	0x08012f19
 8012eb8:	08012f19 	.word	0x08012f19
 8012ebc:	08012f19 	.word	0x08012f19
 8012ec0:	08012f19 	.word	0x08012f19
 8012ec4:	08012f09 	.word	0x08012f09
 8012ec8:	08012f19 	.word	0x08012f19
 8012ecc:	08012f19 	.word	0x08012f19
 8012ed0:	08012f19 	.word	0x08012f19
 8012ed4:	08012f19 	.word	0x08012f19
 8012ed8:	08012f19 	.word	0x08012f19
 8012edc:	08012f19 	.word	0x08012f19
 8012ee0:	08012f19 	.word	0x08012f19
 8012ee4:	08012f11 	.word	0x08012f11
 8012ee8:	2301      	movs	r3, #1
 8012eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eee:	e0bc      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ef0:	2304      	movs	r3, #4
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ef6:	e0b8      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ef8:	2308      	movs	r3, #8
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012efe:	e0b4      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f00:	2310      	movs	r3, #16
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f06:	e0b0      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f08:	2320      	movs	r3, #32
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0e:	e0ac      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f10:	2340      	movs	r3, #64	; 0x40
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f16:	e0a8      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f18:	2380      	movs	r3, #128	; 0x80
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1e:	e0a4      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4a8f      	ldr	r2, [pc, #572]	; (8013164 <UART_SetConfig+0x6a0>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d130      	bne.n	8012f8c <UART_SetConfig+0x4c8>
 8012f2a:	4b8d      	ldr	r3, [pc, #564]	; (8013160 <UART_SetConfig+0x69c>)
 8012f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f2e:	f003 0307 	and.w	r3, r3, #7
 8012f32:	2b05      	cmp	r3, #5
 8012f34:	d826      	bhi.n	8012f84 <UART_SetConfig+0x4c0>
 8012f36:	a201      	add	r2, pc, #4	; (adr r2, 8012f3c <UART_SetConfig+0x478>)
 8012f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f3c:	08012f55 	.word	0x08012f55
 8012f40:	08012f5d 	.word	0x08012f5d
 8012f44:	08012f65 	.word	0x08012f65
 8012f48:	08012f6d 	.word	0x08012f6d
 8012f4c:	08012f75 	.word	0x08012f75
 8012f50:	08012f7d 	.word	0x08012f7d
 8012f54:	2300      	movs	r3, #0
 8012f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f5a:	e086      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f5c:	2304      	movs	r3, #4
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f62:	e082      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f64:	2308      	movs	r3, #8
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f6a:	e07e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f6c:	2310      	movs	r3, #16
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f72:	e07a      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f74:	2320      	movs	r3, #32
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f7a:	e076      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f7c:	2340      	movs	r3, #64	; 0x40
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e072      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f84:	2380      	movs	r3, #128	; 0x80
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8a:	e06e      	b.n	801306a <UART_SetConfig+0x5a6>
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a75      	ldr	r2, [pc, #468]	; (8013168 <UART_SetConfig+0x6a4>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d130      	bne.n	8012ff8 <UART_SetConfig+0x534>
 8012f96:	4b72      	ldr	r3, [pc, #456]	; (8013160 <UART_SetConfig+0x69c>)
 8012f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f9a:	f003 0307 	and.w	r3, r3, #7
 8012f9e:	2b05      	cmp	r3, #5
 8012fa0:	d826      	bhi.n	8012ff0 <UART_SetConfig+0x52c>
 8012fa2:	a201      	add	r2, pc, #4	; (adr r2, 8012fa8 <UART_SetConfig+0x4e4>)
 8012fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa8:	08012fc1 	.word	0x08012fc1
 8012fac:	08012fc9 	.word	0x08012fc9
 8012fb0:	08012fd1 	.word	0x08012fd1
 8012fb4:	08012fd9 	.word	0x08012fd9
 8012fb8:	08012fe1 	.word	0x08012fe1
 8012fbc:	08012fe9 	.word	0x08012fe9
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fc6:	e050      	b.n	801306a <UART_SetConfig+0x5a6>
 8012fc8:	2304      	movs	r3, #4
 8012fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fce:	e04c      	b.n	801306a <UART_SetConfig+0x5a6>
 8012fd0:	2308      	movs	r3, #8
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fd6:	e048      	b.n	801306a <UART_SetConfig+0x5a6>
 8012fd8:	2310      	movs	r3, #16
 8012fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fde:	e044      	b.n	801306a <UART_SetConfig+0x5a6>
 8012fe0:	2320      	movs	r3, #32
 8012fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fe6:	e040      	b.n	801306a <UART_SetConfig+0x5a6>
 8012fe8:	2340      	movs	r3, #64	; 0x40
 8012fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fee:	e03c      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ff0:	2380      	movs	r3, #128	; 0x80
 8012ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff6:	e038      	b.n	801306a <UART_SetConfig+0x5a6>
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	4a5b      	ldr	r2, [pc, #364]	; (801316c <UART_SetConfig+0x6a8>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d130      	bne.n	8013064 <UART_SetConfig+0x5a0>
 8013002:	4b57      	ldr	r3, [pc, #348]	; (8013160 <UART_SetConfig+0x69c>)
 8013004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013006:	f003 0307 	and.w	r3, r3, #7
 801300a:	2b05      	cmp	r3, #5
 801300c:	d826      	bhi.n	801305c <UART_SetConfig+0x598>
 801300e:	a201      	add	r2, pc, #4	; (adr r2, 8013014 <UART_SetConfig+0x550>)
 8013010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013014:	0801302d 	.word	0x0801302d
 8013018:	08013035 	.word	0x08013035
 801301c:	0801303d 	.word	0x0801303d
 8013020:	08013045 	.word	0x08013045
 8013024:	0801304d 	.word	0x0801304d
 8013028:	08013055 	.word	0x08013055
 801302c:	2302      	movs	r3, #2
 801302e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013032:	e01a      	b.n	801306a <UART_SetConfig+0x5a6>
 8013034:	2304      	movs	r3, #4
 8013036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801303a:	e016      	b.n	801306a <UART_SetConfig+0x5a6>
 801303c:	2308      	movs	r3, #8
 801303e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013042:	e012      	b.n	801306a <UART_SetConfig+0x5a6>
 8013044:	2310      	movs	r3, #16
 8013046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801304a:	e00e      	b.n	801306a <UART_SetConfig+0x5a6>
 801304c:	2320      	movs	r3, #32
 801304e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013052:	e00a      	b.n	801306a <UART_SetConfig+0x5a6>
 8013054:	2340      	movs	r3, #64	; 0x40
 8013056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801305a:	e006      	b.n	801306a <UART_SetConfig+0x5a6>
 801305c:	2380      	movs	r3, #128	; 0x80
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013062:	e002      	b.n	801306a <UART_SetConfig+0x5a6>
 8013064:	2380      	movs	r3, #128	; 0x80
 8013066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	4a3f      	ldr	r2, [pc, #252]	; (801316c <UART_SetConfig+0x6a8>)
 8013070:	4293      	cmp	r3, r2
 8013072:	f040 80f8 	bne.w	8013266 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013076:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801307a:	2b20      	cmp	r3, #32
 801307c:	dc46      	bgt.n	801310c <UART_SetConfig+0x648>
 801307e:	2b02      	cmp	r3, #2
 8013080:	f2c0 8082 	blt.w	8013188 <UART_SetConfig+0x6c4>
 8013084:	3b02      	subs	r3, #2
 8013086:	2b1e      	cmp	r3, #30
 8013088:	d87e      	bhi.n	8013188 <UART_SetConfig+0x6c4>
 801308a:	a201      	add	r2, pc, #4	; (adr r2, 8013090 <UART_SetConfig+0x5cc>)
 801308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013090:	08013113 	.word	0x08013113
 8013094:	08013189 	.word	0x08013189
 8013098:	0801311b 	.word	0x0801311b
 801309c:	08013189 	.word	0x08013189
 80130a0:	08013189 	.word	0x08013189
 80130a4:	08013189 	.word	0x08013189
 80130a8:	0801312b 	.word	0x0801312b
 80130ac:	08013189 	.word	0x08013189
 80130b0:	08013189 	.word	0x08013189
 80130b4:	08013189 	.word	0x08013189
 80130b8:	08013189 	.word	0x08013189
 80130bc:	08013189 	.word	0x08013189
 80130c0:	08013189 	.word	0x08013189
 80130c4:	08013189 	.word	0x08013189
 80130c8:	0801313b 	.word	0x0801313b
 80130cc:	08013189 	.word	0x08013189
 80130d0:	08013189 	.word	0x08013189
 80130d4:	08013189 	.word	0x08013189
 80130d8:	08013189 	.word	0x08013189
 80130dc:	08013189 	.word	0x08013189
 80130e0:	08013189 	.word	0x08013189
 80130e4:	08013189 	.word	0x08013189
 80130e8:	08013189 	.word	0x08013189
 80130ec:	08013189 	.word	0x08013189
 80130f0:	08013189 	.word	0x08013189
 80130f4:	08013189 	.word	0x08013189
 80130f8:	08013189 	.word	0x08013189
 80130fc:	08013189 	.word	0x08013189
 8013100:	08013189 	.word	0x08013189
 8013104:	08013189 	.word	0x08013189
 8013108:	0801317b 	.word	0x0801317b
 801310c:	2b40      	cmp	r3, #64	; 0x40
 801310e:	d037      	beq.n	8013180 <UART_SetConfig+0x6bc>
 8013110:	e03a      	b.n	8013188 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013112:	f7fb fa85 	bl	800e620 <HAL_RCCEx_GetD3PCLK1Freq>
 8013116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013118:	e03c      	b.n	8013194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801311a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801311e:	4618      	mov	r0, r3
 8013120:	f7fb fa94 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013128:	e034      	b.n	8013194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801312a:	f107 0318 	add.w	r3, r7, #24
 801312e:	4618      	mov	r0, r3
 8013130:	f7fb fbe0 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013134:	69fb      	ldr	r3, [r7, #28]
 8013136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013138:	e02c      	b.n	8013194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801313a:	4b09      	ldr	r3, [pc, #36]	; (8013160 <UART_SetConfig+0x69c>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f003 0320 	and.w	r3, r3, #32
 8013142:	2b00      	cmp	r3, #0
 8013144:	d016      	beq.n	8013174 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013146:	4b06      	ldr	r3, [pc, #24]	; (8013160 <UART_SetConfig+0x69c>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	08db      	lsrs	r3, r3, #3
 801314c:	f003 0303 	and.w	r3, r3, #3
 8013150:	4a07      	ldr	r2, [pc, #28]	; (8013170 <UART_SetConfig+0x6ac>)
 8013152:	fa22 f303 	lsr.w	r3, r2, r3
 8013156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013158:	e01c      	b.n	8013194 <UART_SetConfig+0x6d0>
 801315a:	bf00      	nop
 801315c:	40011400 	.word	0x40011400
 8013160:	58024400 	.word	0x58024400
 8013164:	40007800 	.word	0x40007800
 8013168:	40007c00 	.word	0x40007c00
 801316c:	58000c00 	.word	0x58000c00
 8013170:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013174:	4b9d      	ldr	r3, [pc, #628]	; (80133ec <UART_SetConfig+0x928>)
 8013176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013178:	e00c      	b.n	8013194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801317a:	4b9d      	ldr	r3, [pc, #628]	; (80133f0 <UART_SetConfig+0x92c>)
 801317c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801317e:	e009      	b.n	8013194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013186:	e005      	b.n	8013194 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013188:	2300      	movs	r3, #0
 801318a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801318c:	2301      	movs	r3, #1
 801318e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013192:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 81de 	beq.w	8013558 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a0:	4a94      	ldr	r2, [pc, #592]	; (80133f4 <UART_SetConfig+0x930>)
 80131a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131a6:	461a      	mov	r2, r3
 80131a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80131ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	685a      	ldr	r2, [r3, #4]
 80131b4:	4613      	mov	r3, r2
 80131b6:	005b      	lsls	r3, r3, #1
 80131b8:	4413      	add	r3, r2
 80131ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131bc:	429a      	cmp	r2, r3
 80131be:	d305      	bcc.n	80131cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d903      	bls.n	80131d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80131cc:	2301      	movs	r3, #1
 80131ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80131d2:	e1c1      	b.n	8013558 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131d6:	2200      	movs	r2, #0
 80131d8:	60bb      	str	r3, [r7, #8]
 80131da:	60fa      	str	r2, [r7, #12]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e0:	4a84      	ldr	r2, [pc, #528]	; (80133f4 <UART_SetConfig+0x930>)
 80131e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	2200      	movs	r2, #0
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	607a      	str	r2, [r7, #4]
 80131ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80131f6:	f7ed f86f 	bl	80002d8 <__aeabi_uldivmod>
 80131fa:	4602      	mov	r2, r0
 80131fc:	460b      	mov	r3, r1
 80131fe:	4610      	mov	r0, r2
 8013200:	4619      	mov	r1, r3
 8013202:	f04f 0200 	mov.w	r2, #0
 8013206:	f04f 0300 	mov.w	r3, #0
 801320a:	020b      	lsls	r3, r1, #8
 801320c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013210:	0202      	lsls	r2, r0, #8
 8013212:	6979      	ldr	r1, [r7, #20]
 8013214:	6849      	ldr	r1, [r1, #4]
 8013216:	0849      	lsrs	r1, r1, #1
 8013218:	2000      	movs	r0, #0
 801321a:	460c      	mov	r4, r1
 801321c:	4605      	mov	r5, r0
 801321e:	eb12 0804 	adds.w	r8, r2, r4
 8013222:	eb43 0905 	adc.w	r9, r3, r5
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	2200      	movs	r2, #0
 801322c:	469a      	mov	sl, r3
 801322e:	4693      	mov	fp, r2
 8013230:	4652      	mov	r2, sl
 8013232:	465b      	mov	r3, fp
 8013234:	4640      	mov	r0, r8
 8013236:	4649      	mov	r1, r9
 8013238:	f7ed f84e 	bl	80002d8 <__aeabi_uldivmod>
 801323c:	4602      	mov	r2, r0
 801323e:	460b      	mov	r3, r1
 8013240:	4613      	mov	r3, r2
 8013242:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801324a:	d308      	bcc.n	801325e <UART_SetConfig+0x79a>
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013252:	d204      	bcs.n	801325e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801325a:	60da      	str	r2, [r3, #12]
 801325c:	e17c      	b.n	8013558 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801325e:	2301      	movs	r3, #1
 8013260:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013264:	e178      	b.n	8013558 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	69db      	ldr	r3, [r3, #28]
 801326a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801326e:	f040 80c5 	bne.w	80133fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013272:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013276:	2b20      	cmp	r3, #32
 8013278:	dc48      	bgt.n	801330c <UART_SetConfig+0x848>
 801327a:	2b00      	cmp	r3, #0
 801327c:	db7b      	blt.n	8013376 <UART_SetConfig+0x8b2>
 801327e:	2b20      	cmp	r3, #32
 8013280:	d879      	bhi.n	8013376 <UART_SetConfig+0x8b2>
 8013282:	a201      	add	r2, pc, #4	; (adr r2, 8013288 <UART_SetConfig+0x7c4>)
 8013284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013288:	08013313 	.word	0x08013313
 801328c:	0801331b 	.word	0x0801331b
 8013290:	08013377 	.word	0x08013377
 8013294:	08013377 	.word	0x08013377
 8013298:	08013323 	.word	0x08013323
 801329c:	08013377 	.word	0x08013377
 80132a0:	08013377 	.word	0x08013377
 80132a4:	08013377 	.word	0x08013377
 80132a8:	08013333 	.word	0x08013333
 80132ac:	08013377 	.word	0x08013377
 80132b0:	08013377 	.word	0x08013377
 80132b4:	08013377 	.word	0x08013377
 80132b8:	08013377 	.word	0x08013377
 80132bc:	08013377 	.word	0x08013377
 80132c0:	08013377 	.word	0x08013377
 80132c4:	08013377 	.word	0x08013377
 80132c8:	08013343 	.word	0x08013343
 80132cc:	08013377 	.word	0x08013377
 80132d0:	08013377 	.word	0x08013377
 80132d4:	08013377 	.word	0x08013377
 80132d8:	08013377 	.word	0x08013377
 80132dc:	08013377 	.word	0x08013377
 80132e0:	08013377 	.word	0x08013377
 80132e4:	08013377 	.word	0x08013377
 80132e8:	08013377 	.word	0x08013377
 80132ec:	08013377 	.word	0x08013377
 80132f0:	08013377 	.word	0x08013377
 80132f4:	08013377 	.word	0x08013377
 80132f8:	08013377 	.word	0x08013377
 80132fc:	08013377 	.word	0x08013377
 8013300:	08013377 	.word	0x08013377
 8013304:	08013377 	.word	0x08013377
 8013308:	08013369 	.word	0x08013369
 801330c:	2b40      	cmp	r3, #64	; 0x40
 801330e:	d02e      	beq.n	801336e <UART_SetConfig+0x8aa>
 8013310:	e031      	b.n	8013376 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013312:	f7f9 f9cf 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 8013316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013318:	e033      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801331a:	f7f9 f9e1 	bl	800c6e0 <HAL_RCC_GetPCLK2Freq>
 801331e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013320:	e02f      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013326:	4618      	mov	r0, r3
 8013328:	f7fb f990 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013330:	e027      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013332:	f107 0318 	add.w	r3, r7, #24
 8013336:	4618      	mov	r0, r3
 8013338:	f7fb fadc 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013340:	e01f      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013342:	4b2d      	ldr	r3, [pc, #180]	; (80133f8 <UART_SetConfig+0x934>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f003 0320 	and.w	r3, r3, #32
 801334a:	2b00      	cmp	r3, #0
 801334c:	d009      	beq.n	8013362 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801334e:	4b2a      	ldr	r3, [pc, #168]	; (80133f8 <UART_SetConfig+0x934>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	08db      	lsrs	r3, r3, #3
 8013354:	f003 0303 	and.w	r3, r3, #3
 8013358:	4a24      	ldr	r2, [pc, #144]	; (80133ec <UART_SetConfig+0x928>)
 801335a:	fa22 f303 	lsr.w	r3, r2, r3
 801335e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013360:	e00f      	b.n	8013382 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013362:	4b22      	ldr	r3, [pc, #136]	; (80133ec <UART_SetConfig+0x928>)
 8013364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013366:	e00c      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013368:	4b21      	ldr	r3, [pc, #132]	; (80133f0 <UART_SetConfig+0x92c>)
 801336a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801336c:	e009      	b.n	8013382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013374:	e005      	b.n	8013382 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013376:	2300      	movs	r3, #0
 8013378:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801337a:	2301      	movs	r3, #1
 801337c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013384:	2b00      	cmp	r3, #0
 8013386:	f000 80e7 	beq.w	8013558 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	4a19      	ldr	r2, [pc, #100]	; (80133f4 <UART_SetConfig+0x930>)
 8013390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013394:	461a      	mov	r2, r3
 8013396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013398:	fbb3 f3f2 	udiv	r3, r3, r2
 801339c:	005a      	lsls	r2, r3, #1
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	085b      	lsrs	r3, r3, #1
 80133a4:	441a      	add	r2, r3
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80133ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80133b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b2:	2b0f      	cmp	r3, #15
 80133b4:	d916      	bls.n	80133e4 <UART_SetConfig+0x920>
 80133b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133bc:	d212      	bcs.n	80133e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	f023 030f 	bic.w	r3, r3, #15
 80133c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ca:	085b      	lsrs	r3, r3, #1
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	f003 0307 	and.w	r3, r3, #7
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80133d6:	4313      	orrs	r3, r2
 80133d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80133e0:	60da      	str	r2, [r3, #12]
 80133e2:	e0b9      	b.n	8013558 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80133e4:	2301      	movs	r3, #1
 80133e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80133ea:	e0b5      	b.n	8013558 <UART_SetConfig+0xa94>
 80133ec:	03d09000 	.word	0x03d09000
 80133f0:	003d0900 	.word	0x003d0900
 80133f4:	08018990 	.word	0x08018990
 80133f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80133fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013400:	2b20      	cmp	r3, #32
 8013402:	dc49      	bgt.n	8013498 <UART_SetConfig+0x9d4>
 8013404:	2b00      	cmp	r3, #0
 8013406:	db7c      	blt.n	8013502 <UART_SetConfig+0xa3e>
 8013408:	2b20      	cmp	r3, #32
 801340a:	d87a      	bhi.n	8013502 <UART_SetConfig+0xa3e>
 801340c:	a201      	add	r2, pc, #4	; (adr r2, 8013414 <UART_SetConfig+0x950>)
 801340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013412:	bf00      	nop
 8013414:	0801349f 	.word	0x0801349f
 8013418:	080134a7 	.word	0x080134a7
 801341c:	08013503 	.word	0x08013503
 8013420:	08013503 	.word	0x08013503
 8013424:	080134af 	.word	0x080134af
 8013428:	08013503 	.word	0x08013503
 801342c:	08013503 	.word	0x08013503
 8013430:	08013503 	.word	0x08013503
 8013434:	080134bf 	.word	0x080134bf
 8013438:	08013503 	.word	0x08013503
 801343c:	08013503 	.word	0x08013503
 8013440:	08013503 	.word	0x08013503
 8013444:	08013503 	.word	0x08013503
 8013448:	08013503 	.word	0x08013503
 801344c:	08013503 	.word	0x08013503
 8013450:	08013503 	.word	0x08013503
 8013454:	080134cf 	.word	0x080134cf
 8013458:	08013503 	.word	0x08013503
 801345c:	08013503 	.word	0x08013503
 8013460:	08013503 	.word	0x08013503
 8013464:	08013503 	.word	0x08013503
 8013468:	08013503 	.word	0x08013503
 801346c:	08013503 	.word	0x08013503
 8013470:	08013503 	.word	0x08013503
 8013474:	08013503 	.word	0x08013503
 8013478:	08013503 	.word	0x08013503
 801347c:	08013503 	.word	0x08013503
 8013480:	08013503 	.word	0x08013503
 8013484:	08013503 	.word	0x08013503
 8013488:	08013503 	.word	0x08013503
 801348c:	08013503 	.word	0x08013503
 8013490:	08013503 	.word	0x08013503
 8013494:	080134f5 	.word	0x080134f5
 8013498:	2b40      	cmp	r3, #64	; 0x40
 801349a:	d02e      	beq.n	80134fa <UART_SetConfig+0xa36>
 801349c:	e031      	b.n	8013502 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801349e:	f7f9 f909 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 80134a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80134a4:	e033      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80134a6:	f7f9 f91b 	bl	800c6e0 <HAL_RCC_GetPCLK2Freq>
 80134aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80134ac:	e02f      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fb f8ca 	bl	800e64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80134b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134bc:	e027      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134be:	f107 0318 	add.w	r3, r7, #24
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fb fa16 	bl	800e8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134cc:	e01f      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80134ce:	4b2d      	ldr	r3, [pc, #180]	; (8013584 <UART_SetConfig+0xac0>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f003 0320 	and.w	r3, r3, #32
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d009      	beq.n	80134ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134da:	4b2a      	ldr	r3, [pc, #168]	; (8013584 <UART_SetConfig+0xac0>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	08db      	lsrs	r3, r3, #3
 80134e0:	f003 0303 	and.w	r3, r3, #3
 80134e4:	4a28      	ldr	r2, [pc, #160]	; (8013588 <UART_SetConfig+0xac4>)
 80134e6:	fa22 f303 	lsr.w	r3, r2, r3
 80134ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80134ec:	e00f      	b.n	801350e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80134ee:	4b26      	ldr	r3, [pc, #152]	; (8013588 <UART_SetConfig+0xac4>)
 80134f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134f2:	e00c      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80134f4:	4b25      	ldr	r3, [pc, #148]	; (801358c <UART_SetConfig+0xac8>)
 80134f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134f8:	e009      	b.n	801350e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013500:	e005      	b.n	801350e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013502:	2300      	movs	r3, #0
 8013504:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013506:	2301      	movs	r3, #1
 8013508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801350c:	bf00      	nop
    }

    if (pclk != 0U)
 801350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013510:	2b00      	cmp	r3, #0
 8013512:	d021      	beq.n	8013558 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	4a1d      	ldr	r2, [pc, #116]	; (8013590 <UART_SetConfig+0xacc>)
 801351a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801351e:	461a      	mov	r2, r3
 8013520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013522:	fbb3 f2f2 	udiv	r2, r3, r2
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	685b      	ldr	r3, [r3, #4]
 801352a:	085b      	lsrs	r3, r3, #1
 801352c:	441a      	add	r2, r3
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	fbb2 f3f3 	udiv	r3, r2, r3
 8013536:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801353a:	2b0f      	cmp	r3, #15
 801353c:	d909      	bls.n	8013552 <UART_SetConfig+0xa8e>
 801353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013544:	d205      	bcs.n	8013552 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013548:	b29a      	uxth	r2, r3
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	60da      	str	r2, [r3, #12]
 8013550:	e002      	b.n	8013558 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013552:	2301      	movs	r3, #1
 8013554:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2201      	movs	r2, #1
 801355c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	2201      	movs	r2, #1
 8013564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	2200      	movs	r2, #0
 801356c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2200      	movs	r2, #0
 8013572:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013574:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013578:	4618      	mov	r0, r3
 801357a:	3748      	adds	r7, #72	; 0x48
 801357c:	46bd      	mov	sp, r7
 801357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013582:	bf00      	nop
 8013584:	58024400 	.word	0x58024400
 8013588:	03d09000 	.word	0x03d09000
 801358c:	003d0900 	.word	0x003d0900
 8013590:	08018990 	.word	0x08018990

08013594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00a      	beq.n	80135be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	430a      	orrs	r2, r1
 80135bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135c2:	f003 0302 	and.w	r3, r3, #2
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00a      	beq.n	80135e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	430a      	orrs	r2, r1
 80135de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135e4:	f003 0304 	and.w	r3, r3, #4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d00a      	beq.n	8013602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	430a      	orrs	r2, r1
 8013600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013606:	f003 0308 	and.w	r3, r3, #8
 801360a:	2b00      	cmp	r3, #0
 801360c:	d00a      	beq.n	8013624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	430a      	orrs	r2, r1
 8013622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013628:	f003 0310 	and.w	r3, r3, #16
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00a      	beq.n	8013646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	689b      	ldr	r3, [r3, #8]
 8013636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	430a      	orrs	r2, r1
 8013644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801364a:	f003 0320 	and.w	r3, r3, #32
 801364e:	2b00      	cmp	r3, #0
 8013650:	d00a      	beq.n	8013668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	430a      	orrs	r2, r1
 8013666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013670:	2b00      	cmp	r3, #0
 8013672:	d01a      	beq.n	80136aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	430a      	orrs	r2, r1
 8013688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801368e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013692:	d10a      	bne.n	80136aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	430a      	orrs	r2, r1
 80136a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d00a      	beq.n	80136cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	685b      	ldr	r3, [r3, #4]
 80136bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	430a      	orrs	r2, r1
 80136ca:	605a      	str	r2, [r3, #4]
  }
}
 80136cc:	bf00      	nop
 80136ce:	370c      	adds	r7, #12
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr

080136d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b098      	sub	sp, #96	; 0x60
 80136dc:	af02      	add	r7, sp, #8
 80136de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2200      	movs	r2, #0
 80136e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80136e8:	f7f1 fc88 	bl	8004ffc <HAL_GetTick>
 80136ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f003 0308 	and.w	r3, r3, #8
 80136f8:	2b08      	cmp	r3, #8
 80136fa:	d12f      	bne.n	801375c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013704:	2200      	movs	r2, #0
 8013706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 f88e 	bl	801382c <UART_WaitOnFlagUntilTimeout>
 8013710:	4603      	mov	r3, r0
 8013712:	2b00      	cmp	r3, #0
 8013714:	d022      	beq.n	801375c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371e:	e853 3f00 	ldrex	r3, [r3]
 8013722:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801372a:	653b      	str	r3, [r7, #80]	; 0x50
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	461a      	mov	r2, r3
 8013732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013734:	647b      	str	r3, [r7, #68]	; 0x44
 8013736:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801373a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801373c:	e841 2300 	strex	r3, r2, [r1]
 8013740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1e6      	bne.n	8013716 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2220      	movs	r2, #32
 801374c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013758:	2303      	movs	r3, #3
 801375a:	e063      	b.n	8013824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	f003 0304 	and.w	r3, r3, #4
 8013766:	2b04      	cmp	r3, #4
 8013768:	d149      	bne.n	80137fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801376a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013772:	2200      	movs	r2, #0
 8013774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 f857 	bl	801382c <UART_WaitOnFlagUntilTimeout>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d03c      	beq.n	80137fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378c:	e853 3f00 	ldrex	r3, [r3]
 8013790:	623b      	str	r3, [r7, #32]
   return(result);
 8013792:	6a3b      	ldr	r3, [r7, #32]
 8013794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013798:	64fb      	str	r3, [r7, #76]	; 0x4c
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	461a      	mov	r2, r3
 80137a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137a2:	633b      	str	r3, [r7, #48]	; 0x30
 80137a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137aa:	e841 2300 	strex	r3, r2, [r1]
 80137ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80137b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d1e6      	bne.n	8013784 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	3308      	adds	r3, #8
 80137bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	e853 3f00 	ldrex	r3, [r3]
 80137c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	f023 0301 	bic.w	r3, r3, #1
 80137cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	3308      	adds	r3, #8
 80137d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80137d6:	61fa      	str	r2, [r7, #28]
 80137d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137da:	69b9      	ldr	r1, [r7, #24]
 80137dc:	69fa      	ldr	r2, [r7, #28]
 80137de:	e841 2300 	strex	r3, r2, [r1]
 80137e2:	617b      	str	r3, [r7, #20]
   return(result);
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1e5      	bne.n	80137b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2220      	movs	r2, #32
 80137ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2200      	movs	r2, #0
 80137f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80137fa:	2303      	movs	r3, #3
 80137fc:	e012      	b.n	8013824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2220      	movs	r2, #32
 8013802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2220      	movs	r2, #32
 801380a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2200      	movs	r2, #0
 8013818:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013822:	2300      	movs	r3, #0
}
 8013824:	4618      	mov	r0, r3
 8013826:	3758      	adds	r7, #88	; 0x58
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}

0801382c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	60f8      	str	r0, [r7, #12]
 8013834:	60b9      	str	r1, [r7, #8]
 8013836:	603b      	str	r3, [r7, #0]
 8013838:	4613      	mov	r3, r2
 801383a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801383c:	e049      	b.n	80138d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013844:	d045      	beq.n	80138d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013846:	f7f1 fbd9 	bl	8004ffc <HAL_GetTick>
 801384a:	4602      	mov	r2, r0
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	69ba      	ldr	r2, [r7, #24]
 8013852:	429a      	cmp	r2, r3
 8013854:	d302      	bcc.n	801385c <UART_WaitOnFlagUntilTimeout+0x30>
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d101      	bne.n	8013860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801385c:	2303      	movs	r3, #3
 801385e:	e048      	b.n	80138f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f003 0304 	and.w	r3, r3, #4
 801386a:	2b00      	cmp	r3, #0
 801386c:	d031      	beq.n	80138d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	69db      	ldr	r3, [r3, #28]
 8013874:	f003 0308 	and.w	r3, r3, #8
 8013878:	2b08      	cmp	r3, #8
 801387a:	d110      	bne.n	801389e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2208      	movs	r2, #8
 8013882:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f000 f839 	bl	80138fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2208      	movs	r2, #8
 801388e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	2200      	movs	r2, #0
 8013896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801389a:	2301      	movs	r3, #1
 801389c:	e029      	b.n	80138f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80138a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80138ac:	d111      	bne.n	80138d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f000 f81f 	bl	80138fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2220      	movs	r2, #32
 80138c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2200      	movs	r2, #0
 80138ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80138ce:	2303      	movs	r3, #3
 80138d0:	e00f      	b.n	80138f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	69da      	ldr	r2, [r3, #28]
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	4013      	ands	r3, r2
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	429a      	cmp	r2, r3
 80138e0:	bf0c      	ite	eq
 80138e2:	2301      	moveq	r3, #1
 80138e4:	2300      	movne	r3, #0
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	461a      	mov	r2, r3
 80138ea:	79fb      	ldrb	r3, [r7, #7]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d0a6      	beq.n	801383e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3710      	adds	r7, #16
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
	...

080138fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b095      	sub	sp, #84	; 0x54
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390c:	e853 3f00 	ldrex	r3, [r3]
 8013910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013918:	64fb      	str	r3, [r7, #76]	; 0x4c
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	461a      	mov	r2, r3
 8013920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013922:	643b      	str	r3, [r7, #64]	; 0x40
 8013924:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801392a:	e841 2300 	strex	r3, r2, [r1]
 801392e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1e6      	bne.n	8013904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	3308      	adds	r3, #8
 801393c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	e853 3f00 	ldrex	r3, [r3]
 8013944:	61fb      	str	r3, [r7, #28]
   return(result);
 8013946:	69fa      	ldr	r2, [r7, #28]
 8013948:	4b1e      	ldr	r3, [pc, #120]	; (80139c4 <UART_EndRxTransfer+0xc8>)
 801394a:	4013      	ands	r3, r2
 801394c:	64bb      	str	r3, [r7, #72]	; 0x48
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	3308      	adds	r3, #8
 8013954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801395a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801395c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801395e:	e841 2300 	strex	r3, r2, [r1]
 8013962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013966:	2b00      	cmp	r3, #0
 8013968:	d1e5      	bne.n	8013936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801396e:	2b01      	cmp	r3, #1
 8013970:	d118      	bne.n	80139a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	e853 3f00 	ldrex	r3, [r3]
 801397e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	f023 0310 	bic.w	r3, r3, #16
 8013986:	647b      	str	r3, [r7, #68]	; 0x44
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	461a      	mov	r2, r3
 801398e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013990:	61bb      	str	r3, [r7, #24]
 8013992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013994:	6979      	ldr	r1, [r7, #20]
 8013996:	69ba      	ldr	r2, [r7, #24]
 8013998:	e841 2300 	strex	r3, r2, [r1]
 801399c:	613b      	str	r3, [r7, #16]
   return(result);
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d1e6      	bne.n	8013972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2220      	movs	r2, #32
 80139a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	2200      	movs	r2, #0
 80139b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80139b8:	bf00      	nop
 80139ba:	3754      	adds	r7, #84	; 0x54
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	effffffe 	.word	0xeffffffe

080139c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80139d6:	2b01      	cmp	r3, #1
 80139d8:	d101      	bne.n	80139de <HAL_UARTEx_DisableFifoMode+0x16>
 80139da:	2302      	movs	r3, #2
 80139dc:	e027      	b.n	8013a2e <HAL_UARTEx_DisableFifoMode+0x66>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2224      	movs	r2, #36	; 0x24
 80139ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f022 0201 	bic.w	r2, r2, #1
 8013a04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013a0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2200      	movs	r2, #0
 8013a12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2220      	movs	r2, #32
 8013a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2200      	movs	r2, #0
 8013a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a2c:	2300      	movs	r3, #0
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	3714      	adds	r7, #20
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr

08013a3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b084      	sub	sp, #16
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d101      	bne.n	8013a52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013a4e:	2302      	movs	r3, #2
 8013a50:	e02d      	b.n	8013aae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2201      	movs	r2, #1
 8013a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2224      	movs	r2, #36	; 0x24
 8013a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f022 0201 	bic.w	r2, r2, #1
 8013a78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	689b      	ldr	r3, [r3, #8]
 8013a80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	683a      	ldr	r2, [r7, #0]
 8013a8a:	430a      	orrs	r2, r1
 8013a8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f850 	bl	8013b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2220      	movs	r2, #32
 8013aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3710      	adds	r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
 8013abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d101      	bne.n	8013ace <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013aca:	2302      	movs	r3, #2
 8013acc:	e02d      	b.n	8013b2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2224      	movs	r2, #36	; 0x24
 8013ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f022 0201 	bic.w	r2, r2, #1
 8013af4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	689b      	ldr	r3, [r3, #8]
 8013afc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	683a      	ldr	r2, [r7, #0]
 8013b06:	430a      	orrs	r2, r1
 8013b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 f812 	bl	8013b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	68fa      	ldr	r2, [r7, #12]
 8013b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2220      	movs	r2, #32
 8013b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2200      	movs	r2, #0
 8013b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013b28:	2300      	movs	r3, #0
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3710      	adds	r7, #16
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
	...

08013b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d108      	bne.n	8013b56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2201      	movs	r2, #1
 8013b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2201      	movs	r2, #1
 8013b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013b54:	e031      	b.n	8013bba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013b56:	2310      	movs	r3, #16
 8013b58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013b5a:	2310      	movs	r3, #16
 8013b5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	689b      	ldr	r3, [r3, #8]
 8013b64:	0e5b      	lsrs	r3, r3, #25
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	f003 0307 	and.w	r3, r3, #7
 8013b6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	689b      	ldr	r3, [r3, #8]
 8013b74:	0f5b      	lsrs	r3, r3, #29
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	f003 0307 	and.w	r3, r3, #7
 8013b7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b7e:	7bbb      	ldrb	r3, [r7, #14]
 8013b80:	7b3a      	ldrb	r2, [r7, #12]
 8013b82:	4911      	ldr	r1, [pc, #68]	; (8013bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8013b84:	5c8a      	ldrb	r2, [r1, r2]
 8013b86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013b8a:	7b3a      	ldrb	r2, [r7, #12]
 8013b8c:	490f      	ldr	r1, [pc, #60]	; (8013bcc <UARTEx_SetNbDataToProcess+0x98>)
 8013b8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013b9c:	7bfb      	ldrb	r3, [r7, #15]
 8013b9e:	7b7a      	ldrb	r2, [r7, #13]
 8013ba0:	4909      	ldr	r1, [pc, #36]	; (8013bc8 <UARTEx_SetNbDataToProcess+0x94>)
 8013ba2:	5c8a      	ldrb	r2, [r1, r2]
 8013ba4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013ba8:	7b7a      	ldrb	r2, [r7, #13]
 8013baa:	4908      	ldr	r1, [pc, #32]	; (8013bcc <UARTEx_SetNbDataToProcess+0x98>)
 8013bac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013bba:	bf00      	nop
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc4:	4770      	bx	lr
 8013bc6:	bf00      	nop
 8013bc8:	080189a8 	.word	0x080189a8
 8013bcc:	080189b0 	.word	0x080189b0

08013bd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d121      	bne.n	8013c26 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	4b27      	ldr	r3, [pc, #156]	; (8013c84 <FMC_SDRAM_Init+0xb4>)
 8013be8:	4013      	ands	r3, r2
 8013bea:	683a      	ldr	r2, [r7, #0]
 8013bec:	6851      	ldr	r1, [r2, #4]
 8013bee:	683a      	ldr	r2, [r7, #0]
 8013bf0:	6892      	ldr	r2, [r2, #8]
 8013bf2:	4311      	orrs	r1, r2
 8013bf4:	683a      	ldr	r2, [r7, #0]
 8013bf6:	68d2      	ldr	r2, [r2, #12]
 8013bf8:	4311      	orrs	r1, r2
 8013bfa:	683a      	ldr	r2, [r7, #0]
 8013bfc:	6912      	ldr	r2, [r2, #16]
 8013bfe:	4311      	orrs	r1, r2
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	6952      	ldr	r2, [r2, #20]
 8013c04:	4311      	orrs	r1, r2
 8013c06:	683a      	ldr	r2, [r7, #0]
 8013c08:	6992      	ldr	r2, [r2, #24]
 8013c0a:	4311      	orrs	r1, r2
 8013c0c:	683a      	ldr	r2, [r7, #0]
 8013c0e:	69d2      	ldr	r2, [r2, #28]
 8013c10:	4311      	orrs	r1, r2
 8013c12:	683a      	ldr	r2, [r7, #0]
 8013c14:	6a12      	ldr	r2, [r2, #32]
 8013c16:	4311      	orrs	r1, r2
 8013c18:	683a      	ldr	r2, [r7, #0]
 8013c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013c1c:	430a      	orrs	r2, r1
 8013c1e:	431a      	orrs	r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	601a      	str	r2, [r3, #0]
 8013c24:	e026      	b.n	8013c74 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	69d9      	ldr	r1, [r3, #28]
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	4319      	orrs	r1, r3
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c3c:	430b      	orrs	r3, r1
 8013c3e:	431a      	orrs	r2, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	4b0e      	ldr	r3, [pc, #56]	; (8013c84 <FMC_SDRAM_Init+0xb4>)
 8013c4a:	4013      	ands	r3, r2
 8013c4c:	683a      	ldr	r2, [r7, #0]
 8013c4e:	6851      	ldr	r1, [r2, #4]
 8013c50:	683a      	ldr	r2, [r7, #0]
 8013c52:	6892      	ldr	r2, [r2, #8]
 8013c54:	4311      	orrs	r1, r2
 8013c56:	683a      	ldr	r2, [r7, #0]
 8013c58:	68d2      	ldr	r2, [r2, #12]
 8013c5a:	4311      	orrs	r1, r2
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	6912      	ldr	r2, [r2, #16]
 8013c60:	4311      	orrs	r1, r2
 8013c62:	683a      	ldr	r2, [r7, #0]
 8013c64:	6952      	ldr	r2, [r2, #20]
 8013c66:	4311      	orrs	r1, r2
 8013c68:	683a      	ldr	r2, [r7, #0]
 8013c6a:	6992      	ldr	r2, [r2, #24]
 8013c6c:	430a      	orrs	r2, r1
 8013c6e:	431a      	orrs	r2, r3
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	ffff8000 	.word	0xffff8000

08013c88 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d128      	bne.n	8013cec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	1e59      	subs	r1, r3, #1
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	011b      	lsls	r3, r3, #4
 8013cb0:	4319      	orrs	r1, r3
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	689b      	ldr	r3, [r3, #8]
 8013cb6:	3b01      	subs	r3, #1
 8013cb8:	021b      	lsls	r3, r3, #8
 8013cba:	4319      	orrs	r1, r3
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	68db      	ldr	r3, [r3, #12]
 8013cc0:	3b01      	subs	r3, #1
 8013cc2:	031b      	lsls	r3, r3, #12
 8013cc4:	4319      	orrs	r1, r3
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	041b      	lsls	r3, r3, #16
 8013cce:	4319      	orrs	r1, r3
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	695b      	ldr	r3, [r3, #20]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	051b      	lsls	r3, r3, #20
 8013cd8:	4319      	orrs	r1, r3
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	699b      	ldr	r3, [r3, #24]
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	061b      	lsls	r3, r3, #24
 8013ce2:	430b      	orrs	r3, r1
 8013ce4:	431a      	orrs	r2, r3
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	609a      	str	r2, [r3, #8]
 8013cea:	e02d      	b.n	8013d48 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	689a      	ldr	r2, [r3, #8]
 8013cf0:	4b19      	ldr	r3, [pc, #100]	; (8013d58 <FMC_SDRAM_Timing_Init+0xd0>)
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	68ba      	ldr	r2, [r7, #8]
 8013cf6:	68d2      	ldr	r2, [r2, #12]
 8013cf8:	3a01      	subs	r2, #1
 8013cfa:	0311      	lsls	r1, r2, #12
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	6952      	ldr	r2, [r2, #20]
 8013d00:	3a01      	subs	r2, #1
 8013d02:	0512      	lsls	r2, r2, #20
 8013d04:	430a      	orrs	r2, r1
 8013d06:	431a      	orrs	r2, r3
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	68db      	ldr	r3, [r3, #12]
 8013d10:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	1e59      	subs	r1, r3, #1
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	011b      	lsls	r3, r3, #4
 8013d22:	4319      	orrs	r1, r3
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	3b01      	subs	r3, #1
 8013d2a:	021b      	lsls	r3, r3, #8
 8013d2c:	4319      	orrs	r1, r3
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	041b      	lsls	r3, r3, #16
 8013d36:	4319      	orrs	r1, r3
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	699b      	ldr	r3, [r3, #24]
 8013d3c:	3b01      	subs	r3, #1
 8013d3e:	061b      	lsls	r3, r3, #24
 8013d40:	430b      	orrs	r3, r1
 8013d42:	431a      	orrs	r2, r3
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8013d48:	2300      	movs	r3, #0
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	ff0f0fff 	.word	0xff0f0fff

08013d5c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b085      	sub	sp, #20
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	691a      	ldr	r2, [r3, #16]
 8013d6c:	4b0c      	ldr	r3, [pc, #48]	; (8013da0 <FMC_SDRAM_SendCommand+0x44>)
 8013d6e:	4013      	ands	r3, r2
 8013d70:	68ba      	ldr	r2, [r7, #8]
 8013d72:	6811      	ldr	r1, [r2, #0]
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	6852      	ldr	r2, [r2, #4]
 8013d78:	4311      	orrs	r1, r2
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	6892      	ldr	r2, [r2, #8]
 8013d7e:	3a01      	subs	r2, #1
 8013d80:	0152      	lsls	r2, r2, #5
 8013d82:	4311      	orrs	r1, r2
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	68d2      	ldr	r2, [r2, #12]
 8013d88:	0252      	lsls	r2, r2, #9
 8013d8a:	430a      	orrs	r2, r1
 8013d8c:	431a      	orrs	r2, r3
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8013d92:	2300      	movs	r3, #0
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3714      	adds	r7, #20
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr
 8013da0:	ffc00000 	.word	0xffc00000

08013da4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	695a      	ldr	r2, [r3, #20]
 8013db2:	4b07      	ldr	r3, [pc, #28]	; (8013dd0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8013db4:	4013      	ands	r3, r2
 8013db6:	683a      	ldr	r2, [r7, #0]
 8013db8:	0052      	lsls	r2, r2, #1
 8013dba:	431a      	orrs	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	ffffc001 	.word	0xffffc001

08013dd4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013dd4:	b084      	sub	sp, #16
 8013dd6:	b480      	push	{r7}
 8013dd8:	b085      	sub	sp, #20
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	f107 001c 	add.w	r0, r7, #28
 8013de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8013dea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013dec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013dee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8013df2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8013df6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8013df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8013dfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013dfc:	68fa      	ldr	r2, [r7, #12]
 8013dfe:	4313      	orrs	r3, r2
 8013e00:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685a      	ldr	r2, [r3, #4]
 8013e06:	4b07      	ldr	r3, [pc, #28]	; (8013e24 <SDMMC_Init+0x50>)
 8013e08:	4013      	ands	r3, r2
 8013e0a:	68fa      	ldr	r2, [r7, #12]
 8013e0c:	431a      	orrs	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013e12:	2300      	movs	r3, #0
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	b004      	add	sp, #16
 8013e20:	4770      	bx	lr
 8013e22:	bf00      	nop
 8013e24:	ffc02c00 	.word	0xffc02c00

08013e28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	370c      	adds	r7, #12
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e40:	4770      	bx	lr

08013e42 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013e42:	b480      	push	{r7}
 8013e44:	b083      	sub	sp, #12
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	6078      	str	r0, [r7, #4]
 8013e4a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	370c      	adds	r7, #12
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr

08013e64 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f043 0203 	orr.w	r2, r3, #3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013e78:	2300      	movs	r3, #0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	370c      	adds	r7, #12
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr

08013e86 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8013e86:	b480      	push	{r7}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f003 0303 	and.w	r3, r3, #3
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	370c      	adds	r7, #12
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr
	...

08013ea4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b085      	sub	sp, #20
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013ec2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8013ec8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013ece:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013ed0:	68fa      	ldr	r2, [r7, #12]
 8013ed2:	4313      	orrs	r3, r2
 8013ed4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	68da      	ldr	r2, [r3, #12]
 8013eda:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <SDMMC_SendCommand+0x50>)
 8013edc:	4013      	ands	r3, r2
 8013ede:	68fa      	ldr	r2, [r7, #12]
 8013ee0:	431a      	orrs	r2, r3
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013ee6:	2300      	movs	r3, #0
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr
 8013ef4:	fffee0c0 	.word	0xfffee0c0

08013ef8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b083      	sub	sp, #12
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	691b      	ldr	r3, [r3, #16]
 8013f04:	b2db      	uxtb	r3, r3
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr

08013f12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b085      	sub	sp, #20
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
 8013f1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	3314      	adds	r3, #20
 8013f20:	461a      	mov	r2, r3
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	4413      	add	r3, r2
 8013f26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3714      	adds	r7, #20
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr

08013f38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013f38:	b480      	push	{r7}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	685a      	ldr	r2, [r3, #4]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013f5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013f64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013f6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	431a      	orrs	r2, r3
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013f82:	2300      	movs	r3, #0

}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3714      	adds	r7, #20
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8e:	4770      	bx	lr

08013f90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b088      	sub	sp, #32
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013f9e:	2310      	movs	r3, #16
 8013fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013fb2:	f107 0308 	add.w	r3, r7, #8
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f7ff ff73 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fc2:	2110      	movs	r1, #16
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f000 fa5f 	bl	8014488 <SDMMC_GetCmdResp1>
 8013fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fcc:	69fb      	ldr	r3, [r7, #28]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3720      	adds	r7, #32
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b088      	sub	sp, #32
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013fe4:	2311      	movs	r3, #17
 8013fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ff8:	f107 0308 	add.w	r3, r7, #8
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	6878      	ldr	r0, [r7, #4]
 8014000:	f7ff ff50 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014004:	f241 3288 	movw	r2, #5000	; 0x1388
 8014008:	2111      	movs	r1, #17
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f000 fa3c 	bl	8014488 <SDMMC_GetCmdResp1>
 8014010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014012:	69fb      	ldr	r3, [r7, #28]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3720      	adds	r7, #32
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b088      	sub	sp, #32
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801402a:	2312      	movs	r3, #18
 801402c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801402e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014034:	2300      	movs	r3, #0
 8014036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801403c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801403e:	f107 0308 	add.w	r3, r7, #8
 8014042:	4619      	mov	r1, r3
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f7ff ff2d 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801404a:	f241 3288 	movw	r2, #5000	; 0x1388
 801404e:	2112      	movs	r1, #18
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 fa19 	bl	8014488 <SDMMC_GetCmdResp1>
 8014056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014058:	69fb      	ldr	r3, [r7, #28]
}
 801405a:	4618      	mov	r0, r3
 801405c:	3720      	adds	r7, #32
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b088      	sub	sp, #32
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
 801406a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8014070:	2318      	movs	r3, #24
 8014072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801407a:	2300      	movs	r3, #0
 801407c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801407e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014084:	f107 0308 	add.w	r3, r7, #8
 8014088:	4619      	mov	r1, r3
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7ff ff0a 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8014090:	f241 3288 	movw	r2, #5000	; 0x1388
 8014094:	2118      	movs	r1, #24
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 f9f6 	bl	8014488 <SDMMC_GetCmdResp1>
 801409c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801409e:	69fb      	ldr	r3, [r7, #28]
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3720      	adds	r7, #32
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b088      	sub	sp, #32
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80140b6:	2319      	movs	r3, #25
 80140b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80140ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80140be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80140c0:	2300      	movs	r3, #0
 80140c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80140c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80140c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80140ca:	f107 0308 	add.w	r3, r7, #8
 80140ce:	4619      	mov	r1, r3
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f7ff fee7 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80140d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80140da:	2119      	movs	r1, #25
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f000 f9d3 	bl	8014488 <SDMMC_GetCmdResp1>
 80140e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80140e4:	69fb      	ldr	r3, [r7, #28]
}
 80140e6:	4618      	mov	r0, r3
 80140e8:	3720      	adds	r7, #32
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
	...

080140f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b088      	sub	sp, #32
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80140f8:	2300      	movs	r3, #0
 80140fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80140fc:	230c      	movs	r3, #12
 80140fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014106:	2300      	movs	r3, #0
 8014108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801410a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801410e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014128:	f107 0308 	add.w	r3, r7, #8
 801412c:	4619      	mov	r1, r3
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f7ff feb8 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8014134:	4a0b      	ldr	r2, [pc, #44]	; (8014164 <SDMMC_CmdStopTransfer+0x74>)
 8014136:	210c      	movs	r1, #12
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 f9a5 	bl	8014488 <SDMMC_GetCmdResp1>
 801413e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014152:	d101      	bne.n	8014158 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8014154:	2300      	movs	r3, #0
 8014156:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8014158:	69fb      	ldr	r3, [r7, #28]
}
 801415a:	4618      	mov	r0, r3
 801415c:	3720      	adds	r7, #32
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	05f5e100 	.word	0x05f5e100

08014168 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b088      	sub	sp, #32
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014176:	2307      	movs	r3, #7
 8014178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801417a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801417e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014180:	2300      	movs	r3, #0
 8014182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014188:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801418a:	f107 0308 	add.w	r3, r7, #8
 801418e:	4619      	mov	r1, r3
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7ff fe87 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014196:	f241 3288 	movw	r2, #5000	; 0x1388
 801419a:	2107      	movs	r1, #7
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f000 f973 	bl	8014488 <SDMMC_GetCmdResp1>
 80141a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141a4:	69fb      	ldr	r3, [r7, #28]
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3720      	adds	r7, #32
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b088      	sub	sp, #32
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80141b6:	2300      	movs	r3, #0
 80141b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80141ba:	2300      	movs	r3, #0
 80141bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80141be:	2300      	movs	r3, #0
 80141c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80141c2:	2300      	movs	r3, #0
 80141c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80141c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80141cc:	f107 0308 	add.w	r3, r7, #8
 80141d0:	4619      	mov	r1, r3
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ff fe66 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f000 fb97 	bl	801490c <SDMMC_GetCmdError>
 80141de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80141e0:	69fb      	ldr	r3, [r7, #28]
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3720      	adds	r7, #32
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b088      	sub	sp, #32
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80141f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80141f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80141f8:	2308      	movs	r3, #8
 80141fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80141fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014202:	2300      	movs	r3, #0
 8014204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801420a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801420c:	f107 0308 	add.w	r3, r7, #8
 8014210:	4619      	mov	r1, r3
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7ff fe46 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f000 fb29 	bl	8014870 <SDMMC_GetCmdResp7>
 801421e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014220:	69fb      	ldr	r3, [r7, #28]
}
 8014222:	4618      	mov	r0, r3
 8014224:	3720      	adds	r7, #32
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}

0801422a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801422a:	b580      	push	{r7, lr}
 801422c:	b088      	sub	sp, #32
 801422e:	af00      	add	r7, sp, #0
 8014230:	6078      	str	r0, [r7, #4]
 8014232:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014238:	2337      	movs	r3, #55	; 0x37
 801423a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801423c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014242:	2300      	movs	r3, #0
 8014244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801424a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801424c:	f107 0308 	add.w	r3, r7, #8
 8014250:	4619      	mov	r1, r3
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7ff fe26 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014258:	f241 3288 	movw	r2, #5000	; 0x1388
 801425c:	2137      	movs	r1, #55	; 0x37
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 f912 	bl	8014488 <SDMMC_GetCmdResp1>
 8014264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014266:	69fb      	ldr	r3, [r7, #28]
}
 8014268:	4618      	mov	r0, r3
 801426a:	3720      	adds	r7, #32
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b088      	sub	sp, #32
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801427e:	2329      	movs	r3, #41	; 0x29
 8014280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014288:	2300      	movs	r3, #0
 801428a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014292:	f107 0308 	add.w	r3, r7, #8
 8014296:	4619      	mov	r1, r3
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff fe03 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 fa2e 	bl	8014700 <SDMMC_GetCmdResp3>
 80142a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142a6:	69fb      	ldr	r3, [r7, #28]
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3720      	adds	r7, #32
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b088      	sub	sp, #32
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80142be:	2306      	movs	r3, #6
 80142c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80142c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80142c8:	2300      	movs	r3, #0
 80142ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80142cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80142d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80142d2:	f107 0308 	add.w	r3, r7, #8
 80142d6:	4619      	mov	r1, r3
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	f7ff fde3 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80142de:	f241 3288 	movw	r2, #5000	; 0x1388
 80142e2:	2106      	movs	r1, #6
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f000 f8cf 	bl	8014488 <SDMMC_GetCmdResp1>
 80142ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80142ec:	69fb      	ldr	r3, [r7, #28]
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3720      	adds	r7, #32
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}

080142f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80142f6:	b580      	push	{r7, lr}
 80142f8:	b088      	sub	sp, #32
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80142fe:	2300      	movs	r3, #0
 8014300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014302:	2333      	movs	r3, #51	; 0x33
 8014304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014306:	f44f 7380 	mov.w	r3, #256	; 0x100
 801430a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801430c:	2300      	movs	r3, #0
 801430e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014316:	f107 0308 	add.w	r3, r7, #8
 801431a:	4619      	mov	r1, r3
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7ff fdc1 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014322:	f241 3288 	movw	r2, #5000	; 0x1388
 8014326:	2133      	movs	r1, #51	; 0x33
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 f8ad 	bl	8014488 <SDMMC_GetCmdResp1>
 801432e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014330:	69fb      	ldr	r3, [r7, #28]
}
 8014332:	4618      	mov	r0, r3
 8014334:	3720      	adds	r7, #32
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b088      	sub	sp, #32
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014342:	2300      	movs	r3, #0
 8014344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8014346:	2302      	movs	r3, #2
 8014348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801434a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801434e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014350:	2300      	movs	r3, #0
 8014352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801435a:	f107 0308 	add.w	r3, r7, #8
 801435e:	4619      	mov	r1, r3
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7ff fd9f 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 f980 	bl	801466c <SDMMC_GetCmdResp2>
 801436c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801436e:	69fb      	ldr	r3, [r7, #28]
}
 8014370:	4618      	mov	r0, r3
 8014372:	3720      	adds	r7, #32
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b088      	sub	sp, #32
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014386:	2309      	movs	r3, #9
 8014388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801438a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801438e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014390:	2300      	movs	r3, #0
 8014392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014398:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801439a:	f107 0308 	add.w	r3, r7, #8
 801439e:	4619      	mov	r1, r3
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f7ff fd7f 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f960 	bl	801466c <SDMMC_GetCmdResp2>
 80143ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80143ae:	69fb      	ldr	r3, [r7, #28]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3720      	adds	r7, #32
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b088      	sub	sp, #32
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80143c2:	2300      	movs	r3, #0
 80143c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80143c6:	2303      	movs	r3, #3
 80143c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80143ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143d0:	2300      	movs	r3, #0
 80143d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80143da:	f107 0308 	add.w	r3, r7, #8
 80143de:	4619      	mov	r1, r3
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7ff fd5f 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80143e6:	683a      	ldr	r2, [r7, #0]
 80143e8:	2103      	movs	r1, #3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 f9c8 	bl	8014780 <SDMMC_GetCmdResp6>
 80143f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80143f2:	69fb      	ldr	r3, [r7, #28]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3720      	adds	r7, #32
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b088      	sub	sp, #32
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801440a:	230d      	movs	r3, #13
 801440c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801440e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014414:	2300      	movs	r3, #0
 8014416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801441c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801441e:	f107 0308 	add.w	r3, r7, #8
 8014422:	4619      	mov	r1, r3
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7ff fd3d 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801442a:	f241 3288 	movw	r2, #5000	; 0x1388
 801442e:	210d      	movs	r1, #13
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f000 f829 	bl	8014488 <SDMMC_GetCmdResp1>
 8014436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014438:	69fb      	ldr	r3, [r7, #28]
}
 801443a:	4618      	mov	r0, r3
 801443c:	3720      	adds	r7, #32
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}

08014442 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8014442:	b580      	push	{r7, lr}
 8014444:	b088      	sub	sp, #32
 8014446:	af00      	add	r7, sp, #0
 8014448:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801444a:	2300      	movs	r3, #0
 801444c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801444e:	230d      	movs	r3, #13
 8014450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014458:	2300      	movs	r3, #0
 801445a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801445c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014462:	f107 0308 	add.w	r3, r7, #8
 8014466:	4619      	mov	r1, r3
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f7ff fd1b 	bl	8013ea4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014472:	210d      	movs	r1, #13
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f000 f807 	bl	8014488 <SDMMC_GetCmdResp1>
 801447a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801447c:	69fb      	ldr	r3, [r7, #28]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3720      	adds	r7, #32
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
	...

08014488 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b088      	sub	sp, #32
 801448c:	af00      	add	r7, sp, #0
 801448e:	60f8      	str	r0, [r7, #12]
 8014490:	460b      	mov	r3, r1
 8014492:	607a      	str	r2, [r7, #4]
 8014494:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8014496:	4b70      	ldr	r3, [pc, #448]	; (8014658 <SDMMC_GetCmdResp1+0x1d0>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4a70      	ldr	r2, [pc, #448]	; (801465c <SDMMC_GetCmdResp1+0x1d4>)
 801449c:	fba2 2303 	umull	r2, r3, r2, r3
 80144a0:	0a5a      	lsrs	r2, r3, #9
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	fb02 f303 	mul.w	r3, r2, r3
 80144a8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	1e5a      	subs	r2, r3, #1
 80144ae:	61fa      	str	r2, [r7, #28]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80144b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80144b8:	e0c9      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144be:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80144c0:	69ba      	ldr	r2, [r7, #24]
 80144c2:	4b67      	ldr	r3, [pc, #412]	; (8014660 <SDMMC_GetCmdResp1+0x1d8>)
 80144c4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d0ef      	beq.n	80144aa <SDMMC_GetCmdResp1+0x22>
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d1ea      	bne.n	80144aa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144d8:	f003 0304 	and.w	r3, r3, #4
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d004      	beq.n	80144ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2204      	movs	r2, #4
 80144e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80144e6:	2304      	movs	r3, #4
 80144e8:	e0b1      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144ee:	f003 0301 	and.w	r3, r3, #1
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d004      	beq.n	8014500 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2201      	movs	r2, #1
 80144fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144fc:	2301      	movs	r3, #1
 80144fe:	e0a6      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	4a58      	ldr	r2, [pc, #352]	; (8014664 <SDMMC_GetCmdResp1+0x1dc>)
 8014504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f7ff fcf6 	bl	8013ef8 <SDMMC_GetCommandResponse>
 801450c:	4603      	mov	r3, r0
 801450e:	461a      	mov	r2, r3
 8014510:	7afb      	ldrb	r3, [r7, #11]
 8014512:	4293      	cmp	r3, r2
 8014514:	d001      	beq.n	801451a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014516:	2301      	movs	r3, #1
 8014518:	e099      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801451a:	2100      	movs	r1, #0
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff fcf8 	bl	8013f12 <SDMMC_GetResponse>
 8014522:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	4b50      	ldr	r3, [pc, #320]	; (8014668 <SDMMC_GetCmdResp1+0x1e0>)
 8014528:	4013      	ands	r3, r2
 801452a:	2b00      	cmp	r3, #0
 801452c:	d101      	bne.n	8014532 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801452e:	2300      	movs	r3, #0
 8014530:	e08d      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	2b00      	cmp	r3, #0
 8014536:	da02      	bge.n	801453e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801453c:	e087      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014548:	2340      	movs	r3, #64	; 0x40
 801454a:	e080      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014552:	2b00      	cmp	r3, #0
 8014554:	d001      	beq.n	801455a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014556:	2380      	movs	r3, #128	; 0x80
 8014558:	e079      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014560:	2b00      	cmp	r3, #0
 8014562:	d002      	beq.n	801456a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014568:	e071      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014578:	e069      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014588:	e061      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014598:	e059      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d002      	beq.n	80145aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80145a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80145a8:	e051      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d002      	beq.n	80145ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80145b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80145b8:	e049      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d002      	beq.n	80145ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80145c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80145c8:	e041      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d002      	beq.n	80145da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80145d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80145d8:	e039      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d002      	beq.n	80145ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80145e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80145e8:	e031      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d002      	beq.n	80145fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80145f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80145f8:	e029      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80145fa:	697b      	ldr	r3, [r7, #20]
 80145fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014604:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014608:	e021      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014610:	2b00      	cmp	r3, #0
 8014612:	d002      	beq.n	801461a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014614:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014618:	e019      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014628:	e011      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014630:	2b00      	cmp	r3, #0
 8014632:	d002      	beq.n	801463a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014634:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014638:	e009      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	f003 0308 	and.w	r3, r3, #8
 8014640:	2b00      	cmp	r3, #0
 8014642:	d002      	beq.n	801464a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014644:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014648:	e001      	b.n	801464e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801464a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801464e:	4618      	mov	r0, r3
 8014650:	3720      	adds	r7, #32
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	2000001c 	.word	0x2000001c
 801465c:	10624dd3 	.word	0x10624dd3
 8014660:	00200045 	.word	0x00200045
 8014664:	002000c5 	.word	0x002000c5
 8014668:	fdffe008 	.word	0xfdffe008

0801466c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801466c:	b480      	push	{r7}
 801466e:	b085      	sub	sp, #20
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014674:	4b1f      	ldr	r3, [pc, #124]	; (80146f4 <SDMMC_GetCmdResp2+0x88>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a1f      	ldr	r2, [pc, #124]	; (80146f8 <SDMMC_GetCmdResp2+0x8c>)
 801467a:	fba2 2303 	umull	r2, r3, r2, r3
 801467e:	0a5b      	lsrs	r3, r3, #9
 8014680:	f241 3288 	movw	r2, #5000	; 0x1388
 8014684:	fb02 f303 	mul.w	r3, r2, r3
 8014688:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	1e5a      	subs	r2, r3, #1
 801468e:	60fa      	str	r2, [r7, #12]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d102      	bne.n	801469a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014698:	e026      	b.n	80146e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801469e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d0ef      	beq.n	801468a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1ea      	bne.n	801468a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146b8:	f003 0304 	and.w	r3, r3, #4
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d004      	beq.n	80146ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2204      	movs	r2, #4
 80146c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80146c6:	2304      	movs	r3, #4
 80146c8:	e00e      	b.n	80146e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146ce:	f003 0301 	and.w	r3, r3, #1
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d004      	beq.n	80146e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2201      	movs	r2, #1
 80146da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80146dc:	2301      	movs	r3, #1
 80146de:	e003      	b.n	80146e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	4a06      	ldr	r2, [pc, #24]	; (80146fc <SDMMC_GetCmdResp2+0x90>)
 80146e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80146e6:	2300      	movs	r3, #0
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3714      	adds	r7, #20
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr
 80146f4:	2000001c 	.word	0x2000001c
 80146f8:	10624dd3 	.word	0x10624dd3
 80146fc:	002000c5 	.word	0x002000c5

08014700 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014700:	b480      	push	{r7}
 8014702:	b085      	sub	sp, #20
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014708:	4b1a      	ldr	r3, [pc, #104]	; (8014774 <SDMMC_GetCmdResp3+0x74>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4a1a      	ldr	r2, [pc, #104]	; (8014778 <SDMMC_GetCmdResp3+0x78>)
 801470e:	fba2 2303 	umull	r2, r3, r2, r3
 8014712:	0a5b      	lsrs	r3, r3, #9
 8014714:	f241 3288 	movw	r2, #5000	; 0x1388
 8014718:	fb02 f303 	mul.w	r3, r2, r3
 801471c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	1e5a      	subs	r2, r3, #1
 8014722:	60fa      	str	r2, [r7, #12]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d102      	bne.n	801472e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801472c:	e01b      	b.n	8014766 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014732:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801473a:	2b00      	cmp	r3, #0
 801473c:	d0ef      	beq.n	801471e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014744:	2b00      	cmp	r3, #0
 8014746:	d1ea      	bne.n	801471e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801474c:	f003 0304 	and.w	r3, r3, #4
 8014750:	2b00      	cmp	r3, #0
 8014752:	d004      	beq.n	801475e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2204      	movs	r2, #4
 8014758:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801475a:	2304      	movs	r3, #4
 801475c:	e003      	b.n	8014766 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4a06      	ldr	r2, [pc, #24]	; (801477c <SDMMC_GetCmdResp3+0x7c>)
 8014762:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	3714      	adds	r7, #20
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr
 8014772:	bf00      	nop
 8014774:	2000001c 	.word	0x2000001c
 8014778:	10624dd3 	.word	0x10624dd3
 801477c:	002000c5 	.word	0x002000c5

08014780 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b088      	sub	sp, #32
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	460b      	mov	r3, r1
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801478e:	4b35      	ldr	r3, [pc, #212]	; (8014864 <SDMMC_GetCmdResp6+0xe4>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	4a35      	ldr	r2, [pc, #212]	; (8014868 <SDMMC_GetCmdResp6+0xe8>)
 8014794:	fba2 2303 	umull	r2, r3, r2, r3
 8014798:	0a5b      	lsrs	r3, r3, #9
 801479a:	f241 3288 	movw	r2, #5000	; 0x1388
 801479e:	fb02 f303 	mul.w	r3, r2, r3
 80147a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	1e5a      	subs	r2, r3, #1
 80147a8:	61fa      	str	r2, [r7, #28]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d102      	bne.n	80147b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80147ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80147b2:	e052      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147b8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d0ef      	beq.n	80147a4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1ea      	bne.n	80147a4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147d2:	f003 0304 	and.w	r3, r3, #4
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d004      	beq.n	80147e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2204      	movs	r2, #4
 80147de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80147e0:	2304      	movs	r3, #4
 80147e2:	e03a      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147e8:	f003 0301 	and.w	r3, r3, #1
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d004      	beq.n	80147fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2201      	movs	r2, #1
 80147f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80147f6:	2301      	movs	r3, #1
 80147f8:	e02f      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80147fa:	68f8      	ldr	r0, [r7, #12]
 80147fc:	f7ff fb7c 	bl	8013ef8 <SDMMC_GetCommandResponse>
 8014800:	4603      	mov	r3, r0
 8014802:	461a      	mov	r2, r3
 8014804:	7afb      	ldrb	r3, [r7, #11]
 8014806:	4293      	cmp	r3, r2
 8014808:	d001      	beq.n	801480e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801480a:	2301      	movs	r3, #1
 801480c:	e025      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	4a16      	ldr	r2, [pc, #88]	; (801486c <SDMMC_GetCmdResp6+0xec>)
 8014812:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014814:	2100      	movs	r1, #0
 8014816:	68f8      	ldr	r0, [r7, #12]
 8014818:	f7ff fb7b 	bl	8013f12 <SDMMC_GetResponse>
 801481c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014824:	2b00      	cmp	r3, #0
 8014826:	d106      	bne.n	8014836 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	0c1b      	lsrs	r3, r3, #16
 801482c:	b29a      	uxth	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014832:	2300      	movs	r3, #0
 8014834:	e011      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801483c:	2b00      	cmp	r3, #0
 801483e:	d002      	beq.n	8014846 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014844:	e009      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014854:	e001      	b.n	801485a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801485a:	4618      	mov	r0, r3
 801485c:	3720      	adds	r7, #32
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	2000001c 	.word	0x2000001c
 8014868:	10624dd3 	.word	0x10624dd3
 801486c:	002000c5 	.word	0x002000c5

08014870 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014870:	b480      	push	{r7}
 8014872:	b085      	sub	sp, #20
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014878:	4b22      	ldr	r3, [pc, #136]	; (8014904 <SDMMC_GetCmdResp7+0x94>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4a22      	ldr	r2, [pc, #136]	; (8014908 <SDMMC_GetCmdResp7+0x98>)
 801487e:	fba2 2303 	umull	r2, r3, r2, r3
 8014882:	0a5b      	lsrs	r3, r3, #9
 8014884:	f241 3288 	movw	r2, #5000	; 0x1388
 8014888:	fb02 f303 	mul.w	r3, r2, r3
 801488c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	1e5a      	subs	r2, r3, #1
 8014892:	60fa      	str	r2, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d102      	bne.n	801489e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801489c:	e02c      	b.n	80148f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d0ef      	beq.n	801488e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1ea      	bne.n	801488e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148bc:	f003 0304 	and.w	r3, r3, #4
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d004      	beq.n	80148ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2204      	movs	r2, #4
 80148c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80148ca:	2304      	movs	r3, #4
 80148cc:	e014      	b.n	80148f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148d2:	f003 0301 	and.w	r3, r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2201      	movs	r2, #1
 80148de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80148e0:	2301      	movs	r3, #1
 80148e2:	e009      	b.n	80148f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d002      	beq.n	80148f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2240      	movs	r2, #64	; 0x40
 80148f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80148f6:	2300      	movs	r3, #0

}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3714      	adds	r7, #20
 80148fc:	46bd      	mov	sp, r7
 80148fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014902:	4770      	bx	lr
 8014904:	2000001c 	.word	0x2000001c
 8014908:	10624dd3 	.word	0x10624dd3

0801490c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801490c:	b480      	push	{r7}
 801490e:	b085      	sub	sp, #20
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014914:	4b11      	ldr	r3, [pc, #68]	; (801495c <SDMMC_GetCmdError+0x50>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	4a11      	ldr	r2, [pc, #68]	; (8014960 <SDMMC_GetCmdError+0x54>)
 801491a:	fba2 2303 	umull	r2, r3, r2, r3
 801491e:	0a5b      	lsrs	r3, r3, #9
 8014920:	f241 3288 	movw	r2, #5000	; 0x1388
 8014924:	fb02 f303 	mul.w	r3, r2, r3
 8014928:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	1e5a      	subs	r2, r3, #1
 801492e:	60fa      	str	r2, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d102      	bne.n	801493a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014938:	e009      	b.n	801494e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014942:	2b00      	cmp	r3, #0
 8014944:	d0f1      	beq.n	801492a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4a06      	ldr	r2, [pc, #24]	; (8014964 <SDMMC_GetCmdError+0x58>)
 801494a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801494c:	2300      	movs	r3, #0
}
 801494e:	4618      	mov	r0, r3
 8014950:	3714      	adds	r7, #20
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr
 801495a:	bf00      	nop
 801495c:	2000001c 	.word	0x2000001c
 8014960:	10624dd3 	.word	0x10624dd3
 8014964:	002000c5 	.word	0x002000c5

08014968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014968:	b084      	sub	sp, #16
 801496a:	b580      	push	{r7, lr}
 801496c:	b084      	sub	sp, #16
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	f107 001c 	add.w	r0, r7, #28
 8014976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497c:	2b01      	cmp	r3, #1
 801497e:	d120      	bne.n	80149c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	68da      	ldr	r2, [r3, #12]
 8014990:	4b2a      	ldr	r3, [pc, #168]	; (8014a3c <USB_CoreInit+0xd4>)
 8014992:	4013      	ands	r3, r2
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80149a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d105      	bne.n	80149b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 f9ee 	bl	8014d98 <USB_CoreReset>
 80149bc:	4603      	mov	r3, r0
 80149be:	73fb      	strb	r3, [r7, #15]
 80149c0:	e01a      	b.n	80149f8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68db      	ldr	r3, [r3, #12]
 80149c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 f9e2 	bl	8014d98 <USB_CoreReset>
 80149d4:	4603      	mov	r3, r0
 80149d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80149d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	639a      	str	r2, [r3, #56]	; 0x38
 80149ea:	e005      	b.n	80149f8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80149f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fa:	2b01      	cmp	r3, #1
 80149fc:	d116      	bne.n	8014a2c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014a0c:	4b0c      	ldr	r3, [pc, #48]	; (8014a40 <USB_CoreInit+0xd8>)
 8014a0e:	4313      	orrs	r3, r2
 8014a10:	687a      	ldr	r2, [r7, #4]
 8014a12:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	689b      	ldr	r3, [r3, #8]
 8014a18:	f043 0206 	orr.w	r2, r3, #6
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	f043 0220 	orr.w	r2, r3, #32
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014a38:	b004      	add	sp, #16
 8014a3a:	4770      	bx	lr
 8014a3c:	ffbdffbf 	.word	0xffbdffbf
 8014a40:	03ee0000 	.word	0x03ee0000

08014a44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b083      	sub	sp, #12
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	689b      	ldr	r3, [r3, #8]
 8014a50:	f043 0201 	orr.w	r2, r3, #1
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014a58:	2300      	movs	r3, #0
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	370c      	adds	r7, #12
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr

08014a66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a66:	b480      	push	{r7}
 8014a68:	b083      	sub	sp, #12
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	689b      	ldr	r3, [r3, #8]
 8014a72:	f023 0201 	bic.w	r2, r3, #1
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014a7a:	2300      	movs	r3, #0
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	370c      	adds	r7, #12
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr

08014a88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b084      	sub	sp, #16
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	460b      	mov	r3, r1
 8014a92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014a94:	2300      	movs	r3, #0
 8014a96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014aa4:	78fb      	ldrb	r3, [r7, #3]
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	d115      	bne.n	8014ad6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014ab6:	2001      	movs	r0, #1
 8014ab8:	f7f0 faac 	bl	8005014 <HAL_Delay>
      ms++;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 f95a 	bl	8014d7c <USB_GetMode>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d01e      	beq.n	8014b0c <USB_SetCurrentMode+0x84>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	2b31      	cmp	r3, #49	; 0x31
 8014ad2:	d9f0      	bls.n	8014ab6 <USB_SetCurrentMode+0x2e>
 8014ad4:	e01a      	b.n	8014b0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014ad6:	78fb      	ldrb	r3, [r7, #3]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d115      	bne.n	8014b08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014ae8:	2001      	movs	r0, #1
 8014aea:	f7f0 fa93 	bl	8005014 <HAL_Delay>
      ms++;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	3301      	adds	r3, #1
 8014af2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 f941 	bl	8014d7c <USB_GetMode>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d005      	beq.n	8014b0c <USB_SetCurrentMode+0x84>
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	2b31      	cmp	r3, #49	; 0x31
 8014b04:	d9f0      	bls.n	8014ae8 <USB_SetCurrentMode+0x60>
 8014b06:	e001      	b.n	8014b0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e005      	b.n	8014b18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b32      	cmp	r3, #50	; 0x32
 8014b10:	d101      	bne.n	8014b16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014b12:	2301      	movs	r3, #1
 8014b14:	e000      	b.n	8014b18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014b16:	2300      	movs	r3, #0
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3710      	adds	r7, #16
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}

08014b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014b20:	b480      	push	{r7}
 8014b22:	b085      	sub	sp, #20
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3301      	adds	r3, #1
 8014b32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	4a13      	ldr	r2, [pc, #76]	; (8014b84 <USB_FlushTxFifo+0x64>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d901      	bls.n	8014b40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014b3c:	2303      	movs	r3, #3
 8014b3e:	e01b      	b.n	8014b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	691b      	ldr	r3, [r3, #16]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	daf2      	bge.n	8014b2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	019b      	lsls	r3, r3, #6
 8014b50:	f043 0220 	orr.w	r2, r3, #32
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	4a08      	ldr	r2, [pc, #32]	; (8014b84 <USB_FlushTxFifo+0x64>)
 8014b62:	4293      	cmp	r3, r2
 8014b64:	d901      	bls.n	8014b6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014b66:	2303      	movs	r3, #3
 8014b68:	e006      	b.n	8014b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	f003 0320 	and.w	r3, r3, #32
 8014b72:	2b20      	cmp	r3, #32
 8014b74:	d0f0      	beq.n	8014b58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014b76:	2300      	movs	r3, #0
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3714      	adds	r7, #20
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr
 8014b84:	00030d40 	.word	0x00030d40

08014b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b085      	sub	sp, #20
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014b90:	2300      	movs	r3, #0
 8014b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	3301      	adds	r3, #1
 8014b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	4a11      	ldr	r2, [pc, #68]	; (8014be4 <USB_FlushRxFifo+0x5c>)
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	d901      	bls.n	8014ba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014ba2:	2303      	movs	r3, #3
 8014ba4:	e018      	b.n	8014bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	691b      	ldr	r3, [r3, #16]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	daf2      	bge.n	8014b94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2210      	movs	r2, #16
 8014bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	4a08      	ldr	r2, [pc, #32]	; (8014be4 <USB_FlushRxFifo+0x5c>)
 8014bc2:	4293      	cmp	r3, r2
 8014bc4:	d901      	bls.n	8014bca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014bc6:	2303      	movs	r3, #3
 8014bc8:	e006      	b.n	8014bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	691b      	ldr	r3, [r3, #16]
 8014bce:	f003 0310 	and.w	r3, r3, #16
 8014bd2:	2b10      	cmp	r3, #16
 8014bd4:	d0f0      	beq.n	8014bb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3714      	adds	r7, #20
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr
 8014be4:	00030d40 	.word	0x00030d40

08014be8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b089      	sub	sp, #36	; 0x24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	60b9      	str	r1, [r7, #8]
 8014bf2:	4611      	mov	r1, r2
 8014bf4:	461a      	mov	r2, r3
 8014bf6:	460b      	mov	r3, r1
 8014bf8:	71fb      	strb	r3, [r7, #7]
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014c06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d123      	bne.n	8014c56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014c0e:	88bb      	ldrh	r3, [r7, #4]
 8014c10:	3303      	adds	r3, #3
 8014c12:	089b      	lsrs	r3, r3, #2
 8014c14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014c16:	2300      	movs	r3, #0
 8014c18:	61bb      	str	r3, [r7, #24]
 8014c1a:	e018      	b.n	8014c4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014c1c:	79fb      	ldrb	r3, [r7, #7]
 8014c1e:	031a      	lsls	r2, r3, #12
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	4413      	add	r3, r2
 8014c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c28:	461a      	mov	r2, r3
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014c30:	69fb      	ldr	r3, [r7, #28]
 8014c32:	3301      	adds	r3, #1
 8014c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	3301      	adds	r3, #1
 8014c3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	3301      	adds	r3, #1
 8014c40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	3301      	adds	r3, #1
 8014c46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014c48:	69bb      	ldr	r3, [r7, #24]
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	61bb      	str	r3, [r7, #24]
 8014c4e:	69ba      	ldr	r2, [r7, #24]
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d3e2      	bcc.n	8014c1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014c56:	2300      	movs	r3, #0
}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3724      	adds	r7, #36	; 0x24
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014c64:	b480      	push	{r7}
 8014c66:	b08b      	sub	sp, #44	; 0x2c
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	4613      	mov	r3, r2
 8014c70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014c7a:	88fb      	ldrh	r3, [r7, #6]
 8014c7c:	089b      	lsrs	r3, r3, #2
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014c82:	88fb      	ldrh	r3, [r7, #6]
 8014c84:	f003 0303 	and.w	r3, r3, #3
 8014c88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	623b      	str	r3, [r7, #32]
 8014c8e:	e014      	b.n	8014cba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014c90:	69bb      	ldr	r3, [r7, #24]
 8014c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c96:	681a      	ldr	r2, [r3, #0]
 8014c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9e:	3301      	adds	r3, #1
 8014ca0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014caa:	3301      	adds	r3, #1
 8014cac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	623b      	str	r3, [r7, #32]
 8014cba:	6a3a      	ldr	r2, [r7, #32]
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d3e6      	bcc.n	8014c90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014cc2:	8bfb      	ldrh	r3, [r7, #30]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d01e      	beq.n	8014d06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	f107 0310 	add.w	r3, r7, #16
 8014cd8:	6812      	ldr	r2, [r2, #0]
 8014cda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014cdc:	693a      	ldr	r2, [r7, #16]
 8014cde:	6a3b      	ldr	r3, [r7, #32]
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	00db      	lsls	r3, r3, #3
 8014ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8014ce8:	b2da      	uxtb	r2, r3
 8014cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cec:	701a      	strb	r2, [r3, #0]
      i++;
 8014cee:	6a3b      	ldr	r3, [r7, #32]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014cfa:	8bfb      	ldrh	r3, [r7, #30]
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014d00:	8bfb      	ldrh	r3, [r7, #30]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1ea      	bne.n	8014cdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	372c      	adds	r7, #44	; 0x2c
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b085      	sub	sp, #20
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	695b      	ldr	r3, [r3, #20]
 8014d20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	699b      	ldr	r3, [r3, #24]
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	4013      	ands	r3, r2
 8014d2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8014d3a:	b480      	push	{r7}
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
 8014d42:	460b      	mov	r3, r1
 8014d44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8014d4a:	78fb      	ldrb	r3, [r7, #3]
 8014d4c:	015a      	lsls	r2, r3, #5
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	4413      	add	r3, r2
 8014d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d56:	689b      	ldr	r3, [r3, #8]
 8014d58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8014d5a:	78fb      	ldrb	r3, [r7, #3]
 8014d5c:	015a      	lsls	r2, r3, #5
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	4413      	add	r3, r2
 8014d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	68ba      	ldr	r2, [r7, #8]
 8014d6a:	4013      	ands	r3, r2
 8014d6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d6e:	68bb      	ldr	r3, [r7, #8]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3714      	adds	r7, #20
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr

08014d7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	695b      	ldr	r3, [r3, #20]
 8014d88:	f003 0301 	and.w	r3, r3, #1
}
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	370c      	adds	r7, #12
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014da0:	2300      	movs	r3, #0
 8014da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	3301      	adds	r3, #1
 8014da8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4a13      	ldr	r2, [pc, #76]	; (8014dfc <USB_CoreReset+0x64>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d901      	bls.n	8014db6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014db2:	2303      	movs	r3, #3
 8014db4:	e01b      	b.n	8014dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	691b      	ldr	r3, [r3, #16]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	daf2      	bge.n	8014da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	691b      	ldr	r3, [r3, #16]
 8014dc6:	f043 0201 	orr.w	r2, r3, #1
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	4a09      	ldr	r2, [pc, #36]	; (8014dfc <USB_CoreReset+0x64>)
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	d901      	bls.n	8014de0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014ddc:	2303      	movs	r3, #3
 8014dde:	e006      	b.n	8014dee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	691b      	ldr	r3, [r3, #16]
 8014de4:	f003 0301 	and.w	r3, r3, #1
 8014de8:	2b01      	cmp	r3, #1
 8014dea:	d0f0      	beq.n	8014dce <USB_CoreReset+0x36>

  return HAL_OK;
 8014dec:	2300      	movs	r3, #0
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3714      	adds	r7, #20
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	00030d40 	.word	0x00030d40

08014e00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014e00:	b084      	sub	sp, #16
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b086      	sub	sp, #24
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
 8014e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014e12:	2300      	movs	r3, #0
 8014e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e20:	461a      	mov	r2, r3
 8014e22:	2300      	movs	r3, #0
 8014e24:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d018      	beq.n	8014e7c <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8014e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d10a      	bne.n	8014e66 <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	68fa      	ldr	r2, [r7, #12]
 8014e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e5e:	f043 0304 	orr.w	r3, r3, #4
 8014e62:	6013      	str	r3, [r2, #0]
 8014e64:	e014      	b.n	8014e90 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	68fa      	ldr	r2, [r7, #12]
 8014e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e74:	f023 0304 	bic.w	r3, r3, #4
 8014e78:	6013      	str	r3, [r2, #0]
 8014e7a:	e009      	b.n	8014e90 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014e8a:	f023 0304 	bic.w	r3, r3, #4
 8014e8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014e90:	2110      	movs	r1, #16
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ff fe44 	bl	8014b20 <USB_FlushTxFifo>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d001      	beq.n	8014ea2 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f7ff fe70 	bl	8014b88 <USB_FlushRxFifo>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d001      	beq.n	8014eb2 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8014eae:	2301      	movs	r3, #1
 8014eb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	613b      	str	r3, [r7, #16]
 8014eb6:	e015      	b.n	8014ee4 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	015a      	lsls	r2, r3, #5
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	4413      	add	r3, r2
 8014ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	015a      	lsls	r2, r3, #5
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ed8:	461a      	mov	r2, r3
 8014eda:	2300      	movs	r3, #0
 8014edc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	3301      	adds	r3, #1
 8014ee2:	613b      	str	r3, [r7, #16]
 8014ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee6:	693a      	ldr	r2, [r7, #16]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d3e5      	bcc.n	8014eb8 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ef8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00b      	beq.n	8014f1e <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4a13      	ldr	r2, [pc, #76]	; (8014f60 <USB_HostInit+0x160>)
 8014f12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4a13      	ldr	r2, [pc, #76]	; (8014f64 <USB_HostInit+0x164>)
 8014f18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8014f1c:	e009      	b.n	8014f32 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2280      	movs	r2, #128	; 0x80
 8014f22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	4a10      	ldr	r2, [pc, #64]	; (8014f68 <USB_HostInit+0x168>)
 8014f28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	4a0f      	ldr	r2, [pc, #60]	; (8014f6c <USB_HostInit+0x16c>)
 8014f2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d105      	bne.n	8014f44 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	699b      	ldr	r3, [r3, #24]
 8014f3c:	f043 0210 	orr.w	r2, r3, #16
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	699a      	ldr	r2, [r3, #24]
 8014f48:	4b09      	ldr	r3, [pc, #36]	; (8014f70 <USB_HostInit+0x170>)
 8014f4a:	4313      	orrs	r3, r2
 8014f4c:	687a      	ldr	r2, [r7, #4]
 8014f4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8014f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3718      	adds	r7, #24
 8014f56:	46bd      	mov	sp, r7
 8014f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014f5c:	b004      	add	sp, #16
 8014f5e:	4770      	bx	lr
 8014f60:	01000200 	.word	0x01000200
 8014f64:	00e00300 	.word	0x00e00300
 8014f68:	00600080 	.word	0x00600080
 8014f6c:	004000e0 	.word	0x004000e0
 8014f70:	a3200008 	.word	0xa3200008

08014f74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8014f74:	b480      	push	{r7}
 8014f76:	b085      	sub	sp, #20
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	68fa      	ldr	r2, [r7, #12]
 8014f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014f92:	f023 0303 	bic.w	r3, r3, #3
 8014f96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	78fb      	ldrb	r3, [r7, #3]
 8014fa2:	f003 0303 	and.w	r3, r3, #3
 8014fa6:	68f9      	ldr	r1, [r7, #12]
 8014fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014fac:	4313      	orrs	r3, r2
 8014fae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014fb0:	78fb      	ldrb	r3, [r7, #3]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d107      	bne.n	8014fc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8014fc2:	6053      	str	r3, [r2, #4]
 8014fc4:	e00c      	b.n	8014fe0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8014fc6:	78fb      	ldrb	r3, [r7, #3]
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d107      	bne.n	8014fdc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014fd2:	461a      	mov	r2, r3
 8014fd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8014fd8:	6053      	str	r3, [r2, #4]
 8014fda:	e001      	b.n	8014fe0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8014fdc:	2301      	movs	r3, #1
 8014fde:	e000      	b.n	8014fe2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8014fe0:	2300      	movs	r3, #0
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3714      	adds	r7, #20
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr

08014fee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b084      	sub	sp, #16
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 801500e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8015010:	68bb      	ldr	r3, [r7, #8]
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801501c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 801501e:	2064      	movs	r0, #100	; 0x64
 8015020:	f7ef fff8 	bl	8005014 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015030:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8015032:	200a      	movs	r0, #10
 8015034:	f7ef ffee 	bl	8005014 <HAL_Delay>

  return HAL_OK;
 8015038:	2300      	movs	r3, #0
}
 801503a:	4618      	mov	r0, r3
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8015042:	b480      	push	{r7}
 8015044:	b085      	sub	sp, #20
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
 801504a:	460b      	mov	r3, r1
 801504c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8015052:	2300      	movs	r3, #0
 8015054:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8015066:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801506e:	2b00      	cmp	r3, #0
 8015070:	d109      	bne.n	8015086 <USB_DriveVbus+0x44>
 8015072:	78fb      	ldrb	r3, [r7, #3]
 8015074:	2b01      	cmp	r3, #1
 8015076:	d106      	bne.n	8015086 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8015080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015084:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801508c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015090:	d109      	bne.n	80150a6 <USB_DriveVbus+0x64>
 8015092:	78fb      	ldrb	r3, [r7, #3]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d106      	bne.n	80150a6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	68fa      	ldr	r2, [r7, #12]
 801509c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80150a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150a4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80150a6:	2300      	movs	r3, #0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3714      	adds	r7, #20
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80150b4:	b480      	push	{r7}
 80150b6:	b085      	sub	sp, #20
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80150c0:	2300      	movs	r3, #0
 80150c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	0c5b      	lsrs	r3, r3, #17
 80150d2:	f003 0303 	and.w	r3, r3, #3
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3714      	adds	r7, #20
 80150da:	46bd      	mov	sp, r7
 80150dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e0:	4770      	bx	lr

080150e2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80150e2:	b480      	push	{r7}
 80150e4:	b085      	sub	sp, #20
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150f4:	689b      	ldr	r3, [r3, #8]
 80150f6:	b29b      	uxth	r3, r3
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3714      	adds	r7, #20
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr

08015104 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b088      	sub	sp, #32
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	4608      	mov	r0, r1
 801510e:	4611      	mov	r1, r2
 8015110:	461a      	mov	r2, r3
 8015112:	4603      	mov	r3, r0
 8015114:	70fb      	strb	r3, [r7, #3]
 8015116:	460b      	mov	r3, r1
 8015118:	70bb      	strb	r3, [r7, #2]
 801511a:	4613      	mov	r3, r2
 801511c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801511e:	2300      	movs	r3, #0
 8015120:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8015126:	78fb      	ldrb	r3, [r7, #3]
 8015128:	015a      	lsls	r2, r3, #5
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	4413      	add	r3, r2
 801512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015132:	461a      	mov	r2, r3
 8015134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015138:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801513a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801513e:	2b03      	cmp	r3, #3
 8015140:	d87e      	bhi.n	8015240 <USB_HC_Init+0x13c>
 8015142:	a201      	add	r2, pc, #4	; (adr r2, 8015148 <USB_HC_Init+0x44>)
 8015144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015148:	08015159 	.word	0x08015159
 801514c:	08015203 	.word	0x08015203
 8015150:	08015159 	.word	0x08015159
 8015154:	080151c5 	.word	0x080151c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015158:	78fb      	ldrb	r3, [r7, #3]
 801515a:	015a      	lsls	r2, r3, #5
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	4413      	add	r3, r2
 8015160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015164:	461a      	mov	r2, r3
 8015166:	f240 439d 	movw	r3, #1181	; 0x49d
 801516a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801516c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8015170:	2b00      	cmp	r3, #0
 8015172:	da10      	bge.n	8015196 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015174:	78fb      	ldrb	r3, [r7, #3]
 8015176:	015a      	lsls	r2, r3, #5
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	4413      	add	r3, r2
 801517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	78fa      	ldrb	r2, [r7, #3]
 8015184:	0151      	lsls	r1, r2, #5
 8015186:	693a      	ldr	r2, [r7, #16]
 8015188:	440a      	add	r2, r1
 801518a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801518e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015192:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8015194:	e057      	b.n	8015246 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d051      	beq.n	8015246 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80151a2:	78fb      	ldrb	r3, [r7, #3]
 80151a4:	015a      	lsls	r2, r3, #5
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	4413      	add	r3, r2
 80151aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	78fa      	ldrb	r2, [r7, #3]
 80151b2:	0151      	lsls	r1, r2, #5
 80151b4:	693a      	ldr	r2, [r7, #16]
 80151b6:	440a      	add	r2, r1
 80151b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80151bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80151c0:	60d3      	str	r3, [r2, #12]
      break;
 80151c2:	e040      	b.n	8015246 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80151c4:	78fb      	ldrb	r3, [r7, #3]
 80151c6:	015a      	lsls	r2, r3, #5
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	4413      	add	r3, r2
 80151cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151d0:	461a      	mov	r2, r3
 80151d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80151d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80151d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	da34      	bge.n	801524a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80151e0:	78fb      	ldrb	r3, [r7, #3]
 80151e2:	015a      	lsls	r2, r3, #5
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	4413      	add	r3, r2
 80151e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	78fa      	ldrb	r2, [r7, #3]
 80151f0:	0151      	lsls	r1, r2, #5
 80151f2:	693a      	ldr	r2, [r7, #16]
 80151f4:	440a      	add	r2, r1
 80151f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80151fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015200:	e023      	b.n	801524a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015202:	78fb      	ldrb	r3, [r7, #3]
 8015204:	015a      	lsls	r2, r3, #5
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	4413      	add	r3, r2
 801520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801520e:	461a      	mov	r2, r3
 8015210:	f240 2325 	movw	r3, #549	; 0x225
 8015214:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015216:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801521a:	2b00      	cmp	r3, #0
 801521c:	da17      	bge.n	801524e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801521e:	78fb      	ldrb	r3, [r7, #3]
 8015220:	015a      	lsls	r2, r3, #5
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	4413      	add	r3, r2
 8015226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	78fa      	ldrb	r2, [r7, #3]
 801522e:	0151      	lsls	r1, r2, #5
 8015230:	693a      	ldr	r2, [r7, #16]
 8015232:	440a      	add	r2, r1
 8015234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015238:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801523c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801523e:	e006      	b.n	801524e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8015240:	2301      	movs	r3, #1
 8015242:	77fb      	strb	r3, [r7, #31]
      break;
 8015244:	e004      	b.n	8015250 <USB_HC_Init+0x14c>
      break;
 8015246:	bf00      	nop
 8015248:	e002      	b.n	8015250 <USB_HC_Init+0x14c>
      break;
 801524a:	bf00      	nop
 801524c:	e000      	b.n	8015250 <USB_HC_Init+0x14c>
      break;
 801524e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8015250:	78fb      	ldrb	r3, [r7, #3]
 8015252:	015a      	lsls	r2, r3, #5
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	4413      	add	r3, r2
 8015258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801525c:	68db      	ldr	r3, [r3, #12]
 801525e:	78fa      	ldrb	r2, [r7, #3]
 8015260:	0151      	lsls	r1, r2, #5
 8015262:	693a      	ldr	r2, [r7, #16]
 8015264:	440a      	add	r2, r1
 8015266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801526a:	f043 0302 	orr.w	r3, r3, #2
 801526e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015270:	693b      	ldr	r3, [r7, #16]
 8015272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015276:	699a      	ldr	r2, [r3, #24]
 8015278:	78fb      	ldrb	r3, [r7, #3]
 801527a:	f003 030f 	and.w	r3, r3, #15
 801527e:	2101      	movs	r1, #1
 8015280:	fa01 f303 	lsl.w	r3, r1, r3
 8015284:	6939      	ldr	r1, [r7, #16]
 8015286:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801528a:	4313      	orrs	r3, r2
 801528c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	699b      	ldr	r3, [r3, #24]
 8015292:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801529a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	da03      	bge.n	80152aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80152a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152a6:	61bb      	str	r3, [r7, #24]
 80152a8:	e001      	b.n	80152ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80152aa:	2300      	movs	r3, #0
 80152ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7ff ff00 	bl	80150b4 <USB_GetHostSpeed>
 80152b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80152b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80152ba:	2b02      	cmp	r3, #2
 80152bc:	d106      	bne.n	80152cc <USB_HC_Init+0x1c8>
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2b02      	cmp	r3, #2
 80152c2:	d003      	beq.n	80152cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80152c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80152c8:	617b      	str	r3, [r7, #20]
 80152ca:	e001      	b.n	80152d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80152cc:	2300      	movs	r3, #0
 80152ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80152d0:	787b      	ldrb	r3, [r7, #1]
 80152d2:	059b      	lsls	r3, r3, #22
 80152d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80152d8:	78bb      	ldrb	r3, [r7, #2]
 80152da:	02db      	lsls	r3, r3, #11
 80152dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80152e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80152e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80152e6:	049b      	lsls	r3, r3, #18
 80152e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80152ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80152ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80152f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80152f4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	431a      	orrs	r2, r3
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80152fe:	78fa      	ldrb	r2, [r7, #3]
 8015300:	0151      	lsls	r1, r2, #5
 8015302:	693a      	ldr	r2, [r7, #16]
 8015304:	440a      	add	r2, r1
 8015306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801530a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801530e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8015310:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015314:	2b03      	cmp	r3, #3
 8015316:	d003      	beq.n	8015320 <USB_HC_Init+0x21c>
 8015318:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801531c:	2b01      	cmp	r3, #1
 801531e:	d10f      	bne.n	8015340 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8015320:	78fb      	ldrb	r3, [r7, #3]
 8015322:	015a      	lsls	r2, r3, #5
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	4413      	add	r3, r2
 8015328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	78fa      	ldrb	r2, [r7, #3]
 8015330:	0151      	lsls	r1, r2, #5
 8015332:	693a      	ldr	r2, [r7, #16]
 8015334:	440a      	add	r2, r1
 8015336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801533a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801533e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8015340:	7ffb      	ldrb	r3, [r7, #31]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3720      	adds	r7, #32
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
 801534a:	bf00      	nop

0801534c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b08c      	sub	sp, #48	; 0x30
 8015350:	af02      	add	r7, sp, #8
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	60b9      	str	r1, [r7, #8]
 8015356:	4613      	mov	r3, r2
 8015358:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	785b      	ldrb	r3, [r3, #1]
 8015362:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8015364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015368:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015372:	2b00      	cmp	r3, #0
 8015374:	d02d      	beq.n	80153d2 <USB_HC_StartXfer+0x86>
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	791b      	ldrb	r3, [r3, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d129      	bne.n	80153d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801537e:	79fb      	ldrb	r3, [r7, #7]
 8015380:	2b01      	cmp	r3, #1
 8015382:	d117      	bne.n	80153b4 <USB_HC_StartXfer+0x68>
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	79db      	ldrb	r3, [r3, #7]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d003      	beq.n	8015394 <USB_HC_StartXfer+0x48>
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	79db      	ldrb	r3, [r3, #7]
 8015390:	2b02      	cmp	r3, #2
 8015392:	d10f      	bne.n	80153b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8015394:	69fb      	ldr	r3, [r7, #28]
 8015396:	015a      	lsls	r2, r3, #5
 8015398:	6a3b      	ldr	r3, [r7, #32]
 801539a:	4413      	add	r3, r2
 801539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	69fa      	ldr	r2, [r7, #28]
 80153a4:	0151      	lsls	r1, r2, #5
 80153a6:	6a3a      	ldr	r2, [r7, #32]
 80153a8:	440a      	add	r2, r1
 80153aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80153ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80153b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d10b      	bne.n	80153d2 <USB_HC_StartXfer+0x86>
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	795b      	ldrb	r3, [r3, #5]
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d107      	bne.n	80153d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	785b      	ldrb	r3, [r3, #1]
 80153c6:	4619      	mov	r1, r3
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 fa0f 	bl	80157ec <USB_DoPing>
      return HAL_OK;
 80153ce:	2300      	movs	r3, #0
 80153d0:	e0f8      	b.n	80155c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	695b      	ldr	r3, [r3, #20]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d018      	beq.n	801540c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	695b      	ldr	r3, [r3, #20]
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	8912      	ldrh	r2, [r2, #8]
 80153e2:	4413      	add	r3, r2
 80153e4:	3b01      	subs	r3, #1
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	8912      	ldrh	r2, [r2, #8]
 80153ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80153ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80153f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153f2:	8b7b      	ldrh	r3, [r7, #26]
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d90b      	bls.n	8015410 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80153f8:	8b7b      	ldrh	r3, [r7, #26]
 80153fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80153fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	8912      	ldrh	r2, [r2, #8]
 8015402:	fb03 f202 	mul.w	r2, r3, r2
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	611a      	str	r2, [r3, #16]
 801540a:	e001      	b.n	8015410 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 801540c:	2301      	movs	r3, #1
 801540e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	78db      	ldrb	r3, [r3, #3]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d007      	beq.n	8015428 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8015418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801541a:	68ba      	ldr	r2, [r7, #8]
 801541c:	8912      	ldrh	r2, [r2, #8]
 801541e:	fb03 f202 	mul.w	r2, r3, r2
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	611a      	str	r2, [r3, #16]
 8015426:	e003      	b.n	8015430 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	695a      	ldr	r2, [r3, #20]
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015430:	68bb      	ldr	r3, [r7, #8]
 8015432:	691b      	ldr	r3, [r3, #16]
 8015434:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801543a:	04d9      	lsls	r1, r3, #19
 801543c:	4b63      	ldr	r3, [pc, #396]	; (80155cc <USB_HC_StartXfer+0x280>)
 801543e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8015440:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	7a9b      	ldrb	r3, [r3, #10]
 8015446:	075b      	lsls	r3, r3, #29
 8015448:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801544c:	69f9      	ldr	r1, [r7, #28]
 801544e:	0148      	lsls	r0, r1, #5
 8015450:	6a39      	ldr	r1, [r7, #32]
 8015452:	4401      	add	r1, r0
 8015454:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015458:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 801545a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801545c:	79fb      	ldrb	r3, [r7, #7]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d009      	beq.n	8015476 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	68d9      	ldr	r1, [r3, #12]
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	015a      	lsls	r2, r3, #5
 801546a:	6a3b      	ldr	r3, [r7, #32]
 801546c:	4413      	add	r3, r2
 801546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015472:	460a      	mov	r2, r1
 8015474:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801547c:	689b      	ldr	r3, [r3, #8]
 801547e:	f003 0301 	and.w	r3, r3, #1
 8015482:	2b00      	cmp	r3, #0
 8015484:	bf0c      	ite	eq
 8015486:	2301      	moveq	r3, #1
 8015488:	2300      	movne	r3, #0
 801548a:	b2db      	uxtb	r3, r3
 801548c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	015a      	lsls	r2, r3, #5
 8015492:	6a3b      	ldr	r3, [r7, #32]
 8015494:	4413      	add	r3, r2
 8015496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	69fa      	ldr	r2, [r7, #28]
 801549e:	0151      	lsls	r1, r2, #5
 80154a0:	6a3a      	ldr	r2, [r7, #32]
 80154a2:	440a      	add	r2, r1
 80154a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80154a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80154ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	015a      	lsls	r2, r3, #5
 80154b2:	6a3b      	ldr	r3, [r7, #32]
 80154b4:	4413      	add	r3, r2
 80154b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154ba:	681a      	ldr	r2, [r3, #0]
 80154bc:	7e7b      	ldrb	r3, [r7, #25]
 80154be:	075b      	lsls	r3, r3, #29
 80154c0:	69f9      	ldr	r1, [r7, #28]
 80154c2:	0148      	lsls	r0, r1, #5
 80154c4:	6a39      	ldr	r1, [r7, #32]
 80154c6:	4401      	add	r1, r0
 80154c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80154cc:	4313      	orrs	r3, r2
 80154ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	015a      	lsls	r2, r3, #5
 80154d4:	6a3b      	ldr	r3, [r7, #32]
 80154d6:	4413      	add	r3, r2
 80154d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80154e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	78db      	ldrb	r3, [r3, #3]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d004      	beq.n	80154fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80154f6:	613b      	str	r3, [r7, #16]
 80154f8:	e003      	b.n	8015502 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015500:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015508:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801550a:	69fb      	ldr	r3, [r7, #28]
 801550c:	015a      	lsls	r2, r3, #5
 801550e:	6a3b      	ldr	r3, [r7, #32]
 8015510:	4413      	add	r3, r2
 8015512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015516:	461a      	mov	r2, r3
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 801551c:	79fb      	ldrb	r3, [r7, #7]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015522:	2300      	movs	r3, #0
 8015524:	e04e      	b.n	80155c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	78db      	ldrb	r3, [r3, #3]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d149      	bne.n	80155c2 <USB_HC_StartXfer+0x276>
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d045      	beq.n	80155c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	79db      	ldrb	r3, [r3, #7]
 801553a:	2b03      	cmp	r3, #3
 801553c:	d830      	bhi.n	80155a0 <USB_HC_StartXfer+0x254>
 801553e:	a201      	add	r2, pc, #4	; (adr r2, 8015544 <USB_HC_StartXfer+0x1f8>)
 8015540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015544:	08015555 	.word	0x08015555
 8015548:	08015579 	.word	0x08015579
 801554c:	08015555 	.word	0x08015555
 8015550:	08015579 	.word	0x08015579
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	695b      	ldr	r3, [r3, #20]
 8015558:	3303      	adds	r3, #3
 801555a:	089b      	lsrs	r3, r3, #2
 801555c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801555e:	8afa      	ldrh	r2, [r7, #22]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015564:	b29b      	uxth	r3, r3
 8015566:	429a      	cmp	r2, r3
 8015568:	d91c      	bls.n	80155a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	699b      	ldr	r3, [r3, #24]
 801556e:	f043 0220 	orr.w	r2, r3, #32
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	619a      	str	r2, [r3, #24]
        }
        break;
 8015576:	e015      	b.n	80155a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	695b      	ldr	r3, [r3, #20]
 801557c:	3303      	adds	r3, #3
 801557e:	089b      	lsrs	r3, r3, #2
 8015580:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015582:	8afa      	ldrh	r2, [r7, #22]
 8015584:	6a3b      	ldr	r3, [r7, #32]
 8015586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801558a:	691b      	ldr	r3, [r3, #16]
 801558c:	b29b      	uxth	r3, r3
 801558e:	429a      	cmp	r2, r3
 8015590:	d90a      	bls.n	80155a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	699b      	ldr	r3, [r3, #24]
 8015596:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	619a      	str	r2, [r3, #24]
        }
        break;
 801559e:	e003      	b.n	80155a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80155a0:	bf00      	nop
 80155a2:	e002      	b.n	80155aa <USB_HC_StartXfer+0x25e>
        break;
 80155a4:	bf00      	nop
 80155a6:	e000      	b.n	80155aa <USB_HC_StartXfer+0x25e>
        break;
 80155a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	68d9      	ldr	r1, [r3, #12]
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	785a      	ldrb	r2, [r3, #1]
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	695b      	ldr	r3, [r3, #20]
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	2000      	movs	r0, #0
 80155ba:	9000      	str	r0, [sp, #0]
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f7ff fb13 	bl	8014be8 <USB_WritePacket>
  }

  return HAL_OK;
 80155c2:	2300      	movs	r3, #0
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3728      	adds	r7, #40	; 0x28
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	1ff80000 	.word	0x1ff80000

080155d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b085      	sub	sp, #20
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	b29b      	uxth	r3, r3
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr

080155f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80155f2:	b480      	push	{r7}
 80155f4:	b089      	sub	sp, #36	; 0x24
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	6078      	str	r0, [r7, #4]
 80155fa:	460b      	mov	r3, r1
 80155fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015602:	78fb      	ldrb	r3, [r7, #3]
 8015604:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8015606:	2300      	movs	r3, #0
 8015608:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	015a      	lsls	r2, r3, #5
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	4413      	add	r3, r2
 8015612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	0c9b      	lsrs	r3, r3, #18
 801561a:	f003 0303 	and.w	r3, r3, #3
 801561e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	015a      	lsls	r2, r3, #5
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	4413      	add	r3, r2
 8015628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	0fdb      	lsrs	r3, r3, #31
 8015630:	f003 0301 	and.w	r3, r3, #1
 8015634:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	689b      	ldr	r3, [r3, #8]
 801563a:	f003 0320 	and.w	r3, r3, #32
 801563e:	2b20      	cmp	r3, #32
 8015640:	d104      	bne.n	801564c <USB_HC_Halt+0x5a>
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8015648:	2300      	movs	r3, #0
 801564a:	e0c8      	b.n	80157de <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d002      	beq.n	8015658 <USB_HC_Halt+0x66>
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2b02      	cmp	r3, #2
 8015656:	d163      	bne.n	8015720 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	015a      	lsls	r2, r3, #5
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	4413      	add	r3, r2
 8015660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	69ba      	ldr	r2, [r7, #24]
 8015668:	0151      	lsls	r1, r2, #5
 801566a:	69fa      	ldr	r2, [r7, #28]
 801566c:	440a      	add	r2, r1
 801566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015676:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	689b      	ldr	r3, [r3, #8]
 801567c:	f003 0320 	and.w	r3, r3, #32
 8015680:	2b00      	cmp	r3, #0
 8015682:	f040 80ab 	bne.w	80157dc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801568a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801568e:	2b00      	cmp	r3, #0
 8015690:	d133      	bne.n	80156fa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	015a      	lsls	r2, r3, #5
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	4413      	add	r3, r2
 801569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	0151      	lsls	r1, r2, #5
 80156a4:	69fa      	ldr	r2, [r7, #28]
 80156a6:	440a      	add	r2, r1
 80156a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80156b2:	69bb      	ldr	r3, [r7, #24]
 80156b4:	015a      	lsls	r2, r3, #5
 80156b6:	69fb      	ldr	r3, [r7, #28]
 80156b8:	4413      	add	r3, r2
 80156ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	69ba      	ldr	r2, [r7, #24]
 80156c2:	0151      	lsls	r1, r2, #5
 80156c4:	69fa      	ldr	r2, [r7, #28]
 80156c6:	440a      	add	r2, r1
 80156c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80156d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	3301      	adds	r3, #1
 80156d6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80156de:	d81d      	bhi.n	801571c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	015a      	lsls	r2, r3, #5
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	4413      	add	r3, r2
 80156e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80156f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80156f6:	d0ec      	beq.n	80156d2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80156f8:	e070      	b.n	80157dc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	015a      	lsls	r2, r3, #5
 80156fe:	69fb      	ldr	r3, [r7, #28]
 8015700:	4413      	add	r3, r2
 8015702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	69ba      	ldr	r2, [r7, #24]
 801570a:	0151      	lsls	r1, r2, #5
 801570c:	69fa      	ldr	r2, [r7, #28]
 801570e:	440a      	add	r2, r1
 8015710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015718:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801571a:	e05f      	b.n	80157dc <USB_HC_Halt+0x1ea>
            break;
 801571c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801571e:	e05d      	b.n	80157dc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	015a      	lsls	r2, r3, #5
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	4413      	add	r3, r2
 8015728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	69ba      	ldr	r2, [r7, #24]
 8015730:	0151      	lsls	r1, r2, #5
 8015732:	69fa      	ldr	r2, [r7, #28]
 8015734:	440a      	add	r2, r1
 8015736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801573a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801573e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015746:	691b      	ldr	r3, [r3, #16]
 8015748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801574c:	2b00      	cmp	r3, #0
 801574e:	d133      	bne.n	80157b8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	015a      	lsls	r2, r3, #5
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	4413      	add	r3, r2
 8015758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	69ba      	ldr	r2, [r7, #24]
 8015760:	0151      	lsls	r1, r2, #5
 8015762:	69fa      	ldr	r2, [r7, #28]
 8015764:	440a      	add	r2, r1
 8015766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801576a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801576e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015770:	69bb      	ldr	r3, [r7, #24]
 8015772:	015a      	lsls	r2, r3, #5
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	4413      	add	r3, r2
 8015778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	69ba      	ldr	r2, [r7, #24]
 8015780:	0151      	lsls	r1, r2, #5
 8015782:	69fa      	ldr	r2, [r7, #28]
 8015784:	440a      	add	r2, r1
 8015786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801578a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801578e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	3301      	adds	r3, #1
 8015794:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801579c:	d81d      	bhi.n	80157da <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	015a      	lsls	r2, r3, #5
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	4413      	add	r3, r2
 80157a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80157b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80157b4:	d0ec      	beq.n	8015790 <USB_HC_Halt+0x19e>
 80157b6:	e011      	b.n	80157dc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80157b8:	69bb      	ldr	r3, [r7, #24]
 80157ba:	015a      	lsls	r2, r3, #5
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	4413      	add	r3, r2
 80157c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	69ba      	ldr	r2, [r7, #24]
 80157c8:	0151      	lsls	r1, r2, #5
 80157ca:	69fa      	ldr	r2, [r7, #28]
 80157cc:	440a      	add	r2, r1
 80157ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80157d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80157d6:	6013      	str	r3, [r2, #0]
 80157d8:	e000      	b.n	80157dc <USB_HC_Halt+0x1ea>
          break;
 80157da:	bf00      	nop
    }
  }

  return HAL_OK;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3724      	adds	r7, #36	; 0x24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e8:	4770      	bx	lr
	...

080157ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b087      	sub	sp, #28
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	460b      	mov	r3, r1
 80157f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80157fc:	78fb      	ldrb	r3, [r7, #3]
 80157fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015800:	2301      	movs	r3, #1
 8015802:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	04da      	lsls	r2, r3, #19
 8015808:	4b15      	ldr	r3, [pc, #84]	; (8015860 <USB_DoPing+0x74>)
 801580a:	4013      	ands	r3, r2
 801580c:	693a      	ldr	r2, [r7, #16]
 801580e:	0151      	lsls	r1, r2, #5
 8015810:	697a      	ldr	r2, [r7, #20]
 8015812:	440a      	add	r2, r1
 8015814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801581c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801581e:	693b      	ldr	r3, [r7, #16]
 8015820:	015a      	lsls	r2, r3, #5
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	4413      	add	r3, r2
 8015826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015834:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801583c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	015a      	lsls	r2, r3, #5
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	4413      	add	r3, r2
 8015846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801584a:	461a      	mov	r2, r3
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	371c      	adds	r7, #28
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	1ff80000 	.word	0x1ff80000

08015864 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b088      	sub	sp, #32
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8015874:	2300      	movs	r3, #0
 8015876:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7ff f8f4 	bl	8014a66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801587e:	2110      	movs	r1, #16
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7ff f94d 	bl	8014b20 <USB_FlushTxFifo>
 8015886:	4603      	mov	r3, r0
 8015888:	2b00      	cmp	r3, #0
 801588a:	d001      	beq.n	8015890 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 801588c:	2301      	movs	r3, #1
 801588e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f7ff f979 	bl	8014b88 <USB_FlushRxFifo>
 8015896:	4603      	mov	r3, r0
 8015898:	2b00      	cmp	r3, #0
 801589a:	d001      	beq.n	80158a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 801589c:	2301      	movs	r3, #1
 801589e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80158a0:	2300      	movs	r3, #0
 80158a2:	61bb      	str	r3, [r7, #24]
 80158a4:	e01f      	b.n	80158e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	015a      	lsls	r2, r3, #5
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	4413      	add	r3, r2
 80158ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80158bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80158cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	015a      	lsls	r2, r3, #5
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	4413      	add	r3, r2
 80158d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158da:	461a      	mov	r2, r3
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80158e0:	69bb      	ldr	r3, [r7, #24]
 80158e2:	3301      	adds	r3, #1
 80158e4:	61bb      	str	r3, [r7, #24]
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	2b0f      	cmp	r3, #15
 80158ea:	d9dc      	bls.n	80158a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80158ec:	2300      	movs	r3, #0
 80158ee:	61bb      	str	r3, [r7, #24]
 80158f0:	e034      	b.n	801595c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	015a      	lsls	r2, r3, #5
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	4413      	add	r3, r2
 80158fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015908:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015910:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015918:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	015a      	lsls	r2, r3, #5
 801591e:	697b      	ldr	r3, [r7, #20]
 8015920:	4413      	add	r3, r2
 8015922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015926:	461a      	mov	r2, r3
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	3301      	adds	r3, #1
 8015930:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015938:	d80c      	bhi.n	8015954 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801593a:	69bb      	ldr	r3, [r7, #24]
 801593c:	015a      	lsls	r2, r3, #5
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	4413      	add	r3, r2
 8015942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801594c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015950:	d0ec      	beq.n	801592c <USB_StopHost+0xc8>
 8015952:	e000      	b.n	8015956 <USB_StopHost+0xf2>
        break;
 8015954:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	3301      	adds	r3, #1
 801595a:	61bb      	str	r3, [r7, #24]
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	2b0f      	cmp	r3, #15
 8015960:	d9c7      	bls.n	80158f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015968:	461a      	mov	r2, r3
 801596a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801596e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015976:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f7ff f863 	bl	8014a44 <USB_EnableGlobalInt>

  return ret;
 801597e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015980:	4618      	mov	r0, r3
 8015982:	3720      	adds	r7, #32
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
 801598e:	60f8      	str	r0, [r7, #12]
 8015990:	60b9      	str	r1, [r7, #8]
 8015992:	4613      	mov	r3, r2
 8015994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d101      	bne.n	80159a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 801599c:	2302      	movs	r3, #2
 801599e:	e029      	b.n	80159f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	79fa      	ldrb	r2, [r7, #7]
 80159a4:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	2200      	movs	r2, #0
 80159ac:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f000 f81f 	bl	80159fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2200      	movs	r2, #0
 80159c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2200      	movs	r2, #0
 80159d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2200      	movs	r2, #0
 80159da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d003      	beq.n	80159ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	68ba      	ldr	r2, [r7, #8]
 80159e8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80159ec:	68f8      	ldr	r0, [r7, #12]
 80159ee:	f7ef f861 	bl	8004ab4 <USBH_LL_Init>

  return USBH_OK;
 80159f2:	2300      	movs	r3, #0
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3710      	adds	r7, #16
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b084      	sub	sp, #16
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015a04:	2300      	movs	r3, #0
 8015a06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015a08:	2300      	movs	r3, #0
 8015a0a:	60fb      	str	r3, [r7, #12]
 8015a0c:	e00a      	b.n	8015a24 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8015a16:	009b      	lsls	r3, r3, #2
 8015a18:	4413      	add	r3, r2
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	3301      	adds	r3, #1
 8015a22:	60fb      	str	r3, [r7, #12]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2b0f      	cmp	r3, #15
 8015a28:	d9f1      	bls.n	8015a0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	60fb      	str	r3, [r7, #12]
 8015a2e:	e009      	b.n	8015a44 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	4413      	add	r3, r2
 8015a36:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3301      	adds	r3, #1
 8015a42:	60fb      	str	r3, [r7, #12]
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a4a:	d3f1      	bcc.n	8015a30 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2200      	movs	r2, #0
 8015a50:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2200      	movs	r2, #0
 8015a56:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2201      	movs	r2, #1
 8015a5c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2200      	movs	r2, #0
 8015a62:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	2201      	movs	r2, #1
 8015a6a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2240      	movs	r2, #64	; 0x40
 8015a70:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2200      	movs	r2, #0
 8015a76:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2201      	movs	r2, #1
 8015a84:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	331c      	adds	r3, #28
 8015a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	f001 fd96 	bl	80175d4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f001 fd8d 	bl	80175d4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f203 3326 	addw	r3, r3, #806	; 0x326
 8015ac0:	2212      	movs	r2, #18
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f001 fd85 	bl	80175d4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015ad0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f001 fd7c 	bl	80175d4 <memset>

  return USBH_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8015ae6:	b480      	push	{r7}
 8015ae8:	b085      	sub	sp, #20
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015af0:	2300      	movs	r3, #0
 8015af2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d017      	beq.n	8015b2a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d10f      	bne.n	8015b24 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015b0a:	1c59      	adds	r1, r3, #1
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8015b18:	6839      	ldr	r1, [r7, #0]
 8015b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	73fb      	strb	r3, [r7, #15]
 8015b22:	e004      	b.n	8015b2e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015b24:	2302      	movs	r3, #2
 8015b26:	73fb      	strb	r3, [r7, #15]
 8015b28:	e001      	b.n	8015b2e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8015b2a:	2302      	movs	r3, #2
 8015b2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3714      	adds	r7, #20
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b085      	sub	sp, #20
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	460b      	mov	r3, r1
 8015b46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015b52:	78fa      	ldrb	r2, [r7, #3]
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d204      	bcs.n	8015b62 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	78fa      	ldrb	r2, [r7, #3]
 8015b5c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015b60:	e001      	b.n	8015b66 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015b62:	2302      	movs	r3, #2
 8015b64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3714      	adds	r7, #20
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b72:	4770      	bx	lr

08015b74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8015b74:	b480      	push	{r7}
 8015b76:	b087      	sub	sp, #28
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	4608      	mov	r0, r1
 8015b7e:	4611      	mov	r1, r2
 8015b80:	461a      	mov	r2, r3
 8015b82:	4603      	mov	r3, r0
 8015b84:	70fb      	strb	r3, [r7, #3]
 8015b86:	460b      	mov	r3, r1
 8015b88:	70bb      	strb	r3, [r7, #2]
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8015b92:	2300      	movs	r3, #0
 8015b94:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015b9c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015b9e:	e025      	b.n	8015bec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8015ba0:	7dfb      	ldrb	r3, [r7, #23]
 8015ba2:	221a      	movs	r2, #26
 8015ba4:	fb02 f303 	mul.w	r3, r2, r3
 8015ba8:	3308      	adds	r3, #8
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	4413      	add	r3, r2
 8015bae:	3302      	adds	r3, #2
 8015bb0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	795b      	ldrb	r3, [r3, #5]
 8015bb6:	78fa      	ldrb	r2, [r7, #3]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d002      	beq.n	8015bc2 <USBH_FindInterface+0x4e>
 8015bbc:	78fb      	ldrb	r3, [r7, #3]
 8015bbe:	2bff      	cmp	r3, #255	; 0xff
 8015bc0:	d111      	bne.n	8015be6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8015bc6:	78ba      	ldrb	r2, [r7, #2]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d002      	beq.n	8015bd2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015bcc:	78bb      	ldrb	r3, [r7, #2]
 8015bce:	2bff      	cmp	r3, #255	; 0xff
 8015bd0:	d109      	bne.n	8015be6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015bd2:	693b      	ldr	r3, [r7, #16]
 8015bd4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015bd6:	787a      	ldrb	r2, [r7, #1]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d002      	beq.n	8015be2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015bdc:	787b      	ldrb	r3, [r7, #1]
 8015bde:	2bff      	cmp	r3, #255	; 0xff
 8015be0:	d101      	bne.n	8015be6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	e006      	b.n	8015bf4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8015be6:	7dfb      	ldrb	r3, [r7, #23]
 8015be8:	3301      	adds	r3, #1
 8015bea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015bec:	7dfb      	ldrb	r3, [r7, #23]
 8015bee:	2b09      	cmp	r3, #9
 8015bf0:	d9d6      	bls.n	8015ba0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015bf2:	23ff      	movs	r3, #255	; 0xff
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	371c      	adds	r7, #28
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f7ee ff8f 	bl	8004b2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015c0e:	2101      	movs	r1, #1
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ef f8a8 	bl	8004d66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8015c16:	2300      	movs	r3, #0
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3708      	adds	r7, #8
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}

08015c20 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 8015c28:	2100      	movs	r1, #0
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f7ef f89b 	bl	8004d66 <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7ee ff96 	bl	8004b62 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	791b      	ldrb	r3, [r3, #4]
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f001 fb6c 	bl	801731a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	795b      	ldrb	r3, [r3, #5]
 8015c46:	4619      	mov	r1, r3
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f001 fb66 	bl	801731a <USBH_FreePipe>

  return USBH_OK;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3708      	adds	r7, #8
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b088      	sub	sp, #32
 8015c5c:	af04      	add	r7, sp, #16
 8015c5e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015c60:	2302      	movs	r3, #2
 8015c62:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015c64:	2300      	movs	r3, #0
 8015c66:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d102      	bne.n	8015c7a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2203      	movs	r2, #3
 8015c78:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	2b0b      	cmp	r3, #11
 8015c82:	f200 81c0 	bhi.w	8016006 <USBH_Process+0x3ae>
 8015c86:	a201      	add	r2, pc, #4	; (adr r2, 8015c8c <USBH_Process+0x34>)
 8015c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c8c:	08015cbd 	.word	0x08015cbd
 8015c90:	08015cef 	.word	0x08015cef
 8015c94:	08015d57 	.word	0x08015d57
 8015c98:	08015fa1 	.word	0x08015fa1
 8015c9c:	08016007 	.word	0x08016007
 8015ca0:	08015dfb 	.word	0x08015dfb
 8015ca4:	08015f47 	.word	0x08015f47
 8015ca8:	08015e31 	.word	0x08015e31
 8015cac:	08015e51 	.word	0x08015e51
 8015cb0:	08015e71 	.word	0x08015e71
 8015cb4:	08015eb5 	.word	0x08015eb5
 8015cb8:	08015f89 	.word	0x08015f89
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 81a0 	beq.w	801600a <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2201      	movs	r2, #1
 8015cce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015cd0:	20c8      	movs	r0, #200	; 0xc8
 8015cd2:	f7ef f88f 	bl	8004df4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ee ff85 	bl	8004be6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015cec:	e18d      	b.n	801600a <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015cf4:	2b01      	cmp	r3, #1
 8015cf6:	d107      	bne.n	8015d08 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2202      	movs	r2, #2
 8015d04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015d06:	e18f      	b.n	8016028 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015d12:	d914      	bls.n	8015d3e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	b2da      	uxtb	r2, r3
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8015d2a:	2b03      	cmp	r3, #3
 8015d2c:	d903      	bls.n	8015d36 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	220d      	movs	r2, #13
 8015d32:	701a      	strb	r2, [r3, #0]
      break;
 8015d34:	e178      	b.n	8016028 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	701a      	strb	r2, [r3, #0]
      break;
 8015d3c:	e174      	b.n	8016028 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015d44:	f103 020a 	add.w	r2, r3, #10
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015d4e:	200a      	movs	r0, #10
 8015d50:	f7ef f850 	bl	8004df4 <USBH_Delay>
      break;
 8015d54:	e168      	b.n	8016028 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d005      	beq.n	8015d6c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015d66:	2104      	movs	r1, #4
 8015d68:	6878      	ldr	r0, [r7, #4]
 8015d6a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8015d6c:	2064      	movs	r0, #100	; 0x64
 8015d6e:	f7ef f841 	bl	8004df4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f7ee ff10 	bl	8004b98 <USBH_LL_GetSpeed>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2205      	movs	r2, #5
 8015d86:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8015d88:	2100      	movs	r1, #0
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f001 faa3 	bl	80172d6 <USBH_AllocPipe>
 8015d90:	4603      	mov	r3, r0
 8015d92:	461a      	mov	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8015d98:	2180      	movs	r1, #128	; 0x80
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f001 fa9b 	bl	80172d6 <USBH_AllocPipe>
 8015da0:	4603      	mov	r3, r0
 8015da2:	461a      	mov	r2, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	7919      	ldrb	r1, [r3, #4]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015db8:	687a      	ldr	r2, [r7, #4]
 8015dba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8015dbc:	b292      	uxth	r2, r2
 8015dbe:	9202      	str	r2, [sp, #8]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	9201      	str	r2, [sp, #4]
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2280      	movs	r2, #128	; 0x80
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f001 fa54 	bl	8017278 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	7959      	ldrb	r1, [r3, #5]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015de4:	b292      	uxth	r2, r2
 8015de6:	9202      	str	r2, [sp, #8]
 8015de8:	2200      	movs	r2, #0
 8015dea:	9201      	str	r2, [sp, #4]
 8015dec:	9300      	str	r3, [sp, #0]
 8015dee:	4603      	mov	r3, r0
 8015df0:	2200      	movs	r2, #0
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f001 fa40 	bl	8017278 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015df8:	e116      	b.n	8016028 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 f91a 	bl	8016034 <USBH_HandleEnum>
 8015e00:	4603      	mov	r3, r0
 8015e02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015e04:	7bbb      	ldrb	r3, [r7, #14]
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	f040 8100 	bne.w	801600e <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2200      	movs	r2, #0
 8015e12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d103      	bne.n	8015e28 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2208      	movs	r2, #8
 8015e24:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015e26:	e0f2      	b.n	801600e <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2207      	movs	r2, #7
 8015e2c:	701a      	strb	r2, [r3, #0]
      break;
 8015e2e:	e0ee      	b.n	801600e <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	f000 80eb 	beq.w	8016012 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015e42:	2101      	movs	r1, #1
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2208      	movs	r2, #8
 8015e4c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8015e4e:	e0e0      	b.n	8016012 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	4619      	mov	r1, r3
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 fc41 	bl	80166e2 <USBH_SetCfg>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f040 80d7 	bne.w	8016016 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2209      	movs	r2, #9
 8015e6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015e6e:	e0d2      	b.n	8016016 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8015e76:	f003 0320 	and.w	r3, r3, #32
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d016      	beq.n	8015eac <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8015e7e:	2101      	movs	r1, #1
 8015e80:	6878      	ldr	r0, [r7, #4]
 8015e82:	f000 fc51 	bl	8016728 <USBH_SetFeature>
 8015e86:	4603      	mov	r3, r0
 8015e88:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015e8a:	7bbb      	ldrb	r3, [r7, #14]
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d103      	bne.n	8015e9a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	220a      	movs	r2, #10
 8015e96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015e98:	e0bf      	b.n	801601a <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 8015e9a:	7bbb      	ldrb	r3, [r7, #14]
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	2b03      	cmp	r3, #3
 8015ea0:	f040 80bb 	bne.w	801601a <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	220a      	movs	r2, #10
 8015ea8:	701a      	strb	r2, [r3, #0]
      break;
 8015eaa:	e0b6      	b.n	801601a <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	220a      	movs	r2, #10
 8015eb0:	701a      	strb	r2, [r3, #0]
      break;
 8015eb2:	e0b2      	b.n	801601a <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f000 80af 	beq.w	801601e <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015ec8:	2300      	movs	r3, #0
 8015eca:	73fb      	strb	r3, [r7, #15]
 8015ecc:	e018      	b.n	8015f00 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015ece:	7bfa      	ldrb	r2, [r7, #15]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eda:	791a      	ldrb	r2, [r3, #4]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d109      	bne.n	8015efa <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8015ee6:	7bfa      	ldrb	r2, [r7, #15]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015eee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8015ef8:	e005      	b.n	8015f06 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015efa:	7bfb      	ldrb	r3, [r7, #15]
 8015efc:	3301      	adds	r3, #1
 8015efe:	73fb      	strb	r3, [r7, #15]
 8015f00:	7bfb      	ldrb	r3, [r7, #15]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d0e3      	beq.n	8015ece <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d016      	beq.n	8015f3e <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f16:	689b      	ldr	r3, [r3, #8]
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	4798      	blx	r3
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d109      	bne.n	8015f36 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2206      	movs	r2, #6
 8015f26:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015f2e:	2103      	movs	r1, #3
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015f34:	e073      	b.n	801601e <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	220d      	movs	r2, #13
 8015f3a:	701a      	strb	r2, [r3, #0]
      break;
 8015f3c:	e06f      	b.n	801601e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	220d      	movs	r2, #13
 8015f42:	701a      	strb	r2, [r3, #0]
      break;
 8015f44:	e06b      	b.n	801601e <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d017      	beq.n	8015f80 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f56:	691b      	ldr	r3, [r3, #16]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	4798      	blx	r3
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015f60:	7bbb      	ldrb	r3, [r7, #14]
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d103      	bne.n	8015f70 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	220b      	movs	r2, #11
 8015f6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015f6e:	e058      	b.n	8016022 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8015f70:	7bbb      	ldrb	r3, [r7, #14]
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	2b02      	cmp	r3, #2
 8015f76:	d154      	bne.n	8016022 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	220d      	movs	r2, #13
 8015f7c:	701a      	strb	r2, [r3, #0]
      break;
 8015f7e:	e050      	b.n	8016022 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	220d      	movs	r2, #13
 8015f84:	701a      	strb	r2, [r3, #0]
      break;
 8015f86:	e04c      	b.n	8016022 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d049      	beq.n	8016026 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f98:	695b      	ldr	r3, [r3, #20]
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	4798      	blx	r3
      }
      break;
 8015f9e:	e042      	b.n	8016026 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f7ff fd27 	bl	80159fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d009      	beq.n	8015fcc <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d005      	beq.n	8015fe2 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015fdc:	2105      	movs	r1, #5
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	2b01      	cmp	r3, #1
 8015fec:	d107      	bne.n	8015ffe <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f7ff fe02 	bl	8015c00 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015ffc:	e014      	b.n	8016028 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7ee fd94 	bl	8004b2c <USBH_LL_Start>
      break;
 8016004:	e010      	b.n	8016028 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8016006:	bf00      	nop
 8016008:	e00e      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 801600a:	bf00      	nop
 801600c:	e00c      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 801600e:	bf00      	nop
 8016010:	e00a      	b.n	8016028 <USBH_Process+0x3d0>
    break;
 8016012:	bf00      	nop
 8016014:	e008      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 8016016:	bf00      	nop
 8016018:	e006      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 801601a:	bf00      	nop
 801601c:	e004      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 801601e:	bf00      	nop
 8016020:	e002      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 8016022:	bf00      	nop
 8016024:	e000      	b.n	8016028 <USBH_Process+0x3d0>
      break;
 8016026:	bf00      	nop
  }
  return USBH_OK;
 8016028:	2300      	movs	r3, #0
}
 801602a:	4618      	mov	r0, r3
 801602c:	3710      	adds	r7, #16
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop

08016034 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b088      	sub	sp, #32
 8016038:	af04      	add	r7, sp, #16
 801603a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801603c:	2301      	movs	r3, #1
 801603e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8016040:	2301      	movs	r3, #1
 8016042:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	785b      	ldrb	r3, [r3, #1]
 8016048:	2b07      	cmp	r3, #7
 801604a:	f200 81c1 	bhi.w	80163d0 <USBH_HandleEnum+0x39c>
 801604e:	a201      	add	r2, pc, #4	; (adr r2, 8016054 <USBH_HandleEnum+0x20>)
 8016050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016054:	08016075 	.word	0x08016075
 8016058:	08016133 	.word	0x08016133
 801605c:	0801619d 	.word	0x0801619d
 8016060:	0801622b 	.word	0x0801622b
 8016064:	08016295 	.word	0x08016295
 8016068:	08016305 	.word	0x08016305
 801606c:	0801634b 	.word	0x0801634b
 8016070:	08016391 	.word	0x08016391
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8016074:	2108      	movs	r1, #8
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f000 fa50 	bl	801651c <USBH_Get_DevDesc>
 801607c:	4603      	mov	r3, r0
 801607e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016080:	7bbb      	ldrb	r3, [r7, #14]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d130      	bne.n	80160e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2201      	movs	r2, #1
 8016094:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	7919      	ldrb	r1, [r3, #4]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80160aa:	b292      	uxth	r2, r2
 80160ac:	9202      	str	r2, [sp, #8]
 80160ae:	2200      	movs	r2, #0
 80160b0:	9201      	str	r2, [sp, #4]
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	4603      	mov	r3, r0
 80160b6:	2280      	movs	r2, #128	; 0x80
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f001 f8dd 	bl	8017278 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	7959      	ldrb	r1, [r3, #5]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80160d2:	b292      	uxth	r2, r2
 80160d4:	9202      	str	r2, [sp, #8]
 80160d6:	2200      	movs	r2, #0
 80160d8:	9201      	str	r2, [sp, #4]
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	4603      	mov	r3, r0
 80160de:	2200      	movs	r2, #0
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f001 f8c9 	bl	8017278 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80160e6:	e175      	b.n	80163d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80160e8:	7bbb      	ldrb	r3, [r7, #14]
 80160ea:	2b03      	cmp	r3, #3
 80160ec:	f040 8172 	bne.w	80163d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80160f6:	3301      	adds	r3, #1
 80160f8:	b2da      	uxtb	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016106:	2b03      	cmp	r3, #3
 8016108:	d903      	bls.n	8016112 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	220d      	movs	r2, #13
 801610e:	701a      	strb	r2, [r3, #0]
      break;
 8016110:	e160      	b.n	80163d4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	795b      	ldrb	r3, [r3, #5]
 8016116:	4619      	mov	r1, r3
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f001 f8fe 	bl	801731a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	791b      	ldrb	r3, [r3, #4]
 8016122:	4619      	mov	r1, r3
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f001 f8f8 	bl	801731a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2200      	movs	r2, #0
 801612e:	701a      	strb	r2, [r3, #0]
      break;
 8016130:	e150      	b.n	80163d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8016132:	2112      	movs	r1, #18
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f000 f9f1 	bl	801651c <USBH_Get_DevDesc>
 801613a:	4603      	mov	r3, r0
 801613c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801613e:	7bbb      	ldrb	r3, [r7, #14]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d103      	bne.n	801614c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2202      	movs	r2, #2
 8016148:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801614a:	e145      	b.n	80163d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801614c:	7bbb      	ldrb	r3, [r7, #14]
 801614e:	2b03      	cmp	r3, #3
 8016150:	f040 8142 	bne.w	80163d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801615a:	3301      	adds	r3, #1
 801615c:	b2da      	uxtb	r2, r3
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801616a:	2b03      	cmp	r3, #3
 801616c:	d903      	bls.n	8016176 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	220d      	movs	r2, #13
 8016172:	701a      	strb	r2, [r3, #0]
      break;
 8016174:	e130      	b.n	80163d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	795b      	ldrb	r3, [r3, #5]
 801617a:	4619      	mov	r1, r3
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f001 f8cc 	bl	801731a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	791b      	ldrb	r3, [r3, #4]
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f001 f8c6 	bl	801731a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2200      	movs	r2, #0
 8016192:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2200      	movs	r2, #0
 8016198:	701a      	strb	r2, [r3, #0]
      break;
 801619a:	e11d      	b.n	80163d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 801619c:	2101      	movs	r1, #1
 801619e:	6878      	ldr	r0, [r7, #4]
 80161a0:	f000 fa7b 	bl	801669a <USBH_SetAddress>
 80161a4:	4603      	mov	r3, r0
 80161a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80161a8:	7bbb      	ldrb	r3, [r7, #14]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d132      	bne.n	8016214 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80161ae:	2002      	movs	r0, #2
 80161b0:	f7ee fe20 	bl	8004df4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2201      	movs	r2, #1
 80161b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2203      	movs	r2, #3
 80161c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	7919      	ldrb	r1, [r3, #4]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80161d6:	b292      	uxth	r2, r2
 80161d8:	9202      	str	r2, [sp, #8]
 80161da:	2200      	movs	r2, #0
 80161dc:	9201      	str	r2, [sp, #4]
 80161de:	9300      	str	r3, [sp, #0]
 80161e0:	4603      	mov	r3, r0
 80161e2:	2280      	movs	r2, #128	; 0x80
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f001 f847 	bl	8017278 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	7959      	ldrb	r1, [r3, #5]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80161fa:	687a      	ldr	r2, [r7, #4]
 80161fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80161fe:	b292      	uxth	r2, r2
 8016200:	9202      	str	r2, [sp, #8]
 8016202:	2200      	movs	r2, #0
 8016204:	9201      	str	r2, [sp, #4]
 8016206:	9300      	str	r3, [sp, #0]
 8016208:	4603      	mov	r3, r0
 801620a:	2200      	movs	r2, #0
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f001 f833 	bl	8017278 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8016212:	e0e3      	b.n	80163dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016214:	7bbb      	ldrb	r3, [r7, #14]
 8016216:	2b03      	cmp	r3, #3
 8016218:	f040 80e0 	bne.w	80163dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	220d      	movs	r2, #13
 8016220:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2200      	movs	r2, #0
 8016226:	705a      	strb	r2, [r3, #1]
      break;
 8016228:	e0d8      	b.n	80163dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801622a:	2109      	movs	r1, #9
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 f9a1 	bl	8016574 <USBH_Get_CfgDesc>
 8016232:	4603      	mov	r3, r0
 8016234:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8016236:	7bbb      	ldrb	r3, [r7, #14]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d103      	bne.n	8016244 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2204      	movs	r2, #4
 8016240:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8016242:	e0cd      	b.n	80163e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016244:	7bbb      	ldrb	r3, [r7, #14]
 8016246:	2b03      	cmp	r3, #3
 8016248:	f040 80ca 	bne.w	80163e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016252:	3301      	adds	r3, #1
 8016254:	b2da      	uxtb	r2, r3
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8016262:	2b03      	cmp	r3, #3
 8016264:	d903      	bls.n	801626e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	220d      	movs	r2, #13
 801626a:	701a      	strb	r2, [r3, #0]
      break;
 801626c:	e0b8      	b.n	80163e0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	795b      	ldrb	r3, [r3, #5]
 8016272:	4619      	mov	r1, r3
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f001 f850 	bl	801731a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	791b      	ldrb	r3, [r3, #4]
 801627e:	4619      	mov	r1, r3
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f001 f84a 	bl	801731a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2200      	movs	r2, #0
 8016290:	701a      	strb	r2, [r3, #0]
      break;
 8016292:	e0a5      	b.n	80163e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 801629a:	4619      	mov	r1, r3
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f000 f969 	bl	8016574 <USBH_Get_CfgDesc>
 80162a2:	4603      	mov	r3, r0
 80162a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80162a6:	7bbb      	ldrb	r3, [r7, #14]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d103      	bne.n	80162b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2205      	movs	r2, #5
 80162b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80162b2:	e097      	b.n	80163e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80162b4:	7bbb      	ldrb	r3, [r7, #14]
 80162b6:	2b03      	cmp	r3, #3
 80162b8:	f040 8094 	bne.w	80163e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80162c2:	3301      	adds	r3, #1
 80162c4:	b2da      	uxtb	r2, r3
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80162d2:	2b03      	cmp	r3, #3
 80162d4:	d903      	bls.n	80162de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	220d      	movs	r2, #13
 80162da:	701a      	strb	r2, [r3, #0]
      break;
 80162dc:	e082      	b.n	80163e4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	795b      	ldrb	r3, [r3, #5]
 80162e2:	4619      	mov	r1, r3
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f001 f818 	bl	801731a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	791b      	ldrb	r3, [r3, #4]
 80162ee:	4619      	mov	r1, r3
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f001 f812 	bl	801731a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2200      	movs	r2, #0
 80162fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2200      	movs	r2, #0
 8016300:	701a      	strb	r2, [r3, #0]
      break;
 8016302:	e06f      	b.n	80163e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801630a:	2b00      	cmp	r3, #0
 801630c:	d019      	beq.n	8016342 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801631a:	23ff      	movs	r3, #255	; 0xff
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f953 	bl	80165c8 <USBH_Get_StringDesc>
 8016322:	4603      	mov	r3, r0
 8016324:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8016326:	7bbb      	ldrb	r3, [r7, #14]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d103      	bne.n	8016334 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2206      	movs	r2, #6
 8016330:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016332:	e059      	b.n	80163e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8016334:	7bbb      	ldrb	r3, [r7, #14]
 8016336:	2b03      	cmp	r3, #3
 8016338:	d156      	bne.n	80163e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2206      	movs	r2, #6
 801633e:	705a      	strb	r2, [r3, #1]
      break;
 8016340:	e052      	b.n	80163e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2206      	movs	r2, #6
 8016346:	705a      	strb	r2, [r3, #1]
      break;
 8016348:	e04e      	b.n	80163e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8016350:	2b00      	cmp	r3, #0
 8016352:	d019      	beq.n	8016388 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8016360:	23ff      	movs	r3, #255	; 0xff
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f000 f930 	bl	80165c8 <USBH_Get_StringDesc>
 8016368:	4603      	mov	r3, r0
 801636a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801636c:	7bbb      	ldrb	r3, [r7, #14]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d103      	bne.n	801637a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2207      	movs	r2, #7
 8016376:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8016378:	e038      	b.n	80163ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801637a:	7bbb      	ldrb	r3, [r7, #14]
 801637c:	2b03      	cmp	r3, #3
 801637e:	d135      	bne.n	80163ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2207      	movs	r2, #7
 8016384:	705a      	strb	r2, [r3, #1]
      break;
 8016386:	e031      	b.n	80163ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2207      	movs	r2, #7
 801638c:	705a      	strb	r2, [r3, #1]
      break;
 801638e:	e02d      	b.n	80163ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8016396:	2b00      	cmp	r3, #0
 8016398:	d017      	beq.n	80163ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80163a6:	23ff      	movs	r3, #255	; 0xff
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 f90d 	bl	80165c8 <USBH_Get_StringDesc>
 80163ae:	4603      	mov	r3, r0
 80163b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80163b2:	7bbb      	ldrb	r3, [r7, #14]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d102      	bne.n	80163be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80163b8:	2300      	movs	r3, #0
 80163ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80163bc:	e018      	b.n	80163f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80163be:	7bbb      	ldrb	r3, [r7, #14]
 80163c0:	2b03      	cmp	r3, #3
 80163c2:	d115      	bne.n	80163f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80163c4:	2300      	movs	r3, #0
 80163c6:	73fb      	strb	r3, [r7, #15]
      break;
 80163c8:	e012      	b.n	80163f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	73fb      	strb	r3, [r7, #15]
      break;
 80163ce:	e00f      	b.n	80163f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80163d0:	bf00      	nop
 80163d2:	e00e      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163d4:	bf00      	nop
 80163d6:	e00c      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163d8:	bf00      	nop
 80163da:	e00a      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163dc:	bf00      	nop
 80163de:	e008      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163e0:	bf00      	nop
 80163e2:	e006      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163e4:	bf00      	nop
 80163e6:	e004      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163e8:	bf00      	nop
 80163ea:	e002      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163ec:	bf00      	nop
 80163ee:	e000      	b.n	80163f2 <USBH_HandleEnum+0x3be>
      break;
 80163f0:	bf00      	nop
  }
  return Status;
 80163f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3710      	adds	r7, #16
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}

080163fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	683a      	ldr	r2, [r7, #0]
 801640a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 801640e:	bf00      	nop
 8016410:	370c      	adds	r7, #12
 8016412:	46bd      	mov	sp, r7
 8016414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016418:	4770      	bx	lr

0801641a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b082      	sub	sp, #8
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016428:	1c5a      	adds	r2, r3, #1
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f000 f804 	bl	801643e <USBH_HandleSof>
}
 8016436:	bf00      	nop
 8016438:	3708      	adds	r7, #8
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b082      	sub	sp, #8
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	b2db      	uxtb	r3, r3
 801644c:	2b0b      	cmp	r3, #11
 801644e:	d10a      	bne.n	8016466 <USBH_HandleSof+0x28>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016456:	2b00      	cmp	r3, #0
 8016458:	d005      	beq.n	8016466 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8016460:	699b      	ldr	r3, [r3, #24]
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	4798      	blx	r3
  }
}
 8016466:	bf00      	nop
 8016468:	3708      	adds	r7, #8
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}

0801646e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801646e:	b480      	push	{r7}
 8016470:	b083      	sub	sp, #12
 8016472:	af00      	add	r7, sp, #0
 8016474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2201      	movs	r2, #1
 801647a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801647e:	bf00      	nop
}
 8016480:	370c      	adds	r7, #12
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr

0801648a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801648a:	b480      	push	{r7}
 801648c:	b083      	sub	sp, #12
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2200      	movs	r2, #0
 8016496:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801649a:	bf00      	nop
}
 801649c:	370c      	adds	r7, #12
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr

080164a6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80164a6:	b480      	push	{r7}
 80164a8:	b083      	sub	sp, #12
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2201      	movs	r2, #1
 80164b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2200      	movs	r2, #0
 80164ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2200      	movs	r2, #0
 80164c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80164c6:	2300      	movs	r3, #0
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	370c      	adds	r7, #12
 80164cc:	46bd      	mov	sp, r7
 80164ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d2:	4770      	bx	lr

080164d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2201      	movs	r2, #1
 80164e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2200      	movs	r2, #0
 80164e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2200      	movs	r2, #0
 80164f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f7ee fb34 	bl	8004b62 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	791b      	ldrb	r3, [r3, #4]
 80164fe:	4619      	mov	r1, r3
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f000 ff0a 	bl	801731a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	795b      	ldrb	r3, [r3, #5]
 801650a:	4619      	mov	r1, r3
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f000 ff04 	bl	801731a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016512:	2300      	movs	r3, #0
}
 8016514:	4618      	mov	r0, r3
 8016516:	3708      	adds	r7, #8
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}

0801651c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b086      	sub	sp, #24
 8016520:	af02      	add	r7, sp, #8
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	460b      	mov	r3, r1
 8016526:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8016528:	887b      	ldrh	r3, [r7, #2]
 801652a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801652e:	d901      	bls.n	8016534 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016530:	2303      	movs	r3, #3
 8016532:	e01b      	b.n	801656c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801653a:	887b      	ldrh	r3, [r7, #2]
 801653c:	9300      	str	r3, [sp, #0]
 801653e:	4613      	mov	r3, r2
 8016540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016544:	2100      	movs	r1, #0
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 f872 	bl	8016630 <USBH_GetDescriptor>
 801654c:	4603      	mov	r3, r0
 801654e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016550:	7bfb      	ldrb	r3, [r7, #15]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d109      	bne.n	801656a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801655c:	887a      	ldrh	r2, [r7, #2]
 801655e:	4619      	mov	r1, r3
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f000 f929 	bl	80167b8 <USBH_ParseDevDesc>
 8016566:	4603      	mov	r3, r0
 8016568:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801656a:	7bfb      	ldrb	r3, [r7, #15]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3710      	adds	r7, #16
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b086      	sub	sp, #24
 8016578:	af02      	add	r7, sp, #8
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	460b      	mov	r3, r1
 801657e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	331c      	adds	r3, #28
 8016584:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8016586:	887b      	ldrh	r3, [r7, #2]
 8016588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801658c:	d901      	bls.n	8016592 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801658e:	2303      	movs	r3, #3
 8016590:	e016      	b.n	80165c0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8016592:	887b      	ldrh	r3, [r7, #2]
 8016594:	9300      	str	r3, [sp, #0]
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801659c:	2100      	movs	r1, #0
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f000 f846 	bl	8016630 <USBH_GetDescriptor>
 80165a4:	4603      	mov	r3, r0
 80165a6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80165a8:	7bfb      	ldrb	r3, [r7, #15]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d107      	bne.n	80165be <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80165ae:	887b      	ldrh	r3, [r7, #2]
 80165b0:	461a      	mov	r2, r3
 80165b2:	68b9      	ldr	r1, [r7, #8]
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 f9b3 	bl	8016920 <USBH_ParseCfgDesc>
 80165ba:	4603      	mov	r3, r0
 80165bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80165be:	7bfb      	ldrb	r3, [r7, #15]
}
 80165c0:	4618      	mov	r0, r3
 80165c2:	3710      	adds	r7, #16
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b088      	sub	sp, #32
 80165cc:	af02      	add	r7, sp, #8
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	607a      	str	r2, [r7, #4]
 80165d2:	461a      	mov	r2, r3
 80165d4:	460b      	mov	r3, r1
 80165d6:	72fb      	strb	r3, [r7, #11]
 80165d8:	4613      	mov	r3, r2
 80165da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80165dc:	893b      	ldrh	r3, [r7, #8]
 80165de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165e2:	d802      	bhi.n	80165ea <USBH_Get_StringDesc+0x22>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d101      	bne.n	80165ee <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80165ea:	2303      	movs	r3, #3
 80165ec:	e01c      	b.n	8016628 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80165ee:	7afb      	ldrb	r3, [r7, #11]
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80165f6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80165fe:	893b      	ldrh	r3, [r7, #8]
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	460b      	mov	r3, r1
 8016604:	2100      	movs	r1, #0
 8016606:	68f8      	ldr	r0, [r7, #12]
 8016608:	f000 f812 	bl	8016630 <USBH_GetDescriptor>
 801660c:	4603      	mov	r3, r0
 801660e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016610:	7dfb      	ldrb	r3, [r7, #23]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d107      	bne.n	8016626 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801661c:	893a      	ldrh	r2, [r7, #8]
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	4618      	mov	r0, r3
 8016622:	f000 fb8a 	bl	8016d3a <USBH_ParseStringDesc>
  }

  return status;
 8016626:	7dfb      	ldrb	r3, [r7, #23]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3718      	adds	r7, #24
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}

08016630 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b084      	sub	sp, #16
 8016634:	af00      	add	r7, sp, #0
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	607b      	str	r3, [r7, #4]
 801663a:	460b      	mov	r3, r1
 801663c:	72fb      	strb	r3, [r7, #11]
 801663e:	4613      	mov	r3, r2
 8016640:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	789b      	ldrb	r3, [r3, #2]
 8016646:	2b01      	cmp	r3, #1
 8016648:	d11c      	bne.n	8016684 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801664a:	7afb      	ldrb	r3, [r7, #11]
 801664c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016650:	b2da      	uxtb	r2, r3
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	2206      	movs	r2, #6
 801665a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	893a      	ldrh	r2, [r7, #8]
 8016660:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016662:	893b      	ldrh	r3, [r7, #8]
 8016664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801666c:	d104      	bne.n	8016678 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f240 4209 	movw	r2, #1033	; 0x409
 8016674:	829a      	strh	r2, [r3, #20]
 8016676:	e002      	b.n	801667e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2200      	movs	r2, #0
 801667c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	8b3a      	ldrh	r2, [r7, #24]
 8016682:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8016684:	8b3b      	ldrh	r3, [r7, #24]
 8016686:	461a      	mov	r2, r3
 8016688:	6879      	ldr	r1, [r7, #4]
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f000 fba3 	bl	8016dd6 <USBH_CtlReq>
 8016690:	4603      	mov	r3, r0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801669a:	b580      	push	{r7, lr}
 801669c:	b082      	sub	sp, #8
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
 80166a2:	460b      	mov	r3, r1
 80166a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	789b      	ldrb	r3, [r3, #2]
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d10f      	bne.n	80166ce <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	2200      	movs	r2, #0
 80166b2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2205      	movs	r2, #5
 80166b8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80166ba:	78fb      	ldrb	r3, [r7, #3]
 80166bc:	b29a      	uxth	r2, r3
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2200      	movs	r2, #0
 80166c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80166ce:	2200      	movs	r2, #0
 80166d0:	2100      	movs	r1, #0
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f000 fb7f 	bl	8016dd6 <USBH_CtlReq>
 80166d8:	4603      	mov	r3, r0
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3708      	adds	r7, #8
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b082      	sub	sp, #8
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
 80166ea:	460b      	mov	r3, r1
 80166ec:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	789b      	ldrb	r3, [r3, #2]
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	d10e      	bne.n	8016714 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2200      	movs	r2, #0
 80166fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2209      	movs	r2, #9
 8016700:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	887a      	ldrh	r2, [r7, #2]
 8016706:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2200      	movs	r2, #0
 801670c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2200      	movs	r2, #0
 8016712:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016714:	2200      	movs	r2, #0
 8016716:	2100      	movs	r1, #0
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 fb5c 	bl	8016dd6 <USBH_CtlReq>
 801671e:	4603      	mov	r3, r0
}
 8016720:	4618      	mov	r0, r3
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	460b      	mov	r3, r1
 8016732:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	789b      	ldrb	r3, [r3, #2]
 8016738:	2b01      	cmp	r3, #1
 801673a:	d10f      	bne.n	801675c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	2200      	movs	r2, #0
 8016740:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2203      	movs	r2, #3
 8016746:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8016748:	78fb      	ldrb	r3, [r7, #3]
 801674a:	b29a      	uxth	r2, r3
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2200      	movs	r2, #0
 8016754:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801675c:	2200      	movs	r2, #0
 801675e:	2100      	movs	r1, #0
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f000 fb38 	bl	8016dd6 <USBH_CtlReq>
 8016766:	4603      	mov	r3, r0
}
 8016768:	4618      	mov	r0, r3
 801676a:	3708      	adds	r7, #8
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	460b      	mov	r3, r1
 801677a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	789b      	ldrb	r3, [r3, #2]
 8016780:	2b01      	cmp	r3, #1
 8016782:	d10f      	bne.n	80167a4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2202      	movs	r2, #2
 8016788:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2201      	movs	r2, #1
 801678e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2200      	movs	r2, #0
 8016794:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8016796:	78fb      	ldrb	r3, [r7, #3]
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2200      	movs	r2, #0
 80167a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80167a4:	2200      	movs	r2, #0
 80167a6:	2100      	movs	r1, #0
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f000 fb14 	bl	8016dd6 <USBH_CtlReq>
 80167ae:	4603      	mov	r3, r0
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	3708      	adds	r7, #8
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80167b8:	b480      	push	{r7}
 80167ba:	b087      	sub	sp, #28
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	4613      	mov	r3, r2
 80167c4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	f203 3326 	addw	r3, r3, #806	; 0x326
 80167cc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80167ce:	2300      	movs	r3, #0
 80167d0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d101      	bne.n	80167dc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80167d8:	2302      	movs	r3, #2
 80167da:	e098      	b.n	801690e <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	781a      	ldrb	r2, [r3, #0]
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	785a      	ldrb	r2, [r3, #1]
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	3302      	adds	r3, #2
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	3303      	adds	r3, #3
 80167f8:	781b      	ldrb	r3, [r3, #0]
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	021b      	lsls	r3, r3, #8
 80167fe:	b29b      	uxth	r3, r3
 8016800:	4313      	orrs	r3, r2
 8016802:	b29a      	uxth	r2, r3
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	791a      	ldrb	r2, [r3, #4]
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016810:	68bb      	ldr	r3, [r7, #8]
 8016812:	795a      	ldrb	r2, [r3, #5]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	799a      	ldrb	r2, [r3, #6]
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	79da      	ldrb	r2, [r3, #7]
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801682e:	2b00      	cmp	r3, #0
 8016830:	d004      	beq.n	801683c <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8016838:	2b01      	cmp	r3, #1
 801683a:	d11b      	bne.n	8016874 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	79db      	ldrb	r3, [r3, #7]
 8016840:	2b20      	cmp	r3, #32
 8016842:	dc0f      	bgt.n	8016864 <USBH_ParseDevDesc+0xac>
 8016844:	2b08      	cmp	r3, #8
 8016846:	db0f      	blt.n	8016868 <USBH_ParseDevDesc+0xb0>
 8016848:	3b08      	subs	r3, #8
 801684a:	4a34      	ldr	r2, [pc, #208]	; (801691c <USBH_ParseDevDesc+0x164>)
 801684c:	fa22 f303 	lsr.w	r3, r2, r3
 8016850:	f003 0301 	and.w	r3, r3, #1
 8016854:	2b00      	cmp	r3, #0
 8016856:	bf14      	ite	ne
 8016858:	2301      	movne	r3, #1
 801685a:	2300      	moveq	r3, #0
 801685c:	b2db      	uxtb	r3, r3
 801685e:	2b00      	cmp	r3, #0
 8016860:	d106      	bne.n	8016870 <USBH_ParseDevDesc+0xb8>
 8016862:	e001      	b.n	8016868 <USBH_ParseDevDesc+0xb0>
 8016864:	2b40      	cmp	r3, #64	; 0x40
 8016866:	d003      	beq.n	8016870 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	2208      	movs	r2, #8
 801686c:	71da      	strb	r2, [r3, #7]
        break;
 801686e:	e000      	b.n	8016872 <USBH_ParseDevDesc+0xba>
        break;
 8016870:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8016872:	e00e      	b.n	8016892 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801687a:	2b02      	cmp	r3, #2
 801687c:	d107      	bne.n	801688e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	79db      	ldrb	r3, [r3, #7]
 8016882:	2b08      	cmp	r3, #8
 8016884:	d005      	beq.n	8016892 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	2208      	movs	r2, #8
 801688a:	71da      	strb	r2, [r3, #7]
 801688c:	e001      	b.n	8016892 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801688e:	2303      	movs	r3, #3
 8016890:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8016892:	88fb      	ldrh	r3, [r7, #6]
 8016894:	2b08      	cmp	r3, #8
 8016896:	d939      	bls.n	801690c <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	3308      	adds	r3, #8
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	b29a      	uxth	r2, r3
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	3309      	adds	r3, #9
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	021b      	lsls	r3, r3, #8
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	4313      	orrs	r3, r2
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	330a      	adds	r3, #10
 80168b8:	781b      	ldrb	r3, [r3, #0]
 80168ba:	b29a      	uxth	r2, r3
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	330b      	adds	r3, #11
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	021b      	lsls	r3, r3, #8
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	4313      	orrs	r3, r2
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	693b      	ldr	r3, [r7, #16]
 80168ce:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	330c      	adds	r3, #12
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	330d      	adds	r3, #13
 80168dc:	781b      	ldrb	r3, [r3, #0]
 80168de:	b29b      	uxth	r3, r3
 80168e0:	021b      	lsls	r3, r3, #8
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	4313      	orrs	r3, r2
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	7b9a      	ldrb	r2, [r3, #14]
 80168f0:	693b      	ldr	r3, [r7, #16]
 80168f2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80168f4:	68bb      	ldr	r3, [r7, #8]
 80168f6:	7bda      	ldrb	r2, [r3, #15]
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	7c1a      	ldrb	r2, [r3, #16]
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	7c5a      	ldrb	r2, [r3, #17]
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 801690c:	7dfb      	ldrb	r3, [r7, #23]
}
 801690e:	4618      	mov	r0, r3
 8016910:	371c      	adds	r7, #28
 8016912:	46bd      	mov	sp, r7
 8016914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016918:	4770      	bx	lr
 801691a:	bf00      	nop
 801691c:	01000101 	.word	0x01000101

08016920 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b08c      	sub	sp, #48	; 0x30
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	4613      	mov	r3, r2
 801692c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016934:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8016936:	2300      	movs	r3, #0
 8016938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801693c:	2300      	movs	r3, #0
 801693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016942:	2300      	movs	r3, #0
 8016944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d101      	bne.n	8016952 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801694e:	2302      	movs	r3, #2
 8016950:	e0d7      	b.n	8016b02 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	781a      	ldrb	r2, [r3, #0]
 801695a:	6a3b      	ldr	r3, [r7, #32]
 801695c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	785a      	ldrb	r2, [r3, #1]
 8016962:	6a3b      	ldr	r3, [r7, #32]
 8016964:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	3302      	adds	r3, #2
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	b29a      	uxth	r2, r3
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	3303      	adds	r3, #3
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	b29b      	uxth	r3, r3
 8016976:	021b      	lsls	r3, r3, #8
 8016978:	b29b      	uxth	r3, r3
 801697a:	4313      	orrs	r3, r2
 801697c:	b29b      	uxth	r3, r3
 801697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016982:	bf28      	it	cs
 8016984:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8016988:	b29a      	uxth	r2, r3
 801698a:	6a3b      	ldr	r3, [r7, #32]
 801698c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	791a      	ldrb	r2, [r3, #4]
 8016992:	6a3b      	ldr	r3, [r7, #32]
 8016994:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	795a      	ldrb	r2, [r3, #5]
 801699a:	6a3b      	ldr	r3, [r7, #32]
 801699c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 801699e:	68bb      	ldr	r3, [r7, #8]
 80169a0:	799a      	ldrb	r2, [r3, #6]
 80169a2:	6a3b      	ldr	r3, [r7, #32]
 80169a4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	79da      	ldrb	r2, [r3, #7]
 80169aa:	6a3b      	ldr	r3, [r7, #32]
 80169ac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	7a1a      	ldrb	r2, [r3, #8]
 80169b2:	6a3b      	ldr	r3, [r7, #32]
 80169b4:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80169b6:	6a3b      	ldr	r3, [r7, #32]
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	2b09      	cmp	r3, #9
 80169bc:	d002      	beq.n	80169c4 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80169be:	6a3b      	ldr	r3, [r7, #32]
 80169c0:	2209      	movs	r2, #9
 80169c2:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80169c4:	88fb      	ldrh	r3, [r7, #6]
 80169c6:	2b09      	cmp	r3, #9
 80169c8:	f240 8099 	bls.w	8016afe <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 80169cc:	2309      	movs	r3, #9
 80169ce:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80169d0:	2300      	movs	r3, #0
 80169d2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80169d4:	e07d      	b.n	8016ad2 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80169d6:	f107 0316 	add.w	r3, r7, #22
 80169da:	4619      	mov	r1, r3
 80169dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169de:	f000 f9df 	bl	8016da0 <USBH_GetNextDesc>
 80169e2:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80169e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e6:	785b      	ldrb	r3, [r3, #1]
 80169e8:	2b04      	cmp	r3, #4
 80169ea:	d172      	bne.n	8016ad2 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80169ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	2b09      	cmp	r3, #9
 80169f2:	d002      	beq.n	80169fa <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80169f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f6:	2209      	movs	r2, #9
 80169f8:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80169fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169fe:	221a      	movs	r2, #26
 8016a00:	fb02 f303 	mul.w	r3, r2, r3
 8016a04:	3308      	adds	r3, #8
 8016a06:	6a3a      	ldr	r2, [r7, #32]
 8016a08:	4413      	add	r3, r2
 8016a0a:	3302      	adds	r3, #2
 8016a0c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016a10:	69f8      	ldr	r0, [r7, #28]
 8016a12:	f000 f87a 	bl	8016b0a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8016a16:	2300      	movs	r3, #0
 8016a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016a20:	e03f      	b.n	8016aa2 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016a22:	f107 0316 	add.w	r3, r7, #22
 8016a26:	4619      	mov	r1, r3
 8016a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a2a:	f000 f9b9 	bl	8016da0 <USBH_GetNextDesc>
 8016a2e:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a32:	785b      	ldrb	r3, [r3, #1]
 8016a34:	2b05      	cmp	r3, #5
 8016a36:	d134      	bne.n	8016aa2 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	795b      	ldrb	r3, [r3, #5]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d10f      	bne.n	8016a60 <USBH_ParseCfgDesc+0x140>
 8016a40:	69fb      	ldr	r3, [r7, #28]
 8016a42:	799b      	ldrb	r3, [r3, #6]
 8016a44:	2b02      	cmp	r3, #2
 8016a46:	d10b      	bne.n	8016a60 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	79db      	ldrb	r3, [r3, #7]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d10b      	bne.n	8016a68 <USBH_ParseCfgDesc+0x148>
 8016a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	2b09      	cmp	r3, #9
 8016a56:	d007      	beq.n	8016a68 <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 8016a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5a:	2209      	movs	r2, #9
 8016a5c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016a5e:	e003      	b.n	8016a68 <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a62:	2207      	movs	r2, #7
 8016a64:	701a      	strb	r2, [r3, #0]
 8016a66:	e000      	b.n	8016a6a <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016a68:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8016a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016a72:	3201      	adds	r2, #1
 8016a74:	00d2      	lsls	r2, r2, #3
 8016a76:	211a      	movs	r1, #26
 8016a78:	fb01 f303 	mul.w	r3, r1, r3
 8016a7c:	4413      	add	r3, r2
 8016a7e:	3308      	adds	r3, #8
 8016a80:	6a3a      	ldr	r2, [r7, #32]
 8016a82:	4413      	add	r3, r2
 8016a84:	3304      	adds	r3, #4
 8016a86:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8016a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a8a:	69b9      	ldr	r1, [r7, #24]
 8016a8c:	68f8      	ldr	r0, [r7, #12]
 8016a8e:	f000 f86b 	bl	8016b68 <USBH_ParseEPDesc>
 8016a92:	4603      	mov	r3, r0
 8016a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8016a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a9c:	3301      	adds	r3, #1
 8016a9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016aa2:	69fb      	ldr	r3, [r7, #28]
 8016aa4:	791b      	ldrb	r3, [r3, #4]
 8016aa6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d204      	bcs.n	8016ab8 <USBH_ParseCfgDesc+0x198>
 8016aae:	6a3b      	ldr	r3, [r7, #32]
 8016ab0:	885a      	ldrh	r2, [r3, #2]
 8016ab2:	8afb      	ldrh	r3, [r7, #22]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d8b4      	bhi.n	8016a22 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	791b      	ldrb	r3, [r3, #4]
 8016abc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d201      	bcs.n	8016ac8 <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 8016ac4:	2303      	movs	r3, #3
 8016ac6:	e01c      	b.n	8016b02 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 8016ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016acc:	3301      	adds	r3, #1
 8016ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ad6:	2b09      	cmp	r3, #9
 8016ad8:	d805      	bhi.n	8016ae6 <USBH_ParseCfgDesc+0x1c6>
 8016ada:	6a3b      	ldr	r3, [r7, #32]
 8016adc:	885a      	ldrh	r2, [r3, #2]
 8016ade:	8afb      	ldrh	r3, [r7, #22]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	f63f af78 	bhi.w	80169d6 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8016ae6:	6a3b      	ldr	r3, [r7, #32]
 8016ae8:	791b      	ldrb	r3, [r3, #4]
 8016aea:	2b0a      	cmp	r3, #10
 8016aec:	bf28      	it	cs
 8016aee:	230a      	movcs	r3, #10
 8016af0:	b2db      	uxtb	r3, r3
 8016af2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d201      	bcs.n	8016afe <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 8016afa:	2303      	movs	r3, #3
 8016afc:	e001      	b.n	8016b02 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3730      	adds	r7, #48	; 0x30
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}

08016b0a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8016b0a:	b480      	push	{r7}
 8016b0c:	b083      	sub	sp, #12
 8016b0e:	af00      	add	r7, sp, #0
 8016b10:	6078      	str	r0, [r7, #4]
 8016b12:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	781a      	ldrb	r2, [r3, #0]
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	785a      	ldrb	r2, [r3, #1]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	789a      	ldrb	r2, [r3, #2]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	78da      	ldrb	r2, [r3, #3]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	791a      	ldrb	r2, [r3, #4]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	795a      	ldrb	r2, [r3, #5]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	799a      	ldrb	r2, [r3, #6]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	79da      	ldrb	r2, [r3, #7]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	7a1a      	ldrb	r2, [r3, #8]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	721a      	strb	r2, [r3, #8]
}
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b087      	sub	sp, #28
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	781a      	ldrb	r2, [r3, #0]
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	785a      	ldrb	r2, [r3, #1]
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	789a      	ldrb	r2, [r3, #2]
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	78da      	ldrb	r2, [r3, #3]
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	3304      	adds	r3, #4
 8016b9c:	781b      	ldrb	r3, [r3, #0]
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	3305      	adds	r3, #5
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	021b      	lsls	r3, r3, #8
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	4313      	orrs	r3, r2
 8016bae:	b29a      	uxth	r2, r3
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	799a      	ldrb	r2, [r3, #6]
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	889b      	ldrh	r3, [r3, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d009      	beq.n	8016bd8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8016bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016bcc:	d804      	bhi.n	8016bd8 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bd6:	d901      	bls.n	8016bdc <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8016bd8:	2303      	movs	r3, #3
 8016bda:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d136      	bne.n	8016c54 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	78db      	ldrb	r3, [r3, #3]
 8016bea:	f003 0303 	and.w	r3, r3, #3
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d108      	bne.n	8016c04 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	889b      	ldrh	r3, [r3, #4]
 8016bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bfa:	f240 8097 	bls.w	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016bfe:	2303      	movs	r3, #3
 8016c00:	75fb      	strb	r3, [r7, #23]
 8016c02:	e093      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016c04:	68bb      	ldr	r3, [r7, #8]
 8016c06:	78db      	ldrb	r3, [r3, #3]
 8016c08:	f003 0303 	and.w	r3, r3, #3
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d107      	bne.n	8016c20 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	889b      	ldrh	r3, [r3, #4]
 8016c14:	2b40      	cmp	r3, #64	; 0x40
 8016c16:	f240 8089 	bls.w	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016c1a:	2303      	movs	r3, #3
 8016c1c:	75fb      	strb	r3, [r7, #23]
 8016c1e:	e085      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	78db      	ldrb	r3, [r3, #3]
 8016c24:	f003 0303 	and.w	r3, r3, #3
 8016c28:	2b01      	cmp	r3, #1
 8016c2a:	d005      	beq.n	8016c38 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	78db      	ldrb	r3, [r3, #3]
 8016c30:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016c34:	2b03      	cmp	r3, #3
 8016c36:	d10a      	bne.n	8016c4e <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	799b      	ldrb	r3, [r3, #6]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d003      	beq.n	8016c48 <USBH_ParseEPDesc+0xe0>
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	799b      	ldrb	r3, [r3, #6]
 8016c44:	2b10      	cmp	r3, #16
 8016c46:	d970      	bls.n	8016d2a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8016c48:	2303      	movs	r3, #3
 8016c4a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016c4c:	e06d      	b.n	8016d2a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016c4e:	2303      	movs	r3, #3
 8016c50:	75fb      	strb	r3, [r7, #23]
 8016c52:	e06b      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016c5a:	2b01      	cmp	r3, #1
 8016c5c:	d13c      	bne.n	8016cd8 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	78db      	ldrb	r3, [r3, #3]
 8016c62:	f003 0303 	and.w	r3, r3, #3
 8016c66:	2b02      	cmp	r3, #2
 8016c68:	d005      	beq.n	8016c76 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8016c6a:	68bb      	ldr	r3, [r7, #8]
 8016c6c:	78db      	ldrb	r3, [r3, #3]
 8016c6e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d106      	bne.n	8016c84 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	889b      	ldrh	r3, [r3, #4]
 8016c7a:	2b40      	cmp	r3, #64	; 0x40
 8016c7c:	d956      	bls.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016c7e:	2303      	movs	r3, #3
 8016c80:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016c82:	e053      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	78db      	ldrb	r3, [r3, #3]
 8016c88:	f003 0303 	and.w	r3, r3, #3
 8016c8c:	2b01      	cmp	r3, #1
 8016c8e:	d10e      	bne.n	8016cae <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	799b      	ldrb	r3, [r3, #6]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d007      	beq.n	8016ca8 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8016c9c:	2b10      	cmp	r3, #16
 8016c9e:	d803      	bhi.n	8016ca8 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8016ca4:	2b40      	cmp	r3, #64	; 0x40
 8016ca6:	d941      	bls.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016ca8:	2303      	movs	r3, #3
 8016caa:	75fb      	strb	r3, [r7, #23]
 8016cac:	e03e      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	78db      	ldrb	r3, [r3, #3]
 8016cb2:	f003 0303 	and.w	r3, r3, #3
 8016cb6:	2b03      	cmp	r3, #3
 8016cb8:	d10b      	bne.n	8016cd2 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	799b      	ldrb	r3, [r3, #6]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d004      	beq.n	8016ccc <USBH_ParseEPDesc+0x164>
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	889b      	ldrh	r3, [r3, #4]
 8016cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016cca:	d32f      	bcc.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016ccc:	2303      	movs	r3, #3
 8016cce:	75fb      	strb	r3, [r7, #23]
 8016cd0:	e02c      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016cd2:	2303      	movs	r3, #3
 8016cd4:	75fb      	strb	r3, [r7, #23]
 8016cd6:	e029      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016cde:	2b02      	cmp	r3, #2
 8016ce0:	d120      	bne.n	8016d24 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	78db      	ldrb	r3, [r3, #3]
 8016ce6:	f003 0303 	and.w	r3, r3, #3
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d106      	bne.n	8016cfc <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	889b      	ldrh	r3, [r3, #4]
 8016cf2:	2b08      	cmp	r3, #8
 8016cf4:	d01a      	beq.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016cf6:	2303      	movs	r3, #3
 8016cf8:	75fb      	strb	r3, [r7, #23]
 8016cfa:	e017      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	78db      	ldrb	r3, [r3, #3]
 8016d00:	f003 0303 	and.w	r3, r3, #3
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	d10a      	bne.n	8016d1e <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	799b      	ldrb	r3, [r3, #6]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d003      	beq.n	8016d18 <USBH_ParseEPDesc+0x1b0>
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	889b      	ldrh	r3, [r3, #4]
 8016d14:	2b08      	cmp	r3, #8
 8016d16:	d909      	bls.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016d18:	2303      	movs	r3, #3
 8016d1a:	75fb      	strb	r3, [r7, #23]
 8016d1c:	e006      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016d1e:	2303      	movs	r3, #3
 8016d20:	75fb      	strb	r3, [r7, #23]
 8016d22:	e003      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016d24:	2303      	movs	r3, #3
 8016d26:	75fb      	strb	r3, [r7, #23]
 8016d28:	e000      	b.n	8016d2c <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016d2a:	bf00      	nop
  }

  return status;
 8016d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	371c      	adds	r7, #28
 8016d32:	46bd      	mov	sp, r7
 8016d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d38:	4770      	bx	lr

08016d3a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8016d3a:	b480      	push	{r7}
 8016d3c:	b087      	sub	sp, #28
 8016d3e:	af00      	add	r7, sp, #0
 8016d40:	60f8      	str	r0, [r7, #12]
 8016d42:	60b9      	str	r1, [r7, #8]
 8016d44:	4613      	mov	r3, r2
 8016d46:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	2b03      	cmp	r3, #3
 8016d50:	d120      	bne.n	8016d94 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	1e9a      	subs	r2, r3, #2
 8016d58:	88fb      	ldrh	r3, [r7, #6]
 8016d5a:	4293      	cmp	r3, r2
 8016d5c:	bf28      	it	cs
 8016d5e:	4613      	movcs	r3, r2
 8016d60:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	3302      	adds	r3, #2
 8016d66:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8016d68:	2300      	movs	r3, #0
 8016d6a:	82fb      	strh	r3, [r7, #22]
 8016d6c:	e00b      	b.n	8016d86 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8016d6e:	8afb      	ldrh	r3, [r7, #22]
 8016d70:	68fa      	ldr	r2, [r7, #12]
 8016d72:	4413      	add	r3, r2
 8016d74:	781a      	ldrb	r2, [r3, #0]
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	701a      	strb	r2, [r3, #0]
      pdest++;
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8016d80:	8afb      	ldrh	r3, [r7, #22]
 8016d82:	3302      	adds	r3, #2
 8016d84:	82fb      	strh	r3, [r7, #22]
 8016d86:	8afa      	ldrh	r2, [r7, #22]
 8016d88:	8abb      	ldrh	r3, [r7, #20]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d3ef      	bcc.n	8016d6e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	2200      	movs	r2, #0
 8016d92:	701a      	strb	r2, [r3, #0]
  }
}
 8016d94:	bf00      	nop
 8016d96:	371c      	adds	r7, #28
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9e:	4770      	bx	lr

08016da0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016da0:	b480      	push	{r7}
 8016da2:	b085      	sub	sp, #20
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	881a      	ldrh	r2, [r3, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	b29b      	uxth	r3, r3
 8016db4:	4413      	add	r3, r2
 8016db6:	b29a      	uxth	r2, r3
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	781b      	ldrb	r3, [r3, #0]
 8016dc0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016dc8:	68fb      	ldr	r3, [r7, #12]
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3714      	adds	r7, #20
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016dd6:	b580      	push	{r7, lr}
 8016dd8:	b086      	sub	sp, #24
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	60f8      	str	r0, [r7, #12]
 8016dde:	60b9      	str	r1, [r7, #8]
 8016de0:	4613      	mov	r3, r2
 8016de2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016de4:	2301      	movs	r3, #1
 8016de6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	789b      	ldrb	r3, [r3, #2]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d002      	beq.n	8016df6 <USBH_CtlReq+0x20>
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d00f      	beq.n	8016e14 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8016df4:	e027      	b.n	8016e46 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	68ba      	ldr	r2, [r7, #8]
 8016dfa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	88fa      	ldrh	r2, [r7, #6]
 8016e00:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2201      	movs	r2, #1
 8016e06:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2202      	movs	r2, #2
 8016e0c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8016e0e:	2301      	movs	r3, #1
 8016e10:	75fb      	strb	r3, [r7, #23]
      break;
 8016e12:	e018      	b.n	8016e46 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f000 f81b 	bl	8016e50 <USBH_HandleControl>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8016e1e:	7dfb      	ldrb	r3, [r7, #23]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d002      	beq.n	8016e2a <USBH_CtlReq+0x54>
 8016e24:	7dfb      	ldrb	r3, [r7, #23]
 8016e26:	2b03      	cmp	r3, #3
 8016e28:	d106      	bne.n	8016e38 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2201      	movs	r2, #1
 8016e2e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2200      	movs	r2, #0
 8016e34:	761a      	strb	r2, [r3, #24]
      break;
 8016e36:	e005      	b.n	8016e44 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8016e38:	7dfb      	ldrb	r3, [r7, #23]
 8016e3a:	2b02      	cmp	r3, #2
 8016e3c:	d102      	bne.n	8016e44 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	2201      	movs	r2, #1
 8016e42:	709a      	strb	r2, [r3, #2]
      break;
 8016e44:	bf00      	nop
  }
  return status;
 8016e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3718      	adds	r7, #24
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b086      	sub	sp, #24
 8016e54:	af02      	add	r7, sp, #8
 8016e56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8016e58:	2301      	movs	r3, #1
 8016e5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	7e1b      	ldrb	r3, [r3, #24]
 8016e64:	3b01      	subs	r3, #1
 8016e66:	2b0a      	cmp	r3, #10
 8016e68:	f200 8156 	bhi.w	8017118 <USBH_HandleControl+0x2c8>
 8016e6c:	a201      	add	r2, pc, #4	; (adr r2, 8016e74 <USBH_HandleControl+0x24>)
 8016e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e72:	bf00      	nop
 8016e74:	08016ea1 	.word	0x08016ea1
 8016e78:	08016ebb 	.word	0x08016ebb
 8016e7c:	08016f25 	.word	0x08016f25
 8016e80:	08016f4b 	.word	0x08016f4b
 8016e84:	08016f83 	.word	0x08016f83
 8016e88:	08016fad 	.word	0x08016fad
 8016e8c:	08016fff 	.word	0x08016fff
 8016e90:	08017021 	.word	0x08017021
 8016e94:	0801705d 	.word	0x0801705d
 8016e98:	08017083 	.word	0x08017083
 8016e9c:	080170c1 	.word	0x080170c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f103 0110 	add.w	r1, r3, #16
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	795b      	ldrb	r3, [r3, #5]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f000 f943 	bl	8017138 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2202      	movs	r2, #2
 8016eb6:	761a      	strb	r2, [r3, #24]
      break;
 8016eb8:	e139      	b.n	801712e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	795b      	ldrb	r3, [r3, #5]
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f7ed ff3d 	bl	8004d40 <USBH_LL_GetURBState>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016eca:	7bbb      	ldrb	r3, [r7, #14]
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d11e      	bne.n	8016f0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	7c1b      	ldrb	r3, [r3, #16]
 8016ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016ed8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	8adb      	ldrh	r3, [r3, #22]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d00a      	beq.n	8016ef8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016ee2:	7b7b      	ldrb	r3, [r7, #13]
 8016ee4:	2b80      	cmp	r3, #128	; 0x80
 8016ee6:	d103      	bne.n	8016ef0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2203      	movs	r2, #3
 8016eec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016eee:	e115      	b.n	801711c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2205      	movs	r2, #5
 8016ef4:	761a      	strb	r2, [r3, #24]
      break;
 8016ef6:	e111      	b.n	801711c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8016ef8:	7b7b      	ldrb	r3, [r7, #13]
 8016efa:	2b80      	cmp	r3, #128	; 0x80
 8016efc:	d103      	bne.n	8016f06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2209      	movs	r2, #9
 8016f02:	761a      	strb	r2, [r3, #24]
      break;
 8016f04:	e10a      	b.n	801711c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2207      	movs	r2, #7
 8016f0a:	761a      	strb	r2, [r3, #24]
      break;
 8016f0c:	e106      	b.n	801711c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016f0e:	7bbb      	ldrb	r3, [r7, #14]
 8016f10:	2b04      	cmp	r3, #4
 8016f12:	d003      	beq.n	8016f1c <USBH_HandleControl+0xcc>
 8016f14:	7bbb      	ldrb	r3, [r7, #14]
 8016f16:	2b02      	cmp	r3, #2
 8016f18:	f040 8100 	bne.w	801711c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	220b      	movs	r2, #11
 8016f20:	761a      	strb	r2, [r3, #24]
      break;
 8016f22:	e0fb      	b.n	801711c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6899      	ldr	r1, [r3, #8]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	899a      	ldrh	r2, [r3, #12]
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	791b      	ldrb	r3, [r3, #4]
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f000 f93a 	bl	80171b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2204      	movs	r2, #4
 8016f46:	761a      	strb	r2, [r3, #24]
      break;
 8016f48:	e0f1      	b.n	801712e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	791b      	ldrb	r3, [r3, #4]
 8016f4e:	4619      	mov	r1, r3
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f7ed fef5 	bl	8004d40 <USBH_LL_GetURBState>
 8016f56:	4603      	mov	r3, r0
 8016f58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016f5a:	7bbb      	ldrb	r3, [r7, #14]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	d102      	bne.n	8016f66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2209      	movs	r2, #9
 8016f64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016f66:	7bbb      	ldrb	r3, [r7, #14]
 8016f68:	2b05      	cmp	r3, #5
 8016f6a:	d102      	bne.n	8016f72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016f6c:	2303      	movs	r3, #3
 8016f6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016f70:	e0d6      	b.n	8017120 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8016f72:	7bbb      	ldrb	r3, [r7, #14]
 8016f74:	2b04      	cmp	r3, #4
 8016f76:	f040 80d3 	bne.w	8017120 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	220b      	movs	r2, #11
 8016f7e:	761a      	strb	r2, [r3, #24]
      break;
 8016f80:	e0ce      	b.n	8017120 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6899      	ldr	r1, [r3, #8]
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	899a      	ldrh	r2, [r3, #12]
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	795b      	ldrb	r3, [r3, #5]
 8016f8e:	2001      	movs	r0, #1
 8016f90:	9000      	str	r0, [sp, #0]
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f000 f8ea 	bl	801716c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	761a      	strb	r2, [r3, #24]
      break;
 8016faa:	e0c0      	b.n	801712e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	795b      	ldrb	r3, [r3, #5]
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7ed fec4 	bl	8004d40 <USBH_LL_GetURBState>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016fbc:	7bbb      	ldrb	r3, [r7, #14]
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d103      	bne.n	8016fca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2207      	movs	r2, #7
 8016fc6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016fc8:	e0ac      	b.n	8017124 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8016fca:	7bbb      	ldrb	r3, [r7, #14]
 8016fcc:	2b05      	cmp	r3, #5
 8016fce:	d105      	bne.n	8016fdc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	220c      	movs	r2, #12
 8016fd4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016fd6:	2303      	movs	r3, #3
 8016fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8016fda:	e0a3      	b.n	8017124 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016fdc:	7bbb      	ldrb	r3, [r7, #14]
 8016fde:	2b02      	cmp	r3, #2
 8016fe0:	d103      	bne.n	8016fea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	2205      	movs	r2, #5
 8016fe6:	761a      	strb	r2, [r3, #24]
      break;
 8016fe8:	e09c      	b.n	8017124 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8016fea:	7bbb      	ldrb	r3, [r7, #14]
 8016fec:	2b04      	cmp	r3, #4
 8016fee:	f040 8099 	bne.w	8017124 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	220b      	movs	r2, #11
 8016ff6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8016ffc:	e092      	b.n	8017124 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	791b      	ldrb	r3, [r3, #4]
 8017002:	2200      	movs	r2, #0
 8017004:	2100      	movs	r1, #0
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f8d5 	bl	80171b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017012:	b29a      	uxth	r2, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2208      	movs	r2, #8
 801701c:	761a      	strb	r2, [r3, #24]

      break;
 801701e:	e086      	b.n	801712e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	791b      	ldrb	r3, [r3, #4]
 8017024:	4619      	mov	r1, r3
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f7ed fe8a 	bl	8004d40 <USBH_LL_GetURBState>
 801702c:	4603      	mov	r3, r0
 801702e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8017030:	7bbb      	ldrb	r3, [r7, #14]
 8017032:	2b01      	cmp	r3, #1
 8017034:	d105      	bne.n	8017042 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	220d      	movs	r2, #13
 801703a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801703c:	2300      	movs	r3, #0
 801703e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8017040:	e072      	b.n	8017128 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8017042:	7bbb      	ldrb	r3, [r7, #14]
 8017044:	2b04      	cmp	r3, #4
 8017046:	d103      	bne.n	8017050 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	220b      	movs	r2, #11
 801704c:	761a      	strb	r2, [r3, #24]
      break;
 801704e:	e06b      	b.n	8017128 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8017050:	7bbb      	ldrb	r3, [r7, #14]
 8017052:	2b05      	cmp	r3, #5
 8017054:	d168      	bne.n	8017128 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8017056:	2303      	movs	r3, #3
 8017058:	73fb      	strb	r3, [r7, #15]
      break;
 801705a:	e065      	b.n	8017128 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	795b      	ldrb	r3, [r3, #5]
 8017060:	2201      	movs	r2, #1
 8017062:	9200      	str	r2, [sp, #0]
 8017064:	2200      	movs	r2, #0
 8017066:	2100      	movs	r1, #0
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f000 f87f 	bl	801716c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8017074:	b29a      	uxth	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	220a      	movs	r2, #10
 801707e:	761a      	strb	r2, [r3, #24]
      break;
 8017080:	e055      	b.n	801712e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	795b      	ldrb	r3, [r3, #5]
 8017086:	4619      	mov	r1, r3
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f7ed fe59 	bl	8004d40 <USBH_LL_GetURBState>
 801708e:	4603      	mov	r3, r0
 8017090:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8017092:	7bbb      	ldrb	r3, [r7, #14]
 8017094:	2b01      	cmp	r3, #1
 8017096:	d105      	bne.n	80170a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8017098:	2300      	movs	r3, #0
 801709a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	220d      	movs	r2, #13
 80170a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80170a2:	e043      	b.n	801712c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80170a4:	7bbb      	ldrb	r3, [r7, #14]
 80170a6:	2b02      	cmp	r3, #2
 80170a8:	d103      	bne.n	80170b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	2209      	movs	r2, #9
 80170ae:	761a      	strb	r2, [r3, #24]
      break;
 80170b0:	e03c      	b.n	801712c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80170b2:	7bbb      	ldrb	r3, [r7, #14]
 80170b4:	2b04      	cmp	r3, #4
 80170b6:	d139      	bne.n	801712c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	220b      	movs	r2, #11
 80170bc:	761a      	strb	r2, [r3, #24]
      break;
 80170be:	e035      	b.n	801712c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7e5b      	ldrb	r3, [r3, #25]
 80170c4:	3301      	adds	r3, #1
 80170c6:	b2da      	uxtb	r2, r3
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	765a      	strb	r2, [r3, #25]
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	7e5b      	ldrb	r3, [r3, #25]
 80170d0:	2b02      	cmp	r3, #2
 80170d2:	d806      	bhi.n	80170e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2201      	movs	r2, #1
 80170d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2201      	movs	r2, #1
 80170de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80170e0:	e025      	b.n	801712e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80170e8:	2106      	movs	r1, #6
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2200      	movs	r2, #0
 80170f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	795b      	ldrb	r3, [r3, #5]
 80170f8:	4619      	mov	r1, r3
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f000 f90d 	bl	801731a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	791b      	ldrb	r3, [r3, #4]
 8017104:	4619      	mov	r1, r3
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f000 f907 	bl	801731a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2200      	movs	r2, #0
 8017110:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8017112:	2302      	movs	r3, #2
 8017114:	73fb      	strb	r3, [r7, #15]
      break;
 8017116:	e00a      	b.n	801712e <USBH_HandleControl+0x2de>

    default:
      break;
 8017118:	bf00      	nop
 801711a:	e008      	b.n	801712e <USBH_HandleControl+0x2de>
      break;
 801711c:	bf00      	nop
 801711e:	e006      	b.n	801712e <USBH_HandleControl+0x2de>
      break;
 8017120:	bf00      	nop
 8017122:	e004      	b.n	801712e <USBH_HandleControl+0x2de>
      break;
 8017124:	bf00      	nop
 8017126:	e002      	b.n	801712e <USBH_HandleControl+0x2de>
      break;
 8017128:	bf00      	nop
 801712a:	e000      	b.n	801712e <USBH_HandleControl+0x2de>
      break;
 801712c:	bf00      	nop
  }

  return status;
 801712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017130:	4618      	mov	r0, r3
 8017132:	3710      	adds	r7, #16
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}

08017138 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b088      	sub	sp, #32
 801713c:	af04      	add	r7, sp, #16
 801713e:	60f8      	str	r0, [r7, #12]
 8017140:	60b9      	str	r1, [r7, #8]
 8017142:	4613      	mov	r3, r2
 8017144:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017146:	79f9      	ldrb	r1, [r7, #7]
 8017148:	2300      	movs	r3, #0
 801714a:	9303      	str	r3, [sp, #12]
 801714c:	2308      	movs	r3, #8
 801714e:	9302      	str	r3, [sp, #8]
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	9301      	str	r3, [sp, #4]
 8017154:	2300      	movs	r3, #0
 8017156:	9300      	str	r3, [sp, #0]
 8017158:	2300      	movs	r3, #0
 801715a:	2200      	movs	r2, #0
 801715c:	68f8      	ldr	r0, [r7, #12]
 801715e:	f7ed fdbe 	bl	8004cde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8017162:	2300      	movs	r3, #0
}
 8017164:	4618      	mov	r0, r3
 8017166:	3710      	adds	r7, #16
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}

0801716c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b088      	sub	sp, #32
 8017170:	af04      	add	r7, sp, #16
 8017172:	60f8      	str	r0, [r7, #12]
 8017174:	60b9      	str	r1, [r7, #8]
 8017176:	4611      	mov	r1, r2
 8017178:	461a      	mov	r2, r3
 801717a:	460b      	mov	r3, r1
 801717c:	80fb      	strh	r3, [r7, #6]
 801717e:	4613      	mov	r3, r2
 8017180:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8017188:	2b00      	cmp	r3, #0
 801718a:	d001      	beq.n	8017190 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801718c:	2300      	movs	r3, #0
 801718e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017190:	7979      	ldrb	r1, [r7, #5]
 8017192:	7e3b      	ldrb	r3, [r7, #24]
 8017194:	9303      	str	r3, [sp, #12]
 8017196:	88fb      	ldrh	r3, [r7, #6]
 8017198:	9302      	str	r3, [sp, #8]
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	9301      	str	r3, [sp, #4]
 801719e:	2301      	movs	r3, #1
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	2300      	movs	r3, #0
 80171a4:	2200      	movs	r2, #0
 80171a6:	68f8      	ldr	r0, [r7, #12]
 80171a8:	f7ed fd99 	bl	8004cde <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80171ac:	2300      	movs	r3, #0
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3710      	adds	r7, #16
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b088      	sub	sp, #32
 80171ba:	af04      	add	r7, sp, #16
 80171bc:	60f8      	str	r0, [r7, #12]
 80171be:	60b9      	str	r1, [r7, #8]
 80171c0:	4611      	mov	r1, r2
 80171c2:	461a      	mov	r2, r3
 80171c4:	460b      	mov	r3, r1
 80171c6:	80fb      	strh	r3, [r7, #6]
 80171c8:	4613      	mov	r3, r2
 80171ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80171cc:	7979      	ldrb	r1, [r7, #5]
 80171ce:	2300      	movs	r3, #0
 80171d0:	9303      	str	r3, [sp, #12]
 80171d2:	88fb      	ldrh	r3, [r7, #6]
 80171d4:	9302      	str	r3, [sp, #8]
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	9301      	str	r3, [sp, #4]
 80171da:	2301      	movs	r3, #1
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	2300      	movs	r3, #0
 80171e0:	2201      	movs	r2, #1
 80171e2:	68f8      	ldr	r0, [r7, #12]
 80171e4:	f7ed fd7b 	bl	8004cde <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80171e8:	2300      	movs	r3, #0

}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3710      	adds	r7, #16
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}

080171f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80171f2:	b580      	push	{r7, lr}
 80171f4:	b088      	sub	sp, #32
 80171f6:	af04      	add	r7, sp, #16
 80171f8:	60f8      	str	r0, [r7, #12]
 80171fa:	60b9      	str	r1, [r7, #8]
 80171fc:	4611      	mov	r1, r2
 80171fe:	461a      	mov	r2, r3
 8017200:	460b      	mov	r3, r1
 8017202:	80fb      	strh	r3, [r7, #6]
 8017204:	4613      	mov	r3, r2
 8017206:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801720e:	2b00      	cmp	r3, #0
 8017210:	d001      	beq.n	8017216 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8017212:	2300      	movs	r3, #0
 8017214:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017216:	7979      	ldrb	r1, [r7, #5]
 8017218:	7e3b      	ldrb	r3, [r7, #24]
 801721a:	9303      	str	r3, [sp, #12]
 801721c:	88fb      	ldrh	r3, [r7, #6]
 801721e:	9302      	str	r3, [sp, #8]
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	9301      	str	r3, [sp, #4]
 8017224:	2301      	movs	r3, #1
 8017226:	9300      	str	r3, [sp, #0]
 8017228:	2302      	movs	r3, #2
 801722a:	2200      	movs	r2, #0
 801722c:	68f8      	ldr	r0, [r7, #12]
 801722e:	f7ed fd56 	bl	8004cde <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8017232:	2300      	movs	r3, #0
}
 8017234:	4618      	mov	r0, r3
 8017236:	3710      	adds	r7, #16
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}

0801723c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b088      	sub	sp, #32
 8017240:	af04      	add	r7, sp, #16
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	4611      	mov	r1, r2
 8017248:	461a      	mov	r2, r3
 801724a:	460b      	mov	r3, r1
 801724c:	80fb      	strh	r3, [r7, #6]
 801724e:	4613      	mov	r3, r2
 8017250:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8017252:	7979      	ldrb	r1, [r7, #5]
 8017254:	2300      	movs	r3, #0
 8017256:	9303      	str	r3, [sp, #12]
 8017258:	88fb      	ldrh	r3, [r7, #6]
 801725a:	9302      	str	r3, [sp, #8]
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	9301      	str	r3, [sp, #4]
 8017260:	2301      	movs	r3, #1
 8017262:	9300      	str	r3, [sp, #0]
 8017264:	2302      	movs	r3, #2
 8017266:	2201      	movs	r2, #1
 8017268:	68f8      	ldr	r0, [r7, #12]
 801726a:	f7ed fd38 	bl	8004cde <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801726e:	2300      	movs	r3, #0
}
 8017270:	4618      	mov	r0, r3
 8017272:	3710      	adds	r7, #16
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}

08017278 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b086      	sub	sp, #24
 801727c:	af04      	add	r7, sp, #16
 801727e:	6078      	str	r0, [r7, #4]
 8017280:	4608      	mov	r0, r1
 8017282:	4611      	mov	r1, r2
 8017284:	461a      	mov	r2, r3
 8017286:	4603      	mov	r3, r0
 8017288:	70fb      	strb	r3, [r7, #3]
 801728a:	460b      	mov	r3, r1
 801728c:	70bb      	strb	r3, [r7, #2]
 801728e:	4613      	mov	r3, r2
 8017290:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8017292:	7878      	ldrb	r0, [r7, #1]
 8017294:	78ba      	ldrb	r2, [r7, #2]
 8017296:	78f9      	ldrb	r1, [r7, #3]
 8017298:	8b3b      	ldrh	r3, [r7, #24]
 801729a:	9302      	str	r3, [sp, #8]
 801729c:	7d3b      	ldrb	r3, [r7, #20]
 801729e:	9301      	str	r3, [sp, #4]
 80172a0:	7c3b      	ldrb	r3, [r7, #16]
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	4603      	mov	r3, r0
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f7ed fccb 	bl	8004c42 <USBH_LL_OpenPipe>

  return USBH_OK;
 80172ac:	2300      	movs	r3, #0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}

080172b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b082      	sub	sp, #8
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	460b      	mov	r3, r1
 80172c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80172c2:	78fb      	ldrb	r3, [r7, #3]
 80172c4:	4619      	mov	r1, r3
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f7ed fcea 	bl	8004ca0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80172cc:	2300      	movs	r3, #0
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	3708      	adds	r7, #8
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd80      	pop	{r7, pc}

080172d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80172d6:	b580      	push	{r7, lr}
 80172d8:	b084      	sub	sp, #16
 80172da:	af00      	add	r7, sp, #0
 80172dc:	6078      	str	r0, [r7, #4]
 80172de:	460b      	mov	r3, r1
 80172e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f000 f839 	bl	801735a <USBH_GetFreePipe>
 80172e8:	4603      	mov	r3, r0
 80172ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80172ec:	89fb      	ldrh	r3, [r7, #14]
 80172ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172f2:	4293      	cmp	r3, r2
 80172f4:	d00b      	beq.n	801730e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80172f6:	78fa      	ldrb	r2, [r7, #3]
 80172f8:	89fb      	ldrh	r3, [r7, #14]
 80172fa:	f003 030f 	and.w	r3, r3, #15
 80172fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017302:	6879      	ldr	r1, [r7, #4]
 8017304:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017308:	009b      	lsls	r3, r3, #2
 801730a:	440b      	add	r3, r1
 801730c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801730e:	89fb      	ldrh	r3, [r7, #14]
 8017310:	b2db      	uxtb	r3, r3
}
 8017312:	4618      	mov	r0, r3
 8017314:	3710      	adds	r7, #16
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801731a:	b480      	push	{r7}
 801731c:	b083      	sub	sp, #12
 801731e:	af00      	add	r7, sp, #0
 8017320:	6078      	str	r0, [r7, #4]
 8017322:	460b      	mov	r3, r1
 8017324:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8017326:	78fb      	ldrb	r3, [r7, #3]
 8017328:	2b0f      	cmp	r3, #15
 801732a:	d80f      	bhi.n	801734c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801732c:	78fb      	ldrb	r3, [r7, #3]
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	4413      	add	r3, r2
 8017338:	685a      	ldr	r2, [r3, #4]
 801733a:	78fb      	ldrb	r3, [r7, #3]
 801733c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017340:	6879      	ldr	r1, [r7, #4]
 8017342:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017346:	009b      	lsls	r3, r3, #2
 8017348:	440b      	add	r3, r1
 801734a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801734c:	2300      	movs	r3, #0
}
 801734e:	4618      	mov	r0, r3
 8017350:	370c      	adds	r7, #12
 8017352:	46bd      	mov	sp, r7
 8017354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017358:	4770      	bx	lr

0801735a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801735a:	b480      	push	{r7}
 801735c:	b085      	sub	sp, #20
 801735e:	af00      	add	r7, sp, #0
 8017360:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8017362:	2300      	movs	r3, #0
 8017364:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017366:	2300      	movs	r3, #0
 8017368:	73fb      	strb	r3, [r7, #15]
 801736a:	e010      	b.n	801738e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801736c:	7bfb      	ldrb	r3, [r7, #15]
 801736e:	687a      	ldr	r2, [r7, #4]
 8017370:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	4413      	add	r3, r2
 8017378:	685b      	ldr	r3, [r3, #4]
 801737a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801737e:	2b00      	cmp	r3, #0
 8017380:	d102      	bne.n	8017388 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8017382:	7bfb      	ldrb	r3, [r7, #15]
 8017384:	b29b      	uxth	r3, r3
 8017386:	e007      	b.n	8017398 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8017388:	7bfb      	ldrb	r3, [r7, #15]
 801738a:	3301      	adds	r3, #1
 801738c:	73fb      	strb	r3, [r7, #15]
 801738e:	7bfb      	ldrb	r3, [r7, #15]
 8017390:	2b0f      	cmp	r3, #15
 8017392:	d9eb      	bls.n	801736c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8017394:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8017398:	4618      	mov	r0, r3
 801739a:	3714      	adds	r7, #20
 801739c:	46bd      	mov	sp, r7
 801739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a2:	4770      	bx	lr

080173a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80173a4:	b480      	push	{r7}
 80173a6:	b087      	sub	sp, #28
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	4613      	mov	r3, r2
 80173b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80173b2:	2301      	movs	r3, #1
 80173b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80173b6:	2300      	movs	r3, #0
 80173b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80173ba:	4b1f      	ldr	r3, [pc, #124]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173bc:	7a5b      	ldrb	r3, [r3, #9]
 80173be:	b2db      	uxtb	r3, r3
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d131      	bne.n	8017428 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80173c4:	4b1c      	ldr	r3, [pc, #112]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173c6:	7a5b      	ldrb	r3, [r3, #9]
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	461a      	mov	r2, r3
 80173cc:	4b1a      	ldr	r3, [pc, #104]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173ce:	2100      	movs	r1, #0
 80173d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80173d2:	4b19      	ldr	r3, [pc, #100]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173d4:	7a5b      	ldrb	r3, [r3, #9]
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	4a17      	ldr	r2, [pc, #92]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	4413      	add	r3, r2
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80173e2:	4b15      	ldr	r3, [pc, #84]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173e4:	7a5b      	ldrb	r3, [r3, #9]
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	461a      	mov	r2, r3
 80173ea:	4b13      	ldr	r3, [pc, #76]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173ec:	4413      	add	r3, r2
 80173ee:	79fa      	ldrb	r2, [r7, #7]
 80173f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80173f2:	4b11      	ldr	r3, [pc, #68]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173f4:	7a5b      	ldrb	r3, [r3, #9]
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	1c5a      	adds	r2, r3, #1
 80173fa:	b2d1      	uxtb	r1, r2
 80173fc:	4a0e      	ldr	r2, [pc, #56]	; (8017438 <FATFS_LinkDriverEx+0x94>)
 80173fe:	7251      	strb	r1, [r2, #9]
 8017400:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017402:	7dbb      	ldrb	r3, [r7, #22]
 8017404:	3330      	adds	r3, #48	; 0x30
 8017406:	b2da      	uxtb	r2, r3
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	3301      	adds	r3, #1
 8017410:	223a      	movs	r2, #58	; 0x3a
 8017412:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	3302      	adds	r3, #2
 8017418:	222f      	movs	r2, #47	; 0x2f
 801741a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	3303      	adds	r3, #3
 8017420:	2200      	movs	r2, #0
 8017422:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017424:	2300      	movs	r3, #0
 8017426:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017428:	7dfb      	ldrb	r3, [r7, #23]
}
 801742a:	4618      	mov	r0, r3
 801742c:	371c      	adds	r7, #28
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	20002134 	.word	0x20002134

0801743c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017446:	2200      	movs	r2, #0
 8017448:	6839      	ldr	r1, [r7, #0]
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f7ff ffaa 	bl	80173a4 <FATFS_LinkDriverEx>
 8017450:	4603      	mov	r3, r0
}
 8017452:	4618      	mov	r0, r3
 8017454:	3708      	adds	r7, #8
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}
	...

0801745c <malloc>:
 801745c:	4b02      	ldr	r3, [pc, #8]	; (8017468 <malloc+0xc>)
 801745e:	4601      	mov	r1, r0
 8017460:	6818      	ldr	r0, [r3, #0]
 8017462:	f000 b82b 	b.w	80174bc <_malloc_r>
 8017466:	bf00      	nop
 8017468:	20000098 	.word	0x20000098

0801746c <free>:
 801746c:	4b02      	ldr	r3, [pc, #8]	; (8017478 <free+0xc>)
 801746e:	4601      	mov	r1, r0
 8017470:	6818      	ldr	r0, [r3, #0]
 8017472:	f000 b8f3 	b.w	801765c <_free_r>
 8017476:	bf00      	nop
 8017478:	20000098 	.word	0x20000098

0801747c <sbrk_aligned>:
 801747c:	b570      	push	{r4, r5, r6, lr}
 801747e:	4e0e      	ldr	r6, [pc, #56]	; (80174b8 <sbrk_aligned+0x3c>)
 8017480:	460c      	mov	r4, r1
 8017482:	6831      	ldr	r1, [r6, #0]
 8017484:	4605      	mov	r5, r0
 8017486:	b911      	cbnz	r1, 801748e <sbrk_aligned+0x12>
 8017488:	f000 f8ac 	bl	80175e4 <_sbrk_r>
 801748c:	6030      	str	r0, [r6, #0]
 801748e:	4621      	mov	r1, r4
 8017490:	4628      	mov	r0, r5
 8017492:	f000 f8a7 	bl	80175e4 <_sbrk_r>
 8017496:	1c43      	adds	r3, r0, #1
 8017498:	d00a      	beq.n	80174b0 <sbrk_aligned+0x34>
 801749a:	1cc4      	adds	r4, r0, #3
 801749c:	f024 0403 	bic.w	r4, r4, #3
 80174a0:	42a0      	cmp	r0, r4
 80174a2:	d007      	beq.n	80174b4 <sbrk_aligned+0x38>
 80174a4:	1a21      	subs	r1, r4, r0
 80174a6:	4628      	mov	r0, r5
 80174a8:	f000 f89c 	bl	80175e4 <_sbrk_r>
 80174ac:	3001      	adds	r0, #1
 80174ae:	d101      	bne.n	80174b4 <sbrk_aligned+0x38>
 80174b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80174b4:	4620      	mov	r0, r4
 80174b6:	bd70      	pop	{r4, r5, r6, pc}
 80174b8:	20002144 	.word	0x20002144

080174bc <_malloc_r>:
 80174bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174c0:	1ccd      	adds	r5, r1, #3
 80174c2:	f025 0503 	bic.w	r5, r5, #3
 80174c6:	3508      	adds	r5, #8
 80174c8:	2d0c      	cmp	r5, #12
 80174ca:	bf38      	it	cc
 80174cc:	250c      	movcc	r5, #12
 80174ce:	2d00      	cmp	r5, #0
 80174d0:	4607      	mov	r7, r0
 80174d2:	db01      	blt.n	80174d8 <_malloc_r+0x1c>
 80174d4:	42a9      	cmp	r1, r5
 80174d6:	d905      	bls.n	80174e4 <_malloc_r+0x28>
 80174d8:	230c      	movs	r3, #12
 80174da:	603b      	str	r3, [r7, #0]
 80174dc:	2600      	movs	r6, #0
 80174de:	4630      	mov	r0, r6
 80174e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80175b8 <_malloc_r+0xfc>
 80174e8:	f000 f868 	bl	80175bc <__malloc_lock>
 80174ec:	f8d8 3000 	ldr.w	r3, [r8]
 80174f0:	461c      	mov	r4, r3
 80174f2:	bb5c      	cbnz	r4, 801754c <_malloc_r+0x90>
 80174f4:	4629      	mov	r1, r5
 80174f6:	4638      	mov	r0, r7
 80174f8:	f7ff ffc0 	bl	801747c <sbrk_aligned>
 80174fc:	1c43      	adds	r3, r0, #1
 80174fe:	4604      	mov	r4, r0
 8017500:	d155      	bne.n	80175ae <_malloc_r+0xf2>
 8017502:	f8d8 4000 	ldr.w	r4, [r8]
 8017506:	4626      	mov	r6, r4
 8017508:	2e00      	cmp	r6, #0
 801750a:	d145      	bne.n	8017598 <_malloc_r+0xdc>
 801750c:	2c00      	cmp	r4, #0
 801750e:	d048      	beq.n	80175a2 <_malloc_r+0xe6>
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	4631      	mov	r1, r6
 8017514:	4638      	mov	r0, r7
 8017516:	eb04 0903 	add.w	r9, r4, r3
 801751a:	f000 f863 	bl	80175e4 <_sbrk_r>
 801751e:	4581      	cmp	r9, r0
 8017520:	d13f      	bne.n	80175a2 <_malloc_r+0xe6>
 8017522:	6821      	ldr	r1, [r4, #0]
 8017524:	1a6d      	subs	r5, r5, r1
 8017526:	4629      	mov	r1, r5
 8017528:	4638      	mov	r0, r7
 801752a:	f7ff ffa7 	bl	801747c <sbrk_aligned>
 801752e:	3001      	adds	r0, #1
 8017530:	d037      	beq.n	80175a2 <_malloc_r+0xe6>
 8017532:	6823      	ldr	r3, [r4, #0]
 8017534:	442b      	add	r3, r5
 8017536:	6023      	str	r3, [r4, #0]
 8017538:	f8d8 3000 	ldr.w	r3, [r8]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d038      	beq.n	80175b2 <_malloc_r+0xf6>
 8017540:	685a      	ldr	r2, [r3, #4]
 8017542:	42a2      	cmp	r2, r4
 8017544:	d12b      	bne.n	801759e <_malloc_r+0xe2>
 8017546:	2200      	movs	r2, #0
 8017548:	605a      	str	r2, [r3, #4]
 801754a:	e00f      	b.n	801756c <_malloc_r+0xb0>
 801754c:	6822      	ldr	r2, [r4, #0]
 801754e:	1b52      	subs	r2, r2, r5
 8017550:	d41f      	bmi.n	8017592 <_malloc_r+0xd6>
 8017552:	2a0b      	cmp	r2, #11
 8017554:	d917      	bls.n	8017586 <_malloc_r+0xca>
 8017556:	1961      	adds	r1, r4, r5
 8017558:	42a3      	cmp	r3, r4
 801755a:	6025      	str	r5, [r4, #0]
 801755c:	bf18      	it	ne
 801755e:	6059      	strne	r1, [r3, #4]
 8017560:	6863      	ldr	r3, [r4, #4]
 8017562:	bf08      	it	eq
 8017564:	f8c8 1000 	streq.w	r1, [r8]
 8017568:	5162      	str	r2, [r4, r5]
 801756a:	604b      	str	r3, [r1, #4]
 801756c:	4638      	mov	r0, r7
 801756e:	f104 060b 	add.w	r6, r4, #11
 8017572:	f000 f829 	bl	80175c8 <__malloc_unlock>
 8017576:	f026 0607 	bic.w	r6, r6, #7
 801757a:	1d23      	adds	r3, r4, #4
 801757c:	1af2      	subs	r2, r6, r3
 801757e:	d0ae      	beq.n	80174de <_malloc_r+0x22>
 8017580:	1b9b      	subs	r3, r3, r6
 8017582:	50a3      	str	r3, [r4, r2]
 8017584:	e7ab      	b.n	80174de <_malloc_r+0x22>
 8017586:	42a3      	cmp	r3, r4
 8017588:	6862      	ldr	r2, [r4, #4]
 801758a:	d1dd      	bne.n	8017548 <_malloc_r+0x8c>
 801758c:	f8c8 2000 	str.w	r2, [r8]
 8017590:	e7ec      	b.n	801756c <_malloc_r+0xb0>
 8017592:	4623      	mov	r3, r4
 8017594:	6864      	ldr	r4, [r4, #4]
 8017596:	e7ac      	b.n	80174f2 <_malloc_r+0x36>
 8017598:	4634      	mov	r4, r6
 801759a:	6876      	ldr	r6, [r6, #4]
 801759c:	e7b4      	b.n	8017508 <_malloc_r+0x4c>
 801759e:	4613      	mov	r3, r2
 80175a0:	e7cc      	b.n	801753c <_malloc_r+0x80>
 80175a2:	230c      	movs	r3, #12
 80175a4:	603b      	str	r3, [r7, #0]
 80175a6:	4638      	mov	r0, r7
 80175a8:	f000 f80e 	bl	80175c8 <__malloc_unlock>
 80175ac:	e797      	b.n	80174de <_malloc_r+0x22>
 80175ae:	6025      	str	r5, [r4, #0]
 80175b0:	e7dc      	b.n	801756c <_malloc_r+0xb0>
 80175b2:	605b      	str	r3, [r3, #4]
 80175b4:	deff      	udf	#255	; 0xff
 80175b6:	bf00      	nop
 80175b8:	20002140 	.word	0x20002140

080175bc <__malloc_lock>:
 80175bc:	4801      	ldr	r0, [pc, #4]	; (80175c4 <__malloc_lock+0x8>)
 80175be:	f000 b84b 	b.w	8017658 <__retarget_lock_acquire_recursive>
 80175c2:	bf00      	nop
 80175c4:	20002280 	.word	0x20002280

080175c8 <__malloc_unlock>:
 80175c8:	4801      	ldr	r0, [pc, #4]	; (80175d0 <__malloc_unlock+0x8>)
 80175ca:	f000 b846 	b.w	801765a <__retarget_lock_release_recursive>
 80175ce:	bf00      	nop
 80175d0:	20002280 	.word	0x20002280

080175d4 <memset>:
 80175d4:	4402      	add	r2, r0
 80175d6:	4603      	mov	r3, r0
 80175d8:	4293      	cmp	r3, r2
 80175da:	d100      	bne.n	80175de <memset+0xa>
 80175dc:	4770      	bx	lr
 80175de:	f803 1b01 	strb.w	r1, [r3], #1
 80175e2:	e7f9      	b.n	80175d8 <memset+0x4>

080175e4 <_sbrk_r>:
 80175e4:	b538      	push	{r3, r4, r5, lr}
 80175e6:	4d06      	ldr	r5, [pc, #24]	; (8017600 <_sbrk_r+0x1c>)
 80175e8:	2300      	movs	r3, #0
 80175ea:	4604      	mov	r4, r0
 80175ec:	4608      	mov	r0, r1
 80175ee:	602b      	str	r3, [r5, #0]
 80175f0:	f7ec f99a 	bl	8003928 <_sbrk>
 80175f4:	1c43      	adds	r3, r0, #1
 80175f6:	d102      	bne.n	80175fe <_sbrk_r+0x1a>
 80175f8:	682b      	ldr	r3, [r5, #0]
 80175fa:	b103      	cbz	r3, 80175fe <_sbrk_r+0x1a>
 80175fc:	6023      	str	r3, [r4, #0]
 80175fe:	bd38      	pop	{r3, r4, r5, pc}
 8017600:	20002284 	.word	0x20002284

08017604 <__errno>:
 8017604:	4b01      	ldr	r3, [pc, #4]	; (801760c <__errno+0x8>)
 8017606:	6818      	ldr	r0, [r3, #0]
 8017608:	4770      	bx	lr
 801760a:	bf00      	nop
 801760c:	20000098 	.word	0x20000098

08017610 <__libc_init_array>:
 8017610:	b570      	push	{r4, r5, r6, lr}
 8017612:	4d0d      	ldr	r5, [pc, #52]	; (8017648 <__libc_init_array+0x38>)
 8017614:	4c0d      	ldr	r4, [pc, #52]	; (801764c <__libc_init_array+0x3c>)
 8017616:	1b64      	subs	r4, r4, r5
 8017618:	10a4      	asrs	r4, r4, #2
 801761a:	2600      	movs	r6, #0
 801761c:	42a6      	cmp	r6, r4
 801761e:	d109      	bne.n	8017634 <__libc_init_array+0x24>
 8017620:	4d0b      	ldr	r5, [pc, #44]	; (8017650 <__libc_init_array+0x40>)
 8017622:	4c0c      	ldr	r4, [pc, #48]	; (8017654 <__libc_init_array+0x44>)
 8017624:	f001 f988 	bl	8018938 <_init>
 8017628:	1b64      	subs	r4, r4, r5
 801762a:	10a4      	asrs	r4, r4, #2
 801762c:	2600      	movs	r6, #0
 801762e:	42a6      	cmp	r6, r4
 8017630:	d105      	bne.n	801763e <__libc_init_array+0x2e>
 8017632:	bd70      	pop	{r4, r5, r6, pc}
 8017634:	f855 3b04 	ldr.w	r3, [r5], #4
 8017638:	4798      	blx	r3
 801763a:	3601      	adds	r6, #1
 801763c:	e7ee      	b.n	801761c <__libc_init_array+0xc>
 801763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017642:	4798      	blx	r3
 8017644:	3601      	adds	r6, #1
 8017646:	e7f2      	b.n	801762e <__libc_init_array+0x1e>
 8017648:	0801a450 	.word	0x0801a450
 801764c:	0801a450 	.word	0x0801a450
 8017650:	0801a450 	.word	0x0801a450
 8017654:	0801a454 	.word	0x0801a454

08017658 <__retarget_lock_acquire_recursive>:
 8017658:	4770      	bx	lr

0801765a <__retarget_lock_release_recursive>:
 801765a:	4770      	bx	lr

0801765c <_free_r>:
 801765c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801765e:	2900      	cmp	r1, #0
 8017660:	d044      	beq.n	80176ec <_free_r+0x90>
 8017662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017666:	9001      	str	r0, [sp, #4]
 8017668:	2b00      	cmp	r3, #0
 801766a:	f1a1 0404 	sub.w	r4, r1, #4
 801766e:	bfb8      	it	lt
 8017670:	18e4      	addlt	r4, r4, r3
 8017672:	f7ff ffa3 	bl	80175bc <__malloc_lock>
 8017676:	4a1e      	ldr	r2, [pc, #120]	; (80176f0 <_free_r+0x94>)
 8017678:	9801      	ldr	r0, [sp, #4]
 801767a:	6813      	ldr	r3, [r2, #0]
 801767c:	b933      	cbnz	r3, 801768c <_free_r+0x30>
 801767e:	6063      	str	r3, [r4, #4]
 8017680:	6014      	str	r4, [r2, #0]
 8017682:	b003      	add	sp, #12
 8017684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017688:	f7ff bf9e 	b.w	80175c8 <__malloc_unlock>
 801768c:	42a3      	cmp	r3, r4
 801768e:	d908      	bls.n	80176a2 <_free_r+0x46>
 8017690:	6825      	ldr	r5, [r4, #0]
 8017692:	1961      	adds	r1, r4, r5
 8017694:	428b      	cmp	r3, r1
 8017696:	bf01      	itttt	eq
 8017698:	6819      	ldreq	r1, [r3, #0]
 801769a:	685b      	ldreq	r3, [r3, #4]
 801769c:	1949      	addeq	r1, r1, r5
 801769e:	6021      	streq	r1, [r4, #0]
 80176a0:	e7ed      	b.n	801767e <_free_r+0x22>
 80176a2:	461a      	mov	r2, r3
 80176a4:	685b      	ldr	r3, [r3, #4]
 80176a6:	b10b      	cbz	r3, 80176ac <_free_r+0x50>
 80176a8:	42a3      	cmp	r3, r4
 80176aa:	d9fa      	bls.n	80176a2 <_free_r+0x46>
 80176ac:	6811      	ldr	r1, [r2, #0]
 80176ae:	1855      	adds	r5, r2, r1
 80176b0:	42a5      	cmp	r5, r4
 80176b2:	d10b      	bne.n	80176cc <_free_r+0x70>
 80176b4:	6824      	ldr	r4, [r4, #0]
 80176b6:	4421      	add	r1, r4
 80176b8:	1854      	adds	r4, r2, r1
 80176ba:	42a3      	cmp	r3, r4
 80176bc:	6011      	str	r1, [r2, #0]
 80176be:	d1e0      	bne.n	8017682 <_free_r+0x26>
 80176c0:	681c      	ldr	r4, [r3, #0]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	6053      	str	r3, [r2, #4]
 80176c6:	440c      	add	r4, r1
 80176c8:	6014      	str	r4, [r2, #0]
 80176ca:	e7da      	b.n	8017682 <_free_r+0x26>
 80176cc:	d902      	bls.n	80176d4 <_free_r+0x78>
 80176ce:	230c      	movs	r3, #12
 80176d0:	6003      	str	r3, [r0, #0]
 80176d2:	e7d6      	b.n	8017682 <_free_r+0x26>
 80176d4:	6825      	ldr	r5, [r4, #0]
 80176d6:	1961      	adds	r1, r4, r5
 80176d8:	428b      	cmp	r3, r1
 80176da:	bf04      	itt	eq
 80176dc:	6819      	ldreq	r1, [r3, #0]
 80176de:	685b      	ldreq	r3, [r3, #4]
 80176e0:	6063      	str	r3, [r4, #4]
 80176e2:	bf04      	itt	eq
 80176e4:	1949      	addeq	r1, r1, r5
 80176e6:	6021      	streq	r1, [r4, #0]
 80176e8:	6054      	str	r4, [r2, #4]
 80176ea:	e7ca      	b.n	8017682 <_free_r+0x26>
 80176ec:	b003      	add	sp, #12
 80176ee:	bd30      	pop	{r4, r5, pc}
 80176f0:	20002140 	.word	0x20002140

080176f4 <with_errno>:
 80176f4:	b513      	push	{r0, r1, r4, lr}
 80176f6:	4604      	mov	r4, r0
 80176f8:	ed8d 0b00 	vstr	d0, [sp]
 80176fc:	f7ff ff82 	bl	8017604 <__errno>
 8017700:	ed9d 0b00 	vldr	d0, [sp]
 8017704:	6004      	str	r4, [r0, #0]
 8017706:	b002      	add	sp, #8
 8017708:	bd10      	pop	{r4, pc}

0801770a <xflow>:
 801770a:	b082      	sub	sp, #8
 801770c:	b158      	cbz	r0, 8017726 <xflow+0x1c>
 801770e:	eeb1 7b40 	vneg.f64	d7, d0
 8017712:	ed8d 7b00 	vstr	d7, [sp]
 8017716:	ed9d 7b00 	vldr	d7, [sp]
 801771a:	2022      	movs	r0, #34	; 0x22
 801771c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017720:	b002      	add	sp, #8
 8017722:	f7ff bfe7 	b.w	80176f4 <with_errno>
 8017726:	eeb0 7b40 	vmov.f64	d7, d0
 801772a:	e7f2      	b.n	8017712 <xflow+0x8>
 801772c:	0000      	movs	r0, r0
	...

08017730 <__math_uflow>:
 8017730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017738 <__math_uflow+0x8>
 8017734:	f7ff bfe9 	b.w	801770a <xflow>
 8017738:	00000000 	.word	0x00000000
 801773c:	10000000 	.word	0x10000000

08017740 <__math_oflow>:
 8017740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017748 <__math_oflow+0x8>
 8017744:	f7ff bfe1 	b.w	801770a <xflow>
 8017748:	00000000 	.word	0x00000000
 801774c:	70000000 	.word	0x70000000

08017750 <__math_divzero>:
 8017750:	b082      	sub	sp, #8
 8017752:	2800      	cmp	r0, #0
 8017754:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017758:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801775c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017760:	ed8d 7b00 	vstr	d7, [sp]
 8017764:	ed9d 0b00 	vldr	d0, [sp]
 8017768:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8017778 <__math_divzero+0x28>
 801776c:	2022      	movs	r0, #34	; 0x22
 801776e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017772:	b002      	add	sp, #8
 8017774:	f7ff bfbe 	b.w	80176f4 <with_errno>
	...

08017780 <__math_invalid>:
 8017780:	eeb0 7b40 	vmov.f64	d7, d0
 8017784:	eeb4 7b47 	vcmp.f64	d7, d7
 8017788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801778c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017790:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017794:	d602      	bvs.n	801779c <__math_invalid+0x1c>
 8017796:	2021      	movs	r0, #33	; 0x21
 8017798:	f7ff bfac 	b.w	80176f4 <with_errno>
 801779c:	4770      	bx	lr

0801779e <__math_check_uflow>:
 801779e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80177a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a6:	d102      	bne.n	80177ae <__math_check_uflow+0x10>
 80177a8:	2022      	movs	r0, #34	; 0x22
 80177aa:	f7ff bfa3 	b.w	80176f4 <with_errno>
 80177ae:	4770      	bx	lr

080177b0 <__math_check_oflow>:
 80177b0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80177d0 <__math_check_oflow+0x20>
 80177b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80177b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80177bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c0:	dd02      	ble.n	80177c8 <__math_check_oflow+0x18>
 80177c2:	2022      	movs	r0, #34	; 0x22
 80177c4:	f7ff bf96 	b.w	80176f4 <with_errno>
 80177c8:	4770      	bx	lr
 80177ca:	bf00      	nop
 80177cc:	f3af 8000 	nop.w
 80177d0:	ffffffff 	.word	0xffffffff
 80177d4:	7fefffff 	.word	0x7fefffff

080177d8 <checkint>:
 80177d8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80177dc:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80177e0:	429a      	cmp	r2, r3
 80177e2:	b570      	push	{r4, r5, r6, lr}
 80177e4:	dd2a      	ble.n	801783c <checkint+0x64>
 80177e6:	f240 4333 	movw	r3, #1075	; 0x433
 80177ea:	429a      	cmp	r2, r3
 80177ec:	dc24      	bgt.n	8017838 <checkint+0x60>
 80177ee:	1a9b      	subs	r3, r3, r2
 80177f0:	f1a3 0620 	sub.w	r6, r3, #32
 80177f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177f8:	fa02 f403 	lsl.w	r4, r2, r3
 80177fc:	fa02 f606 	lsl.w	r6, r2, r6
 8017800:	f1c3 0520 	rsb	r5, r3, #32
 8017804:	fa22 f505 	lsr.w	r5, r2, r5
 8017808:	4334      	orrs	r4, r6
 801780a:	432c      	orrs	r4, r5
 801780c:	409a      	lsls	r2, r3
 801780e:	ea20 0202 	bic.w	r2, r0, r2
 8017812:	ea21 0404 	bic.w	r4, r1, r4
 8017816:	4322      	orrs	r2, r4
 8017818:	f1a3 0420 	sub.w	r4, r3, #32
 801781c:	f1c3 0220 	rsb	r2, r3, #32
 8017820:	d10c      	bne.n	801783c <checkint+0x64>
 8017822:	40d8      	lsrs	r0, r3
 8017824:	fa01 f302 	lsl.w	r3, r1, r2
 8017828:	4318      	orrs	r0, r3
 801782a:	40e1      	lsrs	r1, r4
 801782c:	4308      	orrs	r0, r1
 801782e:	f000 0001 	and.w	r0, r0, #1
 8017832:	f1d0 0002 	rsbs	r0, r0, #2
 8017836:	bd70      	pop	{r4, r5, r6, pc}
 8017838:	2002      	movs	r0, #2
 801783a:	e7fc      	b.n	8017836 <checkint+0x5e>
 801783c:	2000      	movs	r0, #0
 801783e:	e7fa      	b.n	8017836 <checkint+0x5e>

08017840 <pow>:
 8017840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017844:	ee10 4a90 	vmov	r4, s1
 8017848:	ed2d 8b0a 	vpush	{d8-d12}
 801784c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8017850:	ee11 aa90 	vmov	sl, s3
 8017854:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8017858:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801785c:	429a      	cmp	r2, r3
 801785e:	ee10 5a10 	vmov	r5, s0
 8017862:	ee11 0a10 	vmov	r0, s2
 8017866:	b087      	sub	sp, #28
 8017868:	46c4      	mov	ip, r8
 801786a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801786e:	d806      	bhi.n	801787e <pow+0x3e>
 8017870:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8017874:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8017878:	2b7f      	cmp	r3, #127	; 0x7f
 801787a:	f240 8156 	bls.w	8017b2a <pow+0x2ea>
 801787e:	1802      	adds	r2, r0, r0
 8017880:	eb4a 010a 	adc.w	r1, sl, sl
 8017884:	f06f 0b01 	mvn.w	fp, #1
 8017888:	1e57      	subs	r7, r2, #1
 801788a:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 801788e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8017892:	45bb      	cmp	fp, r7
 8017894:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017898:	d242      	bcs.n	8017920 <pow+0xe0>
 801789a:	ea52 0301 	orrs.w	r3, r2, r1
 801789e:	f04f 0300 	mov.w	r3, #0
 80178a2:	d10c      	bne.n	80178be <pow+0x7e>
 80178a4:	196d      	adds	r5, r5, r5
 80178a6:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80178aa:	4164      	adcs	r4, r4
 80178ac:	42ab      	cmp	r3, r5
 80178ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80178b2:	41a3      	sbcs	r3, r4
 80178b4:	f0c0 808f 	bcc.w	80179d6 <pow+0x196>
 80178b8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80178bc:	e02b      	b.n	8017916 <pow+0xd6>
 80178be:	4ed4      	ldr	r6, [pc, #848]	; (8017c10 <pow+0x3d0>)
 80178c0:	42b4      	cmp	r4, r6
 80178c2:	bf08      	it	eq
 80178c4:	429d      	cmpeq	r5, r3
 80178c6:	d109      	bne.n	80178dc <pow+0x9c>
 80178c8:	1800      	adds	r0, r0, r0
 80178ca:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80178ce:	eb4a 0a0a 	adc.w	sl, sl, sl
 80178d2:	4283      	cmp	r3, r0
 80178d4:	4bcf      	ldr	r3, [pc, #828]	; (8017c14 <pow+0x3d4>)
 80178d6:	eb73 030a 	sbcs.w	r3, r3, sl
 80178da:	e7eb      	b.n	80178b4 <pow+0x74>
 80178dc:	196d      	adds	r5, r5, r5
 80178de:	48ce      	ldr	r0, [pc, #824]	; (8017c18 <pow+0x3d8>)
 80178e0:	4164      	adcs	r4, r4
 80178e2:	42ab      	cmp	r3, r5
 80178e4:	eb70 0604 	sbcs.w	r6, r0, r4
 80178e8:	d375      	bcc.n	80179d6 <pow+0x196>
 80178ea:	4281      	cmp	r1, r0
 80178ec:	bf08      	it	eq
 80178ee:	429a      	cmpeq	r2, r3
 80178f0:	d171      	bne.n	80179d6 <pow+0x196>
 80178f2:	4aca      	ldr	r2, [pc, #808]	; (8017c1c <pow+0x3dc>)
 80178f4:	4294      	cmp	r4, r2
 80178f6:	bf08      	it	eq
 80178f8:	429d      	cmpeq	r5, r3
 80178fa:	d0dd      	beq.n	80178b8 <pow+0x78>
 80178fc:	4294      	cmp	r4, r2
 80178fe:	ea6f 0a0a 	mvn.w	sl, sl
 8017902:	bf34      	ite	cc
 8017904:	2400      	movcc	r4, #0
 8017906:	2401      	movcs	r4, #1
 8017908:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801790c:	4554      	cmp	r4, sl
 801790e:	f040 81dc 	bne.w	8017cca <pow+0x48a>
 8017912:	ee21 0b01 	vmul.f64	d0, d1, d1
 8017916:	b007      	add	sp, #28
 8017918:	ecbd 8b0a 	vpop	{d8-d12}
 801791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017920:	196f      	adds	r7, r5, r5
 8017922:	eb44 0904 	adc.w	r9, r4, r4
 8017926:	1e7a      	subs	r2, r7, #1
 8017928:	f169 0300 	sbc.w	r3, r9, #0
 801792c:	4593      	cmp	fp, r2
 801792e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8017932:	d225      	bcs.n	8017980 <pow+0x140>
 8017934:	ee20 0b00 	vmul.f64	d0, d0, d0
 8017938:	2c00      	cmp	r4, #0
 801793a:	da13      	bge.n	8017964 <pow+0x124>
 801793c:	4651      	mov	r1, sl
 801793e:	f7ff ff4b 	bl	80177d8 <checkint>
 8017942:	2801      	cmp	r0, #1
 8017944:	d10e      	bne.n	8017964 <pow+0x124>
 8017946:	eeb1 0b40 	vneg.f64	d0, d0
 801794a:	ea57 0909 	orrs.w	r9, r7, r9
 801794e:	d10b      	bne.n	8017968 <pow+0x128>
 8017950:	f1ba 0f00 	cmp.w	sl, #0
 8017954:	dadf      	bge.n	8017916 <pow+0xd6>
 8017956:	b007      	add	sp, #28
 8017958:	ecbd 8b0a 	vpop	{d8-d12}
 801795c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017960:	f7ff bef6 	b.w	8017750 <__math_divzero>
 8017964:	2000      	movs	r0, #0
 8017966:	e7f0      	b.n	801794a <pow+0x10a>
 8017968:	f1ba 0f00 	cmp.w	sl, #0
 801796c:	dad3      	bge.n	8017916 <pow+0xd6>
 801796e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017972:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017976:	ed8d 7b00 	vstr	d7, [sp]
 801797a:	ed9d 0b00 	vldr	d0, [sp]
 801797e:	e7ca      	b.n	8017916 <pow+0xd6>
 8017980:	2c00      	cmp	r4, #0
 8017982:	da2b      	bge.n	80179dc <pow+0x19c>
 8017984:	4651      	mov	r1, sl
 8017986:	f7ff ff27 	bl	80177d8 <checkint>
 801798a:	b930      	cbnz	r0, 801799a <pow+0x15a>
 801798c:	b007      	add	sp, #28
 801798e:	ecbd 8b0a 	vpop	{d8-d12}
 8017992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017996:	f7ff bef3 	b.w	8017780 <__math_invalid>
 801799a:	1e41      	subs	r1, r0, #1
 801799c:	4248      	negs	r0, r1
 801799e:	4148      	adcs	r0, r1
 80179a0:	0480      	lsls	r0, r0, #18
 80179a2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80179a6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80179aa:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80179ae:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80179b2:	2b7f      	cmp	r3, #127	; 0x7f
 80179b4:	d92d      	bls.n	8017a12 <pow+0x1d2>
 80179b6:	4b96      	ldr	r3, [pc, #600]	; (8017c10 <pow+0x3d0>)
 80179b8:	2000      	movs	r0, #0
 80179ba:	429c      	cmp	r4, r3
 80179bc:	bf08      	it	eq
 80179be:	4285      	cmpeq	r5, r0
 80179c0:	f43f af7a 	beq.w	80178b8 <pow+0x78>
 80179c4:	f240 31bd 	movw	r1, #957	; 0x3bd
 80179c8:	428a      	cmp	r2, r1
 80179ca:	d80c      	bhi.n	80179e6 <pow+0x1a6>
 80179cc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80179d0:	42a8      	cmp	r0, r5
 80179d2:	41a3      	sbcs	r3, r4
 80179d4:	d204      	bcs.n	80179e0 <pow+0x1a0>
 80179d6:	ee31 0b00 	vadd.f64	d0, d1, d0
 80179da:	e79c      	b.n	8017916 <pow+0xd6>
 80179dc:	2000      	movs	r0, #0
 80179de:	e7e4      	b.n	80179aa <pow+0x16a>
 80179e0:	ee30 0b41 	vsub.f64	d0, d0, d1
 80179e4:	e797      	b.n	8017916 <pow+0xd6>
 80179e6:	2d01      	cmp	r5, #1
 80179e8:	eb74 0303 	sbcs.w	r3, r4, r3
 80179ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80179f0:	bf34      	ite	cc
 80179f2:	2301      	movcc	r3, #1
 80179f4:	2300      	movcs	r3, #0
 80179f6:	4296      	cmp	r6, r2
 80179f8:	bf8c      	ite	hi
 80179fa:	2600      	movhi	r6, #0
 80179fc:	2601      	movls	r6, #1
 80179fe:	42b3      	cmp	r3, r6
 8017a00:	f000 809b 	beq.w	8017b3a <pow+0x2fa>
 8017a04:	b007      	add	sp, #28
 8017a06:	ecbd 8b0a 	vpop	{d8-d12}
 8017a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0e:	f7ff be97 	b.w	8017740 <__math_oflow>
 8017a12:	f1bc 0f00 	cmp.w	ip, #0
 8017a16:	d10b      	bne.n	8017a30 <pow+0x1f0>
 8017a18:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8017c00 <pow+0x3c0>
 8017a1c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017a20:	ec53 2b17 	vmov	r2, r3, d7
 8017a24:	ee17 5a10 	vmov	r5, s14
 8017a28:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8017a2c:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8017a30:	4b7b      	ldr	r3, [pc, #492]	; (8017c20 <pow+0x3e0>)
 8017a32:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017a36:	4423      	add	r3, r4
 8017a38:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017a3c:	1519      	asrs	r1, r3, #20
 8017a3e:	0d1b      	lsrs	r3, r3, #20
 8017a40:	051b      	lsls	r3, r3, #20
 8017a42:	1ae7      	subs	r7, r4, r3
 8017a44:	4b77      	ldr	r3, [pc, #476]	; (8017c24 <pow+0x3e4>)
 8017a46:	ee03 1a10 	vmov	s6, r1
 8017a4a:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8017a4e:	1e2e      	subs	r6, r5, #0
 8017a50:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8017a54:	ec47 6b15 	vmov	d5, r6, r7
 8017a58:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8017a5c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017a60:	ed93 7b00 	vldr	d7, [r3]
 8017a64:	ed93 5b02 	vldr	d5, [r3, #8]
 8017a68:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8017a6c:	eea3 2b07 	vfma.f64	d2, d3, d7
 8017a70:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8017a74:	ee36 4b02 	vadd.f64	d4, d6, d2
 8017a78:	ee32 2b44 	vsub.f64	d2, d2, d4
 8017a7c:	eea3 7b05 	vfma.f64	d7, d3, d5
 8017a80:	ed93 5b04 	vldr	d5, [r3, #16]
 8017a84:	ee32 2b06 	vadd.f64	d2, d2, d6
 8017a88:	ee37 7b02 	vadd.f64	d7, d7, d2
 8017a8c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8017a90:	ee26 0b05 	vmul.f64	d0, d6, d5
 8017a94:	ee34 8b00 	vadd.f64	d8, d4, d0
 8017a98:	eeb0 9b40 	vmov.f64	d9, d0
 8017a9c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8017aa0:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8017aa4:	ee34 ab00 	vadd.f64	d10, d4, d0
 8017aa8:	ed93 5b06 	vldr	d5, [r3, #24]
 8017aac:	ee26 bb00 	vmul.f64	d11, d6, d0
 8017ab0:	ee37 7b09 	vadd.f64	d7, d7, d9
 8017ab4:	ed93 4b08 	vldr	d4, [r3, #32]
 8017ab8:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8017abc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8017ac0:	eea6 5b04 	vfma.f64	d5, d6, d4
 8017ac4:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8017ac8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8017acc:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017ad0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8017ad4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8017ad8:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017adc:	eea0 5b04 	vfma.f64	d5, d0, d4
 8017ae0:	eeab 7b05 	vfma.f64	d7, d11, d5
 8017ae4:	ee38 4b07 	vadd.f64	d4, d8, d7
 8017ae8:	ee21 6b04 	vmul.f64	d6, d1, d4
 8017aec:	ee16 3a90 	vmov	r3, s13
 8017af0:	eeb0 5b46 	vmov.f64	d5, d6
 8017af4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8017af8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8017afc:	18b2      	adds	r2, r6, r2
 8017afe:	2a3e      	cmp	r2, #62	; 0x3e
 8017b00:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8017b04:	ee38 8b44 	vsub.f64	d8, d8, d4
 8017b08:	ee38 8b07 	vadd.f64	d8, d8, d7
 8017b0c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8017b10:	d91b      	bls.n	8017b4a <pow+0x30a>
 8017b12:	2a00      	cmp	r2, #0
 8017b14:	da0b      	bge.n	8017b2e <pow+0x2ee>
 8017b16:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b1a:	ee36 0b00 	vadd.f64	d0, d6, d0
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	f43f aef9 	beq.w	8017916 <pow+0xd6>
 8017b24:	eeb1 0b40 	vneg.f64	d0, d0
 8017b28:	e6f5      	b.n	8017916 <pow+0xd6>
 8017b2a:	2000      	movs	r0, #0
 8017b2c:	e780      	b.n	8017a30 <pow+0x1f0>
 8017b2e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8017b32:	d909      	bls.n	8017b48 <pow+0x308>
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	f6bf af65 	bge.w	8017a04 <pow+0x1c4>
 8017b3a:	b007      	add	sp, #28
 8017b3c:	ecbd 8b0a 	vpop	{d8-d12}
 8017b40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b44:	f7ff bdf4 	b.w	8017730 <__math_uflow>
 8017b48:	2600      	movs	r6, #0
 8017b4a:	4937      	ldr	r1, [pc, #220]	; (8017c28 <pow+0x3e8>)
 8017b4c:	ed91 4b02 	vldr	d4, [r1, #8]
 8017b50:	ed91 3b00 	vldr	d3, [r1]
 8017b54:	eeb0 7b44 	vmov.f64	d7, d4
 8017b58:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017b5c:	ee17 5a10 	vmov	r5, s14
 8017b60:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017b64:	ed91 4b04 	vldr	d4, [r1, #16]
 8017b68:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8017b6c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017b70:	ed91 4b06 	vldr	d4, [r1, #24]
 8017b74:	18dc      	adds	r4, r3, r3
 8017b76:	f104 030f 	add.w	r3, r4, #15
 8017b7a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8017b7e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017b82:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8017b86:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017b8a:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017b8e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8017b92:	ed91 4b08 	vldr	d4, [r1, #32]
 8017b96:	ee35 7b07 	vadd.f64	d7, d5, d7
 8017b9a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8017b9e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017ba2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8017ba6:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017baa:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017bae:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8017bb2:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8017bb6:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8017bba:	eea5 4b03 	vfma.f64	d4, d5, d3
 8017bbe:	1940      	adds	r0, r0, r5
 8017bc0:	2700      	movs	r7, #0
 8017bc2:	eb17 020c 	adds.w	r2, r7, ip
 8017bc6:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8017bca:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017bce:	2e00      	cmp	r6, #0
 8017bd0:	d176      	bne.n	8017cc0 <pow+0x480>
 8017bd2:	42bd      	cmp	r5, r7
 8017bd4:	db2a      	blt.n	8017c2c <pow+0x3ec>
 8017bd6:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8017bda:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8017bde:	4610      	mov	r0, r2
 8017be0:	ec41 0b10 	vmov	d0, r0, r1
 8017be4:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017be8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8017c08 <pow+0x3c8>
 8017bec:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017bf0:	b007      	add	sp, #28
 8017bf2:	ecbd 8b0a 	vpop	{d8-d12}
 8017bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfa:	f7ff bdd9 	b.w	80177b0 <__math_check_oflow>
 8017bfe:	bf00      	nop
 8017c00:	00000000 	.word	0x00000000
 8017c04:	43300000 	.word	0x43300000
 8017c08:	00000000 	.word	0x00000000
 8017c0c:	7f000000 	.word	0x7f000000
 8017c10:	3ff00000 	.word	0x3ff00000
 8017c14:	fff00000 	.word	0xfff00000
 8017c18:	ffe00000 	.word	0xffe00000
 8017c1c:	7fe00000 	.word	0x7fe00000
 8017c20:	c0196aab 	.word	0xc0196aab
 8017c24:	08019228 	.word	0x08019228
 8017c28:	080189b8 	.word	0x080189b8
 8017c2c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8017c30:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8017c34:	4610      	mov	r0, r2
 8017c36:	ec41 0b15 	vmov	d5, r0, r1
 8017c3a:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8017c3e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017c42:	ee35 7b06 	vadd.f64	d7, d5, d6
 8017c46:	eeb0 4bc7 	vabs.f64	d4, d7
 8017c4a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8017c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c52:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8017cd0 <pow+0x490>
 8017c56:	d52a      	bpl.n	8017cae <pow+0x46e>
 8017c58:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017c5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c64:	ee35 5b06 	vadd.f64	d5, d5, d6
 8017c68:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8017c6c:	bf58      	it	pl
 8017c6e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8017c72:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017c76:	ee34 6b43 	vsub.f64	d6, d4, d3
 8017c7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017c7e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8017c82:	ee36 6b03 	vadd.f64	d6, d6, d3
 8017c86:	ee36 7b44 	vsub.f64	d7, d6, d4
 8017c8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c92:	d104      	bne.n	8017c9e <pow+0x45e>
 8017c94:	4632      	mov	r2, r6
 8017c96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017c9a:	ec43 2b17 	vmov	d7, r2, r3
 8017c9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017ca2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017ca6:	ee26 6b00 	vmul.f64	d6, d6, d0
 8017caa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017cae:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017cb2:	b007      	add	sp, #28
 8017cb4:	ecbd 8b0a 	vpop	{d8-d12}
 8017cb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cbc:	f7ff bd6f 	b.w	801779e <__math_check_uflow>
 8017cc0:	ec43 2b10 	vmov	d0, r2, r3
 8017cc4:	eea7 0b00 	vfma.f64	d0, d7, d0
 8017cc8:	e625      	b.n	8017916 <pow+0xd6>
 8017cca:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8017cd8 <pow+0x498>
 8017cce:	e622      	b.n	8017916 <pow+0xd6>
 8017cd0:	00000000 	.word	0x00000000
 8017cd4:	00100000 	.word	0x00100000
	...

08017ce0 <tan>:
 8017ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ce2:	eeb0 7b40 	vmov.f64	d7, d0
 8017ce6:	ee17 3a90 	vmov	r3, s15
 8017cea:	4a15      	ldr	r2, [pc, #84]	; (8017d40 <tan+0x60>)
 8017cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	dc07      	bgt.n	8017d04 <tan+0x24>
 8017cf4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8017d38 <tan+0x58>
 8017cf8:	2001      	movs	r0, #1
 8017cfa:	b005      	add	sp, #20
 8017cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d00:	f000 bbfa 	b.w	80184f8 <__kernel_tan>
 8017d04:	4a0f      	ldr	r2, [pc, #60]	; (8017d44 <tan+0x64>)
 8017d06:	4293      	cmp	r3, r2
 8017d08:	dd04      	ble.n	8017d14 <tan+0x34>
 8017d0a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017d0e:	b005      	add	sp, #20
 8017d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d14:	4668      	mov	r0, sp
 8017d16:	f000 f817 	bl	8017d48 <__ieee754_rem_pio2>
 8017d1a:	0040      	lsls	r0, r0, #1
 8017d1c:	f000 0002 	and.w	r0, r0, #2
 8017d20:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017d24:	ed9d 0b00 	vldr	d0, [sp]
 8017d28:	f1c0 0001 	rsb	r0, r0, #1
 8017d2c:	f000 fbe4 	bl	80184f8 <__kernel_tan>
 8017d30:	e7ed      	b.n	8017d0e <tan+0x2e>
 8017d32:	bf00      	nop
 8017d34:	f3af 8000 	nop.w
	...
 8017d40:	3fe921fb 	.word	0x3fe921fb
 8017d44:	7fefffff 	.word	0x7fefffff

08017d48 <__ieee754_rem_pio2>:
 8017d48:	b570      	push	{r4, r5, r6, lr}
 8017d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8017d4e:	ee17 5a90 	vmov	r5, s15
 8017d52:	4b99      	ldr	r3, [pc, #612]	; (8017fb8 <__ieee754_rem_pio2+0x270>)
 8017d54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017d58:	429e      	cmp	r6, r3
 8017d5a:	b088      	sub	sp, #32
 8017d5c:	4604      	mov	r4, r0
 8017d5e:	dc07      	bgt.n	8017d70 <__ieee754_rem_pio2+0x28>
 8017d60:	2200      	movs	r2, #0
 8017d62:	2300      	movs	r3, #0
 8017d64:	ed84 0b00 	vstr	d0, [r4]
 8017d68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017d6c:	2000      	movs	r0, #0
 8017d6e:	e01b      	b.n	8017da8 <__ieee754_rem_pio2+0x60>
 8017d70:	4b92      	ldr	r3, [pc, #584]	; (8017fbc <__ieee754_rem_pio2+0x274>)
 8017d72:	429e      	cmp	r6, r3
 8017d74:	dc3b      	bgt.n	8017dee <__ieee754_rem_pio2+0xa6>
 8017d76:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8017d7a:	2d00      	cmp	r5, #0
 8017d7c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017f78 <__ieee754_rem_pio2+0x230>
 8017d80:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8017d84:	dd19      	ble.n	8017dba <__ieee754_rem_pio2+0x72>
 8017d86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017d8a:	429e      	cmp	r6, r3
 8017d8c:	d00e      	beq.n	8017dac <__ieee754_rem_pio2+0x64>
 8017d8e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017f80 <__ieee754_rem_pio2+0x238>
 8017d92:	ee37 5b46 	vsub.f64	d5, d7, d6
 8017d96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017d9a:	ed84 5b00 	vstr	d5, [r4]
 8017d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017da2:	ed84 7b02 	vstr	d7, [r4, #8]
 8017da6:	2001      	movs	r0, #1
 8017da8:	b008      	add	sp, #32
 8017daa:	bd70      	pop	{r4, r5, r6, pc}
 8017dac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017f88 <__ieee754_rem_pio2+0x240>
 8017db0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017db4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017f90 <__ieee754_rem_pio2+0x248>
 8017db8:	e7eb      	b.n	8017d92 <__ieee754_rem_pio2+0x4a>
 8017dba:	429e      	cmp	r6, r3
 8017dbc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017dc0:	d00e      	beq.n	8017de0 <__ieee754_rem_pio2+0x98>
 8017dc2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017f80 <__ieee754_rem_pio2+0x238>
 8017dc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8017dca:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017dce:	ed84 5b00 	vstr	d5, [r4]
 8017dd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017dda:	ed84 7b02 	vstr	d7, [r4, #8]
 8017dde:	e7e3      	b.n	8017da8 <__ieee754_rem_pio2+0x60>
 8017de0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017f88 <__ieee754_rem_pio2+0x240>
 8017de4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017de8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017f90 <__ieee754_rem_pio2+0x248>
 8017dec:	e7eb      	b.n	8017dc6 <__ieee754_rem_pio2+0x7e>
 8017dee:	4b74      	ldr	r3, [pc, #464]	; (8017fc0 <__ieee754_rem_pio2+0x278>)
 8017df0:	429e      	cmp	r6, r3
 8017df2:	dc70      	bgt.n	8017ed6 <__ieee754_rem_pio2+0x18e>
 8017df4:	f000 fc9c 	bl	8018730 <fabs>
 8017df8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017dfc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017f98 <__ieee754_rem_pio2+0x250>
 8017e00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8017e04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017e08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017e0c:	ee17 0a90 	vmov	r0, s15
 8017e10:	eeb1 4b45 	vneg.f64	d4, d5
 8017e14:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017f78 <__ieee754_rem_pio2+0x230>
 8017e18:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017e1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017f80 <__ieee754_rem_pio2+0x238>
 8017e20:	281f      	cmp	r0, #31
 8017e22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8017e26:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017e2a:	dc08      	bgt.n	8017e3e <__ieee754_rem_pio2+0xf6>
 8017e2c:	4b65      	ldr	r3, [pc, #404]	; (8017fc4 <__ieee754_rem_pio2+0x27c>)
 8017e2e:	1e42      	subs	r2, r0, #1
 8017e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e34:	42b3      	cmp	r3, r6
 8017e36:	d002      	beq.n	8017e3e <__ieee754_rem_pio2+0xf6>
 8017e38:	ed84 6b00 	vstr	d6, [r4]
 8017e3c:	e024      	b.n	8017e88 <__ieee754_rem_pio2+0x140>
 8017e3e:	ee16 3a90 	vmov	r3, s13
 8017e42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017e46:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017e4a:	2b10      	cmp	r3, #16
 8017e4c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017e50:	ddf2      	ble.n	8017e38 <__ieee754_rem_pio2+0xf0>
 8017e52:	eeb0 6b40 	vmov.f64	d6, d0
 8017e56:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8017f88 <__ieee754_rem_pio2+0x240>
 8017e5a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8017e5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017e62:	eea4 7b03 	vfma.f64	d7, d4, d3
 8017e66:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8017f90 <__ieee754_rem_pio2+0x248>
 8017e6a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017e6e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8017e72:	ee13 3a90 	vmov	r3, s7
 8017e76:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017e7a:	1ad3      	subs	r3, r2, r3
 8017e7c:	2b31      	cmp	r3, #49	; 0x31
 8017e7e:	dc17      	bgt.n	8017eb0 <__ieee754_rem_pio2+0x168>
 8017e80:	eeb0 0b46 	vmov.f64	d0, d6
 8017e84:	ed84 3b00 	vstr	d3, [r4]
 8017e88:	ed94 6b00 	vldr	d6, [r4]
 8017e8c:	2d00      	cmp	r5, #0
 8017e8e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017e92:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017e96:	ed84 0b02 	vstr	d0, [r4, #8]
 8017e9a:	da85      	bge.n	8017da8 <__ieee754_rem_pio2+0x60>
 8017e9c:	eeb1 6b46 	vneg.f64	d6, d6
 8017ea0:	eeb1 0b40 	vneg.f64	d0, d0
 8017ea4:	ed84 6b00 	vstr	d6, [r4]
 8017ea8:	ed84 0b02 	vstr	d0, [r4, #8]
 8017eac:	4240      	negs	r0, r0
 8017eae:	e77b      	b.n	8017da8 <__ieee754_rem_pio2+0x60>
 8017eb0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8017fa0 <__ieee754_rem_pio2+0x258>
 8017eb4:	eeb0 0b46 	vmov.f64	d0, d6
 8017eb8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017ebc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8017ec0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017ec4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8017fa8 <__ieee754_rem_pio2+0x260>
 8017ec8:	eeb0 7b46 	vmov.f64	d7, d6
 8017ecc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8017ed0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017ed4:	e7b0      	b.n	8017e38 <__ieee754_rem_pio2+0xf0>
 8017ed6:	4b3c      	ldr	r3, [pc, #240]	; (8017fc8 <__ieee754_rem_pio2+0x280>)
 8017ed8:	429e      	cmp	r6, r3
 8017eda:	dd06      	ble.n	8017eea <__ieee754_rem_pio2+0x1a2>
 8017edc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017ee0:	ed80 7b02 	vstr	d7, [r0, #8]
 8017ee4:	ed80 7b00 	vstr	d7, [r0]
 8017ee8:	e740      	b.n	8017d6c <__ieee754_rem_pio2+0x24>
 8017eea:	1532      	asrs	r2, r6, #20
 8017eec:	ee10 0a10 	vmov	r0, s0
 8017ef0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8017ef4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017ef8:	ec41 0b17 	vmov	d7, r0, r1
 8017efc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017f00:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017fb0 <__ieee754_rem_pio2+0x268>
 8017f04:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017f08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017f0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017f10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017f14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017f18:	a808      	add	r0, sp, #32
 8017f1a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017f22:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017f26:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017f2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017f2e:	2103      	movs	r1, #3
 8017f30:	ed30 7b02 	vldmdb	r0!, {d7}
 8017f34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f3c:	460b      	mov	r3, r1
 8017f3e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8017f42:	d0f5      	beq.n	8017f30 <__ieee754_rem_pio2+0x1e8>
 8017f44:	4921      	ldr	r1, [pc, #132]	; (8017fcc <__ieee754_rem_pio2+0x284>)
 8017f46:	9101      	str	r1, [sp, #4]
 8017f48:	2102      	movs	r1, #2
 8017f4a:	9100      	str	r1, [sp, #0]
 8017f4c:	a802      	add	r0, sp, #8
 8017f4e:	4621      	mov	r1, r4
 8017f50:	f000 f83e 	bl	8017fd0 <__kernel_rem_pio2>
 8017f54:	2d00      	cmp	r5, #0
 8017f56:	f6bf af27 	bge.w	8017da8 <__ieee754_rem_pio2+0x60>
 8017f5a:	ed94 7b00 	vldr	d7, [r4]
 8017f5e:	eeb1 7b47 	vneg.f64	d7, d7
 8017f62:	ed84 7b00 	vstr	d7, [r4]
 8017f66:	ed94 7b02 	vldr	d7, [r4, #8]
 8017f6a:	eeb1 7b47 	vneg.f64	d7, d7
 8017f6e:	ed84 7b02 	vstr	d7, [r4, #8]
 8017f72:	e79b      	b.n	8017eac <__ieee754_rem_pio2+0x164>
 8017f74:	f3af 8000 	nop.w
 8017f78:	54400000 	.word	0x54400000
 8017f7c:	3ff921fb 	.word	0x3ff921fb
 8017f80:	1a626331 	.word	0x1a626331
 8017f84:	3dd0b461 	.word	0x3dd0b461
 8017f88:	1a600000 	.word	0x1a600000
 8017f8c:	3dd0b461 	.word	0x3dd0b461
 8017f90:	2e037073 	.word	0x2e037073
 8017f94:	3ba3198a 	.word	0x3ba3198a
 8017f98:	6dc9c883 	.word	0x6dc9c883
 8017f9c:	3fe45f30 	.word	0x3fe45f30
 8017fa0:	2e000000 	.word	0x2e000000
 8017fa4:	3ba3198a 	.word	0x3ba3198a
 8017fa8:	252049c1 	.word	0x252049c1
 8017fac:	397b839a 	.word	0x397b839a
 8017fb0:	00000000 	.word	0x00000000
 8017fb4:	41700000 	.word	0x41700000
 8017fb8:	3fe921fb 	.word	0x3fe921fb
 8017fbc:	4002d97b 	.word	0x4002d97b
 8017fc0:	413921fb 	.word	0x413921fb
 8017fc4:	0801a270 	.word	0x0801a270
 8017fc8:	7fefffff 	.word	0x7fefffff
 8017fcc:	0801a2f0 	.word	0x0801a2f0

08017fd0 <__kernel_rem_pio2>:
 8017fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd4:	ed2d 8b06 	vpush	{d8-d10}
 8017fd8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8017fdc:	460f      	mov	r7, r1
 8017fde:	9002      	str	r0, [sp, #8]
 8017fe0:	49c3      	ldr	r1, [pc, #780]	; (80182f0 <__kernel_rem_pio2+0x320>)
 8017fe2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8017fe4:	9301      	str	r3, [sp, #4]
 8017fe6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8017fea:	9901      	ldr	r1, [sp, #4]
 8017fec:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017fee:	f112 0f14 	cmn.w	r2, #20
 8017ff2:	bfa8      	it	ge
 8017ff4:	1ed0      	subge	r0, r2, #3
 8017ff6:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8017ffa:	bfaa      	itet	ge
 8017ffc:	2418      	movge	r4, #24
 8017ffe:	2000      	movlt	r0, #0
 8018000:	fb90 f0f4 	sdivge	r0, r0, r4
 8018004:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80182d8 <__kernel_rem_pio2+0x308>
 8018008:	f06f 0417 	mvn.w	r4, #23
 801800c:	fb00 4404 	mla	r4, r0, r4, r4
 8018010:	eba0 060a 	sub.w	r6, r0, sl
 8018014:	4414      	add	r4, r2
 8018016:	eb09 0c0a 	add.w	ip, r9, sl
 801801a:	ad1a      	add	r5, sp, #104	; 0x68
 801801c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8018020:	2200      	movs	r2, #0
 8018022:	4562      	cmp	r2, ip
 8018024:	dd10      	ble.n	8018048 <__kernel_rem_pio2+0x78>
 8018026:	9a01      	ldr	r2, [sp, #4]
 8018028:	a91a      	add	r1, sp, #104	; 0x68
 801802a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801802e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8018032:	f04f 0c00 	mov.w	ip, #0
 8018036:	45cc      	cmp	ip, r9
 8018038:	dc26      	bgt.n	8018088 <__kernel_rem_pio2+0xb8>
 801803a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80182d8 <__kernel_rem_pio2+0x308>
 801803e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018042:	4616      	mov	r6, r2
 8018044:	2500      	movs	r5, #0
 8018046:	e015      	b.n	8018074 <__kernel_rem_pio2+0xa4>
 8018048:	42d6      	cmn	r6, r2
 801804a:	d409      	bmi.n	8018060 <__kernel_rem_pio2+0x90>
 801804c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018050:	ee07 1a90 	vmov	s15, r1
 8018054:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018058:	eca5 7b02 	vstmia	r5!, {d7}
 801805c:	3201      	adds	r2, #1
 801805e:	e7e0      	b.n	8018022 <__kernel_rem_pio2+0x52>
 8018060:	eeb0 7b46 	vmov.f64	d7, d6
 8018064:	e7f8      	b.n	8018058 <__kernel_rem_pio2+0x88>
 8018066:	ecbe 5b02 	vldmia	lr!, {d5}
 801806a:	ed96 6b00 	vldr	d6, [r6]
 801806e:	3501      	adds	r5, #1
 8018070:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018074:	4555      	cmp	r5, sl
 8018076:	f1a6 0608 	sub.w	r6, r6, #8
 801807a:	ddf4      	ble.n	8018066 <__kernel_rem_pio2+0x96>
 801807c:	eca8 7b02 	vstmia	r8!, {d7}
 8018080:	f10c 0c01 	add.w	ip, ip, #1
 8018084:	3208      	adds	r2, #8
 8018086:	e7d6      	b.n	8018036 <__kernel_rem_pio2+0x66>
 8018088:	aa06      	add	r2, sp, #24
 801808a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80182e0 <__kernel_rem_pio2+0x310>
 801808e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80182e8 <__kernel_rem_pio2+0x318>
 8018092:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8018096:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801809a:	9204      	str	r2, [sp, #16]
 801809c:	9303      	str	r3, [sp, #12]
 801809e:	464d      	mov	r5, r9
 80180a0:	00eb      	lsls	r3, r5, #3
 80180a2:	9305      	str	r3, [sp, #20]
 80180a4:	ab92      	add	r3, sp, #584	; 0x248
 80180a6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80180aa:	f10d 0b18 	add.w	fp, sp, #24
 80180ae:	ab6a      	add	r3, sp, #424	; 0x1a8
 80180b0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80180b4:	465e      	mov	r6, fp
 80180b6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80180ba:	4628      	mov	r0, r5
 80180bc:	2800      	cmp	r0, #0
 80180be:	f1a2 0208 	sub.w	r2, r2, #8
 80180c2:	dc48      	bgt.n	8018156 <__kernel_rem_pio2+0x186>
 80180c4:	4620      	mov	r0, r4
 80180c6:	f000 fb3f 	bl	8018748 <scalbn>
 80180ca:	eeb0 8b40 	vmov.f64	d8, d0
 80180ce:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80180d2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80180d6:	f000 fbb7 	bl	8018848 <floor>
 80180da:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80180de:	eea0 8b47 	vfms.f64	d8, d0, d7
 80180e2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80180e6:	2c00      	cmp	r4, #0
 80180e8:	ee17 8a90 	vmov	r8, s15
 80180ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80180f0:	ee38 8b47 	vsub.f64	d8, d8, d7
 80180f4:	dd41      	ble.n	801817a <__kernel_rem_pio2+0x1aa>
 80180f6:	1e68      	subs	r0, r5, #1
 80180f8:	ab06      	add	r3, sp, #24
 80180fa:	f1c4 0c18 	rsb	ip, r4, #24
 80180fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8018102:	fa46 f20c 	asr.w	r2, r6, ip
 8018106:	4490      	add	r8, r2
 8018108:	fa02 f20c 	lsl.w	r2, r2, ip
 801810c:	1ab6      	subs	r6, r6, r2
 801810e:	f1c4 0217 	rsb	r2, r4, #23
 8018112:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8018116:	4116      	asrs	r6, r2
 8018118:	2e00      	cmp	r6, #0
 801811a:	dd3d      	ble.n	8018198 <__kernel_rem_pio2+0x1c8>
 801811c:	f04f 0c00 	mov.w	ip, #0
 8018120:	f108 0801 	add.w	r8, r8, #1
 8018124:	4660      	mov	r0, ip
 8018126:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801812a:	4565      	cmp	r5, ip
 801812c:	dc6a      	bgt.n	8018204 <__kernel_rem_pio2+0x234>
 801812e:	2c00      	cmp	r4, #0
 8018130:	dd04      	ble.n	801813c <__kernel_rem_pio2+0x16c>
 8018132:	2c01      	cmp	r4, #1
 8018134:	d07b      	beq.n	801822e <__kernel_rem_pio2+0x25e>
 8018136:	2c02      	cmp	r4, #2
 8018138:	f000 8083 	beq.w	8018242 <__kernel_rem_pio2+0x272>
 801813c:	2e02      	cmp	r6, #2
 801813e:	d12b      	bne.n	8018198 <__kernel_rem_pio2+0x1c8>
 8018140:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018144:	ee30 8b48 	vsub.f64	d8, d0, d8
 8018148:	b330      	cbz	r0, 8018198 <__kernel_rem_pio2+0x1c8>
 801814a:	4620      	mov	r0, r4
 801814c:	f000 fafc 	bl	8018748 <scalbn>
 8018150:	ee38 8b40 	vsub.f64	d8, d8, d0
 8018154:	e020      	b.n	8018198 <__kernel_rem_pio2+0x1c8>
 8018156:	ee20 7b09 	vmul.f64	d7, d0, d9
 801815a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801815e:	3801      	subs	r0, #1
 8018160:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8018164:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8018168:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801816c:	eca6 0a01 	vstmia	r6!, {s0}
 8018170:	ed92 0b00 	vldr	d0, [r2]
 8018174:	ee37 0b00 	vadd.f64	d0, d7, d0
 8018178:	e7a0      	b.n	80180bc <__kernel_rem_pio2+0xec>
 801817a:	d105      	bne.n	8018188 <__kernel_rem_pio2+0x1b8>
 801817c:	1e6a      	subs	r2, r5, #1
 801817e:	ab06      	add	r3, sp, #24
 8018180:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018184:	15f6      	asrs	r6, r6, #23
 8018186:	e7c7      	b.n	8018118 <__kernel_rem_pio2+0x148>
 8018188:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801818c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018194:	da34      	bge.n	8018200 <__kernel_rem_pio2+0x230>
 8018196:	2600      	movs	r6, #0
 8018198:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801819c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a0:	f040 80aa 	bne.w	80182f8 <__kernel_rem_pio2+0x328>
 80181a4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80181a8:	4658      	mov	r0, fp
 80181aa:	2200      	movs	r2, #0
 80181ac:	4548      	cmp	r0, r9
 80181ae:	da50      	bge.n	8018252 <__kernel_rem_pio2+0x282>
 80181b0:	2a00      	cmp	r2, #0
 80181b2:	d06b      	beq.n	801828c <__kernel_rem_pio2+0x2bc>
 80181b4:	ab06      	add	r3, sp, #24
 80181b6:	3c18      	subs	r4, #24
 80181b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	f000 8087 	beq.w	80182d0 <__kernel_rem_pio2+0x300>
 80181c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80181c6:	4620      	mov	r0, r4
 80181c8:	f000 fabe 	bl	8018748 <scalbn>
 80181cc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80182e0 <__kernel_rem_pio2+0x310>
 80181d0:	f10b 0201 	add.w	r2, fp, #1
 80181d4:	a96a      	add	r1, sp, #424	; 0x1a8
 80181d6:	00d3      	lsls	r3, r2, #3
 80181d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80181dc:	465a      	mov	r2, fp
 80181de:	2a00      	cmp	r2, #0
 80181e0:	f280 80b8 	bge.w	8018354 <__kernel_rem_pio2+0x384>
 80181e4:	465a      	mov	r2, fp
 80181e6:	2a00      	cmp	r2, #0
 80181e8:	f2c0 80d6 	blt.w	8018398 <__kernel_rem_pio2+0x3c8>
 80181ec:	a96a      	add	r1, sp, #424	; 0x1a8
 80181ee:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80181f2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80182d8 <__kernel_rem_pio2+0x308>
 80181f6:	4d3f      	ldr	r5, [pc, #252]	; (80182f4 <__kernel_rem_pio2+0x324>)
 80181f8:	2000      	movs	r0, #0
 80181fa:	ebab 0102 	sub.w	r1, fp, r2
 80181fe:	e0c0      	b.n	8018382 <__kernel_rem_pio2+0x3b2>
 8018200:	2602      	movs	r6, #2
 8018202:	e78b      	b.n	801811c <__kernel_rem_pio2+0x14c>
 8018204:	f8db 2000 	ldr.w	r2, [fp]
 8018208:	b958      	cbnz	r0, 8018222 <__kernel_rem_pio2+0x252>
 801820a:	b122      	cbz	r2, 8018216 <__kernel_rem_pio2+0x246>
 801820c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8018210:	f8cb 2000 	str.w	r2, [fp]
 8018214:	2201      	movs	r2, #1
 8018216:	f10c 0c01 	add.w	ip, ip, #1
 801821a:	f10b 0b04 	add.w	fp, fp, #4
 801821e:	4610      	mov	r0, r2
 8018220:	e783      	b.n	801812a <__kernel_rem_pio2+0x15a>
 8018222:	ebae 0202 	sub.w	r2, lr, r2
 8018226:	f8cb 2000 	str.w	r2, [fp]
 801822a:	4602      	mov	r2, r0
 801822c:	e7f3      	b.n	8018216 <__kernel_rem_pio2+0x246>
 801822e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8018232:	ab06      	add	r3, sp, #24
 8018234:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8018238:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801823c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8018240:	e77c      	b.n	801813c <__kernel_rem_pio2+0x16c>
 8018242:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8018246:	ab06      	add	r3, sp, #24
 8018248:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801824c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8018250:	e7f4      	b.n	801823c <__kernel_rem_pio2+0x26c>
 8018252:	ab06      	add	r3, sp, #24
 8018254:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018258:	3801      	subs	r0, #1
 801825a:	431a      	orrs	r2, r3
 801825c:	e7a6      	b.n	80181ac <__kernel_rem_pio2+0x1dc>
 801825e:	3201      	adds	r2, #1
 8018260:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8018264:	2e00      	cmp	r6, #0
 8018266:	d0fa      	beq.n	801825e <__kernel_rem_pio2+0x28e>
 8018268:	9b05      	ldr	r3, [sp, #20]
 801826a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801826e:	eb0d 0003 	add.w	r0, sp, r3
 8018272:	9b01      	ldr	r3, [sp, #4]
 8018274:	18ee      	adds	r6, r5, r3
 8018276:	ab1a      	add	r3, sp, #104	; 0x68
 8018278:	f105 0c01 	add.w	ip, r5, #1
 801827c:	3898      	subs	r0, #152	; 0x98
 801827e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8018282:	442a      	add	r2, r5
 8018284:	4562      	cmp	r2, ip
 8018286:	da04      	bge.n	8018292 <__kernel_rem_pio2+0x2c2>
 8018288:	4615      	mov	r5, r2
 801828a:	e709      	b.n	80180a0 <__kernel_rem_pio2+0xd0>
 801828c:	9804      	ldr	r0, [sp, #16]
 801828e:	2201      	movs	r2, #1
 8018290:	e7e6      	b.n	8018260 <__kernel_rem_pio2+0x290>
 8018292:	9b03      	ldr	r3, [sp, #12]
 8018294:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018298:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801829c:	9305      	str	r3, [sp, #20]
 801829e:	ee07 3a90 	vmov	s15, r3
 80182a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182a6:	2500      	movs	r5, #0
 80182a8:	eca6 7b02 	vstmia	r6!, {d7}
 80182ac:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80182d8 <__kernel_rem_pio2+0x308>
 80182b0:	46b0      	mov	r8, r6
 80182b2:	4555      	cmp	r5, sl
 80182b4:	dd04      	ble.n	80182c0 <__kernel_rem_pio2+0x2f0>
 80182b6:	eca0 7b02 	vstmia	r0!, {d7}
 80182ba:	f10c 0c01 	add.w	ip, ip, #1
 80182be:	e7e1      	b.n	8018284 <__kernel_rem_pio2+0x2b4>
 80182c0:	ecbe 5b02 	vldmia	lr!, {d5}
 80182c4:	ed38 6b02 	vldmdb	r8!, {d6}
 80182c8:	3501      	adds	r5, #1
 80182ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 80182ce:	e7f0      	b.n	80182b2 <__kernel_rem_pio2+0x2e2>
 80182d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80182d4:	e76e      	b.n	80181b4 <__kernel_rem_pio2+0x1e4>
 80182d6:	bf00      	nop
	...
 80182e4:	3e700000 	.word	0x3e700000
 80182e8:	00000000 	.word	0x00000000
 80182ec:	41700000 	.word	0x41700000
 80182f0:	0801a438 	.word	0x0801a438
 80182f4:	0801a3f8 	.word	0x0801a3f8
 80182f8:	4260      	negs	r0, r4
 80182fa:	eeb0 0b48 	vmov.f64	d0, d8
 80182fe:	f000 fa23 	bl	8018748 <scalbn>
 8018302:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80184e0 <__kernel_rem_pio2+0x510>
 8018306:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801830e:	db18      	blt.n	8018342 <__kernel_rem_pio2+0x372>
 8018310:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80184e8 <__kernel_rem_pio2+0x518>
 8018314:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018318:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801831c:	aa06      	add	r2, sp, #24
 801831e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8018322:	eea5 0b46 	vfms.f64	d0, d5, d6
 8018326:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801832a:	f105 0b01 	add.w	fp, r5, #1
 801832e:	ee10 3a10 	vmov	r3, s0
 8018332:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8018336:	ee17 3a10 	vmov	r3, s14
 801833a:	3418      	adds	r4, #24
 801833c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8018340:	e73f      	b.n	80181c2 <__kernel_rem_pio2+0x1f2>
 8018342:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8018346:	aa06      	add	r2, sp, #24
 8018348:	ee10 3a10 	vmov	r3, s0
 801834c:	46ab      	mov	fp, r5
 801834e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8018352:	e736      	b.n	80181c2 <__kernel_rem_pio2+0x1f2>
 8018354:	a806      	add	r0, sp, #24
 8018356:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801835a:	9001      	str	r0, [sp, #4]
 801835c:	ee07 0a90 	vmov	s15, r0
 8018360:	3a01      	subs	r2, #1
 8018362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018366:	ee27 7b00 	vmul.f64	d7, d7, d0
 801836a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801836e:	ed21 7b02 	vstmdb	r1!, {d7}
 8018372:	e734      	b.n	80181de <__kernel_rem_pio2+0x20e>
 8018374:	ecb5 5b02 	vldmia	r5!, {d5}
 8018378:	ecb4 6b02 	vldmia	r4!, {d6}
 801837c:	3001      	adds	r0, #1
 801837e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018382:	4548      	cmp	r0, r9
 8018384:	dc01      	bgt.n	801838a <__kernel_rem_pio2+0x3ba>
 8018386:	4288      	cmp	r0, r1
 8018388:	ddf4      	ble.n	8018374 <__kernel_rem_pio2+0x3a4>
 801838a:	a842      	add	r0, sp, #264	; 0x108
 801838c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018390:	ed81 7b00 	vstr	d7, [r1]
 8018394:	3a01      	subs	r2, #1
 8018396:	e726      	b.n	80181e6 <__kernel_rem_pio2+0x216>
 8018398:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801839a:	2a02      	cmp	r2, #2
 801839c:	dc0a      	bgt.n	80183b4 <__kernel_rem_pio2+0x3e4>
 801839e:	2a00      	cmp	r2, #0
 80183a0:	dc2e      	bgt.n	8018400 <__kernel_rem_pio2+0x430>
 80183a2:	d047      	beq.n	8018434 <__kernel_rem_pio2+0x464>
 80183a4:	f008 0007 	and.w	r0, r8, #7
 80183a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80183ac:	ecbd 8b06 	vpop	{d8-d10}
 80183b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80183b6:	2a03      	cmp	r2, #3
 80183b8:	d1f4      	bne.n	80183a4 <__kernel_rem_pio2+0x3d4>
 80183ba:	a942      	add	r1, sp, #264	; 0x108
 80183bc:	f1a3 0208 	sub.w	r2, r3, #8
 80183c0:	440a      	add	r2, r1
 80183c2:	4611      	mov	r1, r2
 80183c4:	4658      	mov	r0, fp
 80183c6:	2800      	cmp	r0, #0
 80183c8:	f1a1 0108 	sub.w	r1, r1, #8
 80183cc:	dc55      	bgt.n	801847a <__kernel_rem_pio2+0x4aa>
 80183ce:	4659      	mov	r1, fp
 80183d0:	2901      	cmp	r1, #1
 80183d2:	f1a2 0208 	sub.w	r2, r2, #8
 80183d6:	dc60      	bgt.n	801849a <__kernel_rem_pio2+0x4ca>
 80183d8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80184f0 <__kernel_rem_pio2+0x520>
 80183dc:	aa42      	add	r2, sp, #264	; 0x108
 80183de:	4413      	add	r3, r2
 80183e0:	f1bb 0f01 	cmp.w	fp, #1
 80183e4:	dc69      	bgt.n	80184ba <__kernel_rem_pio2+0x4ea>
 80183e6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80183ea:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80183ee:	2e00      	cmp	r6, #0
 80183f0:	d16a      	bne.n	80184c8 <__kernel_rem_pio2+0x4f8>
 80183f2:	ed87 5b00 	vstr	d5, [r7]
 80183f6:	ed87 6b02 	vstr	d6, [r7, #8]
 80183fa:	ed87 7b04 	vstr	d7, [r7, #16]
 80183fe:	e7d1      	b.n	80183a4 <__kernel_rem_pio2+0x3d4>
 8018400:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80184f0 <__kernel_rem_pio2+0x520>
 8018404:	aa42      	add	r2, sp, #264	; 0x108
 8018406:	4413      	add	r3, r2
 8018408:	465a      	mov	r2, fp
 801840a:	2a00      	cmp	r2, #0
 801840c:	da26      	bge.n	801845c <__kernel_rem_pio2+0x48c>
 801840e:	b35e      	cbz	r6, 8018468 <__kernel_rem_pio2+0x498>
 8018410:	eeb1 7b46 	vneg.f64	d7, d6
 8018414:	ed87 7b00 	vstr	d7, [r7]
 8018418:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801841c:	aa44      	add	r2, sp, #272	; 0x110
 801841e:	2301      	movs	r3, #1
 8018420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018424:	459b      	cmp	fp, r3
 8018426:	da22      	bge.n	801846e <__kernel_rem_pio2+0x49e>
 8018428:	b10e      	cbz	r6, 801842e <__kernel_rem_pio2+0x45e>
 801842a:	eeb1 7b47 	vneg.f64	d7, d7
 801842e:	ed87 7b02 	vstr	d7, [r7, #8]
 8018432:	e7b7      	b.n	80183a4 <__kernel_rem_pio2+0x3d4>
 8018434:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80184f0 <__kernel_rem_pio2+0x520>
 8018438:	aa42      	add	r2, sp, #264	; 0x108
 801843a:	4413      	add	r3, r2
 801843c:	f1bb 0f00 	cmp.w	fp, #0
 8018440:	da05      	bge.n	801844e <__kernel_rem_pio2+0x47e>
 8018442:	b10e      	cbz	r6, 8018448 <__kernel_rem_pio2+0x478>
 8018444:	eeb1 7b47 	vneg.f64	d7, d7
 8018448:	ed87 7b00 	vstr	d7, [r7]
 801844c:	e7aa      	b.n	80183a4 <__kernel_rem_pio2+0x3d4>
 801844e:	ed33 6b02 	vldmdb	r3!, {d6}
 8018452:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8018456:	ee37 7b06 	vadd.f64	d7, d7, d6
 801845a:	e7ef      	b.n	801843c <__kernel_rem_pio2+0x46c>
 801845c:	ed33 7b02 	vldmdb	r3!, {d7}
 8018460:	3a01      	subs	r2, #1
 8018462:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018466:	e7d0      	b.n	801840a <__kernel_rem_pio2+0x43a>
 8018468:	eeb0 7b46 	vmov.f64	d7, d6
 801846c:	e7d2      	b.n	8018414 <__kernel_rem_pio2+0x444>
 801846e:	ecb2 6b02 	vldmia	r2!, {d6}
 8018472:	3301      	adds	r3, #1
 8018474:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018478:	e7d4      	b.n	8018424 <__kernel_rem_pio2+0x454>
 801847a:	ed91 7b00 	vldr	d7, [r1]
 801847e:	ed91 5b02 	vldr	d5, [r1, #8]
 8018482:	3801      	subs	r0, #1
 8018484:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018488:	ee37 7b46 	vsub.f64	d7, d7, d6
 801848c:	ed81 6b00 	vstr	d6, [r1]
 8018490:	ee37 7b05 	vadd.f64	d7, d7, d5
 8018494:	ed81 7b02 	vstr	d7, [r1, #8]
 8018498:	e795      	b.n	80183c6 <__kernel_rem_pio2+0x3f6>
 801849a:	ed92 7b00 	vldr	d7, [r2]
 801849e:	ed92 5b02 	vldr	d5, [r2, #8]
 80184a2:	3901      	subs	r1, #1
 80184a4:	ee37 6b05 	vadd.f64	d6, d7, d5
 80184a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80184ac:	ed82 6b00 	vstr	d6, [r2]
 80184b0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80184b4:	ed82 7b02 	vstr	d7, [r2, #8]
 80184b8:	e78a      	b.n	80183d0 <__kernel_rem_pio2+0x400>
 80184ba:	ed33 6b02 	vldmdb	r3!, {d6}
 80184be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80184c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80184c6:	e78b      	b.n	80183e0 <__kernel_rem_pio2+0x410>
 80184c8:	eeb1 5b45 	vneg.f64	d5, d5
 80184cc:	eeb1 6b46 	vneg.f64	d6, d6
 80184d0:	ed87 5b00 	vstr	d5, [r7]
 80184d4:	eeb1 7b47 	vneg.f64	d7, d7
 80184d8:	ed87 6b02 	vstr	d6, [r7, #8]
 80184dc:	e78d      	b.n	80183fa <__kernel_rem_pio2+0x42a>
 80184de:	bf00      	nop
 80184e0:	00000000 	.word	0x00000000
 80184e4:	41700000 	.word	0x41700000
 80184e8:	00000000 	.word	0x00000000
 80184ec:	3e700000 	.word	0x3e700000
	...

080184f8 <__kernel_tan>:
 80184f8:	eeb0 7b40 	vmov.f64	d7, d0
 80184fc:	ee17 3a90 	vmov	r3, s15
 8018500:	4989      	ldr	r1, [pc, #548]	; (8018728 <__kernel_tan+0x230>)
 8018502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018506:	428a      	cmp	r2, r1
 8018508:	b510      	push	{r4, lr}
 801850a:	dc33      	bgt.n	8018574 <__kernel_tan+0x7c>
 801850c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8018510:	ee16 1a90 	vmov	r1, s13
 8018514:	2900      	cmp	r1, #0
 8018516:	d143      	bne.n	80185a0 <__kernel_tan+0xa8>
 8018518:	ee10 4a10 	vmov	r4, s0
 801851c:	1c43      	adds	r3, r0, #1
 801851e:	4323      	orrs	r3, r4
 8018520:	4313      	orrs	r3, r2
 8018522:	d108      	bne.n	8018536 <__kernel_tan+0x3e>
 8018524:	f000 f904 	bl	8018730 <fabs>
 8018528:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801852c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8018530:	eeb0 0b47 	vmov.f64	d0, d7
 8018534:	bd10      	pop	{r4, pc}
 8018536:	2801      	cmp	r0, #1
 8018538:	d0fa      	beq.n	8018530 <__kernel_tan+0x38>
 801853a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801853e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8018542:	ec53 2b16 	vmov	r2, r3, d6
 8018546:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801854a:	460a      	mov	r2, r1
 801854c:	ec43 2b15 	vmov	d5, r2, r3
 8018550:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018554:	ec53 2b13 	vmov	r2, r3, d3
 8018558:	ee35 4b40 	vsub.f64	d4, d5, d0
 801855c:	460a      	mov	r2, r1
 801855e:	ec43 2b17 	vmov	d7, r2, r3
 8018562:	ee31 4b44 	vsub.f64	d4, d1, d4
 8018566:	eea5 6b07 	vfma.f64	d6, d5, d7
 801856a:	eea4 6b07 	vfma.f64	d6, d4, d7
 801856e:	eea6 7b03 	vfma.f64	d7, d6, d3
 8018572:	e7dd      	b.n	8018530 <__kernel_tan+0x38>
 8018574:	496d      	ldr	r1, [pc, #436]	; (801872c <__kernel_tan+0x234>)
 8018576:	428a      	cmp	r2, r1
 8018578:	dd12      	ble.n	80185a0 <__kernel_tan+0xa8>
 801857a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80186a8 <__kernel_tan+0x1b0>
 801857e:	2b00      	cmp	r3, #0
 8018580:	bfb8      	it	lt
 8018582:	eeb1 7b40 	vneglt.f64	d7, d0
 8018586:	ee36 6b47 	vsub.f64	d6, d6, d7
 801858a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 80186b0 <__kernel_tan+0x1b8>
 801858e:	bfb8      	it	lt
 8018590:	eeb1 1b41 	vneglt.f64	d1, d1
 8018594:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018598:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80186b8 <__kernel_tan+0x1c0>
 801859c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80185a0:	ee27 5b07 	vmul.f64	d5, d7, d7
 80185a4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80186c0 <__kernel_tan+0x1c8>
 80185a8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80185ac:	ed9f 4b46 	vldr	d4, [pc, #280]	; 80186c8 <__kernel_tan+0x1d0>
 80185b0:	eea6 4b03 	vfma.f64	d4, d6, d3
 80185b4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80186d0 <__kernel_tan+0x1d8>
 80185b8:	eea4 3b06 	vfma.f64	d3, d4, d6
 80185bc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 80186d8 <__kernel_tan+0x1e0>
 80185c0:	eea3 4b06 	vfma.f64	d4, d3, d6
 80185c4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 80186e0 <__kernel_tan+0x1e8>
 80185c8:	eea4 3b06 	vfma.f64	d3, d4, d6
 80185cc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 80186e8 <__kernel_tan+0x1f0>
 80185d0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 80186f0 <__kernel_tan+0x1f8>
 80185d4:	eea3 4b06 	vfma.f64	d4, d3, d6
 80185d8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80186f8 <__kernel_tan+0x200>
 80185dc:	eea6 3b02 	vfma.f64	d3, d6, d2
 80185e0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018700 <__kernel_tan+0x208>
 80185e4:	eea3 2b06 	vfma.f64	d2, d3, d6
 80185e8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018708 <__kernel_tan+0x210>
 80185ec:	eea2 3b06 	vfma.f64	d3, d2, d6
 80185f0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018710 <__kernel_tan+0x218>
 80185f4:	eea3 2b06 	vfma.f64	d2, d3, d6
 80185f8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018718 <__kernel_tan+0x220>
 80185fc:	494b      	ldr	r1, [pc, #300]	; (801872c <__kernel_tan+0x234>)
 80185fe:	eea2 3b06 	vfma.f64	d3, d2, d6
 8018602:	ee27 2b05 	vmul.f64	d2, d7, d5
 8018606:	eeb0 6b44 	vmov.f64	d6, d4
 801860a:	eeb0 4b41 	vmov.f64	d4, d1
 801860e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018612:	eea6 4b02 	vfma.f64	d4, d6, d2
 8018616:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8018720 <__kernel_tan+0x228>
 801861a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801861e:	428a      	cmp	r2, r1
 8018620:	eea2 1b06 	vfma.f64	d1, d2, d6
 8018624:	ee37 5b01 	vadd.f64	d5, d7, d1
 8018628:	dd1d      	ble.n	8018666 <__kernel_tan+0x16e>
 801862a:	ee25 3b05 	vmul.f64	d3, d5, d5
 801862e:	179b      	asrs	r3, r3, #30
 8018630:	ee06 0a90 	vmov	s13, r0
 8018634:	f003 0302 	and.w	r3, r3, #2
 8018638:	f1c3 0301 	rsb	r3, r3, #1
 801863c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018640:	ee35 5b06 	vadd.f64	d5, d5, d6
 8018644:	ee83 4b05 	vdiv.f64	d4, d3, d5
 8018648:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801864c:	ee34 4b41 	vsub.f64	d4, d4, d1
 8018650:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018654:	eea7 6b45 	vfms.f64	d6, d7, d5
 8018658:	ee07 3a90 	vmov	s15, r3
 801865c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018660:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018664:	e764      	b.n	8018530 <__kernel_tan+0x38>
 8018666:	2801      	cmp	r0, #1
 8018668:	d01a      	beq.n	80186a0 <__kernel_tan+0x1a8>
 801866a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801866e:	ec51 0b15 	vmov	r0, r1, d5
 8018672:	2000      	movs	r0, #0
 8018674:	ec41 0b13 	vmov	d3, r0, r1
 8018678:	ee33 7b47 	vsub.f64	d7, d3, d7
 801867c:	ee31 1b47 	vsub.f64	d1, d1, d7
 8018680:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8018684:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8018688:	ec53 2b14 	vmov	r2, r3, d4
 801868c:	4602      	mov	r2, r0
 801868e:	ec43 2b17 	vmov	d7, r2, r3
 8018692:	eea3 6b07 	vfma.f64	d6, d3, d7
 8018696:	eea1 6b07 	vfma.f64	d6, d1, d7
 801869a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801869e:	e747      	b.n	8018530 <__kernel_tan+0x38>
 80186a0:	eeb0 7b45 	vmov.f64	d7, d5
 80186a4:	e744      	b.n	8018530 <__kernel_tan+0x38>
 80186a6:	bf00      	nop
 80186a8:	54442d18 	.word	0x54442d18
 80186ac:	3fe921fb 	.word	0x3fe921fb
 80186b0:	33145c07 	.word	0x33145c07
 80186b4:	3c81a626 	.word	0x3c81a626
	...
 80186c0:	db605373 	.word	0xdb605373
 80186c4:	bef375cb 	.word	0xbef375cb
 80186c8:	a03792a6 	.word	0xa03792a6
 80186cc:	3f147e88 	.word	0x3f147e88
 80186d0:	f2f26501 	.word	0xf2f26501
 80186d4:	3f4344d8 	.word	0x3f4344d8
 80186d8:	c9560328 	.word	0xc9560328
 80186dc:	3f6d6d22 	.word	0x3f6d6d22
 80186e0:	8406d637 	.word	0x8406d637
 80186e4:	3f9664f4 	.word	0x3f9664f4
 80186e8:	1110fe7a 	.word	0x1110fe7a
 80186ec:	3fc11111 	.word	0x3fc11111
 80186f0:	74bf7ad4 	.word	0x74bf7ad4
 80186f4:	3efb2a70 	.word	0x3efb2a70
 80186f8:	32f0a7e9 	.word	0x32f0a7e9
 80186fc:	3f12b80f 	.word	0x3f12b80f
 8018700:	1a8d1068 	.word	0x1a8d1068
 8018704:	3f3026f7 	.word	0x3f3026f7
 8018708:	fee08315 	.word	0xfee08315
 801870c:	3f57dbc8 	.word	0x3f57dbc8
 8018710:	e96e8493 	.word	0xe96e8493
 8018714:	3f8226e3 	.word	0x3f8226e3
 8018718:	1bb341fe 	.word	0x1bb341fe
 801871c:	3faba1ba 	.word	0x3faba1ba
 8018720:	55555563 	.word	0x55555563
 8018724:	3fd55555 	.word	0x3fd55555
 8018728:	3e2fffff 	.word	0x3e2fffff
 801872c:	3fe59427 	.word	0x3fe59427

08018730 <fabs>:
 8018730:	ec51 0b10 	vmov	r0, r1, d0
 8018734:	ee10 2a10 	vmov	r2, s0
 8018738:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801873c:	ec43 2b10 	vmov	d0, r2, r3
 8018740:	4770      	bx	lr
 8018742:	0000      	movs	r0, r0
 8018744:	0000      	movs	r0, r0
	...

08018748 <scalbn>:
 8018748:	ee10 1a90 	vmov	r1, s1
 801874c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018750:	b98b      	cbnz	r3, 8018776 <scalbn+0x2e>
 8018752:	ee10 3a10 	vmov	r3, s0
 8018756:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801875a:	4319      	orrs	r1, r3
 801875c:	d00a      	beq.n	8018774 <scalbn+0x2c>
 801875e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8018810 <scalbn+0xc8>
 8018762:	4b37      	ldr	r3, [pc, #220]	; (8018840 <scalbn+0xf8>)
 8018764:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018768:	4298      	cmp	r0, r3
 801876a:	da0b      	bge.n	8018784 <scalbn+0x3c>
 801876c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8018818 <scalbn+0xd0>
 8018770:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018774:	4770      	bx	lr
 8018776:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801877a:	4293      	cmp	r3, r2
 801877c:	d107      	bne.n	801878e <scalbn+0x46>
 801877e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018782:	4770      	bx	lr
 8018784:	ee10 1a90 	vmov	r1, s1
 8018788:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801878c:	3b36      	subs	r3, #54	; 0x36
 801878e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018792:	4290      	cmp	r0, r2
 8018794:	dd0d      	ble.n	80187b2 <scalbn+0x6a>
 8018796:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018820 <scalbn+0xd8>
 801879a:	ee10 3a90 	vmov	r3, s1
 801879e:	eeb0 6b47 	vmov.f64	d6, d7
 80187a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8018828 <scalbn+0xe0>
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80187ac:	ee27 0b06 	vmul.f64	d0, d7, d6
 80187b0:	4770      	bx	lr
 80187b2:	4418      	add	r0, r3
 80187b4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80187b8:	4298      	cmp	r0, r3
 80187ba:	dcec      	bgt.n	8018796 <scalbn+0x4e>
 80187bc:	2800      	cmp	r0, #0
 80187be:	dd0a      	ble.n	80187d6 <scalbn+0x8e>
 80187c0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80187c4:	ec53 2b10 	vmov	r2, r3, d0
 80187c8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80187cc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80187d0:	ec43 2b10 	vmov	d0, r2, r3
 80187d4:	4770      	bx	lr
 80187d6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80187da:	da09      	bge.n	80187f0 <scalbn+0xa8>
 80187dc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018818 <scalbn+0xd0>
 80187e0:	ee10 3a90 	vmov	r3, s1
 80187e4:	eeb0 6b47 	vmov.f64	d6, d7
 80187e8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8018830 <scalbn+0xe8>
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	e7db      	b.n	80187a8 <scalbn+0x60>
 80187f0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80187f4:	ec53 2b10 	vmov	r2, r3, d0
 80187f8:	3036      	adds	r0, #54	; 0x36
 80187fa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80187fe:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018802:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018838 <scalbn+0xf0>
 8018806:	ec43 2b10 	vmov	d0, r2, r3
 801880a:	e7b1      	b.n	8018770 <scalbn+0x28>
 801880c:	f3af 8000 	nop.w
 8018810:	00000000 	.word	0x00000000
 8018814:	43500000 	.word	0x43500000
 8018818:	c2f8f359 	.word	0xc2f8f359
 801881c:	01a56e1f 	.word	0x01a56e1f
 8018820:	8800759c 	.word	0x8800759c
 8018824:	7e37e43c 	.word	0x7e37e43c
 8018828:	8800759c 	.word	0x8800759c
 801882c:	fe37e43c 	.word	0xfe37e43c
 8018830:	c2f8f359 	.word	0xc2f8f359
 8018834:	81a56e1f 	.word	0x81a56e1f
 8018838:	00000000 	.word	0x00000000
 801883c:	3c900000 	.word	0x3c900000
 8018840:	ffff3cb0 	.word	0xffff3cb0
 8018844:	00000000 	.word	0x00000000

08018848 <floor>:
 8018848:	ee10 1a90 	vmov	r1, s1
 801884c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018850:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018854:	2b13      	cmp	r3, #19
 8018856:	b530      	push	{r4, r5, lr}
 8018858:	ee10 0a10 	vmov	r0, s0
 801885c:	ee10 5a10 	vmov	r5, s0
 8018860:	dc31      	bgt.n	80188c6 <floor+0x7e>
 8018862:	2b00      	cmp	r3, #0
 8018864:	da15      	bge.n	8018892 <floor+0x4a>
 8018866:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018928 <floor+0xe0>
 801886a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801886e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018876:	dd07      	ble.n	8018888 <floor+0x40>
 8018878:	2900      	cmp	r1, #0
 801887a:	da4e      	bge.n	801891a <floor+0xd2>
 801887c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018880:	4308      	orrs	r0, r1
 8018882:	d04d      	beq.n	8018920 <floor+0xd8>
 8018884:	492a      	ldr	r1, [pc, #168]	; (8018930 <floor+0xe8>)
 8018886:	2000      	movs	r0, #0
 8018888:	460b      	mov	r3, r1
 801888a:	4602      	mov	r2, r0
 801888c:	ec43 2b10 	vmov	d0, r2, r3
 8018890:	e020      	b.n	80188d4 <floor+0x8c>
 8018892:	4a28      	ldr	r2, [pc, #160]	; (8018934 <floor+0xec>)
 8018894:	411a      	asrs	r2, r3
 8018896:	ea01 0402 	and.w	r4, r1, r2
 801889a:	4304      	orrs	r4, r0
 801889c:	d01a      	beq.n	80188d4 <floor+0x8c>
 801889e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018928 <floor+0xe0>
 80188a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80188a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80188aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ae:	ddeb      	ble.n	8018888 <floor+0x40>
 80188b0:	2900      	cmp	r1, #0
 80188b2:	bfbe      	ittt	lt
 80188b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80188b8:	fa40 f303 	asrlt.w	r3, r0, r3
 80188bc:	18c9      	addlt	r1, r1, r3
 80188be:	ea21 0102 	bic.w	r1, r1, r2
 80188c2:	2000      	movs	r0, #0
 80188c4:	e7e0      	b.n	8018888 <floor+0x40>
 80188c6:	2b33      	cmp	r3, #51	; 0x33
 80188c8:	dd05      	ble.n	80188d6 <floor+0x8e>
 80188ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80188ce:	d101      	bne.n	80188d4 <floor+0x8c>
 80188d0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80188d4:	bd30      	pop	{r4, r5, pc}
 80188d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80188da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188de:	40e2      	lsrs	r2, r4
 80188e0:	4210      	tst	r0, r2
 80188e2:	d0f7      	beq.n	80188d4 <floor+0x8c>
 80188e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8018928 <floor+0xe0>
 80188e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80188ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80188f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f4:	ddc8      	ble.n	8018888 <floor+0x40>
 80188f6:	2900      	cmp	r1, #0
 80188f8:	da02      	bge.n	8018900 <floor+0xb8>
 80188fa:	2b14      	cmp	r3, #20
 80188fc:	d103      	bne.n	8018906 <floor+0xbe>
 80188fe:	3101      	adds	r1, #1
 8018900:	ea20 0002 	bic.w	r0, r0, r2
 8018904:	e7c0      	b.n	8018888 <floor+0x40>
 8018906:	2401      	movs	r4, #1
 8018908:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801890c:	fa04 f303 	lsl.w	r3, r4, r3
 8018910:	4418      	add	r0, r3
 8018912:	4285      	cmp	r5, r0
 8018914:	bf88      	it	hi
 8018916:	1909      	addhi	r1, r1, r4
 8018918:	e7f2      	b.n	8018900 <floor+0xb8>
 801891a:	2000      	movs	r0, #0
 801891c:	4601      	mov	r1, r0
 801891e:	e7b3      	b.n	8018888 <floor+0x40>
 8018920:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018924:	e7b0      	b.n	8018888 <floor+0x40>
 8018926:	bf00      	nop
 8018928:	8800759c 	.word	0x8800759c
 801892c:	7e37e43c 	.word	0x7e37e43c
 8018930:	bff00000 	.word	0xbff00000
 8018934:	000fffff 	.word	0x000fffff

08018938 <_init>:
 8018938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801893a:	bf00      	nop
 801893c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801893e:	bc08      	pop	{r3}
 8018940:	469e      	mov	lr, r3
 8018942:	4770      	bx	lr

08018944 <_fini>:
 8018944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018946:	bf00      	nop
 8018948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801894a:	bc08      	pop	{r3}
 801894c:	469e      	mov	lr, r3
 801894e:	4770      	bx	lr
