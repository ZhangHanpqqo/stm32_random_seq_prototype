
genera_brain_templt_re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fa8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002068  08017240  08017240  00027240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080192a8  080192a8  000292a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080192b0  080192b0  000292b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080192b4  080192b4  000292b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080192b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002074  2000008c  08019344  0003008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002100  08019344  00032100  2**0
                  ALLOC
  9 .RAM_D1       0007a120  24000000  24000000  00040000  2**5
                  ALLOC
 10 .RAM_D2       00000908  30000000  30000000  00040000  2**5
                  ALLOC
 11 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046774  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008fab  00000000  00000000  00076871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035f8  00000000  00000000  0007f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a04  00000000  00000000  00082e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000460c9  00000000  00000000  0008581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d765  00000000  00000000  000cb8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00195422  00000000  00000000  0011904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ea30  00000000  00000000  002ae46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  002bce9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017228 	.word	0x08017228

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000090 	.word	0x20000090
 80002d4:	08017228 	.word	0x08017228

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <tRamp_initToPool>:
{
    tRamp_initToPool(r, time, samples_per_tick, &leaf->mempool);
}

void    tRamp_initToPool    (tRamp* const r, Lfloat time, int samples_per_tick, tMempool* const mp)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80005e0:	6079      	str	r1, [r7, #4]
 80005e2:	603a      	str	r2, [r7, #0]
    _tMempool* m = *mp;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	61fb      	str	r3, [r7, #28]
    _tRamp* ramp = *r = (_tRamp*) mpool_alloc(sizeof(_tRamp), m);
 80005ea:	69f9      	ldr	r1, [r7, #28]
 80005ec:	2028      	movs	r0, #40	; 0x28
 80005ee:	f000 f932 	bl	8000856 <mpool_alloc>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	61bb      	str	r3, [r7, #24]
    ramp->mempool = m;
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
    
    LEAF* leaf = ramp->mempool->leaf;
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	617b      	str	r3, [r7, #20]
    
    ramp->sampleRate = leaf->sampleRate;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	609a      	str	r2, [r3, #8]
    ramp->inv_sr_ms = 1.0f/(ramp->sampleRate*0.001f);
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	edd3 7a02 	vldr	s15, [r3, #8]
 800061a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80006dc <tRamp_initToPool+0x108>
 800061e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	edc3 7a03 	vstr	s15, [r3, #12]
    ramp->minimum_time = ramp->inv_sr_ms * samples_per_tick;
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	ed93 7a03 	vldr	s14, [r3, #12]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	edc3 7a04 	vstr	s15, [r3, #16]
    ramp->curr = 0.0f;
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
    ramp->dest = 0.0f;
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
    
    if (time < ramp->minimum_time)
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000660:	ed97 7a02 	vldr	s14, [r7, #8]
 8000664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066c:	d504      	bpl.n	8000678 <tRamp_initToPool+0xa4>
    {
        ramp->time = ramp->minimum_time;
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	691a      	ldr	r2, [r3, #16]
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	61da      	str	r2, [r3, #28]
 8000676:	e002      	b.n	800067e <tRamp_initToPool+0xaa>
    }
    else
    {
        ramp->time = time;
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	61da      	str	r2, [r3, #28]
    }
    ramp->samples_per_tick = samples_per_tick;
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
    ramp->factor = (1.0f / ramp->time) * ramp->inv_sr_ms * (Lfloat)ramp->samples_per_tick;
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	edd3 7a07 	vldr	s15, [r3, #28]
 800068a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800068e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	edd3 7a03 	vldr	s15, [r3, #12]
 8000698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	edc3 7a08 	vstr	s15, [r3, #32]
    ramp->inc = (ramp->dest - ramp->curr) * ramp->factor;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80006be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80006c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	3a83126f 	.word	0x3a83126f

080006e0 <tRamp_setDest>:
    r->inc = (r->dest - r->curr) * r->factor;

}

void     tRamp_setDest(tRamp* const ramp, Lfloat dest)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	ed87 0a00 	vstr	s0, [r7]
    _tRamp* r = *ramp;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
    r->dest = dest;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	619a      	str	r2, [r3, #24]
    r->inc = (r->dest - r->curr) * r->factor;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	edd3 7a05 	vldr	s15, [r3, #20]
 8000704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	edd3 7a08 	vldr	s15, [r3, #32]
 800070e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <tRamp_tick>:
    r->curr = val;
    r->inc = (r->dest - r->curr) * r->factor;
}

Lfloat   tRamp_tick(tRamp* const ramp)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    _tRamp* r = *ramp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
    
    r->curr += r->inc;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	ed93 7a05 	vldr	s14, [r3, #20]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	edd3 7a01 	vldr	s15, [r3, #4]
 800073e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	edc3 7a05 	vstr	s15, [r3, #20]
    
    if (((r->curr >= r->dest) && (r->inc > 0.0f)) || ((r->curr <= r->dest) && (r->inc < 0.0f)))
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	ed93 7a05 	vldr	s14, [r3, #20]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	edd3 7a06 	vldr	s15, [r3, #24]
 8000754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	db07      	blt.n	800076e <tRamp_tick+0x4a>
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	edd3 7a01 	vldr	s15, [r3, #4]
 8000764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076c:	dc12      	bgt.n	8000794 <tRamp_tick+0x70>
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	ed93 7a05 	vldr	s14, [r3, #20]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	edd3 7a06 	vldr	s15, [r3, #24]
 800077a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000782:	d80f      	bhi.n	80007a4 <tRamp_tick+0x80>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	edd3 7a01 	vldr	s15, [r3, #4]
 800078a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000792:	d507      	bpl.n	80007a4 <tRamp_tick+0x80>
    {
        r->inc = 0.0f;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
        r->curr=r->dest;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	615a      	str	r2, [r3, #20]
    }
    
    return r->curr;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	ee07 3a90 	vmov	s15, r3
}
 80007ac:	eeb0 0a67 	vmov.f32	s0, s15
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 80007ba:	b590      	push	{r4, r7, lr}
 80007bc:	b087      	sub	sp, #28
 80007be:	af02      	add	r7, sp, #8
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685c      	ldr	r4, [r3, #4]
 80007ca:	2010      	movs	r0, #16
 80007cc:	f000 f902 	bl	80009d4 <mpool_align>
 80007d0:	4603      	mov	r3, r0
 80007d2:	6363      	str	r3, [r4, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	609a      	str	r2, [r3, #8]
    pool->usize  = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
    if (size < pool->leaf->header_size)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d203      	bcs.n	80007f4 <mpool_create+0x3a>
    {
        size = pool->leaf->header_size;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	60bb      	str	r3, [r7, #8]
    }
    pool->msize  = size;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	611a      	str	r2, [r3, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6898      	ldr	r0, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000808:	1ad2      	subs	r2, r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4613      	mov	r3, r2
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	f000 f8ea 	bl	80009f0 <create_node>
 800081c:	4602      	mov	r2, r0
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	615a      	str	r2, [r3, #20]
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <leaf_pool_init>:


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	331c      	adds	r3, #28
 800083a:	461a      	mov	r2, r3
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f7ff ffbb 	bl	80007ba <mpool_create>
    
    leaf->mempool = &leaf->_internal_mempool;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f103 021c 	add.w	r2, r3, #28
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	619a      	str	r2, [r3, #24]
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <mpool_alloc>:

/**
 * allocate memory from memory pool
 */
char* mpool_alloc(size_t asize, _tMempool* pool)
{
 8000856:	b590      	push	{r4, r7, lr}
 8000858:	b08d      	sub	sp, #52	; 0x34
 800085a:	af02      	add	r7, sp, #8
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
    pool->leaf->allocCount++;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000866:	3201      	adds	r2, #1
 8000868:	649a      	str	r2, [r3, #72]	; 0x48
        memset(temp, 0, asize);
    }
    return temp;
#else
    // If the head is NULL, the mempool is full
    if (pool->head == NULL)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d116      	bne.n	80008a0 <mpool_alloc+0x4a>
    {
        if ((pool->msize - pool->usize) > asize)
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	691a      	ldr	r2, [r3, #16]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d206      	bcs.n	8000890 <mpool_alloc+0x3a>
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2101      	movs	r1, #1
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa43 	bl	8000d14 <LEAF_internalErrorCallback>
 800088e:	e005      	b.n	800089c <mpool_alloc+0x46>
        }
        else
        {
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa3c 	bl	8000d14 <LEAF_internalErrorCallback>
        }
        return NULL;
 800089c:	2300      	movs	r3, #0
 800089e:	e095      	b.n	80009cc <mpool_alloc+0x176>
    }
    
    // Should we alloc the first block large enough or check all blocks and pick the one closest in size?
    size_t size_to_alloc = mpool_align(asize);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f897 	bl	80009d4 <mpool_align>
 80008a6:	61b8      	str	r0, [r7, #24]
    mpool_node_t* node_to_alloc = pool->head;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Traverse the free list for a large enough block
    while (node_to_alloc->size < size_to_alloc)
 80008ae:	e01c      	b.n	80008ea <mpool_alloc+0x94>
    {
        node_to_alloc = node_to_alloc->next;
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
        
        // If we reach the end of the free list, there
        // are no blocks large enough, return NULL
        if (node_to_alloc == NULL)
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d116      	bne.n	80008ea <mpool_alloc+0x94>
        {
            if ((pool->msize - pool->usize) > asize)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d206      	bcs.n	80008da <mpool_alloc+0x84>
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa1e 	bl	8000d14 <LEAF_internalErrorCallback>
 80008d8:	e005      	b.n	80008e6 <mpool_alloc+0x90>
            }
            else
            {
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fa17 	bl	8000d14 <LEAF_internalErrorCallback>
            }
            return NULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e070      	b.n	80009cc <mpool_alloc+0x176>
    while (node_to_alloc->size < size_to_alloc)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8dd      	bhi.n	80008b0 <mpool_alloc+0x5a>
        }
    }
    
    // Create a new node after the node to be allocated if there is enough space
    mpool_node_t* new_node;
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	617b      	str	r3, [r7, #20]
    node_to_alloc->size = size_to_alloc;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	60da      	str	r2, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	429a      	cmp	r2, r3
 800090e:	d924      	bls.n	800095a <mpool_alloc+0x104>
    {
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	613b      	str	r3, [r7, #16]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	441a      	add	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4413      	add	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        new_node = create_node(&pool->mpool[offset],
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	18d0      	adds	r0, r2, r3
                               node_to_alloc->next,
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	6859      	ldr	r1, [r3, #4]
                               node_to_alloc->prev,
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	689c      	ldr	r4, [r3, #8]
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        new_node = create_node(&pool->mpool[offset],
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	1ad2      	subs	r2, r2, r3
                               leftover - pool->leaf->header_size, pool->leaf->header_size);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800094a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	4622      	mov	r2, r4
 8000952:	f000 f84d 	bl	80009f0 <create_node>
 8000956:	6238      	str	r0, [r7, #32]
 8000958:	e008      	b.n	800096c <mpool_alloc+0x116>
    }
    else
    {
        // Add any leftover space to the allocated node to avoid fragmentation
        node_to_alloc->size += leftover;
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	68da      	ldr	r2, [r3, #12]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	441a      	add	r2, r3
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	60da      	str	r2, [r3, #12]
        
        new_node = node_to_alloc->next;
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	623b      	str	r3, [r7, #32]
    }
    
    // Update the head if we are allocating the first node of the free list
    // The head will be NULL if there is no space left
    if (pool->head == node_to_alloc)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000972:	429a      	cmp	r2, r3
 8000974:	d102      	bne.n	800097c <mpool_alloc+0x126>
    {
        pool->head = new_node;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	6a3a      	ldr	r2, [r7, #32]
 800097a:	615a      	str	r2, [r3, #20]
    }
    
    // Remove the allocated node from the free list
    delink_node(node_to_alloc);
 800097c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800097e:	f000 f855 	bl	8000a2c <delink_node>
    
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	440b      	add	r3, r1
 8000992:	441a      	add	r2, r3
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	60da      	str	r2, [r3, #12]
    
    if (pool->leaf->clearOnAllocation > 0)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	dd12      	ble.n	80009c8 <mpool_alloc+0x172>
    {
        char* new_pool = (char*)node_to_alloc->pool;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	e007      	b.n	80009be <mpool_alloc+0x168>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3301      	adds	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f2      	bhi.n	80009ae <mpool_alloc+0x158>
    }
    
    // Return the pool of the allocated node;
    return node_to_alloc->pool;
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	681b      	ldr	r3, [r3, #0]
#endif
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	372c      	adds	r7, #44	; 0x2c
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <mpool_align>:
}

/**
 * align byte boundary
 */
static inline size_t mpool_align(size_t size) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3307      	adds	r3, #7
 80009e0:	f023 0307 	bic.w	r3, r3, #7
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <create_node>:

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	603b      	str	r3, [r7, #0]
    mpool_node_t* node = (mpool_node_t*)block_location;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	617b      	str	r3, [r7, #20]
    node->pool = block_location + header_size;
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	441a      	add	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
    node->next = next;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	605a      	str	r2, [r3, #4]
    node->prev = prev;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	609a      	str	r2, [r3, #8]
    node->size = size;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	60da      	str	r2, [r3, #12]
    return node;
 8000a1e:	697b      	ldr	r3, [r7, #20]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <delink_node>:

static inline void delink_node(mpool_node_t* node)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    // If there is a node after the node to remove
    if (node->next != NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <delink_node+0x1a>
    {
        // Close the link
        node->next->prev = node->prev;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6892      	ldr	r2, [r2, #8]
 8000a44:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <delink_node+0x2c>
    {
        // Close the link
        node->prev->next = node->next;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6852      	ldr	r2, [r2, #4]
 8000a56:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	3318      	adds	r3, #24
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f000 f804 	bl	8000a94 <tMempool_initToPool>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
    _tMempool* mm = *mem;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	617b      	str	r3, [r7, #20]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	2018      	movs	r0, #24
 8000aac:	f7ff fed3 	bl	8000856 <mpool_alloc>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
    m->leaf = mm->leaf;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	605a      	str	r2, [r3, #4]
    
    mpool_create (memory, size, m);
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fe76 	bl	80007ba <mpool_create>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    _tMempool* m = *mp;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	617b      	str	r3, [r7, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8000ae8:	6979      	ldr	r1, [r7, #20]
 8000aea:	2018      	movs	r0, #24
 8000aec:	f7ff feb3 	bl	8000856 <mpool_alloc>
 8000af0:	4602      	mov	r2, r0
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
    c->mempool = m;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]
    LEAF* leaf = c->mempool->leaf;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	60fb      	str	r3, [r7, #12]
    
    c->inc      =  0;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    c->phase    =  0;
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b1c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000b3c <tCycle_initToPool+0x64>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	edc3 7a04 	vstr	s15, [r3, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000b30:	615a      	str	r2, [r3, #20]
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	4f800000 	.word	0x4f800000

08000b40 <tCycle_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    _tCycle* c = *cy;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	61fb      	str	r3, [r7, #28]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	6892      	ldr	r2, [r2, #8]
 8000b56:	441a      	add	r2, r3
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	605a      	str	r2, [r3, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	61bb      	str	r3, [r7, #24]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8000b6c:	617b      	str	r3, [r7, #20]
    
    samp0 = __leaf_table_sinewave[idx];
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <tCycle_tick+0x8c>)
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	613b      	str	r3, [r7, #16]
    idx = (idx + 1) & c->mask;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
    samp1 = __leaf_table_sinewave[idx];
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <tCycle_tick+0x8c>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8000b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000bd0 <tCycle_tick+0x90>
 8000bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	08017248 	.word	0x08017248
 8000bd0:	35000004 	.word	0x35000004

08000bd4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	ed87 0a00 	vstr	s0, [r7]
    _tCycle* c = *cy;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	60da      	str	r2, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	ed93 7a04 	vldr	s14, [r3, #16]
 8000bf2:	edd7 7a00 	vldr	s15, [r7]
 8000bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfe:	ee17 2a90 	vmov	r2, s15
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	609a      	str	r2, [r3, #8]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b088      	sub	sp, #32
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	60f8      	str	r0, [r7, #12]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	72fb      	strb	r3, [r7, #11]
    _tMempool* m = *mp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	61fb      	str	r3, [r7, #28]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8000c26:	69f9      	ldr	r1, [r7, #28]
 8000c28:	2018      	movs	r0, #24
 8000c2a:	f7ff fe14 	bl	8000856 <mpool_alloc>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
    n->mempool = m;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	601a      	str	r2, [r3, #0]
    LEAF* leaf = n->mempool->leaf;
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	617b      	str	r3, [r7, #20]
    
    n->type = type;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	7afa      	ldrb	r2, [r7, #11]
 8000c4c:	711a      	strb	r2, [r3, #4]
    n->rand = leaf->random;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	615a      	str	r2, [r3, #20]
}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <LEAF_init>:
#include "../leaf.h"

#endif

void LEAF_init(LEAF* const leaf, Lfloat sr, char* memory, size_t memorysize, Lfloat(*random)(void))
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6178      	str	r0, [r7, #20]
 8000c68:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c6c:	60f9      	str	r1, [r7, #12]
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	607b      	str	r3, [r7, #4]
    leaf->_internal_mempool.leaf = leaf;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	621a      	str	r2, [r3, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	68f9      	ldr	r1, [r7, #12]
 8000c7c:	6978      	ldr	r0, [r7, #20]
 8000c7e:	f7ff fdd4 	bl	800082a <leaf_pool_init>
    
    leaf->sampleRate = sr;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	601a      	str	r2, [r3, #0]
    
    leaf->invSampleRate = 1.0f/sr;
 8000c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	edc3 7a01 	vstr	s15, [r3, #4]
    
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ca0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000cf4 <LEAF_init+0x94>
 8000ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	edc3 7a03 	vstr	s15, [r3, #12]

    leaf->random = random;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
    
    leaf->clearOnAllocation = 0;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
    
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LEAF_init+0x98>)
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	e009      	b.n	8000cda <LEAF_init+0x7a>
        leaf->errorState[i] = 0;
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	330e      	adds	r3, #14
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	ddf2      	ble.n	8000cc6 <LEAF_init+0x66>
    
    leaf->allocCount = 0;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	649a      	str	r2, [r3, #72]	; 0x48
    
    leaf->freeCount = 0;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40c90fdb 	.word	0x40c90fdb
 8000cf8:	08000cfd 	.word	0x08000cfd

08000cfc <LEAF_defaultErrorCallback>:
{
    return leaf->sampleRate;
}

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
    leaf->errorState[whichone] = 1;
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	330e      	adds	r3, #14
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d32:	78fa      	ldrb	r2, [r7, #3]
 8000d34:	4611      	mov	r1, r2
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	4798      	blx	r3
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <MIDI_Application>:
 * @brief  Main routine for MIDI application, looped in main.c
 * @param  None
 * @retval none
 */
void MIDI_Application(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	if(Appli_state == APPLICATION_READY)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MIDI_Application+0x54>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d111      	bne.n	8000d74 <MIDI_Application+0x30>
	{
		if(MIDI_Appli_state == MIDI_APPLICATION_READY)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MIDI_Application+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d10d      	bne.n	8000d74 <MIDI_Application+0x30>
		{

			USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // just once at the beginning, start the first reception
 8000d58:	2240      	movs	r2, #64	; 0x40
 8000d5a:	4911      	ldr	r1, [pc, #68]	; (8000da0 <MIDI_Application+0x5c>)
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MIDI_Application+0x60>)
 8000d5e:	f003 fa86 	bl	800426e <USBH_MIDI_Receive>
			MIDI_Appli_state = MIDI_APPLICATION_RUNNING;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MIDI_Application+0x58>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MIDI_Application+0x64>)
 8000d70:	f008 f8dc 	bl	8008f2c <HAL_GPIO_WritePin>
		}
	}
	if(Appli_state == APPLICATION_DISCONNECT)
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MIDI_Application+0x54>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d10b      	bne.n	8000d94 <MIDI_Application+0x50>
	{
		MIDI_Appli_state = MIDI_APPLICATION_READY;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MIDI_Application+0x58>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	701a      	strb	r2, [r3, #0]
		USBH_MIDI_Stop(&hUsbHostFS);
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <MIDI_Application+0x60>)
 8000d84:	f003 fa0d 	bl	80041a2 <USBH_MIDI_Stop>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MIDI_Application+0x64>)
 8000d90:	f008 f8cc 	bl	8008f2c <HAL_GPIO_WritePin>
	}
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20001c9c 	.word	0x20001c9c
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	30000000 	.word	0x30000000
 8000da4:	30000460 	.word	0x30000460
 8000da8:	58020400 	.word	0x58020400

08000dac <ProcessReceivedMidiDatas>:
volatile midi_package_t pack;
/*-----------------------------------------------------------------------------*/
void ProcessReceivedMidiDatas(uint32_t myLength)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint16_t numberOfPackets;
	uint8_t *ptr = MIDI_RX_Buffer;
 8000db4:	4bab      	ldr	r3, [pc, #684]	; (8001064 <ProcessReceivedMidiDatas+0x2b8>)
 8000db6:	60bb      	str	r3, [r7, #8]


	numberOfPackets = myLength >> 2; //each USB midi package is 4 bytes long
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	81fb      	strh	r3, [r7, #14]

	if (numberOfPackets != 0)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 814a 	beq.w	800105a <ProcessReceivedMidiDatas+0x2ae>
	{
		while(numberOfPackets--)
 8000dc6:	e142      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
		{
			pack.cin_cable = *ptr ; ptr++ ;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	4ba6      	ldr	r3, [pc, #664]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
			pack.evnt0 = *ptr ; ptr++ ;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	781a      	ldrb	r2, [r3, #0]
 8000dda:	4ba3      	ldr	r3, [pc, #652]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000ddc:	705a      	strb	r2, [r3, #1]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
			pack.evnt1 = *ptr ; ptr++ ;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b9f      	ldr	r3, [pc, #636]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000dea:	709a      	strb	r2, [r3, #2]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3301      	adds	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
			pack.evnt2 = *ptr ; ptr++ ;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b9c      	ldr	r3, [pc, #624]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000df8:	70da      	strb	r2, [r3, #3]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]

			// Handle MIDI messages
			switch(pack.evnt0)
 8000e00:	4b99      	ldr	r3, [pc, #612]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2bf0      	cmp	r3, #240	; 0xf0
 8000e08:	f000 8120 	beq.w	800104c <ProcessReceivedMidiDatas+0x2a0>
 8000e0c:	2bf0      	cmp	r3, #240	; 0xf0
 8000e0e:	f300 811e 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e12:	2be0      	cmp	r3, #224	; 0xe0
 8000e14:	f000 811b 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e18:	2be0      	cmp	r3, #224	; 0xe0
 8000e1a:	f300 8118 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e1e:	2bd0      	cmp	r3, #208	; 0xd0
 8000e20:	f000 8115 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e24:	2bd0      	cmp	r3, #208	; 0xd0
 8000e26:	f300 8112 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e2c:	f000 810f 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e30:	2bc0      	cmp	r3, #192	; 0xc0
 8000e32:	f300 810c 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e36:	2bb0      	cmp	r3, #176	; 0xb0
 8000e38:	d02f      	beq.n	8000e9a <ProcessReceivedMidiDatas+0xee>
 8000e3a:	2bb0      	cmp	r3, #176	; 0xb0
 8000e3c:	f300 8107 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e40:	2ba0      	cmp	r3, #160	; 0xa0
 8000e42:	f000 8104 	beq.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e46:	2ba0      	cmp	r3, #160	; 0xa0
 8000e48:	f300 8101 	bgt.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d002      	beq.n	8000e56 <ProcessReceivedMidiDatas+0xaa>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d011      	beq.n	8000e78 <ProcessReceivedMidiDatas+0xcc>
 8000e54:	e0fb      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
			{
				case (0x80): // Note Off
					key = pack.evnt1;
 8000e56:	4b84      	ldr	r3, [pc, #528]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b83      	ldr	r3, [pc, #524]	; (800106c <ProcessReceivedMidiDatas+0x2c0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000e60:	4b81      	ldr	r3, [pc, #516]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b82      	ldr	r3, [pc, #520]	; (8001070 <ProcessReceivedMidiDatas+0x2c4>)
 8000e68:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	4880      	ldr	r0, [pc, #512]	; (8001074 <ProcessReceivedMidiDatas+0x2c8>)
 8000e72:	f008 f85b 	bl	8008f2c <HAL_GPIO_WritePin>
					//noteOff(key, velocity);

					break;
 8000e76:	e0ea      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
				case (0x90): // Note On
					key = pack.evnt1;
 8000e78:	4b7b      	ldr	r3, [pc, #492]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <ProcessReceivedMidiDatas+0x2c0>)
 8000e80:	701a      	strb	r2, [r3, #0]
					velocity = pack.evnt2;
 8000e82:	4b79      	ldr	r3, [pc, #484]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e84:	78db      	ldrb	r3, [r3, #3]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b79      	ldr	r3, [pc, #484]	; (8001070 <ProcessReceivedMidiDatas+0x2c4>)
 8000e8a:	701a      	strb	r2, [r3, #0]

					//noteOn(key, velocity);
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	4878      	ldr	r0, [pc, #480]	; (8001074 <ProcessReceivedMidiDatas+0x2c8>)
 8000e94:	f008 f84a 	bl	8008f2c <HAL_GPIO_WritePin>

					break;
 8000e98:	e0d9      	b.n	800104e <ProcessReceivedMidiDatas+0x2a2>
				case (0xA0):
					break;
				case (0xB0):
					ctrl = pack.evnt1;
 8000e9a:	4b73      	ldr	r3, [pc, #460]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000e9c:	789b      	ldrb	r3, [r3, #2]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b75      	ldr	r3, [pc, #468]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000ea2:	701a      	strb	r2, [r3, #0]
					data = pack.evnt2;
 8000ea4:	4b70      	ldr	r3, [pc, #448]	; (8001068 <ProcessReceivedMidiDatas+0x2bc>)
 8000ea6:	78db      	ldrb	r3, [r3, #3]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <ProcessReceivedMidiDatas+0x2d0>)
 8000eac:	701a      	strb	r2, [r3, #0]
					CCs[ctrl] = data;
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b71      	ldr	r3, [pc, #452]	; (800107c <ProcessReceivedMidiDatas+0x2d0>)
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	4b71      	ldr	r3, [pc, #452]	; (8001080 <ProcessReceivedMidiDatas+0x2d4>)
 8000eba:	5499      	strb	r1, [r3, r2]
					switch(ctrl)
 8000ebc:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <ProcessReceivedMidiDatas+0x2cc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	2b5e      	cmp	r3, #94	; 0x5e
 8000ec4:	f200 80c3 	bhi.w	800104e <ProcessReceivedMidiDatas+0x2a2>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <ProcessReceivedMidiDatas+0x124>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	0800104f 	.word	0x0800104f
 8000ed4:	0800104f 	.word	0x0800104f
 8000ed8:	0800104f 	.word	0x0800104f
 8000edc:	0800104f 	.word	0x0800104f
 8000ee0:	0800104f 	.word	0x0800104f
 8000ee4:	0800104f 	.word	0x0800104f
 8000ee8:	0800104f 	.word	0x0800104f
 8000eec:	0800104f 	.word	0x0800104f
 8000ef0:	0800104f 	.word	0x0800104f
 8000ef4:	0800104f 	.word	0x0800104f
 8000ef8:	0800104f 	.word	0x0800104f
 8000efc:	0800104f 	.word	0x0800104f
 8000f00:	0800104f 	.word	0x0800104f
 8000f04:	0800104f 	.word	0x0800104f
 8000f08:	0800104f 	.word	0x0800104f
 8000f0c:	0800104f 	.word	0x0800104f
 8000f10:	0800104f 	.word	0x0800104f
 8000f14:	0800104f 	.word	0x0800104f
 8000f18:	0800104f 	.word	0x0800104f
 8000f1c:	0800104f 	.word	0x0800104f
 8000f20:	0800104f 	.word	0x0800104f
 8000f24:	0800104f 	.word	0x0800104f
 8000f28:	0800104f 	.word	0x0800104f
 8000f2c:	0800104f 	.word	0x0800104f
 8000f30:	0800104f 	.word	0x0800104f
 8000f34:	0800104f 	.word	0x0800104f
 8000f38:	0800104f 	.word	0x0800104f
 8000f3c:	0800104f 	.word	0x0800104f
 8000f40:	0800104f 	.word	0x0800104f
 8000f44:	0800104f 	.word	0x0800104f
 8000f48:	0800104f 	.word	0x0800104f
 8000f4c:	0800104f 	.word	0x0800104f
 8000f50:	0800104f 	.word	0x0800104f
 8000f54:	0800104f 	.word	0x0800104f
 8000f58:	0800104f 	.word	0x0800104f
 8000f5c:	0800104f 	.word	0x0800104f
 8000f60:	0800104f 	.word	0x0800104f
 8000f64:	0800104f 	.word	0x0800104f
 8000f68:	0800104f 	.word	0x0800104f
 8000f6c:	0800104f 	.word	0x0800104f
 8000f70:	0800104f 	.word	0x0800104f
 8000f74:	0800104f 	.word	0x0800104f
 8000f78:	0800104f 	.word	0x0800104f
 8000f7c:	0800104f 	.word	0x0800104f
 8000f80:	0800104f 	.word	0x0800104f
 8000f84:	0800104f 	.word	0x0800104f
 8000f88:	0800104f 	.word	0x0800104f
 8000f8c:	0800104f 	.word	0x0800104f
 8000f90:	0800104f 	.word	0x0800104f
 8000f94:	0800104f 	.word	0x0800104f
 8000f98:	0800104f 	.word	0x0800104f
 8000f9c:	0800104f 	.word	0x0800104f
 8000fa0:	0800104f 	.word	0x0800104f
 8000fa4:	0800104f 	.word	0x0800104f
 8000fa8:	0800104f 	.word	0x0800104f
 8000fac:	0800104f 	.word	0x0800104f
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	0800104f 	.word	0x0800104f
 8000fe8:	0800104f 	.word	0x0800104f
 8000fec:	0800104f 	.word	0x0800104f
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	0800104f 	.word	0x0800104f
 8000ff8:	0800104f 	.word	0x0800104f
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800104f 	.word	0x0800104f
 8001004:	0800104f 	.word	0x0800104f
 8001008:	0800104f 	.word	0x0800104f
 800100c:	0800104f 	.word	0x0800104f
 8001010:	0800104f 	.word	0x0800104f
 8001014:	0800104f 	.word	0x0800104f
 8001018:	0800104f 	.word	0x0800104f
 800101c:	0800104f 	.word	0x0800104f
 8001020:	0800104f 	.word	0x0800104f
 8001024:	0800104f 	.word	0x0800104f
 8001028:	0800104f 	.word	0x0800104f
 800102c:	0800104f 	.word	0x0800104f
 8001030:	0800104f 	.word	0x0800104f
 8001034:	0800104f 	.word	0x0800104f
 8001038:	0800104f 	.word	0x0800104f
 800103c:	0800104f 	.word	0x0800104f
 8001040:	0800104f 	.word	0x0800104f
 8001044:	0800104f 	.word	0x0800104f
 8001048:	0800104f 	.word	0x0800104f
					break;
				case (0xE0): // Pitch Bend
					//pitchBend((pack.evnt1) + (pack.evnt2 << 7));
					break;
				case (0xF0):
					break;
 800104c:	bf00      	nop
		while(numberOfPackets--)
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	81fa      	strh	r2, [r7, #14]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aeb7 	bne.w	8000dc8 <ProcessReceivedMidiDatas+0x1c>
			}
		}
	}
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	30000000 	.word	0x30000000
 8001068:	2000012c 	.word	0x2000012c
 800106c:	200000a8 	.word	0x200000a8
 8001070:	200000a9 	.word	0x200000a9
 8001074:	58020000 	.word	0x58020000
 8001078:	200000aa 	.word	0x200000aa
 800107c:	200000ab 	.word	0x200000ab
 8001080:	200000ac 	.word	0x200000ac

08001084 <USBH_MIDI_ReceiveCallback>:
 * @brief  MIDI data receive callback.
 * @param  phost: Host handle
 * @retval None
 */
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost, uint32_t myLength)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	ProcessReceivedMidiDatas(myLength);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff fe8c 	bl	8000dac <ProcessReceivedMidiDatas>
	USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE); // start a new reception
 8001094:	2240      	movs	r2, #64	; 0x40
 8001096:	4904      	ldr	r1, [pc, #16]	; (80010a8 <USBH_MIDI_ReceiveCallback+0x24>)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <USBH_MIDI_ReceiveCallback+0x28>)
 800109a:	f003 f8e8 	bl	800426e <USBH_MIDI_Receive>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	30000000 	.word	0x30000000
 80010ac:	30000460 	.word	0x30000460

080010b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d4:	4b64      	ldr	r3, [pc, #400]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010d6:	4a65      	ldr	r2, [pc, #404]	; (800126c <MX_ADC1_Init+0x1bc>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010dc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010e2:	4b61      	ldr	r3, [pc, #388]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010e8:	4b5f      	ldr	r3, [pc, #380]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ee:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f4:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fa:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001102:	2208      	movs	r2, #8
 8001104:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b58      	ldr	r3, [pc, #352]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001108:	2200      	movs	r2, #0
 800110a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b56      	ldr	r3, [pc, #344]	; (8001268 <MX_ADC1_Init+0x1b8>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <MX_ADC1_Init+0x1b8>)
 800111a:	2203      	movs	r2, #3
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111e:	4b52      	ldr	r3, [pc, #328]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001126:	2200      	movs	r2, #0
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800112a:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <MX_ADC1_Init+0x1b8>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001132:	484d      	ldr	r0, [pc, #308]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001134:	f003 ff54 	bl	8004fe0 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800113e:	f001 fcf1 	bl	8002b24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4846      	ldr	r0, [pc, #280]	; (8001268 <MX_ADC1_Init+0x1b8>)
 800114e:	f005 f9d7 	bl	8006500 <HAL_ADCEx_MultiModeConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001158:	f001 fce4 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <MX_ADC1_Init+0x1c0>)
 800115e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2306      	movs	r3, #6
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001164:	2306      	movs	r3, #6
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001168:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800116c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116e:	2304      	movs	r3, #4
 8001170:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	483a      	ldr	r0, [pc, #232]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001180:	f004 fbec 	bl	800595c <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800118a:	f001 fccb 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <MX_ADC1_Init+0x1c4>)
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001192:	230c      	movs	r3, #12
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4833      	ldr	r0, [pc, #204]	; (8001268 <MX_ADC1_Init+0x1b8>)
 800119c:	f004 fbde 	bl	800595c <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011a6:	f001 fcbd 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_ADC1_Init+0x1c8>)
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ae:	2312      	movs	r3, #18
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	482c      	ldr	r0, [pc, #176]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80011b8:	f004 fbd0 	bl	800595c <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80011c2:	f001 fcaf 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_ADC1_Init+0x1cc>)
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011ca:	2318      	movs	r3, #24
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4825      	ldr	r0, [pc, #148]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80011d4:	f004 fbc2 	bl	800595c <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80011de:	f001 fca1 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <MX_ADC1_Init+0x1d0>)
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_ADC1_Init+0x1b8>)
 80011f2:	f004 fbb3 	bl	800595c <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80011fc:	f001 fc92 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_ADC1_Init+0x1d4>)
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001204:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001208:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001210:	f004 fba4 	bl	800595c <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800121a:	f001 fc83 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC1_Init+0x1d8>)
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001222:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001226:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001232:	f004 fb93 	bl	800595c <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 800123c:	f001 fc72 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_ADC1_Init+0x1dc>)
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001244:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC1_Init+0x1b8>)
 8001250:	f004 fb84 	bl	800595c <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800125a:	f001 fc63 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000130 	.word	0x20000130
 800126c:	40022000 	.word	0x40022000
 8001270:	1d500080 	.word	0x1d500080
 8001274:	0c900008 	.word	0x0c900008
 8001278:	4fb80000 	.word	0x4fb80000
 800127c:	4b840000 	.word	0x4b840000
 8001280:	3ef08000 	.word	0x3ef08000
 8001284:	3ac04000 	.word	0x3ac04000
 8001288:	10c00010 	.word	0x10c00010
 800128c:	21800100 	.word	0x21800100

08001290 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012aa:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <MX_ADC3_Init+0x128>)
 80012ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012b0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80012b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012be:	2201      	movs	r2, #1
 80012c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 5;
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012d6:	2205      	movs	r2, #5
 80012d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012dc:	2200      	movs	r2, #0
 80012de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e6:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012ec:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <MX_ADC3_Init+0x124>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <MX_ADC3_Init+0x124>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001306:	482b      	ldr	r0, [pc, #172]	; (80013b4 <MX_ADC3_Init+0x124>)
 8001308:	f003 fe6a 	bl	8004fe0 <HAL_ADC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001312:	f001 fc07 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_ADC3_Init+0x12c>)
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001326:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001328:	2304      	movs	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	481e      	ldr	r0, [pc, #120]	; (80013b4 <MX_ADC3_Init+0x124>)
 800133a:	f004 fb0f 	bl	800595c <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8001344:	f001 fbee 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001348:	230c      	movs	r3, #12
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4818      	ldr	r0, [pc, #96]	; (80013b4 <MX_ADC3_Init+0x124>)
 8001352:	f004 fb03 	bl	800595c <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800135c:	f001 fbe2 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001360:	2312      	movs	r3, #18
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <MX_ADC3_Init+0x124>)
 800136a:	f004 faf7 	bl	800595c <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001374:	f001 fbd6 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001378:	2318      	movs	r3, #24
 800137a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_ADC3_Init+0x124>)
 8001382:	f004 faeb 	bl	800595c <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 800138c:	f001 fbca 	bl	8002b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC3_Init+0x124>)
 800139c:	f004 fade 	bl	800595c <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 80013a6:	f001 fbbd 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000194 	.word	0x20000194
 80013b8:	58026000 	.word	0x58026000
 80013bc:	08600004 	.word	0x08600004

080013c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a6d      	ldr	r2, [pc, #436]	; (8001594 <HAL_ADC_MspInit+0x1d4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f040 80a3 	bne.w	800152a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013e4:	4b6c      	ldr	r3, [pc, #432]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 80013e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ea:	4a6b      	ldr	r2, [pc, #428]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 80013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4a63      	ldr	r2, [pc, #396]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b56      	ldr	r3, [pc, #344]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4b52      	ldr	r3, [pc, #328]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800145c:	2332      	movs	r3, #50	; 0x32
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001460:	2303      	movs	r3, #3
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	484b      	ldr	r0, [pc, #300]	; (800159c <HAL_ADC_MspInit+0x1dc>)
 8001470:	f007 fb94 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001474:	23ff      	movs	r3, #255	; 0xff
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4846      	ldr	r0, [pc, #280]	; (80015a0 <HAL_ADC_MspInit+0x1e0>)
 8001488:	f007 fb88 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148c:	2303      	movs	r3, #3
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001490:	2303      	movs	r3, #3
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	4841      	ldr	r0, [pc, #260]	; (80015a4 <HAL_ADC_MspInit+0x1e4>)
 80014a0:	f007 fb7c 	bl	8008b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014a6:	4a41      	ldr	r2, [pc, #260]	; (80015ac <HAL_ADC_MspInit+0x1ec>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014ac:	2209      	movs	r2, #9
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014fc:	482a      	ldr	r0, [pc, #168]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 80014fe:	f005 fa69 	bl	80069d4 <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001508:	f001 fb0c 	bl	8002b24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 8001510:	64da      	str	r2, [r3, #76]	; 0x4c
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <HAL_ADC_MspInit+0x1e8>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2012      	movs	r0, #18
 800151e:	f005 f9a8 	bl	8006872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001522:	2012      	movs	r0, #18
 8001524:	f005 f9bf 	bl	80068a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001528:	e02f      	b.n	800158a <HAL_ADC_MspInit+0x1ca>
  else if(adcHandle->Instance==ADC3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_ADC_MspInit+0x1f0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d12a      	bne.n	800158a <HAL_ADC_MspInit+0x1ca>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 800153c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_ADC_MspInit+0x1d8>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001570:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	480b      	ldr	r0, [pc, #44]	; (80015b4 <HAL_ADC_MspInit+0x1f4>)
 8001586:	f007 fb09 	bl	8008b9c <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3738      	adds	r7, #56	; 0x38
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000
 8001598:	58024400 	.word	0x58024400
 800159c:	58020800 	.word	0x58020800
 80015a0:	58020000 	.word	0x58020000
 80015a4:	58020400 	.word	0x58020400
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	40020010 	.word	0x40020010
 80015b0:	58026000 	.word	0x58026000
 80015b4:	58021400 	.word	0x58021400

080015b8 <audioInit>:
	TRUE
} BOOL;


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <audioInit+0x164>)
 80015c6:	4a56      	ldr	r2, [pc, #344]	; (8001720 <audioInit+0x168>)
 80015c8:	4956      	ldr	r1, [pc, #344]	; (8001724 <audioInit+0x16c>)
 80015ca:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001728 <audioInit+0x170>
 80015ce:	4857      	ldr	r0, [pc, #348]	; (800172c <audioInit+0x174>)
 80015d0:	f7ff fb46 	bl	8000c60 <LEAF_init>

	tMempool_init (&smallPool, smallMemory, SMALL_MEM_SIZE, &leaf);
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <audioInit+0x174>)
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4955      	ldr	r1, [pc, #340]	; (8001730 <audioInit+0x178>)
 80015dc:	4855      	ldr	r0, [pc, #340]	; (8001734 <audioInit+0x17c>)
 80015de:	f7ff fa47 	bl	8000a70 <tMempool_init>
	tMempool_init (&largePool, largeMemory, LARGE_MEM_SIZE, &leaf);
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <audioInit+0x174>)
 80015e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015e8:	4953      	ldr	r1, [pc, #332]	; (8001738 <audioInit+0x180>)
 80015ea:	4854      	ldr	r0, [pc, #336]	; (800173c <audioInit+0x184>)
 80015ec:	f7ff fa40 	bl	8000a70 <tMempool_init>

	for (int i = 0; i < 6; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	e00d      	b.n	8001612 <audioInit+0x5a>
	{
		tRamp_initToPool(&adc[i],7.0f, 1, &smallPool); //set all ramps for knobs to be 7ms ramp time and let the init function know they will be ticked every sample
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4a51      	ldr	r2, [pc, #324]	; (8001740 <audioInit+0x188>)
 80015fc:	4413      	add	r3, r2
 80015fe:	4a4d      	ldr	r2, [pc, #308]	; (8001734 <audioInit+0x17c>)
 8001600:	2101      	movs	r1, #1
 8001602:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffe4 	bl	80005d4 <tRamp_initToPool>
	for (int i = 0; i < 6; i++)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	2b05      	cmp	r3, #5
 8001616:	ddee      	ble.n	80015f6 <audioInit+0x3e>

	}
	/*ramps for the external knobs*/
	for(int i = 0; i < STEPS_MAX * 2; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	e009      	b.n	8001632 <audioInit+0x7a>
	{
		tRamp_initToPool(&adc_extern[0],7.0f, 1, &smallPool);
 800161e:	4a45      	ldr	r2, [pc, #276]	; (8001734 <audioInit+0x17c>)
 8001620:	2101      	movs	r1, #1
 8001622:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001626:	4847      	ldr	r0, [pc, #284]	; (8001744 <audioInit+0x18c>)
 8001628:	f7fe ffd4 	bl	80005d4 <tRamp_initToPool>
	for(int i = 0; i < STEPS_MAX * 2; i++)
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	3301      	adds	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b05      	cmp	r3, #5
 8001636:	ddf2      	ble.n	800161e <audioInit+0x66>
	}

	tNoise_initToPool(&noise, WhiteNoise, &smallPool);
 8001638:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <audioInit+0x17c>)
 800163a:	2100      	movs	r1, #0
 800163c:	4842      	ldr	r0, [pc, #264]	; (8001748 <audioInit+0x190>)
 800163e:	f7ff fae8 	bl	8000c12 <tNoise_initToPool>
	for (int i = 0; i < 6; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e013      	b.n	8001670 <audioInit+0xb8>
	{
		tCycle_initToPool(&mySine[i], &smallPool);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4a3f      	ldr	r2, [pc, #252]	; (800174c <audioInit+0x194>)
 800164e:	4413      	add	r3, r2
 8001650:	4938      	ldr	r1, [pc, #224]	; (8001734 <audioInit+0x17c>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fa40 	bl	8000ad8 <tCycle_initToPool>
		tCycle_setFreq(&mySine[i], 440.0f);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4a3b      	ldr	r2, [pc, #236]	; (800174c <audioInit+0x194>)
 800165e:	4413      	add	r3, r2
 8001660:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001750 <audioInit+0x198>
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fab5 	bl	8000bd4 <tCycle_setFreq>
	for (int i = 0; i < 6; i++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b05      	cmp	r3, #5
 8001674:	dde8      	ble.n	8001648 <audioInit+0x90>
	}


	HAL_Delay(10);
 8001676:	200a      	movs	r0, #10
 8001678:	f003 fa66 	bl	8004b48 <HAL_Delay>

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	e007      	b.n	8001692 <audioInit+0xda>
	{
		audioOutBuffer[i] = 0;
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <audioInit+0x19c>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2100      	movs	r1, #0
 8001688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b7f      	cmp	r3, #127	; 0x7f
 8001696:	ddf4      	ble.n	8001682 <audioInit+0xca>
	}



	HAL_Delay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f003 fa55 	bl	8004b48 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	492c      	ldr	r1, [pc, #176]	; (8001754 <audioInit+0x19c>)
 80016a2:	68b8      	ldr	r0, [r7, #8]
 80016a4:	f00d fe5e 	bl	800f364 <HAL_SAI_Transmit_DMA>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <audioInit+0x1a0>)
 80016ae:	701a      	strb	r2, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	492a      	ldr	r1, [pc, #168]	; (800175c <audioInit+0x1a4>)
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f00d ff0b 	bl	800f4d0 <HAL_SAI_Receive_DMA>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <audioInit+0x1a8>)
 80016c0:	701a      	strb	r2, [r3, #0]
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fb7a 	bl	8001dbc <AudioCodec_init>

	// init variables
	for(int i = 0; i < STEPS_MAX; i++){
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e01e      	b.n	800170c <audioInit+0x154>
		fc[i] = 0; vari[i] = 0; x[i] = 0; y[i] = 0;
 80016ce:	4a25      	ldr	r2, [pc, #148]	; (8001764 <audioInit+0x1ac>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <audioInit+0x1b0>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4a20      	ldr	r2, [pc, #128]	; (800176c <audioInit+0x1b4>)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <audioInit+0x1b8>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < STEPS_MAX; i++){
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b02      	cmp	r3, #2
 8001710:	dddd      	ble.n	80016ce <audioInit+0x116>
	}

}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	08002a61 	.word	0x08002a61
 8001720:	0007a120 	.word	0x0007a120
 8001724:	24000000 	.word	0x24000000
 8001728:	473b8000 	.word	0x473b8000
 800172c:	20001670 	.word	0x20001670
 8001730:	200002e8 	.word	0x200002e8
 8001734:	200016c0 	.word	0x200016c0
 8001738:	60000000 	.word	0x60000000
 800173c:	200016c4 	.word	0x200016c4
 8001740:	2000029c 	.word	0x2000029c
 8001744:	200002d0 	.word	0x200002d0
 8001748:	200002b4 	.word	0x200002b4
 800174c:	200002b8 	.word	0x200002b8
 8001750:	43dc0000 	.word	0x43dc0000
 8001754:	30000040 	.word	0x30000040
 8001758:	20000270 	.word	0x20000270
 800175c:	30000240 	.word	0x30000240
 8001760:	20000271 	.word	0x20000271
 8001764:	200016c8 	.word	0x200016c8
 8001768:	200016d4 	.word	0x200016d4
 800176c:	200016e0 	.word	0x200016e0
 8001770:	200016ec 	.word	0x200016ec

08001774 <audioFrame>:

void audioFrame(uint16_t buffer_offset)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af02      	add	r7, sp, #8
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
	int i;
	int32_t current_sample = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]

	frameCounter++;
 8001782:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <audioFrame+0x17c>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <audioFrame+0x17c>)
 800178c:	801a      	strh	r2, [r3, #0]
	if (frameCounter > 1)
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <audioFrame+0x17c>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d904      	bls.n	80017a0 <audioFrame+0x2c>
	{
		frameCounter = 0;
 8001796:	4b56      	ldr	r3, [pc, #344]	; (80018f0 <audioFrame+0x17c>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
		buttonCheck();
 800179c:	f000 f982 	bl	8001aa4 <buttonCheck>
	}

	/** read the inputs of the external knobs with multiplex **/
	if (count_knob < STEPS_MAX){
 80017a0:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <audioFrame+0x180>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d80f      	bhi.n	80017c8 <audioFrame+0x54>
		mux_pull_values(&x, &y, &fc, &vari, count_knob);
 80017a8:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <audioFrame+0x180>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4b52      	ldr	r3, [pc, #328]	; (80018f8 <audioFrame+0x184>)
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <audioFrame+0x188>)
 80017b2:	4953      	ldr	r1, [pc, #332]	; (8001900 <audioFrame+0x18c>)
 80017b4:	4853      	ldr	r0, [pc, #332]	; (8001904 <audioFrame+0x190>)
 80017b6:	f002 f9ed 	bl	8003b94 <mux_pull_values>
		count_knob++;
 80017ba:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <audioFrame+0x180>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <audioFrame+0x180>)
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e00a      	b.n	80017de <audioFrame+0x6a>
	}
	else{
		mux_pull_values(&x, &y, &fc, &vari, 0);
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <audioFrame+0x184>)
 80017ce:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <audioFrame+0x188>)
 80017d0:	494b      	ldr	r1, [pc, #300]	; (8001900 <audioFrame+0x18c>)
 80017d2:	484c      	ldr	r0, [pc, #304]	; (8001904 <audioFrame+0x190>)
 80017d4:	f002 f9de 	bl	8003b94 <mux_pull_values>
		count_knob = 1;
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <audioFrame+0x180>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
	//read the analog inputs and smooth them with ramps
//	for (i = 0; i < 6; i++)
//	{
//		tRamp_setDest(&adc[i], (ADC_values[i] * INV_TWO_TO_16));
//	}
	for (int j = 0; j < 3; j++)
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e029      	b.n	8001838 <audioFrame+0xc4>
	{
		tRamp_setDest(&adc[j], (x[j] * INV_TWO_TO_16));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <audioFrame+0x194>)
 80017ea:	441a      	add	r2, r3
 80017ec:	4945      	ldr	r1, [pc, #276]	; (8001904 <audioFrame+0x190>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800190c <audioFrame+0x198>
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	4610      	mov	r0, r2
 8001806:	f7fe ff6b 	bl	80006e0 <tRamp_setDest>
		tRamp_setDest(&adc[j+3], (y[j] * INV_TWO_TO_16));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3303      	adds	r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <audioFrame+0x194>)
 8001812:	441a      	add	r2, r3
 8001814:	493a      	ldr	r1, [pc, #232]	; (8001900 <audioFrame+0x18c>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800190c <audioFrame+0x198>
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	4610      	mov	r0, r2
 800182e:	f7fe ff57 	bl	80006e0 <tRamp_setDest>
	for (int j = 0; j < 3; j++)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b02      	cmp	r3, #2
 800183c:	ddd2      	ble.n	80017e4 <audioFrame+0x70>


	//if the codec isn't ready, keep the buffer as all zeros
	//otherwise, start computing audio!

	if (codecReady)
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <audioFrame+0x19c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d04f      	beq.n	80018e6 <audioFrame+0x172>
	{
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e049      	b.n	80018e0 <audioFrame+0x16c>
		{
			if ((i & 1) == 0)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11d      	bne.n	8001892 <audioFrame+0x11e>
			{
				current_sample = (int32_t)(audioTickR((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 8001856:	88fa      	ldrh	r2, [r7, #6]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4413      	add	r3, r2
 800185c:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <audioFrame+0x1a0>)
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001918 <audioFrame+0x1a4>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	f000 f8b1 	bl	80019dc <audioTickR>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800191c <audioFrame+0x1a8>
 8001882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188a:	ee17 3a90 	vmov	r3, s15
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e01c      	b.n	80018cc <audioFrame+0x158>
			}
			else
			{
				current_sample = (int32_t)(audioTickL((float) (audioInBuffer[buffer_offset + i] * INV_TWO_TO_23)) * TWO_TO_23);
 8001892:	88fa      	ldrh	r2, [r7, #6]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4413      	add	r3, r2
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <audioFrame+0x1a0>)
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001918 <audioFrame+0x1a4>
 80018aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f000 f837 	bl	8001924 <audioTickL>
 80018b6:	eef0 7a40 	vmov.f32	s15, s0
 80018ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800191c <audioFrame+0x1a8>
 80018be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c6:	ee17 3a90 	vmov	r3, s15
 80018ca:	613b      	str	r3, [r7, #16]
			}

			audioOutBuffer[buffer_offset + i] = current_sample;
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	4913      	ldr	r1, [pc, #76]	; (8001920 <audioFrame+0x1ac>)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = 0; i < (HALF_BUFFER_SIZE); i++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b3f      	cmp	r3, #63	; 0x3f
 80018e4:	ddb2      	ble.n	800184c <audioFrame+0xd8>
		}
	}
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000298 	.word	0x20000298
 80018f4:	200016f8 	.word	0x200016f8
 80018f8:	200016d4 	.word	0x200016d4
 80018fc:	200016c8 	.word	0x200016c8
 8001900:	200016ec 	.word	0x200016ec
 8001904:	200016e0 	.word	0x200016e0
 8001908:	2000029c 	.word	0x2000029c
 800190c:	377ffff6 	.word	0x377ffff6
 8001910:	20000272 	.word	0x20000272
 8001914:	30000240 	.word	0x30000240
 8001918:	34000000 	.word	0x34000000
 800191c:	4b000000 	.word	0x4b000000
 8001920:	30000040 	.word	0x30000040

08001924 <audioTickL>:
float rightIn = 0.0f;


float audioTickL(float audioIn)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	ed87 0a01 	vstr	s0, [r7, #4]

	sample = 0.0f;
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <audioTickL+0xa0>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i = i+2) // even numbered knobs (left side of board)
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e02d      	b.n	8001998 <audioTickL+0x74>
	{
		tCycle_setFreq(&mySine[i], (tRamp_tick(&adc[i]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <audioTickL+0xa4>)
 8001942:	189c      	adds	r4, r3, r2
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <audioTickL+0xa8>)
 800194a:	4413      	add	r3, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fee9 	bl	8000724 <tRamp_tick>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
 8001956:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019d0 <audioTickL+0xac>
 800195a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019d4 <audioTickL+0xb0>
 8001962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f932 	bl	8000bd4 <tCycle_setFreq>
		sample += tCycle_tick(&mySine[i]); // tick the oscillator
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <audioTickL+0xa4>)
 8001976:	4413      	add	r3, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8e1 	bl	8000b40 <tCycle_tick>
 800197e:	eeb0 7a40 	vmov.f32	s14, s0
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <audioTickL+0xa0>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <audioTickL+0xa0>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i = i+2) // even numbered knobs (left side of board)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3302      	adds	r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b05      	cmp	r3, #5
 800199c:	ddce      	ble.n	800193c <audioTickL+0x18>
	}
	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <audioTickL+0xa0>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80019d8 <audioTickL+0xb4>
 80019a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <audioTickL+0xa0>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]

	return sample;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <audioTickL+0xa0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	ee07 3a90 	vmov	s15, r3
}
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	20000294 	.word	0x20000294
 80019c8:	200002b8 	.word	0x200002b8
 80019cc:	2000029c 	.word	0x2000029c
 80019d0:	43fa0000 	.word	0x43fa0000
 80019d4:	42c80000 	.word	0x42c80000
 80019d8:	3ea8f5c3 	.word	0x3ea8f5c3

080019dc <audioTickR>:


uint32_t myCounter = 0;

float audioTickR(float audioIn)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	ed87 0a01 	vstr	s0, [r7, #4]
	rightIn = audioIn;
 80019e6:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <audioTickR+0xac>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]

	sample = 0.0f;
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <audioTickR+0xb0>)
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]



	for (int i = 0; i < 6; i = i+2) // odd numbered knobs (right side of board)
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e030      	b.n	8001a5c <audioTickR+0x80>
	{
		tCycle_setFreq(&mySine[i+1], (tRamp_tick(&adc[i+1]) * 500.0f) + 100.0f); // use knob to set frequency between 100 and 600 Hz
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <audioTickR+0xb4>)
 8001a02:	189c      	adds	r4, r3, r2
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <audioTickR+0xb8>)
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fe88 	bl	8000724 <tRamp_tick>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a98 <audioTickR+0xbc>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001a9c <audioTickR+0xc0>
 8001a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff f8d1 	bl	8000bd4 <tCycle_setFreq>
		sample += tCycle_tick(&mySine[i+1]); // tick the oscillator
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3301      	adds	r3, #1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <audioTickR+0xb4>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff f87f 	bl	8000b40 <tCycle_tick>
 8001a42:	eeb0 7a40 	vmov.f32	s14, s0
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <audioTickR+0xb0>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <audioTickR+0xb0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i = i+2) // odd numbered knobs (right side of board)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	ddcb      	ble.n	80019fa <audioTickR+0x1e>
	}
	sample *= 0.33f; // drop the gain because we've got three full volume sine waves summing here
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <audioTickR+0xb0>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001aa0 <audioTickR+0xc4>
 8001a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <audioTickR+0xb0>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]


	//sample = tNoise_tick(&noise); // or uncomment this to try white noise

	return sample;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <audioTickR+0xb0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	ee07 3a90 	vmov	s15, r3
}
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	200016fc 	.word	0x200016fc
 8001a8c:	20000294 	.word	0x20000294
 8001a90:	200002b8 	.word	0x200002b8
 8001a94:	2000029c 	.word	0x2000029c
 8001a98:	43fa0000 	.word	0x43fa0000
 8001a9c:	42c80000 	.word	0x42c80000
 8001aa0:	3ea8f5c3 	.word	0x3ea8f5c3

08001aa4 <buttonCheck>:


uint8_t LED_States[3] = {0,0,0};
void buttonCheck(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
	buttonValues[0] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
 8001aaa:	2140      	movs	r1, #64	; 0x40
 8001aac:	4858      	ldr	r0, [pc, #352]	; (8001c10 <buttonCheck+0x16c>)
 8001aae:	f007 fa25 	bl	8008efc <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <buttonCheck+0x170>)
 8001ac2:	701a      	strb	r2, [r3, #0]
	buttonValues[1] = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_7);
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	4852      	ldr	r0, [pc, #328]	; (8001c10 <buttonCheck+0x16c>)
 8001ac8:	f007 fa18 	bl	8008efc <HAL_GPIO_ReadPin>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <buttonCheck+0x170>)
 8001adc:	705a      	strb	r2, [r3, #1]
	buttonValues[2] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001ade:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae2:	484d      	ldr	r0, [pc, #308]	; (8001c18 <buttonCheck+0x174>)
 8001ae4:	f007 fa0a 	bl	8008efc <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <buttonCheck+0x170>)
 8001af8:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e044      	b.n	8001b8a <buttonCheck+0xe6>
	{
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] < 10))
 8001b00:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <buttonCheck+0x170>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4944      	ldr	r1, [pc, #272]	; (8001c1c <buttonCheck+0x178>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	440b      	add	r3, r1
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d00e      	beq.n	8001b32 <buttonCheck+0x8e>
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <buttonCheck+0x17c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d808      	bhi.n	8001b32 <buttonCheck+0x8e>
	  {
		  buttonCounters[i]++;
 8001b20:	4a3f      	ldr	r2, [pc, #252]	; (8001c20 <buttonCheck+0x17c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	493d      	ldr	r1, [pc, #244]	; (8001c20 <buttonCheck+0x17c>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  }
	  if ((buttonValues[i] != buttonValuesPrev[i]) && (buttonCounters[i] >= 10))
 8001b32:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <buttonCheck+0x170>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <buttonCheck+0x178>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	440b      	add	r3, r1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d01e      	beq.n	8001b84 <buttonCheck+0xe0>
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <buttonCheck+0x17c>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d918      	bls.n	8001b84 <buttonCheck+0xe0>
	  {
		  if (buttonValues[i] == 1)
 8001b52:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <buttonCheck+0x170>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d104      	bne.n	8001b68 <buttonCheck+0xc4>
		  {
			  buttonPressed[i] = 1;
 8001b5e:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <buttonCheck+0x180>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2101      	movs	r1, #1
 8001b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  }
		  buttonValuesPrev[i] = buttonValues[i];
 8001b68:	4a2a      	ldr	r2, [pc, #168]	; (8001c14 <buttonCheck+0x170>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	7819      	ldrb	r1, [r3, #0]
 8001b70:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <buttonCheck+0x178>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	460a      	mov	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
		  buttonCounters[i] = 0;
 8001b7a:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <buttonCheck+0x17c>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3301      	adds	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	ddb7      	ble.n	8001b00 <buttonCheck+0x5c>
			LED_States[0] = 0;
		}
		buttonPressed[0] = 0;
		*/
	}
	if (buttonPressed[1] == 1)
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <buttonCheck+0x180>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d119      	bne.n	8001bcc <buttonCheck+0x128>
	{
		if (LED_States[1] == 0)
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <buttonCheck+0x184>)
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <buttonCheck+0x110>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba6:	4821      	ldr	r0, [pc, #132]	; (8001c2c <buttonCheck+0x188>)
 8001ba8:	f007 f9c0 	bl	8008f2c <HAL_GPIO_WritePin>
			LED_States[1] = 1;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <buttonCheck+0x184>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	705a      	strb	r2, [r3, #1]
 8001bb2:	e008      	b.n	8001bc6 <buttonCheck+0x122>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bba:	481c      	ldr	r0, [pc, #112]	; (8001c2c <buttonCheck+0x188>)
 8001bbc:	f007 f9b6 	bl	8008f2c <HAL_GPIO_WritePin>
			LED_States[1] = 0;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <buttonCheck+0x184>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
		}
		buttonPressed[1] = 0;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <buttonCheck+0x180>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	605a      	str	r2, [r3, #4]
	}

	if (buttonPressed[2] == 1)
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <buttonCheck+0x180>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d119      	bne.n	8001c08 <buttonCheck+0x164>
	{
		if (LED_States[2] == 0)
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <buttonCheck+0x184>)
 8001bd6:	789b      	ldrb	r3, [r3, #2]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <buttonCheck+0x14c>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be2:	480d      	ldr	r0, [pc, #52]	; (8001c18 <buttonCheck+0x174>)
 8001be4:	f007 f9a2 	bl	8008f2c <HAL_GPIO_WritePin>
			LED_States[2] = 1;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <buttonCheck+0x184>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	709a      	strb	r2, [r3, #2]
 8001bee:	e008      	b.n	8001c02 <buttonCheck+0x15e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <buttonCheck+0x174>)
 8001bf8:	f007 f998 	bl	8008f2c <HAL_GPIO_WritePin>
			LED_States[2] = 0;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <buttonCheck+0x184>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	709a      	strb	r2, [r3, #2]
		}
		buttonPressed[2] = 0;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <buttonCheck+0x180>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	58021800 	.word	0x58021800
 8001c14:	20000274 	.word	0x20000274
 8001c18:	58020c00 	.word	0x58020c00
 8001c1c:	20000278 	.word	0x20000278
 8001c20:	2000027c 	.word	0x2000027c
 8001c24:	20000288 	.word	0x20000288
 8001c28:	20001700 	.word	0x20001700
 8001c2c:	58020000 	.word	0x58020000

08001c30 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	;
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	;
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  ;
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	audioFrame(HALF_BUFFER_SIZE);
 8001c74:	2040      	movs	r0, #64	; 0x40
 8001c76:	f7ff fd7d 	bl	8001774 <audioFrame>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	audioFrame(0);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fd72 	bl	8001774 <audioFrame>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8001ca2:	f000 f879 	bl	8001d98 <BSP_SD_IsDetected>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d001      	beq.n	8001cb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8001cac:	2302      	movs	r3, #2
 8001cae:	e012      	b.n	8001cd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <BSP_SD_Init+0x48>)
 8001cb2:	f00d fef2 	bl	800fa9a <HAL_SD_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <BSP_SD_Init+0x48>)
 8001cc6:	f00e fdad 	bl	8010824 <HAL_SD_ConfigWideBusOperation>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200019d0 	.word	0x200019d0

08001ce4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <BSP_SD_ReadBlocks+0x38>)
 8001d02:	f00d ffe9 	bl	800fcd8 <HAL_SD_ReadBlocks>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200019d0 	.word	0x200019d0

08001d20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <BSP_SD_WriteBlocks+0x38>)
 8001d3e:	f00e f955 	bl	800ffec <HAL_SD_WriteBlocks>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200019d0 	.word	0x200019d0

08001d5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <BSP_SD_GetCardState+0x1c>)
 8001d62:	f00e fe71 	bl	8010a48 <HAL_SD_GetCardState>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200019d0 	.word	0x200019d0

08001d7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <BSP_SD_GetCardInfo+0x18>)
 8001d88:	f00e fd20 	bl	80107cc <HAL_SD_GetCardInfo>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200019d0 	.word	0x200019d0

08001d98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8001da2:	f000 f911 	bl	8001fc8 <BSP_PlatformIsDetected>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	6078      	str	r0, [r7, #4]

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dca:	4858      	ldr	r0, [pc, #352]	; (8001f2c <AudioCodec_init+0x170>)
 8001dcc:	f007 f8ae 	bl	8008f2c <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f002 feb9 	bl	8004b48 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8001dd6:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <AudioCodec_init+0x174>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x03;
 8001ddc:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <AudioCodec_init+0x174>)
 8001dde:	2203      	movs	r2, #3
 8001de0:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <AudioCodec_init+0x178>)
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <AudioCodec_init+0x17c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	4a50      	ldr	r2, [pc, #320]	; (8001f30 <AudioCodec_init+0x174>)
 8001df0:	2120      	movs	r1, #32
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f008 fe58 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <AudioCodec_init+0x180>)
 8001dfe:	701a      	strb	r2, [r3, #0]
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8001e00:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <AudioCodec_init+0x174>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x41;
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <AudioCodec_init+0x174>)
 8001e08:	2241      	movs	r2, #65	; 0x41
 8001e0a:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <AudioCodec_init+0x178>)
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <AudioCodec_init+0x17c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <AudioCodec_init+0x174>)
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f008 fe43 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <AudioCodec_init+0x180>)
 8001e28:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <AudioCodec_init+0x174>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x00;
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <AudioCodec_init+0x174>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <AudioCodec_init+0x178>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <AudioCodec_init+0x17c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <AudioCodec_init+0x174>)
 8001e44:	2120      	movs	r1, #32
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f008 fe2e 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <AudioCodec_init+0x180>)
 8001e52:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <AudioCodec_init+0x174>)
 8001e56:	2203      	movs	r2, #3
 8001e58:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x79;
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <AudioCodec_init+0x174>)
 8001e5c:	2279      	movs	r2, #121	; 0x79
 8001e5e:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <AudioCodec_init+0x178>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <AudioCodec_init+0x17c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <AudioCodec_init+0x174>)
 8001e6e:	2120      	movs	r1, #32
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f008 fe19 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <AudioCodec_init+0x180>)
 8001e7c:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <AudioCodec_init+0x174>)
 8001e80:	2204      	movs	r2, #4
 8001e82:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <AudioCodec_init+0x174>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <AudioCodec_init+0x178>)
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <AudioCodec_init+0x17c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <AudioCodec_init+0x174>)
 8001e98:	2120      	movs	r1, #32
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f008 fe04 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <AudioCodec_init+0x180>)
 8001ea6:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <AudioCodec_init+0x174>)
 8001eaa:	2205      	movs	r2, #5
 8001eac:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x01;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <AudioCodec_init+0x174>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <AudioCodec_init+0x178>)
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <AudioCodec_init+0x17c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <AudioCodec_init+0x174>)
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f008 fdef 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <AudioCodec_init+0x180>)
 8001ed0:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <AudioCodec_init+0x174>)
 8001ed4:	2206      	movs	r2, #6
 8001ed6:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x10;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <AudioCodec_init+0x174>)
 8001eda:	2210      	movs	r2, #16
 8001edc:	705a      	strb	r2, [r3, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <AudioCodec_init+0x178>)
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <AudioCodec_init+0x17c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <AudioCodec_init+0x174>)
 8001eec:	2120      	movs	r1, #32
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f008 fdda 	bl	800aaa8 <HAL_I2C_Master_Transmit>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <AudioCodec_init+0x180>)
 8001efa:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <AudioCodec_init+0x174>)
 8001efe:	2207      	movs	r2, #7
 8001f00:	701a      	strb	r2, [r3, #0]
	myI2cData[1] = 0x02;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <AudioCodec_init+0x174>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <AudioCodec_init+0x178>)
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <AudioCodec_init+0x17c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <AudioCodec_init+0x174>)
 8001f16:	2120      	movs	r1, #32
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f008 fdc5 	bl	800aaa8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <AudioCodec_init+0x184>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]

}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	58020800 	.word	0x58020800
 8001f30:	20001704 	.word	0x20001704
 8001f34:	20000002 	.word	0x20000002
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	20001706 	.word	0x20001706
 8001f40:	20000272 	.word	0x20000272

08001f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_DMA_Init+0x5c>)
 8001f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <MX_DMA_Init+0x5c>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_DMA_Init+0x5c>)
 8001f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	200b      	movs	r0, #11
 8001f6e:	f004 fc80 	bl	8006872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f72:	200b      	movs	r0, #11
 8001f74:	f004 fc97 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	200c      	movs	r0, #12
 8001f7e:	f004 fc78 	bl	8006872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f82:	200c      	movs	r0, #12
 8001f84:	f004 fc8f 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	200d      	movs	r0, #13
 8001f8e:	f004 fc70 	bl	8006872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001f92:	200d      	movs	r0, #13
 8001f94:	f004 fc87 	bl	80068a6 <HAL_NVIC_EnableIRQ>

}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	58024400 	.word	0x58024400

08001fa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8001fa8:	4904      	ldr	r1, [pc, #16]	; (8001fbc <MX_FATFS_Init+0x18>)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_FATFS_Init+0x1c>)
 8001fac:	f014 ffe0 	bl	8016f70 <FATFS_LinkDriver>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <MX_FATFS_Init+0x20>)
 8001fb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20001708 	.word	0x20001708
 8001fc0:	08019248 	.word	0x08019248
 8001fc4:	20001707 	.word	0x20001707

08001fc8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <BSP_PlatformIsDetected+0x28>)
 8001fd8:	f006 ff90 	bl	8008efc <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
}  
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	58020800 	.word	0x58020800

08001ff4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_FMC_Init+0xa0>)
 800200e:	4a22      	ldr	r2, [pc, #136]	; (8002098 <MX_FMC_Init+0xa4>)
 8002010:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_FMC_Init+0xa0>)
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_FMC_Init+0xa0>)
 800201a:	2201      	movs	r2, #1
 800201c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <MX_FMC_Init+0xa0>)
 8002020:	2208      	movs	r2, #8
 8002022:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_FMC_Init+0xa0>)
 8002026:	2210      	movs	r2, #16
 8002028:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_FMC_Init+0xa0>)
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_FMC_Init+0xa0>)
 8002032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002036:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_FMC_Init+0xa0>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_FMC_Init+0xa0>)
 8002040:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8002044:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_FMC_Init+0xa0>)
 8002048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_FMC_Init+0xa0>)
 8002050:	2200      	movs	r2, #0
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002054:	2302      	movs	r3, #2
 8002056:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002058:	2306      	movs	r3, #6
 800205a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800205c:	2304      	movs	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8002060:	2306      	movs	r3, #6
 8002062:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8002064:	2302      	movs	r3, #2
 8002066:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <MX_FMC_Init+0xa0>)
 8002076:	f00f f8c1 	bl	80111fc <HAL_SDRAM_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002080:	f000 fd50 	bl	8002b24 <Error_Handler>
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8002084:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002088:	f002 fd8e 	bl	8004ba8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000170c 	.word	0x2000170c
 8002098:	52004140 	.word	0x52004140

0800209c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800209c:	b580      	push	{r7, lr}
 800209e:	b0b8      	sub	sp, #224	; 0xe0
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_FMC_MspInit+0x15c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8099 	bne.w	80021ee <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_FMC_MspInit+0x15c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	22c0      	movs	r2, #192	; 0xc0
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f015 f81c 	bl	8017108 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80020d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80020dc:	2300      	movs	r3, #0
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00a f8ab 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80020f0:	f000 fd18 	bl	8002b24 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_FMC_MspInit+0x160>)
 80020f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80020fa:	4a40      	ldr	r2, [pc, #256]	; (80021fc <HAL_FMC_MspInit+0x160>)
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002100:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_FMC_MspInit+0x160>)
 8002106:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002112:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800212c:	230c      	movs	r3, #12
 800212e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002132:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002136:	4619      	mov	r1, r3
 8002138:	4831      	ldr	r0, [pc, #196]	; (8002200 <HAL_FMC_MspInit+0x164>)
 800213a:	f006 fd2f 	bl	8008b9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800213e:	230d      	movs	r3, #13
 8002140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002156:	230c      	movs	r3, #12
 8002158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002160:	4619      	mov	r1, r3
 8002162:	4828      	ldr	r0, [pc, #160]	; (8002204 <HAL_FMC_MspInit+0x168>)
 8002164:	f006 fd1a 	bl	8008b9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002168:	f248 1337 	movw	r3, #33079	; 0x8137
 800216c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002182:	230c      	movs	r3, #12
 8002184:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002188:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800218c:	4619      	mov	r1, r3
 800218e:	481e      	ldr	r0, [pc, #120]	; (8002208 <HAL_FMC_MspInit+0x16c>)
 8002190:	f006 fd04 	bl	8008b9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002194:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ae:	230c      	movs	r3, #12
 80021b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b8:	4619      	mov	r1, r3
 80021ba:	4814      	ldr	r0, [pc, #80]	; (800220c <HAL_FMC_MspInit+0x170>)
 80021bc:	f006 fcee 	bl	8008b9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80021c0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021da:	230c      	movs	r3, #12
 80021dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021e4:	4619      	mov	r1, r3
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <HAL_FMC_MspInit+0x174>)
 80021e8:	f006 fcd8 	bl	8008b9c <HAL_GPIO_Init>
 80021ec:	e000      	b.n	80021f0 <HAL_FMC_MspInit+0x154>
    return;
 80021ee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80021f0:	37e0      	adds	r7, #224	; 0xe0
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20001740 	.word	0x20001740
 80021fc:	58024400 	.word	0x58024400
 8002200:	58021400 	.word	0x58021400
 8002204:	58020800 	.word	0x58020800
 8002208:	58021800 	.word	0x58021800
 800220c:	58021000 	.word	0x58021000
 8002210:	58020c00 	.word	0x58020c00

08002214 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800221c:	f7ff ff3e 	bl	800209c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08e      	sub	sp, #56	; 0x38
 800222c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800223e:	4b9b      	ldr	r3, [pc, #620]	; (80024ac <MX_GPIO_Init+0x284>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002244:	4a99      	ldr	r2, [pc, #612]	; (80024ac <MX_GPIO_Init+0x284>)
 8002246:	f043 0310 	orr.w	r3, r3, #16
 800224a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800224e:	4b97      	ldr	r3, [pc, #604]	; (80024ac <MX_GPIO_Init+0x284>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225c:	4b93      	ldr	r3, [pc, #588]	; (80024ac <MX_GPIO_Init+0x284>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002262:	4a92      	ldr	r2, [pc, #584]	; (80024ac <MX_GPIO_Init+0x284>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800226c:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <MX_GPIO_Init+0x284>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227a:	4b8c      	ldr	r3, [pc, #560]	; (80024ac <MX_GPIO_Init+0x284>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002280:	4a8a      	ldr	r2, [pc, #552]	; (80024ac <MX_GPIO_Init+0x284>)
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <MX_GPIO_Init+0x284>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002298:	4b84      	ldr	r3, [pc, #528]	; (80024ac <MX_GPIO_Init+0x284>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a83      	ldr	r2, [pc, #524]	; (80024ac <MX_GPIO_Init+0x284>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b80      	ldr	r3, [pc, #512]	; (80024ac <MX_GPIO_Init+0x284>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b7d      	ldr	r3, [pc, #500]	; (80024ac <MX_GPIO_Init+0x284>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	4a7b      	ldr	r2, [pc, #492]	; (80024ac <MX_GPIO_Init+0x284>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c6:	4b79      	ldr	r3, [pc, #484]	; (80024ac <MX_GPIO_Init+0x284>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	4b75      	ldr	r3, [pc, #468]	; (80024ac <MX_GPIO_Init+0x284>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	4a74      	ldr	r2, [pc, #464]	; (80024ac <MX_GPIO_Init+0x284>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e4:	4b71      	ldr	r3, [pc, #452]	; (80024ac <MX_GPIO_Init+0x284>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f2:	4b6e      	ldr	r3, [pc, #440]	; (80024ac <MX_GPIO_Init+0x284>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	4a6c      	ldr	r2, [pc, #432]	; (80024ac <MX_GPIO_Init+0x284>)
 80022fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002302:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <MX_GPIO_Init+0x284>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <MX_GPIO_Init+0x284>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	4a65      	ldr	r2, [pc, #404]	; (80024ac <MX_GPIO_Init+0x284>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002320:	4b62      	ldr	r3, [pc, #392]	; (80024ac <MX_GPIO_Init+0x284>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f244 0140 	movw	r1, #16448	; 0x4040
 8002334:	485e      	ldr	r0, [pc, #376]	; (80024b0 <MX_GPIO_Init+0x288>)
 8002336:	f006 fdf9 	bl	8008f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800233a:	2200      	movs	r2, #0
 800233c:	f24f 1110 	movw	r1, #61712	; 0xf110
 8002340:	485c      	ldr	r0, [pc, #368]	; (80024b4 <MX_GPIO_Init+0x28c>)
 8002342:	f006 fdf3 	bl	8008f2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800234c:	485a      	ldr	r0, [pc, #360]	; (80024b8 <MX_GPIO_Init+0x290>)
 800234e:	f006 fded 	bl	8008f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002358:	4858      	ldr	r0, [pc, #352]	; (80024bc <MX_GPIO_Init+0x294>)
 800235a:	f006 fde7 	bl	8008f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800235e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	484f      	ldr	r0, [pc, #316]	; (80024b0 <MX_GPIO_Init+0x288>)
 8002374:	f006 fc12 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6;
 8002378:	f244 0340 	movw	r3, #16448	; 0x4040
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4847      	ldr	r0, [pc, #284]	; (80024b0 <MX_GPIO_Init+0x288>)
 8002392:	f006 fc03 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800239c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4840      	ldr	r0, [pc, #256]	; (80024b0 <MX_GPIO_Init+0x288>)
 80023ae:	f006 fbf5 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023b2:	2304      	movs	r3, #4
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	483b      	ldr	r0, [pc, #236]	; (80024b4 <MX_GPIO_Init+0x28c>)
 80023c6:	f006 fbe9 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80023ca:	f24f 1310 	movw	r3, #61712	; 0xf110
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4619      	mov	r1, r3
 80023e2:	4834      	ldr	r0, [pc, #208]	; (80024b4 <MX_GPIO_Init+0x28c>)
 80023e4:	f006 fbda 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fa:	4619      	mov	r1, r3
 80023fc:	482e      	ldr	r0, [pc, #184]	; (80024b8 <MX_GPIO_Init+0x290>)
 80023fe:	f006 fbcd 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	4827      	ldr	r0, [pc, #156]	; (80024b8 <MX_GPIO_Init+0x290>)
 800241c:	f006 fbbe 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002420:	f242 0378 	movw	r3, #8312	; 0x2078
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002426:	2303      	movs	r3, #3
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4820      	ldr	r0, [pc, #128]	; (80024b8 <MX_GPIO_Init+0x290>)
 8002436:	f006 fbb1 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG12 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12|GPIO_PIN_13;
 800243a:	f243 0308 	movw	r3, #12296	; 0x3008
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002440:	2303      	movs	r3, #3
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	; (80024c0 <MX_GPIO_Init+0x298>)
 8002450:	f006 fba4 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	4816      	ldr	r0, [pc, #88]	; (80024c0 <MX_GPIO_Init+0x298>)
 8002468:	f006 fb98 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	480d      	ldr	r0, [pc, #52]	; (80024bc <MX_GPIO_Init+0x294>)
 8002486:	f006 fb89 	bl	8008b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800248a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <MX_GPIO_Init+0x294>)
 80024a0:	f006 fb7c 	bl	8008b9c <HAL_GPIO_Init>

}
 80024a4:	bf00      	nop
 80024a6:	3738      	adds	r7, #56	; 0x38
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58020800 	.word	0x58020800
 80024b4:	58020400 	.word	0x58020400
 80024b8:	58020c00 	.word	0x58020c00
 80024bc:	58020000 	.word	0x58020000
 80024c0:	58021800 	.word	0x58021800

080024c4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_I2C2_Init+0x74>)
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <MX_I2C2_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x505097F4;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_I2C2_Init+0x74>)
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <MX_I2C2_Init+0x7c>)
 80024d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_I2C2_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_I2C2_Init+0x74>)
 80024dc:	2201      	movs	r2, #1
 80024de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_I2C2_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_I2C2_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_I2C2_Init+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_I2C2_Init+0x74>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_I2C2_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024fe:	480e      	ldr	r0, [pc, #56]	; (8002538 <MX_I2C2_Init+0x74>)
 8002500:	f008 fa42 	bl	800a988 <HAL_I2C_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800250a:	f000 fb0b 	bl	8002b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800250e:	2100      	movs	r1, #0
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <MX_I2C2_Init+0x74>)
 8002512:	f008 fdcd 	bl	800b0b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800251c:	f000 fb02 	bl	8002b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002520:	2100      	movs	r1, #0
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_I2C2_Init+0x74>)
 8002524:	f008 fe0f 	bl	800b146 <HAL_I2CEx_ConfigDigitalFilter>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800252e:	f000 faf9 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20001744 	.word	0x20001744
 800253c:	40005800 	.word	0x40005800
 8002540:	505097f4 	.word	0x505097f4

08002544 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0ba      	sub	sp, #232	; 0xe8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	22c0      	movs	r2, #192	; 0xc0
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f014 fdcf 	bl	8017108 <memset>
  if(i2cHandle->Instance==I2C2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a27      	ldr	r2, [pc, #156]	; (800260c <HAL_I2C_MspInit+0xc8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d146      	bne.n	8002602 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002574:	f04f 0208 	mov.w	r2, #8
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4618      	mov	r0, r3
 800258c:	f009 fe58 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002596:	f000 fac5 	bl	8002b24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 80025ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025d2:	2304      	movs	r3, #4
 80025d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025dc:	4619      	mov	r1, r3
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <HAL_I2C_MspInit+0xd0>)
 80025e0:	f006 fadc 	bl	8008b9c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 80025e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 80025ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_I2C_MspInit+0xcc>)
 80025f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002602:	bf00      	nop
 8002604:	37e8      	adds	r7, #232	; 0xe8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40005800 	.word	0x40005800
 8002610:	58024400 	.word	0x58024400
 8002614:	58020400 	.word	0x58020400

08002618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  MPU_Conf();
 800261e:	f000 fa3f 	bl	8002aa0 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <main+0x184>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11b      	bne.n	8002666 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800262e:	f3bf 8f4f 	dsb	sy
}
 8002632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002634:	f3bf 8f6f 	isb	sy
}
 8002638:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <main+0x184>)
 800263c:	2200      	movs	r2, #0
 800263e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002642:	f3bf 8f4f 	dsb	sy
}
 8002646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002648:	f3bf 8f6f 	isb	sy
}
 800264c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800264e:	4b53      	ldr	r3, [pc, #332]	; (800279c <main+0x184>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4a52      	ldr	r2, [pc, #328]	; (800279c <main+0x184>)
 8002654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002658:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800265a:	f3bf 8f4f 	dsb	sy
}
 800265e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002660:	f3bf 8f6f 	isb	sy
}
 8002664:	e000      	b.n	8002668 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002666:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002668:	4b4c      	ldr	r3, [pc, #304]	; (800279c <main+0x184>)
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d138      	bne.n	80026e6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <main+0x184>)
 8002676:	2200      	movs	r2, #0
 8002678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800267c:	f3bf 8f4f 	dsb	sy
}
 8002680:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <main+0x184>)
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002688:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0b5b      	lsrs	r3, r3, #13
 800268e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002692:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80026ac:	493b      	ldr	r1, [pc, #236]	; (800279c <main+0x184>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <main+0x86>
    } while(sets-- != 0U);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e5      	bne.n	8002694 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80026c8:	f3bf 8f4f 	dsb	sy
}
 80026cc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026ce:	4b33      	ldr	r3, [pc, #204]	; (800279c <main+0x184>)
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4a32      	ldr	r2, [pc, #200]	; (800279c <main+0x184>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80026da:	f3bf 8f4f 	dsb	sy
}
 80026de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026e0:	f3bf 8f6f 	isb	sy
}
 80026e4:	e000      	b.n	80026e8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80026e6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e8:	f002 f99c 	bl	8004a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ec:	f000 f864 	bl	80027b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80026f0:	f000 f912 	bl	8002918 <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026f4:	f7ff fd98 	bl	8002228 <MX_GPIO_Init>
  MX_DMA_Init();
 80026f8:	f7ff fc24 	bl	8001f44 <MX_DMA_Init>
  MX_FMC_Init();
 80026fc:	f7ff fc7a 	bl	8001ff4 <MX_FMC_Init>
  MX_ADC1_Init();
 8002700:	f7fe fcd6 	bl	80010b0 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002704:	f7fe fdc4 	bl	8001290 <MX_ADC3_Init>
  MX_I2C2_Init();
 8002708:	f7ff fedc 	bl	80024c4 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 800270c:	f000 fcaa 	bl	8003064 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8002710:	f000 fd42 	bl	8003198 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002714:	f7ff fc46 	bl	8001fa4 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002718:	f000 fa58 	bl	8002bcc <MX_SAI1_Init>
  MX_TIM3_Init();
 800271c:	f000 ffcc 	bl	80036b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002720:	f001 f842 	bl	80037a8 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002724:	f001 f8ce 	bl	80038c4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8002728:	f000 ff36 	bl	8003598 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800272c:	f001 fa70 	bl	8003c10 <MX_USART6_UART_Init>
  MX_RNG_Init();
 8002730:	f000 f9fc 	bl	8002b2c <MX_RNG_Init>
  MX_USB_HOST_Init();
 8002734:	f001 fb48 	bl	8003dc8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	//HAL_Delay(200);
  //pull reset pin on audio codec low to make sure it's stable
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002738:	2200      	movs	r2, #0
 800273a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800273e:	4818      	ldr	r0, [pc, #96]	; (80027a0 <main+0x188>)
 8002740:	f006 fbf4 	bl	8008f2c <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002744:	eef1 3a10 	vmrs	r3, fpscr

  uint32_t tempFPURegisterVal = __get_FPSCR();
 8002748:	617b      	str	r3, [r7, #20]
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	613b      	str	r3, [r7, #16]
  __builtin_arm_set_fpscr(fpscr);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	eee1 3a10 	vmsr	fpscr, r3
}
 800275c:	bf00      	nop
  __set_FPSCR(tempFPURegisterVal);

  if (HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values, NUM_ADC_CHANNELS) != HAL_OK)
 800275e:	2208      	movs	r2, #8
 8002760:	4910      	ldr	r1, [pc, #64]	; (80027a4 <main+0x18c>)
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <main+0x190>)
 8002764:	f002 fdde 	bl	8005324 <HAL_ADC_Start_DMA>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <main+0x15a>
	{
	  Error_Handler();
 800276e:	f000 f9d9 	bl	8002b24 <Error_Handler>
	}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	2140      	movs	r1, #64	; 0x40
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <main+0x188>)
 8002778:	f006 fbd8 	bl	8008f2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f002 f9e3 	bl	8004b48 <HAL_Delay>

  SDRAM_Initialization_sequence();
 8002782:	f000 f909 	bl	8002998 <SDRAM_Initialization_sequence>
  HAL_Delay(100);
 8002786:	2064      	movs	r0, #100	; 0x64
 8002788:	f002 f9de 	bl	8004b48 <HAL_Delay>

  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <main+0x194>)
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <main+0x198>)
 8002790:	4808      	ldr	r0, [pc, #32]	; (80027b4 <main+0x19c>)
 8002792:	f7fe ff11 	bl	80015b8 <audioInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002796:	f001 fb3f 	bl	8003e18 <MX_USB_HOST_Process>
 800279a:	e7fc      	b.n	8002796 <main+0x17e>
 800279c:	e000ed00 	.word	0xe000ed00
 80027a0:	58020800 	.word	0x58020800
 80027a4:	30000440 	.word	0x30000440
 80027a8:	20000130 	.word	0x20000130
 80027ac:	20001844 	.word	0x20001844
 80027b0:	200017ac 	.word	0x200017ac
 80027b4:	20001744 	.word	0x20001744

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b09e      	sub	sp, #120	; 0x78
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027c2:	224c      	movs	r2, #76	; 0x4c
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f014 fc9e 	bl	8017108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2220      	movs	r2, #32
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f014 fc97 	bl	8017108 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80027da:	2002      	movs	r0, #2
 80027dc:	f008 fd00 	bl	800b1e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	4b49      	ldr	r3, [pc, #292]	; (800290c <SystemClock_Config+0x154>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a48      	ldr	r2, [pc, #288]	; (800290c <SystemClock_Config+0x154>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <SystemClock_Config+0x154>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b45      	ldr	r3, [pc, #276]	; (8002910 <SystemClock_Config+0x158>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a44      	ldr	r2, [pc, #272]	; (8002910 <SystemClock_Config+0x158>)
 8002800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b42      	ldr	r3, [pc, #264]	; (8002910 <SystemClock_Config+0x158>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002812:	bf00      	nop
 8002814:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <SystemClock_Config+0x158>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002820:	d1f8      	bne.n	8002814 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <SystemClock_Config+0x15c>)
 8002824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <SystemClock_Config+0x15c>)
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <SystemClock_Config+0x15c>)
 8002834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <SystemClock_Config+0x158>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a31      	ldr	r2, [pc, #196]	; (8002910 <SystemClock_Config+0x158>)
 800284a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <SystemClock_Config+0x158>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <SystemClock_Config+0x154>)
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	4a2b      	ldr	r2, [pc, #172]	; (800290c <SystemClock_Config+0x154>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <SystemClock_Config+0x154>)
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002872:	bf00      	nop
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <SystemClock_Config+0x158>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d1f8      	bne.n	8002874 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002882:	2321      	movs	r3, #33	; 0x21
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800288c:	2301      	movs	r3, #1
 800288e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002890:	2302      	movs	r3, #2
 8002892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002894:	2302      	movs	r3, #2
 8002896:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002898:	2305      	movs	r3, #5
 800289a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800289c:	23c0      	movs	r3, #192	; 0xc0
 800289e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028a4:	2302      	movs	r3, #2
 80028a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80028ac:	2308      	movs	r3, #8
 80028ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	4618      	mov	r0, r3
 80028be:	f008 fcd9 	bl	800b274 <HAL_RCC_OscConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0x114>
  {
    Error_Handler();
 80028c8:	f000 f92c 	bl	8002b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028cc:	233f      	movs	r3, #63	; 0x3f
 80028ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d0:	2303      	movs	r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80028d8:	2308      	movs	r3, #8
 80028da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	2104      	movs	r1, #4
 80028f4:	4618      	mov	r0, r3
 80028f6:	f009 f917 	bl	800bb28 <HAL_RCC_ClockConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8002900:	f000 f910 	bl	8002b24 <Error_Handler>
  }
}
 8002904:	bf00      	nop
 8002906:	3778      	adds	r7, #120	; 0x78
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	58000400 	.word	0x58000400
 8002910:	58024800 	.word	0x58024800
 8002914:	58024400 	.word	0x58024400

08002918 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0b0      	sub	sp, #192	; 0xc0
 800291c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800291e:	463b      	mov	r3, r7
 8002920:	22c0      	movs	r2, #192	; 0xc0
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f014 fbef 	bl	8017108 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <PeriphCommonClock_Config+0x68>)
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002934:	2319      	movs	r3, #25
 8002936:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8002938:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800293c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800293e:	2307      	movs	r3, #7
 8002940:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002942:	2302      	movs	r3, #2
 8002944:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800295c:	2301      	movs	r3, #1
 800295e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002966:	463b      	mov	r3, r7
 8002968:	4618      	mov	r0, r3
 800296a:	f009 fc69 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002974:	f000 f8d6 	bl	8002b24 <Error_Handler>
  }
}
 8002978:	bf00      	nop
 800297a:	37c0      	adds	r7, #192	; 0xc0
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	00090100 	.word	0x00090100

08002984 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	;
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
    __IO uint32_t tmpmrd = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
    FMC_SDRAM_CommandTypeDef Command;
    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80029a6:	2310      	movs	r3, #16
 80029a8:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b8:	4619      	mov	r1, r3
 80029ba:	4828      	ldr	r0, [pc, #160]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 80029bc:	f00e fc5a 	bl	8011274 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f002 f8c1 	bl	8004b48 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80029c6:	2302      	movs	r3, #2
 80029c8:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80029ca:	2310      	movs	r3, #16
 80029cc:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029dc:	4619      	mov	r1, r3
 80029de:	481f      	ldr	r0, [pc, #124]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 80029e0:	f00e fc48 	bl	8011274 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 80029e4:	f240 2322 	movw	r3, #546	; 0x222
 80029e8:	617b      	str	r3, [r7, #20]
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80029ea:	2304      	movs	r3, #4
 80029ec:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80029ee:	2310      	movs	r3, #16
 80029f0:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = tmpmrd;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a00:	4619      	mov	r1, r3
 8002a02:	4816      	ldr	r0, [pc, #88]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 8002a04:	f00e fc36 	bl	8011274 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002a10:	2308      	movs	r3, #8
 8002a12:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480e      	ldr	r0, [pc, #56]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 8002a22:	f00e fc27 	bl	8011274 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f002 f88e 	bl	8004b48 <HAL_Delay>

    /* Step 5: Configure the 2nd Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	607b      	str	r3, [r7, #4]
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a30:	2310      	movs	r3, #16
 8002a32:	60bb      	str	r3, [r7, #8]
    Command.AutoRefreshNumber = 8;
 8002a34:	2308      	movs	r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
    Command.ModeRegisterDefinition = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 8002a46:	f00e fc15 	bl	8011274 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 8002a4a:	f240 5169 	movw	r1, #1385	; 0x569
 8002a4e:	4803      	ldr	r0, [pc, #12]	; (8002a5c <SDRAM_Initialization_sequence+0xc4>)
 8002a50:	f00e fc45 	bl	80112de <HAL_SDRAM_ProgramRefreshRate>
}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000170c 	.word	0x2000170c

08002a60 <randomNumber>:


float randomNumber(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480b      	ldr	r0, [pc, #44]	; (8002a98 <randomNumber+0x38>)
 8002a6c:	f00c f948 	bl	800ed00 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a9c <randomNumber+0x3c>
 8002a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a82:	edc7 7a01 	vstr	s15, [r7, #4]
	return num;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	ee07 3a90 	vmov	s15, r3
}
 8002a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20001798 	.word	0x20001798
 8002a9c:	2f80000d 	.word	0x2f80000d

08002aa0 <MPU_Conf>:


void MPU_Conf(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
  //Thanks, Keshikan! This solves the issues with accessing the SRAM in the D2 area properly. -JS
	//should test the different possible settings to see what works best while avoiding needing to manually clear the cache -JS

	MPU_Region_InitTypeDef MPU_InitStruct;

	  HAL_MPU_Disable();
 8002aa6:	f003 ff19 	bl	80068dc <HAL_MPU_Disable>

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	703b      	strb	r3, [r7, #0]

	  //D2 Domain�SRAM1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8002aae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002ab2:	607b      	str	r3, [r7, #4]
	  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
	  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
	  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
	  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002ab4:	2311      	movs	r3, #17
 8002ab6:	723b      	strb	r3, [r7, #8]

	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	72fb      	strb	r3, [r7, #11]

	  //AN4838
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	737b      	strb	r3, [r7, #13]
//	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
//	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
//	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	707b      	strb	r3, [r7, #1]

	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	727b      	strb	r3, [r7, #9]


	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	733b      	strb	r3, [r7, #12]


	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ad8:	463b      	mov	r3, r7
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 ff36 	bl	800694c <HAL_MPU_ConfigRegion>


	  //now set up D3 domain RAM

	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	703b      	strb	r3, [r7, #0]

	 	  //D2 Domain�SRAM1
	 	  MPU_InitStruct.BaseAddress = 0x38000000;
 8002ae4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8002ae8:	607b      	str	r3, [r7, #4]


	 	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002aea:	230f      	movs	r3, #15
 8002aec:	723b      	strb	r3, [r7, #8]

	 	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002aee:	2303      	movs	r3, #3
 8002af0:	72fb      	strb	r3, [r7, #11]

	 	  //AN4838
	 	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	72bb      	strb	r3, [r7, #10]
	 	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73bb      	strb	r3, [r7, #14]
	 	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
	 	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	737b      	strb	r3, [r7, #13]
	 //	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	 //	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
	 //	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;


	 	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	707b      	strb	r3, [r7, #1]

	 	  MPU_InitStruct.SubRegionDisable = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	727b      	strb	r3, [r7, #9]


	 	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	733b      	strb	r3, [r7, #12]


	 	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002b0e:	463b      	mov	r3, r7
 8002b10:	4618      	mov	r0, r3
 8002b12:	f003 ff1b 	bl	800694c <HAL_MPU_ConfigRegion>


	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002b16:	2004      	movs	r0, #4
 8002b18:	f003 fef8 	bl	800690c <HAL_MPU_Enable>
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1)
 8002b28:	e7fe      	b.n	8002b28 <Error_Handler+0x4>
	...

08002b2c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <MX_RNG_Init+0x24>)
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <MX_RNG_Init+0x28>)
 8002b34:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_RNG_Init+0x24>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <MX_RNG_Init+0x24>)
 8002b3e:	f00c f87d 	bl	800ec3c <HAL_RNG_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002b48:	f7ff ffec 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20001798 	.word	0x20001798
 8002b54:	48021800 	.word	0x48021800

08002b58 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0b4      	sub	sp, #208	; 0xd0
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	22c0      	movs	r2, #192	; 0xc0
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f014 facd 	bl	8017108 <memset>
  if(rngHandle->Instance==RNG)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_RNG_MspInit+0x6c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d121      	bne.n	8002bbc <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8a:	f107 0310 	add.w	r3, r7, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f009 fb56 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002b9a:	f7ff ffc3 	bl	8002b24 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RNG_MspInit+0x70>)
 8002ba0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_RNG_MspInit+0x70>)
 8002ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002baa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RNG_MspInit+0x70>)
 8002bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	37d0      	adds	r7, #208	; 0xd0
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	48021800 	.word	0x48021800
 8002bc8:	58024400 	.word	0x58024400

08002bcc <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bd2:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <MX_SAI1_Init+0xb4>)
 8002bd4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002bd6:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bf6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002bfa:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c14:	2302      	movs	r3, #2
 8002c16:	2202      	movs	r2, #2
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4818      	ldr	r0, [pc, #96]	; (8002c7c <MX_SAI1_Init+0xb0>)
 8002c1c:	f00c f8c6 	bl	800edac <HAL_SAI_InitProtocol>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002c26:	f7ff ff7d 	bl	8002b24 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_SAI1_Init+0xbc>)
 8002c2e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c32:	2203      	movs	r2, #3
 8002c34:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c60:	2302      	movs	r3, #2
 8002c62:	2202      	movs	r2, #2
 8002c64:	2100      	movs	r1, #0
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <MX_SAI1_Init+0xb8>)
 8002c68:	f00c f8a0 	bl	800edac <HAL_SAI_InitProtocol>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8002c72:	f7ff ff57 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200017ac 	.word	0x200017ac
 8002c80:	40015804 	.word	0x40015804
 8002c84:	20001844 	.word	0x20001844
 8002c88:	40015824 	.word	0x40015824

08002c8c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a77      	ldr	r2, [pc, #476]	; (8002e78 <HAL_SAI_MspInit+0x1ec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d179      	bne.n	8002d92 <HAL_SAI_MspInit+0x106>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002c9e:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cac:	4a74      	ldr	r2, [pc, #464]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cb6:	4b72      	ldr	r3, [pc, #456]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a6c      	ldr	r2, [pc, #432]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002ccc:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002cce:	2324      	movs	r3, #36	; 0x24
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cde:	2306      	movs	r3, #6
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4866      	ldr	r0, [pc, #408]	; (8002e84 <HAL_SAI_MspInit+0x1f8>)
 8002cea:	f005 ff57 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002cee:	2350      	movs	r3, #80	; 0x50
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002cfe:	2306      	movs	r3, #6
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	485e      	ldr	r0, [pc, #376]	; (8002e84 <HAL_SAI_MspInit+0x1f8>)
 8002d0a:	f005 ff47 	bl	8008b9c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8002d0e:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d10:	4a5e      	ldr	r2, [pc, #376]	; (8002e8c <HAL_SAI_MspInit+0x200>)
 8002d12:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002d14:	4b5c      	ldr	r3, [pc, #368]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d16:	2257      	movs	r2, #87	; 0x57
 8002d18:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d1c:	2240      	movs	r2, #64	; 0x40
 8002d1e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d2e:	4b56      	ldr	r3, [pc, #344]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d34:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d36:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d3c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002d3e:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d44:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d46:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d4c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d50:	2204      	movs	r2, #4
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002d66:	4848      	ldr	r0, [pc, #288]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d68:	f003 fe34 	bl	80069d4 <HAL_DMA_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8002d72:	f7ff fed7 	bl	8002b24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a43      	ldr	r2, [pc, #268]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d7e:	4a42      	ldr	r2, [pc, #264]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002d8c:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <HAL_SAI_MspInit+0x1fc>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6393      	str	r3, [r2, #56]	; 0x38
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3e      	ldr	r2, [pc, #248]	; (8002e90 <HAL_SAI_MspInit+0x204>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d169      	bne.n	8002e70 <HAL_SAI_MspInit+0x1e4>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10e      	bne.n	8002dc2 <HAL_SAI_MspInit+0x136>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002da4:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002daa:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_SAI_MspInit+0x1f4>)
 8002db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <HAL_SAI_MspInit+0x1f0>)
 8002dca:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dcc:	2308      	movs	r3, #8
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ddc:	2306      	movs	r3, #6
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	4827      	ldr	r0, [pc, #156]	; (8002e84 <HAL_SAI_MspInit+0x1f8>)
 8002de8:	f005 fed8 	bl	8008b9c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream2;
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002dee:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <HAL_SAI_MspInit+0x20c>)
 8002df0:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002df4:	2258      	movs	r2, #88	; 0x58
 8002df6:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dfe:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e0a:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e12:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1a:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e22:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e2a:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e2e:	2204      	movs	r2, #4
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e46:	f003 fdc5 	bl	80069d4 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_SAI_MspInit+0x1c8>
    {
      Error_Handler();
 8002e50:	f7ff fe68 	bl	8002b24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <HAL_SAI_MspInit+0x208>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40015804 	.word	0x40015804
 8002e7c:	200019cc 	.word	0x200019cc
 8002e80:	58024400 	.word	0x58024400
 8002e84:	58021000 	.word	0x58021000
 8002e88:	200018dc 	.word	0x200018dc
 8002e8c:	40020028 	.word	0x40020028
 8002e90:	40015824 	.word	0x40015824
 8002e94:	20001954 	.word	0x20001954
 8002e98:	40020040 	.word	0x40020040

08002e9c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8002eac:	f7fe ff56 	bl	8001d5c <BSP_SD_GetCardState>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ec4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <SD_CheckStatus+0x38>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000008 	.word	0x20000008

08002ed8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <SD_initialize+0x38>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8002ee8:	f7fe fed6 	bl	8001c98 <BSP_SD_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d107      	bne.n	8002f02 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ffd1 	bl	8002e9c <SD_CheckStatus>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SD_initialize+0x38>)
 8002f00:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <SD_initialize+0x38>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000008 	.word	0x20000008

08002f14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ffbb 	bl	8002e9c <SD_CheckStatus>
 8002f26:	4603      	mov	r3, r0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7fe fec9 	bl	8001ce4 <BSP_SD_ReadBlocks>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8002f58:	bf00      	nop
 8002f5a:	f7fe feff 	bl	8001d5c <BSP_SD_GetCardState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1fa      	bne.n	8002f5a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f7fe fec6 	bl	8001d20 <BSP_SD_WriteBlocks>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8002f9a:	bf00      	nop
 8002f9c:	f7fe fede 	bl	8001d5c <BSP_SD_GetCardState>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1fa      	bne.n	8002f9c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	603a      	str	r2, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002fca:	4b25      	ldr	r3, [pc, #148]	; (8003060 <SD_ioctl+0xac>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SD_ioctl+0x28>
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e03c      	b.n	8003056 <SD_ioctl+0xa2>

  switch (cmd)
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d834      	bhi.n	800304c <SD_ioctl+0x98>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <SD_ioctl+0x34>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003001 	.word	0x08003001
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003033 	.word	0x08003033
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002ffe:	e028      	b.n	8003052 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe feb9 	bl	8001d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003016:	e01c      	b.n	8003052 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe fead 	bl	8001d7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	b29a      	uxth	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003030:	e00f      	b.n	8003052 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fea0 	bl	8001d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	0a5a      	lsrs	r2, r3, #9
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800304a:	e002      	b.n	8003052 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800304c:	2304      	movs	r3, #4
 800304e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003056:	4618      	mov	r0, r3
 8003058:	3730      	adds	r7, #48	; 0x30
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000008 	.word	0x20000008

08003064 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 800306a:	4a0c      	ldr	r2, [pc, #48]	; (800309c <MX_SDMMC1_SD_Init+0x38>)
 800306c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 800307c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003080:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <MX_SDMMC1_SD_Init+0x34>)
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	200019d0 	.word	0x200019d0
 800309c:	52007000 	.word	0x52007000

080030a0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a32      	ldr	r2, [pc, #200]	; (8003188 <HAL_SD_MspInit+0xe8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d15e      	bne.n	8003180 <HAL_SD_MspInit+0xe0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_SD_MspInit+0xec>)
 80030c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030c8:	4a30      	ldr	r2, [pc, #192]	; (800318c <HAL_SD_MspInit+0xec>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_SD_MspInit+0xec>)
 80030d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_SD_MspInit+0xec>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e6:	4a29      	ldr	r2, [pc, #164]	; (800318c <HAL_SD_MspInit+0xec>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_SD_MspInit+0xec>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_SD_MspInit+0xec>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_SD_MspInit+0xec>)
 8003106:	f043 0308 	orr.w	r3, r3, #8
 800310a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <HAL_SD_MspInit+0xec>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800311c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003126:	2301      	movs	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312a:	2303      	movs	r3, #3
 800312c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800312e:	230c      	movs	r3, #12
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	4815      	ldr	r0, [pc, #84]	; (8003190 <HAL_SD_MspInit+0xf0>)
 800313a:	f005 fd2f 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003150:	230c      	movs	r3, #12
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	480d      	ldr	r0, [pc, #52]	; (8003190 <HAL_SD_MspInit+0xf0>)
 800315c:	f005 fd1e 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003160:	2304      	movs	r3, #4
 8003162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003170:	230c      	movs	r3, #12
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <HAL_SD_MspInit+0xf4>)
 800317c:	f005 fd0e 	bl	8008b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003180:	bf00      	nop
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	52007000 	.word	0x52007000
 800318c:	58024400 	.word	0x58024400
 8003190:	58020800 	.word	0x58020800
 8003194:	58020c00 	.word	0x58020c00

08003198 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <MX_SPI1_Init+0xa4>)
 800319e:	4a28      	ldr	r2, [pc, #160]	; (8003240 <MX_SPI1_Init+0xa8>)
 80031a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <MX_SPI1_Init+0xa4>)
 80031a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <MX_SPI1_Init+0xa4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <MX_SPI1_Init+0xa4>)
 80031b2:	2207      	movs	r2, #7
 80031b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_SPI1_Init+0xa4>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <MX_SPI1_Init+0xa4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_SPI1_Init+0xa4>)
 80031c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <MX_SPI1_Init+0xa4>)
 80031cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_SPI1_Init+0xa4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_SPI1_Init+0xa4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <MX_SPI1_Init+0xa4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <MX_SPI1_Init+0xa4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_SPI1_Init+0xa4>)
 80031ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <MX_SPI1_Init+0xa4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <MX_SPI1_Init+0xa4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031fe:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_SPI1_Init+0xa4>)
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <MX_SPI1_Init+0xa4>)
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_SPI1_Init+0xa4>)
 800320c:	2200      	movs	r2, #0
 800320e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <MX_SPI1_Init+0xa4>)
 8003212:	2200      	movs	r2, #0
 8003214:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_SPI1_Init+0xa4>)
 8003218:	2200      	movs	r2, #0
 800321a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <MX_SPI1_Init+0xa4>)
 800321e:	2200      	movs	r2, #0
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_SPI1_Init+0xa4>)
 8003224:	2200      	movs	r2, #0
 8003226:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <MX_SPI1_Init+0xa4>)
 800322a:	f00e f881 	bl	8011330 <HAL_SPI_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003234:	f7ff fc76 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20001a4c 	.word	0x20001a4c
 8003240:	40013000 	.word	0x40013000

08003244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b0bc      	sub	sp, #240	; 0xf0
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	22c0      	movs	r2, #192	; 0xc0
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f013 ff4f 	bl	8017108 <memset>
  if(spiHandle->Instance==SPI1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_SPI_MspInit+0x10c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d169      	bne.n	8003348 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003280:	2300      	movs	r3, #0
 8003282:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	4618      	mov	r0, r3
 800328a:	f008 ffd9 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003294:	f7ff fc46 	bl	8002b24 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_SPI_MspInit+0x110>)
 800329a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032a8:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032be:	f043 0308 	orr.w	r3, r3, #8
 80032c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_SPI_MspInit+0x110>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800330a:	2305      	movs	r3, #5
 800330c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003310:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003314:	4619      	mov	r1, r3
 8003316:	4810      	ldr	r0, [pc, #64]	; (8003358 <HAL_SPI_MspInit+0x114>)
 8003318:	f005 fc40 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800331c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8003320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003336:	2305      	movs	r3, #5
 8003338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800333c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003340:	4619      	mov	r1, r3
 8003342:	4806      	ldr	r0, [pc, #24]	; (800335c <HAL_SPI_MspInit+0x118>)
 8003344:	f005 fc2a 	bl	8008b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003348:	bf00      	nop
 800334a:	37f0      	adds	r7, #240	; 0xf0
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40013000 	.word	0x40013000
 8003354:	58024400 	.word	0x58024400
 8003358:	58020c00 	.word	0x58020c00
 800335c:	58021800 	.word	0x58021800

08003360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_MspInit+0x30>)
 8003368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <HAL_MspInit+0x30>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_MspInit+0x30>)
 8003378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	58024400 	.word	0x58024400

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a6:	e7fe      	b.n	80033a6 <HardFault_Handler+0x4>

080033a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <MemManage_Handler+0x4>

080033ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033b2:	e7fe      	b.n	80033b2 <BusFault_Handler+0x4>

080033b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b8:	e7fe      	b.n	80033b8 <UsageFault_Handler+0x4>

080033ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e8:	f001 fb8e 	bl	8004b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <DMA1_Stream0_IRQHandler+0x10>)
 80033f6:	f004 f8b3 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200001f8 	.word	0x200001f8

08003404 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <DMA1_Stream1_IRQHandler+0x10>)
 800340a:	f004 f8a9 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200018dc 	.word	0x200018dc

08003418 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <DMA1_Stream2_IRQHandler+0x10>)
 800341e:	f004 f89f 	bl	8007560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20001954 	.word	0x20001954

0800342c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <ADC_IRQHandler+0x10>)
 8003432:	f002 f83b 	bl	80054ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000130 	.word	0x20000130

08003440 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003446:	f005 fff5 	bl	8009434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20001ca4 	.word	0x20001ca4

08003454 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 800345a:	f005 ffeb 	bl	8009434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20001ca4 	.word	0x20001ca4

08003468 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <OTG_FS_IRQHandler+0x10>)
 800346e:	f005 ffe1 	bl	8009434 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20001ca4 	.word	0x20001ca4

0800347c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_sbrk+0x50>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x16>
		heap_end = &end;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <_sbrk+0x50>)
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <_sbrk+0x54>)
 8003490:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <_sbrk+0x50>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <_sbrk+0x50>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	466a      	mov	r2, sp
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d907      	bls.n	80034b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80034a6:	f013 fe47 	bl	8017138 <__errno>
 80034aa:	4603      	mov	r3, r0
 80034ac:	220c      	movs	r2, #12
 80034ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b4:	e006      	b.n	80034c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <_sbrk+0x50>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a03      	ldr	r2, [pc, #12]	; (80034cc <_sbrk+0x50>)
 80034c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20001ad4 	.word	0x20001ad4
 80034d0:	20002100 	.word	0x20002100

080034d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <SystemInit+0xac>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <SystemInit+0xac>)
 80034e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <SystemInit+0xb0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a25      	ldr	r2, [pc, #148]	; (8003584 <SystemInit+0xb0>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <SystemInit+0xb0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <SystemInit+0xb0>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4921      	ldr	r1, [pc, #132]	; (8003584 <SystemInit+0xb0>)
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <SystemInit+0xb4>)
 8003502:	4013      	ands	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <SystemInit+0xb0>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <SystemInit+0xb0>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <SystemInit+0xb0>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <SystemInit+0xb0>)
 800351a:	2200      	movs	r2, #0
 800351c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <SystemInit+0xb0>)
 8003520:	2200      	movs	r2, #0
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <SystemInit+0xb0>)
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <SystemInit+0xb0>)
 800352c:	2200      	movs	r2, #0
 800352e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <SystemInit+0xb0>)
 8003532:	2200      	movs	r2, #0
 8003534:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <SystemInit+0xb0>)
 8003538:	2200      	movs	r2, #0
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <SystemInit+0xb0>)
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <SystemInit+0xb0>)
 8003544:	2200      	movs	r2, #0
 8003546:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <SystemInit+0xb0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <SystemInit+0xb0>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <SystemInit+0xb0>)
 8003556:	2200      	movs	r2, #0
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <SystemInit+0xb8>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <SystemInit+0xbc>)
 8003560:	4013      	ands	r3, r2
 8003562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003566:	d202      	bcs.n	800356e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <SystemInit+0xc0>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <SystemInit+0xac>)
 8003570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003574:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00
 8003584:	58024400 	.word	0x58024400
 8003588:	eaf6ed7f 	.word	0xeaf6ed7f
 800358c:	5c001000 	.word	0x5c001000
 8003590:	ffff0000 	.word	0xffff0000
 8003594:	51008108 	.word	0x51008108

08003598 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b096      	sub	sp, #88	; 0x58
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	222c      	movs	r2, #44	; 0x2c
 80035c2:	2100      	movs	r1, #0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f013 fd9f 	bl	8017108 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035cc:	4a39      	ldr	r2, [pc, #228]	; (80036b4 <MX_TIM1_Init+0x11c>)
 80035ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035d0:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80035dc:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035f6:	482e      	ldr	r0, [pc, #184]	; (80036b0 <MX_TIM1_Init+0x118>)
 80035f8:	f00e f830 	bl	801165c <HAL_TIM_PWM_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003602:	f7ff fa8f 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003616:	4619      	mov	r1, r3
 8003618:	4825      	ldr	r0, [pc, #148]	; (80036b0 <MX_TIM1_Init+0x118>)
 800361a:	f00e fe91 	bl	8012340 <HAL_TIMEx_MasterConfigSynchronization>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003624:	f7ff fa7e 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003628:	2360      	movs	r3, #96	; 0x60
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003630:	2300      	movs	r3, #0
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003648:	2208      	movs	r2, #8
 800364a:	4619      	mov	r1, r3
 800364c:	4818      	ldr	r0, [pc, #96]	; (80036b0 <MX_TIM1_Init+0x118>)
 800364e:	f00e f85d 	bl	801170c <HAL_TIM_PWM_ConfigChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003658:	f7ff fa64 	bl	8002b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003674:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800367e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	4619      	mov	r1, r3
 8003690:	4807      	ldr	r0, [pc, #28]	; (80036b0 <MX_TIM1_Init+0x118>)
 8003692:	f00e fee3 	bl	801245c <HAL_TIMEx_ConfigBreakDeadTime>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800369c:	f7ff fa42 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <MX_TIM1_Init+0x118>)
 80036a2:	f000 f9b7 	bl	8003a14 <HAL_TIM_MspPostInit>

}
 80036a6:	bf00      	nop
 80036a8:	3758      	adds	r7, #88	; 0x58
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20001ad8 	.word	0x20001ad8
 80036b4:	40010000 	.word	0x40010000

080036b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	f107 031c 	add.w	r3, r7, #28
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d8:	463b      	mov	r3, r7
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	615a      	str	r2, [r3, #20]
 80036e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <MX_TIM3_Init+0xe8>)
 80036ec:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <MX_TIM3_Init+0xec>)
 80036ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <MX_TIM3_Init+0xe8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <MX_TIM3_Init+0xe8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <MX_TIM3_Init+0xe8>)
 80036fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <MX_TIM3_Init+0xe8>)
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <MX_TIM3_Init+0xe8>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003710:	4823      	ldr	r0, [pc, #140]	; (80037a0 <MX_TIM3_Init+0xe8>)
 8003712:	f00d ff4c 	bl	80115ae <HAL_TIM_Base_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800371c:	f7ff fa02 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372a:	4619      	mov	r1, r3
 800372c:	481c      	ldr	r0, [pc, #112]	; (80037a0 <MX_TIM3_Init+0xe8>)
 800372e:	f00e f901 	bl	8011934 <HAL_TIM_ConfigClockSource>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003738:	f7ff f9f4 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800373c:	4818      	ldr	r0, [pc, #96]	; (80037a0 <MX_TIM3_Init+0xe8>)
 800373e:	f00d ff8d 	bl	801165c <HAL_TIM_PWM_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003748:	f7ff f9ec 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	4619      	mov	r1, r3
 800375a:	4811      	ldr	r0, [pc, #68]	; (80037a0 <MX_TIM3_Init+0xe8>)
 800375c:	f00e fdf0 	bl	8012340 <HAL_TIMEx_MasterConfigSynchronization>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003766:	f7ff f9dd 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800376a:	2360      	movs	r3, #96	; 0x60
 800376c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800377a:	463b      	mov	r3, r7
 800377c:	2204      	movs	r2, #4
 800377e:	4619      	mov	r1, r3
 8003780:	4807      	ldr	r0, [pc, #28]	; (80037a0 <MX_TIM3_Init+0xe8>)
 8003782:	f00d ffc3 	bl	801170c <HAL_TIM_PWM_ConfigChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800378c:	f7ff f9ca 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003790:	4803      	ldr	r0, [pc, #12]	; (80037a0 <MX_TIM3_Init+0xe8>)
 8003792:	f000 f93f 	bl	8003a14 <HAL_TIM_MspPostInit>

}
 8003796:	bf00      	nop
 8003798:	3738      	adds	r7, #56	; 0x38
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20001b24 	.word	0x20001b24
 80037a4:	40000400 	.word	0x40000400

080037a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	615a      	str	r2, [r3, #20]
 80037d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <MX_TIM4_Init+0x114>)
 80037dc:	4a38      	ldr	r2, [pc, #224]	; (80038c0 <MX_TIM4_Init+0x118>)
 80037de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <MX_TIM4_Init+0x114>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e6:	4b35      	ldr	r3, [pc, #212]	; (80038bc <MX_TIM4_Init+0x114>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037ec:	4b33      	ldr	r3, [pc, #204]	; (80038bc <MX_TIM4_Init+0x114>)
 80037ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <MX_TIM4_Init+0x114>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <MX_TIM4_Init+0x114>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003800:	482e      	ldr	r0, [pc, #184]	; (80038bc <MX_TIM4_Init+0x114>)
 8003802:	f00d fed4 	bl	80115ae <HAL_TIM_Base_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800380c:	f7ff f98a 	bl	8002b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800381a:	4619      	mov	r1, r3
 800381c:	4827      	ldr	r0, [pc, #156]	; (80038bc <MX_TIM4_Init+0x114>)
 800381e:	f00e f889 	bl	8011934 <HAL_TIM_ConfigClockSource>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003828:	f7ff f97c 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800382c:	4823      	ldr	r0, [pc, #140]	; (80038bc <MX_TIM4_Init+0x114>)
 800382e:	f00d ff15 	bl	801165c <HAL_TIM_PWM_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003838:	f7ff f974 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	4619      	mov	r1, r3
 800384a:	481c      	ldr	r0, [pc, #112]	; (80038bc <MX_TIM4_Init+0x114>)
 800384c:	f00e fd78 	bl	8012340 <HAL_TIMEx_MasterConfigSynchronization>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003856:	f7ff f965 	bl	8002b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800385a:	2360      	movs	r3, #96	; 0x60
 800385c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800386a:	463b      	mov	r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	4619      	mov	r1, r3
 8003870:	4812      	ldr	r0, [pc, #72]	; (80038bc <MX_TIM4_Init+0x114>)
 8003872:	f00d ff4b 	bl	801170c <HAL_TIM_PWM_ConfigChannel>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800387c:	f7ff f952 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003880:	463b      	mov	r3, r7
 8003882:	2204      	movs	r2, #4
 8003884:	4619      	mov	r1, r3
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <MX_TIM4_Init+0x114>)
 8003888:	f00d ff40 	bl	801170c <HAL_TIM_PWM_ConfigChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8003892:	f7ff f947 	bl	8002b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003896:	463b      	mov	r3, r7
 8003898:	220c      	movs	r2, #12
 800389a:	4619      	mov	r1, r3
 800389c:	4807      	ldr	r0, [pc, #28]	; (80038bc <MX_TIM4_Init+0x114>)
 800389e:	f00d ff35 	bl	801170c <HAL_TIM_PWM_ConfigChannel>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80038a8:	f7ff f93c 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80038ac:	4803      	ldr	r0, [pc, #12]	; (80038bc <MX_TIM4_Init+0x114>)
 80038ae:	f000 f8b1 	bl	8003a14 <HAL_TIM_MspPostInit>

}
 80038b2:	bf00      	nop
 80038b4:	3738      	adds	r7, #56	; 0x38
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20001b70 	.word	0x20001b70
 80038c0:	40000800 	.word	0x40000800

080038c4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MX_TIM7_Init+0x64>)
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <MX_TIM7_Init+0x68>)
 80038d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <MX_TIM7_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <MX_TIM7_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <MX_TIM7_Init+0x64>)
 80038e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_TIM7_Init+0x64>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80038f4:	480c      	ldr	r0, [pc, #48]	; (8003928 <MX_TIM7_Init+0x64>)
 80038f6:	f00d fe5a 	bl	80115ae <HAL_TIM_Base_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003900:	f7ff f910 	bl	8002b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4805      	ldr	r0, [pc, #20]	; (8003928 <MX_TIM7_Init+0x64>)
 8003912:	f00e fd15 	bl	8012340 <HAL_TIMEx_MasterConfigSynchronization>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800391c:	f7ff f902 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20001bbc 	.word	0x20001bbc
 800392c:	40001400 	.word	0x40001400

08003930 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_TIM_PWM_MspInit+0x3c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_TIM_PWM_MspInit+0x40>)
 8003944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003948:	4a09      	ldr	r2, [pc, #36]	; (8003970 <HAL_TIM_PWM_MspInit+0x40>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <HAL_TIM_PWM_MspInit+0x40>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40010000 	.word	0x40010000
 8003970:	58024400 	.word	0x58024400

08003974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <HAL_TIM_Base_MspInit+0x90>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10f      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 8003988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800398c:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003996:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 8003998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80039a4:	e028      	b.n	80039f8 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM4)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <HAL_TIM_Base_MspInit+0x98>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10f      	bne.n	80039d0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
}
 80039ce:	e013      	b.n	80039f8 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <HAL_TIM_Base_MspInit+0x9c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e0:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039e2:	f043 0320 	orr.w	r3, r3, #32
 80039e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_TIM_Base_MspInit+0x94>)
 80039ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40000400 	.word	0x40000400
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	40000800 	.word	0x40000800
 8003a10:	40001400 	.word	0x40001400

08003a14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <HAL_TIM_MspPostInit+0x100>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d120      	bne.n	8003a78 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3c:	4a36      	ldr	r2, [pc, #216]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	4619      	mov	r1, r3
 8003a70:	482a      	ldr	r0, [pc, #168]	; (8003b1c <HAL_TIM_MspPostInit+0x108>)
 8003a72:	f005 f893 	bl	8008b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003a76:	e049      	b.n	8003b0c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM3)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	; (8003b20 <HAL_TIM_MspPostInit+0x10c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d11f      	bne.n	8003ac2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a88:	4a23      	ldr	r2, [pc, #140]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	2300      	movs	r3, #0
 8003aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	4619      	mov	r1, r3
 8003aba:	481a      	ldr	r0, [pc, #104]	; (8003b24 <HAL_TIM_MspPostInit+0x110>)
 8003abc:	f005 f86e 	bl	8008b9c <HAL_GPIO_Init>
}
 8003ac0:	e024      	b.n	8003b0c <HAL_TIM_MspPostInit+0xf8>
  else if(timHandle->Instance==TIM4)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_TIM_MspPostInit+0x114>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d11f      	bne.n	8003b0c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad2:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <HAL_TIM_MspPostInit+0x104>)
 8003ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003aea:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	2300      	movs	r3, #0
 8003afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003afc:	2302      	movs	r3, #2
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4619      	mov	r1, r3
 8003b06:	4807      	ldr	r0, [pc, #28]	; (8003b24 <HAL_TIM_MspPostInit+0x110>)
 8003b08:	f005 f848 	bl	8008b9c <HAL_GPIO_Init>
}
 8003b0c:	bf00      	nop
 8003b0e:	3728      	adds	r7, #40	; 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40010000 	.word	0x40010000
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	58020000 	.word	0x58020000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	58020400 	.word	0x58020400
 8003b28:	40000800 	.word	0x40000800

08003b2c <mux_select_pin>:
uint16_t ADC_values[NUM_ADC_CHANNELS] __ATTR_RAM_D2;

const int mux_sel_pin[3] = {MUX_SEL_PIN_A, MUX_SEL_PIN_B, MUX_SEL_PIN_C};

void mux_select_pin(int pin)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; i++){
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e01f      	b.n	8003b7a <mux_select_pin+0x4e>
		if(pin & (1 << i)){
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	fa42 f303 	asr.w	r3, r2, r3
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <mux_select_pin+0x34>
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_SET);
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <mux_select_pin+0x60>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2201      	movs	r2, #1
 8003b56:	4619      	mov	r1, r3
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <mux_select_pin+0x64>)
 8003b5a:	f005 f9e7 	bl	8008f2c <HAL_GPIO_WritePin>
 8003b5e:	e009      	b.n	8003b74 <mux_select_pin+0x48>
		}
		else{
			HAL_GPIO_WritePin(MUX_SEL_REG, mux_sel_pin[i], GPIO_PIN_RESET);
 8003b60:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <mux_select_pin+0x60>)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4808      	ldr	r0, [pc, #32]	; (8003b90 <mux_select_pin+0x64>)
 8003b70:	f005 f9dc 	bl	8008f2c <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++){
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	dddc      	ble.n	8003b3a <mux_select_pin+0xe>
		}
	}
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0801926c 	.word	0x0801926c
 8003b90:	58020400 	.word	0x58020400

08003b94 <mux_pull_values>:


void mux_pull_values(float *x, float *y, float *fc, float *vari, int i){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]

	mux_select_pin(i);
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7ff ffc2 	bl	8003b2c <mux_select_pin>
	x[i] = ADC_values[6];
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <mux_pull_values+0x78>)
 8003baa:	8999      	ldrh	r1, [r3, #12]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	ee07 1a90 	vmov	s15, r1
 8003bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbc:	edc3 7a00 	vstr	s15, [r3]
	y[i] = ADC_values[7];
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <mux_pull_values+0x78>)
 8003bc2:	89d9      	ldrh	r1, [r3, #14]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4413      	add	r3, r2
 8003bcc:	ee07 1a90 	vmov	s15, r1
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	edc3 7a00 	vstr	s15, [r3]
	fc[i] = i;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	ee07 2a90 	vmov	s15, r2
 8003be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bea:	edc3 7a00 	vstr	s15, [r3]
	vari[i] = i;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	ee07 2a90 	vmov	s15, r2
 8003bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c00:	edc3 7a00 	vstr	s15, [r3]
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	30000440 	.word	0x30000440

08003c10 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <MX_USART6_UART_Init+0x94>)
 8003c18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003c1a:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c22:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c36:	2204      	movs	r2, #4
 8003c38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c58:	4811      	ldr	r0, [pc, #68]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c5a:	f00e fc7d 	bl	8012558 <HAL_UART_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003c64:	f7fe ff5e 	bl	8002b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c68:	2100      	movs	r1, #0
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c6c:	f00f fc7f 	bl	801356e <HAL_UARTEx_SetTxFifoThreshold>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003c76:	f7fe ff55 	bl	8002b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c7e:	f00f fcb4 	bl	80135ea <HAL_UARTEx_SetRxFifoThreshold>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003c88:	f7fe ff4c 	bl	8002b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003c8c:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <MX_USART6_UART_Init+0x90>)
 8003c8e:	f00f fc35 	bl	80134fc <HAL_UARTEx_DisableFifoMode>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003c98:	f7fe ff44 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20001c08 	.word	0x20001c08
 8003ca4:	40011400 	.word	0x40011400

08003ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b0bc      	sub	sp, #240	; 0xf0
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cc0:	f107 0318 	add.w	r3, r7, #24
 8003cc4:	22c0      	movs	r2, #192	; 0xc0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f013 fa1d 	bl	8017108 <memset>
  if(uartHandle->Instance==USART6)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <HAL_UART_MspInit+0x110>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d16a      	bne.n	8003dae <HAL_UART_MspInit+0x106>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003cd8:	f04f 0201 	mov.w	r2, #1
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cea:	f107 0318 	add.w	r3, r7, #24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f008 faa6 	bl	800c240 <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003cfa:	f7fe ff13 	bl	8002b24 <Error_Handler>
    }

    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d04:	4a2d      	ldr	r2, [pc, #180]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d22:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <HAL_UART_MspInit+0x114>)
 8003d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003d70:	2307      	movs	r3, #7
 8003d72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4810      	ldr	r0, [pc, #64]	; (8003dc0 <HAL_UART_MspInit+0x118>)
 8003d7e:	f004 ff0d 	bl	8008b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003da2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003da6:	4619      	mov	r1, r3
 8003da8:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <HAL_UART_MspInit+0x11c>)
 8003daa:	f004 fef7 	bl	8008b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003dae:	bf00      	nop
 8003db0:	37f0      	adds	r7, #240	; 0xf0
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	58024400 	.word	0x58024400
 8003dc0:	58020800 	.word	0x58020800
 8003dc4:	58021800 	.word	0x58021800

08003dc8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	490f      	ldr	r1, [pc, #60]	; (8003e0c <MX_USB_HOST_Init+0x44>)
 8003dd0:	480f      	ldr	r0, [pc, #60]	; (8003e10 <MX_USB_HOST_Init+0x48>)
 8003dd2:	f011 fb73 	bl	80154bc <USBH_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8003ddc:	f7fe fea2 	bl	8002b24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8003de0:	490c      	ldr	r1, [pc, #48]	; (8003e14 <MX_USB_HOST_Init+0x4c>)
 8003de2:	480b      	ldr	r0, [pc, #44]	; (8003e10 <MX_USB_HOST_Init+0x48>)
 8003de4:	f011 fc19 	bl	801561a <USBH_RegisterClass>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8003dee:	f7fe fe99 	bl	8002b24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003df2:	4807      	ldr	r0, [pc, #28]	; (8003e10 <MX_USB_HOST_Init+0x48>)
 8003df4:	f011 fc9e 	bl	8015734 <USBH_Start>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8003dfe:	f7fe fe91 	bl	8002b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8003e02:	f007 fa27 	bl	800b254 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	30000460 	.word	0x30000460
 8003e14:	20000014 	.word	0x20000014

08003e18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8003e1c:	4803      	ldr	r0, [pc, #12]	; (8003e2c <MX_USB_HOST_Process+0x14>)
 8003e1e:	f011 fcb5 	bl	801578c <USBH_Process>
  MIDI_Application();
 8003e22:	f7fc ff8f 	bl	8000d44 <MIDI_Application>
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	30000460 	.word	0x30000460

08003e30 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d839      	bhi.n	8003eb8 <USBH_UserProcess+0x88>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <USBH_UserProcess+0x1c>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003eb9 	.word	0x08003eb9
 8003e50:	08003ea3 	.word	0x08003ea3
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003eb1 	.word	0x08003eb1
 8003e5c:	08003e61 	.word	0x08003e61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <USBH_UserProcess+0x94>)
 8003e62:	2203      	movs	r2, #3
 8003e64:	701a      	strb	r2, [r3, #0]
  //reset the USB stuff - to handle cases where disconnection put USB into an unrecoverable state for some reason
	USBH_Stop(&hUsbHostFS);
 8003e66:	4818      	ldr	r0, [pc, #96]	; (8003ec8 <USBH_UserProcess+0x98>)
 8003e68:	f011 fc74 	bl	8015754 <USBH_Stop>
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e007      	b.n	8003e82 <USBH_UserProcess+0x52>
	{
		MIDI_RX_Buffer[i] = 0;
 8003e72:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <USBH_UserProcess+0x9c>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RX_BUFF_SIZE; i++)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b3f      	cmp	r3, #63	; 0x3f
 8003e86:	ddf4      	ble.n	8003e72 <USBH_UserProcess+0x42>
	}
	//HAL_Delay(1);
	USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8003e88:	2201      	movs	r2, #1
 8003e8a:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <USBH_UserProcess+0xa0>)
 8003e8c:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <USBH_UserProcess+0x98>)
 8003e8e:	f011 fb15 	bl	80154bc <USBH_Init>
	USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS);
 8003e92:	4910      	ldr	r1, [pc, #64]	; (8003ed4 <USBH_UserProcess+0xa4>)
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <USBH_UserProcess+0x98>)
 8003e96:	f011 fbc0 	bl	801561a <USBH_RegisterClass>
	USBH_Start(&hUsbHostFS);
 8003e9a:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <USBH_UserProcess+0x98>)
 8003e9c:	f011 fc4a 	bl	8015734 <USBH_Start>
	break;
 8003ea0:	e00b      	b.n	8003eba <USBH_UserProcess+0x8a>


  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <USBH_UserProcess+0x94>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	701a      	strb	r2, [r3, #0]
  MIDI_Appli_state = MIDI_APPLICATION_READY;
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <USBH_UserProcess+0xa8>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
  break;
 8003eae:	e004      	b.n	8003eba <USBH_UserProcess+0x8a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <USBH_UserProcess+0x94>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
  break;
 8003eb6:	e000      	b.n	8003eba <USBH_UserProcess+0x8a>

  default:
  break;
 8003eb8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001c9c 	.word	0x20001c9c
 8003ec8:	30000460 	.word	0x30000460
 8003ecc:	30000000 	.word	0x30000000
 8003ed0:	08003e31 	.word	0x08003e31
 8003ed4:	20000014 	.word	0x20000014
 8003ed8:	20000000 	.word	0x20000000

08003edc <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8003eec:	23ff      	movs	r3, #255	; 0xff
 8003eee:	2203      	movs	r2, #3
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f011 fbd8 	bl	80156a8 <USBH_FindInterface>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8003efc:	7bbb      	ldrb	r3, [r7, #14]
 8003efe:	2bff      	cmp	r3, #255	; 0xff
 8003f00:	d102      	bne.n	8003f08 <USBH_MIDI_InterfaceInit+0x2c>
	{
		USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.", phost->pActiveClass->Name);
		status = USBH_FAIL;
 8003f02:	2302      	movs	r3, #2
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e0f2      	b.n	80040ee <USBH_MIDI_InterfaceInit+0x212>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8003f08:	7bbb      	ldrb	r3, [r7, #14]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f011 fbaf 	bl	8015670 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8003f18:	201c      	movs	r0, #28
 8003f1a:	f013 f839 	bl	8016f90 <malloc>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  phost->pActiveClass->pData;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60bb      	str	r3, [r7, #8]

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003f32:	4619      	mov	r1, r3
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	231a      	movs	r3, #26
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da1c      	bge.n	8003f84 <USBH_MIDI_InterfaceInit+0xa8>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003f50:	4619      	mov	r1, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	231a      	movs	r3, #26
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	231a      	movs	r3, #26
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	811a      	strh	r2, [r3, #8]
 8003f82:	e01b      	b.n	8003fbc <USBH_MIDI_InterfaceInit+0xe0>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	231a      	movs	r3, #26
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	231a      	movs	r3, #26
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	231a      	movs	r3, #26
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	f203 3356 	addw	r3, r3, #854	; 0x356
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da1c      	bge.n	8004014 <USBH_MIDI_InterfaceInit+0x138>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	231a      	movs	r3, #26
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	231a      	movs	r3, #26
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	811a      	strh	r2, [r3, #8]
 8004012:	e01b      	b.n	800404c <USBH_MIDI_InterfaceInit+0x170>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800401a:	4619      	mov	r1, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	231a      	movs	r3, #26
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	f203 3356 	addw	r3, r3, #854	; 0x356
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8004036:	4619      	mov	r1, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	231a      	movs	r3, #26
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	78db      	ldrb	r3, [r3, #3]
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f012 fed9 	bl	8016e0a <USBH_AllocPipe>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	791b      	ldrb	r3, [r3, #4]
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f012 fecf 	bl	8016e0a <USBH_AllocPipe>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	7899      	ldrb	r1, [r3, #2]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	78d8      	ldrb	r0, [r3, #3]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	88d2      	ldrh	r2, [r2, #6]
 800408c:	9202      	str	r2, [sp, #8]
 800408e:	2202      	movs	r2, #2
 8004090:	9201      	str	r2, [sp, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4623      	mov	r3, r4
 8004096:	4602      	mov	r2, r0
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f012 fe87 	bl	8016dac <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	7859      	ldrb	r1, [r3, #1]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	7918      	ldrb	r0, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	8912      	ldrh	r2, [r2, #8]
 80040b6:	9202      	str	r2, [sp, #8]
 80040b8:	2202      	movs	r2, #2
 80040ba:	9201      	str	r2, [sp, #4]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	4623      	mov	r3, r4
 80040c0:	4602      	mov	r2, r0
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f012 fe72 	bl	8016dac <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	2200      	movs	r2, #0
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fbf6 	bl	80048c8 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	789b      	ldrb	r3, [r3, #2]
 80040e0:	2200      	movs	r2, #0
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fbef 	bl	80048c8 <USBH_LL_SetToggle>
		status = USBH_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	789b      	ldrb	r3, [r3, #2]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f012 fe66 	bl	8016dea <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	789b      	ldrb	r3, [r3, #2]
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f012 fe92 	bl	8016e4e <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f012 fe53 	bl	8016dea <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f012 fe7f 	bl	8016e4e <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4618      	mov	r0, r3
 800416c:	f012 ff18 	bl	8016fa0 <free>
		phost->pActiveClass->pData = 0;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004176:	2200      	movs	r2, #0
 8004178:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8004192:	2102      	movs	r1, #2
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3

	return USBH_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b0b      	cmp	r3, #11
 80041bc:	d10e      	bne.n	80041dc <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f012 fe0d 	bl	8016dea <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	789b      	ldrb	r3, [r3, #2]
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f012 fe07 	bl	8016dea <USBH_ClosePipe>
  }
  return USBH_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <USBH_MIDI_Process>:
 * @param  phost: Host handle
 * @retval USBH Status
 */
uint32_t transferCounter = 0;
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d012      	beq.n	800422e <USBH_MIDI_Process+0x48>
 8004208:	2b02      	cmp	r3, #2
 800420a:	dc1d      	bgt.n	8004248 <USBH_MIDI_Process+0x62>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <USBH_MIDI_Process+0x30>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d003      	beq.n	800421c <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8004214:	e018      	b.n	8004248 <USBH_MIDI_Process+0x62>
		status = USBH_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
		break;
 800421a:	e018      	b.n	800424e <USBH_MIDI_Process+0x68>
		MIDI_ProcessTransmission(phost);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f851 	bl	80042c4 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8c0 	bl	80043a8 <MIDI_ProcessReception>
		status = USBH_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
		break;
 800422c:	e00f      	b.n	800424e <USBH_MIDI_Process+0x68>
		req_status = USBH_ClrFeature(phost, 0x00);
 800422e:	2100      	movs	r1, #0
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f012 f837 	bl	80162a4 <USBH_ClrFeature>
 8004236:	4603      	mov	r3, r0
 8004238:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 800423a:	7bbb      	ldrb	r3, [r7, #14]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <USBH_MIDI_Process+0x66>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
		break;
 8004246:	e001      	b.n	800424c <USBH_MIDI_Process+0x66>
		break;
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <USBH_MIDI_Process+0x68>
		break;
 800424c:	bf00      	nop

	}

	return status;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	return USBH_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <USBH_MIDI_Receive>:
 * @param  None
 * @retval None
 */
uint8_t tempArray[32];
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <USBH_MIDI_Receive+0x2c>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10d      	bne.n	80042b6 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2203      	movs	r2, #3
 80042b0:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	7e1b      	ldrb	r3, [r3, #24]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d002      	beq.n	80042e8 <MIDI_ProcessTransmission+0x24>
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d021      	beq.n	800432a <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80042e6:	e05a      	b.n	800439e <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8a9a      	ldrh	r2, [r3, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88db      	ldrh	r3, [r3, #6]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d90b      	bls.n	800430c <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88da      	ldrh	r2, [r3, #6]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	2001      	movs	r0, #1
 8004302:	9000      	str	r0, [sp, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f012 fd0e 	bl	8016d26 <USBH_BulkSendData>
 800430a:	e00a      	b.n	8004322 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68d9      	ldr	r1, [r3, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8a9a      	ldrh	r2, [r3, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	789b      	ldrb	r3, [r3, #2]
 8004318:	2001      	movs	r0, #1
 800431a:	9000      	str	r0, [sp, #0]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f012 fd02 	bl	8016d26 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2202      	movs	r2, #2
 8004326:	761a      	strb	r2, [r3, #24]
		break;
 8004328:	e039      	b.n	800439e <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	789b      	ldrb	r3, [r3, #2]
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa9f 	bl	8004874 <USBH_LL_GetURBState>
 8004336:	4603      	mov	r3, r0
 8004338:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 800433a:	7afb      	ldrb	r3, [r7, #11]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d127      	bne.n	8004390 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8a9a      	ldrh	r2, [r3, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88db      	ldrh	r3, [r3, #6]
 8004348:	429a      	cmp	r2, r3
 800434a:	d90f      	bls.n	800436c <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8a9a      	ldrh	r2, [r3, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88db      	ldrh	r3, [r3, #6]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	88d2      	ldrh	r2, [r2, #6]
 8004364:	441a      	add	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e002      	b.n	8004372 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8a9b      	ldrh	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	761a      	strb	r2, [r3, #24]
		break;
 8004380:	e00c      	b.n	800439c <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f86d 	bl	8004468 <USBH_MIDI_TransmitCallback>
		break;
 800438e:	e005      	b.n	800439c <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8004390:	7afb      	ldrb	r3, [r7, #11]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d102      	bne.n	800439c <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	761a      	strb	r2, [r3, #24]
		break;
 800439c:	bf00      	nop
	}
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <MIDI_ProcessReception>:
uint32_t callbackCounter = 0;
uint32_t callbackFailCounter = 0;
uint8_t prevTestData[8] = {0};
uint8_t doTheThing = 0;
static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	617b      	str	r3, [r7, #20]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	74fb      	strb	r3, [r7, #19]
	uint32_t length;

	switch(MIDI_Handle->data_rx_state)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	7e5b      	ldrb	r3, [r3, #25]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d002      	beq.n	80043cc <MIDI_ProcessReception+0x24>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d00d      	beq.n	80043e6 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 80043ca:	e047      	b.n	800445c <MIDI_ProcessReception+0xb4>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2204      	movs	r2, #4
 80043d0:	765a      	strb	r2, [r3, #25]
		USBH_BulkReceiveData (phost,
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	891a      	ldrh	r2, [r3, #8]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f012 fcc6 	bl	8016d70 <USBH_BulkReceiveData>
		break;
 80043e4:	e03a      	b.n	800445c <MIDI_ProcessReception+0xb4>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa41 	bl	8004874 <USBH_LL_GetURBState>
 80043f2:	4603      	mov	r3, r0
 80043f4:	74fb      	strb	r3, [r7, #19]
		if((URB_Status == USBH_URB_DONE ) )
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d12e      	bne.n	800445a <MIDI_ProcessReception+0xb2>
			usbFailCounter = 0;
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <MIDI_ProcessReception+0xbc>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f9a1 	bl	8004750 <USBH_LL_GetLastXferSize>
 800440e:	60f8      	str	r0, [r7, #12]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	8adb      	ldrh	r3, [r3, #22]
 8004414:	461a      	mov	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4293      	cmp	r3, r2
 800441a:	d017      	beq.n	800444c <MIDI_ProcessReception+0xa4>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	891b      	ldrh	r3, [r3, #8]
 8004420:	461a      	mov	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4293      	cmp	r3, r2
 8004426:	d911      	bls.n	800444c <MIDI_ProcessReception+0xa4>
				MIDI_Handle->RxDataLength -= length ;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	8ada      	ldrh	r2, [r3, #22]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	b29b      	uxth	r3, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b29a      	uxth	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	441a      	add	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2203      	movs	r2, #3
 8004448:	765a      	strb	r2, [r3, #25]
		break;
 800444a:	e006      	b.n	800445a <MIDI_ProcessReception+0xb2>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2200      	movs	r2, #0
 8004450:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost, length);
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fc fe15 	bl	8001084 <USBH_MIDI_ReceiveCallback>
		break;
 800445a:	bf00      	nop
	}
}
 800445c:	bf00      	nop
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20001ca0 	.word	0x20001ca0

08004468 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <HAL_HCD_MspInit+0xb8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d146      	bne.n	800452c <HAL_HCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	4b26      	ldr	r3, [pc, #152]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a4:	4a24      	ldr	r2, [pc, #144]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80044bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80044c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ca:	2303      	movs	r3, #3
 80044cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80044ce:	230a      	movs	r3, #10
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d2:	f107 0314 	add.w	r3, r7, #20
 80044d6:	4619      	mov	r1, r3
 80044d8:	4818      	ldr	r0, [pc, #96]	; (800453c <HAL_HCD_MspInit+0xc0>)
 80044da:	f004 fb5f 	bl	8008b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80044de:	4b16      	ldr	r3, [pc, #88]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_HCD_MspInit+0xbc>)
 80044f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 6, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2106      	movs	r1, #6
 8004500:	2062      	movs	r0, #98	; 0x62
 8004502:	f002 f9b6 	bl	8006872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004506:	2062      	movs	r0, #98	; 0x62
 8004508:	f002 f9cd 	bl	80068a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 6, 0);
 800450c:	2200      	movs	r2, #0
 800450e:	2106      	movs	r1, #6
 8004510:	2063      	movs	r0, #99	; 0x63
 8004512:	f002 f9ae 	bl	8006872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8004516:	2063      	movs	r0, #99	; 0x63
 8004518:	f002 f9c5 	bl	80068a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2100      	movs	r1, #0
 8004520:	2065      	movs	r0, #101	; 0x65
 8004522:	f002 f9a6 	bl	8006872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004526:	2065      	movs	r0, #101	; 0x65
 8004528:	f002 f9bd 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800452c:	bf00      	nop
 800452e:	3728      	adds	r7, #40	; 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40080000 	.word	0x40080000
 8004538:	58024400 	.word	0x58024400
 800453c:	58020000 	.word	0x58020000

08004540 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800454e:	4618      	mov	r0, r3
 8004550:	f011 fcfd 	bl	8015f4e <USBH_LL_IncTimer>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800456a:	4618      	mov	r0, r3
 800456c:	f011 fd35 	bl	8015fda <USBH_LL_Connect>
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004586:	4618      	mov	r0, r3
 8004588:	f011 fd3e 	bl	8016008 <USBH_LL_Disconnect>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
 80045a0:	4613      	mov	r3, r2
 80045a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80045be:	4618      	mov	r0, r3
 80045c0:	f011 fcef 	bl	8015fa2 <USBH_LL_PortEnabled>
} 
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80045da:	4618      	mov	r0, r3
 80045dc:	f011 fcef 	bl	8015fbe <USBH_LL_PortDisabled>
} 
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d129      	bne.n	800464e <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <USBH_LL_Init+0x70>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <USBH_LL_Init+0x70>)
 8004606:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <USBH_LL_Init+0x70>)
 800460c:	4a13      	ldr	r2, [pc, #76]	; (800465c <USBH_LL_Init+0x74>)
 800460e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <USBH_LL_Init+0x70>)
 8004612:	2210      	movs	r2, #16
 8004614:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <USBH_LL_Init+0x70>)
 8004618:	2201      	movs	r2, #1
 800461a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <USBH_LL_Init+0x70>)
 800461e:	2201      	movs	r2, #1
 8004620:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <USBH_LL_Init+0x70>)
 8004624:	2202      	movs	r2, #2
 8004626:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <USBH_LL_Init+0x70>)
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800462e:	480a      	ldr	r0, [pc, #40]	; (8004658 <USBH_LL_Init+0x70>)
 8004630:	f004 fc95 	bl	8008f5e <HAL_HCD_Init>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800463a:	f7fe fa73 	bl	8002b24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800463e:	4806      	ldr	r0, [pc, #24]	; (8004658 <USBH_LL_Init+0x70>)
 8004640:	f005 f87d 	bl	800973e <HAL_HCD_GetCurrentFrame>
 8004644:	4603      	mov	r3, r0
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f011 fc71 	bl	8015f30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20001ca4 	.word	0x20001ca4
 800465c:	40080000 	.word	0x40080000

08004660 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004676:	4618      	mov	r0, r3
 8004678:	f004 ffeb 	bl	8009652 <HAL_HCD_Start>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f95c 	bl	8004940 <USBH_Get_USB_Status>
 8004688:	4603      	mov	r3, r0
 800468a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800468c:	7bbb      	ldrb	r3, [r7, #14]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f004 fff3 	bl	8009698 <HAL_HCD_Stop>
 80046b2:	4603      	mov	r3, r0
 80046b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f941 	bl	8004940 <USBH_Get_USB_Status>
 80046be:	4603      	mov	r3, r0
 80046c0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80046de:	4618      	mov	r0, r3
 80046e0:	f005 f83b 	bl	800975a <HAL_HCD_GetCurrentSpeed>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d00c      	beq.n	8004704 <USBH_LL_GetSpeed+0x38>
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d80d      	bhi.n	800470a <USBH_LL_GetSpeed+0x3e>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <USBH_LL_GetSpeed+0x2c>
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d003      	beq.n	80046fe <USBH_LL_GetSpeed+0x32>
 80046f6:	e008      	b.n	800470a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
    break;
 80046fc:	e008      	b.n	8004710 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
    break;
 8004702:	e005      	b.n	8004710 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8004704:	2302      	movs	r3, #2
 8004706:	73fb      	strb	r3, [r7, #15]
    break;
 8004708:	e002      	b.n	8004710 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
    break;
 800470e:	bf00      	nop
  }
  return  speed;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004730:	4618      	mov	r0, r3
 8004732:	f004 ffce 	bl	80096d2 <HAL_HCD_ResetPort>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f8ff 	bl	8004940 <USBH_Get_USB_Status>
 8004742:	4603      	mov	r3, r0
 8004744:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004746:	7bbb      	ldrb	r3, [r7, #14]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	4611      	mov	r1, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f004 ffd5 	bl	8009716 <HAL_HCD_HC_GetXferCount>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004776:	b590      	push	{r4, r7, lr}
 8004778:	b089      	sub	sp, #36	; 0x24
 800477a:	af04      	add	r7, sp, #16
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	4608      	mov	r0, r1
 8004780:	4611      	mov	r1, r2
 8004782:	461a      	mov	r2, r3
 8004784:	4603      	mov	r3, r0
 8004786:	70fb      	strb	r3, [r7, #3]
 8004788:	460b      	mov	r3, r1
 800478a:	70bb      	strb	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800479e:	787c      	ldrb	r4, [r7, #1]
 80047a0:	78ba      	ldrb	r2, [r7, #2]
 80047a2:	78f9      	ldrb	r1, [r7, #3]
 80047a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4623      	mov	r3, r4
 80047b6:	f004 fc34 	bl	8009022 <HAL_HCD_HC_Init>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f8bd 	bl	8004940 <USBH_Get_USB_Status>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd90      	pop	{r4, r7, pc}

080047d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fca4 	bl	8009140 <HAL_HCD_HC_Halt>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f89e 	bl	8004940 <USBH_Get_USB_Status>
 8004804:	4603      	mov	r3, r0
 8004806:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004808:	7bbb      	ldrb	r3, [r7, #14]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004812:	b590      	push	{r4, r7, lr}
 8004814:	b089      	sub	sp, #36	; 0x24
 8004816:	af04      	add	r7, sp, #16
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	4608      	mov	r0, r1
 800481c:	4611      	mov	r1, r2
 800481e:	461a      	mov	r2, r3
 8004820:	4603      	mov	r3, r0
 8004822:	70fb      	strb	r3, [r7, #3]
 8004824:	460b      	mov	r3, r1
 8004826:	70bb      	strb	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800483a:	787c      	ldrb	r4, [r7, #1]
 800483c:	78ba      	ldrb	r2, [r7, #2]
 800483e:	78f9      	ldrb	r1, [r7, #3]
 8004840:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004844:	9303      	str	r3, [sp, #12]
 8004846:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004848:	9302      	str	r3, [sp, #8]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4623      	mov	r3, r4
 8004856:	f004 fc97 	bl	8009188 <HAL_HCD_HC_SubmitRequest>
 800485a:	4603      	mov	r3, r0
 800485c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f86d 	bl	8004940 <USBH_Get_USB_Status>
 8004866:	4603      	mov	r3, r0
 8004868:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800486a:	7bbb      	ldrb	r3, [r7, #14]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f004 ff2f 	bl	80096ee <HAL_HCD_HC_GetURBState>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d103      	bne.n	80048b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f870 	bl	8004998 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80048b8:	20c8      	movs	r0, #200	; 0xc8
 80048ba:	f000 f945 	bl	8004b48 <HAL_Delay>
  return USBH_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	4613      	mov	r3, r2
 80048d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80048de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	333b      	adds	r3, #59	; 0x3b
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3354      	adds	r3, #84	; 0x54
 8004902:	78ba      	ldrb	r2, [r7, #2]
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e008      	b.n	800491a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	3355      	adds	r3, #85	; 0x55
 8004916:	78ba      	ldrb	r2, [r7, #2]
 8004918:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f909 	bl	8004b48 <HAL_Delay>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d817      	bhi.n	8004984 <USBH_Get_USB_Status+0x44>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <USBH_Get_USB_Status+0x1c>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	0800496d 	.word	0x0800496d
 8004960:	08004973 	.word	0x08004973
 8004964:	08004979 	.word	0x08004979
 8004968:	0800497f 	.word	0x0800497f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
    break;
 8004970:	e00b      	b.n	800498a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004972:	2302      	movs	r3, #2
 8004974:	73fb      	strb	r3, [r7, #15]
    break;
 8004976:	e008      	b.n	800498a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
    break;
 800497c:	e005      	b.n	800498a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800497e:	2302      	movs	r3, #2
 8004980:	73fb      	strb	r3, [r7, #15]
    break;
 8004982:	e002      	b.n	800498a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004984:	2302      	movs	r3, #2
 8004986:	73fb      	strb	r3, [r7, #15]
    break;
 8004988:	bf00      	nop
  }
  return usb_status;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e001      	b.n	80049b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,(GPIO_PinState)data);
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049be:	4803      	ldr	r0, [pc, #12]	; (80049cc <MX_DriverVbusFS+0x34>)
 80049c0:	f004 fab4 	bl	8008f2c <HAL_GPIO_WritePin>
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	58020400 	.word	0x58020400

080049d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049d6:	e003      	b.n	80049e0 <LoopCopyDataInit>

080049d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049de:	3104      	adds	r1, #4

080049e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049e0:	480b      	ldr	r0, [pc, #44]	; (8004a10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049e8:	d3f6      	bcc.n	80049d8 <CopyDataInit>
  ldr  r2, =_sbss
 80049ea:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049ec:	e002      	b.n	80049f4 <LoopFillZerobss>

080049ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80049f0:	f842 3b04 	str.w	r3, [r2], #4

080049f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049f8:	d3f9      	bcc.n	80049ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049fa:	f7fe fd6b 	bl	80034d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049fe:	f012 fba1 	bl	8017144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a02:	f7fd fe09 	bl	8002618 <main>
  bx  lr    
 8004a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a0c:	080192b8 	.word	0x080192b8
  ldr  r0, =_sdata
 8004a10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a14:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004a18:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8004a1c:	20002100 	.word	0x20002100

08004a20 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a20:	e7fe      	b.n	8004a20 <ADC3_IRQHandler>
	...

08004a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f001 ff16 	bl	800685c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a30:	f007 fa30 	bl	800be94 <HAL_RCC_GetSysClockFreq>
 8004a34:	4602      	mov	r2, r0
 8004a36:	4b15      	ldr	r3, [pc, #84]	; (8004a8c <HAL_Init+0x68>)
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	4913      	ldr	r1, [pc, #76]	; (8004a90 <HAL_Init+0x6c>)
 8004a42:	5ccb      	ldrb	r3, [r1, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_Init+0x68>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_Init+0x6c>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <HAL_Init+0x70>)
 8004a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <HAL_Init+0x74>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f000 f814 	bl	8004a9c <HAL_InitTick>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e002      	b.n	8004a84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a7e:	f7fe fc6f 	bl	8003360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	58024400 	.word	0x58024400
 8004a90:	0801925c 	.word	0x0801925c
 8004a94:	20000010 	.word	0x20000010
 8004a98:	2000000c 	.word	0x2000000c

08004a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_InitTick+0x60>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e021      	b.n	8004af4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004ab0:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <HAL_InitTick+0x64>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_InitTick+0x60>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fefb 	bl	80068c2 <HAL_SYSTICK_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e00e      	b.n	8004af4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d80a      	bhi.n	8004af2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004adc:	2200      	movs	r2, #0
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ae4:	f001 fec5 	bl	8006872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ae8:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <HAL_InitTick+0x68>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000038 	.word	0x20000038
 8004b00:	2000000c 	.word	0x2000000c
 8004b04:	20000034 	.word	0x20000034

08004b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_IncTick+0x20>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_IncTick+0x24>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4413      	add	r3, r2
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <HAL_IncTick+0x24>)
 8004b1a:	6013      	str	r3, [r2, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000038 	.word	0x20000038
 8004b2c:	20001fa8 	.word	0x20001fa8

08004b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return uwTick;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_GetTick+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20001fa8 	.word	0x20001fa8

08004b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b50:	f7ff ffee 	bl	8004b30 <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b60:	d005      	beq.n	8004b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_Delay+0x44>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b6e:	bf00      	nop
 8004b70:	f7ff ffde 	bl	8004b30 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d8f7      	bhi.n	8004b70 <HAL_Delay+0x28>
  {
  }
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000038 	.word	0x20000038

08004b90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_GetREVID+0x14>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0c1b      	lsrs	r3, r3, #16
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	5c001000 	.word	0x5c001000

08004ba8 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bb8:	4904      	ldr	r1, [pc, #16]	; (8004bcc <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	52004000 	.word	0x52004000

08004bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3360      	adds	r3, #96	; 0x60
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	431a      	orrs	r2, r3
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	611a      	str	r2, [r3, #16]
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b087      	sub	sp, #28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3360      	adds	r3, #96	; 0x60
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	601a      	str	r2, [r3, #0]
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b087      	sub	sp, #28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3330      	adds	r3, #48	; 0x30
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	4413      	add	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	211f      	movs	r1, #31
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	401a      	ands	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0e9b      	lsrs	r3, r3, #26
 8004d3e:	f003 011f 	and.w	r1, r3, #31
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f023 0203 	bic.w	r2, r3, #3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d90:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b087      	sub	sp, #28
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3314      	adds	r3, #20
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	0e5b      	lsrs	r3, r3, #25
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	4413      	add	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	0d1b      	lsrs	r3, r3, #20
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2107      	movs	r1, #7
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	401a      	ands	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0d1b      	lsrs	r3, r3, #20
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	fa01 f303 	lsl.w	r3, r1, r3
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004df4:	bf00      	nop
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f003 0318 	and.w	r3, r3, #24
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004e24:	40d9      	lsrs	r1, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	400b      	ands	r3, r1
 8004e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	000fffff 	.word	0x000fffff

08004e48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 031f 	and.w	r3, r3, #31
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6093      	str	r3, [r2, #8]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	5fffffc0 	.word	0x5fffffc0

08004ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb8:	d101      	bne.n	8004ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <LL_ADC_EnableInternalRegulator+0x24>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	6fffffc0 	.word	0x6fffffc0

08004ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f08:	d101      	bne.n	8004f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <LL_ADC_Enable+0x24>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	f043 0201 	orr.w	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	7fffffc0 	.word	0x7fffffc0

08004f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <LL_ADC_IsEnabled+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <LL_ADC_IsEnabled+0x1a>
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <LL_ADC_REG_StartConversion+0x24>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	7fffffc0 	.word	0x7fffffc0

08004f94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d101      	bne.n	8004fac <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d101      	bne.n	8004fd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b089      	sub	sp, #36	; 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e18f      	b.n	800531a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fc f9d9 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff3f 	bl	8004ea4 <LL_ADC_IsDeepPowerDownEnabled>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff25 	bl	8004e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ff5a 	bl	8004ef4 <LL_ADC_IsInternalRegulatorEnabled>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d114      	bne.n	8005070 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff3e 	bl	8004ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005050:	4b87      	ldr	r3, [pc, #540]	; (8005270 <HAL_ADC_Init+0x290>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	099b      	lsrs	r3, r3, #6
 8005056:	4a87      	ldr	r2, [pc, #540]	; (8005274 <HAL_ADC_Init+0x294>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	099b      	lsrs	r3, r3, #6
 800505e:	3301      	adds	r3, #1
 8005060:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005062:	e002      	b.n	800506a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	3b01      	subs	r3, #1
 8005068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f9      	bne.n	8005064 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ff3d 	bl	8004ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff77 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 80050a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 8129 	bne.w	8005308 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8125 	bne.w	8005308 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80050c6:	f043 0202 	orr.w	r2, r3, #2
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ff36 	bl	8004f44 <LL_ADC_IsEnabled>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d136      	bne.n	800514c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a65      	ldr	r2, [pc, #404]	; (8005278 <HAL_ADC_Init+0x298>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_ADC_Init+0x112>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a63      	ldr	r2, [pc, #396]	; (800527c <HAL_ADC_Init+0x29c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10e      	bne.n	8005110 <HAL_ADC_Init+0x130>
 80050f2:	4861      	ldr	r0, [pc, #388]	; (8005278 <HAL_ADC_Init+0x298>)
 80050f4:	f7ff ff26 	bl	8004f44 <LL_ADC_IsEnabled>
 80050f8:	4604      	mov	r4, r0
 80050fa:	4860      	ldr	r0, [pc, #384]	; (800527c <HAL_ADC_Init+0x29c>)
 80050fc:	f7ff ff22 	bl	8004f44 <LL_ADC_IsEnabled>
 8005100:	4603      	mov	r3, r0
 8005102:	4323      	orrs	r3, r4
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e008      	b.n	8005122 <HAL_ADC_Init+0x142>
 8005110:	485b      	ldr	r0, [pc, #364]	; (8005280 <HAL_ADC_Init+0x2a0>)
 8005112:	f7ff ff17 	bl	8004f44 <LL_ADC_IsEnabled>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d012      	beq.n	800514c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a53      	ldr	r2, [pc, #332]	; (8005278 <HAL_ADC_Init+0x298>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_ADC_Init+0x15a>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a51      	ldr	r2, [pc, #324]	; (800527c <HAL_ADC_Init+0x29c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_ADC_Init+0x15e>
 800513a:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_ADC_Init+0x2a4>)
 800513c:	e000      	b.n	8005140 <HAL_ADC_Init+0x160>
 800513e:	4a52      	ldr	r2, [pc, #328]	; (8005288 <HAL_ADC_Init+0x2a8>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7ff fd42 	bl	8004bd0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800514c:	f7ff fd20 	bl	8004b90 <HAL_GetREVID>
 8005150:	4603      	mov	r3, r0
 8005152:	f241 0203 	movw	r2, #4099	; 0x1003
 8005156:	4293      	cmp	r3, r2
 8005158:	d914      	bls.n	8005184 <HAL_ADC_Init+0x1a4>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b10      	cmp	r3, #16
 8005160:	d110      	bne.n	8005184 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7d5b      	ldrb	r3, [r3, #21]
 8005166:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800516c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005172:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7f1b      	ldrb	r3, [r3, #28]
 8005178:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800517a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800517c:	f043 030c 	orr.w	r3, r3, #12
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e00d      	b.n	80051a0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7d5b      	ldrb	r3, [r3, #21]
 8005188:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800518e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005194:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7f1b      	ldrb	r3, [r3, #28]
 800519a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7f1b      	ldrb	r3, [r3, #28]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	045b      	lsls	r3, r3, #17
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	4b2c      	ldr	r3, [pc, #176]	; (800528c <HAL_ADC_Init+0x2ac>)
 80051da:	4013      	ands	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	430b      	orrs	r3, r1
 80051e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fed2 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 80051f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fedf 	bl	8004fba <LL_ADC_INJ_IsConversionOngoing>
 80051fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15f      	bne.n	80052c4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d15c      	bne.n	80052c4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7d1b      	ldrb	r3, [r3, #20]
 800520e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005214:	4313      	orrs	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <HAL_ADC_Init+0x2b0>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	69b9      	ldr	r1, [r7, #24]
 8005228:	430b      	orrs	r3, r1
 800522a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005232:	2b01      	cmp	r3, #1
 8005234:	d130      	bne.n	8005298 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <HAL_ADC_Init+0x2b4>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800524a:	3a01      	subs	r2, #1
 800524c:	0411      	lsls	r1, r2, #16
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005258:	4311      	orrs	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800525e:	430a      	orrs	r2, r1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	611a      	str	r2, [r3, #16]
 800526c:	e01c      	b.n	80052a8 <HAL_ADC_Init+0x2c8>
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c
 8005274:	053e2d63 	.word	0x053e2d63
 8005278:	40022000 	.word	0x40022000
 800527c:	40022100 	.word	0x40022100
 8005280:	58026000 	.word	0x58026000
 8005284:	40022300 	.word	0x40022300
 8005288:	58026300 	.word	0x58026300
 800528c:	fff0c003 	.word	0xfff0c003
 8005290:	ffffbffc 	.word	0xffffbffc
 8005294:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 ffba 	bl	8006238 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10c      	bne.n	80052e6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f023 010f 	bic.w	r1, r3, #15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
 80052e4:	e007      	b.n	80052f6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 020f 	bic.w	r2, r2, #15
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
 8005306:	e007      	b.n	8005318 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f043 0210 	orr.w	r2, r3, #16
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005318:	7ffb      	ldrb	r3, [r7, #31]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}
 8005322:	bf00      	nop

08005324 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a55      	ldr	r2, [pc, #340]	; (800548c <HAL_ADC_Start_DMA+0x168>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_ADC_Start_DMA+0x20>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a54      	ldr	r2, [pc, #336]	; (8005490 <HAL_ADC_Start_DMA+0x16c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_ADC_Start_DMA+0x24>
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_ADC_Start_DMA+0x170>)
 8005346:	e000      	b.n	800534a <HAL_ADC_Start_DMA+0x26>
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_ADC_Start_DMA+0x174>)
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fd7c 	bl	8004e48 <LL_ADC_GetMultimode>
 8005350:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fe1c 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 808c 	bne.w	800547c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_ADC_Start_DMA+0x4e>
 800536e:	2302      	movs	r3, #2
 8005370:	e087      	b.n	8005482 <HAL_ADC_Start_DMA+0x15e>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b05      	cmp	r3, #5
 8005384:	d002      	beq.n	800538c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b09      	cmp	r3, #9
 800538a:	d170      	bne.n	800546e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fe35 	bl	8005ffc <ADC_Enable>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d163      	bne.n	8005464 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053a0:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_ADC_Start_DMA+0x178>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a37      	ldr	r2, [pc, #220]	; (8005490 <HAL_ADC_Start_DMA+0x16c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d002      	beq.n	80053bc <HAL_ADC_Start_DMA+0x98>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	e000      	b.n	80053be <HAL_ADC_Start_DMA+0x9a>
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_ADC_Start_DMA+0x168>)
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d002      	beq.n	80053cc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	f023 0206 	bic.w	r2, r3, #6
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58
 80053f0:	e002      	b.n	80053f8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <HAL_ADC_Start_DMA+0x17c>)
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005404:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <HAL_ADC_Start_DMA+0x180>)
 8005406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <HAL_ADC_Start_DMA+0x184>)
 800540e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	221c      	movs	r2, #28
 8005416:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0210 	orr.w	r2, r2, #16
 800542e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4619      	mov	r1, r3
 800543a:	4610      	mov	r0, r2
 800543c:	f7ff fc8f 	bl	8004d5e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3340      	adds	r3, #64	; 0x40
 800544a:	4619      	mov	r1, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f001 fe1c 	bl	800708c <HAL_DMA_Start_IT>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fd85 	bl	8004f6c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005462:	e00d      	b.n	8005480 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800546c:	e008      	b.n	8005480 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800547a:	e001      	b.n	8005480 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800547c:	2302      	movs	r3, #2
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40022000 	.word	0x40022000
 8005490:	40022100 	.word	0x40022100
 8005494:	40022300 	.word	0x40022300
 8005498:	58026300 	.word	0x58026300
 800549c:	fffff0fe 	.word	0xfffff0fe
 80054a0:	08006111 	.word	0x08006111
 80054a4:	080061e9 	.word	0x080061e9
 80054a8:	08006205 	.word	0x08006205

080054ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80054b4:	2300      	movs	r3, #0
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a87      	ldr	r2, [pc, #540]	; (80056ec <HAL_ADC_IRQHandler+0x240>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_ADC_IRQHandler+0x30>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a86      	ldr	r2, [pc, #536]	; (80056f0 <HAL_ADC_IRQHandler+0x244>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d101      	bne.n	80054e0 <HAL_ADC_IRQHandler+0x34>
 80054dc:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <HAL_ADC_IRQHandler+0x248>)
 80054de:	e000      	b.n	80054e2 <HAL_ADC_IRQHandler+0x36>
 80054e0:	4b85      	ldr	r3, [pc, #532]	; (80056f8 <HAL_ADC_IRQHandler+0x24c>)
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fcb0 	bl	8004e48 <LL_ADC_GetMultimode>
 80054e8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d017      	beq.n	8005524 <HAL_ADC_IRQHandler+0x78>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d012      	beq.n	8005524 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 ffe8 	bl	80064ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2202      	movs	r2, #2
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d004      	beq.n	8005538 <HAL_ADC_IRQHandler+0x8c>
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8083 	beq.w	800564a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d07d      	beq.n	800564a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fbb8 	bl	8004ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d062      	beq.n	800563c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5d      	ldr	r2, [pc, #372]	; (80056f0 <HAL_ADC_IRQHandler+0x244>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d002      	beq.n	8005586 <HAL_ADC_IRQHandler+0xda>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	e000      	b.n	8005588 <HAL_ADC_IRQHandler+0xdc>
 8005586:	4b59      	ldr	r3, [pc, #356]	; (80056ec <HAL_ADC_IRQHandler+0x240>)
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4293      	cmp	r3, r2
 800558e:	d008      	beq.n	80055a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b05      	cmp	r3, #5
 800559a:	d002      	beq.n	80055a2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d104      	bne.n	80055ac <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	623b      	str	r3, [r7, #32]
 80055aa:	e00c      	b.n	80055c6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4f      	ldr	r2, [pc, #316]	; (80056f0 <HAL_ADC_IRQHandler+0x244>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d002      	beq.n	80055bc <HAL_ADC_IRQHandler+0x110>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	e000      	b.n	80055be <HAL_ADC_IRQHandler+0x112>
 80055bc:	4b4b      	ldr	r3, [pc, #300]	; (80056ec <HAL_ADC_IRQHandler+0x240>)
 80055be:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d135      	bne.n	800563c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d12e      	bne.n	800563c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fcd6 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11a      	bne.n	8005624 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 020c 	bic.w	r2, r2, #12
 80055fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d112      	bne.n	800563c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
 8005622:	e00b      	b.n	800563c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	f043 0210 	orr.w	r2, r3, #16
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fd f9a1 	bl	8002984 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	220c      	movs	r2, #12
 8005648:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_ADC_IRQHandler+0x1b2>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a0 	beq.w	80057aa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 809a 	beq.w	80057aa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fb76 	bl	8004d84 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005698:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fb1e 	bl	8004ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80056a4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_ADC_IRQHandler+0x244>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d002      	beq.n	80056b6 <HAL_ADC_IRQHandler+0x20a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	e000      	b.n	80056b8 <HAL_ADC_IRQHandler+0x20c>
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <HAL_ADC_IRQHandler+0x240>)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	4293      	cmp	r3, r2
 80056be:	d008      	beq.n	80056d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b06      	cmp	r3, #6
 80056ca:	d002      	beq.n	80056d2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d104      	bne.n	80056dc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	623b      	str	r3, [r7, #32]
 80056da:	e014      	b.n	8005706 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a03      	ldr	r2, [pc, #12]	; (80056f0 <HAL_ADC_IRQHandler+0x244>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00a      	beq.n	80056fc <HAL_ADC_IRQHandler+0x250>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	e008      	b.n	80056fe <HAL_ADC_IRQHandler+0x252>
 80056ec:	40022000 	.word	0x40022000
 80056f0:	40022100 	.word	0x40022100
 80056f4:	40022300 	.word	0x40022300
 80056f8:	58026300 	.word	0x58026300
 80056fc:	4b84      	ldr	r3, [pc, #528]	; (8005910 <HAL_ADC_IRQHandler+0x464>)
 80056fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d047      	beq.n	800579c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_ADC_IRQHandler+0x27a>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d03f      	beq.n	800579c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005722:	2b00      	cmp	r3, #0
 8005724:	d13a      	bne.n	800579c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d133      	bne.n	800579c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d12e      	bne.n	800579c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fc39 	bl	8004fba <LL_ADC_INJ_IsConversionOngoing>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11a      	bne.n	8005784 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800575c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d112      	bne.n	800579c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
 8005782:	e00b      	b.n	800579c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	f043 0210 	orr.w	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f043 0201 	orr.w	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fe7d 	bl	800649c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2260      	movs	r2, #96	; 0x60
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d011      	beq.n	80057d8 <HAL_ADC_IRQHandler+0x32c>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8b2 	bl	8005934 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2280      	movs	r2, #128	; 0x80
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d012      	beq.n	8005808 <HAL_ADC_IRQHandler+0x35c>
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fe63 	bl	80064c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580e:	2b00      	cmp	r3, #0
 8005810:	d012      	beq.n	8005838 <HAL_ADC_IRQHandler+0x38c>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fe55 	bl	80064d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	d043      	beq.n	80058ca <HAL_ADC_IRQHandler+0x41e>
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d03e      	beq.n	80058ca <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e021      	b.n	800589e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <HAL_ADC_IRQHandler+0x464>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_ADC_IRQHandler+0x3c8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a29      	ldr	r2, [pc, #164]	; (8005914 <HAL_ADC_IRQHandler+0x468>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d101      	bne.n	8005878 <HAL_ADC_IRQHandler+0x3cc>
 8005874:	4b28      	ldr	r3, [pc, #160]	; (8005918 <HAL_ADC_IRQHandler+0x46c>)
 8005876:	e000      	b.n	800587a <HAL_ADC_IRQHandler+0x3ce>
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <HAL_ADC_IRQHandler+0x470>)
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff faf2 	bl	8004e64 <LL_ADC_GetMultiDMATransfer>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005886:	2301      	movs	r3, #1
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	e008      	b.n	800589e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800589a:	2301      	movs	r3, #1
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d10e      	bne.n	80058c2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f043 0202 	orr.w	r2, r3, #2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f843 	bl	8005948 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d018      	beq.n	8005906 <HAL_ADC_IRQHandler+0x45a>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	f043 0208 	orr.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fdd5 	bl	80064b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005906:	bf00      	nop
 8005908:	3728      	adds	r7, #40	; 0x28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40022000 	.word	0x40022000
 8005914:	40022100 	.word	0x40022100
 8005918:	40022300 	.word	0x40022300
 800591c:	58026300 	.word	0x58026300

08005920 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800595c:	b590      	push	{r4, r7, lr}
 800595e:	b0a1      	sub	sp, #132	; 0x84
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a9d      	ldr	r2, [pc, #628]	; (8005bec <HAL_ADC_ConfigChannel+0x290>)
 8005976:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x2a>
 8005982:	2302      	movs	r3, #2
 8005984:	e321      	b.n	8005fca <HAL_ADC_ConfigChannel+0x66e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fafe 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8306 	bne.w	8005fac <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d108      	bne.n	80059be <HAL_ADC_ConfigChannel+0x62>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	0e9b      	lsrs	r3, r3, #26
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2201      	movs	r2, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	e016      	b.n	80059ec <HAL_ADC_ConfigChannel+0x90>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80059cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80059d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80059d6:	2320      	movs	r3, #32
 80059d8:	e003      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80059da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059dc:	fab3 f383 	clz	r3, r3
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	69d1      	ldr	r1, [r2, #28]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	430b      	orrs	r3, r1
 80059f8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7ff f97d 	bl	8004d06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fabf 	bl	8004f94 <LL_ADC_REG_IsConversionOngoing>
 8005a16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff facc 	bl	8004fba <LL_ADC_INJ_IsConversionOngoing>
 8005a22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 80b3 	bne.w	8005b92 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 80af 	bne.w	8005b92 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	461a      	mov	r2, r3
 8005a42:	f7ff f9b2 	bl	8004daa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a46:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <HAL_ADC_ConfigChannel+0x294>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a52:	d10b      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x110>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	e01d      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x14c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x136>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	e00a      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x14c>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d027      	beq.n	8005b02 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6919      	ldr	r1, [r3, #16]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac0:	f7ff f8ba 	bl	8004c38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6919      	ldr	r1, [r3, #16]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	7e5b      	ldrb	r3, [r3, #25]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x17e>
 8005ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ad8:	e000      	b.n	8005adc <HAL_ADC_ConfigChannel+0x180>
 8005ada:	2300      	movs	r3, #0
 8005adc:	461a      	mov	r2, r3
 8005ade:	f7ff f8e4 	bl	8004caa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6919      	ldr	r1, [r3, #16]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	7e1b      	ldrb	r3, [r3, #24]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x19c>
 8005af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005af6:	e000      	b.n	8005afa <HAL_ADC_ConfigChannel+0x19e>
 8005af8:	2300      	movs	r3, #0
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7ff f8bc 	bl	8004c78 <LL_ADC_SetDataRightShift>
 8005b00:	e047      	b.n	8005b92 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	069b      	lsls	r3, r3, #26
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d107      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b24:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	069b      	lsls	r3, r3, #26
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d107      	bne.n	8005b4a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b48:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	069b      	lsls	r3, r3, #26
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d107      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b6c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	069b      	lsls	r3, r3, #26
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d107      	bne.n	8005b92 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005b90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff f9d4 	bl	8004f44 <LL_ADC_IsEnabled>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 820d 	bne.w	8005fbe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6819      	ldr	r1, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f7ff f925 	bl	8004e00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	4a0c      	ldr	r2, [pc, #48]	; (8005bec <HAL_ADC_ConfigChannel+0x290>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f040 8133 	bne.w	8005e28 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d110      	bne.n	8005bf4 <HAL_ADC_ConfigChannel+0x298>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0e9b      	lsrs	r3, r3, #26
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	bf94      	ite	ls
 8005be2:	2301      	movls	r3, #1
 8005be4:	2300      	movhi	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e01e      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x2cc>
 8005bea:	bf00      	nop
 8005bec:	47ff0000 	.word	0x47ff0000
 8005bf0:	5c001000 	.word	0x5c001000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bfc:	fa93 f3a3 	rbit	r3, r3
 8005c00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	e003      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	bf94      	ite	ls
 8005c22:	2301      	movls	r3, #1
 8005c24:	2300      	movhi	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d079      	beq.n	8005d20 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d107      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x2ec>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0e9b      	lsrs	r3, r3, #26
 8005c3e:	3301      	adds	r3, #1
 8005c40:	069b      	lsls	r3, r3, #26
 8005c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c46:	e015      	b.n	8005c74 <HAL_ADC_ConfigChannel+0x318>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	fa93 f3a3 	rbit	r3, r3
 8005c54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005c60:	2320      	movs	r3, #32
 8005c62:	e003      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c66:	fab3 f383 	clz	r3, r3
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	069b      	lsls	r3, r3, #26
 8005c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x338>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	0e9b      	lsrs	r3, r3, #26
 8005c86:	3301      	adds	r3, #1
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	e017      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x368>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9c:	fa93 f3a3 	rbit	r3, r3
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005cac:	2320      	movs	r3, #32
 8005cae:	e003      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb2:	fab3 f383 	clz	r3, r3
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	3301      	adds	r3, #1
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	ea42 0103 	orr.w	r1, r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x38e>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0e9b      	lsrs	r3, r3, #26
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f003 021f 	and.w	r2, r3, #31
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
 8005ce6:	051b      	lsls	r3, r3, #20
 8005ce8:	e018      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x3c0>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	fa93 f3a3 	rbit	r3, r3
 8005cf6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005d02:	2320      	movs	r3, #32
 8005d04:	e003      	b.n	8005d0e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	fab3 f383 	clz	r3, r3
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	f003 021f 	and.w	r2, r3, #31
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	e07e      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_ADC_ConfigChannel+0x3e0>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	3301      	adds	r3, #1
 8005d34:	069b      	lsls	r3, r3, #26
 8005d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d3a:	e015      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x40c>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	fa93 f3a3 	rbit	r3, r3
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005d54:	2320      	movs	r3, #32
 8005d56:	e003      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3301      	adds	r3, #1
 8005d62:	069b      	lsls	r3, r3, #26
 8005d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x42c>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	0e9b      	lsrs	r3, r3, #26
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	e017      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x45c>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	fa93 f3a3 	rbit	r3, r3
 8005d94:	61bb      	str	r3, [r7, #24]
  return result;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005da0:	2320      	movs	r3, #32
 8005da2:	e003      	b.n	8005dac <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2101      	movs	r1, #1
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	ea42 0103 	orr.w	r1, r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10d      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x488>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	0e9b      	lsrs	r3, r3, #26
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f003 021f 	and.w	r2, r3, #31
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	3b1e      	subs	r3, #30
 8005ddc:	051b      	lsls	r3, r3, #20
 8005dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005de2:	e01b      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x4c0>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	fa93 f3a3 	rbit	r3, r3
 8005df0:	60fb      	str	r3, [r7, #12]
  return result;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	e003      	b.n	8005e08 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	fab3 f383 	clz	r3, r3
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f003 021f 	and.w	r2, r3, #31
 8005e0e:	4613      	mov	r3, r2
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4413      	add	r3, r2
 8005e14:	3b1e      	subs	r3, #30
 8005e16:	051b      	lsls	r3, r3, #20
 8005e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	6892      	ldr	r2, [r2, #8]
 8005e22:	4619      	mov	r1, r3
 8005e24:	f7fe ffc1 	bl	8004daa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f280 80c6 	bge.w	8005fbe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a67      	ldr	r2, [pc, #412]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_ADC_ConfigChannel+0x4ea>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x4ee>
 8005e46:	4b65      	ldr	r3, [pc, #404]	; (8005fdc <HAL_ADC_ConfigChannel+0x680>)
 8005e48:	e000      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x4f0>
 8005e4a:	4b65      	ldr	r3, [pc, #404]	; (8005fe0 <HAL_ADC_ConfigChannel+0x684>)
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fee5 	bl	8004c1c <LL_ADC_GetCommonPathInternalCh>
 8005e52:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5e      	ldr	r2, [pc, #376]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_ADC_ConfigChannel+0x50c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a5d      	ldr	r2, [pc, #372]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10e      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x52a>
 8005e68:	485a      	ldr	r0, [pc, #360]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005e6a:	f7ff f86b 	bl	8004f44 <LL_ADC_IsEnabled>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4859      	ldr	r0, [pc, #356]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005e72:	f7ff f867 	bl	8004f44 <LL_ADC_IsEnabled>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4323      	orrs	r3, r4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e008      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x53c>
 8005e86:	4857      	ldr	r0, [pc, #348]	; (8005fe4 <HAL_ADC_ConfigChannel+0x688>)
 8005e88:	f7ff f85c 	bl	8004f44 <LL_ADC_IsEnabled>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d07d      	beq.n	8005f98 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a51      	ldr	r2, [pc, #324]	; (8005fe8 <HAL_ADC_ConfigChannel+0x68c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d130      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x5ac>
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d12b      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a4b      	ldr	r2, [pc, #300]	; (8005fe4 <HAL_ADC_ConfigChannel+0x688>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	f040 8081 	bne.w	8005fbe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a44      	ldr	r2, [pc, #272]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_ADC_ConfigChannel+0x574>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a43      	ldr	r2, [pc, #268]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d101      	bne.n	8005ed4 <HAL_ADC_ConfigChannel+0x578>
 8005ed0:	4a42      	ldr	r2, [pc, #264]	; (8005fdc <HAL_ADC_ConfigChannel+0x680>)
 8005ed2:	e000      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x57a>
 8005ed4:	4a42      	ldr	r2, [pc, #264]	; (8005fe0 <HAL_ADC_ConfigChannel+0x684>)
 8005ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7fe fe89 	bl	8004bf6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ee4:	4b41      	ldr	r3, [pc, #260]	; (8005fec <HAL_ADC_ConfigChannel+0x690>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	4a41      	ldr	r2, [pc, #260]	; (8005ff0 <HAL_ADC_ConfigChannel+0x694>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	099b      	lsrs	r3, r3, #6
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005ef8:	e002      	b.n	8005f00 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f9      	bne.n	8005efa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f06:	e05a      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a39      	ldr	r2, [pc, #228]	; (8005ff4 <HAL_ADC_ConfigChannel+0x698>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d11e      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x5f4>
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d119      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a30      	ldr	r2, [pc, #192]	; (8005fe4 <HAL_ADC_ConfigChannel+0x688>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d14b      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_ADC_ConfigChannel+0x5de>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d101      	bne.n	8005f3e <HAL_ADC_ConfigChannel+0x5e2>
 8005f3a:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <HAL_ADC_ConfigChannel+0x680>)
 8005f3c:	e000      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x5e4>
 8005f3e:	4a28      	ldr	r2, [pc, #160]	; (8005fe0 <HAL_ADC_ConfigChannel+0x684>)
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7fe fe54 	bl	8004bf6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f4e:	e036      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <HAL_ADC_ConfigChannel+0x69c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d131      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
 8005f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d12c      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_ADC_ConfigChannel+0x688>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d127      	bne.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a18      	ldr	r2, [pc, #96]	; (8005fd4 <HAL_ADC_ConfigChannel+0x678>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_ADC_ConfigChannel+0x626>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <HAL_ADC_ConfigChannel+0x67c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x62a>
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <HAL_ADC_ConfigChannel+0x680>)
 8005f84:	e000      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x62c>
 8005f86:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <HAL_ADC_ConfigChannel+0x684>)
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f7fe fe30 	bl	8004bf6 <LL_ADC_SetCommonPathInternalCh>
 8005f96:	e012      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	f043 0220 	orr.w	r2, r3, #32
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005faa:	e008      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005fc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3784      	adds	r7, #132	; 0x84
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd90      	pop	{r4, r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40022100 	.word	0x40022100
 8005fdc:	40022300 	.word	0x40022300
 8005fe0:	58026300 	.word	0x58026300
 8005fe4:	58026000 	.word	0x58026000
 8005fe8:	cb840000 	.word	0xcb840000
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	053e2d63 	.word	0x053e2d63
 8005ff4:	c7520000 	.word	0xc7520000
 8005ff8:	cfb80000 	.word	0xcfb80000

08005ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe ff9b 	bl	8004f44 <LL_ADC_IsEnabled>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d16e      	bne.n	80060f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4b38      	ldr	r3, [pc, #224]	; (80060fc <ADC_Enable+0x100>)
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f043 0210 	orr.w	r2, r3, #16
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e05a      	b.n	80060f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ff6a 	bl	8004f1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006048:	f7fe fd72 	bl	8004b30 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <ADC_Enable+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <ADC_Enable+0x66>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a29      	ldr	r2, [pc, #164]	; (8006104 <ADC_Enable+0x108>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <ADC_Enable+0x6a>
 8006062:	4b29      	ldr	r3, [pc, #164]	; (8006108 <ADC_Enable+0x10c>)
 8006064:	e000      	b.n	8006068 <ADC_Enable+0x6c>
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <ADC_Enable+0x110>)
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe feed 	bl	8004e48 <LL_ADC_GetMultimode>
 800606e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <ADC_Enable+0x108>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d002      	beq.n	8006080 <ADC_Enable+0x84>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	e000      	b.n	8006082 <ADC_Enable+0x86>
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <ADC_Enable+0x104>)
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	4293      	cmp	r3, r2
 8006088:	d02c      	beq.n	80060e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d130      	bne.n	80060f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006090:	e028      	b.n	80060e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe ff54 	bl	8004f44 <LL_ADC_IsEnabled>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe ff38 	bl	8004f1c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060ac:	f7fe fd40 	bl	8004b30 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d914      	bls.n	80060e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d00d      	beq.n	80060e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0210 	orr.w	r2, r3, #16
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	f043 0201 	orr.w	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e007      	b.n	80060f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d1cf      	bne.n	8006092 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	8000003f 	.word	0x8000003f
 8006100:	40022000 	.word	0x40022000
 8006104:	40022100 	.word	0x40022100
 8006108:	40022300 	.word	0x40022300
 800610c:	58026300 	.word	0x58026300

08006110 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006126:	2b00      	cmp	r3, #0
 8006128:	d14b      	bne.n	80061c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d021      	beq.n	8006188 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fdc9 	bl	8004ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d032      	beq.n	80061ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d12b      	bne.n	80061ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d11f      	bne.n	80061ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	f043 0201 	orr.w	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
 8006186:	e018      	b.n	80061ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d111      	bne.n	80061ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d105      	bne.n	80061ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7fc fbe2 	bl	8002984 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80061c0:	e00e      	b.n	80061e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff fbba 	bl	8005948 <HAL_ADC_ErrorCallback>
}
 80061d4:	e004      	b.n	80061e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fb92 	bl	8005920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fb8c 	bl	8005948 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a7a      	ldr	r2, [pc, #488]	; (8006430 <ADC_ConfigureBoostMode+0x1f8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <ADC_ConfigureBoostMode+0x1c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a79      	ldr	r2, [pc, #484]	; (8006434 <ADC_ConfigureBoostMode+0x1fc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d109      	bne.n	8006268 <ADC_ConfigureBoostMode+0x30>
 8006254:	4b78      	ldr	r3, [pc, #480]	; (8006438 <ADC_ConfigureBoostMode+0x200>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e008      	b.n	800627a <ADC_ConfigureBoostMode+0x42>
 8006268:	4b74      	ldr	r3, [pc, #464]	; (800643c <ADC_ConfigureBoostMode+0x204>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01c      	beq.n	80062b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800627e:	f005 ff83 	bl	800c188 <HAL_RCC_GetHCLKFreq>
 8006282:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800628c:	d010      	beq.n	80062b0 <ADC_ConfigureBoostMode+0x78>
 800628e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006292:	d873      	bhi.n	800637c <ADC_ConfigureBoostMode+0x144>
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d002      	beq.n	80062a0 <ADC_ConfigureBoostMode+0x68>
 800629a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800629e:	d16d      	bne.n	800637c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	60fb      	str	r3, [r7, #12]
        break;
 80062ae:	e068      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	60fb      	str	r3, [r7, #12]
        break;
 80062b6:	e064      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80062b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	f007 f9c8 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 80062c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80062ce:	d051      	beq.n	8006374 <ADC_ConfigureBoostMode+0x13c>
 80062d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80062d4:	d854      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 80062d6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80062da:	d047      	beq.n	800636c <ADC_ConfigureBoostMode+0x134>
 80062dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80062e0:	d84e      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 80062e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80062e6:	d03d      	beq.n	8006364 <ADC_ConfigureBoostMode+0x12c>
 80062e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80062ec:	d848      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 80062ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f2:	d033      	beq.n	800635c <ADC_ConfigureBoostMode+0x124>
 80062f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f8:	d842      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 80062fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80062fe:	d029      	beq.n	8006354 <ADC_ConfigureBoostMode+0x11c>
 8006300:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006304:	d83c      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 8006306:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800630a:	d01a      	beq.n	8006342 <ADC_ConfigureBoostMode+0x10a>
 800630c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006310:	d836      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 8006312:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006316:	d014      	beq.n	8006342 <ADC_ConfigureBoostMode+0x10a>
 8006318:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800631c:	d830      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 800631e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006322:	d00e      	beq.n	8006342 <ADC_ConfigureBoostMode+0x10a>
 8006324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006328:	d82a      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 800632a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800632e:	d008      	beq.n	8006342 <ADC_ConfigureBoostMode+0x10a>
 8006330:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006334:	d824      	bhi.n	8006380 <ADC_ConfigureBoostMode+0x148>
 8006336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800633a:	d002      	beq.n	8006342 <ADC_ConfigureBoostMode+0x10a>
 800633c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006340:	d11e      	bne.n	8006380 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	0c9b      	lsrs	r3, r3, #18
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	60fb      	str	r3, [r7, #12]
        break;
 8006352:	e016      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	60fb      	str	r3, [r7, #12]
        break;
 800635a:	e012      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	60fb      	str	r3, [r7, #12]
        break;
 8006362:	e00e      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	60fb      	str	r3, [r7, #12]
        break;
 800636a:	e00a      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	09db      	lsrs	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
        break;
 8006372:	e006      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	60fb      	str	r3, [r7, #12]
        break;
 800637a:	e002      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
        break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006380:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006382:	f7fe fc05 	bl	8004b90 <HAL_GetREVID>
 8006386:	4603      	mov	r3, r0
 8006388:	f241 0203 	movw	r2, #4099	; 0x1003
 800638c:	4293      	cmp	r3, r2
 800638e:	d815      	bhi.n	80063bc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <ADC_ConfigureBoostMode+0x208>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d908      	bls.n	80063aa <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80063a8:	e03e      	b.n	8006428 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b8:	609a      	str	r2, [r3, #8]
}
 80063ba:	e035      	b.n	8006428 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <ADC_ConfigureBoostMode+0x20c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d808      	bhi.n	80063dc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80063d8:	609a      	str	r2, [r3, #8]
}
 80063da:	e025      	b.n	8006428 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4a1a      	ldr	r2, [pc, #104]	; (8006448 <ADC_ConfigureBoostMode+0x210>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d80a      	bhi.n	80063fa <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	e016      	b.n	8006428 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a13      	ldr	r2, [pc, #76]	; (800644c <ADC_ConfigureBoostMode+0x214>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d80a      	bhi.n	8006418 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006414:	609a      	str	r2, [r3, #8]
}
 8006416:	e007      	b.n	8006428 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40022000 	.word	0x40022000
 8006434:	40022100 	.word	0x40022100
 8006438:	40022300 	.word	0x40022300
 800643c:	58026300 	.word	0x58026300
 8006440:	01312d00 	.word	0x01312d00
 8006444:	005f5e10 	.word	0x005f5e10
 8006448:	00bebc20 	.word	0x00bebc20
 800644c:	017d7840 	.word	0x017d7840

08006450 <LL_ADC_IsEnabled>:
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <LL_ADC_IsEnabled+0x18>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <LL_ADC_IsEnabled+0x1a>
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <LL_ADC_REG_IsConversionOngoing>:
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d101      	bne.n	800648e <LL_ADC_REG_IsConversionOngoing+0x18>
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b09f      	sub	sp, #124	; 0x7c
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800651a:	2302      	movs	r3, #2
 800651c:	e0be      	b.n	800669c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006526:	2300      	movs	r3, #0
 8006528:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800652a:	2300      	movs	r3, #0
 800652c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a5c      	ldr	r2, [pc, #368]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d102      	bne.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006538:	4b5b      	ldr	r3, [pc, #364]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	e001      	b.n	8006542 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654c:	f043 0220 	orr.w	r2, r3, #32
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e09d      	b.n	800669c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ff87 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 8006568:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff ff81 	bl	8006476 <LL_ADC_REG_IsConversionOngoing>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d17f      	bne.n	800667a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800657a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657c:	2b00      	cmp	r3, #0
 800657e:	d17c      	bne.n	800667a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a47      	ldr	r2, [pc, #284]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d004      	beq.n	8006594 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a46      	ldr	r2, [pc, #280]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d101      	bne.n	8006598 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006594:	4b45      	ldr	r3, [pc, #276]	; (80066ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006596:	e000      	b.n	800659a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006598:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800659a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d039      	beq.n	8006618 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80065a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3a      	ldr	r2, [pc, #232]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10e      	bne.n	80065e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80065ca:	4836      	ldr	r0, [pc, #216]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065cc:	f7ff ff40 	bl	8006450 <LL_ADC_IsEnabled>
 80065d0:	4604      	mov	r4, r0
 80065d2:	4835      	ldr	r0, [pc, #212]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065d4:	f7ff ff3c 	bl	8006450 <LL_ADC_IsEnabled>
 80065d8:	4603      	mov	r3, r0
 80065da:	4323      	orrs	r3, r4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bf0c      	ite	eq
 80065e0:	2301      	moveq	r3, #1
 80065e2:	2300      	movne	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e008      	b.n	80065fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80065e8:	4832      	ldr	r0, [pc, #200]	; (80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80065ea:	f7ff ff31 	bl	8006450 <LL_ADC_IsEnabled>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf0c      	ite	eq
 80065f4:	2301      	moveq	r3, #1
 80065f6:	2300      	movne	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d047      	beq.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006604:	4013      	ands	r3, r2
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	6811      	ldr	r1, [r2, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	430a      	orrs	r2, r1
 8006610:	431a      	orrs	r2, r3
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006616:	e03a      	b.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10e      	bne.n	8006656 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8006638:	481a      	ldr	r0, [pc, #104]	; (80066a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800663a:	f7ff ff09 	bl	8006450 <LL_ADC_IsEnabled>
 800663e:	4604      	mov	r4, r0
 8006640:	4819      	ldr	r0, [pc, #100]	; (80066a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006642:	f7ff ff05 	bl	8006450 <LL_ADC_IsEnabled>
 8006646:	4603      	mov	r3, r0
 8006648:	4323      	orrs	r3, r4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	e008      	b.n	8006668 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006656:	4817      	ldr	r0, [pc, #92]	; (80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006658:	f7ff fefa 	bl	8006450 <LL_ADC_IsEnabled>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006672:	4013      	ands	r3, r2
 8006674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006676:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006678:	e009      	b.n	800668e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800668c:	e000      	b.n	8006690 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800668e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006698:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800669c:	4618      	mov	r0, r3
 800669e:	377c      	adds	r7, #124	; 0x7c
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}
 80066a4:	40022000 	.word	0x40022000
 80066a8:	40022100 	.word	0x40022100
 80066ac:	40022300 	.word	0x40022300
 80066b0:	58026300 	.word	0x58026300
 80066b4:	58026000 	.word	0x58026000
 80066b8:	fffff0e0 	.word	0xfffff0e0

080066bc <__NVIC_SetPriorityGrouping>:
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <__NVIC_SetPriorityGrouping+0x40>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066d8:	4013      	ands	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <__NVIC_SetPriorityGrouping+0x44>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <__NVIC_SetPriorityGrouping+0x40>)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	60d3      	str	r3, [r2, #12]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000ed00 	.word	0xe000ed00
 8006700:	05fa0000 	.word	0x05fa0000

08006704 <__NVIC_GetPriorityGrouping>:
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <__NVIC_GetPriorityGrouping+0x18>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	f003 0307 	and.w	r3, r3, #7
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	e000ed00 	.word	0xe000ed00

08006720 <__NVIC_EnableIRQ>:
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800672a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	db0b      	blt.n	800674a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	f003 021f 	and.w	r2, r3, #31
 8006738:	4907      	ldr	r1, [pc, #28]	; (8006758 <__NVIC_EnableIRQ+0x38>)
 800673a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	2001      	movs	r0, #1
 8006742:	fa00 f202 	lsl.w	r2, r0, r2
 8006746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	e000e100 	.word	0xe000e100

0800675c <__NVIC_SetPriority>:
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800676c:	2b00      	cmp	r3, #0
 800676e:	db0a      	blt.n	8006786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	490c      	ldr	r1, [pc, #48]	; (80067a8 <__NVIC_SetPriority+0x4c>)
 8006776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800677a:	0112      	lsls	r2, r2, #4
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	440b      	add	r3, r1
 8006780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006784:	e00a      	b.n	800679c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4908      	ldr	r1, [pc, #32]	; (80067ac <__NVIC_SetPriority+0x50>)
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	3b04      	subs	r3, #4
 8006794:	0112      	lsls	r2, r2, #4
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	440b      	add	r3, r1
 800679a:	761a      	strb	r2, [r3, #24]
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	e000e100 	.word	0xe000e100
 80067ac:	e000ed00 	.word	0xe000ed00

080067b0 <NVIC_EncodePriority>:
{
 80067b0:	b480      	push	{r7}
 80067b2:	b089      	sub	sp, #36	; 0x24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f1c3 0307 	rsb	r3, r3, #7
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	bf28      	it	cs
 80067ce:	2304      	movcs	r3, #4
 80067d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2b06      	cmp	r3, #6
 80067d8:	d902      	bls.n	80067e0 <NVIC_EncodePriority+0x30>
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3b03      	subs	r3, #3
 80067de:	e000      	b.n	80067e2 <NVIC_EncodePriority+0x32>
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43da      	mvns	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	401a      	ands	r2, r3
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	43d9      	mvns	r1, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006808:	4313      	orrs	r3, r2
}
 800680a:	4618      	mov	r0, r3
 800680c:	3724      	adds	r7, #36	; 0x24
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3b01      	subs	r3, #1
 8006824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006828:	d301      	bcc.n	800682e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800682a:	2301      	movs	r3, #1
 800682c:	e00f      	b.n	800684e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800682e:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <SysTick_Config+0x40>)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3b01      	subs	r3, #1
 8006834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006836:	210f      	movs	r1, #15
 8006838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800683c:	f7ff ff8e 	bl	800675c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006840:	4b05      	ldr	r3, [pc, #20]	; (8006858 <SysTick_Config+0x40>)
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006846:	4b04      	ldr	r3, [pc, #16]	; (8006858 <SysTick_Config+0x40>)
 8006848:	2207      	movs	r2, #7
 800684a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	e000e010 	.word	0xe000e010

0800685c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff ff29 	bl	80066bc <__NVIC_SetPriorityGrouping>
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	4603      	mov	r3, r0
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006880:	f7ff ff40 	bl	8006704 <__NVIC_GetPriorityGrouping>
 8006884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff ff90 	bl	80067b0 <NVIC_EncodePriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff5f 	bl	800675c <__NVIC_SetPriority>
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff33 	bl	8006720 <__NVIC_EnableIRQ>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffa4 	bl	8006818 <SysTick_Config>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80068e0:	f3bf 8f5f 	dmb	sy
}
 80068e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <HAL_MPU_Disable+0x28>)
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	4a06      	ldr	r2, [pc, #24]	; (8006904 <HAL_MPU_Disable+0x28>)
 80068ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <HAL_MPU_Disable+0x2c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	e000ed00 	.word	0xe000ed00
 8006908:	e000ed90 	.word	0xe000ed90

0800690c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006914:	4a0b      	ldr	r2, [pc, #44]	; (8006944 <HAL_MPU_Enable+0x38>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <HAL_MPU_Enable+0x3c>)
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <HAL_MPU_Enable+0x3c>)
 8006924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006928:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800692a:	f3bf 8f4f 	dsb	sy
}
 800692e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006930:	f3bf 8f6f 	isb	sy
}
 8006934:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	e000ed90 	.word	0xe000ed90
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	785a      	ldrb	r2, [r3, #1]
 8006958:	4b1d      	ldr	r3, [pc, #116]	; (80069d0 <HAL_MPU_ConfigRegion+0x84>)
 800695a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d029      	beq.n	80069b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006964:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_MPU_ConfigRegion+0x84>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7adb      	ldrb	r3, [r3, #11]
 8006976:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006978:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7a9b      	ldrb	r3, [r3, #10]
 800697e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006980:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7b5b      	ldrb	r3, [r3, #13]
 8006986:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7b9b      	ldrb	r3, [r3, #14]
 800698e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	7bdb      	ldrb	r3, [r3, #15]
 8006996:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7a5b      	ldrb	r3, [r3, #9]
 800699e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80069a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7a1b      	ldrb	r3, [r3, #8]
 80069a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80069a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	7812      	ldrb	r2, [r2, #0]
 80069ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069b0:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80069b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80069b6:	e005      	b.n	80069c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_MPU_ConfigRegion+0x84>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80069be:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <HAL_MPU_ConfigRegion+0x84>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	611a      	str	r2, [r3, #16]
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	e000ed90 	.word	0xe000ed90

080069d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80069dc:	f7fe f8a8 	bl	8004b30 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e316      	b.n	800701a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a66      	ldr	r2, [pc, #408]	; (8006b8c <HAL_DMA_Init+0x1b8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d04a      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_DMA_Init+0x1bc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d045      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <HAL_DMA_Init+0x1c0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d040      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a62      	ldr	r2, [pc, #392]	; (8006b98 <HAL_DMA_Init+0x1c4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d03b      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a60      	ldr	r2, [pc, #384]	; (8006b9c <HAL_DMA_Init+0x1c8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d036      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a5f      	ldr	r2, [pc, #380]	; (8006ba0 <HAL_DMA_Init+0x1cc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d031      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ba4 <HAL_DMA_Init+0x1d0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d02c      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a5c      	ldr	r2, [pc, #368]	; (8006ba8 <HAL_DMA_Init+0x1d4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d027      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a5a      	ldr	r2, [pc, #360]	; (8006bac <HAL_DMA_Init+0x1d8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d022      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a59      	ldr	r2, [pc, #356]	; (8006bb0 <HAL_DMA_Init+0x1dc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d01d      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a57      	ldr	r2, [pc, #348]	; (8006bb4 <HAL_DMA_Init+0x1e0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d018      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a56      	ldr	r2, [pc, #344]	; (8006bb8 <HAL_DMA_Init+0x1e4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a54      	ldr	r2, [pc, #336]	; (8006bbc <HAL_DMA_Init+0x1e8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a53      	ldr	r2, [pc, #332]	; (8006bc0 <HAL_DMA_Init+0x1ec>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a51      	ldr	r2, [pc, #324]	; (8006bc4 <HAL_DMA_Init+0x1f0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_DMA_Init+0xb8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a50      	ldr	r2, [pc, #320]	; (8006bc8 <HAL_DMA_Init+0x1f4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_DMA_Init+0xbc>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_DMA_Init+0xbe>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 813b 	beq.w	8006d0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <HAL_DMA_Init+0x1b8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d04a      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <HAL_DMA_Init+0x1bc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d045      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a34      	ldr	r2, [pc, #208]	; (8006b94 <HAL_DMA_Init+0x1c0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d040      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a33      	ldr	r2, [pc, #204]	; (8006b98 <HAL_DMA_Init+0x1c4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d03b      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a31      	ldr	r2, [pc, #196]	; (8006b9c <HAL_DMA_Init+0x1c8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d036      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a30      	ldr	r2, [pc, #192]	; (8006ba0 <HAL_DMA_Init+0x1cc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d031      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2e      	ldr	r2, [pc, #184]	; (8006ba4 <HAL_DMA_Init+0x1d0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d02c      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_DMA_Init+0x1d4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d027      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2b      	ldr	r2, [pc, #172]	; (8006bac <HAL_DMA_Init+0x1d8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d022      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <HAL_DMA_Init+0x1dc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01d      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a28      	ldr	r2, [pc, #160]	; (8006bb4 <HAL_DMA_Init+0x1e0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d018      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a27      	ldr	r2, [pc, #156]	; (8006bb8 <HAL_DMA_Init+0x1e4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <HAL_DMA_Init+0x1e8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <HAL_DMA_Init+0x1ec>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <HAL_DMA_Init+0x1f0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_DMA_Init+0x174>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a21      	ldr	r2, [pc, #132]	; (8006bc8 <HAL_DMA_Init+0x1f4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <HAL_DMA_Init+0x186>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e007      	b.n	8006b6a <HAL_DMA_Init+0x196>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b6a:	e02f      	b.n	8006bcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b6c:	f7fd ffe0 	bl	8004b30 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d928      	bls.n	8006bcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2203      	movs	r2, #3
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e246      	b.n	800701a <HAL_DMA_Init+0x646>
 8006b8c:	40020010 	.word	0x40020010
 8006b90:	40020028 	.word	0x40020028
 8006b94:	40020040 	.word	0x40020040
 8006b98:	40020058 	.word	0x40020058
 8006b9c:	40020070 	.word	0x40020070
 8006ba0:	40020088 	.word	0x40020088
 8006ba4:	400200a0 	.word	0x400200a0
 8006ba8:	400200b8 	.word	0x400200b8
 8006bac:	40020410 	.word	0x40020410
 8006bb0:	40020428 	.word	0x40020428
 8006bb4:	40020440 	.word	0x40020440
 8006bb8:	40020458 	.word	0x40020458
 8006bbc:	40020470 	.word	0x40020470
 8006bc0:	40020488 	.word	0x40020488
 8006bc4:	400204a0 	.word	0x400204a0
 8006bc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1c8      	bne.n	8006b6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4b83      	ldr	r3, [pc, #524]	; (8006df4 <HAL_DMA_Init+0x420>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d107      	bne.n	8006c30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006c30:	4b71      	ldr	r3, [pc, #452]	; (8006df8 <HAL_DMA_Init+0x424>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b71      	ldr	r3, [pc, #452]	; (8006dfc <HAL_DMA_Init+0x428>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c3c:	d328      	bcc.n	8006c90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b28      	cmp	r3, #40	; 0x28
 8006c44:	d903      	bls.n	8006c4e <HAL_DMA_Init+0x27a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c4c:	d917      	bls.n	8006c7e <HAL_DMA_Init+0x2aa>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b3e      	cmp	r3, #62	; 0x3e
 8006c54:	d903      	bls.n	8006c5e <HAL_DMA_Init+0x28a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b42      	cmp	r3, #66	; 0x42
 8006c5c:	d90f      	bls.n	8006c7e <HAL_DMA_Init+0x2aa>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b46      	cmp	r3, #70	; 0x46
 8006c64:	d903      	bls.n	8006c6e <HAL_DMA_Init+0x29a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b48      	cmp	r3, #72	; 0x48
 8006c6c:	d907      	bls.n	8006c7e <HAL_DMA_Init+0x2aa>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b4e      	cmp	r3, #78	; 0x4e
 8006c74:	d905      	bls.n	8006c82 <HAL_DMA_Init+0x2ae>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b52      	cmp	r3, #82	; 0x52
 8006c7c:	d801      	bhi.n	8006c82 <HAL_DMA_Init+0x2ae>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <HAL_DMA_Init+0x2b0>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f023 0307 	bic.w	r3, r3, #7
 8006ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d117      	bne.n	8006cea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fddb 	bl	8008888 <DMA_CheckFifoParam>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2240      	movs	r2, #64	; 0x40
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e197      	b.n	800701a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fd16 	bl	8008724 <DMA_CalcBaseAndBitshift>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	223f      	movs	r2, #63	; 0x3f
 8006d06:	409a      	lsls	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	609a      	str	r2, [r3, #8]
 8006d0c:	e0cd      	b.n	8006eaa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a3b      	ldr	r2, [pc, #236]	; (8006e00 <HAL_DMA_Init+0x42c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d022      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a39      	ldr	r2, [pc, #228]	; (8006e04 <HAL_DMA_Init+0x430>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a38      	ldr	r2, [pc, #224]	; (8006e08 <HAL_DMA_Init+0x434>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d018      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a36      	ldr	r2, [pc, #216]	; (8006e0c <HAL_DMA_Init+0x438>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a35      	ldr	r2, [pc, #212]	; (8006e10 <HAL_DMA_Init+0x43c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a33      	ldr	r2, [pc, #204]	; (8006e14 <HAL_DMA_Init+0x440>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a32      	ldr	r2, [pc, #200]	; (8006e18 <HAL_DMA_Init+0x444>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_DMA_Init+0x38a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <HAL_DMA_Init+0x448>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d101      	bne.n	8006d62 <HAL_DMA_Init+0x38e>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <HAL_DMA_Init+0x390>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8097 	beq.w	8006e98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <HAL_DMA_Init+0x42c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d021      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <HAL_DMA_Init+0x430>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01c      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a21      	ldr	r2, [pc, #132]	; (8006e08 <HAL_DMA_Init+0x434>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d017      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_DMA_Init+0x438>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d012      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <HAL_DMA_Init+0x43c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00d      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <HAL_DMA_Init+0x440>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d008      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	; (8006e18 <HAL_DMA_Init+0x444>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <HAL_DMA_Init+0x3e4>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_DMA_Init+0x448>)
 8006db6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_DMA_Init+0x44c>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d021      	beq.n	8006e24 <HAL_DMA_Init+0x450>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d102      	bne.n	8006dee <HAL_DMA_Init+0x41a>
 8006de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dec:	e01b      	b.n	8006e26 <HAL_DMA_Init+0x452>
 8006dee:	2300      	movs	r3, #0
 8006df0:	e019      	b.n	8006e26 <HAL_DMA_Init+0x452>
 8006df2:	bf00      	nop
 8006df4:	fe10803f 	.word	0xfe10803f
 8006df8:	5c001000 	.word	0x5c001000
 8006dfc:	ffff0000 	.word	0xffff0000
 8006e00:	58025408 	.word	0x58025408
 8006e04:	5802541c 	.word	0x5802541c
 8006e08:	58025430 	.word	0x58025430
 8006e0c:	58025444 	.word	0x58025444
 8006e10:	58025458 	.word	0x58025458
 8006e14:	5802546c 	.word	0x5802546c
 8006e18:	58025480 	.word	0x58025480
 8006e1c:	58025494 	.word	0x58025494
 8006e20:	fffe000f 	.word	0xfffe000f
 8006e24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b6e      	ldr	r3, [pc, #440]	; (8007024 <HAL_DMA_Init+0x650>)
 8006e6c:	4413      	add	r3, r2
 8006e6e:	4a6e      	ldr	r2, [pc, #440]	; (8007028 <HAL_DMA_Init+0x654>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	009a      	lsls	r2, r3, #2
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fc51 	bl	8008724 <DMA_CalcBaseAndBitshift>
 8006e82:	4603      	mov	r3, r0
 8006e84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2201      	movs	r2, #1
 8006e90:	409a      	lsls	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	e008      	b.n	8006eaa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2240      	movs	r2, #64	; 0x40
 8006e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e0b7      	b.n	800701a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5f      	ldr	r2, [pc, #380]	; (800702c <HAL_DMA_Init+0x658>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d072      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a5d      	ldr	r2, [pc, #372]	; (8007030 <HAL_DMA_Init+0x65c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d06d      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a5c      	ldr	r2, [pc, #368]	; (8007034 <HAL_DMA_Init+0x660>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d068      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5a      	ldr	r2, [pc, #360]	; (8007038 <HAL_DMA_Init+0x664>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d063      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a59      	ldr	r2, [pc, #356]	; (800703c <HAL_DMA_Init+0x668>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d05e      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a57      	ldr	r2, [pc, #348]	; (8007040 <HAL_DMA_Init+0x66c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d059      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a56      	ldr	r2, [pc, #344]	; (8007044 <HAL_DMA_Init+0x670>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d054      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a54      	ldr	r2, [pc, #336]	; (8007048 <HAL_DMA_Init+0x674>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d04f      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a53      	ldr	r2, [pc, #332]	; (800704c <HAL_DMA_Init+0x678>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d04a      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a51      	ldr	r2, [pc, #324]	; (8007050 <HAL_DMA_Init+0x67c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d045      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a50      	ldr	r2, [pc, #320]	; (8007054 <HAL_DMA_Init+0x680>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d040      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a4e      	ldr	r2, [pc, #312]	; (8007058 <HAL_DMA_Init+0x684>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4d      	ldr	r2, [pc, #308]	; (800705c <HAL_DMA_Init+0x688>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d036      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a4b      	ldr	r2, [pc, #300]	; (8007060 <HAL_DMA_Init+0x68c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d031      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4a      	ldr	r2, [pc, #296]	; (8007064 <HAL_DMA_Init+0x690>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d02c      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a48      	ldr	r2, [pc, #288]	; (8007068 <HAL_DMA_Init+0x694>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d027      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a47      	ldr	r2, [pc, #284]	; (800706c <HAL_DMA_Init+0x698>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d022      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a45      	ldr	r2, [pc, #276]	; (8007070 <HAL_DMA_Init+0x69c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01d      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a44      	ldr	r2, [pc, #272]	; (8007074 <HAL_DMA_Init+0x6a0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a42      	ldr	r2, [pc, #264]	; (8007078 <HAL_DMA_Init+0x6a4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a41      	ldr	r2, [pc, #260]	; (800707c <HAL_DMA_Init+0x6a8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a3f      	ldr	r2, [pc, #252]	; (8007080 <HAL_DMA_Init+0x6ac>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a3e      	ldr	r2, [pc, #248]	; (8007084 <HAL_DMA_Init+0x6b0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_DMA_Init+0x5c6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a3c      	ldr	r2, [pc, #240]	; (8007088 <HAL_DMA_Init+0x6b4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_DMA_Init+0x5ca>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_DMA_Init+0x5cc>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d032      	beq.n	800700a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fceb 	bl	8008980 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d102      	bne.n	8006fb8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d010      	beq.n	8006ff8 <HAL_DMA_Init+0x624>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d80c      	bhi.n	8006ff8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fd68 	bl	8008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff4:	605a      	str	r2, [r3, #4]
 8006ff6:	e008      	b.n	800700a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	a7fdabf8 	.word	0xa7fdabf8
 8007028:	cccccccd 	.word	0xcccccccd
 800702c:	40020010 	.word	0x40020010
 8007030:	40020028 	.word	0x40020028
 8007034:	40020040 	.word	0x40020040
 8007038:	40020058 	.word	0x40020058
 800703c:	40020070 	.word	0x40020070
 8007040:	40020088 	.word	0x40020088
 8007044:	400200a0 	.word	0x400200a0
 8007048:	400200b8 	.word	0x400200b8
 800704c:	40020410 	.word	0x40020410
 8007050:	40020428 	.word	0x40020428
 8007054:	40020440 	.word	0x40020440
 8007058:	40020458 	.word	0x40020458
 800705c:	40020470 	.word	0x40020470
 8007060:	40020488 	.word	0x40020488
 8007064:	400204a0 	.word	0x400204a0
 8007068:	400204b8 	.word	0x400204b8
 800706c:	58025408 	.word	0x58025408
 8007070:	5802541c 	.word	0x5802541c
 8007074:	58025430 	.word	0x58025430
 8007078:	58025444 	.word	0x58025444
 800707c:	58025458 	.word	0x58025458
 8007080:	5802546c 	.word	0x5802546c
 8007084:	58025480 	.word	0x58025480
 8007088:	58025494 	.word	0x58025494

0800708c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e226      	b.n	80074f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_DMA_Start_IT+0x2a>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e21f      	b.n	80074f6 <HAL_DMA_Start_IT+0x46a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f040 820a 	bne.w	80074e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a68      	ldr	r2, [pc, #416]	; (8007280 <HAL_DMA_Start_IT+0x1f4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04a      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a66      	ldr	r2, [pc, #408]	; (8007284 <HAL_DMA_Start_IT+0x1f8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d045      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a65      	ldr	r2, [pc, #404]	; (8007288 <HAL_DMA_Start_IT+0x1fc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a63      	ldr	r2, [pc, #396]	; (800728c <HAL_DMA_Start_IT+0x200>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d03b      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a62      	ldr	r2, [pc, #392]	; (8007290 <HAL_DMA_Start_IT+0x204>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d036      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a60      	ldr	r2, [pc, #384]	; (8007294 <HAL_DMA_Start_IT+0x208>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d031      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5f      	ldr	r2, [pc, #380]	; (8007298 <HAL_DMA_Start_IT+0x20c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d02c      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a5d      	ldr	r2, [pc, #372]	; (800729c <HAL_DMA_Start_IT+0x210>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d027      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a5c      	ldr	r2, [pc, #368]	; (80072a0 <HAL_DMA_Start_IT+0x214>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5a      	ldr	r2, [pc, #360]	; (80072a4 <HAL_DMA_Start_IT+0x218>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a59      	ldr	r2, [pc, #356]	; (80072a8 <HAL_DMA_Start_IT+0x21c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a57      	ldr	r2, [pc, #348]	; (80072ac <HAL_DMA_Start_IT+0x220>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a56      	ldr	r2, [pc, #344]	; (80072b0 <HAL_DMA_Start_IT+0x224>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a54      	ldr	r2, [pc, #336]	; (80072b4 <HAL_DMA_Start_IT+0x228>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a53      	ldr	r2, [pc, #332]	; (80072b8 <HAL_DMA_Start_IT+0x22c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <HAL_DMA_Start_IT+0xee>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a51      	ldr	r2, [pc, #324]	; (80072bc <HAL_DMA_Start_IT+0x230>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <HAL_DMA_Start_IT+0x100>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e007      	b.n	800719c <HAL_DMA_Start_IT+0x110>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	68b9      	ldr	r1, [r7, #8]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f001 f912 	bl	80083cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a34      	ldr	r2, [pc, #208]	; (8007280 <HAL_DMA_Start_IT+0x1f4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d04a      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a33      	ldr	r2, [pc, #204]	; (8007284 <HAL_DMA_Start_IT+0x1f8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d045      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a31      	ldr	r2, [pc, #196]	; (8007288 <HAL_DMA_Start_IT+0x1fc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d040      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a30      	ldr	r2, [pc, #192]	; (800728c <HAL_DMA_Start_IT+0x200>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d03b      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2e      	ldr	r2, [pc, #184]	; (8007290 <HAL_DMA_Start_IT+0x204>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d036      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2d      	ldr	r2, [pc, #180]	; (8007294 <HAL_DMA_Start_IT+0x208>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d031      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2b      	ldr	r2, [pc, #172]	; (8007298 <HAL_DMA_Start_IT+0x20c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d02c      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <HAL_DMA_Start_IT+0x210>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d027      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <HAL_DMA_Start_IT+0x214>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d022      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <HAL_DMA_Start_IT+0x218>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01d      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a25      	ldr	r2, [pc, #148]	; (80072a8 <HAL_DMA_Start_IT+0x21c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a24      	ldr	r2, [pc, #144]	; (80072ac <HAL_DMA_Start_IT+0x220>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <HAL_DMA_Start_IT+0x224>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <HAL_DMA_Start_IT+0x228>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <HAL_DMA_Start_IT+0x22c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_DMA_Start_IT+0x1bc>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <HAL_DMA_Start_IT+0x230>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_DMA_Start_IT+0x1c0>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_DMA_Start_IT+0x1c2>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d036      	beq.n	80072c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f023 021e 	bic.w	r2, r3, #30
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0216 	orr.w	r2, r2, #22
 8007264:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d03e      	beq.n	80072ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0208 	orr.w	r2, r2, #8
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e035      	b.n	80072ec <HAL_DMA_Start_IT+0x260>
 8007280:	40020010 	.word	0x40020010
 8007284:	40020028 	.word	0x40020028
 8007288:	40020040 	.word	0x40020040
 800728c:	40020058 	.word	0x40020058
 8007290:	40020070 	.word	0x40020070
 8007294:	40020088 	.word	0x40020088
 8007298:	400200a0 	.word	0x400200a0
 800729c:	400200b8 	.word	0x400200b8
 80072a0:	40020410 	.word	0x40020410
 80072a4:	40020428 	.word	0x40020428
 80072a8:	40020440 	.word	0x40020440
 80072ac:	40020458 	.word	0x40020458
 80072b0:	40020470 	.word	0x40020470
 80072b4:	40020488 	.word	0x40020488
 80072b8:	400204a0 	.word	0x400204a0
 80072bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f023 020e 	bic.w	r2, r3, #14
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 020a 	orr.w	r2, r2, #10
 80072d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0204 	orr.w	r2, r2, #4
 80072ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a83      	ldr	r2, [pc, #524]	; (8007500 <HAL_DMA_Start_IT+0x474>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d072      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a82      	ldr	r2, [pc, #520]	; (8007504 <HAL_DMA_Start_IT+0x478>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d06d      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a80      	ldr	r2, [pc, #512]	; (8007508 <HAL_DMA_Start_IT+0x47c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d068      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a7f      	ldr	r2, [pc, #508]	; (800750c <HAL_DMA_Start_IT+0x480>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d063      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a7d      	ldr	r2, [pc, #500]	; (8007510 <HAL_DMA_Start_IT+0x484>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d05e      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a7c      	ldr	r2, [pc, #496]	; (8007514 <HAL_DMA_Start_IT+0x488>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d059      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a7a      	ldr	r2, [pc, #488]	; (8007518 <HAL_DMA_Start_IT+0x48c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d054      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a79      	ldr	r2, [pc, #484]	; (800751c <HAL_DMA_Start_IT+0x490>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d04f      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a77      	ldr	r2, [pc, #476]	; (8007520 <HAL_DMA_Start_IT+0x494>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04a      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a76      	ldr	r2, [pc, #472]	; (8007524 <HAL_DMA_Start_IT+0x498>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d045      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a74      	ldr	r2, [pc, #464]	; (8007528 <HAL_DMA_Start_IT+0x49c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d040      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a73      	ldr	r2, [pc, #460]	; (800752c <HAL_DMA_Start_IT+0x4a0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d03b      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a71      	ldr	r2, [pc, #452]	; (8007530 <HAL_DMA_Start_IT+0x4a4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d036      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a70      	ldr	r2, [pc, #448]	; (8007534 <HAL_DMA_Start_IT+0x4a8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d031      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a6e      	ldr	r2, [pc, #440]	; (8007538 <HAL_DMA_Start_IT+0x4ac>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02c      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a6d      	ldr	r2, [pc, #436]	; (800753c <HAL_DMA_Start_IT+0x4b0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d027      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a6b      	ldr	r2, [pc, #428]	; (8007540 <HAL_DMA_Start_IT+0x4b4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a6a      	ldr	r2, [pc, #424]	; (8007544 <HAL_DMA_Start_IT+0x4b8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01d      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a68      	ldr	r2, [pc, #416]	; (8007548 <HAL_DMA_Start_IT+0x4bc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a67      	ldr	r2, [pc, #412]	; (800754c <HAL_DMA_Start_IT+0x4c0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a65      	ldr	r2, [pc, #404]	; (8007550 <HAL_DMA_Start_IT+0x4c4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a64      	ldr	r2, [pc, #400]	; (8007554 <HAL_DMA_Start_IT+0x4c8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a62      	ldr	r2, [pc, #392]	; (8007558 <HAL_DMA_Start_IT+0x4cc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <HAL_DMA_Start_IT+0x350>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a61      	ldr	r2, [pc, #388]	; (800755c <HAL_DMA_Start_IT+0x4d0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d101      	bne.n	80073e0 <HAL_DMA_Start_IT+0x354>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_DMA_Start_IT+0x356>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01a      	beq.n	800741c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007402:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800741a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a37      	ldr	r2, [pc, #220]	; (8007500 <HAL_DMA_Start_IT+0x474>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d04a      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a36      	ldr	r2, [pc, #216]	; (8007504 <HAL_DMA_Start_IT+0x478>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d045      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a34      	ldr	r2, [pc, #208]	; (8007508 <HAL_DMA_Start_IT+0x47c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d040      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a33      	ldr	r2, [pc, #204]	; (800750c <HAL_DMA_Start_IT+0x480>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d03b      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a31      	ldr	r2, [pc, #196]	; (8007510 <HAL_DMA_Start_IT+0x484>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d036      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a30      	ldr	r2, [pc, #192]	; (8007514 <HAL_DMA_Start_IT+0x488>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d031      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2e      	ldr	r2, [pc, #184]	; (8007518 <HAL_DMA_Start_IT+0x48c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02c      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2d      	ldr	r2, [pc, #180]	; (800751c <HAL_DMA_Start_IT+0x490>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d027      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2b      	ldr	r2, [pc, #172]	; (8007520 <HAL_DMA_Start_IT+0x494>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d022      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <HAL_DMA_Start_IT+0x498>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d01d      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <HAL_DMA_Start_IT+0x49c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d018      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a27      	ldr	r2, [pc, #156]	; (800752c <HAL_DMA_Start_IT+0x4a0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a25      	ldr	r2, [pc, #148]	; (8007530 <HAL_DMA_Start_IT+0x4a4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00e      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <HAL_DMA_Start_IT+0x4a8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d009      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a22      	ldr	r2, [pc, #136]	; (8007538 <HAL_DMA_Start_IT+0x4ac>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_DMA_Start_IT+0x430>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a21      	ldr	r2, [pc, #132]	; (800753c <HAL_DMA_Start_IT+0x4b0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d108      	bne.n	80074ce <HAL_DMA_Start_IT+0x442>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	e012      	b.n	80074f4 <HAL_DMA_Start_IT+0x468>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	e009      	b.n	80074f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40020010 	.word	0x40020010
 8007504:	40020028 	.word	0x40020028
 8007508:	40020040 	.word	0x40020040
 800750c:	40020058 	.word	0x40020058
 8007510:	40020070 	.word	0x40020070
 8007514:	40020088 	.word	0x40020088
 8007518:	400200a0 	.word	0x400200a0
 800751c:	400200b8 	.word	0x400200b8
 8007520:	40020410 	.word	0x40020410
 8007524:	40020428 	.word	0x40020428
 8007528:	40020440 	.word	0x40020440
 800752c:	40020458 	.word	0x40020458
 8007530:	40020470 	.word	0x40020470
 8007534:	40020488 	.word	0x40020488
 8007538:	400204a0 	.word	0x400204a0
 800753c:	400204b8 	.word	0x400204b8
 8007540:	58025408 	.word	0x58025408
 8007544:	5802541c 	.word	0x5802541c
 8007548:	58025430 	.word	0x58025430
 800754c:	58025444 	.word	0x58025444
 8007550:	58025458 	.word	0x58025458
 8007554:	5802546c 	.word	0x5802546c
 8007558:	58025480 	.word	0x58025480
 800755c:	58025494 	.word	0x58025494

08007560 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800756c:	4b67      	ldr	r3, [pc, #412]	; (800770c <HAL_DMA_IRQHandler+0x1ac>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a67      	ldr	r2, [pc, #412]	; (8007710 <HAL_DMA_IRQHandler+0x1b0>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	0a9b      	lsrs	r3, r3, #10
 8007578:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007584:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a5f      	ldr	r2, [pc, #380]	; (8007714 <HAL_DMA_IRQHandler+0x1b4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a5d      	ldr	r2, [pc, #372]	; (8007718 <HAL_DMA_IRQHandler+0x1b8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a5c      	ldr	r2, [pc, #368]	; (800771c <HAL_DMA_IRQHandler+0x1bc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a5a      	ldr	r2, [pc, #360]	; (8007720 <HAL_DMA_IRQHandler+0x1c0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a59      	ldr	r2, [pc, #356]	; (8007724 <HAL_DMA_IRQHandler+0x1c4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a57      	ldr	r2, [pc, #348]	; (8007728 <HAL_DMA_IRQHandler+0x1c8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a56      	ldr	r2, [pc, #344]	; (800772c <HAL_DMA_IRQHandler+0x1cc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a54      	ldr	r2, [pc, #336]	; (8007730 <HAL_DMA_IRQHandler+0x1d0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a53      	ldr	r2, [pc, #332]	; (8007734 <HAL_DMA_IRQHandler+0x1d4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a51      	ldr	r2, [pc, #324]	; (8007738 <HAL_DMA_IRQHandler+0x1d8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a50      	ldr	r2, [pc, #320]	; (800773c <HAL_DMA_IRQHandler+0x1dc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <HAL_DMA_IRQHandler+0x1e0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a4d      	ldr	r2, [pc, #308]	; (8007744 <HAL_DMA_IRQHandler+0x1e4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a4b      	ldr	r2, [pc, #300]	; (8007748 <HAL_DMA_IRQHandler+0x1e8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a4a      	ldr	r2, [pc, #296]	; (800774c <HAL_DMA_IRQHandler+0x1ec>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0xd2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a48      	ldr	r2, [pc, #288]	; (8007750 <HAL_DMA_IRQHandler+0x1f0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d101      	bne.n	8007636 <HAL_DMA_IRQHandler+0xd6>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_DMA_IRQHandler+0xd8>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 842b 	beq.w	8007e94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2208      	movs	r2, #8
 8007648:	409a      	lsls	r2, r3
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80a2 	beq.w	8007798 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2e      	ldr	r2, [pc, #184]	; (8007714 <HAL_DMA_IRQHandler+0x1b4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d04a      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <HAL_DMA_IRQHandler+0x1b8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d045      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2b      	ldr	r2, [pc, #172]	; (800771c <HAL_DMA_IRQHandler+0x1bc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d040      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <HAL_DMA_IRQHandler+0x1c0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d03b      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a28      	ldr	r2, [pc, #160]	; (8007724 <HAL_DMA_IRQHandler+0x1c4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d036      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a27      	ldr	r2, [pc, #156]	; (8007728 <HAL_DMA_IRQHandler+0x1c8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d031      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a25      	ldr	r2, [pc, #148]	; (800772c <HAL_DMA_IRQHandler+0x1cc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d02c      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a24      	ldr	r2, [pc, #144]	; (8007730 <HAL_DMA_IRQHandler+0x1d0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d027      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a22      	ldr	r2, [pc, #136]	; (8007734 <HAL_DMA_IRQHandler+0x1d4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d022      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a21      	ldr	r2, [pc, #132]	; (8007738 <HAL_DMA_IRQHandler+0x1d8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d01d      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1f      	ldr	r2, [pc, #124]	; (800773c <HAL_DMA_IRQHandler+0x1dc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d018      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <HAL_DMA_IRQHandler+0x1e0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d013      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <HAL_DMA_IRQHandler+0x1e4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00e      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1b      	ldr	r2, [pc, #108]	; (8007748 <HAL_DMA_IRQHandler+0x1e8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d009      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a19      	ldr	r2, [pc, #100]	; (800774c <HAL_DMA_IRQHandler+0x1ec>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x194>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a18      	ldr	r2, [pc, #96]	; (8007750 <HAL_DMA_IRQHandler+0x1f0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d12f      	bne.n	8007754 <HAL_DMA_IRQHandler+0x1f4>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2301      	movne	r3, #1
 8007704:	2300      	moveq	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e02e      	b.n	8007768 <HAL_DMA_IRQHandler+0x208>
 800770a:	bf00      	nop
 800770c:	2000000c 	.word	0x2000000c
 8007710:	1b4e81b5 	.word	0x1b4e81b5
 8007714:	40020010 	.word	0x40020010
 8007718:	40020028 	.word	0x40020028
 800771c:	40020040 	.word	0x40020040
 8007720:	40020058 	.word	0x40020058
 8007724:	40020070 	.word	0x40020070
 8007728:	40020088 	.word	0x40020088
 800772c:	400200a0 	.word	0x400200a0
 8007730:	400200b8 	.word	0x400200b8
 8007734:	40020410 	.word	0x40020410
 8007738:	40020428 	.word	0x40020428
 800773c:	40020440 	.word	0x40020440
 8007740:	40020458 	.word	0x40020458
 8007744:	40020470 	.word	0x40020470
 8007748:	40020488 	.word	0x40020488
 800774c:	400204a0 	.word	0x400204a0
 8007750:	400204b8 	.word	0x400204b8
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf14      	ite	ne
 8007762:	2301      	movne	r3, #1
 8007764:	2300      	moveq	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d015      	beq.n	8007798 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	2208      	movs	r2, #8
 8007786:	409a      	lsls	r2, r3
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f043 0201 	orr.w	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	fa22 f303 	lsr.w	r3, r2, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d06e      	beq.n	800788c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a69      	ldr	r2, [pc, #420]	; (8007958 <HAL_DMA_IRQHandler+0x3f8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d04a      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a67      	ldr	r2, [pc, #412]	; (800795c <HAL_DMA_IRQHandler+0x3fc>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d045      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a66      	ldr	r2, [pc, #408]	; (8007960 <HAL_DMA_IRQHandler+0x400>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d040      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a64      	ldr	r2, [pc, #400]	; (8007964 <HAL_DMA_IRQHandler+0x404>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d03b      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a63      	ldr	r2, [pc, #396]	; (8007968 <HAL_DMA_IRQHandler+0x408>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d036      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a61      	ldr	r2, [pc, #388]	; (800796c <HAL_DMA_IRQHandler+0x40c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d031      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a60      	ldr	r2, [pc, #384]	; (8007970 <HAL_DMA_IRQHandler+0x410>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d02c      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a5e      	ldr	r2, [pc, #376]	; (8007974 <HAL_DMA_IRQHandler+0x414>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d027      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a5d      	ldr	r2, [pc, #372]	; (8007978 <HAL_DMA_IRQHandler+0x418>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d022      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a5b      	ldr	r2, [pc, #364]	; (800797c <HAL_DMA_IRQHandler+0x41c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d01d      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a5a      	ldr	r2, [pc, #360]	; (8007980 <HAL_DMA_IRQHandler+0x420>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d018      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a58      	ldr	r2, [pc, #352]	; (8007984 <HAL_DMA_IRQHandler+0x424>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a57      	ldr	r2, [pc, #348]	; (8007988 <HAL_DMA_IRQHandler+0x428>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00e      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a55      	ldr	r2, [pc, #340]	; (800798c <HAL_DMA_IRQHandler+0x42c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d009      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a54      	ldr	r2, [pc, #336]	; (8007990 <HAL_DMA_IRQHandler+0x430>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_DMA_IRQHandler+0x2ee>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a52      	ldr	r2, [pc, #328]	; (8007994 <HAL_DMA_IRQHandler+0x434>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d10a      	bne.n	8007864 <HAL_DMA_IRQHandler+0x304>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf14      	ite	ne
 800785c:	2301      	movne	r3, #1
 800785e:	2300      	moveq	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	e003      	b.n	800786c <HAL_DMA_IRQHandler+0x30c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007874:	f003 031f 	and.w	r3, r3, #31
 8007878:	2201      	movs	r2, #1
 800787a:	409a      	lsls	r2, r3
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007884:	f043 0202 	orr.w	r2, r3, #2
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2204      	movs	r2, #4
 8007896:	409a      	lsls	r2, r3
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 808f 	beq.w	80079c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <HAL_DMA_IRQHandler+0x3f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d04a      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a2a      	ldr	r2, [pc, #168]	; (800795c <HAL_DMA_IRQHandler+0x3fc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d045      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a29      	ldr	r2, [pc, #164]	; (8007960 <HAL_DMA_IRQHandler+0x400>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d040      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a27      	ldr	r2, [pc, #156]	; (8007964 <HAL_DMA_IRQHandler+0x404>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d03b      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a26      	ldr	r2, [pc, #152]	; (8007968 <HAL_DMA_IRQHandler+0x408>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d036      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a24      	ldr	r2, [pc, #144]	; (800796c <HAL_DMA_IRQHandler+0x40c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d031      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a23      	ldr	r2, [pc, #140]	; (8007970 <HAL_DMA_IRQHandler+0x410>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d02c      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a21      	ldr	r2, [pc, #132]	; (8007974 <HAL_DMA_IRQHandler+0x414>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d027      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a20      	ldr	r2, [pc, #128]	; (8007978 <HAL_DMA_IRQHandler+0x418>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d022      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <HAL_DMA_IRQHandler+0x41c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d01d      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <HAL_DMA_IRQHandler+0x420>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d018      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_DMA_IRQHandler+0x424>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <HAL_DMA_IRQHandler+0x428>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a18      	ldr	r2, [pc, #96]	; (800798c <HAL_DMA_IRQHandler+0x42c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d009      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a17      	ldr	r2, [pc, #92]	; (8007990 <HAL_DMA_IRQHandler+0x430>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_DMA_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <HAL_DMA_IRQHandler+0x434>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d12a      	bne.n	8007998 <HAL_DMA_IRQHandler+0x438>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf14      	ite	ne
 8007950:	2301      	movne	r3, #1
 8007952:	2300      	moveq	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	e023      	b.n	80079a0 <HAL_DMA_IRQHandler+0x440>
 8007958:	40020010 	.word	0x40020010
 800795c:	40020028 	.word	0x40020028
 8007960:	40020040 	.word	0x40020040
 8007964:	40020058 	.word	0x40020058
 8007968:	40020070 	.word	0x40020070
 800796c:	40020088 	.word	0x40020088
 8007970:	400200a0 	.word	0x400200a0
 8007974:	400200b8 	.word	0x400200b8
 8007978:	40020410 	.word	0x40020410
 800797c:	40020428 	.word	0x40020428
 8007980:	40020440 	.word	0x40020440
 8007984:	40020458 	.word	0x40020458
 8007988:	40020470 	.word	0x40020470
 800798c:	40020488 	.word	0x40020488
 8007990:	400204a0 	.word	0x400204a0
 8007994:	400204b8 	.word	0x400204b8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2204      	movs	r2, #4
 80079ae:	409a      	lsls	r2, r3
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f043 0204 	orr.w	r2, r3, #4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c4:	f003 031f 	and.w	r3, r3, #31
 80079c8:	2210      	movs	r2, #16
 80079ca:	409a      	lsls	r2, r3
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80a6 	beq.w	8007b22 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a85      	ldr	r2, [pc, #532]	; (8007bf0 <HAL_DMA_IRQHandler+0x690>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d04a      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a83      	ldr	r2, [pc, #524]	; (8007bf4 <HAL_DMA_IRQHandler+0x694>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d045      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a82      	ldr	r2, [pc, #520]	; (8007bf8 <HAL_DMA_IRQHandler+0x698>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d040      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a80      	ldr	r2, [pc, #512]	; (8007bfc <HAL_DMA_IRQHandler+0x69c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7f      	ldr	r2, [pc, #508]	; (8007c00 <HAL_DMA_IRQHandler+0x6a0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d036      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a7d      	ldr	r2, [pc, #500]	; (8007c04 <HAL_DMA_IRQHandler+0x6a4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d031      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7c      	ldr	r2, [pc, #496]	; (8007c08 <HAL_DMA_IRQHandler+0x6a8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d02c      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a7a      	ldr	r2, [pc, #488]	; (8007c0c <HAL_DMA_IRQHandler+0x6ac>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a79      	ldr	r2, [pc, #484]	; (8007c10 <HAL_DMA_IRQHandler+0x6b0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a77      	ldr	r2, [pc, #476]	; (8007c14 <HAL_DMA_IRQHandler+0x6b4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a76      	ldr	r2, [pc, #472]	; (8007c18 <HAL_DMA_IRQHandler+0x6b8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a74      	ldr	r2, [pc, #464]	; (8007c1c <HAL_DMA_IRQHandler+0x6bc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a73      	ldr	r2, [pc, #460]	; (8007c20 <HAL_DMA_IRQHandler+0x6c0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a71      	ldr	r2, [pc, #452]	; (8007c24 <HAL_DMA_IRQHandler+0x6c4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a70      	ldr	r2, [pc, #448]	; (8007c28 <HAL_DMA_IRQHandler+0x6c8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_DMA_IRQHandler+0x516>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6e      	ldr	r2, [pc, #440]	; (8007c2c <HAL_DMA_IRQHandler+0x6cc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10a      	bne.n	8007a8c <HAL_DMA_IRQHandler+0x52c>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bf14      	ite	ne
 8007a84:	2301      	movne	r3, #1
 8007a86:	2300      	moveq	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	e009      	b.n	8007aa0 <HAL_DMA_IRQHandler+0x540>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d03e      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	2210      	movs	r2, #16
 8007aae:	409a      	lsls	r2, r3
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d108      	bne.n	8007ae2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d024      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
 8007ae0:	e01f      	b.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01b      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	e016      	b.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0208 	bic.w	r2, r2, #8
 8007b10:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	409a      	lsls	r2, r3
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8110 	beq.w	8007d58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2c      	ldr	r2, [pc, #176]	; (8007bf0 <HAL_DMA_IRQHandler+0x690>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d04a      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <HAL_DMA_IRQHandler+0x694>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d045      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <HAL_DMA_IRQHandler+0x698>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d040      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <HAL_DMA_IRQHandler+0x69c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d03b      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <HAL_DMA_IRQHandler+0x6a0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d036      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <HAL_DMA_IRQHandler+0x6a4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d031      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <HAL_DMA_IRQHandler+0x6a8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d02c      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a22      	ldr	r2, [pc, #136]	; (8007c0c <HAL_DMA_IRQHandler+0x6ac>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d027      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	; (8007c10 <HAL_DMA_IRQHandler+0x6b0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d022      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_DMA_IRQHandler+0x6b4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d01d      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <HAL_DMA_IRQHandler+0x6b8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d018      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_DMA_IRQHandler+0x6bc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1a      	ldr	r2, [pc, #104]	; (8007c20 <HAL_DMA_IRQHandler+0x6c0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_DMA_IRQHandler+0x6c4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <HAL_DMA_IRQHandler+0x6c8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_DMA_IRQHandler+0x678>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a16      	ldr	r2, [pc, #88]	; (8007c2c <HAL_DMA_IRQHandler+0x6cc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d12b      	bne.n	8007c30 <HAL_DMA_IRQHandler+0x6d0>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	e02a      	b.n	8007c44 <HAL_DMA_IRQHandler+0x6e4>
 8007bee:	bf00      	nop
 8007bf0:	40020010 	.word	0x40020010
 8007bf4:	40020028 	.word	0x40020028
 8007bf8:	40020040 	.word	0x40020040
 8007bfc:	40020058 	.word	0x40020058
 8007c00:	40020070 	.word	0x40020070
 8007c04:	40020088 	.word	0x40020088
 8007c08:	400200a0 	.word	0x400200a0
 8007c0c:	400200b8 	.word	0x400200b8
 8007c10:	40020410 	.word	0x40020410
 8007c14:	40020428 	.word	0x40020428
 8007c18:	40020440 	.word	0x40020440
 8007c1c:	40020458 	.word	0x40020458
 8007c20:	40020470 	.word	0x40020470
 8007c24:	40020488 	.word	0x40020488
 8007c28:	400204a0 	.word	0x400204a0
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8087 	beq.w	8007d58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	2220      	movs	r2, #32
 8007c54:	409a      	lsls	r2, r3
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d139      	bne.n	8007cda <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0216 	bic.w	r2, r2, #22
 8007c74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695a      	ldr	r2, [r3, #20]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <HAL_DMA_IRQHandler+0x736>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0208 	bic.w	r2, r2, #8
 8007ca4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	223f      	movs	r2, #63	; 0x3f
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 834a 	beq.w	8008364 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
          }
          return;
 8007cd8:	e344      	b.n	8008364 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d018      	beq.n	8007d1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d108      	bne.n	8007d08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02c      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
 8007d06:	e027      	b.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d023      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
 8007d18:	e01e      	b.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10f      	bne.n	8007d48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0210 	bic.w	r2, r2, #16
 8007d36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 8306 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8088 	beq.w	8007e80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2204      	movs	r2, #4
 8007d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a7a      	ldr	r2, [pc, #488]	; (8007f68 <HAL_DMA_IRQHandler+0xa08>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d04a      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a79      	ldr	r2, [pc, #484]	; (8007f6c <HAL_DMA_IRQHandler+0xa0c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d045      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a77      	ldr	r2, [pc, #476]	; (8007f70 <HAL_DMA_IRQHandler+0xa10>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d040      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <HAL_DMA_IRQHandler+0xa14>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d03b      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a74      	ldr	r2, [pc, #464]	; (8007f78 <HAL_DMA_IRQHandler+0xa18>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d036      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a73      	ldr	r2, [pc, #460]	; (8007f7c <HAL_DMA_IRQHandler+0xa1c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d031      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a71      	ldr	r2, [pc, #452]	; (8007f80 <HAL_DMA_IRQHandler+0xa20>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d02c      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a70      	ldr	r2, [pc, #448]	; (8007f84 <HAL_DMA_IRQHandler+0xa24>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d027      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6e      	ldr	r2, [pc, #440]	; (8007f88 <HAL_DMA_IRQHandler+0xa28>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d022      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a6d      	ldr	r2, [pc, #436]	; (8007f8c <HAL_DMA_IRQHandler+0xa2c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d01d      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a6b      	ldr	r2, [pc, #428]	; (8007f90 <HAL_DMA_IRQHandler+0xa30>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d018      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a6a      	ldr	r2, [pc, #424]	; (8007f94 <HAL_DMA_IRQHandler+0xa34>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a68      	ldr	r2, [pc, #416]	; (8007f98 <HAL_DMA_IRQHandler+0xa38>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00e      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a67      	ldr	r2, [pc, #412]	; (8007f9c <HAL_DMA_IRQHandler+0xa3c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a65      	ldr	r2, [pc, #404]	; (8007fa0 <HAL_DMA_IRQHandler+0xa40>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d004      	beq.n	8007e18 <HAL_DMA_IRQHandler+0x8b8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a64      	ldr	r2, [pc, #400]	; (8007fa4 <HAL_DMA_IRQHandler+0xa44>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d108      	bne.n	8007e2a <HAL_DMA_IRQHandler+0x8ca>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0201 	bic.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e007      	b.n	8007e3a <HAL_DMA_IRQHandler+0x8da>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d307      	bcc.n	8007e56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f2      	bne.n	8007e3a <HAL_DMA_IRQHandler+0x8da>
 8007e54:	e000      	b.n	8007e58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d004      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e6e:	e003      	b.n	8007e78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8272 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	e26c      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a43      	ldr	r2, [pc, #268]	; (8007fa8 <HAL_DMA_IRQHandler+0xa48>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d022      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a42      	ldr	r2, [pc, #264]	; (8007fac <HAL_DMA_IRQHandler+0xa4c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d01d      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a40      	ldr	r2, [pc, #256]	; (8007fb0 <HAL_DMA_IRQHandler+0xa50>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d018      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3f      	ldr	r2, [pc, #252]	; (8007fb4 <HAL_DMA_IRQHandler+0xa54>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a3d      	ldr	r2, [pc, #244]	; (8007fb8 <HAL_DMA_IRQHandler+0xa58>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a3c      	ldr	r2, [pc, #240]	; (8007fbc <HAL_DMA_IRQHandler+0xa5c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d009      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a3a      	ldr	r2, [pc, #232]	; (8007fc0 <HAL_DMA_IRQHandler+0xa60>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x984>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a39      	ldr	r2, [pc, #228]	; (8007fc4 <HAL_DMA_IRQHandler+0xa64>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d101      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x988>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <HAL_DMA_IRQHandler+0x98a>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 823f 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2204      	movs	r2, #4
 8007f02:	409a      	lsls	r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 80cd 	beq.w	80080a8 <HAL_DMA_IRQHandler+0xb48>
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80c7 	beq.w	80080a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2204      	movs	r2, #4
 8007f24:	409a      	lsls	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d049      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8210 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f50:	e20a      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8206 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f64:	e200      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
 8007f66:	bf00      	nop
 8007f68:	40020010 	.word	0x40020010
 8007f6c:	40020028 	.word	0x40020028
 8007f70:	40020040 	.word	0x40020040
 8007f74:	40020058 	.word	0x40020058
 8007f78:	40020070 	.word	0x40020070
 8007f7c:	40020088 	.word	0x40020088
 8007f80:	400200a0 	.word	0x400200a0
 8007f84:	400200b8 	.word	0x400200b8
 8007f88:	40020410 	.word	0x40020410
 8007f8c:	40020428 	.word	0x40020428
 8007f90:	40020440 	.word	0x40020440
 8007f94:	40020458 	.word	0x40020458
 8007f98:	40020470 	.word	0x40020470
 8007f9c:	40020488 	.word	0x40020488
 8007fa0:	400204a0 	.word	0x400204a0
 8007fa4:	400204b8 	.word	0x400204b8
 8007fa8:	58025408 	.word	0x58025408
 8007fac:	5802541c 	.word	0x5802541c
 8007fb0:	58025430 	.word	0x58025430
 8007fb4:	58025444 	.word	0x58025444
 8007fb8:	58025458 	.word	0x58025458
 8007fbc:	5802546c 	.word	0x5802546c
 8007fc0:	58025480 	.word	0x58025480
 8007fc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f003 0320 	and.w	r3, r3, #32
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d160      	bne.n	8008094 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a7f      	ldr	r2, [pc, #508]	; (80081d4 <HAL_DMA_IRQHandler+0xc74>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a7d      	ldr	r2, [pc, #500]	; (80081d8 <HAL_DMA_IRQHandler+0xc78>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a7c      	ldr	r2, [pc, #496]	; (80081dc <HAL_DMA_IRQHandler+0xc7c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a7a      	ldr	r2, [pc, #488]	; (80081e0 <HAL_DMA_IRQHandler+0xc80>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a79      	ldr	r2, [pc, #484]	; (80081e4 <HAL_DMA_IRQHandler+0xc84>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a77      	ldr	r2, [pc, #476]	; (80081e8 <HAL_DMA_IRQHandler+0xc88>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a76      	ldr	r2, [pc, #472]	; (80081ec <HAL_DMA_IRQHandler+0xc8c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a74      	ldr	r2, [pc, #464]	; (80081f0 <HAL_DMA_IRQHandler+0xc90>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a73      	ldr	r2, [pc, #460]	; (80081f4 <HAL_DMA_IRQHandler+0xc94>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a71      	ldr	r2, [pc, #452]	; (80081f8 <HAL_DMA_IRQHandler+0xc98>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a70      	ldr	r2, [pc, #448]	; (80081fc <HAL_DMA_IRQHandler+0xc9c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a6e      	ldr	r2, [pc, #440]	; (8008200 <HAL_DMA_IRQHandler+0xca0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a6d      	ldr	r2, [pc, #436]	; (8008204 <HAL_DMA_IRQHandler+0xca4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a6b      	ldr	r2, [pc, #428]	; (8008208 <HAL_DMA_IRQHandler+0xca8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a6a      	ldr	r2, [pc, #424]	; (800820c <HAL_DMA_IRQHandler+0xcac>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_DMA_IRQHandler+0xb12>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a68      	ldr	r2, [pc, #416]	; (8008210 <HAL_DMA_IRQHandler+0xcb0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <HAL_DMA_IRQHandler+0xb24>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0208 	bic.w	r2, r2, #8
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e007      	b.n	8008094 <HAL_DMA_IRQHandler+0xb34>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0204 	bic.w	r2, r2, #4
 8008092:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8165 	beq.w	8008368 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a6:	e15f      	b.n	8008368 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	2202      	movs	r2, #2
 80080b2:	409a      	lsls	r2, r3
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80c5 	beq.w	8008248 <HAL_DMA_IRQHandler+0xce8>
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80bf 	beq.w	8008248 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	2202      	movs	r2, #2
 80080d4:	409a      	lsls	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d109      	bne.n	8008102 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 813a 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008100:	e134      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8130 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008114:	e12a      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	f040 8089 	bne.w	8008234 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <HAL_DMA_IRQHandler+0xc74>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d04a      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <HAL_DMA_IRQHandler+0xc78>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d045      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a28      	ldr	r2, [pc, #160]	; (80081dc <HAL_DMA_IRQHandler+0xc7c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d040      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <HAL_DMA_IRQHandler+0xc80>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d03b      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a25      	ldr	r2, [pc, #148]	; (80081e4 <HAL_DMA_IRQHandler+0xc84>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d036      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a23      	ldr	r2, [pc, #140]	; (80081e8 <HAL_DMA_IRQHandler+0xc88>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d031      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_DMA_IRQHandler+0xc8c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d02c      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a20      	ldr	r2, [pc, #128]	; (80081f0 <HAL_DMA_IRQHandler+0xc90>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d027      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <HAL_DMA_IRQHandler+0xc94>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1d      	ldr	r2, [pc, #116]	; (80081f8 <HAL_DMA_IRQHandler+0xc98>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01d      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <HAL_DMA_IRQHandler+0xc9c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1a      	ldr	r2, [pc, #104]	; (8008200 <HAL_DMA_IRQHandler+0xca0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_DMA_IRQHandler+0xca4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a17      	ldr	r2, [pc, #92]	; (8008208 <HAL_DMA_IRQHandler+0xca8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_DMA_IRQHandler+0xcac>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xc62>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a14      	ldr	r2, [pc, #80]	; (8008210 <HAL_DMA_IRQHandler+0xcb0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d128      	bne.n	8008214 <HAL_DMA_IRQHandler+0xcb4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0214 	bic.w	r2, r2, #20
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e027      	b.n	8008224 <HAL_DMA_IRQHandler+0xcc4>
 80081d4:	40020010 	.word	0x40020010
 80081d8:	40020028 	.word	0x40020028
 80081dc:	40020040 	.word	0x40020040
 80081e0:	40020058 	.word	0x40020058
 80081e4:	40020070 	.word	0x40020070
 80081e8:	40020088 	.word	0x40020088
 80081ec:	400200a0 	.word	0x400200a0
 80081f0:	400200b8 	.word	0x400200b8
 80081f4:	40020410 	.word	0x40020410
 80081f8:	40020428 	.word	0x40020428
 80081fc:	40020440 	.word	0x40020440
 8008200:	40020458 	.word	0x40020458
 8008204:	40020470 	.word	0x40020470
 8008208:	40020488 	.word	0x40020488
 800820c:	400204a0 	.word	0x400204a0
 8008210:	400204b8 	.word	0x400204b8
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 020a 	bic.w	r2, r2, #10
 8008222:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8097 	beq.w	800836c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008246:	e091      	b.n	800836c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	2208      	movs	r2, #8
 8008252:	409a      	lsls	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8088 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8082 	beq.w	800836e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a41      	ldr	r2, [pc, #260]	; (8008374 <HAL_DMA_IRQHandler+0xe14>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d04a      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <HAL_DMA_IRQHandler+0xe18>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d045      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a3e      	ldr	r2, [pc, #248]	; (800837c <HAL_DMA_IRQHandler+0xe1c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d040      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a3c      	ldr	r2, [pc, #240]	; (8008380 <HAL_DMA_IRQHandler+0xe20>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d03b      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3b      	ldr	r2, [pc, #236]	; (8008384 <HAL_DMA_IRQHandler+0xe24>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d036      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a39      	ldr	r2, [pc, #228]	; (8008388 <HAL_DMA_IRQHandler+0xe28>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d031      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a38      	ldr	r2, [pc, #224]	; (800838c <HAL_DMA_IRQHandler+0xe2c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d02c      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a36      	ldr	r2, [pc, #216]	; (8008390 <HAL_DMA_IRQHandler+0xe30>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d027      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a35      	ldr	r2, [pc, #212]	; (8008394 <HAL_DMA_IRQHandler+0xe34>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d022      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a33      	ldr	r2, [pc, #204]	; (8008398 <HAL_DMA_IRQHandler+0xe38>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01d      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a32      	ldr	r2, [pc, #200]	; (800839c <HAL_DMA_IRQHandler+0xe3c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d018      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a30      	ldr	r2, [pc, #192]	; (80083a0 <HAL_DMA_IRQHandler+0xe40>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2f      	ldr	r2, [pc, #188]	; (80083a4 <HAL_DMA_IRQHandler+0xe44>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a2d      	ldr	r2, [pc, #180]	; (80083a8 <HAL_DMA_IRQHandler+0xe48>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a2c      	ldr	r2, [pc, #176]	; (80083ac <HAL_DMA_IRQHandler+0xe4c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_DMA_IRQHandler+0xdaa>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <HAL_DMA_IRQHandler+0xe50>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d108      	bne.n	800831c <HAL_DMA_IRQHandler+0xdbc>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 021c 	bic.w	r2, r2, #28
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	e007      	b.n	800832c <HAL_DMA_IRQHandler+0xdcc>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 020e 	bic.w	r2, r2, #14
 800832a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	2201      	movs	r2, #1
 8008336:	409a      	lsls	r2, r3
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	e004      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008364:	bf00      	nop
 8008366:	e002      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008368:	bf00      	nop
 800836a:	e000      	b.n	800836e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800836c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800836e:	3728      	adds	r7, #40	; 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40020010 	.word	0x40020010
 8008378:	40020028 	.word	0x40020028
 800837c:	40020040 	.word	0x40020040
 8008380:	40020058 	.word	0x40020058
 8008384:	40020070 	.word	0x40020070
 8008388:	40020088 	.word	0x40020088
 800838c:	400200a0 	.word	0x400200a0
 8008390:	400200b8 	.word	0x400200b8
 8008394:	40020410 	.word	0x40020410
 8008398:	40020428 	.word	0x40020428
 800839c:	40020440 	.word	0x40020440
 80083a0:	40020458 	.word	0x40020458
 80083a4:	40020470 	.word	0x40020470
 80083a8:	40020488 	.word	0x40020488
 80083ac:	400204a0 	.word	0x400204a0
 80083b0:	400204b8 	.word	0x400204b8

080083b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a7f      	ldr	r2, [pc, #508]	; (80085e8 <DMA_SetConfig+0x21c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d072      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a7d      	ldr	r2, [pc, #500]	; (80085ec <DMA_SetConfig+0x220>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d06d      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a7c      	ldr	r2, [pc, #496]	; (80085f0 <DMA_SetConfig+0x224>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d068      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a7a      	ldr	r2, [pc, #488]	; (80085f4 <DMA_SetConfig+0x228>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d063      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a79      	ldr	r2, [pc, #484]	; (80085f8 <DMA_SetConfig+0x22c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d05e      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a77      	ldr	r2, [pc, #476]	; (80085fc <DMA_SetConfig+0x230>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d059      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a76      	ldr	r2, [pc, #472]	; (8008600 <DMA_SetConfig+0x234>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d054      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a74      	ldr	r2, [pc, #464]	; (8008604 <DMA_SetConfig+0x238>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d04f      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a73      	ldr	r2, [pc, #460]	; (8008608 <DMA_SetConfig+0x23c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d04a      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a71      	ldr	r2, [pc, #452]	; (800860c <DMA_SetConfig+0x240>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d045      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a70      	ldr	r2, [pc, #448]	; (8008610 <DMA_SetConfig+0x244>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d040      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a6e      	ldr	r2, [pc, #440]	; (8008614 <DMA_SetConfig+0x248>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d03b      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6d      	ldr	r2, [pc, #436]	; (8008618 <DMA_SetConfig+0x24c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d036      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a6b      	ldr	r2, [pc, #428]	; (800861c <DMA_SetConfig+0x250>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d031      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6a      	ldr	r2, [pc, #424]	; (8008620 <DMA_SetConfig+0x254>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d02c      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a68      	ldr	r2, [pc, #416]	; (8008624 <DMA_SetConfig+0x258>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d027      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a67      	ldr	r2, [pc, #412]	; (8008628 <DMA_SetConfig+0x25c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d022      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a65      	ldr	r2, [pc, #404]	; (800862c <DMA_SetConfig+0x260>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01d      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a64      	ldr	r2, [pc, #400]	; (8008630 <DMA_SetConfig+0x264>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d018      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a62      	ldr	r2, [pc, #392]	; (8008634 <DMA_SetConfig+0x268>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a61      	ldr	r2, [pc, #388]	; (8008638 <DMA_SetConfig+0x26c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00e      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a5f      	ldr	r2, [pc, #380]	; (800863c <DMA_SetConfig+0x270>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d009      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a5e      	ldr	r2, [pc, #376]	; (8008640 <DMA_SetConfig+0x274>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d004      	beq.n	80084d6 <DMA_SetConfig+0x10a>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a5c      	ldr	r2, [pc, #368]	; (8008644 <DMA_SetConfig+0x278>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d101      	bne.n	80084da <DMA_SetConfig+0x10e>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <DMA_SetConfig+0x110>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a39      	ldr	r2, [pc, #228]	; (80085e8 <DMA_SetConfig+0x21c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d04a      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a38      	ldr	r2, [pc, #224]	; (80085ec <DMA_SetConfig+0x220>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d045      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a36      	ldr	r2, [pc, #216]	; (80085f0 <DMA_SetConfig+0x224>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d040      	beq.n	800859c <DMA_SetConfig+0x1d0>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a35      	ldr	r2, [pc, #212]	; (80085f4 <DMA_SetConfig+0x228>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d03b      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a33      	ldr	r2, [pc, #204]	; (80085f8 <DMA_SetConfig+0x22c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d036      	beq.n	800859c <DMA_SetConfig+0x1d0>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a32      	ldr	r2, [pc, #200]	; (80085fc <DMA_SetConfig+0x230>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d031      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a30      	ldr	r2, [pc, #192]	; (8008600 <DMA_SetConfig+0x234>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d02c      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a2f      	ldr	r2, [pc, #188]	; (8008604 <DMA_SetConfig+0x238>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d027      	beq.n	800859c <DMA_SetConfig+0x1d0>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a2d      	ldr	r2, [pc, #180]	; (8008608 <DMA_SetConfig+0x23c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d022      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a2c      	ldr	r2, [pc, #176]	; (800860c <DMA_SetConfig+0x240>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d01d      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <DMA_SetConfig+0x244>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d018      	beq.n	800859c <DMA_SetConfig+0x1d0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a29      	ldr	r2, [pc, #164]	; (8008614 <DMA_SetConfig+0x248>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d013      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a27      	ldr	r2, [pc, #156]	; (8008618 <DMA_SetConfig+0x24c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00e      	beq.n	800859c <DMA_SetConfig+0x1d0>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a26      	ldr	r2, [pc, #152]	; (800861c <DMA_SetConfig+0x250>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d009      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a24      	ldr	r2, [pc, #144]	; (8008620 <DMA_SetConfig+0x254>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <DMA_SetConfig+0x1d0>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a23      	ldr	r2, [pc, #140]	; (8008624 <DMA_SetConfig+0x258>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d101      	bne.n	80085a0 <DMA_SetConfig+0x1d4>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <DMA_SetConfig+0x1d6>
 80085a0:	2300      	movs	r3, #0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d059      	beq.n	800865a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085aa:	f003 031f 	and.w	r3, r3, #31
 80085ae:	223f      	movs	r2, #63	; 0x3f
 80085b0:	409a      	lsls	r2, r3
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b40      	cmp	r3, #64	; 0x40
 80085d4:	d138      	bne.n	8008648 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085e6:	e086      	b.n	80086f6 <DMA_SetConfig+0x32a>
 80085e8:	40020010 	.word	0x40020010
 80085ec:	40020028 	.word	0x40020028
 80085f0:	40020040 	.word	0x40020040
 80085f4:	40020058 	.word	0x40020058
 80085f8:	40020070 	.word	0x40020070
 80085fc:	40020088 	.word	0x40020088
 8008600:	400200a0 	.word	0x400200a0
 8008604:	400200b8 	.word	0x400200b8
 8008608:	40020410 	.word	0x40020410
 800860c:	40020428 	.word	0x40020428
 8008610:	40020440 	.word	0x40020440
 8008614:	40020458 	.word	0x40020458
 8008618:	40020470 	.word	0x40020470
 800861c:	40020488 	.word	0x40020488
 8008620:	400204a0 	.word	0x400204a0
 8008624:	400204b8 	.word	0x400204b8
 8008628:	58025408 	.word	0x58025408
 800862c:	5802541c 	.word	0x5802541c
 8008630:	58025430 	.word	0x58025430
 8008634:	58025444 	.word	0x58025444
 8008638:	58025458 	.word	0x58025458
 800863c:	5802546c 	.word	0x5802546c
 8008640:	58025480 	.word	0x58025480
 8008644:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]
}
 8008658:	e04d      	b.n	80086f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a29      	ldr	r2, [pc, #164]	; (8008704 <DMA_SetConfig+0x338>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d022      	beq.n	80086aa <DMA_SetConfig+0x2de>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a27      	ldr	r2, [pc, #156]	; (8008708 <DMA_SetConfig+0x33c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d01d      	beq.n	80086aa <DMA_SetConfig+0x2de>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a26      	ldr	r2, [pc, #152]	; (800870c <DMA_SetConfig+0x340>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d018      	beq.n	80086aa <DMA_SetConfig+0x2de>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a24      	ldr	r2, [pc, #144]	; (8008710 <DMA_SetConfig+0x344>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <DMA_SetConfig+0x2de>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a23      	ldr	r2, [pc, #140]	; (8008714 <DMA_SetConfig+0x348>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00e      	beq.n	80086aa <DMA_SetConfig+0x2de>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a21      	ldr	r2, [pc, #132]	; (8008718 <DMA_SetConfig+0x34c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d009      	beq.n	80086aa <DMA_SetConfig+0x2de>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a20      	ldr	r2, [pc, #128]	; (800871c <DMA_SetConfig+0x350>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <DMA_SetConfig+0x2de>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1e      	ldr	r2, [pc, #120]	; (8008720 <DMA_SetConfig+0x354>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d101      	bne.n	80086ae <DMA_SetConfig+0x2e2>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <DMA_SetConfig+0x2e4>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d020      	beq.n	80086f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b8:	f003 031f 	and.w	r3, r3, #31
 80086bc:	2201      	movs	r2, #1
 80086be:	409a      	lsls	r2, r3
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b40      	cmp	r3, #64	; 0x40
 80086d2:	d108      	bne.n	80086e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	60da      	str	r2, [r3, #12]
}
 80086e4:	e007      	b.n	80086f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	60da      	str	r2, [r3, #12]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	58025408 	.word	0x58025408
 8008708:	5802541c 	.word	0x5802541c
 800870c:	58025430 	.word	0x58025430
 8008710:	58025444 	.word	0x58025444
 8008714:	58025458 	.word	0x58025458
 8008718:	5802546c 	.word	0x5802546c
 800871c:	58025480 	.word	0x58025480
 8008720:	58025494 	.word	0x58025494

08008724 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a42      	ldr	r2, [pc, #264]	; (800883c <DMA_CalcBaseAndBitshift+0x118>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d04a      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a41      	ldr	r2, [pc, #260]	; (8008840 <DMA_CalcBaseAndBitshift+0x11c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d045      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a3f      	ldr	r2, [pc, #252]	; (8008844 <DMA_CalcBaseAndBitshift+0x120>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d040      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a3e      	ldr	r2, [pc, #248]	; (8008848 <DMA_CalcBaseAndBitshift+0x124>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d03b      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a3c      	ldr	r2, [pc, #240]	; (800884c <DMA_CalcBaseAndBitshift+0x128>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d036      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a3b      	ldr	r2, [pc, #236]	; (8008850 <DMA_CalcBaseAndBitshift+0x12c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d031      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a39      	ldr	r2, [pc, #228]	; (8008854 <DMA_CalcBaseAndBitshift+0x130>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d02c      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a38      	ldr	r2, [pc, #224]	; (8008858 <DMA_CalcBaseAndBitshift+0x134>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d027      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a36      	ldr	r2, [pc, #216]	; (800885c <DMA_CalcBaseAndBitshift+0x138>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d022      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a35      	ldr	r2, [pc, #212]	; (8008860 <DMA_CalcBaseAndBitshift+0x13c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d01d      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a33      	ldr	r2, [pc, #204]	; (8008864 <DMA_CalcBaseAndBitshift+0x140>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d018      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a32      	ldr	r2, [pc, #200]	; (8008868 <DMA_CalcBaseAndBitshift+0x144>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a30      	ldr	r2, [pc, #192]	; (800886c <DMA_CalcBaseAndBitshift+0x148>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00e      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a2f      	ldr	r2, [pc, #188]	; (8008870 <DMA_CalcBaseAndBitshift+0x14c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d009      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a2d      	ldr	r2, [pc, #180]	; (8008874 <DMA_CalcBaseAndBitshift+0x150>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d004      	beq.n	80087cc <DMA_CalcBaseAndBitshift+0xa8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <DMA_CalcBaseAndBitshift+0x154>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d101      	bne.n	80087d0 <DMA_CalcBaseAndBitshift+0xac>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <DMA_CalcBaseAndBitshift+0xae>
 80087d0:	2300      	movs	r3, #0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d024      	beq.n	8008820 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	3b10      	subs	r3, #16
 80087de:	4a27      	ldr	r2, [pc, #156]	; (800887c <DMA_CalcBaseAndBitshift+0x158>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	4a24      	ldr	r2, [pc, #144]	; (8008880 <DMA_CalcBaseAndBitshift+0x15c>)
 80087f0:	5cd3      	ldrb	r3, [r2, r3]
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d908      	bls.n	8008810 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <DMA_CalcBaseAndBitshift+0x160>)
 8008806:	4013      	ands	r3, r2
 8008808:	1d1a      	adds	r2, r3, #4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	659a      	str	r2, [r3, #88]	; 0x58
 800880e:	e00d      	b.n	800882c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	4b1b      	ldr	r3, [pc, #108]	; (8008884 <DMA_CalcBaseAndBitshift+0x160>)
 8008818:	4013      	ands	r3, r2
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6593      	str	r3, [r2, #88]	; 0x58
 800881e:	e005      	b.n	800882c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	40020010 	.word	0x40020010
 8008840:	40020028 	.word	0x40020028
 8008844:	40020040 	.word	0x40020040
 8008848:	40020058 	.word	0x40020058
 800884c:	40020070 	.word	0x40020070
 8008850:	40020088 	.word	0x40020088
 8008854:	400200a0 	.word	0x400200a0
 8008858:	400200b8 	.word	0x400200b8
 800885c:	40020410 	.word	0x40020410
 8008860:	40020428 	.word	0x40020428
 8008864:	40020440 	.word	0x40020440
 8008868:	40020458 	.word	0x40020458
 800886c:	40020470 	.word	0x40020470
 8008870:	40020488 	.word	0x40020488
 8008874:	400204a0 	.word	0x400204a0
 8008878:	400204b8 	.word	0x400204b8
 800887c:	aaaaaaab 	.word	0xaaaaaaab
 8008880:	08019278 	.word	0x08019278
 8008884:	fffffc00 	.word	0xfffffc00

08008888 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d120      	bne.n	80088de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d858      	bhi.n	8008956 <DMA_CheckFifoParam+0xce>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <DMA_CheckFifoParam+0x24>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088cf 	.word	0x080088cf
 80088b4:	080088bd 	.word	0x080088bd
 80088b8:	08008957 	.word	0x08008957
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d048      	beq.n	800895a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088cc:	e045      	b.n	800895a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088d6:	d142      	bne.n	800895e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088dc:	e03f      	b.n	800895e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088e6:	d123      	bne.n	8008930 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d838      	bhi.n	8008962 <DMA_CheckFifoParam+0xda>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <DMA_CheckFifoParam+0x70>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008909 	.word	0x08008909
 80088fc:	0800890f 	.word	0x0800890f
 8008900:	08008909 	.word	0x08008909
 8008904:	08008921 	.word	0x08008921
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	73fb      	strb	r3, [r7, #15]
        break;
 800890c:	e030      	b.n	8008970 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d025      	beq.n	8008966 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800891e:	e022      	b.n	8008966 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008928:	d11f      	bne.n	800896a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800892e:	e01c      	b.n	800896a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	2b02      	cmp	r3, #2
 8008936:	d902      	bls.n	800893e <DMA_CheckFifoParam+0xb6>
 8008938:	2b03      	cmp	r3, #3
 800893a:	d003      	beq.n	8008944 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800893c:	e018      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	73fb      	strb	r3, [r7, #15]
        break;
 8008942:	e015      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	e00b      	b.n	800896e <DMA_CheckFifoParam+0xe6>
        break;
 8008956:	bf00      	nop
 8008958:	e00a      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        break;
 800895a:	bf00      	nop
 800895c:	e008      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        break;
 800895e:	bf00      	nop
 8008960:	e006      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        break;
 8008962:	bf00      	nop
 8008964:	e004      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        break;
 8008966:	bf00      	nop
 8008968:	e002      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
        break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <DMA_CheckFifoParam+0xe8>
    break;
 800896e:	bf00      	nop
    }
  }

  return status;
 8008970:	7bfb      	ldrb	r3, [r7, #15]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a38      	ldr	r2, [pc, #224]	; (8008a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d022      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a36      	ldr	r2, [pc, #216]	; (8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01d      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d018      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a33      	ldr	r2, [pc, #204]	; (8008a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a32      	ldr	r2, [pc, #200]	; (8008a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00e      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a30      	ldr	r2, [pc, #192]	; (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a2d      	ldr	r2, [pc, #180]	; (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d101      	bne.n	80089e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089e2:	2300      	movs	r3, #0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01a      	beq.n	8008a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	3b08      	subs	r3, #8
 80089f0:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	091b      	lsrs	r3, r3, #4
 80089f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4b26      	ldr	r3, [pc, #152]	; (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	461a      	mov	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	2201      	movs	r2, #1
 8008a16:	409a      	lsls	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a1c:	e024      	b.n	8008a68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	3b10      	subs	r3, #16
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a28:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2c:	091b      	lsrs	r3, r3, #4
 8008a2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d806      	bhi.n	8008a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	; (8008aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d902      	bls.n	8008a46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3308      	adds	r3, #8
 8008a44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4b18      	ldr	r3, [pc, #96]	; (8008aac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	461a      	mov	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f003 031f 	and.w	r3, r3, #31
 8008a60:	2201      	movs	r2, #1
 8008a62:	409a      	lsls	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a68:	bf00      	nop
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	58025408 	.word	0x58025408
 8008a78:	5802541c 	.word	0x5802541c
 8008a7c:	58025430 	.word	0x58025430
 8008a80:	58025444 	.word	0x58025444
 8008a84:	58025458 	.word	0x58025458
 8008a88:	5802546c 	.word	0x5802546c
 8008a8c:	58025480 	.word	0x58025480
 8008a90:	58025494 	.word	0x58025494
 8008a94:	cccccccd 	.word	0xcccccccd
 8008a98:	16009600 	.word	0x16009600
 8008a9c:	58025880 	.word	0x58025880
 8008aa0:	aaaaaaab 	.word	0xaaaaaaab
 8008aa4:	400204b8 	.word	0x400204b8
 8008aa8:	4002040f 	.word	0x4002040f
 8008aac:	10008200 	.word	0x10008200
 8008ab0:	40020880 	.word	0x40020880

08008ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d04a      	beq.n	8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d847      	bhi.n	8008b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a25      	ldr	r2, [pc, #148]	; (8008b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d022      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a24      	ldr	r2, [pc, #144]	; (8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d01d      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a22      	ldr	r2, [pc, #136]	; (8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d018      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a21      	ldr	r2, [pc, #132]	; (8008b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d013      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00e      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d009      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1c      	ldr	r2, [pc, #112]	; (8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d004      	beq.n	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d101      	bne.n	8008b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b24:	2300      	movs	r3, #0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	461a      	mov	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a15      	ldr	r2, [pc, #84]	; (8008b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b3c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b3e:	e009      	b.n	8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	2201      	movs	r2, #1
 8008b5a:	409a      	lsls	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	58025408 	.word	0x58025408
 8008b70:	5802541c 	.word	0x5802541c
 8008b74:	58025430 	.word	0x58025430
 8008b78:	58025444 	.word	0x58025444
 8008b7c:	58025458 	.word	0x58025458
 8008b80:	5802546c 	.word	0x5802546c
 8008b84:	58025480 	.word	0x58025480
 8008b88:	58025494 	.word	0x58025494
 8008b8c:	1600963f 	.word	0x1600963f
 8008b90:	58025940 	.word	0x58025940
 8008b94:	1000823f 	.word	0x1000823f
 8008b98:	40020940 	.word	0x40020940

08008b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b089      	sub	sp, #36	; 0x24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008baa:	4b89      	ldr	r3, [pc, #548]	; (8008dd0 <HAL_GPIO_Init+0x234>)
 8008bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bae:	e194      	b.n	8008eda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8186 	beq.w	8008ed4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d005      	beq.n	8008be0 <HAL_GPIO_Init+0x44>
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d130      	bne.n	8008c42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	2203      	movs	r2, #3
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c16:	2201      	movs	r2, #1
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	4013      	ands	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	091b      	lsrs	r3, r3, #4
 8008c2c:	f003 0201 	and.w	r2, r3, #1
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	fa02 f303 	lsl.w	r3, r2, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f003 0303 	and.w	r3, r3, #3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d017      	beq.n	8008c7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	2203      	movs	r2, #3
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d123      	bne.n	8008cd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	08da      	lsrs	r2, r3, #3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3208      	adds	r2, #8
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	220f      	movs	r2, #15
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	4013      	ands	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691a      	ldr	r2, [r3, #16]
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	08da      	lsrs	r2, r3, #3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3208      	adds	r2, #8
 8008ccc:	69b9      	ldr	r1, [r7, #24]
 8008cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	2203      	movs	r2, #3
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f003 0203 	and.w	r2, r3, #3
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80e0 	beq.w	8008ed4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d14:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <HAL_GPIO_Init+0x238>)
 8008d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d1a:	4a2e      	ldr	r2, [pc, #184]	; (8008dd4 <HAL_GPIO_Init+0x238>)
 8008d1c:	f043 0302 	orr.w	r3, r3, #2
 8008d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d24:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <HAL_GPIO_Init+0x238>)
 8008d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d32:	4a29      	ldr	r2, [pc, #164]	; (8008dd8 <HAL_GPIO_Init+0x23c>)
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	3302      	adds	r3, #2
 8008d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	220f      	movs	r2, #15
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4013      	ands	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <HAL_GPIO_Init+0x240>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d052      	beq.n	8008e04 <HAL_GPIO_Init+0x268>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <HAL_GPIO_Init+0x244>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d031      	beq.n	8008dca <HAL_GPIO_Init+0x22e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a1e      	ldr	r2, [pc, #120]	; (8008de4 <HAL_GPIO_Init+0x248>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d02b      	beq.n	8008dc6 <HAL_GPIO_Init+0x22a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1d      	ldr	r2, [pc, #116]	; (8008de8 <HAL_GPIO_Init+0x24c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d025      	beq.n	8008dc2 <HAL_GPIO_Init+0x226>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <HAL_GPIO_Init+0x250>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d01f      	beq.n	8008dbe <HAL_GPIO_Init+0x222>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <HAL_GPIO_Init+0x254>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d019      	beq.n	8008dba <HAL_GPIO_Init+0x21e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <HAL_GPIO_Init+0x258>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <HAL_GPIO_Init+0x21a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <HAL_GPIO_Init+0x25c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00d      	beq.n	8008db2 <HAL_GPIO_Init+0x216>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <HAL_GPIO_Init+0x260>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d007      	beq.n	8008dae <HAL_GPIO_Init+0x212>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <HAL_GPIO_Init+0x264>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d101      	bne.n	8008daa <HAL_GPIO_Init+0x20e>
 8008da6:	2309      	movs	r3, #9
 8008da8:	e02d      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008daa:	230a      	movs	r3, #10
 8008dac:	e02b      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dae:	2308      	movs	r3, #8
 8008db0:	e029      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008db2:	2307      	movs	r3, #7
 8008db4:	e027      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008db6:	2306      	movs	r3, #6
 8008db8:	e025      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dba:	2305      	movs	r3, #5
 8008dbc:	e023      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	e021      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e01f      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e01d      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e01b      	b.n	8008e06 <HAL_GPIO_Init+0x26a>
 8008dce:	bf00      	nop
 8008dd0:	58000080 	.word	0x58000080
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	58000400 	.word	0x58000400
 8008ddc:	58020000 	.word	0x58020000
 8008de0:	58020400 	.word	0x58020400
 8008de4:	58020800 	.word	0x58020800
 8008de8:	58020c00 	.word	0x58020c00
 8008dec:	58021000 	.word	0x58021000
 8008df0:	58021400 	.word	0x58021400
 8008df4:	58021800 	.word	0x58021800
 8008df8:	58021c00 	.word	0x58021c00
 8008dfc:	58022000 	.word	0x58022000
 8008e00:	58022400 	.word	0x58022400
 8008e04:	2300      	movs	r3, #0
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	f002 0203 	and.w	r2, r2, #3
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	4093      	lsls	r3, r2
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e16:	4938      	ldr	r1, [pc, #224]	; (8008ef8 <HAL_GPIO_Init+0x35c>)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	089b      	lsrs	r3, r3, #2
 8008e1c:	3302      	adds	r3, #2
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	43db      	mvns	r3, r3
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	4013      	ands	r3, r2
 8008e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	43db      	mvns	r3, r3
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	4013      	ands	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f47f ae63 	bne.w	8008bb0 <HAL_GPIO_Init+0x14>
  }
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	3724      	adds	r7, #36	; 0x24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	58000400 	.word	0x58000400

08008efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
 8008f18:	e001      	b.n	8008f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	807b      	strh	r3, [r7, #2]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f3c:	787b      	ldrb	r3, [r7, #1]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f42:	887a      	ldrh	r2, [r7, #2]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f48:	e003      	b.n	8008f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f4a:	887b      	ldrh	r3, [r7, #2]
 8008f4c:	041a      	lsls	r2, r3, #16
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	619a      	str	r2, [r3, #24]
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f60:	b08f      	sub	sp, #60	; 0x3c
 8008f62:	af0a      	add	r7, sp, #40	; 0x28
 8008f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e054      	b.n	800901a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7fb fa76 	bl	800447c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2203      	movs	r2, #3
 8008f94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f00b faf3 	bl	801459a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	687e      	ldr	r6, [r7, #4]
 8008fbc:	466d      	mov	r5, sp
 8008fbe:	f106 0410 	add.w	r4, r6, #16
 8008fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fce:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fd2:	1d33      	adds	r3, r6, #4
 8008fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fd6:	6838      	ldr	r0, [r7, #0]
 8008fd8:	f00b fa60 	bl	801449c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00b faea 	bl	80145bc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	603b      	str	r3, [r7, #0]
 8008fee:	687e      	ldr	r6, [r7, #4]
 8008ff0:	466d      	mov	r5, sp
 8008ff2:	f106 0410 	add.w	r4, r6, #16
 8008ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009002:	e885 0003 	stmia.w	r5, {r0, r1}
 8009006:	1d33      	adds	r3, r6, #4
 8009008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800900a:	6838      	ldr	r0, [r7, #0]
 800900c:	f00b fc92 	bl	8014934 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009022 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009022:	b590      	push	{r4, r7, lr}
 8009024:	b089      	sub	sp, #36	; 0x24
 8009026:	af04      	add	r7, sp, #16
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	461a      	mov	r2, r3
 8009030:	4603      	mov	r3, r0
 8009032:	70fb      	strb	r3, [r7, #3]
 8009034:	460b      	mov	r3, r1
 8009036:	70bb      	strb	r3, [r7, #2]
 8009038:	4613      	mov	r3, r2
 800903a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <HAL_HCD_HC_Init+0x28>
 8009046:	2302      	movs	r3, #2
 8009048:	e076      	b.n	8009138 <HAL_HCD_HC_Init+0x116>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	212c      	movs	r1, #44	; 0x2c
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	4413      	add	r3, r2
 800905e:	333d      	adds	r3, #61	; 0x3d
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	212c      	movs	r1, #44	; 0x2c
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	3338      	adds	r3, #56	; 0x38
 8009072:	787a      	ldrb	r2, [r7, #1]
 8009074:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	212c      	movs	r1, #44	; 0x2c
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	4413      	add	r3, r2
 8009082:	3340      	adds	r3, #64	; 0x40
 8009084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009086:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	212c      	movs	r1, #44	; 0x2c
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3339      	adds	r3, #57	; 0x39
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800909a:	78fb      	ldrb	r3, [r7, #3]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	212c      	movs	r1, #44	; 0x2c
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	333f      	adds	r3, #63	; 0x3f
 80090a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80090ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80090ae:	78fb      	ldrb	r3, [r7, #3]
 80090b0:	78ba      	ldrb	r2, [r7, #2]
 80090b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80090b6:	b2d0      	uxtb	r0, r2
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	212c      	movs	r1, #44	; 0x2c
 80090bc:	fb01 f303 	mul.w	r3, r1, r3
 80090c0:	4413      	add	r3, r2
 80090c2:	333a      	adds	r3, #58	; 0x3a
 80090c4:	4602      	mov	r2, r0
 80090c6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80090c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da09      	bge.n	80090e4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	212c      	movs	r1, #44	; 0x2c
 80090d6:	fb01 f303 	mul.w	r3, r1, r3
 80090da:	4413      	add	r3, r2
 80090dc:	333b      	adds	r3, #59	; 0x3b
 80090de:	2201      	movs	r2, #1
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	e008      	b.n	80090f6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	212c      	movs	r1, #44	; 0x2c
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	333b      	adds	r3, #59	; 0x3b
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	212c      	movs	r1, #44	; 0x2c
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	4413      	add	r3, r2
 8009102:	333c      	adds	r3, #60	; 0x3c
 8009104:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009108:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	787c      	ldrb	r4, [r7, #1]
 8009110:	78ba      	ldrb	r2, [r7, #2]
 8009112:	78f9      	ldrb	r1, [r7, #3]
 8009114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009116:	9302      	str	r3, [sp, #8]
 8009118:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4623      	mov	r3, r4
 8009126:	f00b fd87 	bl	8014c38 <USB_HC_Init>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	bd90      	pop	{r4, r7, pc}

08009140 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_HCD_HC_Halt+0x1e>
 800915a:	2302      	movs	r3, #2
 800915c:	e00f      	b.n	800917e <HAL_HCD_HC_Halt+0x3e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	4611      	mov	r1, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f00b ffd9 	bl	8015126 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4603      	mov	r3, r0
 8009198:	70fb      	strb	r3, [r7, #3]
 800919a:	460b      	mov	r3, r1
 800919c:	70bb      	strb	r3, [r7, #2]
 800919e:	4613      	mov	r3, r2
 80091a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	212c      	movs	r1, #44	; 0x2c
 80091a8:	fb01 f303 	mul.w	r3, r1, r3
 80091ac:	4413      	add	r3, r2
 80091ae:	333b      	adds	r3, #59	; 0x3b
 80091b0:	78ba      	ldrb	r2, [r7, #2]
 80091b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	212c      	movs	r1, #44	; 0x2c
 80091ba:	fb01 f303 	mul.w	r3, r1, r3
 80091be:	4413      	add	r3, r2
 80091c0:	333f      	adds	r3, #63	; 0x3f
 80091c2:	787a      	ldrb	r2, [r7, #1]
 80091c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80091c6:	7c3b      	ldrb	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d112      	bne.n	80091f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	212c      	movs	r1, #44	; 0x2c
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	3342      	adds	r3, #66	; 0x42
 80091da:	2203      	movs	r2, #3
 80091dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	212c      	movs	r1, #44	; 0x2c
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	333d      	adds	r3, #61	; 0x3d
 80091ec:	7f3a      	ldrb	r2, [r7, #28]
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	e008      	b.n	8009204 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	212c      	movs	r1, #44	; 0x2c
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	4413      	add	r3, r2
 80091fe:	3342      	adds	r3, #66	; 0x42
 8009200:	2202      	movs	r2, #2
 8009202:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009204:	787b      	ldrb	r3, [r7, #1]
 8009206:	2b03      	cmp	r3, #3
 8009208:	f200 80c6 	bhi.w	8009398 <HAL_HCD_HC_SubmitRequest+0x210>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009225 	.word	0x08009225
 8009218:	08009385 	.word	0x08009385
 800921c:	08009289 	.word	0x08009289
 8009220:	08009307 	.word	0x08009307
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009224:	7c3b      	ldrb	r3, [r7, #16]
 8009226:	2b01      	cmp	r3, #1
 8009228:	f040 80b8 	bne.w	800939c <HAL_HCD_HC_SubmitRequest+0x214>
 800922c:	78bb      	ldrb	r3, [r7, #2]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f040 80b4 	bne.w	800939c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8009234:	8b3b      	ldrh	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d108      	bne.n	800924c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	212c      	movs	r1, #44	; 0x2c
 8009240:	fb01 f303 	mul.w	r3, r1, r3
 8009244:	4413      	add	r3, r2
 8009246:	3355      	adds	r3, #85	; 0x55
 8009248:	2201      	movs	r2, #1
 800924a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	212c      	movs	r1, #44	; 0x2c
 8009252:	fb01 f303 	mul.w	r3, r1, r3
 8009256:	4413      	add	r3, r2
 8009258:	3355      	adds	r3, #85	; 0x55
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	212c      	movs	r1, #44	; 0x2c
 8009266:	fb01 f303 	mul.w	r3, r1, r3
 800926a:	4413      	add	r3, r2
 800926c:	3342      	adds	r3, #66	; 0x42
 800926e:	2200      	movs	r2, #0
 8009270:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009272:	e093      	b.n	800939c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	212c      	movs	r1, #44	; 0x2c
 800927a:	fb01 f303 	mul.w	r3, r1, r3
 800927e:	4413      	add	r3, r2
 8009280:	3342      	adds	r3, #66	; 0x42
 8009282:	2202      	movs	r2, #2
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e089      	b.n	800939c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009288:	78bb      	ldrb	r3, [r7, #2]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d11d      	bne.n	80092ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	212c      	movs	r1, #44	; 0x2c
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	4413      	add	r3, r2
 800929a:	3355      	adds	r3, #85	; 0x55
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	212c      	movs	r1, #44	; 0x2c
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	3342      	adds	r3, #66	; 0x42
 80092b0:	2200      	movs	r2, #0
 80092b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80092b4:	e073      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	212c      	movs	r1, #44	; 0x2c
 80092bc:	fb01 f303 	mul.w	r3, r1, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	3342      	adds	r3, #66	; 0x42
 80092c4:	2202      	movs	r2, #2
 80092c6:	701a      	strb	r2, [r3, #0]
      break;
 80092c8:	e069      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	212c      	movs	r1, #44	; 0x2c
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	3354      	adds	r3, #84	; 0x54
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	212c      	movs	r1, #44	; 0x2c
 80092e4:	fb01 f303 	mul.w	r3, r1, r3
 80092e8:	4413      	add	r3, r2
 80092ea:	3342      	adds	r3, #66	; 0x42
 80092ec:	2200      	movs	r2, #0
 80092ee:	701a      	strb	r2, [r3, #0]
      break;
 80092f0:	e055      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	212c      	movs	r1, #44	; 0x2c
 80092f8:	fb01 f303 	mul.w	r3, r1, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	3342      	adds	r3, #66	; 0x42
 8009300:	2202      	movs	r2, #2
 8009302:	701a      	strb	r2, [r3, #0]
      break;
 8009304:	e04b      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009306:	78bb      	ldrb	r3, [r7, #2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11d      	bne.n	8009348 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	212c      	movs	r1, #44	; 0x2c
 8009312:	fb01 f303 	mul.w	r3, r1, r3
 8009316:	4413      	add	r3, r2
 8009318:	3355      	adds	r3, #85	; 0x55
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	212c      	movs	r1, #44	; 0x2c
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	4413      	add	r3, r2
 800932c:	3342      	adds	r3, #66	; 0x42
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009332:	e034      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	212c      	movs	r1, #44	; 0x2c
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	3342      	adds	r3, #66	; 0x42
 8009342:	2202      	movs	r2, #2
 8009344:	701a      	strb	r2, [r3, #0]
      break;
 8009346:	e02a      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	212c      	movs	r1, #44	; 0x2c
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	4413      	add	r3, r2
 8009354:	3354      	adds	r3, #84	; 0x54
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	212c      	movs	r1, #44	; 0x2c
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	3342      	adds	r3, #66	; 0x42
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
      break;
 800936e:	e016      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	212c      	movs	r1, #44	; 0x2c
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	3342      	adds	r3, #66	; 0x42
 800937e:	2202      	movs	r2, #2
 8009380:	701a      	strb	r2, [r3, #0]
      break;
 8009382:	e00c      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	212c      	movs	r1, #44	; 0x2c
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	4413      	add	r3, r2
 8009390:	3342      	adds	r3, #66	; 0x42
 8009392:	2200      	movs	r2, #0
 8009394:	701a      	strb	r2, [r3, #0]
      break;
 8009396:	e002      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8009398:	bf00      	nop
 800939a:	e000      	b.n	800939e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800939c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	212c      	movs	r1, #44	; 0x2c
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	3344      	adds	r3, #68	; 0x44
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	8b3a      	ldrh	r2, [r7, #24]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	202c      	movs	r0, #44	; 0x2c
 80093b8:	fb00 f303 	mul.w	r3, r0, r3
 80093bc:	440b      	add	r3, r1
 80093be:	334c      	adds	r3, #76	; 0x4c
 80093c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	212c      	movs	r1, #44	; 0x2c
 80093c8:	fb01 f303 	mul.w	r3, r1, r3
 80093cc:	4413      	add	r3, r2
 80093ce:	3360      	adds	r3, #96	; 0x60
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	212c      	movs	r1, #44	; 0x2c
 80093da:	fb01 f303 	mul.w	r3, r1, r3
 80093de:	4413      	add	r3, r2
 80093e0:	3350      	adds	r3, #80	; 0x50
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	212c      	movs	r1, #44	; 0x2c
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	4413      	add	r3, r2
 80093f2:	3339      	adds	r3, #57	; 0x39
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	212c      	movs	r1, #44	; 0x2c
 80093fe:	fb01 f303 	mul.w	r3, r1, r3
 8009402:	4413      	add	r3, r2
 8009404:	3361      	adds	r3, #97	; 0x61
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	222c      	movs	r2, #44	; 0x2c
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	3338      	adds	r3, #56	; 0x38
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	18d1      	adds	r1, r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f00b fd2c 	bl	8014e80 <USB_HC_StartXfer>
 8009428:	4603      	mov	r3, r0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop

08009434 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f00b fa30 	bl	80148b0 <USB_GetMode>
 8009450:	4603      	mov	r3, r0
 8009452:	2b01      	cmp	r3, #1
 8009454:	f040 80fa 	bne.w	800964c <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f00b f9f3 	bl	8014848 <USB_ReadInterrupts>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80f0 	beq.w	800964a <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f00b f9ea 	bl	8014848 <USB_ReadInterrupts>
 8009474:	4603      	mov	r3, r0
 8009476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800947a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800947e:	d104      	bne.n	800948a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009488:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f00b f9da 	bl	8014848 <USB_ReadInterrupts>
 8009494:	4603      	mov	r3, r0
 8009496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800949a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800949e:	d104      	bne.n	80094aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80094a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f00b f9ca 	bl	8014848 <USB_ReadInterrupts>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094be:	d104      	bne.n	80094ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80094c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f00b f9ba 	bl	8014848 <USB_ReadInterrupts>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f003 0302 	and.w	r3, r3, #2
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d103      	bne.n	80094e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2202      	movs	r2, #2
 80094e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f00b f9ac 	bl	8014848 <USB_ReadInterrupts>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fa:	d120      	bne.n	800953e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009504:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d113      	bne.n	800953e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009516:	2110      	movs	r1, #16
 8009518:	6938      	ldr	r0, [r7, #16]
 800951a:	f00b f89b 	bl	8014654 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800951e:	6938      	ldr	r0, [r7, #16]
 8009520:	f00b f8cc 	bl	80146bc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d105      	bne.n	8009538 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2101      	movs	r1, #1
 8009532:	4618      	mov	r0, r3
 8009534:	f00b fab8 	bl	8014aa8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fb f81d 	bl	8004578 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f00b f980 	bl	8014848 <USB_ReadInterrupts>
 8009548:	4603      	mov	r3, r0
 800954a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800954e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009552:	d102      	bne.n	800955a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f9a3 	bl	800a8a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f00b f972 	bl	8014848 <USB_ReadInterrupts>
 8009564:	4603      	mov	r3, r0
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b08      	cmp	r3, #8
 800956c:	d106      	bne.n	800957c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7fa ffe6 	bl	8004540 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2208      	movs	r2, #8
 800957a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f00b f961 	bl	8014848 <USB_ReadInterrupts>
 8009586:	4603      	mov	r3, r0
 8009588:	f003 0310 	and.w	r3, r3, #16
 800958c:	2b10      	cmp	r3, #16
 800958e:	d101      	bne.n	8009594 <HAL_HCD_IRQHandler+0x160>
 8009590:	2301      	movs	r3, #1
 8009592:	e000      	b.n	8009596 <HAL_HCD_IRQHandler+0x162>
 8009594:	2300      	movs	r3, #0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d012      	beq.n	80095c0 <HAL_HCD_IRQHandler+0x18c>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699a      	ldr	r2, [r3, #24]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0210 	bic.w	r2, r2, #16
 80095a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f8a6 	bl	800a6fc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699a      	ldr	r2, [r3, #24]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0210 	orr.w	r2, r2, #16
 80095be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f00b f93f 	bl	8014848 <USB_ReadInterrupts>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095d4:	d13a      	bne.n	800964c <HAL_HCD_IRQHandler+0x218>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f00b fd92 	bl	8015104 <USB_HC_ReadInterrupt>
 80095e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	e025      	b.n	8009634 <HAL_HCD_IRQHandler+0x200>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d018      	beq.n	800962e <HAL_HCD_IRQHandler+0x1fa>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800960e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009612:	d106      	bne.n	8009622 <HAL_HCD_IRQHandler+0x1ee>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f8ab 	bl	8009776 <HCD_HC_IN_IRQHandler>
 8009620:	e005      	b.n	800962e <HAL_HCD_IRQHandler+0x1fa>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fcb5 	bl	8009f98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	3301      	adds	r3, #1
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	429a      	cmp	r2, r3
 800963c:	d3d4      	bcc.n	80095e8 <HAL_HCD_IRQHandler+0x1b4>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009646:	615a      	str	r2, [r3, #20]
 8009648:	e000      	b.n	800964c <HAL_HCD_IRQHandler+0x218>
      return;
 800964a:	bf00      	nop
    }
  }
}
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_HCD_Start+0x16>
 8009664:	2302      	movs	r3, #2
 8009666:	e013      	b.n	8009690 <HAL_HCD_Start+0x3e>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2101      	movs	r1, #1
 8009676:	4618      	mov	r0, r3
 8009678:	f00b fa7d 	bl	8014b76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f00a ff79 	bl	8014578 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <HAL_HCD_Stop+0x16>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e00d      	b.n	80096ca <HAL_HCD_Stop+0x32>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f00b fe6c 	bl	8015398 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f00b fa1f 	bl	8014b22 <USB_ResetPort>
 80096e4:	4603      	mov	r3, r0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	212c      	movs	r1, #44	; 0x2c
 8009700:	fb01 f303 	mul.w	r3, r1, r3
 8009704:	4413      	add	r3, r2
 8009706:	3360      	adds	r3, #96	; 0x60
 8009708:	781b      	ldrb	r3, [r3, #0]
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	212c      	movs	r1, #44	; 0x2c
 8009728:	fb01 f303 	mul.w	r3, r1, r3
 800972c:	4413      	add	r3, r2
 800972e:	3350      	adds	r3, #80	; 0x50
 8009730:	681b      	ldr	r3, [r3, #0]
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4618      	mov	r0, r3
 800974c:	f00b fa63 	bl	8014c16 <USB_GetCurrentFrame>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f00b fa3e 	bl	8014be8 <USB_GetHostSpeed>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b086      	sub	sp, #24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f00b f86a 	bl	801486e <USB_ReadChInterrupts>
 800979a:	4603      	mov	r3, r0
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d119      	bne.n	80097d8 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b0:	461a      	mov	r2, r3
 80097b2:	2304      	movs	r3, #4
 80097b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	212c      	movs	r1, #44	; 0x2c
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	4413      	add	r3, r2
 80097c2:	3361      	adds	r3, #97	; 0x61
 80097c4:	2207      	movs	r2, #7
 80097c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f00b fca8 	bl	8015126 <USB_HC_Halt>
 80097d6:	e09a      	b.n	800990e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f00b f844 	bl	801486e <USB_ReadChInterrupts>
 80097e6:	4603      	mov	r3, r0
 80097e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f0:	d11a      	bne.n	8009828 <HCD_HC_IN_IRQHandler+0xb2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	461a      	mov	r2, r3
 8009800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009804:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	212c      	movs	r1, #44	; 0x2c
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	4413      	add	r3, r2
 8009812:	3361      	adds	r3, #97	; 0x61
 8009814:	2208      	movs	r2, #8
 8009816:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f00b fc80 	bl	8015126 <USB_HC_Halt>
 8009826:	e072      	b.n	800990e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f00b f81c 	bl	801486e <USB_ReadChInterrupts>
 8009836:	4603      	mov	r3, r0
 8009838:	f003 0308 	and.w	r3, r3, #8
 800983c:	2b08      	cmp	r3, #8
 800983e:	d119      	bne.n	8009874 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984c:	461a      	mov	r2, r3
 800984e:	2308      	movs	r3, #8
 8009850:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	212c      	movs	r1, #44	; 0x2c
 8009858:	fb01 f303 	mul.w	r3, r1, r3
 800985c:	4413      	add	r3, r2
 800985e:	3361      	adds	r3, #97	; 0x61
 8009860:	2206      	movs	r2, #6
 8009862:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f00b fc5a 	bl	8015126 <USB_HC_Halt>
 8009872:	e04c      	b.n	800990e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f00a fff6 	bl	801486e <USB_ReadChInterrupts>
 8009882:	4603      	mov	r3, r0
 8009884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800988c:	d11a      	bne.n	80098c4 <HCD_HC_IN_IRQHandler+0x14e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	4413      	add	r3, r2
 8009896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989a:	461a      	mov	r2, r3
 800989c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	212c      	movs	r1, #44	; 0x2c
 80098a8:	fb01 f303 	mul.w	r3, r1, r3
 80098ac:	4413      	add	r3, r2
 80098ae:	3361      	adds	r3, #97	; 0x61
 80098b0:	2209      	movs	r2, #9
 80098b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f00b fc32 	bl	8015126 <USB_HC_Halt>
 80098c2:	e024      	b.n	800990e <HCD_HC_IN_IRQHandler+0x198>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f00a ffce 	bl	801486e <USB_ReadChInterrupts>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d8:	2b80      	cmp	r3, #128	; 0x80
 80098da:	d118      	bne.n	800990e <HCD_HC_IN_IRQHandler+0x198>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e8:	461a      	mov	r2, r3
 80098ea:	2380      	movs	r3, #128	; 0x80
 80098ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	212c      	movs	r1, #44	; 0x2c
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	4413      	add	r3, r2
 80098fa:	3361      	adds	r3, #97	; 0x61
 80098fc:	2207      	movs	r2, #7
 80098fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f00b fc0c 	bl	8015126 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f00a ffa9 	bl	801486e <USB_ReadChInterrupts>
 800991c:	4603      	mov	r3, r0
 800991e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009926:	d111      	bne.n	800994c <HCD_HC_IN_IRQHandler+0x1d6>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f00b fbf8 	bl	8015126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	4413      	add	r3, r2
 800993e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009942:	461a      	mov	r2, r3
 8009944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009948:	6093      	str	r3, [r2, #8]
 800994a:	e322      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	78fa      	ldrb	r2, [r7, #3]
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f00a ff8a 	bl	801486e <USB_ReadChInterrupts>
 800995a:	4603      	mov	r3, r0
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b01      	cmp	r3, #1
 8009962:	f040 80f0 	bne.w	8009b46 <HCD_HC_IN_IRQHandler+0x3d0>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	4413      	add	r3, r2
 800996e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009972:	461a      	mov	r2, r3
 8009974:	2320      	movs	r3, #32
 8009976:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d019      	beq.n	80099b4 <HCD_HC_IN_IRQHandler+0x23e>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	212c      	movs	r1, #44	; 0x2c
 8009986:	fb01 f303 	mul.w	r3, r1, r3
 800998a:	4413      	add	r3, r2
 800998c:	3348      	adds	r3, #72	; 0x48
 800998e:	6819      	ldr	r1, [r3, #0]
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	1a8a      	subs	r2, r1, r2
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	202c      	movs	r0, #44	; 0x2c
 80099aa:	fb00 f303 	mul.w	r3, r0, r3
 80099ae:	440b      	add	r3, r1
 80099b0:	3350      	adds	r3, #80	; 0x50
 80099b2:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	212c      	movs	r1, #44	; 0x2c
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3361      	adds	r3, #97	; 0x61
 80099c2:	2201      	movs	r2, #1
 80099c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	212c      	movs	r1, #44	; 0x2c
 80099cc:	fb01 f303 	mul.w	r3, r1, r3
 80099d0:	4413      	add	r3, r2
 80099d2:	335c      	adds	r3, #92	; 0x5c
 80099d4:	2200      	movs	r2, #0
 80099d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e4:	461a      	mov	r2, r3
 80099e6:	2301      	movs	r3, #1
 80099e8:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	212c      	movs	r1, #44	; 0x2c
 80099f0:	fb01 f303 	mul.w	r3, r1, r3
 80099f4:	4413      	add	r3, r2
 80099f6:	333f      	adds	r3, #63	; 0x3f
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d009      	beq.n	8009a12 <HCD_HC_IN_IRQHandler+0x29c>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	212c      	movs	r1, #44	; 0x2c
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	333f      	adds	r3, #63	; 0x3f
 8009a0c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d110      	bne.n	8009a34 <HCD_HC_IN_IRQHandler+0x2be>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f00b fb83 	bl	8015126 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	2310      	movs	r3, #16
 8009a30:	6093      	str	r3, [r2, #8]
 8009a32:	e039      	b.n	8009aa8 <HCD_HC_IN_IRQHandler+0x332>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	212c      	movs	r1, #44	; 0x2c
 8009a3a:	fb01 f303 	mul.w	r3, r1, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	333f      	adds	r3, #63	; 0x3f
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d009      	beq.n	8009a5c <HCD_HC_IN_IRQHandler+0x2e6>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	212c      	movs	r1, #44	; 0x2c
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	333f      	adds	r3, #63	; 0x3f
 8009a56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d125      	bne.n	8009aa8 <HCD_HC_IN_IRQHandler+0x332>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a7a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	212c      	movs	r1, #44	; 0x2c
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	3360      	adds	r3, #96	; 0x60
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	212c      	movs	r1, #44	; 0x2c
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	4413      	add	r3, r2
 8009a9a:	3360      	adds	r3, #96	; 0x60
 8009a9c:	781a      	ldrb	r2, [r3, #0]
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7fa fd76 	bl	8004594 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d135      	bne.n	8009b1c <HCD_HC_IN_IRQHandler+0x3a6>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	212c      	movs	r1, #44	; 0x2c
 8009ab6:	fb01 f303 	mul.w	r3, r1, r3
 8009aba:	4413      	add	r3, r2
 8009abc:	3350      	adds	r3, #80	; 0x50
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	202c      	movs	r0, #44	; 0x2c
 8009ac6:	fb00 f202 	mul.w	r2, r0, r2
 8009aca:	440a      	add	r2, r1
 8009acc:	3240      	adds	r2, #64	; 0x40
 8009ace:	8812      	ldrh	r2, [r2, #0]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	202c      	movs	r0, #44	; 0x2c
 8009ada:	fb00 f202 	mul.w	r2, r0, r2
 8009ade:	440a      	add	r2, r1
 8009ae0:	3240      	adds	r2, #64	; 0x40
 8009ae2:	8812      	ldrh	r2, [r2, #0]
 8009ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae8:	f003 0301 	and.w	r3, r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8250 	beq.w	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	212c      	movs	r1, #44	; 0x2c
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	3354      	adds	r3, #84	; 0x54
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	f082 0201 	eor.w	r2, r2, #1
 8009b08:	b2d0      	uxtb	r0, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	212c      	movs	r1, #44	; 0x2c
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	4413      	add	r3, r2
 8009b14:	3354      	adds	r3, #84	; 0x54
 8009b16:	4602      	mov	r2, r0
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	e23a      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	212c      	movs	r1, #44	; 0x2c
 8009b22:	fb01 f303 	mul.w	r3, r1, r3
 8009b26:	4413      	add	r3, r2
 8009b28:	3354      	adds	r3, #84	; 0x54
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	f082 0201 	eor.w	r2, r2, #1
 8009b32:	b2d0      	uxtb	r0, r2
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	212c      	movs	r1, #44	; 0x2c
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	3354      	adds	r3, #84	; 0x54
 8009b40:	4602      	mov	r2, r0
 8009b42:	701a      	strb	r2, [r3, #0]
 8009b44:	e225      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f00a fe8d 	bl	801486e <USB_ReadChInterrupts>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d109      	bne.n	8009b72 <HCD_HC_IN_IRQHandler+0x3fc>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	6093      	str	r3, [r2, #8]
 8009b70:	e20f      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	78fa      	ldrb	r2, [r7, #3]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f00a fe77 	bl	801486e <USB_ReadChInterrupts>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	f040 8168 	bne.w	8009e5c <HCD_HC_IN_IRQHandler+0x6e6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b98:	461a      	mov	r2, r3
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	212c      	movs	r1, #44	; 0x2c
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	3361      	adds	r3, #97	; 0x61
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d112      	bne.n	8009bd8 <HCD_HC_IN_IRQHandler+0x462>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	212c      	movs	r1, #44	; 0x2c
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3361      	adds	r3, #97	; 0x61
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	212c      	movs	r1, #44	; 0x2c
 8009bca:	fb01 f303 	mul.w	r3, r1, r3
 8009bce:	4413      	add	r3, r2
 8009bd0:	3360      	adds	r3, #96	; 0x60
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	701a      	strb	r2, [r3, #0]
 8009bd6:	e133      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	212c      	movs	r1, #44	; 0x2c
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	4413      	add	r3, r2
 8009be4:	3361      	adds	r3, #97	; 0x61
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b06      	cmp	r3, #6
 8009bea:	d112      	bne.n	8009c12 <HCD_HC_IN_IRQHandler+0x49c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009bec:	78fb      	ldrb	r3, [r7, #3]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	212c      	movs	r1, #44	; 0x2c
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3361      	adds	r3, #97	; 0x61
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	212c      	movs	r1, #44	; 0x2c
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	4413      	add	r3, r2
 8009c0a:	3360      	adds	r3, #96	; 0x60
 8009c0c:	2205      	movs	r2, #5
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	e116      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	212c      	movs	r1, #44	; 0x2c
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3361      	adds	r3, #97	; 0x61
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b07      	cmp	r3, #7
 8009c24:	d009      	beq.n	8009c3a <HCD_HC_IN_IRQHandler+0x4c4>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009c26:	78fb      	ldrb	r3, [r7, #3]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	212c      	movs	r1, #44	; 0x2c
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	4413      	add	r3, r2
 8009c32:	3361      	adds	r3, #97	; 0x61
 8009c34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d158      	bne.n	8009cec <HCD_HC_IN_IRQHandler+0x576>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c3a:	78fb      	ldrb	r3, [r7, #3]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	212c      	movs	r1, #44	; 0x2c
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	3361      	adds	r3, #97	; 0x61
 8009c48:	2202      	movs	r2, #2
 8009c4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	222c      	movs	r2, #44	; 0x2c
 8009c52:	fb03 f202 	mul.w	r2, r3, r2
 8009c56:	440a      	add	r2, r1
 8009c58:	325c      	adds	r2, #92	; 0x5c
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	3201      	adds	r2, #1
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	202c      	movs	r0, #44	; 0x2c
 8009c62:	fb00 f303 	mul.w	r3, r0, r3
 8009c66:	440b      	add	r3, r1
 8009c68:	335c      	adds	r3, #92	; 0x5c
 8009c6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	212c      	movs	r1, #44	; 0x2c
 8009c72:	fb01 f303 	mul.w	r3, r1, r3
 8009c76:	4413      	add	r3, r2
 8009c78:	335c      	adds	r3, #92	; 0x5c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d912      	bls.n	8009ca6 <HCD_HC_IN_IRQHandler+0x530>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	212c      	movs	r1, #44	; 0x2c
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	335c      	adds	r3, #92	; 0x5c
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	212c      	movs	r1, #44	; 0x2c
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3360      	adds	r3, #96	; 0x60
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009ca4:	e0cc      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	212c      	movs	r1, #44	; 0x2c
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	3360      	adds	r3, #96	; 0x60
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009cea:	e0a9      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	212c      	movs	r1, #44	; 0x2c
 8009cf2:	fb01 f303 	mul.w	r3, r1, r3
 8009cf6:	4413      	add	r3, r2
 8009cf8:	3361      	adds	r3, #97	; 0x61
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b05      	cmp	r3, #5
 8009cfe:	d109      	bne.n	8009d14 <HCD_HC_IN_IRQHandler+0x59e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	212c      	movs	r1, #44	; 0x2c
 8009d06:	fb01 f303 	mul.w	r3, r1, r3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3361      	adds	r3, #97	; 0x61
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e095      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	212c      	movs	r1, #44	; 0x2c
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	3361      	adds	r3, #97	; 0x61
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d109      	bne.n	8009d3c <HCD_HC_IN_IRQHandler+0x5c6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	212c      	movs	r1, #44	; 0x2c
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	3361      	adds	r3, #97	; 0x61
 8009d36:	2202      	movs	r2, #2
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	e081      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	212c      	movs	r1, #44	; 0x2c
 8009d42:	fb01 f303 	mul.w	r3, r1, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	3361      	adds	r3, #97	; 0x61
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d13f      	bne.n	8009dd0 <HCD_HC_IN_IRQHandler+0x65a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	212c      	movs	r1, #44	; 0x2c
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3361      	adds	r3, #97	; 0x61
 8009d5e:	2202      	movs	r2, #2
 8009d60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	212c      	movs	r1, #44	; 0x2c
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	3360      	adds	r3, #96	; 0x60
 8009d70:	2202      	movs	r2, #2
 8009d72:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	212c      	movs	r1, #44	; 0x2c
 8009d7a:	fb01 f303 	mul.w	r3, r1, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	333f      	adds	r3, #63	; 0x3f
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d009      	beq.n	8009d9c <HCD_HC_IN_IRQHandler+0x626>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	212c      	movs	r1, #44	; 0x2c
 8009d8e:	fb01 f303 	mul.w	r3, r1, r3
 8009d92:	4413      	add	r3, r2
 8009d94:	333f      	adds	r3, #63	; 0x3f
 8009d96:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d151      	bne.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009db2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	e037      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	212c      	movs	r1, #44	; 0x2c
 8009dd6:	fb01 f303 	mul.w	r3, r1, r3
 8009dda:	4413      	add	r3, r2
 8009ddc:	3361      	adds	r3, #97	; 0x61
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b08      	cmp	r3, #8
 8009de2:	d122      	bne.n	8009e2a <HCD_HC_IN_IRQHandler+0x6b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	212c      	movs	r1, #44	; 0x2c
 8009dea:	fb01 f303 	mul.w	r3, r1, r3
 8009dee:	4413      	add	r3, r2
 8009df0:	3361      	adds	r3, #97	; 0x61
 8009df2:	2202      	movs	r2, #2
 8009df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	222c      	movs	r2, #44	; 0x2c
 8009dfc:	fb03 f202 	mul.w	r2, r3, r2
 8009e00:	440a      	add	r2, r1
 8009e02:	325c      	adds	r2, #92	; 0x5c
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	3201      	adds	r2, #1
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	202c      	movs	r0, #44	; 0x2c
 8009e0c:	fb00 f303 	mul.w	r3, r0, r3
 8009e10:	440b      	add	r3, r1
 8009e12:	335c      	adds	r3, #92	; 0x5c
 8009e14:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	212c      	movs	r1, #44	; 0x2c
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	4413      	add	r3, r2
 8009e22:	3360      	adds	r3, #96	; 0x60
 8009e24:	2204      	movs	r2, #4
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	e00a      	b.n	8009e40 <HCD_HC_IN_IRQHandler+0x6ca>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	212c      	movs	r1, #44	; 0x2c
 8009e30:	fb01 f303 	mul.w	r3, r1, r3
 8009e34:	4413      	add	r3, r2
 8009e36:	3361      	adds	r3, #97	; 0x61
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	f000 80a8 	beq.w	8009f90 <HCD_HC_IN_IRQHandler+0x81a>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	212c      	movs	r1, #44	; 0x2c
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3360      	adds	r3, #96	; 0x60
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fa fb9d 	bl	8004594 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009e5a:	e09a      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f00a fd02 	bl	801486e <USB_ReadChInterrupts>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e70:	2b40      	cmp	r3, #64	; 0x40
 8009e72:	d122      	bne.n	8009eba <HCD_HC_IN_IRQHandler+0x744>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e80:	461a      	mov	r2, r3
 8009e82:	2340      	movs	r3, #64	; 0x40
 8009e84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	212c      	movs	r1, #44	; 0x2c
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	4413      	add	r3, r2
 8009e92:	3361      	adds	r3, #97	; 0x61
 8009e94:	2205      	movs	r2, #5
 8009e96:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	212c      	movs	r1, #44	; 0x2c
 8009e9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	335c      	adds	r3, #92	; 0x5c
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f00b f937 	bl	8015126 <USB_HC_Halt>
 8009eb8:	e06b      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f00a fcd3 	bl	801486e <USB_ReadChInterrupts>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f003 0310 	and.w	r3, r3, #16
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d15f      	bne.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	212c      	movs	r1, #44	; 0x2c
 8009ed8:	fb01 f303 	mul.w	r3, r1, r3
 8009edc:	4413      	add	r3, r2
 8009ede:	333f      	adds	r3, #63	; 0x3f
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d119      	bne.n	8009f1a <HCD_HC_IN_IRQHandler+0x7a4>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	212c      	movs	r1, #44	; 0x2c
 8009eec:	fb01 f303 	mul.w	r3, r1, r3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	335c      	adds	r3, #92	; 0x5c
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	212c      	movs	r1, #44	; 0x2c
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	3361      	adds	r3, #97	; 0x61
 8009f06:	2204      	movs	r2, #4
 8009f08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	78fa      	ldrb	r2, [r7, #3]
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f00b f907 	bl	8015126 <USB_HC_Halt>
 8009f18:	e030      	b.n	8009f7c <HCD_HC_IN_IRQHandler+0x806>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	212c      	movs	r1, #44	; 0x2c
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	4413      	add	r3, r2
 8009f26:	333f      	adds	r3, #63	; 0x3f
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <HCD_HC_IN_IRQHandler+0x7cc>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	212c      	movs	r1, #44	; 0x2c
 8009f34:	fb01 f303 	mul.w	r3, r1, r3
 8009f38:	4413      	add	r3, r2
 8009f3a:	333f      	adds	r3, #63	; 0x3f
 8009f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d11c      	bne.n	8009f7c <HCD_HC_IN_IRQHandler+0x806>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	212c      	movs	r1, #44	; 0x2c
 8009f48:	fb01 f303 	mul.w	r3, r1, r3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	335c      	adds	r3, #92	; 0x5c
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10f      	bne.n	8009f7c <HCD_HC_IN_IRQHandler+0x806>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	212c      	movs	r1, #44	; 0x2c
 8009f62:	fb01 f303 	mul.w	r3, r1, r3
 8009f66:	4413      	add	r3, r2
 8009f68:	3361      	adds	r3, #97	; 0x61
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	78fa      	ldrb	r2, [r7, #3]
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f00b f8d5 	bl	8015126 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f88:	461a      	mov	r2, r3
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	6093      	str	r3, [r2, #8]
 8009f8e:	e000      	b.n	8009f92 <HCD_HC_IN_IRQHandler+0x81c>
        return;
 8009f90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	78fa      	ldrb	r2, [r7, #3]
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f00a fc59 	bl	801486e <USB_ReadChInterrupts>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d119      	bne.n	8009ffa <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	212c      	movs	r1, #44	; 0x2c
 8009fde:	fb01 f303 	mul.w	r3, r1, r3
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3361      	adds	r3, #97	; 0x61
 8009fe6:	2207      	movs	r2, #7
 8009fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f00b f897 	bl	8015126 <USB_HC_Halt>
 8009ff8:	e37d      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	78fa      	ldrb	r2, [r7, #3]
 800a000:	4611      	mov	r1, r2
 800a002:	4618      	mov	r0, r3
 800a004:	f00a fc33 	bl	801486e <USB_ReadChInterrupts>
 800a008:	4603      	mov	r3, r0
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b20      	cmp	r3, #32
 800a010:	d136      	bne.n	800a080 <HCD_HC_OUT_IRQHandler+0xe8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01e:	461a      	mov	r2, r3
 800a020:	2320      	movs	r3, #32
 800a022:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	212c      	movs	r1, #44	; 0x2c
 800a02a:	fb01 f303 	mul.w	r3, r1, r3
 800a02e:	4413      	add	r3, r2
 800a030:	333d      	adds	r3, #61	; 0x3d
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	f040 835e 	bne.w	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	212c      	movs	r1, #44	; 0x2c
 800a040:	fb01 f303 	mul.w	r3, r1, r3
 800a044:	4413      	add	r3, r2
 800a046:	333d      	adds	r3, #61	; 0x3d
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	212c      	movs	r1, #44	; 0x2c
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	4413      	add	r3, r2
 800a058:	3360      	adds	r3, #96	; 0x60
 800a05a:	2202      	movs	r2, #2
 800a05c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	212c      	movs	r1, #44	; 0x2c
 800a064:	fb01 f303 	mul.w	r3, r1, r3
 800a068:	4413      	add	r3, r2
 800a06a:	3361      	adds	r3, #97	; 0x61
 800a06c:	2203      	movs	r2, #3
 800a06e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	4611      	mov	r1, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f00b f854 	bl	8015126 <USB_HC_Halt>
 800a07e:	e33a      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f00a fbf0 	bl	801486e <USB_ReadChInterrupts>
 800a08e:	4603      	mov	r3, r0
 800a090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a098:	d111      	bne.n	800a0be <HCD_HC_OUT_IRQHandler+0x126>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f00b f835 	bl	8015126 <USB_HC_Halt>
 800a0bc:	e31b      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	78fa      	ldrb	r2, [r7, #3]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f00a fbd1 	bl	801486e <USB_ReadChInterrupts>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d140      	bne.n	800a158 <HCD_HC_OUT_IRQHandler+0x1c0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	212c      	movs	r1, #44	; 0x2c
 800a0dc:	fb01 f303 	mul.w	r3, r1, r3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	335c      	adds	r3, #92	; 0x5c
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f00a fbbc 	bl	801486e <USB_ReadChInterrupts>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fc:	2b40      	cmp	r3, #64	; 0x40
 800a0fe:	d111      	bne.n	800a124 <HCD_HC_OUT_IRQHandler+0x18c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	212c      	movs	r1, #44	; 0x2c
 800a106:	fb01 f303 	mul.w	r3, r1, r3
 800a10a:	4413      	add	r3, r2
 800a10c:	333d      	adds	r3, #61	; 0x3d
 800a10e:	2201      	movs	r2, #1
 800a110:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a11e:	461a      	mov	r2, r3
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a130:	461a      	mov	r2, r3
 800a132:	2301      	movs	r3, #1
 800a134:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a136:	78fb      	ldrb	r3, [r7, #3]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	212c      	movs	r1, #44	; 0x2c
 800a13c:	fb01 f303 	mul.w	r3, r1, r3
 800a140:	4413      	add	r3, r2
 800a142:	3361      	adds	r3, #97	; 0x61
 800a144:	2201      	movs	r2, #1
 800a146:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	78fa      	ldrb	r2, [r7, #3]
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f00a ffe8 	bl	8015126 <USB_HC_Halt>
 800a156:	e2ce      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	78fa      	ldrb	r2, [r7, #3]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f00a fb84 	bl	801486e <USB_ReadChInterrupts>
 800a166:	4603      	mov	r3, r0
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b40      	cmp	r3, #64	; 0x40
 800a16e:	d12b      	bne.n	800a1c8 <HCD_HC_OUT_IRQHandler+0x230>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a170:	78fb      	ldrb	r3, [r7, #3]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	212c      	movs	r1, #44	; 0x2c
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	3361      	adds	r3, #97	; 0x61
 800a17e:	2205      	movs	r2, #5
 800a180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1U;
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	212c      	movs	r1, #44	; 0x2c
 800a188:	fb01 f303 	mul.w	r3, r1, r3
 800a18c:	4413      	add	r3, r2
 800a18e:	333d      	adds	r3, #61	; 0x3d
 800a190:	2201      	movs	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	212c      	movs	r1, #44	; 0x2c
 800a19a:	fb01 f303 	mul.w	r3, r1, r3
 800a19e:	4413      	add	r3, r2
 800a1a0:	335c      	adds	r3, #92	; 0x5c
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f00a ffb9 	bl	8015126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	2340      	movs	r3, #64	; 0x40
 800a1c4:	6093      	str	r3, [r2, #8]
 800a1c6:	e296      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f00a fb4c 	bl	801486e <USB_ReadChInterrupts>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b08      	cmp	r3, #8
 800a1de:	d119      	bne.n	800a214 <HCD_HC_OUT_IRQHandler+0x27c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	212c      	movs	r1, #44	; 0x2c
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3361      	adds	r3, #97	; 0x61
 800a200:	2206      	movs	r2, #6
 800a202:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	78fa      	ldrb	r2, [r7, #3]
 800a20a:	4611      	mov	r1, r2
 800a20c:	4618      	mov	r0, r3
 800a20e:	f00a ff8a 	bl	8015126 <USB_HC_Halt>
 800a212:	e270      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	78fa      	ldrb	r2, [r7, #3]
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f00a fb26 	bl	801486e <USB_ReadChInterrupts>
 800a222:	4603      	mov	r3, r0
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b10      	cmp	r3, #16
 800a22a:	d13f      	bne.n	800a2ac <HCD_HC_OUT_IRQHandler+0x314>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	212c      	movs	r1, #44	; 0x2c
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	335c      	adds	r3, #92	; 0x5c
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	212c      	movs	r1, #44	; 0x2c
 800a244:	fb01 f303 	mul.w	r3, r1, r3
 800a248:	4413      	add	r3, r2
 800a24a:	3361      	adds	r3, #97	; 0x61
 800a24c:	2204      	movs	r2, #4
 800a24e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	212c      	movs	r1, #44	; 0x2c
 800a256:	fb01 f303 	mul.w	r3, r1, r3
 800a25a:	4413      	add	r3, r2
 800a25c:	333d      	adds	r3, #61	; 0x3d
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d112      	bne.n	800a28a <HCD_HC_OUT_IRQHandler+0x2f2>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	212c      	movs	r1, #44	; 0x2c
 800a26a:	fb01 f303 	mul.w	r3, r1, r3
 800a26e:	4413      	add	r3, r2
 800a270:	333c      	adds	r3, #60	; 0x3c
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d108      	bne.n	800a28a <HCD_HC_OUT_IRQHandler+0x2f2>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	212c      	movs	r1, #44	; 0x2c
 800a27e:	fb01 f303 	mul.w	r3, r1, r3
 800a282:	4413      	add	r3, r2
 800a284:	333d      	adds	r3, #61	; 0x3d
 800a286:	2201      	movs	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	4611      	mov	r1, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f00a ff47 	bl	8015126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	6093      	str	r3, [r2, #8]
 800a2aa:	e224      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	78fa      	ldrb	r2, [r7, #3]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f00a fada 	bl	801486e <USB_ReadChInterrupts>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c0:	2b80      	cmp	r3, #128	; 0x80
 800a2c2:	d161      	bne.n	800a388 <HCD_HC_OUT_IRQHandler+0x3f0>
  {
    if (hhcd->Init.dma_enable == 0U)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d110      	bne.n	800a2ee <HCD_HC_OUT_IRQHandler+0x356>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	212c      	movs	r1, #44	; 0x2c
 800a2d2:	fb01 f303 	mul.w	r3, r1, r3
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3361      	adds	r3, #97	; 0x61
 800a2da:	2207      	movs	r2, #7
 800a2dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	78fa      	ldrb	r2, [r7, #3]
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f00a ff1d 	bl	8015126 <USB_HC_Halt>
 800a2ec:	e042      	b.n	800a374 <HCD_HC_OUT_IRQHandler+0x3dc>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800a2ee:	78fb      	ldrb	r3, [r7, #3]
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	222c      	movs	r2, #44	; 0x2c
 800a2f4:	fb03 f202 	mul.w	r2, r3, r2
 800a2f8:	440a      	add	r2, r1
 800a2fa:	325c      	adds	r2, #92	; 0x5c
 800a2fc:	6812      	ldr	r2, [r2, #0]
 800a2fe:	3201      	adds	r2, #1
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	202c      	movs	r0, #44	; 0x2c
 800a304:	fb00 f303 	mul.w	r3, r0, r3
 800a308:	440b      	add	r3, r1
 800a30a:	335c      	adds	r3, #92	; 0x5c
 800a30c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a30e:	78fb      	ldrb	r3, [r7, #3]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	212c      	movs	r1, #44	; 0x2c
 800a314:	fb01 f303 	mul.w	r3, r1, r3
 800a318:	4413      	add	r3, r2
 800a31a:	335c      	adds	r3, #92	; 0x5c
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d91f      	bls.n	800a362 <HCD_HC_OUT_IRQHandler+0x3ca>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	212c      	movs	r1, #44	; 0x2c
 800a328:	fb01 f303 	mul.w	r3, r1, r3
 800a32c:	4413      	add	r3, r2
 800a32e:	335c      	adds	r3, #92	; 0x5c
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	212c      	movs	r1, #44	; 0x2c
 800a33a:	fb01 f303 	mul.w	r3, r1, r3
 800a33e:	4413      	add	r3, r2
 800a340:	3360      	adds	r3, #96	; 0x60
 800a342:	2204      	movs	r2, #4
 800a344:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	212c      	movs	r1, #44	; 0x2c
 800a34c:	fb01 f303 	mul.w	r3, r1, r3
 800a350:	4413      	add	r3, r2
 800a352:	3360      	adds	r3, #96	; 0x60
 800a354:	781a      	ldrb	r2, [r3, #0]
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7fa f91a 	bl	8004594 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a360:	e008      	b.n	800a374 <HCD_HC_OUT_IRQHandler+0x3dc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	212c      	movs	r1, #44	; 0x2c
 800a368:	fb01 f303 	mul.w	r3, r1, r3
 800a36c:	4413      	add	r3, r2
 800a36e:	3360      	adds	r3, #96	; 0x60
 800a370:	2202      	movs	r2, #2
 800a372:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a380:	461a      	mov	r2, r3
 800a382:	2380      	movs	r3, #128	; 0x80
 800a384:	6093      	str	r3, [r2, #8]
 800a386:	e1b6      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f00a fa6c 	bl	801486e <USB_ReadChInterrupts>
 800a396:	4603      	mov	r3, r0
 800a398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a0:	d11a      	bne.n	800a3d8 <HCD_HC_OUT_IRQHandler+0x440>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a3a2:	78fb      	ldrb	r3, [r7, #3]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	212c      	movs	r1, #44	; 0x2c
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	3361      	adds	r3, #97	; 0x61
 800a3b0:	2209      	movs	r2, #9
 800a3b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f00a feb2 	bl	8015126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a3c2:	78fb      	ldrb	r3, [r7, #3]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3d4:	6093      	str	r3, [r2, #8]
 800a3d6:	e18e      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f00a fa44 	bl	801486e <USB_ReadChInterrupts>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	f040 8182 	bne.w	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3fe:	461a      	mov	r2, r3
 800a400:	2302      	movs	r3, #2
 800a402:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	212c      	movs	r1, #44	; 0x2c
 800a40a:	fb01 f303 	mul.w	r3, r1, r3
 800a40e:	4413      	add	r3, r2
 800a410:	3361      	adds	r3, #97	; 0x61
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b01      	cmp	r3, #1
 800a416:	f040 8087 	bne.w	800a528 <HCD_HC_OUT_IRQHandler+0x590>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	212c      	movs	r1, #44	; 0x2c
 800a420:	fb01 f303 	mul.w	r3, r1, r3
 800a424:	4413      	add	r3, r2
 800a426:	3361      	adds	r3, #97	; 0x61
 800a428:	2202      	movs	r2, #2
 800a42a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800a42c:	78fb      	ldrb	r3, [r7, #3]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	212c      	movs	r1, #44	; 0x2c
 800a432:	fb01 f303 	mul.w	r3, r1, r3
 800a436:	4413      	add	r3, r2
 800a438:	3360      	adds	r3, #96	; 0x60
 800a43a:	2201      	movs	r2, #1
 800a43c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	212c      	movs	r1, #44	; 0x2c
 800a444:	fb01 f303 	mul.w	r3, r1, r3
 800a448:	4413      	add	r3, r2
 800a44a:	333f      	adds	r3, #63	; 0x3f
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d00a      	beq.n	800a468 <HCD_HC_OUT_IRQHandler+0x4d0>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800a452:	78fb      	ldrb	r3, [r7, #3]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	212c      	movs	r1, #44	; 0x2c
 800a458:	fb01 f303 	mul.w	r3, r1, r3
 800a45c:	4413      	add	r3, r2
 800a45e:	333f      	adds	r3, #63	; 0x3f
 800a460:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800a462:	2b03      	cmp	r3, #3
 800a464:	f040 8138 	bne.w	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
      {
        if (hhcd->Init.dma_enable == 0U)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d113      	bne.n	800a498 <HCD_HC_OUT_IRQHandler+0x500>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	212c      	movs	r1, #44	; 0x2c
 800a476:	fb01 f303 	mul.w	r3, r1, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	3355      	adds	r3, #85	; 0x55
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f082 0201 	eor.w	r2, r2, #1
 800a486:	b2d0      	uxtb	r0, r2
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	212c      	movs	r1, #44	; 0x2c
 800a48c:	fb01 f303 	mul.w	r3, r1, r3
 800a490:	4413      	add	r3, r2
 800a492:	3355      	adds	r3, #85	; 0x55
 800a494:	4602      	mov	r2, r0
 800a496:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	f040 811b 	bne.w	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
 800a4a2:	78fb      	ldrb	r3, [r7, #3]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	212c      	movs	r1, #44	; 0x2c
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	334c      	adds	r3, #76	; 0x4c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8110 	beq.w	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	212c      	movs	r1, #44	; 0x2c
 800a4be:	fb01 f303 	mul.w	r3, r1, r3
 800a4c2:	4413      	add	r3, r2
 800a4c4:	334c      	adds	r3, #76	; 0x4c
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	202c      	movs	r0, #44	; 0x2c
 800a4ce:	fb00 f202 	mul.w	r2, r0, r2
 800a4d2:	440a      	add	r2, r1
 800a4d4:	3240      	adds	r2, #64	; 0x40
 800a4d6:	8812      	ldrh	r2, [r2, #0]
 800a4d8:	4413      	add	r3, r2
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	78fa      	ldrb	r2, [r7, #3]
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	202c      	movs	r0, #44	; 0x2c
 800a4e2:	fb00 f202 	mul.w	r2, r0, r2
 800a4e6:	440a      	add	r2, r1
 800a4e8:	3240      	adds	r2, #64	; 0x40
 800a4ea:	8812      	ldrh	r2, [r2, #0]
 800a4ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 80ed 	beq.w	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	212c      	movs	r1, #44	; 0x2c
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	4413      	add	r3, r2
 800a50a:	3355      	adds	r3, #85	; 0x55
 800a50c:	781a      	ldrb	r2, [r3, #0]
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	f082 0201 	eor.w	r2, r2, #1
 800a514:	b2d0      	uxtb	r0, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	212c      	movs	r1, #44	; 0x2c
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	3355      	adds	r3, #85	; 0x55
 800a522:	4602      	mov	r2, r0
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e0d7      	b.n	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3361      	adds	r3, #97	; 0x61
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d109      	bne.n	800a550 <HCD_HC_OUT_IRQHandler+0x5b8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	212c      	movs	r1, #44	; 0x2c
 800a542:	fb01 f303 	mul.w	r3, r1, r3
 800a546:	4413      	add	r3, r2
 800a548:	3361      	adds	r3, #97	; 0x61
 800a54a:	2202      	movs	r2, #2
 800a54c:	701a      	strb	r2, [r3, #0]
 800a54e:	e0c3      	b.n	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	212c      	movs	r1, #44	; 0x2c
 800a556:	fb01 f303 	mul.w	r3, r1, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	3361      	adds	r3, #97	; 0x61
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d112      	bne.n	800a58a <HCD_HC_OUT_IRQHandler+0x5f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	212c      	movs	r1, #44	; 0x2c
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	3361      	adds	r3, #97	; 0x61
 800a572:	2202      	movs	r2, #2
 800a574:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	212c      	movs	r1, #44	; 0x2c
 800a57c:	fb01 f303 	mul.w	r3, r1, r3
 800a580:	4413      	add	r3, r2
 800a582:	3360      	adds	r3, #96	; 0x60
 800a584:	2202      	movs	r2, #2
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	e0a6      	b.n	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	212c      	movs	r1, #44	; 0x2c
 800a590:	fb01 f303 	mul.w	r3, r1, r3
 800a594:	4413      	add	r3, r2
 800a596:	3361      	adds	r3, #97	; 0x61
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d112      	bne.n	800a5c4 <HCD_HC_OUT_IRQHandler+0x62c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	212c      	movs	r1, #44	; 0x2c
 800a5a4:	fb01 f303 	mul.w	r3, r1, r3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3361      	adds	r3, #97	; 0x61
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	212c      	movs	r1, #44	; 0x2c
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	3360      	adds	r3, #96	; 0x60
 800a5be:	2202      	movs	r2, #2
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	e089      	b.n	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	212c      	movs	r1, #44	; 0x2c
 800a5ca:	fb01 f303 	mul.w	r3, r1, r3
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3361      	adds	r3, #97	; 0x61
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d112      	bne.n	800a5fe <HCD_HC_OUT_IRQHandler+0x666>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a5d8:	78fb      	ldrb	r3, [r7, #3]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	212c      	movs	r1, #44	; 0x2c
 800a5de:	fb01 f303 	mul.w	r3, r1, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	3361      	adds	r3, #97	; 0x61
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	212c      	movs	r1, #44	; 0x2c
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	3360      	adds	r3, #96	; 0x60
 800a5f8:	2205      	movs	r2, #5
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e06c      	b.n	800a6d8 <HCD_HC_OUT_IRQHandler+0x740>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	212c      	movs	r1, #44	; 0x2c
 800a604:	fb01 f303 	mul.w	r3, r1, r3
 800a608:	4413      	add	r3, r2
 800a60a:	3361      	adds	r3, #97	; 0x61
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b07      	cmp	r3, #7
 800a610:	d009      	beq.n	800a626 <HCD_HC_OUT_IRQHandler+0x68e>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	212c      	movs	r1, #44	; 0x2c
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	4413      	add	r3, r2
 800a61e:	3361      	adds	r3, #97	; 0x61
 800a620:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a622:	2b09      	cmp	r3, #9
 800a624:	d166      	bne.n	800a6f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a626:	78fb      	ldrb	r3, [r7, #3]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	212c      	movs	r1, #44	; 0x2c
 800a62c:	fb01 f303 	mul.w	r3, r1, r3
 800a630:	4413      	add	r3, r2
 800a632:	3361      	adds	r3, #97	; 0x61
 800a634:	2202      	movs	r2, #2
 800a636:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	222c      	movs	r2, #44	; 0x2c
 800a63e:	fb03 f202 	mul.w	r2, r3, r2
 800a642:	440a      	add	r2, r1
 800a644:	325c      	adds	r2, #92	; 0x5c
 800a646:	6812      	ldr	r2, [r2, #0]
 800a648:	3201      	adds	r2, #1
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	202c      	movs	r0, #44	; 0x2c
 800a64e:	fb00 f303 	mul.w	r3, r0, r3
 800a652:	440b      	add	r3, r1
 800a654:	335c      	adds	r3, #92	; 0x5c
 800a656:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	212c      	movs	r1, #44	; 0x2c
 800a65e:	fb01 f303 	mul.w	r3, r1, r3
 800a662:	4413      	add	r3, r2
 800a664:	335c      	adds	r3, #92	; 0x5c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d912      	bls.n	800a692 <HCD_HC_OUT_IRQHandler+0x6fa>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a66c:	78fb      	ldrb	r3, [r7, #3]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	212c      	movs	r1, #44	; 0x2c
 800a672:	fb01 f303 	mul.w	r3, r1, r3
 800a676:	4413      	add	r3, r2
 800a678:	335c      	adds	r3, #92	; 0x5c
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	212c      	movs	r1, #44	; 0x2c
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	4413      	add	r3, r2
 800a68a:	3360      	adds	r3, #96	; 0x60
 800a68c:	2204      	movs	r2, #4
 800a68e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a690:	e021      	b.n	800a6d6 <HCD_HC_OUT_IRQHandler+0x73e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	212c      	movs	r1, #44	; 0x2c
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	4413      	add	r3, r2
 800a69e:	3360      	adds	r3, #96	; 0x60
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a6d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	212c      	movs	r1, #44	; 0x2c
 800a6de:	fb01 f303 	mul.w	r3, r1, r3
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3360      	adds	r3, #96	; 0x60
 800a6e6:	781a      	ldrb	r2, [r3, #0]
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7f9 ff51 	bl	8004594 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a6f2:	e000      	b.n	800a6f6 <HCD_HC_OUT_IRQHandler+0x75e>
      return;
 800a6f4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08a      	sub	sp, #40	; 0x28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	0c5b      	lsrs	r3, r3, #17
 800a722:	f003 030f 	and.w	r3, r3, #15
 800a726:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	091b      	lsrs	r3, r3, #4
 800a72c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a730:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d004      	beq.n	800a742 <HCD_RXQLVL_IRQHandler+0x46>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	f000 80a9 	beq.w	800a892 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a740:	e0aa      	b.n	800a898 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 80a6 	beq.w	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	212c      	movs	r1, #44	; 0x2c
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	4413      	add	r3, r2
 800a756:	3344      	adds	r3, #68	; 0x44
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 809b 	beq.w	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	212c      	movs	r1, #44	; 0x2c
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	4413      	add	r3, r2
 800a76c:	3350      	adds	r3, #80	; 0x50
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	441a      	add	r2, r3
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	202c      	movs	r0, #44	; 0x2c
 800a77a:	fb00 f303 	mul.w	r3, r0, r3
 800a77e:	440b      	add	r3, r1
 800a780:	334c      	adds	r3, #76	; 0x4c
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d87a      	bhi.n	800a87e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6818      	ldr	r0, [r3, #0]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	212c      	movs	r1, #44	; 0x2c
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	4413      	add	r3, r2
 800a798:	3344      	adds	r3, #68	; 0x44
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	b292      	uxth	r2, r2
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	f009 fff9 	bl	8014798 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	212c      	movs	r1, #44	; 0x2c
 800a7ac:	fb01 f303 	mul.w	r3, r1, r3
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3344      	adds	r3, #68	; 0x44
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	441a      	add	r2, r3
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	202c      	movs	r0, #44	; 0x2c
 800a7c0:	fb00 f303 	mul.w	r3, r0, r3
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3344      	adds	r3, #68	; 0x44
 800a7c8:	601a      	str	r2, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	212c      	movs	r1, #44	; 0x2c
 800a7d0:	fb01 f303 	mul.w	r3, r1, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3350      	adds	r3, #80	; 0x50
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	441a      	add	r2, r3
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	202c      	movs	r0, #44	; 0x2c
 800a7e4:	fb00 f303 	mul.w	r3, r0, r3
 800a7e8:	440b      	add	r3, r1
 800a7ea:	3350      	adds	r3, #80	; 0x50
 800a7ec:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	0cdb      	lsrs	r3, r3, #19
 800a7fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a802:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	212c      	movs	r1, #44	; 0x2c
 800a80a:	fb01 f303 	mul.w	r3, r1, r3
 800a80e:	4413      	add	r3, r2
 800a810:	3340      	adds	r3, #64	; 0x40
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d13c      	bne.n	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d039      	beq.n	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a838:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a840:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84e:	461a      	mov	r2, r3
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	212c      	movs	r1, #44	; 0x2c
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	4413      	add	r3, r2
 800a860:	3354      	adds	r3, #84	; 0x54
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	f083 0301 	eor.w	r3, r3, #1
 800a868:	b2d8      	uxtb	r0, r3
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	212c      	movs	r1, #44	; 0x2c
 800a870:	fb01 f303 	mul.w	r3, r1, r3
 800a874:	4413      	add	r3, r2
 800a876:	3354      	adds	r3, #84	; 0x54
 800a878:	4602      	mov	r2, r0
 800a87a:	701a      	strb	r2, [r3, #0]
      break;
 800a87c:	e00b      	b.n	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	212c      	movs	r1, #44	; 0x2c
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	3360      	adds	r3, #96	; 0x60
 800a88c:	2204      	movs	r2, #4
 800a88e:	701a      	strb	r2, [r3, #0]
      break;
 800a890:	e001      	b.n	800a896 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800a896:	bf00      	nop
  }
}
 800a898:	bf00      	nop
 800a89a:	3728      	adds	r7, #40	; 0x28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d10b      	bne.n	800a8f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d102      	bne.n	800a8e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7f9 fe3a 	bl	800455c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f043 0302 	orr.w	r3, r3, #2
 800a8ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f003 0308 	and.w	r3, r3, #8
 800a8f6:	2b08      	cmp	r3, #8
 800a8f8:	d132      	bne.n	800a960 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f043 0308 	orr.w	r3, r3, #8
 800a900:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b04      	cmp	r3, #4
 800a90a:	d126      	bne.n	800a95a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d113      	bne.n	800a93c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800a91a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a91e:	d106      	bne.n	800a92e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2102      	movs	r1, #2
 800a926:	4618      	mov	r0, r3
 800a928:	f00a f8be 	bl	8014aa8 <USB_InitFSLSPClkSel>
 800a92c:	e011      	b.n	800a952 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2101      	movs	r1, #1
 800a934:	4618      	mov	r0, r3
 800a936:	f00a f8b7 	bl	8014aa8 <USB_InitFSLSPClkSel>
 800a93a:	e00a      	b.n	800a952 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d106      	bne.n	800a952 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a94a:	461a      	mov	r2, r3
 800a94c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a950:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7f9 fe2c 	bl	80045b0 <HAL_HCD_PortEnabled_Callback>
 800a958:	e002      	b.n	800a960 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7f9 fe36 	bl	80045cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b20      	cmp	r3, #32
 800a968:	d103      	bne.n	800a972 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f043 0320 	orr.w	r3, r3, #32
 800a970:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a978:	461a      	mov	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6013      	str	r3, [r2, #0]
}
 800a97e:	bf00      	nop
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e07f      	b.n	800aa9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7f7 fdc8 	bl	8002544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2224      	movs	r2, #36	; 0x24
 800a9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 0201 	bic.w	r2, r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a9d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d107      	bne.n	800aa02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	e006      	b.n	800aa10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689a      	ldr	r2, [r3, #8]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d104      	bne.n	800aa22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6859      	ldr	r1, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4b1d      	ldr	r3, [pc, #116]	; (800aaa4 <HAL_I2C_Init+0x11c>)
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68da      	ldr	r2, [r3, #12]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691a      	ldr	r2, [r3, #16]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69d9      	ldr	r1, [r3, #28]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a1a      	ldr	r2, [r3, #32]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f042 0201 	orr.w	r2, r2, #1
 800aa7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2220      	movs	r2, #32
 800aa86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	02008000 	.word	0x02008000

0800aaa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	461a      	mov	r2, r3
 800aab4:	460b      	mov	r3, r1
 800aab6:	817b      	strh	r3, [r7, #10]
 800aab8:	4613      	mov	r3, r2
 800aaba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b20      	cmp	r3, #32
 800aac6:	f040 80da 	bne.w	800ac7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_I2C_Master_Transmit+0x30>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e0d3      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aae0:	f7fa f826 	bl	8004b30 <HAL_GetTick>
 800aae4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	2319      	movs	r3, #25
 800aaec:	2201      	movs	r2, #1
 800aaee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 f8f0 	bl	800acd8 <I2C_WaitOnFlagUntilTimeout>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e0be      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2221      	movs	r2, #33	; 0x21
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2210      	movs	r2, #16
 800ab0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	893a      	ldrh	r2, [r7, #8]
 800ab22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2bff      	cmp	r3, #255	; 0xff
 800ab32:	d90e      	bls.n	800ab52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	22ff      	movs	r2, #255	; 0xff
 800ab38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	8979      	ldrh	r1, [r7, #10]
 800ab42:	4b51      	ldr	r3, [pc, #324]	; (800ac88 <HAL_I2C_Master_Transmit+0x1e0>)
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 fa7e 	bl	800b04c <I2C_TransferConfig>
 800ab50:	e06c      	b.n	800ac2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	8979      	ldrh	r1, [r7, #10]
 800ab64:	4b48      	ldr	r3, [pc, #288]	; (800ac88 <HAL_I2C_Master_Transmit+0x1e0>)
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 fa6d 	bl	800b04c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ab72:	e05b      	b.n	800ac2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	6a39      	ldr	r1, [r7, #32]
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 f8fc 	bl	800ad76 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e07b      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d034      	beq.n	800ac2c <HAL_I2C_Master_Transmit+0x184>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d130      	bne.n	800ac2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	2200      	movs	r2, #0
 800abd2:	2180      	movs	r1, #128	; 0x80
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f87f 	bl	800acd8 <I2C_WaitOnFlagUntilTimeout>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e04d      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe8:	b29b      	uxth	r3, r3
 800abea:	2bff      	cmp	r3, #255	; 0xff
 800abec:	d90e      	bls.n	800ac0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	22ff      	movs	r2, #255	; 0xff
 800abf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	8979      	ldrh	r1, [r7, #10]
 800abfc:	2300      	movs	r3, #0
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fa21 	bl	800b04c <I2C_TransferConfig>
 800ac0a:	e00f      	b.n	800ac2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	8979      	ldrh	r1, [r7, #10]
 800ac1e:	2300      	movs	r3, #0
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f000 fa10 	bl	800b04c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d19e      	bne.n	800ab74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	6a39      	ldr	r1, [r7, #32]
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f8e2 	bl	800ae04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e01a      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	6859      	ldr	r1, [r3, #4]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <HAL_I2C_Master_Transmit+0x1e4>)
 800ac5e:	400b      	ands	r3, r1
 800ac60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e000      	b.n	800ac80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ac7e:	2302      	movs	r3, #2
  }
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	80002000 	.word	0x80002000
 800ac8c:	fe00e800 	.word	0xfe00e800

0800ac90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	f003 0302 	and.w	r3, r3, #2
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d103      	bne.n	800acae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d007      	beq.n	800accc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f042 0201 	orr.w	r2, r2, #1
 800acca:	619a      	str	r2, [r3, #24]
  }
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ace8:	e031      	b.n	800ad4e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf0:	d02d      	beq.n	800ad4e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf2:	f7f9 ff1d 	bl	8004b30 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d302      	bcc.n	800ad08 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d122      	bne.n	800ad4e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4013      	ands	r3, r2
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	bf0c      	ite	eq
 800ad18:	2301      	moveq	r3, #1
 800ad1a:	2300      	movne	r3, #0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d113      	bne.n	800ad4e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	f043 0220 	orr.w	r2, r3, #32
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e00f      	b.n	800ad6e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	699a      	ldr	r2, [r3, #24]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	4013      	ands	r3, r2
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	bf0c      	ite	eq
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	2300      	movne	r3, #0
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	461a      	mov	r2, r3
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d0be      	beq.n	800acea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ad82:	e033      	b.n	800adec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 f87f 	bl	800ae8c <I2C_IsErrorOccurred>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e031      	b.n	800adfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad9e:	d025      	beq.n	800adec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ada0:	f7f9 fec6 	bl	8004b30 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	429a      	cmp	r2, r3
 800adae:	d302      	bcc.n	800adb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d11a      	bne.n	800adec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d013      	beq.n	800adec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc8:	f043 0220 	orr.w	r2, r3, #32
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2220      	movs	r2, #32
 800add4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e007      	b.n	800adfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d1c4      	bne.n	800ad84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae10:	e02f      	b.n	800ae72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 f838 	bl	800ae8c <I2C_IsErrorOccurred>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e02d      	b.n	800ae82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae26:	f7f9 fe83 	bl	8004b30 <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d302      	bcc.n	800ae3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d11a      	bne.n	800ae72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	d013      	beq.n	800ae72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae4e:	f043 0220 	orr.w	r2, r3, #32
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e007      	b.n	800ae82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	f003 0320 	and.w	r3, r3, #32
 800ae7c:	2b20      	cmp	r3, #32
 800ae7e:	d1c8      	bne.n	800ae12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	; 0x28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d068      	beq.n	800af8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2210      	movs	r2, #16
 800aebe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aec0:	e049      	b.n	800af56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec8:	d045      	beq.n	800af56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aeca:	f7f9 fe31 	bl	8004b30 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d302      	bcc.n	800aee0 <I2C_IsErrorOccurred+0x54>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d13a      	bne.n	800af56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aeea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aef2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af02:	d121      	bne.n	800af48 <I2C_IsErrorOccurred+0xbc>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af0a:	d01d      	beq.n	800af48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800af0c:	7cfb      	ldrb	r3, [r7, #19]
 800af0e:	2b20      	cmp	r3, #32
 800af10:	d01a      	beq.n	800af48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800af22:	f7f9 fe05 	bl	8004b30 <HAL_GetTick>
 800af26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af28:	e00e      	b.n	800af48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800af2a:	f7f9 fe01 	bl	8004b30 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b19      	cmp	r3, #25
 800af36:	d907      	bls.n	800af48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	f043 0320 	orr.w	r3, r3, #32
 800af3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800af46:	e006      	b.n	800af56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b20      	cmp	r3, #32
 800af54:	d1e9      	bne.n	800af2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b20      	cmp	r3, #32
 800af62:	d003      	beq.n	800af6c <I2C_IsErrorOccurred+0xe0>
 800af64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0aa      	beq.n	800aec2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800af6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2220      	movs	r2, #32
 800af7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f043 0304 	orr.w	r3, r3, #4
 800af82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00b      	beq.n	800afb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00b      	beq.n	800afd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	f043 0308 	orr.w	r3, r3, #8
 800afc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800afce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01c      	beq.n	800b03a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fe45 	bl	800ac90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	6859      	ldr	r1, [r3, #4]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	4b0d      	ldr	r3, [pc, #52]	; (800b048 <I2C_IsErrorOccurred+0x1bc>)
 800b012:	400b      	ands	r3, r1
 800b014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2220      	movs	r2, #32
 800b026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b03a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3728      	adds	r7, #40	; 0x28
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	fe00e800 	.word	0xfe00e800

0800b04c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	607b      	str	r3, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	817b      	strh	r3, [r7, #10]
 800b05a:	4613      	mov	r3, r2
 800b05c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b05e:	897b      	ldrh	r3, [r7, #10]
 800b060:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b064:	7a7b      	ldrb	r3, [r7, #9]
 800b066:	041b      	lsls	r3, r3, #16
 800b068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b06c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4313      	orrs	r3, r2
 800b076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b07a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	0d5b      	lsrs	r3, r3, #21
 800b086:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b08a:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <I2C_TransferConfig+0x60>)
 800b08c:	430b      	orrs	r3, r1
 800b08e:	43db      	mvns	r3, r3
 800b090:	ea02 0103 	and.w	r1, r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b09e:	bf00      	nop
 800b0a0:	371c      	adds	r7, #28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	03ff63ff 	.word	0x03ff63ff

0800b0b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b20      	cmp	r3, #32
 800b0c4:	d138      	bne.n	800b138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d101      	bne.n	800b0d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e032      	b.n	800b13a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2224      	movs	r2, #36	; 0x24
 800b0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 0201 	bic.w	r2, r2, #1
 800b0f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2220      	movs	r2, #32
 800b128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	e000      	b.n	800b13a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b138:	2302      	movs	r3, #2
  }
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b146:	b480      	push	{r7}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b20      	cmp	r3, #32
 800b15a:	d139      	bne.n	800b1d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b162:	2b01      	cmp	r3, #1
 800b164:	d101      	bne.n	800b16a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b166:	2302      	movs	r3, #2
 800b168:	e033      	b.n	800b1d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2224      	movs	r2, #36	; 0x24
 800b176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0201 	bic.w	r2, r2, #1
 800b188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b198:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f042 0201 	orr.w	r2, r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	e000      	b.n	800b1d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b1d0:	2302      	movs	r3, #2
  }
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
	...

0800b1e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b1e8:	4b19      	ldr	r3, [pc, #100]	; (800b250 <HAL_PWREx_ConfigSupply+0x70>)
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d00a      	beq.n	800b20a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b1f4:	4b16      	ldr	r3, [pc, #88]	; (800b250 <HAL_PWREx_ConfigSupply+0x70>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d001      	beq.n	800b206 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e01f      	b.n	800b246 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	e01d      	b.n	800b246 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b20a:	4b11      	ldr	r3, [pc, #68]	; (800b250 <HAL_PWREx_ConfigSupply+0x70>)
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	f023 0207 	bic.w	r2, r3, #7
 800b212:	490f      	ldr	r1, [pc, #60]	; (800b250 <HAL_PWREx_ConfigSupply+0x70>)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4313      	orrs	r3, r2
 800b218:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b21a:	f7f9 fc89 	bl	8004b30 <HAL_GetTick>
 800b21e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b220:	e009      	b.n	800b236 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b222:	f7f9 fc85 	bl	8004b30 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b230:	d901      	bls.n	800b236 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e007      	b.n	800b246 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b236:	4b06      	ldr	r3, [pc, #24]	; (800b250 <HAL_PWREx_ConfigSupply+0x70>)
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b23e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b242:	d1ee      	bne.n	800b222 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	58024800 	.word	0x58024800

0800b254 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b258:	4b05      	ldr	r3, [pc, #20]	; (800b270 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	4a04      	ldr	r2, [pc, #16]	; (800b270 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b25e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b262:	60d3      	str	r3, [r2, #12]
}
 800b264:	bf00      	nop
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	58024800 	.word	0x58024800

0800b274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	; 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	f000 bc48 	b.w	800bb18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 8088 	beq.w	800b3a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b296:	4b99      	ldr	r3, [pc, #612]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b2a0:	4b96      	ldr	r3, [pc, #600]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d007      	beq.n	800b2bc <HAL_RCC_OscConfig+0x48>
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	2b18      	cmp	r3, #24
 800b2b0:	d111      	bne.n	800b2d6 <HAL_RCC_OscConfig+0x62>
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	f003 0303 	and.w	r3, r3, #3
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d10c      	bne.n	800b2d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2bc:	4b8f      	ldr	r3, [pc, #572]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d06d      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x130>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d169      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f000 bc21 	b.w	800bb18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2de:	d106      	bne.n	800b2ee <HAL_RCC_OscConfig+0x7a>
 800b2e0:	4b86      	ldr	r3, [pc, #536]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a85      	ldr	r2, [pc, #532]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	e02e      	b.n	800b34c <HAL_RCC_OscConfig+0xd8>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10c      	bne.n	800b310 <HAL_RCC_OscConfig+0x9c>
 800b2f6:	4b81      	ldr	r3, [pc, #516]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a80      	ldr	r2, [pc, #512]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b2fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b300:	6013      	str	r3, [r2, #0]
 800b302:	4b7e      	ldr	r3, [pc, #504]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a7d      	ldr	r2, [pc, #500]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	e01d      	b.n	800b34c <HAL_RCC_OscConfig+0xd8>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b318:	d10c      	bne.n	800b334 <HAL_RCC_OscConfig+0xc0>
 800b31a:	4b78      	ldr	r3, [pc, #480]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a77      	ldr	r2, [pc, #476]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	4b75      	ldr	r3, [pc, #468]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a74      	ldr	r2, [pc, #464]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	e00b      	b.n	800b34c <HAL_RCC_OscConfig+0xd8>
 800b334:	4b71      	ldr	r3, [pc, #452]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a70      	ldr	r2, [pc, #448]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b33a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	4b6e      	ldr	r3, [pc, #440]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a6d      	ldr	r2, [pc, #436]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b34a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d013      	beq.n	800b37c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b354:	f7f9 fbec 	bl	8004b30 <HAL_GetTick>
 800b358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b35a:	e008      	b.n	800b36e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b35c:	f7f9 fbe8 	bl	8004b30 <HAL_GetTick>
 800b360:	4602      	mov	r2, r0
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	2b64      	cmp	r3, #100	; 0x64
 800b368:	d901      	bls.n	800b36e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e3d4      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b36e:	4b63      	ldr	r3, [pc, #396]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0f0      	beq.n	800b35c <HAL_RCC_OscConfig+0xe8>
 800b37a:	e014      	b.n	800b3a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b37c:	f7f9 fbd8 	bl	8004b30 <HAL_GetTick>
 800b380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b382:	e008      	b.n	800b396 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b384:	f7f9 fbd4 	bl	8004b30 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	2b64      	cmp	r3, #100	; 0x64
 800b390:	d901      	bls.n	800b396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e3c0      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b396:	4b59      	ldr	r3, [pc, #356]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1f0      	bne.n	800b384 <HAL_RCC_OscConfig+0x110>
 800b3a2:	e000      	b.n	800b3a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 80ca 	beq.w	800b548 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3b4:	4b51      	ldr	r3, [pc, #324]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b3be:	4b4f      	ldr	r3, [pc, #316]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <HAL_RCC_OscConfig+0x166>
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	2b18      	cmp	r3, #24
 800b3ce:	d156      	bne.n	800b47e <HAL_RCC_OscConfig+0x20a>
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d151      	bne.n	800b47e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3da:	4b48      	ldr	r3, [pc, #288]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d005      	beq.n	800b3f2 <HAL_RCC_OscConfig+0x17e>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e392      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b3f2:	4b42      	ldr	r3, [pc, #264]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f023 0219 	bic.w	r2, r3, #25
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	493f      	ldr	r1, [pc, #252]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b400:	4313      	orrs	r3, r2
 800b402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b404:	f7f9 fb94 	bl	8004b30 <HAL_GetTick>
 800b408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b40a:	e008      	b.n	800b41e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b40c:	f7f9 fb90 	bl	8004b30 <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e37c      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b41e:	4b37      	ldr	r3, [pc, #220]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0f0      	beq.n	800b40c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b42a:	f7f9 fbb1 	bl	8004b90 <HAL_GetREVID>
 800b42e:	4603      	mov	r3, r0
 800b430:	f241 0203 	movw	r2, #4099	; 0x1003
 800b434:	4293      	cmp	r3, r2
 800b436:	d817      	bhi.n	800b468 <HAL_RCC_OscConfig+0x1f4>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d108      	bne.n	800b452 <HAL_RCC_OscConfig+0x1de>
 800b440:	4b2e      	ldr	r3, [pc, #184]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b448:	4a2c      	ldr	r2, [pc, #176]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b44a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b44e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b450:	e07a      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b452:	4b2a      	ldr	r3, [pc, #168]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	031b      	lsls	r3, r3, #12
 800b460:	4926      	ldr	r1, [pc, #152]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b462:	4313      	orrs	r3, r2
 800b464:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b466:	e06f      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b468:	4b24      	ldr	r3, [pc, #144]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	061b      	lsls	r3, r3, #24
 800b476:	4921      	ldr	r1, [pc, #132]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b47c:	e064      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d047      	beq.n	800b516 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b486:	4b1d      	ldr	r3, [pc, #116]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f023 0219 	bic.w	r2, r3, #25
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	491a      	ldr	r1, [pc, #104]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b494:	4313      	orrs	r3, r2
 800b496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b498:	f7f9 fb4a 	bl	8004b30 <HAL_GetTick>
 800b49c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b49e:	e008      	b.n	800b4b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4a0:	f7f9 fb46 	bl	8004b30 <HAL_GetTick>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	2b02      	cmp	r3, #2
 800b4ac:	d901      	bls.n	800b4b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e332      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4b2:	4b12      	ldr	r3, [pc, #72]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f003 0304 	and.w	r3, r3, #4
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d0f0      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4be:	f7f9 fb67 	bl	8004b90 <HAL_GetREVID>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	f241 0203 	movw	r2, #4099	; 0x1003
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d819      	bhi.n	800b500 <HAL_RCC_OscConfig+0x28c>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	2b40      	cmp	r3, #64	; 0x40
 800b4d2:	d108      	bne.n	800b4e6 <HAL_RCC_OscConfig+0x272>
 800b4d4:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b4dc:	4a07      	ldr	r2, [pc, #28]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4e2:	6053      	str	r3, [r2, #4]
 800b4e4:	e030      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
 800b4e6:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	031b      	lsls	r3, r3, #12
 800b4f4:	4901      	ldr	r1, [pc, #4]	; (800b4fc <HAL_RCC_OscConfig+0x288>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	604b      	str	r3, [r1, #4]
 800b4fa:	e025      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
 800b4fc:	58024400 	.word	0x58024400
 800b500:	4b9a      	ldr	r3, [pc, #616]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	061b      	lsls	r3, r3, #24
 800b50e:	4997      	ldr	r1, [pc, #604]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b510:	4313      	orrs	r3, r2
 800b512:	604b      	str	r3, [r1, #4]
 800b514:	e018      	b.n	800b548 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b516:	4b95      	ldr	r3, [pc, #596]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a94      	ldr	r2, [pc, #592]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b51c:	f023 0301 	bic.w	r3, r3, #1
 800b520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b522:	f7f9 fb05 	bl	8004b30 <HAL_GetTick>
 800b526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b528:	e008      	b.n	800b53c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b52a:	f7f9 fb01 	bl	8004b30 <HAL_GetTick>
 800b52e:	4602      	mov	r2, r0
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	2b02      	cmp	r3, #2
 800b536:	d901      	bls.n	800b53c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b538:	2303      	movs	r3, #3
 800b53a:	e2ed      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b53c:	4b8b      	ldr	r3, [pc, #556]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1f0      	bne.n	800b52a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80a9 	beq.w	800b6a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b556:	4b85      	ldr	r3, [pc, #532]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b55e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b560:	4b82      	ldr	r3, [pc, #520]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b564:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d007      	beq.n	800b57c <HAL_RCC_OscConfig+0x308>
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	2b18      	cmp	r3, #24
 800b570:	d13a      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x374>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d135      	bne.n	800b5e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b57c:	4b7b      	ldr	r3, [pc, #492]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b584:	2b00      	cmp	r3, #0
 800b586:	d005      	beq.n	800b594 <HAL_RCC_OscConfig+0x320>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	2b80      	cmp	r3, #128	; 0x80
 800b58e:	d001      	beq.n	800b594 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e2c1      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b594:	f7f9 fafc 	bl	8004b90 <HAL_GetREVID>
 800b598:	4603      	mov	r3, r0
 800b59a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d817      	bhi.n	800b5d2 <HAL_RCC_OscConfig+0x35e>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	d108      	bne.n	800b5bc <HAL_RCC_OscConfig+0x348>
 800b5aa:	4b70      	ldr	r3, [pc, #448]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b5b2:	4a6e      	ldr	r2, [pc, #440]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5ba:	e075      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5bc:	4b6b      	ldr	r3, [pc, #428]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	069b      	lsls	r3, r3, #26
 800b5ca:	4968      	ldr	r1, [pc, #416]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5d0:	e06a      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5d2:	4b66      	ldr	r3, [pc, #408]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a1b      	ldr	r3, [r3, #32]
 800b5de:	061b      	lsls	r3, r3, #24
 800b5e0:	4962      	ldr	r1, [pc, #392]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5e6:	e05f      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d042      	beq.n	800b676 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b5f0:	4b5e      	ldr	r3, [pc, #376]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a5d      	ldr	r2, [pc, #372]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5fc:	f7f9 fa98 	bl	8004b30 <HAL_GetTick>
 800b600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b602:	e008      	b.n	800b616 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b604:	f7f9 fa94 	bl	8004b30 <HAL_GetTick>
 800b608:	4602      	mov	r2, r0
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d901      	bls.n	800b616 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e280      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b616:	4b55      	ldr	r3, [pc, #340]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0f0      	beq.n	800b604 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b622:	f7f9 fab5 	bl	8004b90 <HAL_GetREVID>
 800b626:	4603      	mov	r3, r0
 800b628:	f241 0203 	movw	r2, #4099	; 0x1003
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d817      	bhi.n	800b660 <HAL_RCC_OscConfig+0x3ec>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a1b      	ldr	r3, [r3, #32]
 800b634:	2b20      	cmp	r3, #32
 800b636:	d108      	bne.n	800b64a <HAL_RCC_OscConfig+0x3d6>
 800b638:	4b4c      	ldr	r3, [pc, #304]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b640:	4a4a      	ldr	r2, [pc, #296]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b646:	6053      	str	r3, [r2, #4]
 800b648:	e02e      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
 800b64a:	4b48      	ldr	r3, [pc, #288]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	069b      	lsls	r3, r3, #26
 800b658:	4944      	ldr	r1, [pc, #272]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	604b      	str	r3, [r1, #4]
 800b65e:	e023      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
 800b660:	4b42      	ldr	r3, [pc, #264]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	061b      	lsls	r3, r3, #24
 800b66e:	493f      	ldr	r1, [pc, #252]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b670:	4313      	orrs	r3, r2
 800b672:	60cb      	str	r3, [r1, #12]
 800b674:	e018      	b.n	800b6a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b676:	4b3d      	ldr	r3, [pc, #244]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a3c      	ldr	r2, [pc, #240]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b67c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b682:	f7f9 fa55 	bl	8004b30 <HAL_GetTick>
 800b686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b688:	e008      	b.n	800b69c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b68a:	f7f9 fa51 	bl	8004b30 <HAL_GetTick>
 800b68e:	4602      	mov	r2, r0
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2b02      	cmp	r3, #2
 800b696:	d901      	bls.n	800b69c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b698:	2303      	movs	r3, #3
 800b69a:	e23d      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b69c:	4b33      	ldr	r3, [pc, #204]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f0      	bne.n	800b68a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0308 	and.w	r3, r3, #8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d036      	beq.n	800b722 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d019      	beq.n	800b6f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6c0:	4a2a      	ldr	r2, [pc, #168]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b6c2:	f043 0301 	orr.w	r3, r3, #1
 800b6c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6c8:	f7f9 fa32 	bl	8004b30 <HAL_GetTick>
 800b6cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6ce:	e008      	b.n	800b6e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6d0:	f7f9 fa2e 	bl	8004b30 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e21a      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6e2:	4b22      	ldr	r3, [pc, #136]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0f0      	beq.n	800b6d0 <HAL_RCC_OscConfig+0x45c>
 800b6ee:	e018      	b.n	800b722 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6f0:	4b1e      	ldr	r3, [pc, #120]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b6f6:	f023 0301 	bic.w	r3, r3, #1
 800b6fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6fc:	f7f9 fa18 	bl	8004b30 <HAL_GetTick>
 800b700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b702:	e008      	b.n	800b716 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b704:	f7f9 fa14 	bl	8004b30 <HAL_GetTick>
 800b708:	4602      	mov	r2, r0
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d901      	bls.n	800b716 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b712:	2303      	movs	r3, #3
 800b714:	e200      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b716:	4b15      	ldr	r3, [pc, #84]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1f0      	bne.n	800b704 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d039      	beq.n	800b7a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d01c      	beq.n	800b770 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b736:	4b0d      	ldr	r3, [pc, #52]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b73c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b742:	f7f9 f9f5 	bl	8004b30 <HAL_GetTick>
 800b746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b748:	e008      	b.n	800b75c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b74a:	f7f9 f9f1 	bl	8004b30 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d901      	bls.n	800b75c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e1dd      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b75c:	4b03      	ldr	r3, [pc, #12]	; (800b76c <HAL_RCC_OscConfig+0x4f8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0f0      	beq.n	800b74a <HAL_RCC_OscConfig+0x4d6>
 800b768:	e01b      	b.n	800b7a2 <HAL_RCC_OscConfig+0x52e>
 800b76a:	bf00      	nop
 800b76c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b770:	4b9b      	ldr	r3, [pc, #620]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a9a      	ldr	r2, [pc, #616]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b77a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b77c:	f7f9 f9d8 	bl	8004b30 <HAL_GetTick>
 800b780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b782:	e008      	b.n	800b796 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b784:	f7f9 f9d4 	bl	8004b30 <HAL_GetTick>
 800b788:	4602      	mov	r2, r0
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d901      	bls.n	800b796 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e1c0      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b796:	4b92      	ldr	r3, [pc, #584]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f0      	bne.n	800b784 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0304 	and.w	r3, r3, #4
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f000 8081 	beq.w	800b8b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b7b0:	4b8c      	ldr	r3, [pc, #560]	; (800b9e4 <HAL_RCC_OscConfig+0x770>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a8b      	ldr	r2, [pc, #556]	; (800b9e4 <HAL_RCC_OscConfig+0x770>)
 800b7b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7bc:	f7f9 f9b8 	bl	8004b30 <HAL_GetTick>
 800b7c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7c2:	e008      	b.n	800b7d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7c4:	f7f9 f9b4 	bl	8004b30 <HAL_GetTick>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	2b64      	cmp	r3, #100	; 0x64
 800b7d0:	d901      	bls.n	800b7d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e1a0      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7d6:	4b83      	ldr	r3, [pc, #524]	; (800b9e4 <HAL_RCC_OscConfig+0x770>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0f0      	beq.n	800b7c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d106      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x584>
 800b7ea:	4b7d      	ldr	r3, [pc, #500]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	4a7c      	ldr	r2, [pc, #496]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b7f0:	f043 0301 	orr.w	r3, r3, #1
 800b7f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f6:	e02d      	b.n	800b854 <HAL_RCC_OscConfig+0x5e0>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10c      	bne.n	800b81a <HAL_RCC_OscConfig+0x5a6>
 800b800:	4b77      	ldr	r3, [pc, #476]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b804:	4a76      	ldr	r2, [pc, #472]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b806:	f023 0301 	bic.w	r3, r3, #1
 800b80a:	6713      	str	r3, [r2, #112]	; 0x70
 800b80c:	4b74      	ldr	r3, [pc, #464]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b810:	4a73      	ldr	r2, [pc, #460]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b812:	f023 0304 	bic.w	r3, r3, #4
 800b816:	6713      	str	r3, [r2, #112]	; 0x70
 800b818:	e01c      	b.n	800b854 <HAL_RCC_OscConfig+0x5e0>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d10c      	bne.n	800b83c <HAL_RCC_OscConfig+0x5c8>
 800b822:	4b6f      	ldr	r3, [pc, #444]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b826:	4a6e      	ldr	r2, [pc, #440]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b828:	f043 0304 	orr.w	r3, r3, #4
 800b82c:	6713      	str	r3, [r2, #112]	; 0x70
 800b82e:	4b6c      	ldr	r3, [pc, #432]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	4a6b      	ldr	r2, [pc, #428]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b834:	f043 0301 	orr.w	r3, r3, #1
 800b838:	6713      	str	r3, [r2, #112]	; 0x70
 800b83a:	e00b      	b.n	800b854 <HAL_RCC_OscConfig+0x5e0>
 800b83c:	4b68      	ldr	r3, [pc, #416]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	4a67      	ldr	r2, [pc, #412]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b842:	f023 0301 	bic.w	r3, r3, #1
 800b846:	6713      	str	r3, [r2, #112]	; 0x70
 800b848:	4b65      	ldr	r3, [pc, #404]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84c:	4a64      	ldr	r2, [pc, #400]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b84e:	f023 0304 	bic.w	r3, r3, #4
 800b852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d015      	beq.n	800b888 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b85c:	f7f9 f968 	bl	8004b30 <HAL_GetTick>
 800b860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b862:	e00a      	b.n	800b87a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b864:	f7f9 f964 	bl	8004b30 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b872:	4293      	cmp	r3, r2
 800b874:	d901      	bls.n	800b87a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b876:	2303      	movs	r3, #3
 800b878:	e14e      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b87a:	4b59      	ldr	r3, [pc, #356]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d0ee      	beq.n	800b864 <HAL_RCC_OscConfig+0x5f0>
 800b886:	e014      	b.n	800b8b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b888:	f7f9 f952 	bl	8004b30 <HAL_GetTick>
 800b88c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b88e:	e00a      	b.n	800b8a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b890:	f7f9 f94e 	bl	8004b30 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d901      	bls.n	800b8a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e138      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8a6:	4b4e      	ldr	r3, [pc, #312]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1ee      	bne.n	800b890 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 812d 	beq.w	800bb16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b8bc:	4b48      	ldr	r3, [pc, #288]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8c4:	2b18      	cmp	r3, #24
 800b8c6:	f000 80bd 	beq.w	800ba44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	f040 809e 	bne.w	800ba10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d4:	4b42      	ldr	r3, [pc, #264]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a41      	ldr	r2, [pc, #260]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b8da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e0:	f7f9 f926 	bl	8004b30 <HAL_GetTick>
 800b8e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8e6:	e008      	b.n	800b8fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e8:	f7f9 f922 	bl	8004b30 <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e10e      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8fa:	4b39      	ldr	r3, [pc, #228]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1f0      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b906:	4b36      	ldr	r3, [pc, #216]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b90a:	4b37      	ldr	r3, [pc, #220]	; (800b9e8 <HAL_RCC_OscConfig+0x774>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b916:	0112      	lsls	r2, r2, #4
 800b918:	430a      	orrs	r2, r1
 800b91a:	4931      	ldr	r1, [pc, #196]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b91c:	4313      	orrs	r3, r2
 800b91e:	628b      	str	r3, [r1, #40]	; 0x28
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b924:	3b01      	subs	r3, #1
 800b926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b92e:	3b01      	subs	r3, #1
 800b930:	025b      	lsls	r3, r3, #9
 800b932:	b29b      	uxth	r3, r3
 800b934:	431a      	orrs	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93a:	3b01      	subs	r3, #1
 800b93c:	041b      	lsls	r3, r3, #16
 800b93e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b942:	431a      	orrs	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b948:	3b01      	subs	r3, #1
 800b94a:	061b      	lsls	r3, r3, #24
 800b94c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b950:	4923      	ldr	r1, [pc, #140]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b952:	4313      	orrs	r3, r2
 800b954:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b956:	4b22      	ldr	r3, [pc, #136]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	4a21      	ldr	r2, [pc, #132]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b95c:	f023 0301 	bic.w	r3, r3, #1
 800b960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b962:	4b1f      	ldr	r3, [pc, #124]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b966:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <HAL_RCC_OscConfig+0x778>)
 800b968:	4013      	ands	r3, r2
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b96e:	00d2      	lsls	r2, r2, #3
 800b970:	491b      	ldr	r1, [pc, #108]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b972:	4313      	orrs	r3, r2
 800b974:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b976:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	f023 020c 	bic.w	r2, r3, #12
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	4917      	ldr	r1, [pc, #92]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b984:	4313      	orrs	r3, r2
 800b986:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b988:	4b15      	ldr	r3, [pc, #84]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98c:	f023 0202 	bic.w	r2, r3, #2
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b994:	4912      	ldr	r1, [pc, #72]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b996:	4313      	orrs	r3, r2
 800b998:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b99a:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a10      	ldr	r2, [pc, #64]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a6:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9aa:	4a0d      	ldr	r2, [pc, #52]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9b2:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	4a0a      	ldr	r2, [pc, #40]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b9be:	4b08      	ldr	r3, [pc, #32]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	4a07      	ldr	r2, [pc, #28]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9c4:	f043 0301 	orr.w	r3, r3, #1
 800b9c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a04      	ldr	r2, [pc, #16]	; (800b9e0 <HAL_RCC_OscConfig+0x76c>)
 800b9d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d6:	f7f9 f8ab 	bl	8004b30 <HAL_GetTick>
 800b9da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9dc:	e011      	b.n	800ba02 <HAL_RCC_OscConfig+0x78e>
 800b9de:	bf00      	nop
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	58024800 	.word	0x58024800
 800b9e8:	fffffc0c 	.word	0xfffffc0c
 800b9ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9f0:	f7f9 f89e 	bl	8004b30 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d901      	bls.n	800ba02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e08a      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba02:	4b47      	ldr	r3, [pc, #284]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0f0      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x77c>
 800ba0e:	e082      	b.n	800bb16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba10:	4b43      	ldr	r3, [pc, #268]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a42      	ldr	r2, [pc, #264]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba1c:	f7f9 f888 	bl	8004b30 <HAL_GetTick>
 800ba20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba22:	e008      	b.n	800ba36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba24:	f7f9 f884 	bl	8004b30 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d901      	bls.n	800ba36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	e070      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba36:	4b3a      	ldr	r3, [pc, #232]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f0      	bne.n	800ba24 <HAL_RCC_OscConfig+0x7b0>
 800ba42:	e068      	b.n	800bb16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba44:	4b36      	ldr	r3, [pc, #216]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba4a:	4b35      	ldr	r3, [pc, #212]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d031      	beq.n	800babc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f003 0203 	and.w	r2, r3, #3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d12a      	bne.n	800babc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	091b      	lsrs	r3, r3, #4
 800ba6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d122      	bne.n	800babc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d11a      	bne.n	800babc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	0a5b      	lsrs	r3, r3, #9
 800ba8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d111      	bne.n	800babc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	0c1b      	lsrs	r3, r3, #16
 800ba9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d108      	bne.n	800babc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	0e1b      	lsrs	r3, r3, #24
 800baae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bab8:	429a      	cmp	r2, r3
 800baba:	d001      	beq.n	800bac0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e02b      	b.n	800bb18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bac0:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800bac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac4:	08db      	lsrs	r3, r3, #3
 800bac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d01f      	beq.n	800bb16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bad6:	4b12      	ldr	r3, [pc, #72]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	4a11      	ldr	r2, [pc, #68]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800badc:	f023 0301 	bic.w	r3, r3, #1
 800bae0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bae2:	f7f9 f825 	bl	8004b30 <HAL_GetTick>
 800bae6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bae8:	bf00      	nop
 800baea:	f7f9 f821 	bl	8004b30 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d0f9      	beq.n	800baea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800baf6:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800baf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bafa:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <HAL_RCC_OscConfig+0x8b0>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb02:	00d2      	lsls	r2, r2, #3
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bb0a:	4b05      	ldr	r3, [pc, #20]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800bb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0e:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <HAL_RCC_OscConfig+0x8ac>)
 800bb10:	f043 0301 	orr.w	r3, r3, #1
 800bb14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3730      	adds	r7, #48	; 0x30
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	58024400 	.word	0x58024400
 800bb24:	ffff0007 	.word	0xffff0007

0800bb28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d101      	bne.n	800bb3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e19c      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb3c:	4b8a      	ldr	r3, [pc, #552]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 030f 	and.w	r3, r3, #15
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d910      	bls.n	800bb6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb4a:	4b87      	ldr	r3, [pc, #540]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f023 020f 	bic.w	r2, r3, #15
 800bb52:	4985      	ldr	r1, [pc, #532]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb5a:	4b83      	ldr	r3, [pc, #524]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 030f 	and.w	r3, r3, #15
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d001      	beq.n	800bb6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e184      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0304 	and.w	r3, r3, #4
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d010      	beq.n	800bb9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691a      	ldr	r2, [r3, #16]
 800bb7c:	4b7b      	ldr	r3, [pc, #492]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d908      	bls.n	800bb9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb88:	4b78      	ldr	r3, [pc, #480]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	4975      	ldr	r1, [pc, #468]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0308 	and.w	r3, r3, #8
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695a      	ldr	r2, [r3, #20]
 800bbaa:	4b70      	ldr	r3, [pc, #448]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d908      	bls.n	800bbc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bbb6:	4b6d      	ldr	r3, [pc, #436]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	496a      	ldr	r1, [pc, #424]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0310 	and.w	r3, r3, #16
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d010      	beq.n	800bbf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699a      	ldr	r2, [r3, #24]
 800bbd8:	4b64      	ldr	r3, [pc, #400]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbda:	69db      	ldr	r3, [r3, #28]
 800bbdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d908      	bls.n	800bbf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bbe4:	4b61      	ldr	r3, [pc, #388]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbe6:	69db      	ldr	r3, [r3, #28]
 800bbe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	495e      	ldr	r1, [pc, #376]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d010      	beq.n	800bc24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69da      	ldr	r2, [r3, #28]
 800bc06:	4b59      	ldr	r3, [pc, #356]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d908      	bls.n	800bc24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bc12:	4b56      	ldr	r3, [pc, #344]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	4953      	ldr	r1, [pc, #332]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc20:	4313      	orrs	r3, r2
 800bc22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d010      	beq.n	800bc52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	4b4d      	ldr	r3, [pc, #308]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	f003 030f 	and.w	r3, r3, #15
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d908      	bls.n	800bc52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc40:	4b4a      	ldr	r3, [pc, #296]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	f023 020f 	bic.w	r2, r3, #15
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	4947      	ldr	r1, [pc, #284]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d055      	beq.n	800bd0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bc5e:	4b43      	ldr	r3, [pc, #268]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	4940      	ldr	r1, [pc, #256]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d107      	bne.n	800bc88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc78:	4b3c      	ldr	r3, [pc, #240]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d121      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e0f6      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d107      	bne.n	800bca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc90:	4b36      	ldr	r3, [pc, #216]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d115      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e0ea      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d107      	bne.n	800bcb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bca8:	4b30      	ldr	r3, [pc, #192]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d109      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e0de      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bcb8:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0d6      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bcc8:	4b28      	ldr	r3, [pc, #160]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f023 0207 	bic.w	r2, r3, #7
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4925      	ldr	r1, [pc, #148]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcda:	f7f8 ff29 	bl	8004b30 <HAL_GetTick>
 800bcde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bce0:	e00a      	b.n	800bcf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bce2:	f7f8 ff25 	bl	8004b30 <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d901      	bls.n	800bcf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e0be      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcf8:	4b1c      	ldr	r3, [pc, #112]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d1eb      	bne.n	800bce2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 0302 	and.w	r3, r3, #2
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68da      	ldr	r2, [r3, #12]
 800bd1a:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	f003 030f 	and.w	r3, r3, #15
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d208      	bcs.n	800bd38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd26:	4b11      	ldr	r3, [pc, #68]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	f023 020f 	bic.w	r2, r3, #15
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	490e      	ldr	r1, [pc, #56]	; (800bd6c <HAL_RCC_ClockConfig+0x244>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bd38:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 030f 	and.w	r3, r3, #15
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d214      	bcs.n	800bd70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd46:	4b08      	ldr	r3, [pc, #32]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f023 020f 	bic.w	r2, r3, #15
 800bd4e:	4906      	ldr	r1, [pc, #24]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd56:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <HAL_RCC_ClockConfig+0x240>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d005      	beq.n	800bd70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e086      	b.n	800be76 <HAL_RCC_ClockConfig+0x34e>
 800bd68:	52002000 	.word	0x52002000
 800bd6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d010      	beq.n	800bd9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691a      	ldr	r2, [r3, #16]
 800bd80:	4b3f      	ldr	r3, [pc, #252]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d208      	bcs.n	800bd9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd8c:	4b3c      	ldr	r3, [pc, #240]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	4939      	ldr	r1, [pc, #228]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0308 	and.w	r3, r3, #8
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d010      	beq.n	800bdcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	695a      	ldr	r2, [r3, #20]
 800bdae:	4b34      	ldr	r3, [pc, #208]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d208      	bcs.n	800bdcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bdba:	4b31      	ldr	r3, [pc, #196]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	492e      	ldr	r1, [pc, #184]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0310 	and.w	r3, r3, #16
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d010      	beq.n	800bdfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	699a      	ldr	r2, [r3, #24]
 800bddc:	4b28      	ldr	r3, [pc, #160]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d208      	bcs.n	800bdfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bde8:	4b25      	ldr	r3, [pc, #148]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	4922      	ldr	r1, [pc, #136]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0320 	and.w	r3, r3, #32
 800be02:	2b00      	cmp	r3, #0
 800be04:	d010      	beq.n	800be28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	69da      	ldr	r2, [r3, #28]
 800be0a:	4b1d      	ldr	r3, [pc, #116]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800be0c:	6a1b      	ldr	r3, [r3, #32]
 800be0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be12:	429a      	cmp	r2, r3
 800be14:	d208      	bcs.n	800be28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800be16:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	4917      	ldr	r1, [pc, #92]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800be24:	4313      	orrs	r3, r2
 800be26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800be28:	f000 f834 	bl	800be94 <HAL_RCC_GetSysClockFreq>
 800be2c:	4602      	mov	r2, r0
 800be2e:	4b14      	ldr	r3, [pc, #80]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	0a1b      	lsrs	r3, r3, #8
 800be34:	f003 030f 	and.w	r3, r3, #15
 800be38:	4912      	ldr	r1, [pc, #72]	; (800be84 <HAL_RCC_ClockConfig+0x35c>)
 800be3a:	5ccb      	ldrb	r3, [r1, r3]
 800be3c:	f003 031f 	and.w	r3, r3, #31
 800be40:	fa22 f303 	lsr.w	r3, r2, r3
 800be44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800be46:	4b0e      	ldr	r3, [pc, #56]	; (800be80 <HAL_RCC_ClockConfig+0x358>)
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	4a0d      	ldr	r2, [pc, #52]	; (800be84 <HAL_RCC_ClockConfig+0x35c>)
 800be50:	5cd3      	ldrb	r3, [r2, r3]
 800be52:	f003 031f 	and.w	r3, r3, #31
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	fa22 f303 	lsr.w	r3, r2, r3
 800be5c:	4a0a      	ldr	r2, [pc, #40]	; (800be88 <HAL_RCC_ClockConfig+0x360>)
 800be5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be60:	4a0a      	ldr	r2, [pc, #40]	; (800be8c <HAL_RCC_ClockConfig+0x364>)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800be66:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <HAL_RCC_ClockConfig+0x368>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f8 fe16 	bl	8004a9c <HAL_InitTick>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	58024400 	.word	0x58024400
 800be84:	0801925c 	.word	0x0801925c
 800be88:	20000010 	.word	0x20000010
 800be8c:	2000000c 	.word	0x2000000c
 800be90:	20000034 	.word	0x20000034

0800be94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be94:	b480      	push	{r7}
 800be96:	b089      	sub	sp, #36	; 0x24
 800be98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be9a:	4bb3      	ldr	r3, [pc, #716]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bea2:	2b18      	cmp	r3, #24
 800bea4:	f200 8155 	bhi.w	800c152 <HAL_RCC_GetSysClockFreq+0x2be>
 800bea8:	a201      	add	r2, pc, #4	; (adr r2, 800beb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800beaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beae:	bf00      	nop
 800beb0:	0800bf15 	.word	0x0800bf15
 800beb4:	0800c153 	.word	0x0800c153
 800beb8:	0800c153 	.word	0x0800c153
 800bebc:	0800c153 	.word	0x0800c153
 800bec0:	0800c153 	.word	0x0800c153
 800bec4:	0800c153 	.word	0x0800c153
 800bec8:	0800c153 	.word	0x0800c153
 800becc:	0800c153 	.word	0x0800c153
 800bed0:	0800bf3b 	.word	0x0800bf3b
 800bed4:	0800c153 	.word	0x0800c153
 800bed8:	0800c153 	.word	0x0800c153
 800bedc:	0800c153 	.word	0x0800c153
 800bee0:	0800c153 	.word	0x0800c153
 800bee4:	0800c153 	.word	0x0800c153
 800bee8:	0800c153 	.word	0x0800c153
 800beec:	0800c153 	.word	0x0800c153
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800c153 	.word	0x0800c153
 800bef8:	0800c153 	.word	0x0800c153
 800befc:	0800c153 	.word	0x0800c153
 800bf00:	0800c153 	.word	0x0800c153
 800bf04:	0800c153 	.word	0x0800c153
 800bf08:	0800c153 	.word	0x0800c153
 800bf0c:	0800c153 	.word	0x0800c153
 800bf10:	0800bf47 	.word	0x0800bf47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf14:	4b94      	ldr	r3, [pc, #592]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0320 	and.w	r3, r3, #32
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d009      	beq.n	800bf34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf20:	4b91      	ldr	r3, [pc, #580]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	08db      	lsrs	r3, r3, #3
 800bf26:	f003 0303 	and.w	r3, r3, #3
 800bf2a:	4a90      	ldr	r2, [pc, #576]	; (800c16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bf32:	e111      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bf34:	4b8d      	ldr	r3, [pc, #564]	; (800c16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf36:	61bb      	str	r3, [r7, #24]
      break;
 800bf38:	e10e      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bf3a:	4b8d      	ldr	r3, [pc, #564]	; (800c170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bf3c:	61bb      	str	r3, [r7, #24]
      break;
 800bf3e:	e10b      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bf40:	4b8c      	ldr	r3, [pc, #560]	; (800c174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bf42:	61bb      	str	r3, [r7, #24]
      break;
 800bf44:	e108      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf46:	4b88      	ldr	r3, [pc, #544]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bf50:	4b85      	ldr	r3, [pc, #532]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf54:	091b      	lsrs	r3, r3, #4
 800bf56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf5c:	4b82      	ldr	r3, [pc, #520]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	f003 0301 	and.w	r3, r3, #1
 800bf64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf66:	4b80      	ldr	r3, [pc, #512]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6a:	08db      	lsrs	r3, r3, #3
 800bf6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	fb02 f303 	mul.w	r3, r2, r3
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 80e1 	beq.w	800c14c <HAL_RCC_GetSysClockFreq+0x2b8>
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	f000 8083 	beq.w	800c098 <HAL_RCC_GetSysClockFreq+0x204>
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	f200 80a1 	bhi.w	800c0dc <HAL_RCC_GetSysClockFreq+0x248>
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <HAL_RCC_GetSysClockFreq+0x114>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d056      	beq.n	800c054 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bfa6:	e099      	b.n	800c0dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfa8:	4b6f      	ldr	r3, [pc, #444]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0320 	and.w	r3, r3, #32
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d02d      	beq.n	800c010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfb4:	4b6c      	ldr	r3, [pc, #432]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	08db      	lsrs	r3, r3, #3
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	4a6b      	ldr	r2, [pc, #428]	; (800c16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bfc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	ee07 3a90 	vmov	s15, r3
 800bfd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfde:	4b62      	ldr	r3, [pc, #392]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe6:	ee07 3a90 	vmov	s15, r3
 800bfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfee:	ed97 6a02 	vldr	s12, [r7, #8]
 800bff2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c00e:	e087      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c17c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c022:	4b51      	ldr	r3, [pc, #324]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c032:	ed97 6a02 	vldr	s12, [r7, #8]
 800c036:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c04e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c052:	e065      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c180 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c066:	4b40      	ldr	r3, [pc, #256]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c076:	ed97 6a02 	vldr	s12, [r7, #8]
 800c07a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c096:	e043      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	ee07 3a90 	vmov	s15, r3
 800c09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c184 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0aa:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c0da:	e021      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	ee07 3a90 	vmov	s15, r3
 800c0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c180 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ee:	4b1e      	ldr	r3, [pc, #120]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c102:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c10e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c11e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c120:	4b11      	ldr	r3, [pc, #68]	; (800c168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c124:	0a5b      	lsrs	r3, r3, #9
 800c126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12a:	3301      	adds	r3, #1
 800c12c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	ee07 3a90 	vmov	s15, r3
 800c134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c138:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c144:	ee17 3a90 	vmov	r3, s15
 800c148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c14a:	e005      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c14c:	2300      	movs	r3, #0
 800c14e:	61bb      	str	r3, [r7, #24]
      break;
 800c150:	e002      	b.n	800c158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c154:	61bb      	str	r3, [r7, #24]
      break;
 800c156:	bf00      	nop
  }

  return sysclockfreq;
 800c158:	69bb      	ldr	r3, [r7, #24]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3724      	adds	r7, #36	; 0x24
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	58024400 	.word	0x58024400
 800c16c:	03d09000 	.word	0x03d09000
 800c170:	003d0900 	.word	0x003d0900
 800c174:	017d7840 	.word	0x017d7840
 800c178:	46000000 	.word	0x46000000
 800c17c:	4c742400 	.word	0x4c742400
 800c180:	4a742400 	.word	0x4a742400
 800c184:	4bbebc20 	.word	0x4bbebc20

0800c188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c18e:	f7ff fe81 	bl	800be94 <HAL_RCC_GetSysClockFreq>
 800c192:	4602      	mov	r2, r0
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	0a1b      	lsrs	r3, r3, #8
 800c19a:	f003 030f 	and.w	r3, r3, #15
 800c19e:	490f      	ldr	r1, [pc, #60]	; (800c1dc <HAL_RCC_GetHCLKFreq+0x54>)
 800c1a0:	5ccb      	ldrb	r3, [r1, r3]
 800c1a2:	f003 031f 	and.w	r3, r3, #31
 800c1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	f003 030f 	and.w	r3, r3, #15
 800c1b4:	4a09      	ldr	r2, [pc, #36]	; (800c1dc <HAL_RCC_GetHCLKFreq+0x54>)
 800c1b6:	5cd3      	ldrb	r3, [r2, r3]
 800c1b8:	f003 031f 	and.w	r3, r3, #31
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c2:	4a07      	ldr	r2, [pc, #28]	; (800c1e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c1c6:	4a07      	ldr	r2, [pc, #28]	; (800c1e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	58024400 	.word	0x58024400
 800c1dc:	0801925c 	.word	0x0801925c
 800c1e0:	20000010 	.word	0x20000010
 800c1e4:	2000000c 	.word	0x2000000c

0800c1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c1ec:	f7ff ffcc 	bl	800c188 <HAL_RCC_GetHCLKFreq>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	4b06      	ldr	r3, [pc, #24]	; (800c20c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	091b      	lsrs	r3, r3, #4
 800c1f8:	f003 0307 	and.w	r3, r3, #7
 800c1fc:	4904      	ldr	r1, [pc, #16]	; (800c210 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1fe:	5ccb      	ldrb	r3, [r1, r3]
 800c200:	f003 031f 	and.w	r3, r3, #31
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c208:	4618      	mov	r0, r3
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	58024400 	.word	0x58024400
 800c210:	0801925c 	.word	0x0801925c

0800c214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c218:	f7ff ffb6 	bl	800c188 <HAL_RCC_GetHCLKFreq>
 800c21c:	4602      	mov	r2, r0
 800c21e:	4b06      	ldr	r3, [pc, #24]	; (800c238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	0a1b      	lsrs	r3, r3, #8
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	4904      	ldr	r1, [pc, #16]	; (800c23c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c22a:	5ccb      	ldrb	r3, [r1, r3]
 800c22c:	f003 031f 	and.w	r3, r3, #31
 800c230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c234:	4618      	mov	r0, r3
 800c236:	bd80      	pop	{r7, pc}
 800c238:	58024400 	.word	0x58024400
 800c23c:	0801925c 	.word	0x0801925c

0800c240 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c244:	b0ca      	sub	sp, #296	; 0x128
 800c246:	af00      	add	r7, sp, #0
 800c248:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c24c:	2300      	movs	r3, #0
 800c24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c252:	2300      	movs	r3, #0
 800c254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c264:	2500      	movs	r5, #0
 800c266:	ea54 0305 	orrs.w	r3, r4, r5
 800c26a:	d049      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c276:	d02f      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c27c:	d828      	bhi.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c27e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c282:	d01a      	beq.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c288:	d822      	bhi.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c292:	d007      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c294:	e01c      	b.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c296:	4bb8      	ldr	r3, [pc, #736]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	4ab7      	ldr	r2, [pc, #732]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c29c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2a2:	e01a      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	2102      	movs	r1, #2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f002 fb61 	bl	800e974 <RCCEx_PLL2_Config>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2b8:	e00f      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2be:	3328      	adds	r3, #40	; 0x28
 800c2c0:	2102      	movs	r1, #2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f002 fc08 	bl	800ead8 <RCCEx_PLL3_Config>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2ce:	e004      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c2d6:	e000      	b.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c2d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c2e2:	4ba5      	ldr	r3, [pc, #660]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2f0:	4aa1      	ldr	r2, [pc, #644]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2f2:	430b      	orrs	r3, r1
 800c2f4:	6513      	str	r3, [r2, #80]	; 0x50
 800c2f6:	e003      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c30c:	f04f 0900 	mov.w	r9, #0
 800c310:	ea58 0309 	orrs.w	r3, r8, r9
 800c314:	d047      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d82a      	bhi.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c320:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c326:	bf00      	nop
 800c328:	0800c33d 	.word	0x0800c33d
 800c32c:	0800c34b 	.word	0x0800c34b
 800c330:	0800c361 	.word	0x0800c361
 800c334:	0800c37f 	.word	0x0800c37f
 800c338:	0800c37f 	.word	0x0800c37f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c33c:	4b8e      	ldr	r3, [pc, #568]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	4a8d      	ldr	r2, [pc, #564]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c348:	e01a      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	3308      	adds	r3, #8
 800c350:	2100      	movs	r1, #0
 800c352:	4618      	mov	r0, r3
 800c354:	f002 fb0e 	bl	800e974 <RCCEx_PLL2_Config>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c35e:	e00f      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c364:	3328      	adds	r3, #40	; 0x28
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f002 fbb5 	bl	800ead8 <RCCEx_PLL3_Config>
 800c36e:	4603      	mov	r3, r0
 800c370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c374:	e004      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c37c:	e000      	b.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c388:	4b7b      	ldr	r3, [pc, #492]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c38c:	f023 0107 	bic.w	r1, r3, #7
 800c390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c396:	4a78      	ldr	r2, [pc, #480]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c398:	430b      	orrs	r3, r1
 800c39a:	6513      	str	r3, [r2, #80]	; 0x50
 800c39c:	e003      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c3b2:	f04f 0b00 	mov.w	fp, #0
 800c3b6:	ea5a 030b 	orrs.w	r3, sl, fp
 800c3ba:	d04c      	beq.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c6:	d030      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3cc:	d829      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c3ce:	2bc0      	cmp	r3, #192	; 0xc0
 800c3d0:	d02d      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c3d2:	2bc0      	cmp	r3, #192	; 0xc0
 800c3d4:	d825      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c3d6:	2b80      	cmp	r3, #128	; 0x80
 800c3d8:	d018      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c3da:	2b80      	cmp	r3, #128	; 0x80
 800c3dc:	d821      	bhi.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c3e2:	2b40      	cmp	r3, #64	; 0x40
 800c3e4:	d007      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c3e6:	e01c      	b.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3e8:	4b63      	ldr	r3, [pc, #396]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	4a62      	ldr	r2, [pc, #392]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c3f4:	e01c      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f002 fab8 	bl	800e974 <RCCEx_PLL2_Config>
 800c404:	4603      	mov	r3, r0
 800c406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c40a:	e011      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c410:	3328      	adds	r3, #40	; 0x28
 800c412:	2100      	movs	r1, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f002 fb5f 	bl	800ead8 <RCCEx_PLL3_Config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c420:	e006      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c428:	e002      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c42a:	bf00      	nop
 800c42c:	e000      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10a      	bne.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c438:	4b4f      	ldr	r3, [pc, #316]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c446:	4a4c      	ldr	r2, [pc, #304]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c448:	430b      	orrs	r3, r1
 800c44a:	6513      	str	r3, [r2, #80]	; 0x50
 800c44c:	e003      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c44e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c462:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c466:	2300      	movs	r3, #0
 800c468:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c46c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c470:	460b      	mov	r3, r1
 800c472:	4313      	orrs	r3, r2
 800c474:	d053      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c47a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c47e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c482:	d035      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c488:	d82e      	bhi.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c48a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c48e:	d031      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c490:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c494:	d828      	bhi.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49a:	d01a      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c49c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4a0:	d822      	bhi.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c4a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4aa:	d007      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c4ac:	e01c      	b.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ae:	4b32      	ldr	r3, [pc, #200]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b2:	4a31      	ldr	r2, [pc, #196]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c4b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4ba:	e01c      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f002 fa55 	bl	800e974 <RCCEx_PLL2_Config>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4d0:	e011      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d6:	3328      	adds	r3, #40	; 0x28
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f002 fafc 	bl	800ead8 <RCCEx_PLL3_Config>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4e6:	e006      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4ee:	e002      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c4f0:	bf00      	nop
 800c4f2:	e000      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10b      	bne.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c4fe:	4b1e      	ldr	r3, [pc, #120]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c502:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c50a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c50e:	4a1a      	ldr	r2, [pc, #104]	; (800c578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c510:	430b      	orrs	r3, r1
 800c512:	6593      	str	r3, [r2, #88]	; 0x58
 800c514:	e003      	b.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c51a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c52a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c52e:	2300      	movs	r3, #0
 800c530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c534:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c538:	460b      	mov	r3, r1
 800c53a:	4313      	orrs	r3, r2
 800c53c:	d056      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c54a:	d038      	beq.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c54c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c550:	d831      	bhi.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c556:	d034      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c55c:	d82b      	bhi.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c55e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c562:	d01d      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c568:	d825      	bhi.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d006      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c56e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c572:	d00a      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c574:	e01f      	b.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c576:	bf00      	nop
 800c578:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c57c:	4ba2      	ldr	r3, [pc, #648]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	4aa1      	ldr	r2, [pc, #644]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c586:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c588:	e01c      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c58e:	3308      	adds	r3, #8
 800c590:	2100      	movs	r1, #0
 800c592:	4618      	mov	r0, r3
 800c594:	f002 f9ee 	bl	800e974 <RCCEx_PLL2_Config>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c59e:	e011      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a4:	3328      	adds	r3, #40	; 0x28
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f002 fa95 	bl	800ead8 <RCCEx_PLL3_Config>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5b4:	e006      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c5bc:	e002      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c5be:	bf00      	nop
 800c5c0:	e000      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c5cc:	4b8e      	ldr	r3, [pc, #568]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c5dc:	4a8a      	ldr	r2, [pc, #552]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5de:	430b      	orrs	r3, r1
 800c5e0:	6593      	str	r3, [r2, #88]	; 0x58
 800c5e2:	e003      	b.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c5f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c606:	460b      	mov	r3, r1
 800c608:	4313      	orrs	r3, r2
 800c60a:	d03a      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c612:	2b30      	cmp	r3, #48	; 0x30
 800c614:	d01f      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c616:	2b30      	cmp	r3, #48	; 0x30
 800c618:	d819      	bhi.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d00c      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c61e:	2b20      	cmp	r3, #32
 800c620:	d815      	bhi.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d019      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c626:	2b10      	cmp	r3, #16
 800c628:	d111      	bne.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c62a:	4b77      	ldr	r3, [pc, #476]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62e:	4a76      	ldr	r2, [pc, #472]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c636:	e011      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c63c:	3308      	adds	r3, #8
 800c63e:	2102      	movs	r1, #2
 800c640:	4618      	mov	r0, r3
 800c642:	f002 f997 	bl	800e974 <RCCEx_PLL2_Config>
 800c646:	4603      	mov	r3, r0
 800c648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c64c:	e006      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c654:	e002      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c656:	bf00      	nop
 800c658:	e000      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c664:	4b68      	ldr	r3, [pc, #416]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c672:	4a65      	ldr	r2, [pc, #404]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c674:	430b      	orrs	r3, r1
 800c676:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c678:	e003      	b.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c67a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c67e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c68e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c692:	2300      	movs	r3, #0
 800c694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c698:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	d051      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6ac:	d035      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c6ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6b2:	d82e      	bhi.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c6b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6b8:	d031      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c6ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6be:	d828      	bhi.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c6c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6c4:	d01a      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c6c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6ca:	d822      	bhi.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c6d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d4:	d007      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c6d6:	e01c      	b.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6d8:	4b4b      	ldr	r3, [pc, #300]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6dc:	4a4a      	ldr	r2, [pc, #296]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c6de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c6e4:	e01c      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ea:	3308      	adds	r3, #8
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f002 f940 	bl	800e974 <RCCEx_PLL2_Config>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c6fa:	e011      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c700:	3328      	adds	r3, #40	; 0x28
 800c702:	2100      	movs	r1, #0
 800c704:	4618      	mov	r0, r3
 800c706:	f002 f9e7 	bl	800ead8 <RCCEx_PLL3_Config>
 800c70a:	4603      	mov	r3, r0
 800c70c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c710:	e006      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c718:	e002      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c71a:	bf00      	nop
 800c71c:	e000      	b.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c71e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c728:	4b37      	ldr	r3, [pc, #220]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c72c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c736:	4a34      	ldr	r2, [pc, #208]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c738:	430b      	orrs	r3, r1
 800c73a:	6513      	str	r3, [r2, #80]	; 0x50
 800c73c:	e003      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c756:	2300      	movs	r3, #0
 800c758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c75c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c760:	460b      	mov	r3, r1
 800c762:	4313      	orrs	r3, r2
 800c764:	d056      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c76a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c76c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c770:	d033      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c776:	d82c      	bhi.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c778:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c77c:	d02f      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800c77e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c782:	d826      	bhi.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c784:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c788:	d02b      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800c78a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c78e:	d820      	bhi.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c794:	d012      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800c796:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c79a:	d81a      	bhi.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d022      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a4:	d115      	bne.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f002 f8e0 	bl	800e974 <RCCEx_PLL2_Config>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c7ba:	e015      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7c0:	3328      	adds	r3, #40	; 0x28
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f002 f987 	bl	800ead8 <RCCEx_PLL3_Config>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c7d0:	e00a      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c7d8:	e006      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c7da:	bf00      	nop
 800c7dc:	e004      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c7de:	bf00      	nop
 800c7e0:	e002      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c7e2:	bf00      	nop
 800c7e4:	e000      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c7e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10d      	bne.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7fe:	4a02      	ldr	r2, [pc, #8]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c800:	430b      	orrs	r3, r1
 800c802:	6513      	str	r3, [r2, #80]	; 0x50
 800c804:	e006      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c806:	bf00      	nop
 800c808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c80c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c824:	2300      	movs	r3, #0
 800c826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c82a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c82e:	460b      	mov	r3, r1
 800c830:	4313      	orrs	r3, r2
 800c832:	d055      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c83c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c840:	d033      	beq.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800c842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c846:	d82c      	bhi.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c84c:	d02f      	beq.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800c84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c852:	d826      	bhi.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c858:	d02b      	beq.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800c85a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c85e:	d820      	bhi.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c864:	d012      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800c866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c86a:	d81a      	bhi.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d022      	beq.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800c870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c874:	d115      	bne.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c87a:	3308      	adds	r3, #8
 800c87c:	2101      	movs	r1, #1
 800c87e:	4618      	mov	r0, r3
 800c880:	f002 f878 	bl	800e974 <RCCEx_PLL2_Config>
 800c884:	4603      	mov	r3, r0
 800c886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c88a:	e015      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c890:	3328      	adds	r3, #40	; 0x28
 800c892:	2101      	movs	r1, #1
 800c894:	4618      	mov	r0, r3
 800c896:	f002 f91f 	bl	800ead8 <RCCEx_PLL3_Config>
 800c89a:	4603      	mov	r3, r0
 800c89c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c8a0:	e00a      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c8a8:	e006      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c8aa:	bf00      	nop
 800c8ac:	e004      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c8ae:	bf00      	nop
 800c8b0:	e002      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c8b2:	bf00      	nop
 800c8b4:	e000      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c8b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10b      	bne.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c8c0:	4ba3      	ldr	r3, [pc, #652]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8d0:	4a9f      	ldr	r2, [pc, #636]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c8d2:	430b      	orrs	r3, r1
 800c8d4:	6593      	str	r3, [r2, #88]	; 0x58
 800c8d6:	e003      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c8ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c8f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	d037      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c90a:	d00e      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c90c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c910:	d816      	bhi.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c912:	2b00      	cmp	r3, #0
 800c914:	d018      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c91a:	d111      	bne.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c91c:	4b8c      	ldr	r3, [pc, #560]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	4a8b      	ldr	r2, [pc, #556]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c928:	e00f      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c92e:	3308      	adds	r3, #8
 800c930:	2101      	movs	r1, #1
 800c932:	4618      	mov	r0, r3
 800c934:	f002 f81e 	bl	800e974 <RCCEx_PLL2_Config>
 800c938:	4603      	mov	r3, r0
 800c93a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c93e:	e004      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c946:	e000      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c94a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10a      	bne.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c952:	4b7f      	ldr	r3, [pc, #508]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c956:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c960:	4a7b      	ldr	r2, [pc, #492]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c962:	430b      	orrs	r3, r1
 800c964:	6513      	str	r3, [r2, #80]	; 0x50
 800c966:	e003      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c96c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c97c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c980:	2300      	movs	r3, #0
 800c982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4313      	orrs	r3, r2
 800c98e:	d039      	beq.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c996:	2b03      	cmp	r3, #3
 800c998:	d81c      	bhi.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800c9dd 	.word	0x0800c9dd
 800c9a4:	0800c9b1 	.word	0x0800c9b1
 800c9a8:	0800c9bf 	.word	0x0800c9bf
 800c9ac:	0800c9dd 	.word	0x0800c9dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9b0:	4b67      	ldr	r3, [pc, #412]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b4:	4a66      	ldr	r2, [pc, #408]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c9bc:	e00f      	b.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	2102      	movs	r1, #2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f001 ffd4 	bl	800e974 <RCCEx_PLL2_Config>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c9d2:	e004      	b.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c9da:	e000      	b.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d10a      	bne.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c9e6:	4b5a      	ldr	r3, [pc, #360]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ea:	f023 0103 	bic.w	r1, r3, #3
 800c9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9f4:	4a56      	ldr	r2, [pc, #344]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9f6:	430b      	orrs	r3, r1
 800c9f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c9fa:	e003      	b.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ca10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca14:	2300      	movs	r3, #0
 800ca16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4313      	orrs	r3, r2
 800ca22:	f000 809f 	beq.w	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca26:	4b4b      	ldr	r3, [pc, #300]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a4a      	ldr	r2, [pc, #296]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ca2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca32:	f7f8 f87d 	bl	8004b30 <HAL_GetTick>
 800ca36:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca3a:	e00b      	b.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca3c:	f7f8 f878 	bl	8004b30 <HAL_GetTick>
 800ca40:	4602      	mov	r2, r0
 800ca42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	2b64      	cmp	r3, #100	; 0x64
 800ca4a:	d903      	bls.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca52:	e005      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca54:	4b3f      	ldr	r3, [pc, #252]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0ed      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ca60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d179      	bne.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca74:	4053      	eors	r3, r2
 800ca76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d015      	beq.n	800caaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca7e:	4b34      	ldr	r3, [pc, #208]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca8a:	4b31      	ldr	r3, [pc, #196]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8e:	4a30      	ldr	r2, [pc, #192]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca94:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca96:	4b2e      	ldr	r3, [pc, #184]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a2d      	ldr	r2, [pc, #180]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caa0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800caa2:	4a2b      	ldr	r2, [pc, #172]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800caa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800caa8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800caaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab6:	d118      	bne.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab8:	f7f8 f83a 	bl	8004b30 <HAL_GetTick>
 800cabc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cac0:	e00d      	b.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cac2:	f7f8 f835 	bl	8004b30 <HAL_GetTick>
 800cac6:	4602      	mov	r2, r0
 800cac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800cacc:	1ad2      	subs	r2, r2, r3
 800cace:	f241 3388 	movw	r3, #5000	; 0x1388
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d903      	bls.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800cadc:	e005      	b.n	800caea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cade:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae2:	f003 0302 	and.w	r3, r3, #2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d0eb      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800caea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d129      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800caf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cafe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb02:	d10e      	bne.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800cb04:	4b12      	ldr	r3, [pc, #72]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb14:	091a      	lsrs	r2, r3, #4
 800cb16:	4b10      	ldr	r3, [pc, #64]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800cb18:	4013      	ands	r3, r2
 800cb1a:	4a0d      	ldr	r2, [pc, #52]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	6113      	str	r3, [r2, #16]
 800cb20:	e005      	b.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800cb22:	4b0b      	ldr	r3, [pc, #44]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	4a0a      	ldr	r2, [pc, #40]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cb2c:	6113      	str	r3, [r2, #16]
 800cb2e:	4b08      	ldr	r3, [pc, #32]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb3e:	4a04      	ldr	r2, [pc, #16]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cb40:	430b      	orrs	r3, r1
 800cb42:	6713      	str	r3, [r2, #112]	; 0x70
 800cb44:	e00e      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800cb4e:	e009      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800cb50:	58024400 	.word	0x58024400
 800cb54:	58024800 	.word	0x58024800
 800cb58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cb64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f002 0301 	and.w	r3, r2, #1
 800cb70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb74:	2300      	movs	r3, #0
 800cb76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4313      	orrs	r3, r2
 800cb82:	f000 8089 	beq.w	800cc98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8c:	2b28      	cmp	r3, #40	; 0x28
 800cb8e:	d86b      	bhi.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800cb90:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cc71 	.word	0x0800cc71
 800cb9c:	0800cc69 	.word	0x0800cc69
 800cba0:	0800cc69 	.word	0x0800cc69
 800cba4:	0800cc69 	.word	0x0800cc69
 800cba8:	0800cc69 	.word	0x0800cc69
 800cbac:	0800cc69 	.word	0x0800cc69
 800cbb0:	0800cc69 	.word	0x0800cc69
 800cbb4:	0800cc69 	.word	0x0800cc69
 800cbb8:	0800cc3d 	.word	0x0800cc3d
 800cbbc:	0800cc69 	.word	0x0800cc69
 800cbc0:	0800cc69 	.word	0x0800cc69
 800cbc4:	0800cc69 	.word	0x0800cc69
 800cbc8:	0800cc69 	.word	0x0800cc69
 800cbcc:	0800cc69 	.word	0x0800cc69
 800cbd0:	0800cc69 	.word	0x0800cc69
 800cbd4:	0800cc69 	.word	0x0800cc69
 800cbd8:	0800cc53 	.word	0x0800cc53
 800cbdc:	0800cc69 	.word	0x0800cc69
 800cbe0:	0800cc69 	.word	0x0800cc69
 800cbe4:	0800cc69 	.word	0x0800cc69
 800cbe8:	0800cc69 	.word	0x0800cc69
 800cbec:	0800cc69 	.word	0x0800cc69
 800cbf0:	0800cc69 	.word	0x0800cc69
 800cbf4:	0800cc69 	.word	0x0800cc69
 800cbf8:	0800cc71 	.word	0x0800cc71
 800cbfc:	0800cc69 	.word	0x0800cc69
 800cc00:	0800cc69 	.word	0x0800cc69
 800cc04:	0800cc69 	.word	0x0800cc69
 800cc08:	0800cc69 	.word	0x0800cc69
 800cc0c:	0800cc69 	.word	0x0800cc69
 800cc10:	0800cc69 	.word	0x0800cc69
 800cc14:	0800cc69 	.word	0x0800cc69
 800cc18:	0800cc71 	.word	0x0800cc71
 800cc1c:	0800cc69 	.word	0x0800cc69
 800cc20:	0800cc69 	.word	0x0800cc69
 800cc24:	0800cc69 	.word	0x0800cc69
 800cc28:	0800cc69 	.word	0x0800cc69
 800cc2c:	0800cc69 	.word	0x0800cc69
 800cc30:	0800cc69 	.word	0x0800cc69
 800cc34:	0800cc69 	.word	0x0800cc69
 800cc38:	0800cc71 	.word	0x0800cc71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc40:	3308      	adds	r3, #8
 800cc42:	2101      	movs	r1, #1
 800cc44:	4618      	mov	r0, r3
 800cc46:	f001 fe95 	bl	800e974 <RCCEx_PLL2_Config>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc50:	e00f      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc56:	3328      	adds	r3, #40	; 0x28
 800cc58:	2101      	movs	r1, #1
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f001 ff3c 	bl	800ead8 <RCCEx_PLL3_Config>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc66:	e004      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc6e:	e000      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cc70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10a      	bne.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cc7a:	4bbf      	ldr	r3, [pc, #764]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800cc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc88:	4abb      	ldr	r2, [pc, #748]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cc8a:	430b      	orrs	r3, r1
 800cc8c:	6553      	str	r3, [r2, #84]	; 0x54
 800cc8e:	e003      	b.n	800cc98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f002 0302 	and.w	r3, r2, #2
 800cca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ccae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	d041      	beq.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ccb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccbe:	2b05      	cmp	r3, #5
 800ccc0:	d824      	bhi.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800cd15 	.word	0x0800cd15
 800cccc:	0800cce1 	.word	0x0800cce1
 800ccd0:	0800ccf7 	.word	0x0800ccf7
 800ccd4:	0800cd15 	.word	0x0800cd15
 800ccd8:	0800cd15 	.word	0x0800cd15
 800ccdc:	0800cd15 	.word	0x0800cd15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce4:	3308      	adds	r3, #8
 800cce6:	2101      	movs	r1, #1
 800cce8:	4618      	mov	r0, r3
 800ccea:	f001 fe43 	bl	800e974 <RCCEx_PLL2_Config>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ccf4:	e00f      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccfa:	3328      	adds	r3, #40	; 0x28
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f001 feea 	bl	800ead8 <RCCEx_PLL3_Config>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd0a:	e004      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd12:	e000      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800cd14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cd1e:	4b96      	ldr	r3, [pc, #600]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd22:	f023 0107 	bic.w	r1, r3, #7
 800cd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd2c:	4a92      	ldr	r2, [pc, #584]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd2e:	430b      	orrs	r3, r1
 800cd30:	6553      	str	r3, [r2, #84]	; 0x54
 800cd32:	e003      	b.n	800cd3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f002 0304 	and.w	r3, r2, #4
 800cd48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	d044      	beq.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	d825      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800cd68:	a201      	add	r2, pc, #4	; (adr r2, 800cd70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800cd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6e:	bf00      	nop
 800cd70:	0800cdbd 	.word	0x0800cdbd
 800cd74:	0800cd89 	.word	0x0800cd89
 800cd78:	0800cd9f 	.word	0x0800cd9f
 800cd7c:	0800cdbd 	.word	0x0800cdbd
 800cd80:	0800cdbd 	.word	0x0800cdbd
 800cd84:	0800cdbd 	.word	0x0800cdbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	2101      	movs	r1, #1
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 fdef 	bl	800e974 <RCCEx_PLL2_Config>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cd9c:	e00f      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda2:	3328      	adds	r3, #40	; 0x28
 800cda4:	2101      	movs	r1, #1
 800cda6:	4618      	mov	r0, r3
 800cda8:	f001 fe96 	bl	800ead8 <RCCEx_PLL3_Config>
 800cdac:	4603      	mov	r3, r0
 800cdae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cdb2:	e004      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cdba:	e000      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800cdbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10b      	bne.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cdc6:	4b6c      	ldr	r3, [pc, #432]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cdc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdca:	f023 0107 	bic.w	r1, r3, #7
 800cdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdd6:	4a68      	ldr	r2, [pc, #416]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	6593      	str	r3, [r2, #88]	; 0x58
 800cddc:	e003      	b.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cde2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f002 0320 	and.w	r3, r2, #32
 800cdf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cdfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ce00:	460b      	mov	r3, r1
 800ce02:	4313      	orrs	r3, r2
 800ce04:	d055      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ce06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce12:	d033      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ce14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce18:	d82c      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce1e:	d02f      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ce20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce24:	d826      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce2a:	d02b      	beq.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ce2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce30:	d820      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce36:	d012      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ce38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce3c:	d81a      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d022      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ce42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce46:	d115      	bne.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce4c:	3308      	adds	r3, #8
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4618      	mov	r0, r3
 800ce52:	f001 fd8f 	bl	800e974 <RCCEx_PLL2_Config>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ce5c:	e015      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce62:	3328      	adds	r3, #40	; 0x28
 800ce64:	2102      	movs	r1, #2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f001 fe36 	bl	800ead8 <RCCEx_PLL3_Config>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ce72:	e00a      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce7a:	e006      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ce7c:	bf00      	nop
 800ce7e:	e004      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ce80:	bf00      	nop
 800ce82:	e002      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ce84:	bf00      	nop
 800ce86:	e000      	b.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800ce88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce92:	4b39      	ldr	r3, [pc, #228]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ce94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ce9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cea2:	4a35      	ldr	r2, [pc, #212]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cea4:	430b      	orrs	r3, r1
 800cea6:	6553      	str	r3, [r2, #84]	; 0x54
 800cea8:	e003      	b.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ceae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ceb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800cebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800cecc:	460b      	mov	r3, r1
 800cece:	4313      	orrs	r3, r2
 800ced0:	d058      	beq.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ced2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ced6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ceda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cede:	d033      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800cee0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cee4:	d82c      	bhi.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ceea:	d02f      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ceec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cef0:	d826      	bhi.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cef6:	d02b      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800cef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cefc:	d820      	bhi.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cefe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf02:	d012      	beq.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800cf04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf08:	d81a      	bhi.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d022      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800cf0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf12:	d115      	bne.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf18:	3308      	adds	r3, #8
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f001 fd29 	bl	800e974 <RCCEx_PLL2_Config>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf28:	e015      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf2e:	3328      	adds	r3, #40	; 0x28
 800cf30:	2102      	movs	r1, #2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f001 fdd0 	bl	800ead8 <RCCEx_PLL3_Config>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf3e:	e00a      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf46:	e006      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cf48:	bf00      	nop
 800cf4a:	e004      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cf4c:	bf00      	nop
 800cf4e:	e002      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cf50:	bf00      	nop
 800cf52:	e000      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800cf54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10e      	bne.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf5e:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800cf66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf6e:	4a02      	ldr	r2, [pc, #8]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf70:	430b      	orrs	r3, r1
 800cf72:	6593      	str	r3, [r2, #88]	; 0x58
 800cf74:	e006      	b.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800cf76:	bf00      	nop
 800cf78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cf84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800cf90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf94:	2300      	movs	r3, #0
 800cf96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	d055      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cfac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cfb0:	d033      	beq.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800cfb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cfb6:	d82c      	bhi.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cfb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfbc:	d02f      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800cfbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfc2:	d826      	bhi.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cfc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cfc8:	d02b      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800cfca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cfce:	d820      	bhi.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cfd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfd4:	d012      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800cfd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfda:	d81a      	bhi.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d022      	beq.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800cfe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfe4:	d115      	bne.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfea:	3308      	adds	r3, #8
 800cfec:	2100      	movs	r1, #0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f001 fcc0 	bl	800e974 <RCCEx_PLL2_Config>
 800cff4:	4603      	mov	r3, r0
 800cff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cffa:	e015      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d000:	3328      	adds	r3, #40	; 0x28
 800d002:	2102      	movs	r1, #2
 800d004:	4618      	mov	r0, r3
 800d006:	f001 fd67 	bl	800ead8 <RCCEx_PLL3_Config>
 800d00a:	4603      	mov	r3, r0
 800d00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d010:	e00a      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d018:	e006      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d01a:	bf00      	nop
 800d01c:	e004      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d01e:	bf00      	nop
 800d020:	e002      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d022:	bf00      	nop
 800d024:	e000      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10b      	bne.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d030:	4ba1      	ldr	r3, [pc, #644]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d034:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d03c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d040:	4a9d      	ldr	r2, [pc, #628]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d042:	430b      	orrs	r3, r1
 800d044:	6593      	str	r3, [r2, #88]	; 0x58
 800d046:	e003      	b.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d04c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f002 0308 	and.w	r3, r2, #8
 800d05c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d060:	2300      	movs	r3, #0
 800d062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d06a:	460b      	mov	r3, r1
 800d06c:	4313      	orrs	r3, r2
 800d06e:	d01e      	beq.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d07c:	d10c      	bne.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d082:	3328      	adds	r3, #40	; 0x28
 800d084:	2102      	movs	r1, #2
 800d086:	4618      	mov	r0, r3
 800d088:	f001 fd26 	bl	800ead8 <RCCEx_PLL3_Config>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d098:	4b87      	ldr	r3, [pc, #540]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0a8:	4a83      	ldr	r2, [pc, #524]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0aa:	430b      	orrs	r3, r1
 800d0ac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f002 0310 	and.w	r3, r2, #16
 800d0ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d0c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	d01e      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0da:	d10c      	bne.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0e0:	3328      	adds	r3, #40	; 0x28
 800d0e2:	2102      	movs	r1, #2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f001 fcf7 	bl	800ead8 <RCCEx_PLL3_Config>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d0f6:	4b70      	ldr	r3, [pc, #448]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d106:	4a6c      	ldr	r2, [pc, #432]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d108:	430b      	orrs	r3, r1
 800d10a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d11c:	2300      	movs	r3, #0
 800d11e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d126:	460b      	mov	r3, r1
 800d128:	4313      	orrs	r3, r2
 800d12a:	d03e      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d138:	d022      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d13a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d13e:	d81b      	bhi.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d003      	beq.n	800d14c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d148:	d00b      	beq.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d14a:	e015      	b.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d150:	3308      	adds	r3, #8
 800d152:	2100      	movs	r1, #0
 800d154:	4618      	mov	r0, r3
 800d156:	f001 fc0d 	bl	800e974 <RCCEx_PLL2_Config>
 800d15a:	4603      	mov	r3, r0
 800d15c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d160:	e00f      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d166:	3328      	adds	r3, #40	; 0x28
 800d168:	2102      	movs	r1, #2
 800d16a:	4618      	mov	r0, r3
 800d16c:	f001 fcb4 	bl	800ead8 <RCCEx_PLL3_Config>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d176:	e004      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d17e:	e000      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d180:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10b      	bne.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d18a:	4b4b      	ldr	r3, [pc, #300]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d19a:	4a47      	ldr	r2, [pc, #284]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d19c:	430b      	orrs	r3, r1
 800d19e:	6593      	str	r3, [r2, #88]	; 0x58
 800d1a0:	e003      	b.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d1b6:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d1bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	d03b      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d1d2:	d01f      	beq.n	800d214 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d1d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d1d8:	d818      	bhi.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d1da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1de:	d003      	beq.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d1e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1e4:	d007      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d1e6:	e011      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1e8:	4b33      	ldr	r3, [pc, #204]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ec:	4a32      	ldr	r2, [pc, #200]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d1f4:	e00f      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1fa:	3328      	adds	r3, #40	; 0x28
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	4618      	mov	r0, r3
 800d200:	f001 fc6a 	bl	800ead8 <RCCEx_PLL3_Config>
 800d204:	4603      	mov	r3, r0
 800d206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d20a:	e004      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d212:	e000      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d214:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10b      	bne.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d21e:	4b26      	ldr	r3, [pc, #152]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d222:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d22e:	4a22      	ldr	r2, [pc, #136]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d230:	430b      	orrs	r3, r1
 800d232:	6553      	str	r3, [r2, #84]	; 0x54
 800d234:	e003      	b.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d23a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d24a:	673b      	str	r3, [r7, #112]	; 0x70
 800d24c:	2300      	movs	r3, #0
 800d24e:	677b      	str	r3, [r7, #116]	; 0x74
 800d250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d254:	460b      	mov	r3, r1
 800d256:	4313      	orrs	r3, r2
 800d258:	d034      	beq.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d260:	2b00      	cmp	r3, #0
 800d262:	d003      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d268:	d007      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d26a:	e011      	b.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d26c:	4b12      	ldr	r3, [pc, #72]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	4a11      	ldr	r2, [pc, #68]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d278:	e00e      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d27e:	3308      	adds	r3, #8
 800d280:	2102      	movs	r1, #2
 800d282:	4618      	mov	r0, r3
 800d284:	f001 fb76 	bl	800e974 <RCCEx_PLL2_Config>
 800d288:	4603      	mov	r3, r0
 800d28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d28e:	e003      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d296:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10d      	bne.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ae:	4a02      	ldr	r2, [pc, #8]	; (800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d2b4:	e006      	b.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d2b6:	bf00      	nop
 800d2b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d2d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	d00c      	beq.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2e4:	3328      	adds	r3, #40	; 0x28
 800d2e6:	2102      	movs	r1, #2
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f001 fbf5 	bl	800ead8 <RCCEx_PLL3_Config>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d306:	663b      	str	r3, [r7, #96]	; 0x60
 800d308:	2300      	movs	r3, #0
 800d30a:	667b      	str	r3, [r7, #100]	; 0x64
 800d30c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d310:	460b      	mov	r3, r1
 800d312:	4313      	orrs	r3, r2
 800d314:	d038      	beq.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d31e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d322:	d018      	beq.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d328:	d811      	bhi.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d32a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d32e:	d014      	beq.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d334:	d80b      	bhi.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d336:	2b00      	cmp	r3, #0
 800d338:	d011      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d33e:	d106      	bne.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d340:	4bc3      	ldr	r3, [pc, #780]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	4ac2      	ldr	r2, [pc, #776]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d34a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d34c:	e008      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d354:	e004      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d356:	bf00      	nop
 800d358:	e002      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d35a:	bf00      	nop
 800d35c:	e000      	b.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d35e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10b      	bne.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d368:	4bb9      	ldr	r3, [pc, #740]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d36a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d36c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d378:	4ab5      	ldr	r2, [pc, #724]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d37a:	430b      	orrs	r3, r1
 800d37c:	6553      	str	r3, [r2, #84]	; 0x54
 800d37e:	e003      	b.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d390:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d394:	65bb      	str	r3, [r7, #88]	; 0x58
 800d396:	2300      	movs	r3, #0
 800d398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d39a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	d009      	beq.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d3a4:	4baa      	ldr	r3, [pc, #680]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b2:	4aa7      	ldr	r2, [pc, #668]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d3c4:	653b      	str	r3, [r7, #80]	; 0x50
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	657b      	str	r3, [r7, #84]	; 0x54
 800d3ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	d00a      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d3d4:	4b9e      	ldr	r3, [pc, #632]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d3e4:	4a9a      	ldr	r2, [pc, #616]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3e6:	430b      	orrs	r3, r1
 800d3e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d3f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d400:	460b      	mov	r3, r1
 800d402:	4313      	orrs	r3, r2
 800d404:	d009      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d406:	4b92      	ldr	r3, [pc, #584]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d414:	4a8e      	ldr	r2, [pc, #568]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d416:	430b      	orrs	r3, r1
 800d418:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d426:	643b      	str	r3, [r7, #64]	; 0x40
 800d428:	2300      	movs	r3, #0
 800d42a:	647b      	str	r3, [r7, #68]	; 0x44
 800d42c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d430:	460b      	mov	r3, r1
 800d432:	4313      	orrs	r3, r2
 800d434:	d00e      	beq.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d436:	4b86      	ldr	r3, [pc, #536]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	4a85      	ldr	r2, [pc, #532]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d440:	6113      	str	r3, [r2, #16]
 800d442:	4b83      	ldr	r3, [pc, #524]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d444:	6919      	ldr	r1, [r3, #16]
 800d446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d44a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d44e:	4a80      	ldr	r2, [pc, #512]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d450:	430b      	orrs	r3, r1
 800d452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d460:	63bb      	str	r3, [r7, #56]	; 0x38
 800d462:	2300      	movs	r3, #0
 800d464:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d46a:	460b      	mov	r3, r1
 800d46c:	4313      	orrs	r3, r2
 800d46e:	d009      	beq.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d470:	4b77      	ldr	r3, [pc, #476]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d474:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47e:	4a74      	ldr	r2, [pc, #464]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d480:	430b      	orrs	r3, r1
 800d482:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d490:	633b      	str	r3, [r7, #48]	; 0x30
 800d492:	2300      	movs	r3, #0
 800d494:	637b      	str	r3, [r7, #52]	; 0x34
 800d496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d49a:	460b      	mov	r3, r1
 800d49c:	4313      	orrs	r3, r2
 800d49e:	d00a      	beq.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d4a0:	4b6b      	ldr	r3, [pc, #428]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d4a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4b0:	4a67      	ldr	r2, [pc, #412]	; (800d650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d4b2:	430b      	orrs	r3, r1
 800d4b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	2100      	movs	r1, #0
 800d4c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	d011      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4d6:	3308      	adds	r3, #8
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f001 fa4a 	bl	800e974 <RCCEx_PLL2_Config>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d4e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	2100      	movs	r1, #0
 800d500:	6239      	str	r1, [r7, #32]
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
 800d508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d50c:	460b      	mov	r3, r1
 800d50e:	4313      	orrs	r3, r2
 800d510:	d011      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d516:	3308      	adds	r3, #8
 800d518:	2101      	movs	r1, #1
 800d51a:	4618      	mov	r0, r3
 800d51c:	f001 fa2a 	bl	800e974 <RCCEx_PLL2_Config>
 800d520:	4603      	mov	r3, r0
 800d522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d52e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	2100      	movs	r1, #0
 800d540:	61b9      	str	r1, [r7, #24]
 800d542:	f003 0304 	and.w	r3, r3, #4
 800d546:	61fb      	str	r3, [r7, #28]
 800d548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d54c:	460b      	mov	r3, r1
 800d54e:	4313      	orrs	r3, r2
 800d550:	d011      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d556:	3308      	adds	r3, #8
 800d558:	2102      	movs	r1, #2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f001 fa0a 	bl	800e974 <RCCEx_PLL2_Config>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	2100      	movs	r1, #0
 800d580:	6139      	str	r1, [r7, #16]
 800d582:	f003 0308 	and.w	r3, r3, #8
 800d586:	617b      	str	r3, [r7, #20]
 800d588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d58c:	460b      	mov	r3, r1
 800d58e:	4313      	orrs	r3, r2
 800d590:	d011      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d596:	3328      	adds	r3, #40	; 0x28
 800d598:	2100      	movs	r1, #0
 800d59a:	4618      	mov	r0, r3
 800d59c:	f001 fa9c 	bl	800ead8 <RCCEx_PLL3_Config>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800d5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	2100      	movs	r1, #0
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	f003 0310 	and.w	r3, r3, #16
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	d011      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5d6:	3328      	adds	r3, #40	; 0x28
 800d5d8:	2101      	movs	r1, #1
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 fa7c 	bl	800ead8 <RCCEx_PLL3_Config>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	2100      	movs	r1, #0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	f003 0320 	and.w	r3, r3, #32
 800d606:	607b      	str	r3, [r7, #4]
 800d608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d60c:	460b      	mov	r3, r1
 800d60e:	4313      	orrs	r3, r2
 800d610:	d011      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d616:	3328      	adds	r3, #40	; 0x28
 800d618:	2102      	movs	r1, #2
 800d61a:	4618      	mov	r0, r3
 800d61c:	f001 fa5c 	bl	800ead8 <RCCEx_PLL3_Config>
 800d620:	4603      	mov	r3, r0
 800d622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d62e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800d636:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	e000      	b.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
}
 800d644:	4618      	mov	r0, r3
 800d646:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d64a:	46bd      	mov	sp, r7
 800d64c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d650:	58024400 	.word	0x58024400

0800d654 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b090      	sub	sp, #64	; 0x40
 800d658:	af00      	add	r7, sp, #0
 800d65a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d662:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800d666:	430b      	orrs	r3, r1
 800d668:	f040 8094 	bne.w	800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d66c:	4b9e      	ldr	r3, [pc, #632]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d670:	f003 0307 	and.w	r3, r3, #7
 800d674:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2b04      	cmp	r3, #4
 800d67a:	f200 8087 	bhi.w	800d78c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d699 	.word	0x0800d699
 800d688:	0800d6c1 	.word	0x0800d6c1
 800d68c:	0800d6e9 	.word	0x0800d6e9
 800d690:	0800d785 	.word	0x0800d785
 800d694:	0800d711 	.word	0x0800d711
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d698:	4b93      	ldr	r3, [pc, #588]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6a4:	d108      	bne.n	800d6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d6a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f001 f810 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6b4:	f000 bd45 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6bc:	f000 bd41 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6c0:	4b89      	ldr	r3, [pc, #548]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d6cc:	d108      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6ce:	f107 0318 	add.w	r3, r7, #24
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fd54 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6dc:	f000 bd31 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6e4:	f000 bd2d 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6e8:	4b7f      	ldr	r3, [pc, #508]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6f4:	d108      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6f6:	f107 030c 	add.w	r3, r7, #12
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f000 fe94 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d704:	f000 bd1d 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d70c:	f000 bd19 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d710:	4b75      	ldr	r3, [pc, #468]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d718:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d71a:	4b73      	ldr	r3, [pc, #460]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 0304 	and.w	r3, r3, #4
 800d722:	2b04      	cmp	r3, #4
 800d724:	d10c      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d109      	bne.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d72c:	4b6e      	ldr	r3, [pc, #440]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	08db      	lsrs	r3, r3, #3
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	4a6d      	ldr	r2, [pc, #436]	; (800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d738:	fa22 f303 	lsr.w	r3, r2, r3
 800d73c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d73e:	e01f      	b.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d740:	4b69      	ldr	r3, [pc, #420]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d74c:	d106      	bne.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d754:	d102      	bne.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d756:	4b66      	ldr	r3, [pc, #408]	; (800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d75a:	e011      	b.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d75c:	4b62      	ldr	r3, [pc, #392]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d768:	d106      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d770:	d102      	bne.n	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d772:	4b60      	ldr	r3, [pc, #384]	; (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d774:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d776:	e003      	b.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d77c:	f000 bce1 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d780:	f000 bcdf 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d784:	4b5c      	ldr	r3, [pc, #368]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d788:	f000 bcdb 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d790:	f000 bcd7 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d798:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800d79c:	430b      	orrs	r3, r1
 800d79e:	f040 80ad 	bne.w	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d7a2:	4b51      	ldr	r3, [pc, #324]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d7aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b2:	d056      	beq.n	800d862 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7ba:	f200 8090 	bhi.w	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	2bc0      	cmp	r3, #192	; 0xc0
 800d7c2:	f000 8088 	beq.w	800d8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	2bc0      	cmp	r3, #192	; 0xc0
 800d7ca:	f200 8088 	bhi.w	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	2b80      	cmp	r3, #128	; 0x80
 800d7d2:	d032      	beq.n	800d83a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2b80      	cmp	r3, #128	; 0x80
 800d7d8:	f200 8081 	bhi.w	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	2b40      	cmp	r3, #64	; 0x40
 800d7e6:	d014      	beq.n	800d812 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d7e8:	e079      	b.n	800d8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d7ea:	4b3f      	ldr	r3, [pc, #252]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d7f6:	d108      	bne.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 ff67 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d806:	f000 bc9c 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d80e:	f000 bc98 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d812:	4b35      	ldr	r3, [pc, #212]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d81a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d81e:	d108      	bne.n	800d832 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d820:	f107 0318 	add.w	r3, r7, #24
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fcab 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d82e:	f000 bc88 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d836:	f000 bc84 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d83a:	4b2b      	ldr	r3, [pc, #172]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d846:	d108      	bne.n	800d85a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d848:	f107 030c 	add.w	r3, r7, #12
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fdeb 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d856:	f000 bc74 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d85e:	f000 bc70 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d862:	4b21      	ldr	r3, [pc, #132]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d86a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d86c:	4b1e      	ldr	r3, [pc, #120]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 0304 	and.w	r3, r3, #4
 800d874:	2b04      	cmp	r3, #4
 800d876:	d10c      	bne.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800d878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d109      	bne.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d87e:	4b1a      	ldr	r3, [pc, #104]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	08db      	lsrs	r3, r3, #3
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	4a18      	ldr	r2, [pc, #96]	; (800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d88a:	fa22 f303 	lsr.w	r3, r2, r3
 800d88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d890:	e01f      	b.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d892:	4b15      	ldr	r3, [pc, #84]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d89e:	d106      	bne.n	800d8ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8a6:	d102      	bne.n	800d8ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d8a8:	4b11      	ldr	r3, [pc, #68]	; (800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8ac:	e011      	b.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d8ae:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d8ba:	d106      	bne.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8c2:	d102      	bne.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d8c4:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8c8:	e003      	b.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d8ce:	f000 bc38 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d8d2:	f000 bc36 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d8d6:	4b08      	ldr	r3, [pc, #32]	; (800d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8da:	f000 bc32 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8e2:	f000 bc2e 	b.w	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d8e6:	bf00      	nop
 800d8e8:	58024400 	.word	0x58024400
 800d8ec:	03d09000 	.word	0x03d09000
 800d8f0:	003d0900 	.word	0x003d0900
 800d8f4:	017d7840 	.word	0x017d7840
 800d8f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d900:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800d904:	430b      	orrs	r3, r1
 800d906:	f040 809c 	bne.w	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d90a:	4b9e      	ldr	r3, [pc, #632]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d90e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d912:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d91a:	d054      	beq.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d922:	f200 808b 	bhi.w	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d92c:	f000 8083 	beq.w	800da36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d936:	f200 8081 	bhi.w	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d940:	d02f      	beq.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d948:	d878      	bhi.n	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d956:	d012      	beq.n	800d97e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d958:	e070      	b.n	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d95a:	4b8a      	ldr	r3, [pc, #552]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d966:	d107      	bne.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 feaf 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d976:	e3e4      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d978:	2300      	movs	r3, #0
 800d97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d97c:	e3e1      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d97e:	4b81      	ldr	r3, [pc, #516]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d98a:	d107      	bne.n	800d99c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d98c:	f107 0318 	add.w	r3, r7, #24
 800d990:	4618      	mov	r0, r3
 800d992:	f000 fbf5 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d99a:	e3d2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d99c:	2300      	movs	r3, #0
 800d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9a0:	e3cf      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d9a2:	4b78      	ldr	r3, [pc, #480]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9ae:	d107      	bne.n	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9b0:	f107 030c 	add.w	r3, r7, #12
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fd37 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9be:	e3c0      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9c4:	e3bd      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d9c6:	4b6f      	ldr	r3, [pc, #444]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d9ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d9d0:	4b6c      	ldr	r3, [pc, #432]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f003 0304 	and.w	r3, r3, #4
 800d9d8:	2b04      	cmp	r3, #4
 800d9da:	d10c      	bne.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800d9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d109      	bne.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9e2:	4b68      	ldr	r3, [pc, #416]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	08db      	lsrs	r3, r3, #3
 800d9e8:	f003 0303 	and.w	r3, r3, #3
 800d9ec:	4a66      	ldr	r2, [pc, #408]	; (800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9f4:	e01e      	b.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d9f6:	4b63      	ldr	r3, [pc, #396]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da02:	d106      	bne.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da0a:	d102      	bne.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800da0c:	4b5f      	ldr	r3, [pc, #380]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da10:	e010      	b.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da12:	4b5c      	ldr	r3, [pc, #368]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da1e:	d106      	bne.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800da20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da26:	d102      	bne.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800da28:	4b59      	ldr	r3, [pc, #356]	; (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da2c:	e002      	b.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800da32:	e386      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800da34:	e385      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800da36:	4b57      	ldr	r3, [pc, #348]	; (800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800da38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da3a:	e382      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da40:	e37f      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800da42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da46:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800da4a:	430b      	orrs	r3, r1
 800da4c:	f040 80a7 	bne.w	800db9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800da50:	4b4c      	ldr	r3, [pc, #304]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800da58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da60:	d055      	beq.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da68:	f200 8096 	bhi.w	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800da72:	f000 8084 	beq.w	800db7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800da7c:	f200 808c 	bhi.w	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da86:	d030      	beq.n	800daea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800da88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da8e:	f200 8083 	bhi.w	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	2b00      	cmp	r3, #0
 800da96:	d004      	beq.n	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da9e:	d012      	beq.n	800dac6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800daa0:	e07a      	b.n	800db98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800daa2:	4b38      	ldr	r3, [pc, #224]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800daae:	d107      	bne.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fe0b 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dabe:	e340      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dac4:	e33d      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dac6:	4b2f      	ldr	r3, [pc, #188]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dad2:	d107      	bne.n	800dae4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dad4:	f107 0318 	add.w	r3, r7, #24
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 fb51 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dae2:	e32e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae8:	e32b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800daea:	4b26      	ldr	r3, [pc, #152]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800daf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800daf6:	d107      	bne.n	800db08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daf8:	f107 030c 	add.w	r3, r7, #12
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 fc93 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db06:	e31c      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db0c:	e319      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800db16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db18:	4b1a      	ldr	r3, [pc, #104]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 0304 	and.w	r3, r3, #4
 800db20:	2b04      	cmp	r3, #4
 800db22:	d10c      	bne.n	800db3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800db24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db26:	2b00      	cmp	r3, #0
 800db28:	d109      	bne.n	800db3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db2a:	4b16      	ldr	r3, [pc, #88]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	08db      	lsrs	r3, r3, #3
 800db30:	f003 0303 	and.w	r3, r3, #3
 800db34:	4a14      	ldr	r2, [pc, #80]	; (800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800db36:	fa22 f303 	lsr.w	r3, r2, r3
 800db3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db3c:	e01e      	b.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db3e:	4b11      	ldr	r3, [pc, #68]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db4a:	d106      	bne.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800db4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db52:	d102      	bne.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db54:	4b0d      	ldr	r3, [pc, #52]	; (800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db58:	e010      	b.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db5a:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db66:	d106      	bne.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800db68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db6e:	d102      	bne.n	800db76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800db72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db74:	e002      	b.n	800db7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800db7a:	e2e2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800db7c:	e2e1      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db7e:	4b05      	ldr	r3, [pc, #20]	; (800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800db80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db82:	e2de      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800db84:	58024400 	.word	0x58024400
 800db88:	03d09000 	.word	0x03d09000
 800db8c:	003d0900 	.word	0x003d0900
 800db90:	017d7840 	.word	0x017d7840
 800db94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db9c:	e2d1      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800db9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800dba6:	430b      	orrs	r3, r1
 800dba8:	f040 809c 	bne.w	800dce4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800dbac:	4b93      	ldr	r3, [pc, #588]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800dbb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbbc:	d054      	beq.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800dbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbc4:	f200 808b 	bhi.w	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dbce:	f000 8083 	beq.w	800dcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dbd8:	f200 8081 	bhi.w	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbe2:	d02f      	beq.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbea:	d878      	bhi.n	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbf8:	d012      	beq.n	800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800dbfa:	e070      	b.n	800dcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbfc:	4b7f      	ldr	r3, [pc, #508]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc08:	d107      	bne.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 fd5e 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc18:	e293      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc1e:	e290      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc20:	4b76      	ldr	r3, [pc, #472]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc2c:	d107      	bne.n	800dc3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc2e:	f107 0318 	add.w	r3, r7, #24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 faa4 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc3c:	e281      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc42:	e27e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc44:	4b6d      	ldr	r3, [pc, #436]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc50:	d107      	bne.n	800dc62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc52:	f107 030c 	add.w	r3, r7, #12
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fbe6 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc60:	e26f      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc66:	e26c      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc68:	4b64      	ldr	r3, [pc, #400]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dc70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc72:	4b62      	ldr	r3, [pc, #392]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 0304 	and.w	r3, r3, #4
 800dc7a:	2b04      	cmp	r3, #4
 800dc7c:	d10c      	bne.n	800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800dc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d109      	bne.n	800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc84:	4b5d      	ldr	r3, [pc, #372]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	08db      	lsrs	r3, r3, #3
 800dc8a:	f003 0303 	and.w	r3, r3, #3
 800dc8e:	4a5c      	ldr	r2, [pc, #368]	; (800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800dc90:	fa22 f303 	lsr.w	r3, r2, r3
 800dc94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc96:	e01e      	b.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc98:	4b58      	ldr	r3, [pc, #352]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dca4:	d106      	bne.n	800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800dca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcac:	d102      	bne.n	800dcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dcae:	4b55      	ldr	r3, [pc, #340]	; (800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800dcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcb2:	e010      	b.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dcb4:	4b51      	ldr	r3, [pc, #324]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dcc0:	d106      	bne.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc8:	d102      	bne.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dcca:	4b4f      	ldr	r3, [pc, #316]	; (800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800dccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcce:	e002      	b.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dcd4:	e235      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dcd6:	e234      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dcd8:	4b4c      	ldr	r3, [pc, #304]	; (800de0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800dcda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcdc:	e231      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dce2:	e22e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800dce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dce8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800dcec:	430b      	orrs	r3, r1
 800dcee:	f040 808f 	bne.w	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dcf2:	4b42      	ldr	r3, [pc, #264]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dcfa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800dcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd02:	d06b      	beq.n	800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd0a:	d874      	bhi.n	800ddf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd12:	d056      	beq.n	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800dd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd1a:	d86c      	bhi.n	800ddf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd22:	d03b      	beq.n	800dd9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800dd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd2a:	d864      	bhi.n	800ddf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd32:	d021      	beq.n	800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800dd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd3a:	d85c      	bhi.n	800ddf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d004      	beq.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd48:	d004      	beq.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800dd4a:	e054      	b.n	800ddf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800dd4c:	f7fe fa4c 	bl	800c1e8 <HAL_RCC_GetPCLK1Freq>
 800dd50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd52:	e1f6      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd54:	4b29      	ldr	r3, [pc, #164]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd60:	d107      	bne.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd62:	f107 0318 	add.w	r3, r7, #24
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 fa0a 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd70:	e1e7      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd76:	e1e4      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd78:	4b20      	ldr	r3, [pc, #128]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd84:	d107      	bne.n	800dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd86:	f107 030c 	add.w	r3, r7, #12
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f000 fb4c 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd94:	e1d5      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd9a:	e1d2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dd9c:	4b17      	ldr	r3, [pc, #92]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d109      	bne.n	800ddbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dda8:	4b14      	ldr	r3, [pc, #80]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	08db      	lsrs	r3, r3, #3
 800ddae:	f003 0303 	and.w	r3, r3, #3
 800ddb2:	4a13      	ldr	r2, [pc, #76]	; (800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ddb4:	fa22 f303 	lsr.w	r3, r2, r3
 800ddb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddba:	e1c2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddc0:	e1bf      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddce:	d102      	bne.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	; (800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ddd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddd4:	e1b5      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddda:	e1b2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dddc:	4b07      	ldr	r3, [pc, #28]	; (800ddfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dde4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dde8:	d102      	bne.n	800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ddec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddee:	e1a8      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddf4:	e1a5      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddfa:	e1a2      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ddfc:	58024400 	.word	0x58024400
 800de00:	03d09000 	.word	0x03d09000
 800de04:	003d0900 	.word	0x003d0900
 800de08:	017d7840 	.word	0x017d7840
 800de0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800de10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de14:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800de18:	430b      	orrs	r3, r1
 800de1a:	d173      	bne.n	800df04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800de1c:	4b9c      	ldr	r3, [pc, #624]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800de24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800de26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de2c:	d02f      	beq.n	800de8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de34:	d863      	bhi.n	800defe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800de36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de42:	d012      	beq.n	800de6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800de44:	e05b      	b.n	800defe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de46:	4b92      	ldr	r3, [pc, #584]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de52:	d107      	bne.n	800de64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de54:	f107 0318 	add.w	r3, r7, #24
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 f991 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de62:	e16e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de68:	e16b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de6a:	4b89      	ldr	r3, [pc, #548]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de76:	d107      	bne.n	800de88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de78:	f107 030c 	add.w	r3, r7, #12
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 fad3 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de86:	e15c      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de8c:	e159      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de8e:	4b80      	ldr	r3, [pc, #512]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de98:	4b7d      	ldr	r3, [pc, #500]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b04      	cmp	r3, #4
 800dea2:	d10c      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800dea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d109      	bne.n	800debe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800deaa:	4b79      	ldr	r3, [pc, #484]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	08db      	lsrs	r3, r3, #3
 800deb0:	f003 0303 	and.w	r3, r3, #3
 800deb4:	4a77      	ldr	r2, [pc, #476]	; (800e094 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800deb6:	fa22 f303 	lsr.w	r3, r2, r3
 800deba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800debc:	e01e      	b.n	800defc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800debe:	4b74      	ldr	r3, [pc, #464]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deca:	d106      	bne.n	800deda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800decc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ded2:	d102      	bne.n	800deda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ded4:	4b70      	ldr	r3, [pc, #448]	; (800e098 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ded6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ded8:	e010      	b.n	800defc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800deda:	4b6d      	ldr	r3, [pc, #436]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dee6:	d106      	bne.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800dee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deee:	d102      	bne.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800def0:	4b6a      	ldr	r3, [pc, #424]	; (800e09c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800def4:	e002      	b.n	800defc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800defa:	e122      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800defc:	e121      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df02:	e11e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800df04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df08:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800df0c:	430b      	orrs	r3, r1
 800df0e:	d133      	bne.n	800df78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800df10:	4b5f      	ldr	r3, [pc, #380]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d004      	beq.n	800df2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df26:	d012      	beq.n	800df4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800df28:	e023      	b.n	800df72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df2a:	4b59      	ldr	r3, [pc, #356]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df36:	d107      	bne.n	800df48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 fbc7 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df46:	e0fc      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4c:	e0f9      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df4e:	4b50      	ldr	r3, [pc, #320]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df5a:	d107      	bne.n	800df6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df5c:	f107 0318 	add.w	r3, r7, #24
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f90d 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df6a:	e0ea      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df6c:	2300      	movs	r3, #0
 800df6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df70:	e0e7      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df76:	e0e4      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800df78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df7c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800df80:	430b      	orrs	r3, r1
 800df82:	f040 808d 	bne.w	800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800df86:	4b42      	ldr	r3, [pc, #264]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800df8e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df96:	d06b      	beq.n	800e070 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df9e:	d874      	bhi.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfa6:	d056      	beq.n	800e056 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfae:	d86c      	bhi.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dfb6:	d03b      	beq.n	800e030 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dfbe:	d864      	bhi.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfc6:	d021      	beq.n	800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800dfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfce:	d85c      	bhi.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d004      	beq.n	800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfdc:	d004      	beq.n	800dfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800dfde:	e054      	b.n	800e08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800dfe0:	f000 f8b8 	bl	800e154 <HAL_RCCEx_GetD3PCLK1Freq>
 800dfe4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dfe6:	e0ac      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dfe8:	4b29      	ldr	r3, [pc, #164]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dff4:	d107      	bne.n	800e006 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dff6:	f107 0318 	add.w	r3, r7, #24
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 f8c0 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e004:	e09d      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e006:	2300      	movs	r3, #0
 800e008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e00a:	e09a      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e00c:	4b20      	ldr	r3, [pc, #128]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e018:	d107      	bne.n	800e02a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e01a:	f107 030c 	add.w	r3, r7, #12
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fa02 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e028:	e08b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e02e:	e088      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f003 0304 	and.w	r3, r3, #4
 800e038:	2b04      	cmp	r3, #4
 800e03a:	d109      	bne.n	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e03c:	4b14      	ldr	r3, [pc, #80]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	08db      	lsrs	r3, r3, #3
 800e042:	f003 0303 	and.w	r3, r3, #3
 800e046:	4a13      	ldr	r2, [pc, #76]	; (800e094 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e048:	fa22 f303 	lsr.w	r3, r2, r3
 800e04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e04e:	e078      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e054:	e075      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e056:	4b0e      	ldr	r3, [pc, #56]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e062:	d102      	bne.n	800e06a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e064:	4b0c      	ldr	r3, [pc, #48]	; (800e098 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e068:	e06b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06e:	e068      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e070:	4b07      	ldr	r3, [pc, #28]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e07c:	d102      	bne.n	800e084 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e082:	e05e      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e088:	e05b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e08e:	e058      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e090:	58024400 	.word	0x58024400
 800e094:	03d09000 	.word	0x03d09000
 800e098:	003d0900 	.word	0x003d0900
 800e09c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e0a8:	430b      	orrs	r3, r1
 800e0aa:	d148      	bne.n	800e13e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e0ac:	4b27      	ldr	r3, [pc, #156]	; (800e14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e0b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0bc:	d02a      	beq.n	800e114 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0c4:	d838      	bhi.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d004      	beq.n	800e0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0d2:	d00d      	beq.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e0d4:	e030      	b.n	800e138 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e0d6:	4b1d      	ldr	r3, [pc, #116]	; (800e14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0e2:	d102      	bne.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e0e4:	4b1a      	ldr	r3, [pc, #104]	; (800e150 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e8:	e02b      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ee:	e028      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e0f0:	4b16      	ldr	r3, [pc, #88]	; (800e14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0fc:	d107      	bne.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e102:	4618      	mov	r0, r3
 800e104:	f000 fae4 	bl	800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e10c:	e019      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e112:	e016      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e114:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e11c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e120:	d107      	bne.n	800e132 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e122:	f107 0318 	add.w	r3, r7, #24
 800e126:	4618      	mov	r0, r3
 800e128:	f000 f82a 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e130:	e007      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e136:	e004      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13c:	e001      	b.n	800e142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e144:	4618      	mov	r0, r3
 800e146:	3740      	adds	r7, #64	; 0x40
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	58024400 	.word	0x58024400
 800e150:	017d7840 	.word	0x017d7840

0800e154 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e158:	f7fe f816 	bl	800c188 <HAL_RCC_GetHCLKFreq>
 800e15c:	4602      	mov	r2, r0
 800e15e:	4b06      	ldr	r3, [pc, #24]	; (800e178 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	091b      	lsrs	r3, r3, #4
 800e164:	f003 0307 	and.w	r3, r3, #7
 800e168:	4904      	ldr	r1, [pc, #16]	; (800e17c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e16a:	5ccb      	ldrb	r3, [r1, r3]
 800e16c:	f003 031f 	and.w	r3, r3, #31
 800e170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e174:	4618      	mov	r0, r3
 800e176:	bd80      	pop	{r7, pc}
 800e178:	58024400 	.word	0x58024400
 800e17c:	0801925c 	.word	0x0801925c

0800e180 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e180:	b480      	push	{r7}
 800e182:	b089      	sub	sp, #36	; 0x24
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e188:	4ba1      	ldr	r3, [pc, #644]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18c:	f003 0303 	and.w	r3, r3, #3
 800e190:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e192:	4b9f      	ldr	r3, [pc, #636]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e196:	0b1b      	lsrs	r3, r3, #12
 800e198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e19c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e19e:	4b9c      	ldr	r3, [pc, #624]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a2:	091b      	lsrs	r3, r3, #4
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e1aa:	4b99      	ldr	r3, [pc, #612]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ae:	08db      	lsrs	r3, r3, #3
 800e1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	fb02 f303 	mul.w	r3, r2, r3
 800e1ba:	ee07 3a90 	vmov	s15, r3
 800e1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f000 8111 	beq.w	800e3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	2b02      	cmp	r3, #2
 800e1d2:	f000 8083 	beq.w	800e2dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	f200 80a1 	bhi.w	800e320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d003      	beq.n	800e1ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d056      	beq.n	800e298 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e1ea:	e099      	b.n	800e320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ec:	4b88      	ldr	r3, [pc, #544]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 0320 	and.w	r3, r3, #32
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02d      	beq.n	800e254 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e1f8:	4b85      	ldr	r3, [pc, #532]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	08db      	lsrs	r3, r3, #3
 800e1fe:	f003 0303 	and.w	r3, r3, #3
 800e202:	4a84      	ldr	r2, [pc, #528]	; (800e414 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e204:	fa22 f303 	lsr.w	r3, r2, r3
 800e208:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	ee07 3a90 	vmov	s15, r3
 800e210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e222:	4b7b      	ldr	r3, [pc, #492]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22a:	ee07 3a90 	vmov	s15, r3
 800e22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e232:	ed97 6a03 	vldr	s12, [r7, #12]
 800e236:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e24e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e252:	e087      	b.n	800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	ee07 3a90 	vmov	s15, r3
 800e25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e41c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e266:	4b6a      	ldr	r3, [pc, #424]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e26e:	ee07 3a90 	vmov	s15, r3
 800e272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e276:	ed97 6a03 	vldr	s12, [r7, #12]
 800e27a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e296:	e065      	b.n	800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	ee07 3a90 	vmov	s15, r3
 800e29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2aa:	4b59      	ldr	r3, [pc, #356]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2da:	e043      	b.n	800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	ee07 3a90 	vmov	s15, r3
 800e2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ee:	4b48      	ldr	r3, [pc, #288]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f6:	ee07 3a90 	vmov	s15, r3
 800e2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e302:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e31e:	e021      	b.n	800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	ee07 3a90 	vmov	s15, r3
 800e326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e32a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e332:	4b37      	ldr	r3, [pc, #220]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e33a:	ee07 3a90 	vmov	s15, r3
 800e33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e342:	ed97 6a03 	vldr	s12, [r7, #12]
 800e346:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e362:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e364:	4b2a      	ldr	r3, [pc, #168]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e368:	0a5b      	lsrs	r3, r3, #9
 800e36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e36e:	ee07 3a90 	vmov	s15, r3
 800e372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e37e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e38a:	ee17 2a90 	vmov	r2, s15
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e392:	4b1f      	ldr	r3, [pc, #124]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e396:	0c1b      	lsrs	r3, r3, #16
 800e398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e39c:	ee07 3a90 	vmov	s15, r3
 800e3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3b8:	ee17 2a90 	vmov	r2, s15
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e3c0:	4b13      	ldr	r3, [pc, #76]	; (800e410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	0e1b      	lsrs	r3, r3, #24
 800e3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ca:	ee07 3a90 	vmov	s15, r3
 800e3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3e6:	ee17 2a90 	vmov	r2, s15
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e3ee:	e008      	b.n	800e402 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	609a      	str	r2, [r3, #8]
}
 800e402:	bf00      	nop
 800e404:	3724      	adds	r7, #36	; 0x24
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	58024400 	.word	0x58024400
 800e414:	03d09000 	.word	0x03d09000
 800e418:	46000000 	.word	0x46000000
 800e41c:	4c742400 	.word	0x4c742400
 800e420:	4a742400 	.word	0x4a742400
 800e424:	4bbebc20 	.word	0x4bbebc20

0800e428 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e428:	b480      	push	{r7}
 800e42a:	b089      	sub	sp, #36	; 0x24
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e430:	4ba1      	ldr	r3, [pc, #644]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e434:	f003 0303 	and.w	r3, r3, #3
 800e438:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e43a:	4b9f      	ldr	r3, [pc, #636]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43e:	0d1b      	lsrs	r3, r3, #20
 800e440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e444:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e446:	4b9c      	ldr	r3, [pc, #624]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44a:	0a1b      	lsrs	r3, r3, #8
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e452:	4b99      	ldr	r3, [pc, #612]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e456:	08db      	lsrs	r3, r3, #3
 800e458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	fb02 f303 	mul.w	r3, r2, r3
 800e462:	ee07 3a90 	vmov	s15, r3
 800e466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e46a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 8111 	beq.w	800e698 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	2b02      	cmp	r3, #2
 800e47a:	f000 8083 	beq.w	800e584 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	2b02      	cmp	r3, #2
 800e482:	f200 80a1 	bhi.w	800e5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d056      	beq.n	800e540 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e492:	e099      	b.n	800e5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e494:	4b88      	ldr	r3, [pc, #544]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f003 0320 	and.w	r3, r3, #32
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d02d      	beq.n	800e4fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4a0:	4b85      	ldr	r3, [pc, #532]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	08db      	lsrs	r3, r3, #3
 800e4a6:	f003 0303 	and.w	r3, r3, #3
 800e4aa:	4a84      	ldr	r2, [pc, #528]	; (800e6bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e4b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	ee07 3a90 	vmov	s15, r3
 800e4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	ee07 3a90 	vmov	s15, r3
 800e4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4ca:	4b7b      	ldr	r3, [pc, #492]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4d2:	ee07 3a90 	vmov	s15, r3
 800e4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e4fa:	e087      	b.n	800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	ee07 3a90 	vmov	s15, r3
 800e502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e506:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e50e:	4b6a      	ldr	r3, [pc, #424]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e516:	ee07 3a90 	vmov	s15, r3
 800e51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e51e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e522:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e53e:	e065      	b.n	800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	ee07 3a90 	vmov	s15, r3
 800e546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e54a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e552:	4b59      	ldr	r3, [pc, #356]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e55a:	ee07 3a90 	vmov	s15, r3
 800e55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e562:	ed97 6a03 	vldr	s12, [r7, #12]
 800e566:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e582:	e043      	b.n	800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e596:	4b48      	ldr	r3, [pc, #288]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59e:	ee07 3a90 	vmov	s15, r3
 800e5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5c6:	e021      	b.n	800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5da:	4b37      	ldr	r3, [pc, #220]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5e2:	ee07 3a90 	vmov	s15, r3
 800e5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e60a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e60c:	4b2a      	ldr	r3, [pc, #168]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e610:	0a5b      	lsrs	r3, r3, #9
 800e612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e616:	ee07 3a90 	vmov	s15, r3
 800e61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e61e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e622:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e626:	edd7 6a07 	vldr	s13, [r7, #28]
 800e62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e632:	ee17 2a90 	vmov	r2, s15
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e63a:	4b1f      	ldr	r3, [pc, #124]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63e:	0c1b      	lsrs	r3, r3, #16
 800e640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e644:	ee07 3a90 	vmov	s15, r3
 800e648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e650:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e654:	edd7 6a07 	vldr	s13, [r7, #28]
 800e658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e660:	ee17 2a90 	vmov	r2, s15
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e668:	4b13      	ldr	r3, [pc, #76]	; (800e6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66c:	0e1b      	lsrs	r3, r3, #24
 800e66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e672:	ee07 3a90 	vmov	s15, r3
 800e676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e682:	edd7 6a07 	vldr	s13, [r7, #28]
 800e686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68e:	ee17 2a90 	vmov	r2, s15
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e696:	e008      	b.n	800e6aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	609a      	str	r2, [r3, #8]
}
 800e6aa:	bf00      	nop
 800e6ac:	3724      	adds	r7, #36	; 0x24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	58024400 	.word	0x58024400
 800e6bc:	03d09000 	.word	0x03d09000
 800e6c0:	46000000 	.word	0x46000000
 800e6c4:	4c742400 	.word	0x4c742400
 800e6c8:	4a742400 	.word	0x4a742400
 800e6cc:	4bbebc20 	.word	0x4bbebc20

0800e6d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b089      	sub	sp, #36	; 0x24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e6d8:	4ba0      	ldr	r3, [pc, #640]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6dc:	f003 0303 	and.w	r3, r3, #3
 800e6e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e6e2:	4b9e      	ldr	r3, [pc, #632]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e6:	091b      	lsrs	r3, r3, #4
 800e6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e6ee:	4b9b      	ldr	r3, [pc, #620]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e6f8:	4b98      	ldr	r3, [pc, #608]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fc:	08db      	lsrs	r3, r3, #3
 800e6fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	fb02 f303 	mul.w	r3, r2, r3
 800e708:	ee07 3a90 	vmov	s15, r3
 800e70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e710:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 8111 	beq.w	800e93e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	2b02      	cmp	r3, #2
 800e720:	f000 8083 	beq.w	800e82a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	2b02      	cmp	r3, #2
 800e728:	f200 80a1 	bhi.w	800e86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d056      	beq.n	800e7e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e738:	e099      	b.n	800e86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e73a:	4b88      	ldr	r3, [pc, #544]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f003 0320 	and.w	r3, r3, #32
 800e742:	2b00      	cmp	r3, #0
 800e744:	d02d      	beq.n	800e7a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e746:	4b85      	ldr	r3, [pc, #532]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	08db      	lsrs	r3, r3, #3
 800e74c:	f003 0303 	and.w	r3, r3, #3
 800e750:	4a83      	ldr	r2, [pc, #524]	; (800e960 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e752:	fa22 f303 	lsr.w	r3, r2, r3
 800e756:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	ee07 3a90 	vmov	s15, r3
 800e75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	ee07 3a90 	vmov	s15, r3
 800e768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e76c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e770:	4b7a      	ldr	r3, [pc, #488]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e778:	ee07 3a90 	vmov	s15, r3
 800e77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e780:	ed97 6a03 	vldr	s12, [r7, #12]
 800e784:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e79c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e7a0:	e087      	b.n	800e8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	ee07 3a90 	vmov	s15, r3
 800e7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e7b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7b4:	4b69      	ldr	r3, [pc, #420]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7bc:	ee07 3a90 	vmov	s15, r3
 800e7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e7cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7e4:	e065      	b.n	800e8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e96c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e7f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7f8:	4b58      	ldr	r3, [pc, #352]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e800:	ee07 3a90 	vmov	s15, r3
 800e804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e808:	ed97 6a03 	vldr	s12, [r7, #12]
 800e80c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e828:	e043      	b.n	800e8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	ee07 3a90 	vmov	s15, r3
 800e830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e834:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e970 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e83c:	4b47      	ldr	r3, [pc, #284]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e844:	ee07 3a90 	vmov	s15, r3
 800e848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e84c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e850:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e85c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e86c:	e021      	b.n	800e8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	ee07 3a90 	vmov	s15, r3
 800e874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e878:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e87c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e880:	4b36      	ldr	r3, [pc, #216]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e888:	ee07 3a90 	vmov	s15, r3
 800e88c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e890:	ed97 6a03 	vldr	s12, [r7, #12]
 800e894:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e89c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e8b2:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b6:	0a5b      	lsrs	r3, r3, #9
 800e8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8bc:	ee07 3a90 	vmov	s15, r3
 800e8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e8d8:	ee17 2a90 	vmov	r2, s15
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e8e0:	4b1e      	ldr	r3, [pc, #120]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e4:	0c1b      	lsrs	r3, r3, #16
 800e8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ea:	ee07 3a90 	vmov	s15, r3
 800e8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e8fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800e8fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e906:	ee17 2a90 	vmov	r2, s15
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e90e:	4b13      	ldr	r3, [pc, #76]	; (800e95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e912:	0e1b      	lsrs	r3, r3, #24
 800e914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e918:	ee07 3a90 	vmov	s15, r3
 800e91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e924:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e928:	edd7 6a07 	vldr	s13, [r7, #28]
 800e92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e934:	ee17 2a90 	vmov	r2, s15
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e93c:	e008      	b.n	800e950 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	609a      	str	r2, [r3, #8]
}
 800e950:	bf00      	nop
 800e952:	3724      	adds	r7, #36	; 0x24
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	58024400 	.word	0x58024400
 800e960:	03d09000 	.word	0x03d09000
 800e964:	46000000 	.word	0x46000000
 800e968:	4c742400 	.word	0x4c742400
 800e96c:	4a742400 	.word	0x4a742400
 800e970:	4bbebc20 	.word	0x4bbebc20

0800e974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e97e:	2300      	movs	r3, #0
 800e980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e982:	4b53      	ldr	r3, [pc, #332]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d101      	bne.n	800e992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	e099      	b.n	800eac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e992:	4b4f      	ldr	r3, [pc, #316]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a4e      	ldr	r2, [pc, #312]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e99c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e99e:	f7f6 f8c7 	bl	8004b30 <HAL_GetTick>
 800e9a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e9a4:	e008      	b.n	800e9b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e9a6:	f7f6 f8c3 	bl	8004b30 <HAL_GetTick>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d901      	bls.n	800e9b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	e086      	b.n	800eac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e9b8:	4b45      	ldr	r3, [pc, #276]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1f0      	bne.n	800e9a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e9c4:	4b42      	ldr	r3, [pc, #264]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	031b      	lsls	r3, r3, #12
 800e9d2:	493f      	ldr	r1, [pc, #252]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	628b      	str	r3, [r1, #40]	; 0x28
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	025b      	lsls	r3, r3, #9
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	041b      	lsls	r3, r3, #16
 800e9f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	691b      	ldr	r3, [r3, #16]
 800ea00:	3b01      	subs	r3, #1
 800ea02:	061b      	lsls	r3, r3, #24
 800ea04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ea08:	4931      	ldr	r1, [pc, #196]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ea0e:	4b30      	ldr	r3, [pc, #192]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	492d      	ldr	r1, [pc, #180]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ea20:	4b2b      	ldr	r3, [pc, #172]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea24:	f023 0220 	bic.w	r2, r3, #32
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	4928      	ldr	r1, [pc, #160]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ea32:	4b27      	ldr	r3, [pc, #156]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea36:	4a26      	ldr	r2, [pc, #152]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea38:	f023 0310 	bic.w	r3, r3, #16
 800ea3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ea3e:	4b24      	ldr	r3, [pc, #144]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea42:	4b24      	ldr	r3, [pc, #144]	; (800ead4 <RCCEx_PLL2_Config+0x160>)
 800ea44:	4013      	ands	r3, r2
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	69d2      	ldr	r2, [r2, #28]
 800ea4a:	00d2      	lsls	r2, r2, #3
 800ea4c:	4920      	ldr	r1, [pc, #128]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ea52:	4b1f      	ldr	r3, [pc, #124]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea56:	4a1e      	ldr	r2, [pc, #120]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea58:	f043 0310 	orr.w	r3, r3, #16
 800ea5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d106      	bne.n	800ea72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ea64:	4b1a      	ldr	r3, [pc, #104]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea68:	4a19      	ldr	r2, [pc, #100]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ea70:	e00f      	b.n	800ea92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d106      	bne.n	800ea86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ea78:	4b15      	ldr	r3, [pc, #84]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea7c:	4a14      	ldr	r2, [pc, #80]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ea84:	e005      	b.n	800ea92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ea86:	4b12      	ldr	r3, [pc, #72]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8a:	4a11      	ldr	r2, [pc, #68]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ea92:	4b0f      	ldr	r3, [pc, #60]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a0e      	ldr	r2, [pc, #56]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800ea98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ea9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea9e:	f7f6 f847 	bl	8004b30 <HAL_GetTick>
 800eaa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eaa4:	e008      	b.n	800eab8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eaa6:	f7f6 f843 	bl	8004b30 <HAL_GetTick>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d901      	bls.n	800eab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eab4:	2303      	movs	r3, #3
 800eab6:	e006      	b.n	800eac6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eab8:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <RCCEx_PLL2_Config+0x15c>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0f0      	beq.n	800eaa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800eac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	58024400 	.word	0x58024400
 800ead4:	ffff0007 	.word	0xffff0007

0800ead8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eae6:	4b53      	ldr	r3, [pc, #332]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaea:	f003 0303 	and.w	r3, r3, #3
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d101      	bne.n	800eaf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e099      	b.n	800ec2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800eaf6:	4b4f      	ldr	r3, [pc, #316]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a4e      	ldr	r2, [pc, #312]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eafc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb02:	f7f6 f815 	bl	8004b30 <HAL_GetTick>
 800eb06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eb08:	e008      	b.n	800eb1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb0a:	f7f6 f811 	bl	8004b30 <HAL_GetTick>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	1ad3      	subs	r3, r2, r3
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d901      	bls.n	800eb1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	e086      	b.n	800ec2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eb1c:	4b45      	ldr	r3, [pc, #276]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1f0      	bne.n	800eb0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800eb28:	4b42      	ldr	r3, [pc, #264]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	051b      	lsls	r3, r3, #20
 800eb36:	493f      	ldr	r1, [pc, #252]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	628b      	str	r3, [r1, #40]	; 0x28
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	025b      	lsls	r3, r3, #9
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	431a      	orrs	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	3b01      	subs	r3, #1
 800eb58:	041b      	lsls	r3, r3, #16
 800eb5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	3b01      	subs	r3, #1
 800eb66:	061b      	lsls	r3, r3, #24
 800eb68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eb6c:	4931      	ldr	r1, [pc, #196]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800eb72:	4b30      	ldr	r3, [pc, #192]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	492d      	ldr	r1, [pc, #180]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb80:	4313      	orrs	r3, r2
 800eb82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800eb84:	4b2b      	ldr	r3, [pc, #172]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	4928      	ldr	r1, [pc, #160]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb92:	4313      	orrs	r3, r2
 800eb94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800eb96:	4b27      	ldr	r3, [pc, #156]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9a:	4a26      	ldr	r2, [pc, #152]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eb9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eba2:	4b24      	ldr	r3, [pc, #144]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800eba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eba6:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <RCCEx_PLL3_Config+0x160>)
 800eba8:	4013      	ands	r3, r2
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	69d2      	ldr	r2, [r2, #28]
 800ebae:	00d2      	lsls	r2, r2, #3
 800ebb0:	4920      	ldr	r1, [pc, #128]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ebb6:	4b1f      	ldr	r3, [pc, #124]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebba:	4a1e      	ldr	r2, [pc, #120]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d106      	bne.n	800ebd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ebc8:	4b1a      	ldr	r3, [pc, #104]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebcc:	4a19      	ldr	r2, [pc, #100]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ebd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ebd4:	e00f      	b.n	800ebf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d106      	bne.n	800ebea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ebdc:	4b15      	ldr	r3, [pc, #84]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe0:	4a14      	ldr	r2, [pc, #80]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebe2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ebe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ebe8:	e005      	b.n	800ebf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ebea:	4b12      	ldr	r3, [pc, #72]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebee:	4a11      	ldr	r2, [pc, #68]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ebf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a0e      	ldr	r2, [pc, #56]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ebfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec02:	f7f5 ff95 	bl	8004b30 <HAL_GetTick>
 800ec06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ec08:	e008      	b.n	800ec1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ec0a:	f7f5 ff91 	bl	8004b30 <HAL_GetTick>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d901      	bls.n	800ec1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ec18:	2303      	movs	r3, #3
 800ec1a:	e006      	b.n	800ec2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ec1c:	4b05      	ldr	r3, [pc, #20]	; (800ec34 <RCCEx_PLL3_Config+0x15c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d0f0      	beq.n	800ec0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	58024400 	.word	0x58024400
 800ec38:	ffff0007 	.word	0xffff0007

0800ec3c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e054      	b.n	800ecf8 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	7a5b      	ldrb	r3, [r3, #9]
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7f3 ff7a 	bl	8002b58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2202      	movs	r2, #2
 800ec68:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f023 0120 	bic.w	r1, r3, #32
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	430a      	orrs	r2, r1
 800ec7e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f042 0204 	orr.w	r2, r2, #4
 800ec8e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec9a:	2b40      	cmp	r3, #64	; 0x40
 800ec9c:	d104      	bne.n	800eca8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2204      	movs	r2, #4
 800eca2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800eca4:	2301      	movs	r3, #1
 800eca6:	e027      	b.n	800ecf8 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800eca8:	f7f5 ff42 	bl	8004b30 <HAL_GetTick>
 800ecac:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ecae:	e015      	b.n	800ecdc <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ecb0:	f7f5 ff3e 	bl	8004b30 <HAL_GetTick>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d90e      	bls.n	800ecdc <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	f003 0304 	and.w	r3, r3, #4
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d107      	bne.n	800ecdc <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2204      	movs	r2, #4
 800ecd0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e00d      	b.n	800ecf8 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	f003 0304 	and.w	r3, r3, #4
 800ece6:	2b04      	cmp	r3, #4
 800ece8:	d0e2      	beq.n	800ecb0 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2201      	movs	r2, #1
 800ecee:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7a1b      	ldrb	r3, [r3, #8]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d101      	bne.n	800ed1a <HAL_RNG_GenerateRandomNumber+0x1a>
 800ed16:	2302      	movs	r3, #2
 800ed18:	e044      	b.n	800eda4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	7a5b      	ldrb	r3, [r3, #9]
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d133      	bne.n	800ed92 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800ed30:	f7f5 fefe 	bl	8004b30 <HAL_GetTick>
 800ed34:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ed36:	e018      	b.n	800ed6a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ed38:	f7f5 fefa 	bl	8004b30 <HAL_GetTick>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d911      	bls.n	800ed6a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d00a      	beq.n	800ed6a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2201      	movs	r2, #1
 800ed58:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800ed66:	2301      	movs	r3, #1
 800ed68:	e01c      	b.n	800eda4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	f003 0301 	and.w	r3, r3, #1
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d1df      	bne.n	800ed38 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	689a      	ldr	r2, [r3, #8]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	691a      	ldr	r2, [r3, #16]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	725a      	strb	r2, [r3, #9]
 800ed90:	e004      	b.n	800ed9c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2204      	movs	r2, #4
 800ed96:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	721a      	strb	r2, [r3, #8]

  return status;
 800eda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3710      	adds	r7, #16
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d904      	bls.n	800edca <HAL_SAI_InitProtocol+0x1e>
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	3b03      	subs	r3, #3
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d812      	bhi.n	800edee <HAL_SAI_InitProtocol+0x42>
 800edc8:	e008      	b.n	800eddc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f000 fc11 	bl	800f5f8 <SAI_InitI2S>
 800edd6:	4603      	mov	r3, r0
 800edd8:	75fb      	strb	r3, [r7, #23]
      break;
 800edda:	e00b      	b.n	800edf4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	68b9      	ldr	r1, [r7, #8]
 800ede2:	68f8      	ldr	r0, [r7, #12]
 800ede4:	f000 fcba 	bl	800f75c <SAI_InitPCM>
 800ede8:	4603      	mov	r3, r0
 800edea:	75fb      	strb	r3, [r7, #23]
      break;
 800edec:	e002      	b.n	800edf4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800edee:	2301      	movs	r3, #1
 800edf0:	75fb      	strb	r3, [r7, #23]
      break;
 800edf2:	bf00      	nop
  }

  if (status == HAL_OK)
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d104      	bne.n	800ee04 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f000 f808 	bl	800ee10 <HAL_SAI_Init>
 800ee00:	4603      	mov	r3, r0
 800ee02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
	...

0800ee10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b08a      	sub	sp, #40	; 0x28
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e28e      	b.n	800f340 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800ee22:	f7f5 feb5 	bl	8004b90 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d113      	bne.n	800ee58 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a96      	ldr	r2, [pc, #600]	; (800f090 <HAL_SAI_Init+0x280>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d004      	beq.n	800ee44 <HAL_SAI_Init+0x34>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a95      	ldr	r2, [pc, #596]	; (800f094 <HAL_SAI_Init+0x284>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d107      	bne.n	800ee54 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d103      	bne.n	800ee54 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d001      	beq.n	800ee58 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800ee54:	2301      	movs	r3, #1
 800ee56:	e273      	b.n	800f340 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a8c      	ldr	r2, [pc, #560]	; (800f090 <HAL_SAI_Init+0x280>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d004      	beq.n	800ee6c <HAL_SAI_Init+0x5c>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a8c      	ldr	r2, [pc, #560]	; (800f098 <HAL_SAI_Init+0x288>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d102      	bne.n	800ee72 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800ee6c:	4b8b      	ldr	r3, [pc, #556]	; (800f09c <HAL_SAI_Init+0x28c>)
 800ee6e:	61bb      	str	r3, [r7, #24]
 800ee70:	e028      	b.n	800eec4 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a8a      	ldr	r2, [pc, #552]	; (800f0a0 <HAL_SAI_Init+0x290>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d004      	beq.n	800ee86 <HAL_SAI_Init+0x76>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a88      	ldr	r2, [pc, #544]	; (800f0a4 <HAL_SAI_Init+0x294>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d102      	bne.n	800ee8c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800ee86:	4b88      	ldr	r3, [pc, #544]	; (800f0a8 <HAL_SAI_Init+0x298>)
 800ee88:	61bb      	str	r3, [r7, #24]
 800ee8a:	e01b      	b.n	800eec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a86      	ldr	r2, [pc, #536]	; (800f0ac <HAL_SAI_Init+0x29c>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d004      	beq.n	800eea0 <HAL_SAI_Init+0x90>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a85      	ldr	r2, [pc, #532]	; (800f0b0 <HAL_SAI_Init+0x2a0>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d102      	bne.n	800eea6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800eea0:	4b84      	ldr	r3, [pc, #528]	; (800f0b4 <HAL_SAI_Init+0x2a4>)
 800eea2:	61bb      	str	r3, [r7, #24]
 800eea4:	e00e      	b.n	800eec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a7a      	ldr	r2, [pc, #488]	; (800f094 <HAL_SAI_Init+0x284>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d004      	beq.n	800eeba <HAL_SAI_Init+0xaa>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a80      	ldr	r2, [pc, #512]	; (800f0b8 <HAL_SAI_Init+0x2a8>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d102      	bne.n	800eec0 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800eeba:	4b80      	ldr	r3, [pc, #512]	; (800f0bc <HAL_SAI_Init+0x2ac>)
 800eebc:	61bb      	str	r3, [r7, #24]
 800eebe:	e001      	b.n	800eec4 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e23d      	b.n	800f340 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d106      	bne.n	800eede <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7f3 fed7 	bl	8002c8c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fcf6 	bl	800f8d0 <SAI_Disable>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d001      	beq.n	800eeee <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e228      	b.n	800f340 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2202      	movs	r2, #2
 800eef2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d00c      	beq.n	800ef18 <HAL_SAI_Init+0x108>
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d80d      	bhi.n	800ef1e <HAL_SAI_Init+0x10e>
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d002      	beq.n	800ef0c <HAL_SAI_Init+0xfc>
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d003      	beq.n	800ef12 <HAL_SAI_Init+0x102>
 800ef0a:	e008      	b.n	800ef1e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef10:	e008      	b.n	800ef24 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ef12:	2310      	movs	r3, #16
 800ef14:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef16:	e005      	b.n	800ef24 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ef18:	2320      	movs	r3, #32
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef1c:	e002      	b.n	800ef24 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef22:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	2b05      	cmp	r3, #5
 800ef2a:	d832      	bhi.n	800ef92 <HAL_SAI_Init+0x182>
 800ef2c:	a201      	add	r2, pc, #4	; (adr r2, 800ef34 <HAL_SAI_Init+0x124>)
 800ef2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef32:	bf00      	nop
 800ef34:	0800ef4d 	.word	0x0800ef4d
 800ef38:	0800ef53 	.word	0x0800ef53
 800ef3c:	0800ef5b 	.word	0x0800ef5b
 800ef40:	0800ef63 	.word	0x0800ef63
 800ef44:	0800ef73 	.word	0x0800ef73
 800ef48:	0800ef83 	.word	0x0800ef83
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
      break;
 800ef50:	e022      	b.n	800ef98 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ef52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef56:	61fb      	str	r3, [r7, #28]
      break;
 800ef58:	e01e      	b.n	800ef98 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef5e:	61fb      	str	r3, [r7, #28]
      break;
 800ef60:	e01a      	b.n	800ef98 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef66:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	f043 0301 	orr.w	r3, r3, #1
 800ef6e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef70:	e012      	b.n	800ef98 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef76:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	f043 0302 	orr.w	r3, r3, #2
 800ef7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef80:	e00a      	b.n	800ef98 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ef82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef86:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	f043 0303 	orr.w	r3, r3, #3
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800ef90:	e002      	b.n	800ef98 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	61fb      	str	r3, [r7, #28]
      break;
 800ef96:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef9c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6a1b      	ldr	r3, [r3, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 80c5 	beq.w	800f132 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a37      	ldr	r2, [pc, #220]	; (800f090 <HAL_SAI_Init+0x280>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d004      	beq.n	800efc0 <HAL_SAI_Init+0x1b0>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a37      	ldr	r2, [pc, #220]	; (800f098 <HAL_SAI_Init+0x288>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d106      	bne.n	800efce <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800efc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800efc4:	f04f 0100 	mov.w	r1, #0
 800efc8:	f7fe fb44 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800efcc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a33      	ldr	r2, [pc, #204]	; (800f0a0 <HAL_SAI_Init+0x290>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d004      	beq.n	800efe2 <HAL_SAI_Init+0x1d2>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a31      	ldr	r2, [pc, #196]	; (800f0a4 <HAL_SAI_Init+0x294>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d106      	bne.n	800eff0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800efe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800efe6:	f04f 0100 	mov.w	r1, #0
 800efea:	f7fe fb33 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800efee:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a2d      	ldr	r2, [pc, #180]	; (800f0ac <HAL_SAI_Init+0x29c>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d004      	beq.n	800f004 <HAL_SAI_Init+0x1f4>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a2c      	ldr	r2, [pc, #176]	; (800f0b0 <HAL_SAI_Init+0x2a0>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d106      	bne.n	800f012 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800f004:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f008:	f04f 0100 	mov.w	r1, #0
 800f00c:	f7fe fb22 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800f010:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a1f      	ldr	r2, [pc, #124]	; (800f094 <HAL_SAI_Init+0x284>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d106      	bne.n	800f02a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800f01c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f020:	f04f 0100 	mov.w	r1, #0
 800f024:	f7fe fb16 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800f028:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a22      	ldr	r2, [pc, #136]	; (800f0b8 <HAL_SAI_Init+0x2a8>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d106      	bne.n	800f042 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800f034:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f038:	f04f 0100 	mov.w	r1, #0
 800f03c:	f7fe fb0a 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800f040:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f04a:	d139      	bne.n	800f0c0 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f050:	2b04      	cmp	r3, #4
 800f052:	d102      	bne.n	800f05a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	e00a      	b.n	800f070 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f05e:	2b08      	cmp	r3, #8
 800f060:	d103      	bne.n	800f06a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f062:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f066:	60fb      	str	r3, [r7, #12]
 800f068:	e002      	b.n	800f070 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	4613      	mov	r3, r2
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	4413      	add	r3, r2
 800f078:	005b      	lsls	r3, r3, #1
 800f07a:	4619      	mov	r1, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	fb02 f303 	mul.w	r3, r2, r3
 800f086:	fbb1 f3f3 	udiv	r3, r1, r3
 800f08a:	613b      	str	r3, [r7, #16]
 800f08c:	e030      	b.n	800f0f0 <HAL_SAI_Init+0x2e0>
 800f08e:	bf00      	nop
 800f090:	40015804 	.word	0x40015804
 800f094:	58005404 	.word	0x58005404
 800f098:	40015824 	.word	0x40015824
 800f09c:	40015800 	.word	0x40015800
 800f0a0:	40015c04 	.word	0x40015c04
 800f0a4:	40015c24 	.word	0x40015c24
 800f0a8:	40015c00 	.word	0x40015c00
 800f0ac:	40016004 	.word	0x40016004
 800f0b0:	40016024 	.word	0x40016024
 800f0b4:	40016000 	.word	0x40016000
 800f0b8:	58005424 	.word	0x58005424
 800f0bc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f0c8:	d101      	bne.n	800f0ce <HAL_SAI_Init+0x2be>
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	e000      	b.n	800f0d0 <HAL_SAI_Init+0x2c0>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f0d2:	697a      	ldr	r2, [r7, #20]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	4619      	mov	r1, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	fb02 f303 	mul.w	r3, r2, r3
 800f0e8:	021b      	lsls	r3, r3, #8
 800f0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800f0ee:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	4a95      	ldr	r2, [pc, #596]	; (800f348 <HAL_SAI_Init+0x538>)
 800f0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0f8:	08da      	lsrs	r2, r3, #3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f0fe:	6939      	ldr	r1, [r7, #16]
 800f100:	4b91      	ldr	r3, [pc, #580]	; (800f348 <HAL_SAI_Init+0x538>)
 800f102:	fba3 2301 	umull	r2, r3, r3, r1
 800f106:	08da      	lsrs	r2, r3, #3
 800f108:	4613      	mov	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	4413      	add	r3, r2
 800f10e:	005b      	lsls	r3, r3, #1
 800f110:	1aca      	subs	r2, r1, r3
 800f112:	2a08      	cmp	r2, #8
 800f114:	d904      	bls.n	800f120 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f124:	2b04      	cmp	r3, #4
 800f126:	d104      	bne.n	800f132 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12c:	085a      	lsrs	r2, r3, #1
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d003      	beq.n	800f142 <HAL_SAI_Init+0x332>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d109      	bne.n	800f156 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f146:	2b01      	cmp	r3, #1
 800f148:	d101      	bne.n	800f14e <HAL_SAI_Init+0x33e>
 800f14a:	2300      	movs	r3, #0
 800f14c:	e001      	b.n	800f152 <HAL_SAI_Init+0x342>
 800f14e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f152:	623b      	str	r3, [r7, #32]
 800f154:	e008      	b.n	800f168 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d102      	bne.n	800f164 <HAL_SAI_Init+0x354>
 800f15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f162:	e000      	b.n	800f166 <HAL_SAI_Init+0x356>
 800f164:	2300      	movs	r3, #0
 800f166:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f168:	f7f5 fd12 	bl	8004b90 <HAL_GetREVID>
 800f16c:	4603      	mov	r3, r0
 800f16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f172:	d331      	bcc.n	800f1d8 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6819      	ldr	r1, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	4b73      	ldr	r3, [pc, #460]	; (800f34c <HAL_SAI_Init+0x53c>)
 800f180:	400b      	ands	r3, r1
 800f182:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	6819      	ldr	r1, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f192:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f198:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f19e:	431a      	orrs	r2, r3
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f1ac:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	695b      	ldr	r3, [r3, #20]
 800f1b2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f1b8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1be:	051b      	lsls	r3, r3, #20
 800f1c0:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f1c6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	430a      	orrs	r2, r1
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	e02d      	b.n	800f234 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6819      	ldr	r1, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	4b5b      	ldr	r3, [pc, #364]	; (800f350 <HAL_SAI_Init+0x540>)
 800f1e4:	400b      	ands	r3, r1
 800f1e6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6819      	ldr	r1, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1f6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f1fc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f202:	431a      	orrs	r2, r3
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800f210:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f21c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	051b      	lsls	r3, r3, #20
 800f224:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f22a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	430a      	orrs	r2, r1
 800f232:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6859      	ldr	r1, [r3, #4]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	4b45      	ldr	r3, [pc, #276]	; (800f354 <HAL_SAI_Init+0x544>)
 800f240:	400b      	ands	r3, r1
 800f242:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6859      	ldr	r1, [r3, #4]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	69da      	ldr	r2, [r3, #28]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f252:	431a      	orrs	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f258:	431a      	orrs	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	430a      	orrs	r2, r1
 800f260:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6899      	ldr	r1, [r3, #8]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	4b3a      	ldr	r3, [pc, #232]	; (800f358 <HAL_SAI_Init+0x548>)
 800f26e:	400b      	ands	r3, r1
 800f270:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6899      	ldr	r1, [r3, #8]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f282:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f28e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f294:	3b01      	subs	r3, #1
 800f296:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f298:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68d9      	ldr	r1, [r3, #12]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f2b0:	400b      	ands	r3, r1
 800f2b2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68d9      	ldr	r1, [r3, #12]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2c8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f2ca:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	021b      	lsls	r3, r3, #8
 800f2d4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a1e      	ldr	r2, [pc, #120]	; (800f35c <HAL_SAI_Init+0x54c>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d004      	beq.n	800f2f2 <HAL_SAI_Init+0x4e2>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a1c      	ldr	r2, [pc, #112]	; (800f360 <HAL_SAI_Init+0x550>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d119      	bne.n	800f326 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f6:	f023 0201 	bic.w	r2, r3, #1
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f304:	2b01      	cmp	r3, #1
 800f306:	d10e      	bne.n	800f326 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f310:	3b01      	subs	r3, #1
 800f312:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f314:	431a      	orrs	r2, r3
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31e:	f043 0201 	orr.w	r2, r3, #1
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2201      	movs	r2, #1
 800f332:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3728      	adds	r7, #40	; 0x28
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	cccccccd 	.word	0xcccccccd
 800f34c:	f005c010 	.word	0xf005c010
 800f350:	f805c010 	.word	0xf805c010
 800f354:	ffff1ff0 	.word	0xffff1ff0
 800f358:	fff88000 	.word	0xfff88000
 800f35c:	40015804 	.word	0x40015804
 800f360:	58005404 	.word	0x58005404

0800f364 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	4613      	mov	r3, r2
 800f370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800f372:	f7f5 fbdd 	bl	8004b30 <HAL_GetTick>
 800f376:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <HAL_SAI_Transmit_DMA+0x20>
 800f37e:	88fb      	ldrh	r3, [r7, #6]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d101      	bne.n	800f388 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	e098      	b.n	800f4ba <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b01      	cmp	r3, #1
 800f392:	f040 8091 	bne.w	800f4b8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d101      	bne.n	800f3a4 <HAL_SAI_Transmit_DMA+0x40>
 800f3a0:	2302      	movs	r3, #2
 800f3a2:	e08a      	b.n	800f4ba <HAL_SAI_Transmit_DMA+0x156>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	68ba      	ldr	r2, [r7, #8]
 800f3b0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	88fa      	ldrh	r2, [r7, #6]
 800f3b6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	88fa      	ldrh	r2, [r7, #6]
 800f3be:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2212      	movs	r2, #18
 800f3ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3d8:	4a3a      	ldr	r2, [pc, #232]	; (800f4c4 <HAL_SAI_Transmit_DMA+0x160>)
 800f3da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3e2:	4a39      	ldr	r2, [pc, #228]	; (800f4c8 <HAL_SAI_Transmit_DMA+0x164>)
 800f3e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3ec:	4a37      	ldr	r2, [pc, #220]	; (800f4cc <HAL_SAI_Transmit_DMA+0x168>)
 800f3ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f404:	4619      	mov	r1, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	331c      	adds	r3, #28
 800f40c:	461a      	mov	r2, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f414:	f7f7 fe3a 	bl	800708c <HAL_DMA_Start_IT>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d005      	beq.n	800f42a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e047      	b.n	800f4ba <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f42a:	2100      	movs	r1, #0
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f000 fa17 	bl	800f860 <SAI_InterruptFlag>
 800f432:	4601      	mov	r1, r0
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	691a      	ldr	r2, [r3, #16]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	430a      	orrs	r2, r1
 800f440:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f450:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f452:	e015      	b.n	800f480 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800f454:	f7f5 fb6c 	bl	8004b30 <HAL_GetTick>
 800f458:	4602      	mov	r2, r0
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	1ad3      	subs	r3, r2, r3
 800f45e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f462:	d90d      	bls.n	800f480 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f46a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e01c      	b.n	800f4ba <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	695b      	ldr	r3, [r3, #20]
 800f486:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0e2      	beq.n	800f454 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d107      	bne.n	800f4ac <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f4aa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	e000      	b.n	800f4ba <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800f4b8:	2302      	movs	r3, #2
  }
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	0800f9a5 	.word	0x0800f9a5
 800f4c8:	0800f945 	.word	0x0800f945
 800f4cc:	0800fa3d 	.word	0x0800fa3d

0800f4d0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	4613      	mov	r3, r2
 800f4dc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d002      	beq.n	800f4ea <HAL_SAI_Receive_DMA+0x1a>
 800f4e4:	88fb      	ldrh	r3, [r7, #6]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e079      	b.n	800f5e2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f4f4:	b2db      	uxtb	r3, r3
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d172      	bne.n	800f5e0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800f500:	2b01      	cmp	r3, #1
 800f502:	d101      	bne.n	800f508 <HAL_SAI_Receive_DMA+0x38>
 800f504:	2302      	movs	r3, #2
 800f506:	e06c      	b.n	800f5e2 <HAL_SAI_Receive_DMA+0x112>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	88fa      	ldrh	r2, [r7, #6]
 800f51a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	88fa      	ldrh	r2, [r7, #6]
 800f522:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2222      	movs	r2, #34	; 0x22
 800f532:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f53c:	4a2b      	ldr	r2, [pc, #172]	; (800f5ec <HAL_SAI_Receive_DMA+0x11c>)
 800f53e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f546:	4a2a      	ldr	r2, [pc, #168]	; (800f5f0 <HAL_SAI_Receive_DMA+0x120>)
 800f548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f550:	4a28      	ldr	r2, [pc, #160]	; (800f5f4 <HAL_SAI_Receive_DMA+0x124>)
 800f552:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f55a:	2200      	movs	r2, #0
 800f55c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	331c      	adds	r3, #28
 800f56a:	4619      	mov	r1, r3
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f570:	461a      	mov	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800f578:	f7f7 fd88 	bl	800708c <HAL_DMA_Start_IT>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d005      	beq.n	800f58e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	e029      	b.n	800f5e2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f58e:	2100      	movs	r1, #0
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 f965 	bl	800f860 <SAI_InterruptFlag>
 800f596:	4601      	mov	r1, r0
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	691a      	ldr	r2, [r3, #16]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f5b4:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f5d2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e000      	b.n	800f5e2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800f5e0:	2302      	movs	r3, #2
  }
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	0800fa21 	.word	0x0800fa21
 800f5f0:	0800f9c1 	.word	0x0800f9c1
 800f5f4:	0800fa3d 	.word	0x0800fa3d

0800f5f8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b087      	sub	sp, #28
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <SAI_InitI2S+0x2e>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	2b02      	cmp	r3, #2
 800f624:	d103      	bne.n	800f62e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2200      	movs	r2, #0
 800f62a:	651a      	str	r2, [r3, #80]	; 0x50
 800f62c:	e002      	b.n	800f634 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2201      	movs	r2, #1
 800f632:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f63a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f642:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	2b00      	cmp	r3, #0
 800f658:	d001      	beq.n	800f65e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	e077      	b.n	800f74e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d107      	bne.n	800f674 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f670:	665a      	str	r2, [r3, #100]	; 0x64
 800f672:	e006      	b.n	800f682 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f67a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b03      	cmp	r3, #3
 800f686:	d84f      	bhi.n	800f728 <SAI_InitI2S+0x130>
 800f688:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <SAI_InitI2S+0x98>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	0800f6a1 	.word	0x0800f6a1
 800f694:	0800f6c3 	.word	0x0800f6c3
 800f698:	0800f6e5 	.word	0x0800f6e5
 800f69c:	0800f707 	.word	0x0800f707
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2280      	movs	r2, #128	; 0x80
 800f6a4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	085b      	lsrs	r3, r3, #1
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	085b      	lsrs	r3, r3, #1
 800f6b4:	011a      	lsls	r2, r3, #4
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2240      	movs	r2, #64	; 0x40
 800f6be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f6c0:	e035      	b.n	800f72e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2280      	movs	r2, #128	; 0x80
 800f6c6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	085b      	lsrs	r3, r3, #1
 800f6cc:	019a      	lsls	r2, r3, #6
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	085b      	lsrs	r3, r3, #1
 800f6d6:	015a      	lsls	r2, r3, #5
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2280      	movs	r2, #128	; 0x80
 800f6e0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f6e2:	e024      	b.n	800f72e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	22c0      	movs	r2, #192	; 0xc0
 800f6e8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	085b      	lsrs	r3, r3, #1
 800f6ee:	019a      	lsls	r2, r3, #6
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	085b      	lsrs	r3, r3, #1
 800f6f8:	015a      	lsls	r2, r3, #5
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2280      	movs	r2, #128	; 0x80
 800f702:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f704:	e013      	b.n	800f72e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	22e0      	movs	r2, #224	; 0xe0
 800f70a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	085b      	lsrs	r3, r3, #1
 800f710:	019a      	lsls	r2, r3, #6
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	085b      	lsrs	r3, r3, #1
 800f71a:	015a      	lsls	r2, r3, #5
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2280      	movs	r2, #128	; 0x80
 800f724:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f726:	e002      	b.n	800f72e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	75fb      	strb	r3, [r7, #23]
      break;
 800f72c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	2b02      	cmp	r3, #2
 800f732:	d10b      	bne.n	800f74c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b01      	cmp	r3, #1
 800f738:	d102      	bne.n	800f740 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2210      	movs	r2, #16
 800f73e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2b02      	cmp	r3, #2
 800f744:	d102      	bne.n	800f74c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2208      	movs	r2, #8
 800f74a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800f74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop

0800f75c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d003      	beq.n	800f78a <SAI_InitPCM+0x2e>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d103      	bne.n	800f792 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2201      	movs	r2, #1
 800f78e:	651a      	str	r2, [r3, #80]	; 0x50
 800f790:	e002      	b.n	800f798 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2200      	movs	r2, #0
 800f796:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f7a4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f7ac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7c0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	d103      	bne.n	800f7d0 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	659a      	str	r2, [r3, #88]	; 0x58
 800f7ce:	e002      	b.n	800f7d6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	220d      	movs	r2, #13
 800f7d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d837      	bhi.n	800f84c <SAI_InitPCM+0xf0>
 800f7dc:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <SAI_InitPCM+0x88>)
 800f7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e2:	bf00      	nop
 800f7e4:	0800f7f5 	.word	0x0800f7f5
 800f7e8:	0800f80b 	.word	0x0800f80b
 800f7ec:	0800f821 	.word	0x0800f821
 800f7f0:	0800f837 	.word	0x0800f837
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2280      	movs	r2, #128	; 0x80
 800f7f8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	011a      	lsls	r2, r3, #4
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2240      	movs	r2, #64	; 0x40
 800f806:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f808:	e023      	b.n	800f852 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2280      	movs	r2, #128	; 0x80
 800f80e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	015a      	lsls	r2, r3, #5
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2280      	movs	r2, #128	; 0x80
 800f81c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f81e:	e018      	b.n	800f852 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	22c0      	movs	r2, #192	; 0xc0
 800f824:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	015a      	lsls	r2, r3, #5
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2280      	movs	r2, #128	; 0x80
 800f832:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f834:	e00d      	b.n	800f852 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	22e0      	movs	r2, #224	; 0xe0
 800f83a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	015a      	lsls	r2, r3, #5
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2280      	movs	r2, #128	; 0x80
 800f848:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800f84a:	e002      	b.n	800f852 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800f84c:	2301      	movs	r3, #1
 800f84e:	75fb      	strb	r3, [r7, #23]
      break;
 800f850:	bf00      	nop
  }

  return status;
 800f852:	7dfb      	ldrb	r3, [r7, #23]
}
 800f854:	4618      	mov	r0, r3
 800f856:	371c      	adds	r7, #28
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr

0800f860 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d103      	bne.n	800f87e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	f043 0308 	orr.w	r3, r3, #8
 800f87c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f882:	2b08      	cmp	r3, #8
 800f884:	d10b      	bne.n	800f89e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d003      	beq.n	800f896 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d103      	bne.n	800f89e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f043 0310 	orr.w	r3, r3, #16
 800f89c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d003      	beq.n	800f8ae <SAI_InterruptFlag+0x4e>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d104      	bne.n	800f8b8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f8b4:	60fb      	str	r3, [r7, #12]
 800f8b6:	e003      	b.n	800f8c0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f043 0304 	orr.w	r3, r3, #4
 800f8be:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800f8d8:	4b18      	ldr	r3, [pc, #96]	; (800f93c <SAI_Disable+0x6c>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a18      	ldr	r2, [pc, #96]	; (800f940 <SAI_Disable+0x70>)
 800f8de:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e2:	0b1b      	lsrs	r3, r3, #12
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f8fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d10a      	bne.n	800f918 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f908:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	72fb      	strb	r3, [r7, #11]
      break;
 800f916:	e009      	b.n	800f92c <SAI_Disable+0x5c>
    }
    count--;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	3b01      	subs	r3, #1
 800f91c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1e7      	bne.n	800f8fc <SAI_Disable+0x2c>

  return status;
 800f92c:	7afb      	ldrb	r3, [r7, #11]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	2000000c 	.word	0x2000000c
 800f940:	95cbec1b 	.word	0x95cbec1b

0800f944 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f950:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	69db      	ldr	r3, [r3, #28]
 800f956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f95a:	d01c      	beq.n	800f996 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2200      	movs	r2, #0
 800f960:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f972:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f974:	2100      	movs	r1, #0
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7ff ff72 	bl	800f860 <SAI_InterruptFlag>
 800f97c:	4603      	mov	r3, r0
 800f97e:	43d9      	mvns	r1, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	691a      	ldr	r2, [r3, #16]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	400a      	ands	r2, r1
 800f98c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2201      	movs	r2, #1
 800f992:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f7f2 f954 	bl	8001c44 <HAL_SAI_TxCpltCallback>
#endif
}
 800f99c:	bf00      	nop
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f7f2 f950 	bl	8001c58 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800f9b8:	bf00      	nop
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9cc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	69db      	ldr	r3, [r3, #28]
 800f9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9d6:	d01c      	beq.n	800fa12 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f9e6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff ff34 	bl	800f860 <SAI_InterruptFlag>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	43d9      	mvns	r1, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	691a      	ldr	r2, [r3, #16]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	400a      	ands	r2, r1
 800fa08:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7f2 f92a 	bl	8001c6c <HAL_SAI_RxCpltCallback>
#endif
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7f2 f927 	bl	8001c82 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800fa34:	bf00      	nop
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa48:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7f8 fcb2 	bl	80083b4 <HAL_DMA_GetError>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d01d      	beq.n	800fa92 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fa74:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff ff2a 	bl	800f8d0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7f2 f8cf 	bl	8001c30 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800fa92:	bf00      	nop
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b08a      	sub	sp, #40	; 0x28
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d101      	bne.n	800faac <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800faa8:	2301      	movs	r3, #1
 800faaa:	e075      	b.n	800fb98 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d105      	bne.n	800fac4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7f3 faee 	bl	80030a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2204      	movs	r2, #4
 800fac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f867 	bl	800fba0 <HAL_SD_InitCard>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d001      	beq.n	800fadc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800fad8:	2301      	movs	r3, #1
 800fada:	e05d      	b.n	800fb98 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800fadc:	f107 0308 	add.w	r3, r7, #8
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 fdb4 	bl	8010650 <HAL_SD_GetCardStatus>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800faee:	2301      	movs	r3, #1
 800faf0:	e052      	b.n	800fb98 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800faf2:	7e3b      	ldrb	r3, [r7, #24]
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800faf8:	7e7b      	ldrb	r3, [r7, #25]
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d10a      	bne.n	800fb1c <HAL_SD_Init+0x82>
 800fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d102      	bne.n	800fb12 <HAL_SD_Init+0x78>
 800fb0c:	6a3b      	ldr	r3, [r7, #32]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d004      	beq.n	800fb1c <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb18:	659a      	str	r2, [r3, #88]	; 0x58
 800fb1a:	e00b      	b.n	800fb34 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d104      	bne.n	800fb2e <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb2a:	659a      	str	r2, [r3, #88]	; 0x58
 800fb2c:	e002      	b.n	800fb34 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fe72 	bl	8010824 <HAL_SD_ConfigWideBusOperation>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d001      	beq.n	800fb4a <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800fb46:	2301      	movs	r3, #1
 800fb48:	e026      	b.n	800fb98 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800fb4a:	f7f4 fff1 	bl	8004b30 <HAL_GetTick>
 800fb4e:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fb50:	e011      	b.n	800fb76 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fb52:	f7f4 ffed 	bl	8004b30 <HAL_GetTick>
 800fb56:	4602      	mov	r2, r0
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb60:	d109      	bne.n	800fb76 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb68:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800fb72:	2303      	movs	r3, #3
 800fb74:	e010      	b.n	800fb98 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 ff66 	bl	8010a48 <HAL_SD_GetCardState>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d1e7      	bne.n	800fb52 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2201      	movs	r2, #1
 800fb92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3728      	adds	r7, #40	; 0x28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800fba0:	b590      	push	{r4, r7, lr}
 800fba2:	b08d      	sub	sp, #52	; 0x34
 800fba4:	af02      	add	r7, sp, #8
 800fba6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800fbac:	2300      	movs	r3, #0
 800fbae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800fbb8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	f7fd fd48 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbc4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d109      	bne.n	800fbe0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fbda:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e070      	b.n	800fcc2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	0a1b      	lsrs	r3, r3, #8
 800fbe4:	4a39      	ldr	r2, [pc, #228]	; (800fccc <HAL_SD_InitCard+0x12c>)
 800fbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbea:	091b      	lsrs	r3, r3, #4
 800fbec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681c      	ldr	r4, [r3, #0]
 800fbf2:	466a      	mov	r2, sp
 800fbf4:	f107 0318 	add.w	r3, r7, #24
 800fbf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fbfc:	e882 0003 	stmia.w	r2, {r0, r1}
 800fc00:	f107 030c 	add.w	r3, r7, #12
 800fc04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc06:	4620      	mov	r0, r4
 800fc08:	f003 fe7e 	bl	8013908 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f003 fec1 	bl	8013998 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d005      	beq.n	800fc28 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc26:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800fc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d007      	beq.n	800fc3e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800fc2e:	4a28      	ldr	r2, [pc, #160]	; (800fcd0 <HAL_SD_InitCard+0x130>)
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc36:	3301      	adds	r3, #1
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7f4 ff85 	bl	8004b48 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 fff0 	bl	8010c24 <SD_PowerON>
 800fc44:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00b      	beq.n	800fc64 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc58:	6a3b      	ldr	r3, [r7, #32]
 800fc5a:	431a      	orrs	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	e02e      	b.n	800fcc2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 ff0f 	bl	8010a88 <SD_InitCard>
 800fc6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fc6c:	6a3b      	ldr	r3, [r7, #32]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	431a      	orrs	r2, r3
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fc86:	2301      	movs	r3, #1
 800fc88:	e01b      	b.n	800fcc2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc92:	4618      	mov	r0, r3
 800fc94:	f003 ff16 	bl	8013ac4 <SDMMC_CmdBlockLength>
 800fc98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00f      	beq.n	800fcc0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a0b      	ldr	r2, [pc, #44]	; (800fcd4 <HAL_SD_InitCard+0x134>)
 800fca6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fcac:	6a3b      	ldr	r3, [r7, #32]
 800fcae:	431a      	orrs	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e000      	b.n	800fcc2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	372c      	adds	r7, #44	; 0x2c
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd90      	pop	{r4, r7, pc}
 800fcca:	bf00      	nop
 800fccc:	014f8b59 	.word	0x014f8b59
 800fcd0:	00012110 	.word	0x00012110
 800fcd4:	1fe00fff 	.word	0x1fe00fff

0800fcd8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b092      	sub	sp, #72	; 0x48
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fce6:	f7f4 ff23 	bl	8004b30 <HAL_GetTick>
 800fcea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d107      	bne.n	800fd0a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	e167      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	f040 815a 	bne.w	800ffcc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800fd1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	441a      	add	r2, r3
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d907      	bls.n	800fd3c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd30:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	e14e      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2203      	movs	r2, #3
 800fd40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d002      	beq.n	800fd5a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800fd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd56:	025b      	lsls	r3, r3, #9
 800fd58:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fd5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd5e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	025b      	lsls	r3, r3, #9
 800fd64:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800fd66:	2390      	movs	r3, #144	; 0x90
 800fd68:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800fd6a:	2302      	movs	r3, #2
 800fd6c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f107 0214 	add.w	r2, r7, #20
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f003 fe73 	bl	8013a6c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	68da      	ldr	r2, [r3, #12]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd94:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d90a      	bls.n	800fdb2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2202      	movs	r2, #2
 800fda0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f003 fed1 	bl	8013b50 <SDMMC_CmdReadMultiBlock>
 800fdae:	6478      	str	r0, [r7, #68]	; 0x44
 800fdb0:	e009      	b.n	800fdc6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f003 fea3 	bl	8013b0a <SDMMC_CmdReadSingleBlock>
 800fdc4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800fdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d012      	beq.n	800fdf2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a84      	ldr	r2, [pc, #528]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800fdd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdda:	431a      	orrs	r2, r3
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e0f3      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800fdf6:	e058      	b.n	800feaa <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d033      	beq.n	800fe6e <HAL_SD_ReadBlocks+0x196>
 800fe06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe08:	2b1f      	cmp	r3, #31
 800fe0a:	d930      	bls.n	800fe6e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe10:	e027      	b.n	800fe62 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f003 fda0 	bl	801395c <SDMMC_ReadFIFO>
 800fe1c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800fe1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fe26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe28:	3301      	adds	r3, #1
 800fe2a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800fe2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2e:	0a1b      	lsrs	r3, r3, #8
 800fe30:	b2da      	uxtb	r2, r3
 800fe32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fe36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe38:	3301      	adds	r3, #1
 800fe3a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	0c1b      	lsrs	r3, r3, #16
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fe46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe48:	3301      	adds	r3, #1
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	0e1b      	lsrs	r3, r3, #24
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800fe56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe58:	3301      	adds	r3, #1
 800fe5a:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 800fe5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe5e:	3301      	adds	r3, #1
 800fe60:	643b      	str	r3, [r7, #64]	; 0x40
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	2b07      	cmp	r3, #7
 800fe66:	d9d4      	bls.n	800fe12 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800fe68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe6a:	3b20      	subs	r3, #32
 800fe6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800fe6e:	f7f4 fe5f 	bl	8004b30 <HAL_GetTick>
 800fe72:	4602      	mov	r2, r0
 800fe74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d902      	bls.n	800fe84 <HAL_SD_ReadBlocks+0x1ac>
 800fe7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d112      	bne.n	800feaa <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a56      	ldr	r2, [pc, #344]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800fe8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2200      	movs	r2, #0
 800fea4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800fea6:	2303      	movs	r3, #3
 800fea8:	e097      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feb0:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d09f      	beq.n	800fdf8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68da      	ldr	r2, [r3, #12]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fec6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d022      	beq.n	800ff1c <HAL_SD_ReadBlocks+0x244>
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d91f      	bls.n	800ff1c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d01b      	beq.n	800ff1c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4618      	mov	r0, r3
 800feea:	f003 fe9b 	bl	8013c24 <SDMMC_CmdStopTransfer>
 800feee:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800fef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d012      	beq.n	800ff1c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a3a      	ldr	r2, [pc, #232]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800fefc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff04:	431a      	orrs	r2, r3
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e05e      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff22:	f003 0308 	and.w	r3, r3, #8
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d012      	beq.n	800ff50 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a2d      	ldr	r2, [pc, #180]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800ff30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff36:	f043 0208 	orr.w	r2, r3, #8
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e044      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff56:	f003 0302 	and.w	r3, r3, #2
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d012      	beq.n	800ff84 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a20      	ldr	r2, [pc, #128]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800ff64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff6a:	f043 0202 	orr.w	r2, r3, #2
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	e02a      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff8a:	f003 0320 	and.w	r3, r3, #32
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d012      	beq.n	800ffb8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a13      	ldr	r2, [pc, #76]	; (800ffe4 <HAL_SD_ReadBlocks+0x30c>)
 800ff98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff9e:	f043 0220 	orr.w	r2, r3, #32
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e010      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a0a      	ldr	r2, [pc, #40]	; (800ffe8 <HAL_SD_ReadBlocks+0x310>)
 800ffbe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e006      	b.n	800ffda <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
  }
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3748      	adds	r7, #72	; 0x48
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	1fe00fff 	.word	0x1fe00fff
 800ffe8:	18000f3a 	.word	0x18000f3a

0800ffec <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b092      	sub	sp, #72	; 0x48
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	607a      	str	r2, [r7, #4]
 800fff8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fffa:	f7f4 fd99 	bl	8004b30 <HAL_GetTick>
 800fffe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d107      	bne.n	801001e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010012:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801001a:	2301      	movs	r3, #1
 801001c:	e16b      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010024:	b2db      	uxtb	r3, r3
 8010026:	2b01      	cmp	r3, #1
 8010028:	f040 815e 	bne.w	80102e8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2200      	movs	r2, #0
 8010030:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	441a      	add	r2, r3
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801003c:	429a      	cmp	r2, r3
 801003e:	d907      	bls.n	8010050 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010044:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	e152      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2203      	movs	r2, #3
 8010054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2200      	movs	r2, #0
 801005e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010064:	2b01      	cmp	r3, #1
 8010066:	d002      	beq.n	801006e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	025b      	lsls	r3, r3, #9
 801006c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801006e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010072:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	025b      	lsls	r3, r3, #9
 8010078:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801007a:	2390      	movs	r3, #144	; 0x90
 801007c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801007e:	2300      	movs	r3, #0
 8010080:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010082:	2300      	movs	r3, #0
 8010084:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010086:	2300      	movs	r3, #0
 8010088:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f107 0218 	add.w	r2, r7, #24
 8010092:	4611      	mov	r1, r2
 8010094:	4618      	mov	r0, r3
 8010096:	f003 fce9 	bl	8013a6c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80100a8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d90a      	bls.n	80100c6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2220      	movs	r2, #32
 80100b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100bc:	4618      	mov	r0, r3
 80100be:	f003 fd8d 	bl	8013bdc <SDMMC_CmdWriteMultiBlock>
 80100c2:	6478      	str	r0, [r7, #68]	; 0x44
 80100c4:	e009      	b.n	80100da <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2210      	movs	r2, #16
 80100ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100d2:	4618      	mov	r0, r3
 80100d4:	f003 fd5f 	bl	8013b96 <SDMMC_CmdWriteSingleBlock>
 80100d8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80100da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d012      	beq.n	8010106 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a86      	ldr	r2, [pc, #536]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 80100e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ee:	431a      	orrs	r2, r3
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2200      	movs	r2, #0
 8010100:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	e0f7      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801010a:	e05c      	b.n	80101c6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010116:	2b00      	cmp	r3, #0
 8010118:	d037      	beq.n	801018a <HAL_SD_WriteBlocks+0x19e>
 801011a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801011c:	2b1f      	cmp	r3, #31
 801011e:	d934      	bls.n	801018a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8010120:	2300      	movs	r3, #0
 8010122:	643b      	str	r3, [r7, #64]	; 0x40
 8010124:	e02b      	b.n	801017e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8010126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801012c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012e:	3301      	adds	r3, #1
 8010130:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	021a      	lsls	r2, r3, #8
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	4313      	orrs	r3, r2
 801013c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801013e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010140:	3301      	adds	r3, #1
 8010142:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8010144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	041a      	lsls	r2, r3, #16
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	4313      	orrs	r3, r2
 801014e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010152:	3301      	adds	r3, #1
 8010154:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8010156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	061a      	lsls	r2, r3, #24
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	4313      	orrs	r3, r2
 8010160:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8010162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010164:	3301      	adds	r3, #1
 8010166:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f107 0214 	add.w	r2, r7, #20
 8010170:	4611      	mov	r1, r2
 8010172:	4618      	mov	r0, r3
 8010174:	f003 fbff 	bl	8013976 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8010178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801017a:	3301      	adds	r3, #1
 801017c:	643b      	str	r3, [r7, #64]	; 0x40
 801017e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010180:	2b07      	cmp	r3, #7
 8010182:	d9d0      	bls.n	8010126 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8010184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010186:	3b20      	subs	r3, #32
 8010188:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801018a:	f7f4 fcd1 	bl	8004b30 <HAL_GetTick>
 801018e:	4602      	mov	r2, r0
 8010190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010196:	429a      	cmp	r2, r3
 8010198:	d902      	bls.n	80101a0 <HAL_SD_WriteBlocks+0x1b4>
 801019a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801019c:	2b00      	cmp	r3, #0
 801019e:	d112      	bne.n	80101c6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a56      	ldr	r2, [pc, #344]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 80101a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ae:	431a      	orrs	r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2201      	movs	r2, #1
 80101b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2200      	movs	r2, #0
 80101c0:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80101c2:	2303      	movs	r3, #3
 80101c4:	e097      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101cc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d09b      	beq.n	801010c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68da      	ldr	r2, [r3, #12]
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80101e2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d022      	beq.n	8010238 <HAL_SD_WriteBlocks+0x24c>
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d91f      	bls.n	8010238 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d01b      	beq.n	8010238 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4618      	mov	r0, r3
 8010206:	f003 fd0d 	bl	8013c24 <SDMMC_CmdStopTransfer>
 801020a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801020c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801020e:	2b00      	cmp	r3, #0
 8010210:	d012      	beq.n	8010238 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a3a      	ldr	r2, [pc, #232]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 8010218:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801021e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010220:	431a      	orrs	r2, r3
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8010234:	2301      	movs	r3, #1
 8010236:	e05e      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023e:	f003 0308 	and.w	r3, r3, #8
 8010242:	2b00      	cmp	r3, #0
 8010244:	d012      	beq.n	801026c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a2d      	ldr	r2, [pc, #180]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 801024c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010252:	f043 0208 	orr.w	r2, r3, #8
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2200      	movs	r2, #0
 8010266:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	e044      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010272:	f003 0302 	and.w	r3, r3, #2
 8010276:	2b00      	cmp	r3, #0
 8010278:	d012      	beq.n	80102a0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a20      	ldr	r2, [pc, #128]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 8010280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010286:	f043 0202 	orr.w	r2, r3, #2
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2201      	movs	r2, #1
 8010292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 801029c:	2301      	movs	r3, #1
 801029e:	e02a      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a6:	f003 0310 	and.w	r3, r3, #16
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d012      	beq.n	80102d4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a13      	ldr	r2, [pc, #76]	; (8010300 <HAL_SD_WriteBlocks+0x314>)
 80102b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ba:	f043 0210 	orr.w	r2, r3, #16
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80102d0:	2301      	movs	r3, #1
 80102d2:	e010      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a0a      	ldr	r2, [pc, #40]	; (8010304 <HAL_SD_WriteBlocks+0x318>)
 80102da:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	e006      	b.n	80102f6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80102f4:	2301      	movs	r3, #1
  }
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3748      	adds	r7, #72	; 0x48
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	1fe00fff 	.word	0x1fe00fff
 8010304:	18000f3a 	.word	0x18000f3a

08010308 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010316:	0f9b      	lsrs	r3, r3, #30
 8010318:	b2da      	uxtb	r2, r3
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010322:	0e9b      	lsrs	r3, r3, #26
 8010324:	b2db      	uxtb	r3, r3
 8010326:	f003 030f 	and.w	r3, r3, #15
 801032a:	b2da      	uxtb	r2, r3
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010334:	0e1b      	lsrs	r3, r3, #24
 8010336:	b2db      	uxtb	r3, r3
 8010338:	f003 0303 	and.w	r3, r3, #3
 801033c:	b2da      	uxtb	r2, r3
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010346:	0c1b      	lsrs	r3, r3, #16
 8010348:	b2da      	uxtb	r2, r3
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010352:	0a1b      	lsrs	r3, r3, #8
 8010354:	b2da      	uxtb	r2, r3
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801035e:	b2da      	uxtb	r2, r3
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010368:	0d1b      	lsrs	r3, r3, #20
 801036a:	b29a      	uxth	r2, r3
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010374:	0c1b      	lsrs	r3, r3, #16
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 030f 	and.w	r3, r3, #15
 801037c:	b2da      	uxtb	r2, r3
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010386:	0bdb      	lsrs	r3, r3, #15
 8010388:	b2db      	uxtb	r3, r3
 801038a:	f003 0301 	and.w	r3, r3, #1
 801038e:	b2da      	uxtb	r2, r3
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010398:	0b9b      	lsrs	r3, r3, #14
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f003 0301 	and.w	r3, r3, #1
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103aa:	0b5b      	lsrs	r3, r3, #13
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	b2da      	uxtb	r2, r3
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103bc:	0b1b      	lsrs	r3, r3, #12
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f003 0301 	and.w	r3, r3, #1
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	2200      	movs	r2, #0
 80103ce:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d163      	bne.n	80104a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103dc:	009a      	lsls	r2, r3, #2
 80103de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80103e2:	4013      	ands	r3, r2
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80103e8:	0f92      	lsrs	r2, r2, #30
 80103ea:	431a      	orrs	r2, r3
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103f4:	0edb      	lsrs	r3, r3, #27
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	f003 0307 	and.w	r3, r3, #7
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010406:	0e1b      	lsrs	r3, r3, #24
 8010408:	b2db      	uxtb	r3, r3
 801040a:	f003 0307 	and.w	r3, r3, #7
 801040e:	b2da      	uxtb	r2, r3
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010418:	0d5b      	lsrs	r3, r3, #21
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0307 	and.w	r3, r3, #7
 8010420:	b2da      	uxtb	r2, r3
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801042a:	0c9b      	lsrs	r3, r3, #18
 801042c:	b2db      	uxtb	r3, r3
 801042e:	f003 0307 	and.w	r3, r3, #7
 8010432:	b2da      	uxtb	r2, r3
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801043c:	0bdb      	lsrs	r3, r3, #15
 801043e:	b2db      	uxtb	r3, r3
 8010440:	f003 0307 	and.w	r3, r3, #7
 8010444:	b2da      	uxtb	r2, r3
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	7e1b      	ldrb	r3, [r3, #24]
 8010458:	b2db      	uxtb	r3, r3
 801045a:	f003 0307 	and.w	r3, r3, #7
 801045e:	3302      	adds	r3, #2
 8010460:	2201      	movs	r2, #1
 8010462:	fa02 f303 	lsl.w	r3, r2, r3
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801046a:	fb03 f202 	mul.w	r2, r3, r2
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	7a1b      	ldrb	r3, [r3, #8]
 8010476:	b2db      	uxtb	r3, r3
 8010478:	f003 030f 	and.w	r3, r3, #15
 801047c:	2201      	movs	r2, #1
 801047e:	409a      	lsls	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801048c:	0a52      	lsrs	r2, r2, #9
 801048e:	fb03 f202 	mul.w	r2, r3, r2
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f44f 7200 	mov.w	r2, #512	; 0x200
 801049c:	655a      	str	r2, [r3, #84]	; 0x54
 801049e:	e031      	b.n	8010504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d11d      	bne.n	80104e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104ac:	041b      	lsls	r3, r3, #16
 80104ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104b6:	0c1b      	lsrs	r3, r3, #16
 80104b8:	431a      	orrs	r2, r3
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	691b      	ldr	r3, [r3, #16]
 80104c2:	3301      	adds	r3, #1
 80104c4:	029a      	lsls	r2, r3, #10
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104d8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	655a      	str	r2, [r3, #84]	; 0x54
 80104e2:	e00f      	b.n	8010504 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4a58      	ldr	r2, [pc, #352]	; (801064c <HAL_SD_GetCardCSD+0x344>)
 80104ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8010500:	2301      	movs	r3, #1
 8010502:	e09d      	b.n	8010640 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010508:	0b9b      	lsrs	r3, r3, #14
 801050a:	b2db      	uxtb	r3, r3
 801050c:	f003 0301 	and.w	r3, r3, #1
 8010510:	b2da      	uxtb	r2, r3
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801051a:	09db      	lsrs	r3, r3, #7
 801051c:	b2db      	uxtb	r3, r3
 801051e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010522:	b2da      	uxtb	r2, r3
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801052c:	b2db      	uxtb	r3, r3
 801052e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010532:	b2da      	uxtb	r2, r3
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801053c:	0fdb      	lsrs	r3, r3, #31
 801053e:	b2da      	uxtb	r2, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010548:	0f5b      	lsrs	r3, r3, #29
 801054a:	b2db      	uxtb	r3, r3
 801054c:	f003 0303 	and.w	r3, r3, #3
 8010550:	b2da      	uxtb	r2, r3
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801055a:	0e9b      	lsrs	r3, r3, #26
 801055c:	b2db      	uxtb	r3, r3
 801055e:	f003 0307 	and.w	r3, r3, #7
 8010562:	b2da      	uxtb	r2, r3
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801056c:	0d9b      	lsrs	r3, r3, #22
 801056e:	b2db      	uxtb	r3, r3
 8010570:	f003 030f 	and.w	r3, r3, #15
 8010574:	b2da      	uxtb	r2, r3
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801057e:	0d5b      	lsrs	r3, r3, #21
 8010580:	b2db      	uxtb	r3, r3
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	b2da      	uxtb	r2, r3
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801059a:	0c1b      	lsrs	r3, r3, #16
 801059c:	b2db      	uxtb	r3, r3
 801059e:	f003 0301 	and.w	r3, r3, #1
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105ae:	0bdb      	lsrs	r3, r3, #15
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	f003 0301 	and.w	r3, r3, #1
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105c2:	0b9b      	lsrs	r3, r3, #14
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	f003 0301 	and.w	r3, r3, #1
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105d6:	0b5b      	lsrs	r3, r3, #13
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	b2da      	uxtb	r2, r3
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105ea:	0b1b      	lsrs	r3, r3, #12
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	f003 0301 	and.w	r3, r3, #1
 80105f2:	b2da      	uxtb	r2, r3
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105fe:	0a9b      	lsrs	r3, r3, #10
 8010600:	b2db      	uxtb	r3, r3
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	b2da      	uxtb	r2, r3
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010612:	0a1b      	lsrs	r3, r3, #8
 8010614:	b2db      	uxtb	r3, r3
 8010616:	f003 0303 	and.w	r3, r3, #3
 801061a:	b2da      	uxtb	r2, r3
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010626:	085b      	lsrs	r3, r3, #1
 8010628:	b2db      	uxtb	r3, r3
 801062a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801062e:	b2da      	uxtb	r2, r3
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2201      	movs	r2, #1
 801063a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	4618      	mov	r0, r3
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	1fe00fff 	.word	0x1fe00fff

08010650 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b094      	sub	sp, #80	; 0x50
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010666:	b2db      	uxtb	r3, r3
 8010668:	2b03      	cmp	r3, #3
 801066a:	d101      	bne.n	8010670 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 801066c:	2301      	movs	r3, #1
 801066e:	e0a7      	b.n	80107c0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8010670:	f107 0308 	add.w	r3, r7, #8
 8010674:	4619      	mov	r1, r3
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 fb62 	bl	8010d40 <SD_SendSDStatus>
 801067c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801067e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010680:	2b00      	cmp	r3, #0
 8010682:	d011      	beq.n	80106a8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a4f      	ldr	r2, [pc, #316]	; (80107c8 <HAL_SD_GetCardStatus+0x178>)
 801068a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010692:	431a      	orrs	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80106a0:	2301      	movs	r3, #1
 80106a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80106a6:	e070      	b.n	801078a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	099b      	lsrs	r3, r3, #6
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	f003 0303 	and.w	r3, r3, #3
 80106b2:	b2da      	uxtb	r2, r3
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	095b      	lsrs	r3, r3, #5
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	0a1b      	lsrs	r3, r3, #8
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	0e1b      	lsrs	r3, r3, #24
 80106d8:	b29b      	uxth	r3, r3
 80106da:	4313      	orrs	r3, r2
 80106dc:	b29a      	uxth	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	061a      	lsls	r2, r3, #24
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	021b      	lsls	r3, r3, #8
 80106ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80106ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	0a1b      	lsrs	r3, r3, #8
 80106f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80106f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	0e1b      	lsrs	r3, r3, #24
 80106fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	b2da      	uxtb	r2, r3
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	0a1b      	lsrs	r3, r3, #8
 8010710:	b2da      	uxtb	r2, r3
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	0d1b      	lsrs	r3, r3, #20
 801071a:	b2db      	uxtb	r3, r3
 801071c:	f003 030f 	and.w	r3, r3, #15
 8010720:	b2da      	uxtb	r2, r3
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	0c1b      	lsrs	r3, r3, #16
 801072a:	b29b      	uxth	r3, r3
 801072c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010730:	b29a      	uxth	r2, r3
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	b29b      	uxth	r3, r3
 8010736:	b2db      	uxtb	r3, r3
 8010738:	b29b      	uxth	r3, r3
 801073a:	4313      	orrs	r3, r2
 801073c:	b29a      	uxth	r2, r3
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	0a9b      	lsrs	r3, r3, #10
 8010746:	b2db      	uxtb	r3, r3
 8010748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801074c:	b2da      	uxtb	r2, r3
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	0a1b      	lsrs	r3, r3, #8
 8010756:	b2db      	uxtb	r3, r3
 8010758:	f003 0303 	and.w	r3, r3, #3
 801075c:	b2da      	uxtb	r2, r3
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	091b      	lsrs	r3, r3, #4
 8010766:	b2db      	uxtb	r3, r3
 8010768:	f003 030f 	and.w	r3, r3, #15
 801076c:	b2da      	uxtb	r2, r3
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 030f 	and.w	r3, r3, #15
 801077a:	b2da      	uxtb	r2, r3
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	0e1b      	lsrs	r3, r3, #24
 8010784:	b2da      	uxtb	r2, r3
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010792:	4618      	mov	r0, r3
 8010794:	f003 f996 	bl	8013ac4 <SDMMC_CmdBlockLength>
 8010798:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 801079a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00d      	beq.n	80107bc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4a08      	ldr	r2, [pc, #32]	; (80107c8 <HAL_SD_GetCardStatus+0x178>)
 80107a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ac:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80107b6:	2301      	movs	r3, #1
 80107b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80107bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3750      	adds	r7, #80	; 0x50
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	1fe00fff 	.word	0x1fe00fff

080107cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b08d      	sub	sp, #52	; 0x34
 8010828:	af02      	add	r7, sp, #8
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2203      	movs	r2, #3
 8010838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010840:	2b03      	cmp	r3, #3
 8010842:	d02e      	beq.n	80108a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801084a:	d106      	bne.n	801085a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010850:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	635a      	str	r2, [r3, #52]	; 0x34
 8010858:	e029      	b.n	80108ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010860:	d10a      	bne.n	8010878 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 fb64 	bl	8010f30 <SD_WideBus_Enable>
 8010868:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801086e:	6a3b      	ldr	r3, [r7, #32]
 8010870:	431a      	orrs	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	635a      	str	r2, [r3, #52]	; 0x34
 8010876:	e01a      	b.n	80108ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10a      	bne.n	8010894 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fba1 	bl	8010fc6 <SD_WideBus_Disable>
 8010884:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	431a      	orrs	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	635a      	str	r2, [r3, #52]	; 0x34
 8010892:	e00c      	b.n	80108ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	635a      	str	r2, [r3, #52]	; 0x34
 80108a0:	e005      	b.n	80108ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d007      	beq.n	80108c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a5f      	ldr	r2, [pc, #380]	; (8010a38 <HAL_SD_ConfigWideBusOperation+0x214>)
 80108bc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80108c4:	e096      	b.n	80109f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80108c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80108ca:	f04f 0100 	mov.w	r1, #0
 80108ce:	f7fc fec1 	bl	800d654 <HAL_RCCEx_GetPeriphCLKFreq>
 80108d2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 8083 	beq.w	80109e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	695a      	ldr	r2, [r3, #20]
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	4950      	ldr	r1, [pc, #320]	; (8010a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 80108fa:	fba1 1303 	umull	r1, r3, r1, r3
 80108fe:	0e1b      	lsrs	r3, r3, #24
 8010900:	429a      	cmp	r2, r3
 8010902:	d303      	bcc.n	801090c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	695b      	ldr	r3, [r3, #20]
 8010908:	61bb      	str	r3, [r7, #24]
 801090a:	e05a      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010914:	d103      	bne.n	801091e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	695b      	ldr	r3, [r3, #20]
 801091a:	61bb      	str	r3, [r7, #24]
 801091c:	e051      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010926:	d126      	bne.n	8010976 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10e      	bne.n	801094e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	4a43      	ldr	r2, [pc, #268]	; (8010a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d906      	bls.n	8010946 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	4a40      	ldr	r2, [pc, #256]	; (8010a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 801093c:	fba2 2303 	umull	r2, r3, r2, r3
 8010940:	0e5b      	lsrs	r3, r3, #25
 8010942:	61bb      	str	r3, [r7, #24]
 8010944:	e03d      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	61bb      	str	r3, [r7, #24]
 801094c:	e039      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	695b      	ldr	r3, [r3, #20]
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	69fa      	ldr	r2, [r7, #28]
 8010956:	fbb2 f3f3 	udiv	r3, r2, r3
 801095a:	4a39      	ldr	r2, [pc, #228]	; (8010a40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d906      	bls.n	801096e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	4a36      	ldr	r2, [pc, #216]	; (8010a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8010964:	fba2 2303 	umull	r2, r3, r2, r3
 8010968:	0e5b      	lsrs	r3, r3, #25
 801096a:	61bb      	str	r3, [r7, #24]
 801096c:	e029      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	695b      	ldr	r3, [r3, #20]
 8010972:	61bb      	str	r3, [r7, #24]
 8010974:	e025      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	695b      	ldr	r3, [r3, #20]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10e      	bne.n	801099c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	4a30      	ldr	r2, [pc, #192]	; (8010a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8010982:	4293      	cmp	r3, r2
 8010984:	d906      	bls.n	8010994 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	4a2c      	ldr	r2, [pc, #176]	; (8010a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 801098a:	fba2 2303 	umull	r2, r3, r2, r3
 801098e:	0e1b      	lsrs	r3, r3, #24
 8010990:	61bb      	str	r3, [r7, #24]
 8010992:	e016      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	695b      	ldr	r3, [r3, #20]
 8010998:	61bb      	str	r3, [r7, #24]
 801099a:	e012      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	005b      	lsls	r3, r3, #1
 80109a2:	69fa      	ldr	r2, [r7, #28]
 80109a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80109a8:	4a26      	ldr	r2, [pc, #152]	; (8010a44 <HAL_SD_ConfigWideBusOperation+0x220>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d906      	bls.n	80109bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80109ae:	69fb      	ldr	r3, [r7, #28]
 80109b0:	4a22      	ldr	r2, [pc, #136]	; (8010a3c <HAL_SD_ConfigWideBusOperation+0x218>)
 80109b2:	fba2 2303 	umull	r2, r3, r2, r3
 80109b6:	0e1b      	lsrs	r3, r3, #24
 80109b8:	61bb      	str	r3, [r7, #24]
 80109ba:	e002      	b.n	80109c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	695b      	ldr	r3, [r3, #20]
 80109c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681c      	ldr	r4, [r3, #0]
 80109c6:	466a      	mov	r2, sp
 80109c8:	f107 0314 	add.w	r3, r7, #20
 80109cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109d0:	e882 0003 	stmia.w	r2, {r0, r1}
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109da:	4620      	mov	r0, r4
 80109dc:	f002 ff94 	bl	8013908 <SDMMC_Init>
 80109e0:	e008      	b.n	80109f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80109ee:	2301      	movs	r3, #1
 80109f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109fc:	4618      	mov	r0, r3
 80109fe:	f003 f861 	bl	8013ac4 <SDMMC_CmdBlockLength>
 8010a02:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a04:	6a3b      	ldr	r3, [r7, #32]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00c      	beq.n	8010a24 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a0a      	ldr	r2, [pc, #40]	; (8010a38 <HAL_SD_ConfigWideBusOperation+0x214>)
 8010a10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	431a      	orrs	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8010a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	372c      	adds	r7, #44	; 0x2c
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd90      	pop	{r4, r7, pc}
 8010a38:	1fe00fff 	.word	0x1fe00fff
 8010a3c:	55e63b89 	.word	0x55e63b89
 8010a40:	02faf080 	.word	0x02faf080
 8010a44:	017d7840 	.word	0x017d7840

08010a48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8010a54:	f107 030c 	add.w	r3, r7, #12
 8010a58:	4619      	mov	r1, r3
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 fa40 	bl	8010ee0 <SD_SendStatus>
 8010a60:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d005      	beq.n	8010a74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	0a5b      	lsrs	r3, r3, #9
 8010a78:	f003 030f 	and.w	r3, r3, #15
 8010a7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8010a7e:	693b      	ldr	r3, [r7, #16]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3718      	adds	r7, #24
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b090      	sub	sp, #64	; 0x40
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8010a90:	2300      	movs	r3, #0
 8010a92:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8010a94:	f7f4 f84c 	bl	8004b30 <HAL_GetTick>
 8010a98:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f002 ff8b 	bl	80139ba <SDMMC_GetPowerState>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d102      	bne.n	8010ab0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010aaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010aae:	e0b5      	b.n	8010c1c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d02e      	beq.n	8010b16 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f003 f9d6 	bl	8013e6e <SDMMC_CmdSendCID>
 8010ac2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <SD_InitCard+0x46>
    {
      return errorstate;
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	e0a6      	b.n	8010c1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f002 ffb6 	bl	8013a46 <SDMMC_GetResponse>
 8010ada:	4602      	mov	r2, r0
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2104      	movs	r1, #4
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f002 ffad 	bl	8013a46 <SDMMC_GetResponse>
 8010aec:	4602      	mov	r2, r0
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2108      	movs	r1, #8
 8010af8:	4618      	mov	r0, r3
 8010afa:	f002 ffa4 	bl	8013a46 <SDMMC_GetResponse>
 8010afe:	4602      	mov	r2, r0
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	210c      	movs	r1, #12
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f002 ff9b 	bl	8013a46 <SDMMC_GetResponse>
 8010b10:	4602      	mov	r2, r0
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1a:	2b03      	cmp	r3, #3
 8010b1c:	d01d      	beq.n	8010b5a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8010b1e:	e019      	b.n	8010b54 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f107 020a 	add.w	r2, r7, #10
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f003 f9de 	bl	8013eec <SDMMC_CmdSetRelAdd>
 8010b30:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8010b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <SD_InitCard+0xb4>
      {
        return errorstate;
 8010b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3a:	e06f      	b.n	8010c1c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8010b3c:	f7f3 fff8 	bl	8004b30 <HAL_GetTick>
 8010b40:	4602      	mov	r2, r0
 8010b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b44:	1ad3      	subs	r3, r2, r3
 8010b46:	f241 3287 	movw	r2, #4999	; 0x1387
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d902      	bls.n	8010b54 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8010b4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b52:	e063      	b.n	8010c1c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8010b54:	897b      	ldrh	r3, [r7, #10]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d0e2      	beq.n	8010b20 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b5e:	2b03      	cmp	r3, #3
 8010b60:	d036      	beq.n	8010bd0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8010b62:	897b      	ldrh	r3, [r7, #10]
 8010b64:	461a      	mov	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b72:	041b      	lsls	r3, r3, #16
 8010b74:	4619      	mov	r1, r3
 8010b76:	4610      	mov	r0, r2
 8010b78:	f003 f998 	bl	8013eac <SDMMC_CmdSendCSD>
 8010b7c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8010b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <SD_InitCard+0x100>
    {
      return errorstate;
 8010b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b86:	e049      	b.n	8010c1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f002 ff59 	bl	8013a46 <SDMMC_GetResponse>
 8010b94:	4602      	mov	r2, r0
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2104      	movs	r1, #4
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f002 ff50 	bl	8013a46 <SDMMC_GetResponse>
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2108      	movs	r1, #8
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f002 ff47 	bl	8013a46 <SDMMC_GetResponse>
 8010bb8:	4602      	mov	r2, r0
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	210c      	movs	r1, #12
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f002 ff3e 	bl	8013a46 <SDMMC_GetResponse>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2104      	movs	r1, #4
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f002 ff35 	bl	8013a46 <SDMMC_GetResponse>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	0d1a      	lsrs	r2, r3, #20
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010be4:	f107 030c 	add.w	r3, r7, #12
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7ff fb8c 	bl	8010308 <HAL_SD_GetCardCSD>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d002      	beq.n	8010bfc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010bf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010bfa:	e00f      	b.n	8010c1c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c04:	041b      	lsls	r3, r3, #16
 8010c06:	4619      	mov	r1, r3
 8010c08:	4610      	mov	r0, r2
 8010c0a:	f003 f847 	bl	8013c9c <SDMMC_CmdSelDesel>
 8010c0e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d001      	beq.n	8010c1a <SD_InitCard+0x192>
  {
    return errorstate;
 8010c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c18:	e000      	b.n	8010c1c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3740      	adds	r7, #64	; 0x40
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b086      	sub	sp, #24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8010c30:	2300      	movs	r3, #0
 8010c32:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8010c34:	2300      	movs	r3, #0
 8010c36:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f003 f850 	bl	8013ce2 <SDMMC_CmdGoIdleState>
 8010c42:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d001      	beq.n	8010c4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	e072      	b.n	8010d34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f003 f863 	bl	8013d1e <SDMMC_CmdOperCond>
 8010c58:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c60:	d10d      	bne.n	8010c7e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f003 f838 	bl	8013ce2 <SDMMC_CmdGoIdleState>
 8010c72:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d004      	beq.n	8010c84 <SD_PowerON+0x60>
    {
      return errorstate;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	e05a      	b.n	8010d34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2201      	movs	r2, #1
 8010c82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d137      	bne.n	8010cfc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2100      	movs	r1, #0
 8010c92:	4618      	mov	r0, r3
 8010c94:	f003 f863 	bl	8013d5e <SDMMC_CmdAppCommand>
 8010c98:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d02d      	beq.n	8010cfc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010ca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ca4:	e046      	b.n	8010d34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2100      	movs	r1, #0
 8010cac:	4618      	mov	r0, r3
 8010cae:	f003 f856 	bl	8013d5e <SDMMC_CmdAppCommand>
 8010cb2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <SD_PowerON+0x9a>
    {
      return errorstate;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	e03a      	b.n	8010d34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	491e      	ldr	r1, [pc, #120]	; (8010d3c <SD_PowerON+0x118>)
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f003 f86d 	bl	8013da4 <SDMMC_CmdAppOperCommand>
 8010cca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d002      	beq.n	8010cd8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010cd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010cd6:	e02d      	b.n	8010d34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2100      	movs	r1, #0
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f002 feb1 	bl	8013a46 <SDMMC_GetResponse>
 8010ce4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	0fdb      	lsrs	r3, r3, #31
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d101      	bne.n	8010cf2 <SD_PowerON+0xce>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e000      	b.n	8010cf4 <SD_PowerON+0xd0>
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	613b      	str	r3, [r7, #16]

    count++;
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d802      	bhi.n	8010d0c <SD_PowerON+0xe8>
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d0cc      	beq.n	8010ca6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d902      	bls.n	8010d1c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8010d16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010d1a:	e00b      	b.n	8010d34 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d002      	beq.n	8010d32 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3718      	adds	r7, #24
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	c1100000 	.word	0xc1100000

08010d40 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08c      	sub	sp, #48	; 0x30
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010d4a:	f7f3 fef1 	bl	8004b30 <HAL_GetTick>
 8010d4e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	2100      	movs	r1, #0
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f002 fe73 	bl	8013a46 <SDMMC_GetResponse>
 8010d60:	4603      	mov	r3, r0
 8010d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d6a:	d102      	bne.n	8010d72 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d70:	e0b0      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2140      	movs	r1, #64	; 0x40
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f002 fea3 	bl	8013ac4 <SDMMC_CmdBlockLength>
 8010d7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010d80:	6a3b      	ldr	r3, [r7, #32]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d005      	beq.n	8010d92 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	e0a0      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d9a:	041b      	lsls	r3, r3, #16
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f002 ffdd 	bl	8013d5e <SDMMC_CmdAppCommand>
 8010da4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010da6:	6a3b      	ldr	r3, [r7, #32]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d005      	beq.n	8010db8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010db4:	6a3b      	ldr	r3, [r7, #32]
 8010db6:	e08d      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dbc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8010dbe:	2340      	movs	r3, #64	; 0x40
 8010dc0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8010dc2:	2360      	movs	r3, #96	; 0x60
 8010dc4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010dc6:	2302      	movs	r3, #2
 8010dc8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f107 0208 	add.w	r2, r7, #8
 8010dda:	4611      	mov	r1, r2
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f002 fe45 	bl	8013a6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f003 f8c5 	bl	8013f76 <SDMMC_CmdStatusRegister>
 8010dec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010dee:	6a3b      	ldr	r3, [r7, #32]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d02b      	beq.n	8010e4c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8010dfc:	6a3b      	ldr	r3, [r7, #32]
 8010dfe:	e069      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d013      	beq.n	8010e36 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8010e0e:	2300      	movs	r3, #0
 8010e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e12:	e00d      	b.n	8010e30 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f002 fd9f 	bl	801395c <SDMMC_ReadFIFO>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	601a      	str	r2, [r3, #0]
        pData++;
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	3304      	adds	r3, #4
 8010e28:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8010e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e32:	2b07      	cmp	r3, #7
 8010e34:	d9ee      	bls.n	8010e14 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010e36:	f7f3 fe7b 	bl	8004b30 <HAL_GetTick>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e44:	d102      	bne.n	8010e4c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e4a:	e043      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0d2      	beq.n	8010e00 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e60:	f003 0308 	and.w	r3, r3, #8
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010e68:	2308      	movs	r3, #8
 8010e6a:	e033      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	e02a      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e84:	f003 0320 	and.w	r3, r3, #32
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d017      	beq.n	8010ebc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8010e8c:	2320      	movs	r3, #32
 8010e8e:	e021      	b.n	8010ed4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f002 fd61 	bl	801395c <SDMMC_ReadFIFO>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9e:	601a      	str	r2, [r3, #0]
    pData++;
 8010ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010ea6:	f7f3 fe43 	bl	8004b30 <HAL_GetTick>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010eb4:	d102      	bne.n	8010ebc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8010eb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010eba:	e00b      	b.n	8010ed4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1e2      	bne.n	8010e90 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a03      	ldr	r2, [pc, #12]	; (8010edc <SD_SendSDStatus+0x19c>)
 8010ed0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3730      	adds	r7, #48	; 0x30
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	18000f3a 	.word	0x18000f3a

08010ee0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d102      	bne.n	8010ef6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8010ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010ef4:	e018      	b.n	8010f28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010efe:	041b      	lsls	r3, r3, #16
 8010f00:	4619      	mov	r1, r3
 8010f02:	4610      	mov	r0, r2
 8010f04:	f003 f814 	bl	8013f30 <SDMMC_CmdSendStatus>
 8010f08:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <SD_SendStatus+0x34>
  {
    return errorstate;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	e009      	b.n	8010f28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2100      	movs	r1, #0
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f002 fd93 	bl	8013a46 <SDMMC_GetResponse>
 8010f20:	4602      	mov	r2, r0
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2100      	movs	r1, #0
 8010f46:	4618      	mov	r0, r3
 8010f48:	f002 fd7d 	bl	8013a46 <SDMMC_GetResponse>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010f56:	d102      	bne.n	8010f5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f5c:	e02f      	b.n	8010fbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010f5e:	f107 030c 	add.w	r3, r7, #12
 8010f62:	4619      	mov	r1, r3
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 f879 	bl	801105c <SD_FindSCR>
 8010f6a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d001      	beq.n	8010f76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	e023      	b.n	8010fbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d01c      	beq.n	8010fba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f88:	041b      	lsls	r3, r3, #16
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	4610      	mov	r0, r2
 8010f8e:	f002 fee6 	bl	8013d5e <SDMMC_CmdAppCommand>
 8010f92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	e00f      	b.n	8010fbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2102      	movs	r1, #2
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f002 ff1d 	bl	8013de4 <SDMMC_CmdBusWidth>
 8010faa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d001      	beq.n	8010fb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	e003      	b.n	8010fbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e001      	b.n	8010fbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010fba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3718      	adds	r7, #24
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b086      	sub	sp, #24
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8010fce:	2300      	movs	r3, #0
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2100      	movs	r1, #0
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f002 fd32 	bl	8013a46 <SDMMC_GetResponse>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010fec:	d102      	bne.n	8010ff4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8010fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ff2:	e02f      	b.n	8011054 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8010ff4:	f107 030c 	add.w	r3, r7, #12
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 f82e 	bl	801105c <SD_FindSCR>
 8011000:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d001      	beq.n	801100c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	e023      	b.n	8011054 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011012:	2b00      	cmp	r3, #0
 8011014:	d01c      	beq.n	8011050 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801101e:	041b      	lsls	r3, r3, #16
 8011020:	4619      	mov	r1, r3
 8011022:	4610      	mov	r0, r2
 8011024:	f002 fe9b 	bl	8013d5e <SDMMC_CmdAppCommand>
 8011028:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d001      	beq.n	8011034 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	e00f      	b.n	8011054 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2100      	movs	r1, #0
 801103a:	4618      	mov	r0, r3
 801103c:	f002 fed2 	bl	8013de4 <SDMMC_CmdBusWidth>
 8011040:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	e003      	b.n	8011054 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801104c:	2300      	movs	r3, #0
 801104e:	e001      	b.n	8011054 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011050:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011054:	4618      	mov	r0, r3
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b08e      	sub	sp, #56	; 0x38
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011066:	f7f3 fd63 	bl	8004b30 <HAL_GetTick>
 801106a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 801106c:	2300      	movs	r3, #0
 801106e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8011070:	2300      	movs	r3, #0
 8011072:	60bb      	str	r3, [r7, #8]
 8011074:	2300      	movs	r3, #0
 8011076:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2108      	movs	r1, #8
 8011082:	4618      	mov	r0, r3
 8011084:	f002 fd1e 	bl	8013ac4 <SDMMC_CmdBlockLength>
 8011088:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	2b00      	cmp	r3, #0
 801108e:	d001      	beq.n	8011094 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011092:	e0ad      	b.n	80111f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801109c:	041b      	lsls	r3, r3, #16
 801109e:	4619      	mov	r1, r3
 80110a0:	4610      	mov	r0, r2
 80110a2:	f002 fe5c 	bl	8013d5e <SDMMC_CmdAppCommand>
 80110a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d001      	beq.n	80110b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	e09e      	b.n	80111f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80110b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80110b8:	2308      	movs	r3, #8
 80110ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80110bc:	2330      	movs	r3, #48	; 0x30
 80110be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80110c0:	2302      	movs	r3, #2
 80110c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80110c8:	2301      	movs	r3, #1
 80110ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f107 0210 	add.w	r2, r7, #16
 80110d4:	4611      	mov	r1, r2
 80110d6:	4618      	mov	r0, r3
 80110d8:	f002 fcc8 	bl	8013a6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f002 fea2 	bl	8013e2a <SDMMC_CmdSendSCR>
 80110e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d027      	beq.n	801113e <SD_FindSCR+0xe2>
  {
    return errorstate;
 80110ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f0:	e07e      	b.n	80111f0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d113      	bne.n	8011128 <SD_FindSCR+0xcc>
 8011100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011102:	2b00      	cmp	r3, #0
 8011104:	d110      	bne.n	8011128 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4618      	mov	r0, r3
 801110c:	f002 fc26 	bl	801395c <SDMMC_ReadFIFO>
 8011110:	4603      	mov	r3, r0
 8011112:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4618      	mov	r0, r3
 801111a:	f002 fc1f 	bl	801395c <SDMMC_ReadFIFO>
 801111e:	4603      	mov	r3, r0
 8011120:	60fb      	str	r3, [r7, #12]
      index++;
 8011122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011124:	3301      	adds	r3, #1
 8011126:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011128:	f7f3 fd02 	bl	8004b30 <HAL_GetTick>
 801112c:	4602      	mov	r2, r0
 801112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011136:	d102      	bne.n	801113e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011138:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801113c:	e058      	b.n	80111f0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011144:	f240 532a 	movw	r3, #1322	; 0x52a
 8011148:	4013      	ands	r3, r2
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0d1      	beq.n	80110f2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011154:	f003 0308 	and.w	r3, r3, #8
 8011158:	2b00      	cmp	r3, #0
 801115a:	d005      	beq.n	8011168 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2208      	movs	r2, #8
 8011162:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011164:	2308      	movs	r3, #8
 8011166:	e043      	b.n	80111f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116e:	f003 0302 	and.w	r3, r3, #2
 8011172:	2b00      	cmp	r3, #0
 8011174:	d005      	beq.n	8011182 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2202      	movs	r2, #2
 801117c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801117e:	2302      	movs	r3, #2
 8011180:	e036      	b.n	80111f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011188:	f003 0320 	and.w	r3, r3, #32
 801118c:	2b00      	cmp	r3, #0
 801118e:	d005      	beq.n	801119c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2220      	movs	r2, #32
 8011196:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011198:	2320      	movs	r3, #32
 801119a:	e029      	b.n	80111f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4a15      	ldr	r2, [pc, #84]	; (80111f8 <SD_FindSCR+0x19c>)
 80111a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	061a      	lsls	r2, r3, #24
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	021b      	lsls	r3, r3, #8
 80111ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80111b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	0a1b      	lsrs	r3, r3, #8
 80111b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80111ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	0e1b      	lsrs	r3, r3, #24
 80111c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c4:	601a      	str	r2, [r3, #0]
    scr++;
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	3304      	adds	r3, #4
 80111ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	061a      	lsls	r2, r3, #24
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	021b      	lsls	r3, r3, #8
 80111d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80111d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	0a1b      	lsrs	r3, r3, #8
 80111de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80111e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	0e1b      	lsrs	r3, r3, #24
 80111e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80111ee:	2300      	movs	r3, #0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3738      	adds	r7, #56	; 0x38
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	18000f3a 	.word	0x18000f3a

080111fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d101      	bne.n	8011210 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 801120c:	2301      	movs	r3, #1
 801120e:	e02b      	b.n	8011268 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011216:	b2db      	uxtb	r3, r3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d106      	bne.n	801122a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7f0 fff5 	bl	8002214 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2202      	movs	r2, #2
 801122e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	3304      	adds	r3, #4
 801123a:	4619      	mov	r1, r3
 801123c:	4610      	mov	r0, r2
 801123e:	f002 fa61 	bl	8013704 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	461a      	mov	r2, r3
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	f002 fab5 	bl	80137bc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011252:	4b07      	ldr	r3, [pc, #28]	; (8011270 <HAL_SDRAM_Init+0x74>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4a06      	ldr	r2, [pc, #24]	; (8011270 <HAL_SDRAM_Init+0x74>)
 8011258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801125c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2201      	movs	r2, #1
 8011262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	52004000 	.word	0x52004000

08011274 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011286:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011288:	7dfb      	ldrb	r3, [r7, #23]
 801128a:	2b02      	cmp	r3, #2
 801128c:	d101      	bne.n	8011292 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801128e:	2302      	movs	r3, #2
 8011290:	e021      	b.n	80112d6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8011292:	7dfb      	ldrb	r3, [r7, #23]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d002      	beq.n	801129e <HAL_SDRAM_SendCommand+0x2a>
 8011298:	7dfb      	ldrb	r3, [r7, #23]
 801129a:	2b05      	cmp	r3, #5
 801129c:	d118      	bne.n	80112d0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2202      	movs	r2, #2
 80112a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	68b9      	ldr	r1, [r7, #8]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f002 faee 	bl	8013890 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d104      	bne.n	80112c6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2205      	movs	r2, #5
 80112c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112c4:	e006      	b.n	80112d4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2201      	movs	r2, #1
 80112ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80112ce:	e001      	b.n	80112d4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80112d0:	2301      	movs	r3, #1
 80112d2:	e000      	b.n	80112d6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80112d4:	2300      	movs	r3, #0
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
 80112e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d101      	bne.n	80112f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80112f4:	2302      	movs	r3, #2
 80112f6:	e016      	b.n	8011326 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b01      	cmp	r3, #1
 8011302:	d10f      	bne.n	8011324 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2202      	movs	r2, #2
 8011308:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	4618      	mov	r0, r3
 8011314:	f002 fae0 	bl	80138d8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2201      	movs	r2, #1
 801131c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011320:	2300      	movs	r3, #0
 8011322:	e000      	b.n	8011326 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011324:	2301      	movs	r3, #1
}
 8011326:	4618      	mov	r0, r3
 8011328:	3708      	adds	r7, #8
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
	...

08011330 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d101      	bne.n	8011342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801133e:	2301      	movs	r3, #1
 8011340:	e10f      	b.n	8011562 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a87      	ldr	r2, [pc, #540]	; (801156c <HAL_SPI_Init+0x23c>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d00f      	beq.n	8011372 <HAL_SPI_Init+0x42>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4a86      	ldr	r2, [pc, #536]	; (8011570 <HAL_SPI_Init+0x240>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d00a      	beq.n	8011372 <HAL_SPI_Init+0x42>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a84      	ldr	r2, [pc, #528]	; (8011574 <HAL_SPI_Init+0x244>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d005      	beq.n	8011372 <HAL_SPI_Init+0x42>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	2b0f      	cmp	r3, #15
 801136c:	d901      	bls.n	8011372 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e0f7      	b.n	8011562 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f000 f900 	bl	8011578 <SPI_GetPacketSize>
 8011378:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a7b      	ldr	r2, [pc, #492]	; (801156c <HAL_SPI_Init+0x23c>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d00c      	beq.n	801139e <HAL_SPI_Init+0x6e>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4a79      	ldr	r2, [pc, #484]	; (8011570 <HAL_SPI_Init+0x240>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d007      	beq.n	801139e <HAL_SPI_Init+0x6e>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a78      	ldr	r2, [pc, #480]	; (8011574 <HAL_SPI_Init+0x244>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d002      	beq.n	801139e <HAL_SPI_Init+0x6e>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2b08      	cmp	r3, #8
 801139c:	d811      	bhi.n	80113c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80113a2:	4a72      	ldr	r2, [pc, #456]	; (801156c <HAL_SPI_Init+0x23c>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d009      	beq.n	80113bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a70      	ldr	r2, [pc, #448]	; (8011570 <HAL_SPI_Init+0x240>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d004      	beq.n	80113bc <HAL_SPI_Init+0x8c>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4a6f      	ldr	r2, [pc, #444]	; (8011574 <HAL_SPI_Init+0x244>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d104      	bne.n	80113c6 <HAL_SPI_Init+0x96>
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2b10      	cmp	r3, #16
 80113c0:	d901      	bls.n	80113c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80113c2:	2301      	movs	r3, #1
 80113c4:	e0cd      	b.n	8011562 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d106      	bne.n	80113e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7f1 ff32 	bl	8003244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2202      	movs	r2, #2
 80113e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	f022 0201 	bic.w	r2, r2, #1
 80113f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011402:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	699b      	ldr	r3, [r3, #24]
 8011408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801140c:	d119      	bne.n	8011442 <HAL_SPI_Init+0x112>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011416:	d103      	bne.n	8011420 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801141c:	2b00      	cmp	r3, #0
 801141e:	d008      	beq.n	8011432 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10c      	bne.n	8011442 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801142c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011430:	d107      	bne.n	8011442 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011440:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00f      	beq.n	801146e <HAL_SPI_Init+0x13e>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	2b06      	cmp	r3, #6
 8011454:	d90b      	bls.n	801146e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	430a      	orrs	r2, r1
 801146a:	601a      	str	r2, [r3, #0]
 801146c:	e007      	b.n	801147e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801147c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	69da      	ldr	r2, [r3, #28]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011486:	431a      	orrs	r2, r3
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	431a      	orrs	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011490:	ea42 0103 	orr.w	r1, r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68da      	ldr	r2, [r3, #12]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	430a      	orrs	r2, r1
 801149e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a8:	431a      	orrs	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ae:	431a      	orrs	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	699b      	ldr	r3, [r3, #24]
 80114b4:	431a      	orrs	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	691b      	ldr	r3, [r3, #16]
 80114ba:	431a      	orrs	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	695b      	ldr	r3, [r3, #20]
 80114c0:	431a      	orrs	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a1b      	ldr	r3, [r3, #32]
 80114c6:	431a      	orrs	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	431a      	orrs	r2, r3
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114d2:	431a      	orrs	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	689b      	ldr	r3, [r3, #8]
 80114d8:	431a      	orrs	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114de:	ea42 0103 	orr.w	r1, r2, r3
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	430a      	orrs	r2, r1
 80114ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d113      	bne.n	801151e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011508:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	689b      	ldr	r3, [r3, #8]
 8011510:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801151c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f022 0201 	bic.w	r2, r2, #1
 801152c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011536:	2b00      	cmp	r3, #0
 8011538:	d00a      	beq.n	8011550 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	430a      	orrs	r2, r1
 801154e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2201      	movs	r2, #1
 801155c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	40013000 	.word	0x40013000
 8011570:	40003800 	.word	0x40003800
 8011574:	40003c00 	.word	0x40003c00

08011578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011584:	095b      	lsrs	r3, r3, #5
 8011586:	3301      	adds	r3, #1
 8011588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	3301      	adds	r3, #1
 8011590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	3307      	adds	r3, #7
 8011596:	08db      	lsrs	r3, r3, #3
 8011598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	fb02 f303 	mul.w	r3, r2, r3
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3714      	adds	r7, #20
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b082      	sub	sp, #8
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d101      	bne.n	80115c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	e049      	b.n	8011654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d106      	bne.n	80115da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7f2 f9cd 	bl	8003974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2202      	movs	r2, #2
 80115de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	3304      	adds	r3, #4
 80115ea:	4619      	mov	r1, r3
 80115ec:	4610      	mov	r0, r2
 80115ee:	f000 fa99 	bl	8011b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2201      	movs	r2, #1
 80115fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2201      	movs	r2, #1
 801160e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2201      	movs	r2, #1
 8011616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2201      	movs	r2, #1
 801161e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2201      	movs	r2, #1
 8011626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2201      	movs	r2, #1
 801163e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2201      	movs	r2, #1
 8011646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2201      	movs	r2, #1
 801164e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d101      	bne.n	801166e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	e049      	b.n	8011702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d106      	bne.n	8011688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2200      	movs	r2, #0
 801167e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7f2 f954 	bl	8003930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2202      	movs	r2, #2
 801168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	3304      	adds	r3, #4
 8011698:	4619      	mov	r1, r3
 801169a:	4610      	mov	r0, r2
 801169c:	f000 fa42 	bl	8011b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2201      	movs	r2, #1
 80116a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2201      	movs	r2, #1
 80116ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2201      	movs	r2, #1
 80116bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2201      	movs	r2, #1
 80116c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2201      	movs	r2, #1
 80116e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011722:	2b01      	cmp	r3, #1
 8011724:	d101      	bne.n	801172a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011726:	2302      	movs	r3, #2
 8011728:	e0ff      	b.n	801192a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2201      	movs	r2, #1
 801172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2b14      	cmp	r3, #20
 8011736:	f200 80f0 	bhi.w	801191a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801173a:	a201      	add	r2, pc, #4	; (adr r2, 8011740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011740:	08011795 	.word	0x08011795
 8011744:	0801191b 	.word	0x0801191b
 8011748:	0801191b 	.word	0x0801191b
 801174c:	0801191b 	.word	0x0801191b
 8011750:	080117d5 	.word	0x080117d5
 8011754:	0801191b 	.word	0x0801191b
 8011758:	0801191b 	.word	0x0801191b
 801175c:	0801191b 	.word	0x0801191b
 8011760:	08011817 	.word	0x08011817
 8011764:	0801191b 	.word	0x0801191b
 8011768:	0801191b 	.word	0x0801191b
 801176c:	0801191b 	.word	0x0801191b
 8011770:	08011857 	.word	0x08011857
 8011774:	0801191b 	.word	0x0801191b
 8011778:	0801191b 	.word	0x0801191b
 801177c:	0801191b 	.word	0x0801191b
 8011780:	08011899 	.word	0x08011899
 8011784:	0801191b 	.word	0x0801191b
 8011788:	0801191b 	.word	0x0801191b
 801178c:	0801191b 	.word	0x0801191b
 8011790:	080118d9 	.word	0x080118d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	68b9      	ldr	r1, [r7, #8]
 801179a:	4618      	mov	r0, r3
 801179c:	f000 fa5c 	bl	8011c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	699a      	ldr	r2, [r3, #24]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f042 0208 	orr.w	r2, r2, #8
 80117ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	699a      	ldr	r2, [r3, #24]
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f022 0204 	bic.w	r2, r2, #4
 80117be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	6999      	ldr	r1, [r3, #24]
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	691a      	ldr	r2, [r3, #16]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	430a      	orrs	r2, r1
 80117d0:	619a      	str	r2, [r3, #24]
      break;
 80117d2:	e0a5      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	68b9      	ldr	r1, [r7, #8]
 80117da:	4618      	mov	r0, r3
 80117dc:	f000 facc 	bl	8011d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	699a      	ldr	r2, [r3, #24]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	699a      	ldr	r2, [r3, #24]
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80117fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	6999      	ldr	r1, [r3, #24]
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	691b      	ldr	r3, [r3, #16]
 801180a:	021a      	lsls	r2, r3, #8
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	430a      	orrs	r2, r1
 8011812:	619a      	str	r2, [r3, #24]
      break;
 8011814:	e084      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	68b9      	ldr	r1, [r7, #8]
 801181c:	4618      	mov	r0, r3
 801181e:	f000 fb35 	bl	8011e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	69da      	ldr	r2, [r3, #28]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f042 0208 	orr.w	r2, r2, #8
 8011830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	69da      	ldr	r2, [r3, #28]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f022 0204 	bic.w	r2, r2, #4
 8011840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	69d9      	ldr	r1, [r3, #28]
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	691a      	ldr	r2, [r3, #16]
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	430a      	orrs	r2, r1
 8011852:	61da      	str	r2, [r3, #28]
      break;
 8011854:	e064      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	68b9      	ldr	r1, [r7, #8]
 801185c:	4618      	mov	r0, r3
 801185e:	f000 fb9d 	bl	8011f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	69da      	ldr	r2, [r3, #28]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	69da      	ldr	r2, [r3, #28]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	69d9      	ldr	r1, [r3, #28]
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	691b      	ldr	r3, [r3, #16]
 801188c:	021a      	lsls	r2, r3, #8
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	430a      	orrs	r2, r1
 8011894:	61da      	str	r2, [r3, #28]
      break;
 8011896:	e043      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	68b9      	ldr	r1, [r7, #8]
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 fbe6 	bl	8012070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f042 0208 	orr.w	r2, r2, #8
 80118b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f022 0204 	bic.w	r2, r2, #4
 80118c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	691a      	ldr	r2, [r3, #16]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	430a      	orrs	r2, r1
 80118d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80118d6:	e023      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	68b9      	ldr	r1, [r7, #8]
 80118de:	4618      	mov	r0, r3
 80118e0:	f000 fc2a 	bl	8012138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80118f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	021a      	lsls	r2, r3, #8
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	430a      	orrs	r2, r1
 8011916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011918:	e002      	b.n	8011920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801191a:	2301      	movs	r3, #1
 801191c:	75fb      	strb	r3, [r7, #23]
      break;
 801191e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011928:	7dfb      	ldrb	r3, [r7, #23]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3718      	adds	r7, #24
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop

08011934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801193e:	2300      	movs	r3, #0
 8011940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011948:	2b01      	cmp	r3, #1
 801194a:	d101      	bne.n	8011950 <HAL_TIM_ConfigClockSource+0x1c>
 801194c:	2302      	movs	r3, #2
 801194e:	e0dc      	b.n	8011b0a <HAL_TIM_ConfigClockSource+0x1d6>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2201      	movs	r2, #1
 8011954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2202      	movs	r2, #2
 801195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011968:	68ba      	ldr	r2, [r7, #8]
 801196a:	4b6a      	ldr	r3, [pc, #424]	; (8011b14 <HAL_TIM_ConfigClockSource+0x1e0>)
 801196c:	4013      	ands	r3, r2
 801196e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4a64      	ldr	r2, [pc, #400]	; (8011b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011986:	4293      	cmp	r3, r2
 8011988:	f000 80a9 	beq.w	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 801198c:	4a62      	ldr	r2, [pc, #392]	; (8011b18 <HAL_TIM_ConfigClockSource+0x1e4>)
 801198e:	4293      	cmp	r3, r2
 8011990:	f200 80ae 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011994:	4a61      	ldr	r2, [pc, #388]	; (8011b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8011996:	4293      	cmp	r3, r2
 8011998:	f000 80a1 	beq.w	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 801199c:	4a5f      	ldr	r2, [pc, #380]	; (8011b1c <HAL_TIM_ConfigClockSource+0x1e8>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	f200 80a6 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119a4:	4a5e      	ldr	r2, [pc, #376]	; (8011b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	f000 8099 	beq.w	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 80119ac:	4a5c      	ldr	r2, [pc, #368]	; (8011b20 <HAL_TIM_ConfigClockSource+0x1ec>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	f200 809e 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80119b8:	f000 8091 	beq.w	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 80119bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80119c0:	f200 8096 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119c8:	f000 8089 	beq.w	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 80119cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119d0:	f200 808e 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80119d8:	d03e      	beq.n	8011a58 <HAL_TIM_ConfigClockSource+0x124>
 80119da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80119de:	f200 8087 	bhi.w	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119e6:	f000 8086 	beq.w	8011af6 <HAL_TIM_ConfigClockSource+0x1c2>
 80119ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119ee:	d87f      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119f0:	2b70      	cmp	r3, #112	; 0x70
 80119f2:	d01a      	beq.n	8011a2a <HAL_TIM_ConfigClockSource+0xf6>
 80119f4:	2b70      	cmp	r3, #112	; 0x70
 80119f6:	d87b      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 80119f8:	2b60      	cmp	r3, #96	; 0x60
 80119fa:	d050      	beq.n	8011a9e <HAL_TIM_ConfigClockSource+0x16a>
 80119fc:	2b60      	cmp	r3, #96	; 0x60
 80119fe:	d877      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011a00:	2b50      	cmp	r3, #80	; 0x50
 8011a02:	d03c      	beq.n	8011a7e <HAL_TIM_ConfigClockSource+0x14a>
 8011a04:	2b50      	cmp	r3, #80	; 0x50
 8011a06:	d873      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011a08:	2b40      	cmp	r3, #64	; 0x40
 8011a0a:	d058      	beq.n	8011abe <HAL_TIM_ConfigClockSource+0x18a>
 8011a0c:	2b40      	cmp	r3, #64	; 0x40
 8011a0e:	d86f      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011a10:	2b30      	cmp	r3, #48	; 0x30
 8011a12:	d064      	beq.n	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 8011a14:	2b30      	cmp	r3, #48	; 0x30
 8011a16:	d86b      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011a18:	2b20      	cmp	r3, #32
 8011a1a:	d060      	beq.n	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 8011a1c:	2b20      	cmp	r3, #32
 8011a1e:	d867      	bhi.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d05c      	beq.n	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 8011a24:	2b10      	cmp	r3, #16
 8011a26:	d05a      	beq.n	8011ade <HAL_TIM_ConfigClockSource+0x1aa>
 8011a28:	e062      	b.n	8011af0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011a3a:	f000 fc61 	bl	8012300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68ba      	ldr	r2, [r7, #8]
 8011a54:	609a      	str	r2, [r3, #8]
      break;
 8011a56:	e04f      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011a68:	f000 fc4a 	bl	8012300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	689a      	ldr	r2, [r3, #8]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011a7a:	609a      	str	r2, [r3, #8]
      break;
 8011a7c:	e03c      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	f000 fbba 	bl	8012204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2150      	movs	r1, #80	; 0x50
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 fc14 	bl	80122c4 <TIM_ITRx_SetConfig>
      break;
 8011a9c:	e02c      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011aaa:	461a      	mov	r2, r3
 8011aac:	f000 fbd9 	bl	8012262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2160      	movs	r1, #96	; 0x60
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 fc04 	bl	80122c4 <TIM_ITRx_SetConfig>
      break;
 8011abc:	e01c      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011aca:	461a      	mov	r2, r3
 8011acc:	f000 fb9a 	bl	8012204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2140      	movs	r1, #64	; 0x40
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 fbf4 	bl	80122c4 <TIM_ITRx_SetConfig>
      break;
 8011adc:	e00c      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	4610      	mov	r0, r2
 8011aea:	f000 fbeb 	bl	80122c4 <TIM_ITRx_SetConfig>
      break;
 8011aee:	e003      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011af0:	2301      	movs	r3, #1
 8011af2:	73fb      	strb	r3, [r7, #15]
      break;
 8011af4:	e000      	b.n	8011af8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2201      	movs	r2, #1
 8011afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	ffceff88 	.word	0xffceff88
 8011b18:	00100040 	.word	0x00100040
 8011b1c:	00100030 	.word	0x00100030
 8011b20:	00100020 	.word	0x00100020

08011b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b085      	sub	sp, #20
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	4a40      	ldr	r2, [pc, #256]	; (8011c38 <TIM_Base_SetConfig+0x114>)
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d013      	beq.n	8011b64 <TIM_Base_SetConfig+0x40>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b42:	d00f      	beq.n	8011b64 <TIM_Base_SetConfig+0x40>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	4a3d      	ldr	r2, [pc, #244]	; (8011c3c <TIM_Base_SetConfig+0x118>)
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d00b      	beq.n	8011b64 <TIM_Base_SetConfig+0x40>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4a3c      	ldr	r2, [pc, #240]	; (8011c40 <TIM_Base_SetConfig+0x11c>)
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d007      	beq.n	8011b64 <TIM_Base_SetConfig+0x40>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4a3b      	ldr	r2, [pc, #236]	; (8011c44 <TIM_Base_SetConfig+0x120>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d003      	beq.n	8011b64 <TIM_Base_SetConfig+0x40>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	4a3a      	ldr	r2, [pc, #232]	; (8011c48 <TIM_Base_SetConfig+0x124>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d108      	bne.n	8011b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	4313      	orrs	r3, r2
 8011b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	4a2f      	ldr	r2, [pc, #188]	; (8011c38 <TIM_Base_SetConfig+0x114>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d01f      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b84:	d01b      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4a2c      	ldr	r2, [pc, #176]	; (8011c3c <TIM_Base_SetConfig+0x118>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d017      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4a2b      	ldr	r2, [pc, #172]	; (8011c40 <TIM_Base_SetConfig+0x11c>)
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d013      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4a2a      	ldr	r2, [pc, #168]	; (8011c44 <TIM_Base_SetConfig+0x120>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d00f      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4a29      	ldr	r2, [pc, #164]	; (8011c48 <TIM_Base_SetConfig+0x124>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d00b      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4a28      	ldr	r2, [pc, #160]	; (8011c4c <TIM_Base_SetConfig+0x128>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d007      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4a27      	ldr	r2, [pc, #156]	; (8011c50 <TIM_Base_SetConfig+0x12c>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d003      	beq.n	8011bbe <TIM_Base_SetConfig+0x9a>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4a26      	ldr	r2, [pc, #152]	; (8011c54 <TIM_Base_SetConfig+0x130>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d108      	bne.n	8011bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	68fa      	ldr	r2, [r7, #12]
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	689a      	ldr	r2, [r3, #8]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4a10      	ldr	r2, [pc, #64]	; (8011c38 <TIM_Base_SetConfig+0x114>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d00f      	beq.n	8011c1c <TIM_Base_SetConfig+0xf8>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a12      	ldr	r2, [pc, #72]	; (8011c48 <TIM_Base_SetConfig+0x124>)
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d00b      	beq.n	8011c1c <TIM_Base_SetConfig+0xf8>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a11      	ldr	r2, [pc, #68]	; (8011c4c <TIM_Base_SetConfig+0x128>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d007      	beq.n	8011c1c <TIM_Base_SetConfig+0xf8>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4a10      	ldr	r2, [pc, #64]	; (8011c50 <TIM_Base_SetConfig+0x12c>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d003      	beq.n	8011c1c <TIM_Base_SetConfig+0xf8>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4a0f      	ldr	r2, [pc, #60]	; (8011c54 <TIM_Base_SetConfig+0x130>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d103      	bne.n	8011c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	691a      	ldr	r2, [r3, #16]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2201      	movs	r2, #1
 8011c28:	615a      	str	r2, [r3, #20]
}
 8011c2a:	bf00      	nop
 8011c2c:	3714      	adds	r7, #20
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	40010000 	.word	0x40010000
 8011c3c:	40000400 	.word	0x40000400
 8011c40:	40000800 	.word	0x40000800
 8011c44:	40000c00 	.word	0x40000c00
 8011c48:	40010400 	.word	0x40010400
 8011c4c:	40014000 	.word	0x40014000
 8011c50:	40014400 	.word	0x40014400
 8011c54:	40014800 	.word	0x40014800

08011c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b087      	sub	sp, #28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6a1b      	ldr	r3, [r3, #32]
 8011c66:	f023 0201 	bic.w	r2, r3, #1
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6a1b      	ldr	r3, [r3, #32]
 8011c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	699b      	ldr	r3, [r3, #24]
 8011c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011c80:	68fa      	ldr	r2, [r7, #12]
 8011c82:	4b37      	ldr	r3, [pc, #220]	; (8011d60 <TIM_OC1_SetConfig+0x108>)
 8011c84:	4013      	ands	r3, r2
 8011c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f023 0303 	bic.w	r3, r3, #3
 8011c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	4313      	orrs	r3, r2
 8011c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	f023 0302 	bic.w	r3, r3, #2
 8011ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	689b      	ldr	r3, [r3, #8]
 8011ca6:	697a      	ldr	r2, [r7, #20]
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	4a2d      	ldr	r2, [pc, #180]	; (8011d64 <TIM_OC1_SetConfig+0x10c>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d00f      	beq.n	8011cd4 <TIM_OC1_SetConfig+0x7c>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4a2c      	ldr	r2, [pc, #176]	; (8011d68 <TIM_OC1_SetConfig+0x110>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d00b      	beq.n	8011cd4 <TIM_OC1_SetConfig+0x7c>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4a2b      	ldr	r2, [pc, #172]	; (8011d6c <TIM_OC1_SetConfig+0x114>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d007      	beq.n	8011cd4 <TIM_OC1_SetConfig+0x7c>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a2a      	ldr	r2, [pc, #168]	; (8011d70 <TIM_OC1_SetConfig+0x118>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d003      	beq.n	8011cd4 <TIM_OC1_SetConfig+0x7c>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4a29      	ldr	r2, [pc, #164]	; (8011d74 <TIM_OC1_SetConfig+0x11c>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d10c      	bne.n	8011cee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	f023 0308 	bic.w	r3, r3, #8
 8011cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	697a      	ldr	r2, [r7, #20]
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f023 0304 	bic.w	r3, r3, #4
 8011cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4a1c      	ldr	r2, [pc, #112]	; (8011d64 <TIM_OC1_SetConfig+0x10c>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d00f      	beq.n	8011d16 <TIM_OC1_SetConfig+0xbe>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4a1b      	ldr	r2, [pc, #108]	; (8011d68 <TIM_OC1_SetConfig+0x110>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d00b      	beq.n	8011d16 <TIM_OC1_SetConfig+0xbe>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	4a1a      	ldr	r2, [pc, #104]	; (8011d6c <TIM_OC1_SetConfig+0x114>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d007      	beq.n	8011d16 <TIM_OC1_SetConfig+0xbe>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4a19      	ldr	r2, [pc, #100]	; (8011d70 <TIM_OC1_SetConfig+0x118>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d003      	beq.n	8011d16 <TIM_OC1_SetConfig+0xbe>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4a18      	ldr	r2, [pc, #96]	; (8011d74 <TIM_OC1_SetConfig+0x11c>)
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d111      	bne.n	8011d3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	695b      	ldr	r3, [r3, #20]
 8011d2a:	693a      	ldr	r2, [r7, #16]
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	699b      	ldr	r3, [r3, #24]
 8011d34:	693a      	ldr	r2, [r7, #16]
 8011d36:	4313      	orrs	r3, r2
 8011d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	685a      	ldr	r2, [r3, #4]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	697a      	ldr	r2, [r7, #20]
 8011d52:	621a      	str	r2, [r3, #32]
}
 8011d54:	bf00      	nop
 8011d56:	371c      	adds	r7, #28
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	fffeff8f 	.word	0xfffeff8f
 8011d64:	40010000 	.word	0x40010000
 8011d68:	40010400 	.word	0x40010400
 8011d6c:	40014000 	.word	0x40014000
 8011d70:	40014400 	.word	0x40014400
 8011d74:	40014800 	.word	0x40014800

08011d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b087      	sub	sp, #28
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6a1b      	ldr	r3, [r3, #32]
 8011d86:	f023 0210 	bic.w	r2, r3, #16
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a1b      	ldr	r3, [r3, #32]
 8011d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	4b34      	ldr	r3, [pc, #208]	; (8011e74 <TIM_OC2_SetConfig+0xfc>)
 8011da4:	4013      	ands	r3, r2
 8011da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	021b      	lsls	r3, r3, #8
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	4313      	orrs	r3, r2
 8011dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	f023 0320 	bic.w	r3, r3, #32
 8011dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	697a      	ldr	r2, [r7, #20]
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	4a29      	ldr	r2, [pc, #164]	; (8011e78 <TIM_OC2_SetConfig+0x100>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d003      	beq.n	8011de0 <TIM_OC2_SetConfig+0x68>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4a28      	ldr	r2, [pc, #160]	; (8011e7c <TIM_OC2_SetConfig+0x104>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d10d      	bne.n	8011dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	697a      	ldr	r2, [r7, #20]
 8011df0:	4313      	orrs	r3, r2
 8011df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	4a1e      	ldr	r2, [pc, #120]	; (8011e78 <TIM_OC2_SetConfig+0x100>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d00f      	beq.n	8011e24 <TIM_OC2_SetConfig+0xac>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	4a1d      	ldr	r2, [pc, #116]	; (8011e7c <TIM_OC2_SetConfig+0x104>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d00b      	beq.n	8011e24 <TIM_OC2_SetConfig+0xac>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4a1c      	ldr	r2, [pc, #112]	; (8011e80 <TIM_OC2_SetConfig+0x108>)
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d007      	beq.n	8011e24 <TIM_OC2_SetConfig+0xac>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	4a1b      	ldr	r2, [pc, #108]	; (8011e84 <TIM_OC2_SetConfig+0x10c>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d003      	beq.n	8011e24 <TIM_OC2_SetConfig+0xac>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	4a1a      	ldr	r2, [pc, #104]	; (8011e88 <TIM_OC2_SetConfig+0x110>)
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d113      	bne.n	8011e4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	695b      	ldr	r3, [r3, #20]
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	693a      	ldr	r2, [r7, #16]
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	693a      	ldr	r2, [r7, #16]
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	697a      	ldr	r2, [r7, #20]
 8011e64:	621a      	str	r2, [r3, #32]
}
 8011e66:	bf00      	nop
 8011e68:	371c      	adds	r7, #28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	feff8fff 	.word	0xfeff8fff
 8011e78:	40010000 	.word	0x40010000
 8011e7c:	40010400 	.word	0x40010400
 8011e80:	40014000 	.word	0x40014000
 8011e84:	40014400 	.word	0x40014400
 8011e88:	40014800 	.word	0x40014800

08011e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b087      	sub	sp, #28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6a1b      	ldr	r3, [r3, #32]
 8011e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6a1b      	ldr	r3, [r3, #32]
 8011ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	69db      	ldr	r3, [r3, #28]
 8011eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	4b33      	ldr	r3, [pc, #204]	; (8011f84 <TIM_OC3_SetConfig+0xf8>)
 8011eb8:	4013      	ands	r3, r2
 8011eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f023 0303 	bic.w	r3, r3, #3
 8011ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	68fa      	ldr	r2, [r7, #12]
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	021b      	lsls	r3, r3, #8
 8011edc:	697a      	ldr	r2, [r7, #20]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	4a28      	ldr	r2, [pc, #160]	; (8011f88 <TIM_OC3_SetConfig+0xfc>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d003      	beq.n	8011ef2 <TIM_OC3_SetConfig+0x66>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	4a27      	ldr	r2, [pc, #156]	; (8011f8c <TIM_OC3_SetConfig+0x100>)
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d10d      	bne.n	8011f0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	021b      	lsls	r3, r3, #8
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	4313      	orrs	r3, r2
 8011f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4a1d      	ldr	r2, [pc, #116]	; (8011f88 <TIM_OC3_SetConfig+0xfc>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d00f      	beq.n	8011f36 <TIM_OC3_SetConfig+0xaa>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	4a1c      	ldr	r2, [pc, #112]	; (8011f8c <TIM_OC3_SetConfig+0x100>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d00b      	beq.n	8011f36 <TIM_OC3_SetConfig+0xaa>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	4a1b      	ldr	r2, [pc, #108]	; (8011f90 <TIM_OC3_SetConfig+0x104>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d007      	beq.n	8011f36 <TIM_OC3_SetConfig+0xaa>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4a1a      	ldr	r2, [pc, #104]	; (8011f94 <TIM_OC3_SetConfig+0x108>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d003      	beq.n	8011f36 <TIM_OC3_SetConfig+0xaa>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4a19      	ldr	r2, [pc, #100]	; (8011f98 <TIM_OC3_SetConfig+0x10c>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d113      	bne.n	8011f5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	695b      	ldr	r3, [r3, #20]
 8011f4a:	011b      	lsls	r3, r3, #4
 8011f4c:	693a      	ldr	r2, [r7, #16]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	699b      	ldr	r3, [r3, #24]
 8011f56:	011b      	lsls	r3, r3, #4
 8011f58:	693a      	ldr	r2, [r7, #16]
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	693a      	ldr	r2, [r7, #16]
 8011f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	685a      	ldr	r2, [r3, #4]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	697a      	ldr	r2, [r7, #20]
 8011f76:	621a      	str	r2, [r3, #32]
}
 8011f78:	bf00      	nop
 8011f7a:	371c      	adds	r7, #28
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	fffeff8f 	.word	0xfffeff8f
 8011f88:	40010000 	.word	0x40010000
 8011f8c:	40010400 	.word	0x40010400
 8011f90:	40014000 	.word	0x40014000
 8011f94:	40014400 	.word	0x40014400
 8011f98:	40014800 	.word	0x40014800

08011f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b087      	sub	sp, #28
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6a1b      	ldr	r3, [r3, #32]
 8011fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	69db      	ldr	r3, [r3, #28]
 8011fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	4b24      	ldr	r3, [pc, #144]	; (8012058 <TIM_OC4_SetConfig+0xbc>)
 8011fc8:	4013      	ands	r3, r2
 8011fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	021b      	lsls	r3, r3, #8
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	031b      	lsls	r3, r3, #12
 8011fee:	693a      	ldr	r2, [r7, #16]
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	4a19      	ldr	r2, [pc, #100]	; (801205c <TIM_OC4_SetConfig+0xc0>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d00f      	beq.n	801201c <TIM_OC4_SetConfig+0x80>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	4a18      	ldr	r2, [pc, #96]	; (8012060 <TIM_OC4_SetConfig+0xc4>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d00b      	beq.n	801201c <TIM_OC4_SetConfig+0x80>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4a17      	ldr	r2, [pc, #92]	; (8012064 <TIM_OC4_SetConfig+0xc8>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d007      	beq.n	801201c <TIM_OC4_SetConfig+0x80>
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	4a16      	ldr	r2, [pc, #88]	; (8012068 <TIM_OC4_SetConfig+0xcc>)
 8012010:	4293      	cmp	r3, r2
 8012012:	d003      	beq.n	801201c <TIM_OC4_SetConfig+0x80>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	4a15      	ldr	r2, [pc, #84]	; (801206c <TIM_OC4_SetConfig+0xd0>)
 8012018:	4293      	cmp	r3, r2
 801201a:	d109      	bne.n	8012030 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	695b      	ldr	r3, [r3, #20]
 8012028:	019b      	lsls	r3, r3, #6
 801202a:	697a      	ldr	r2, [r7, #20]
 801202c:	4313      	orrs	r3, r2
 801202e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	697a      	ldr	r2, [r7, #20]
 8012034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	685a      	ldr	r2, [r3, #4]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	621a      	str	r2, [r3, #32]
}
 801204a:	bf00      	nop
 801204c:	371c      	adds	r7, #28
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	feff8fff 	.word	0xfeff8fff
 801205c:	40010000 	.word	0x40010000
 8012060:	40010400 	.word	0x40010400
 8012064:	40014000 	.word	0x40014000
 8012068:	40014400 	.word	0x40014400
 801206c:	40014800 	.word	0x40014800

08012070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012070:	b480      	push	{r7}
 8012072:	b087      	sub	sp, #28
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6a1b      	ldr	r3, [r3, #32]
 801207e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6a1b      	ldr	r3, [r3, #32]
 801208a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012098:	68fa      	ldr	r2, [r7, #12]
 801209a:	4b21      	ldr	r3, [pc, #132]	; (8012120 <TIM_OC5_SetConfig+0xb0>)
 801209c:	4013      	ands	r3, r2
 801209e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	4313      	orrs	r3, r2
 80120a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80120b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	041b      	lsls	r3, r3, #16
 80120b8:	693a      	ldr	r2, [r7, #16]
 80120ba:	4313      	orrs	r3, r2
 80120bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a18      	ldr	r2, [pc, #96]	; (8012124 <TIM_OC5_SetConfig+0xb4>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d00f      	beq.n	80120e6 <TIM_OC5_SetConfig+0x76>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4a17      	ldr	r2, [pc, #92]	; (8012128 <TIM_OC5_SetConfig+0xb8>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d00b      	beq.n	80120e6 <TIM_OC5_SetConfig+0x76>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	4a16      	ldr	r2, [pc, #88]	; (801212c <TIM_OC5_SetConfig+0xbc>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d007      	beq.n	80120e6 <TIM_OC5_SetConfig+0x76>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	4a15      	ldr	r2, [pc, #84]	; (8012130 <TIM_OC5_SetConfig+0xc0>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d003      	beq.n	80120e6 <TIM_OC5_SetConfig+0x76>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4a14      	ldr	r2, [pc, #80]	; (8012134 <TIM_OC5_SetConfig+0xc4>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d109      	bne.n	80120fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80120ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	021b      	lsls	r3, r3, #8
 80120f4:	697a      	ldr	r2, [r7, #20]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	697a      	ldr	r2, [r7, #20]
 80120fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	68fa      	ldr	r2, [r7, #12]
 8012104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	685a      	ldr	r2, [r3, #4]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	693a      	ldr	r2, [r7, #16]
 8012112:	621a      	str	r2, [r3, #32]
}
 8012114:	bf00      	nop
 8012116:	371c      	adds	r7, #28
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr
 8012120:	fffeff8f 	.word	0xfffeff8f
 8012124:	40010000 	.word	0x40010000
 8012128:	40010400 	.word	0x40010400
 801212c:	40014000 	.word	0x40014000
 8012130:	40014400 	.word	0x40014400
 8012134:	40014800 	.word	0x40014800

08012138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012138:	b480      	push	{r7}
 801213a:	b087      	sub	sp, #28
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6a1b      	ldr	r3, [r3, #32]
 8012146:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6a1b      	ldr	r3, [r3, #32]
 8012152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801215e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	4b22      	ldr	r3, [pc, #136]	; (80121ec <TIM_OC6_SetConfig+0xb4>)
 8012164:	4013      	ands	r3, r2
 8012166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	021b      	lsls	r3, r3, #8
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	4313      	orrs	r3, r2
 8012172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801217a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	689b      	ldr	r3, [r3, #8]
 8012180:	051b      	lsls	r3, r3, #20
 8012182:	693a      	ldr	r2, [r7, #16]
 8012184:	4313      	orrs	r3, r2
 8012186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a19      	ldr	r2, [pc, #100]	; (80121f0 <TIM_OC6_SetConfig+0xb8>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d00f      	beq.n	80121b0 <TIM_OC6_SetConfig+0x78>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	4a18      	ldr	r2, [pc, #96]	; (80121f4 <TIM_OC6_SetConfig+0xbc>)
 8012194:	4293      	cmp	r3, r2
 8012196:	d00b      	beq.n	80121b0 <TIM_OC6_SetConfig+0x78>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4a17      	ldr	r2, [pc, #92]	; (80121f8 <TIM_OC6_SetConfig+0xc0>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d007      	beq.n	80121b0 <TIM_OC6_SetConfig+0x78>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	4a16      	ldr	r2, [pc, #88]	; (80121fc <TIM_OC6_SetConfig+0xc4>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d003      	beq.n	80121b0 <TIM_OC6_SetConfig+0x78>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	4a15      	ldr	r2, [pc, #84]	; (8012200 <TIM_OC6_SetConfig+0xc8>)
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d109      	bne.n	80121c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80121b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	695b      	ldr	r3, [r3, #20]
 80121bc:	029b      	lsls	r3, r3, #10
 80121be:	697a      	ldr	r2, [r7, #20]
 80121c0:	4313      	orrs	r3, r2
 80121c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	697a      	ldr	r2, [r7, #20]
 80121c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	685a      	ldr	r2, [r3, #4]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	693a      	ldr	r2, [r7, #16]
 80121dc:	621a      	str	r2, [r3, #32]
}
 80121de:	bf00      	nop
 80121e0:	371c      	adds	r7, #28
 80121e2:	46bd      	mov	sp, r7
 80121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e8:	4770      	bx	lr
 80121ea:	bf00      	nop
 80121ec:	feff8fff 	.word	0xfeff8fff
 80121f0:	40010000 	.word	0x40010000
 80121f4:	40010400 	.word	0x40010400
 80121f8:	40014000 	.word	0x40014000
 80121fc:	40014400 	.word	0x40014400
 8012200:	40014800 	.word	0x40014800

08012204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012204:	b480      	push	{r7}
 8012206:	b087      	sub	sp, #28
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	6a1b      	ldr	r3, [r3, #32]
 8012214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	6a1b      	ldr	r3, [r3, #32]
 801221a:	f023 0201 	bic.w	r2, r3, #1
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	699b      	ldr	r3, [r3, #24]
 8012226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801222e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	011b      	lsls	r3, r3, #4
 8012234:	693a      	ldr	r2, [r7, #16]
 8012236:	4313      	orrs	r3, r2
 8012238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f023 030a 	bic.w	r3, r3, #10
 8012240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	4313      	orrs	r3, r2
 8012248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	693a      	ldr	r2, [r7, #16]
 801224e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	697a      	ldr	r2, [r7, #20]
 8012254:	621a      	str	r2, [r3, #32]
}
 8012256:	bf00      	nop
 8012258:	371c      	adds	r7, #28
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr

08012262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012262:	b480      	push	{r7}
 8012264:	b087      	sub	sp, #28
 8012266:	af00      	add	r7, sp, #0
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	6a1b      	ldr	r3, [r3, #32]
 8012272:	f023 0210 	bic.w	r2, r3, #16
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6a1b      	ldr	r3, [r3, #32]
 8012284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801228c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	031b      	lsls	r3, r3, #12
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	4313      	orrs	r3, r2
 8012296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801229e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	011b      	lsls	r3, r3, #4
 80122a4:	693a      	ldr	r2, [r7, #16]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	697a      	ldr	r2, [r7, #20]
 80122ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	693a      	ldr	r2, [r7, #16]
 80122b4:	621a      	str	r2, [r3, #32]
}
 80122b6:	bf00      	nop
 80122b8:	371c      	adds	r7, #28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr
	...

080122c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b085      	sub	sp, #20
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	4b09      	ldr	r3, [pc, #36]	; (80122fc <TIM_ITRx_SetConfig+0x38>)
 80122d8:	4013      	ands	r3, r2
 80122da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	4313      	orrs	r3, r2
 80122e2:	f043 0307 	orr.w	r3, r3, #7
 80122e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	609a      	str	r2, [r3, #8]
}
 80122ee:	bf00      	nop
 80122f0:	3714      	adds	r7, #20
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	ffcfff8f 	.word	0xffcfff8f

08012300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012300:	b480      	push	{r7}
 8012302:	b087      	sub	sp, #28
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
 801230c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	689b      	ldr	r3, [r3, #8]
 8012312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801231a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	021a      	lsls	r2, r3, #8
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	431a      	orrs	r2, r3
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	4313      	orrs	r3, r2
 8012328:	697a      	ldr	r2, [r7, #20]
 801232a:	4313      	orrs	r3, r2
 801232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	697a      	ldr	r2, [r7, #20]
 8012332:	609a      	str	r2, [r3, #8]
}
 8012334:	bf00      	nop
 8012336:	371c      	adds	r7, #28
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012340:	b480      	push	{r7}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012350:	2b01      	cmp	r3, #1
 8012352:	d101      	bne.n	8012358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012354:	2302      	movs	r3, #2
 8012356:	e06d      	b.n	8012434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2201      	movs	r2, #1
 801235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2202      	movs	r2, #2
 8012364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	689b      	ldr	r3, [r3, #8]
 8012376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a30      	ldr	r2, [pc, #192]	; (8012440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d004      	beq.n	801238c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a2f      	ldr	r2, [pc, #188]	; (8012444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d108      	bne.n	801239e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012392:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	4313      	orrs	r3, r2
 801239c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	4313      	orrs	r3, r2
 80123ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4a20      	ldr	r2, [pc, #128]	; (8012440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80123be:	4293      	cmp	r3, r2
 80123c0:	d022      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123ca:	d01d      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	4a1d      	ldr	r2, [pc, #116]	; (8012448 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d018      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a1c      	ldr	r2, [pc, #112]	; (801244c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80123dc:	4293      	cmp	r3, r2
 80123de:	d013      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a1a      	ldr	r2, [pc, #104]	; (8012450 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80123e6:	4293      	cmp	r3, r2
 80123e8:	d00e      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	4a15      	ldr	r2, [pc, #84]	; (8012444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d009      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4a16      	ldr	r2, [pc, #88]	; (8012454 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d004      	beq.n	8012408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4a15      	ldr	r2, [pc, #84]	; (8012458 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012404:	4293      	cmp	r3, r2
 8012406:	d10c      	bne.n	8012422 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801240e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	689b      	ldr	r3, [r3, #8]
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	4313      	orrs	r3, r2
 8012418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2200      	movs	r2, #0
 801242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	4618      	mov	r0, r3
 8012436:	3714      	adds	r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr
 8012440:	40010000 	.word	0x40010000
 8012444:	40010400 	.word	0x40010400
 8012448:	40000400 	.word	0x40000400
 801244c:	40000800 	.word	0x40000800
 8012450:	40000c00 	.word	0x40000c00
 8012454:	40001800 	.word	0x40001800
 8012458:	40014000 	.word	0x40014000

0801245c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801245c:	b480      	push	{r7}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012466:	2300      	movs	r3, #0
 8012468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012470:	2b01      	cmp	r3, #1
 8012472:	d101      	bne.n	8012478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012474:	2302      	movs	r3, #2
 8012476:	e065      	b.n	8012544 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2201      	movs	r2, #1
 801247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	4313      	orrs	r3, r2
 801248c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	689b      	ldr	r3, [r3, #8]
 8012498:	4313      	orrs	r3, r2
 801249a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	4313      	orrs	r3, r2
 80124a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4313      	orrs	r3, r2
 80124b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	4313      	orrs	r3, r2
 80124c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	695b      	ldr	r3, [r3, #20]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124de:	4313      	orrs	r3, r2
 80124e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	041b      	lsls	r3, r3, #16
 80124ee:	4313      	orrs	r3, r2
 80124f0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a16      	ldr	r2, [pc, #88]	; (8012550 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d004      	beq.n	8012506 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4a14      	ldr	r2, [pc, #80]	; (8012554 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d115      	bne.n	8012532 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012510:	051b      	lsls	r3, r3, #20
 8012512:	4313      	orrs	r3, r2
 8012514:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	69db      	ldr	r3, [r3, #28]
 8012520:	4313      	orrs	r3, r2
 8012522:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	6a1b      	ldr	r3, [r3, #32]
 801252e:	4313      	orrs	r3, r2
 8012530:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012542:	2300      	movs	r3, #0
}
 8012544:	4618      	mov	r0, r3
 8012546:	3714      	adds	r7, #20
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	40010000 	.word	0x40010000
 8012554:	40010400 	.word	0x40010400

08012558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d101      	bne.n	801256a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012566:	2301      	movs	r3, #1
 8012568:	e042      	b.n	80125f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012570:	2b00      	cmp	r3, #0
 8012572:	d106      	bne.n	8012582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2200      	movs	r2, #0
 8012578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7f1 fb93 	bl	8003ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2224      	movs	r2, #36	; 0x24
 8012586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f022 0201 	bic.w	r2, r2, #1
 8012598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 f82c 	bl	80125f8 <UART_SetConfig>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d101      	bne.n	80125aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	e022      	b.n	80125f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d002      	beq.n	80125b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 fd88 	bl	80130c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80125c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	689a      	ldr	r2, [r3, #8]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80125d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f042 0201 	orr.w	r2, r2, #1
 80125e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fe0f 	bl	801320c <UART_CheckIdleState>
 80125ee:	4603      	mov	r3, r0
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80125f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80125fc:	b092      	sub	sp, #72	; 0x48
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012602:	2300      	movs	r3, #0
 8012604:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	689a      	ldr	r2, [r3, #8]
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	431a      	orrs	r2, r3
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	695b      	ldr	r3, [r3, #20]
 8012616:	431a      	orrs	r2, r3
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	69db      	ldr	r3, [r3, #28]
 801261c:	4313      	orrs	r3, r2
 801261e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	4bbe      	ldr	r3, [pc, #760]	; (8012920 <UART_SetConfig+0x328>)
 8012628:	4013      	ands	r3, r2
 801262a:	697a      	ldr	r2, [r7, #20]
 801262c:	6812      	ldr	r2, [r2, #0]
 801262e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012630:	430b      	orrs	r3, r1
 8012632:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	68da      	ldr	r2, [r3, #12]
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	430a      	orrs	r2, r1
 8012648:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4ab3      	ldr	r2, [pc, #716]	; (8012924 <UART_SetConfig+0x32c>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d004      	beq.n	8012664 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012660:	4313      	orrs	r3, r2
 8012662:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	689a      	ldr	r2, [r3, #8]
 801266a:	4baf      	ldr	r3, [pc, #700]	; (8012928 <UART_SetConfig+0x330>)
 801266c:	4013      	ands	r3, r2
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	6812      	ldr	r2, [r2, #0]
 8012672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012674:	430b      	orrs	r3, r1
 8012676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267e:	f023 010f 	bic.w	r1, r3, #15
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	430a      	orrs	r2, r1
 801268c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4aa6      	ldr	r2, [pc, #664]	; (801292c <UART_SetConfig+0x334>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d177      	bne.n	8012788 <UART_SetConfig+0x190>
 8012698:	4ba5      	ldr	r3, [pc, #660]	; (8012930 <UART_SetConfig+0x338>)
 801269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801269c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80126a0:	2b28      	cmp	r3, #40	; 0x28
 80126a2:	d86d      	bhi.n	8012780 <UART_SetConfig+0x188>
 80126a4:	a201      	add	r2, pc, #4	; (adr r2, 80126ac <UART_SetConfig+0xb4>)
 80126a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126aa:	bf00      	nop
 80126ac:	08012751 	.word	0x08012751
 80126b0:	08012781 	.word	0x08012781
 80126b4:	08012781 	.word	0x08012781
 80126b8:	08012781 	.word	0x08012781
 80126bc:	08012781 	.word	0x08012781
 80126c0:	08012781 	.word	0x08012781
 80126c4:	08012781 	.word	0x08012781
 80126c8:	08012781 	.word	0x08012781
 80126cc:	08012759 	.word	0x08012759
 80126d0:	08012781 	.word	0x08012781
 80126d4:	08012781 	.word	0x08012781
 80126d8:	08012781 	.word	0x08012781
 80126dc:	08012781 	.word	0x08012781
 80126e0:	08012781 	.word	0x08012781
 80126e4:	08012781 	.word	0x08012781
 80126e8:	08012781 	.word	0x08012781
 80126ec:	08012761 	.word	0x08012761
 80126f0:	08012781 	.word	0x08012781
 80126f4:	08012781 	.word	0x08012781
 80126f8:	08012781 	.word	0x08012781
 80126fc:	08012781 	.word	0x08012781
 8012700:	08012781 	.word	0x08012781
 8012704:	08012781 	.word	0x08012781
 8012708:	08012781 	.word	0x08012781
 801270c:	08012769 	.word	0x08012769
 8012710:	08012781 	.word	0x08012781
 8012714:	08012781 	.word	0x08012781
 8012718:	08012781 	.word	0x08012781
 801271c:	08012781 	.word	0x08012781
 8012720:	08012781 	.word	0x08012781
 8012724:	08012781 	.word	0x08012781
 8012728:	08012781 	.word	0x08012781
 801272c:	08012771 	.word	0x08012771
 8012730:	08012781 	.word	0x08012781
 8012734:	08012781 	.word	0x08012781
 8012738:	08012781 	.word	0x08012781
 801273c:	08012781 	.word	0x08012781
 8012740:	08012781 	.word	0x08012781
 8012744:	08012781 	.word	0x08012781
 8012748:	08012781 	.word	0x08012781
 801274c:	08012779 	.word	0x08012779
 8012750:	2301      	movs	r3, #1
 8012752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012756:	e222      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012758:	2304      	movs	r3, #4
 801275a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801275e:	e21e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012760:	2308      	movs	r3, #8
 8012762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012766:	e21a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012768:	2310      	movs	r3, #16
 801276a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801276e:	e216      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012770:	2320      	movs	r3, #32
 8012772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012776:	e212      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012778:	2340      	movs	r3, #64	; 0x40
 801277a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801277e:	e20e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012780:	2380      	movs	r3, #128	; 0x80
 8012782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012786:	e20a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4a69      	ldr	r2, [pc, #420]	; (8012934 <UART_SetConfig+0x33c>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d130      	bne.n	80127f4 <UART_SetConfig+0x1fc>
 8012792:	4b67      	ldr	r3, [pc, #412]	; (8012930 <UART_SetConfig+0x338>)
 8012794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012796:	f003 0307 	and.w	r3, r3, #7
 801279a:	2b05      	cmp	r3, #5
 801279c:	d826      	bhi.n	80127ec <UART_SetConfig+0x1f4>
 801279e:	a201      	add	r2, pc, #4	; (adr r2, 80127a4 <UART_SetConfig+0x1ac>)
 80127a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127a4:	080127bd 	.word	0x080127bd
 80127a8:	080127c5 	.word	0x080127c5
 80127ac:	080127cd 	.word	0x080127cd
 80127b0:	080127d5 	.word	0x080127d5
 80127b4:	080127dd 	.word	0x080127dd
 80127b8:	080127e5 	.word	0x080127e5
 80127bc:	2300      	movs	r3, #0
 80127be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127c2:	e1ec      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127c4:	2304      	movs	r3, #4
 80127c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127ca:	e1e8      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127cc:	2308      	movs	r3, #8
 80127ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127d2:	e1e4      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127d4:	2310      	movs	r3, #16
 80127d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127da:	e1e0      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127dc:	2320      	movs	r3, #32
 80127de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127e2:	e1dc      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127e4:	2340      	movs	r3, #64	; 0x40
 80127e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127ea:	e1d8      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127ec:	2380      	movs	r3, #128	; 0x80
 80127ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80127f2:	e1d4      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	4a4f      	ldr	r2, [pc, #316]	; (8012938 <UART_SetConfig+0x340>)
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d130      	bne.n	8012860 <UART_SetConfig+0x268>
 80127fe:	4b4c      	ldr	r3, [pc, #304]	; (8012930 <UART_SetConfig+0x338>)
 8012800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012802:	f003 0307 	and.w	r3, r3, #7
 8012806:	2b05      	cmp	r3, #5
 8012808:	d826      	bhi.n	8012858 <UART_SetConfig+0x260>
 801280a:	a201      	add	r2, pc, #4	; (adr r2, 8012810 <UART_SetConfig+0x218>)
 801280c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012810:	08012829 	.word	0x08012829
 8012814:	08012831 	.word	0x08012831
 8012818:	08012839 	.word	0x08012839
 801281c:	08012841 	.word	0x08012841
 8012820:	08012849 	.word	0x08012849
 8012824:	08012851 	.word	0x08012851
 8012828:	2300      	movs	r3, #0
 801282a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801282e:	e1b6      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012830:	2304      	movs	r3, #4
 8012832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012836:	e1b2      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012838:	2308      	movs	r3, #8
 801283a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801283e:	e1ae      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012840:	2310      	movs	r3, #16
 8012842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012846:	e1aa      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012848:	2320      	movs	r3, #32
 801284a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801284e:	e1a6      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012850:	2340      	movs	r3, #64	; 0x40
 8012852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012856:	e1a2      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012858:	2380      	movs	r3, #128	; 0x80
 801285a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801285e:	e19e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a35      	ldr	r2, [pc, #212]	; (801293c <UART_SetConfig+0x344>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d130      	bne.n	80128cc <UART_SetConfig+0x2d4>
 801286a:	4b31      	ldr	r3, [pc, #196]	; (8012930 <UART_SetConfig+0x338>)
 801286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801286e:	f003 0307 	and.w	r3, r3, #7
 8012872:	2b05      	cmp	r3, #5
 8012874:	d826      	bhi.n	80128c4 <UART_SetConfig+0x2cc>
 8012876:	a201      	add	r2, pc, #4	; (adr r2, 801287c <UART_SetConfig+0x284>)
 8012878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801287c:	08012895 	.word	0x08012895
 8012880:	0801289d 	.word	0x0801289d
 8012884:	080128a5 	.word	0x080128a5
 8012888:	080128ad 	.word	0x080128ad
 801288c:	080128b5 	.word	0x080128b5
 8012890:	080128bd 	.word	0x080128bd
 8012894:	2300      	movs	r3, #0
 8012896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801289a:	e180      	b.n	8012b9e <UART_SetConfig+0x5a6>
 801289c:	2304      	movs	r3, #4
 801289e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128a2:	e17c      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128a4:	2308      	movs	r3, #8
 80128a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128aa:	e178      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128ac:	2310      	movs	r3, #16
 80128ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128b2:	e174      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128b4:	2320      	movs	r3, #32
 80128b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128ba:	e170      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128bc:	2340      	movs	r3, #64	; 0x40
 80128be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128c2:	e16c      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128c4:	2380      	movs	r3, #128	; 0x80
 80128c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128ca:	e168      	b.n	8012b9e <UART_SetConfig+0x5a6>
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4a1b      	ldr	r2, [pc, #108]	; (8012940 <UART_SetConfig+0x348>)
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d142      	bne.n	801295c <UART_SetConfig+0x364>
 80128d6:	4b16      	ldr	r3, [pc, #88]	; (8012930 <UART_SetConfig+0x338>)
 80128d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128da:	f003 0307 	and.w	r3, r3, #7
 80128de:	2b05      	cmp	r3, #5
 80128e0:	d838      	bhi.n	8012954 <UART_SetConfig+0x35c>
 80128e2:	a201      	add	r2, pc, #4	; (adr r2, 80128e8 <UART_SetConfig+0x2f0>)
 80128e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128e8:	08012901 	.word	0x08012901
 80128ec:	08012909 	.word	0x08012909
 80128f0:	08012911 	.word	0x08012911
 80128f4:	08012919 	.word	0x08012919
 80128f8:	08012945 	.word	0x08012945
 80128fc:	0801294d 	.word	0x0801294d
 8012900:	2300      	movs	r3, #0
 8012902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012906:	e14a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012908:	2304      	movs	r3, #4
 801290a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801290e:	e146      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012910:	2308      	movs	r3, #8
 8012912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012916:	e142      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012918:	2310      	movs	r3, #16
 801291a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801291e:	e13e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012920:	cfff69f3 	.word	0xcfff69f3
 8012924:	58000c00 	.word	0x58000c00
 8012928:	11fff4ff 	.word	0x11fff4ff
 801292c:	40011000 	.word	0x40011000
 8012930:	58024400 	.word	0x58024400
 8012934:	40004400 	.word	0x40004400
 8012938:	40004800 	.word	0x40004800
 801293c:	40004c00 	.word	0x40004c00
 8012940:	40005000 	.word	0x40005000
 8012944:	2320      	movs	r3, #32
 8012946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801294a:	e128      	b.n	8012b9e <UART_SetConfig+0x5a6>
 801294c:	2340      	movs	r3, #64	; 0x40
 801294e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012952:	e124      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012954:	2380      	movs	r3, #128	; 0x80
 8012956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801295a:	e120      	b.n	8012b9e <UART_SetConfig+0x5a6>
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	4acb      	ldr	r2, [pc, #812]	; (8012c90 <UART_SetConfig+0x698>)
 8012962:	4293      	cmp	r3, r2
 8012964:	d176      	bne.n	8012a54 <UART_SetConfig+0x45c>
 8012966:	4bcb      	ldr	r3, [pc, #812]	; (8012c94 <UART_SetConfig+0x69c>)
 8012968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801296a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801296e:	2b28      	cmp	r3, #40	; 0x28
 8012970:	d86c      	bhi.n	8012a4c <UART_SetConfig+0x454>
 8012972:	a201      	add	r2, pc, #4	; (adr r2, 8012978 <UART_SetConfig+0x380>)
 8012974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012978:	08012a1d 	.word	0x08012a1d
 801297c:	08012a4d 	.word	0x08012a4d
 8012980:	08012a4d 	.word	0x08012a4d
 8012984:	08012a4d 	.word	0x08012a4d
 8012988:	08012a4d 	.word	0x08012a4d
 801298c:	08012a4d 	.word	0x08012a4d
 8012990:	08012a4d 	.word	0x08012a4d
 8012994:	08012a4d 	.word	0x08012a4d
 8012998:	08012a25 	.word	0x08012a25
 801299c:	08012a4d 	.word	0x08012a4d
 80129a0:	08012a4d 	.word	0x08012a4d
 80129a4:	08012a4d 	.word	0x08012a4d
 80129a8:	08012a4d 	.word	0x08012a4d
 80129ac:	08012a4d 	.word	0x08012a4d
 80129b0:	08012a4d 	.word	0x08012a4d
 80129b4:	08012a4d 	.word	0x08012a4d
 80129b8:	08012a2d 	.word	0x08012a2d
 80129bc:	08012a4d 	.word	0x08012a4d
 80129c0:	08012a4d 	.word	0x08012a4d
 80129c4:	08012a4d 	.word	0x08012a4d
 80129c8:	08012a4d 	.word	0x08012a4d
 80129cc:	08012a4d 	.word	0x08012a4d
 80129d0:	08012a4d 	.word	0x08012a4d
 80129d4:	08012a4d 	.word	0x08012a4d
 80129d8:	08012a35 	.word	0x08012a35
 80129dc:	08012a4d 	.word	0x08012a4d
 80129e0:	08012a4d 	.word	0x08012a4d
 80129e4:	08012a4d 	.word	0x08012a4d
 80129e8:	08012a4d 	.word	0x08012a4d
 80129ec:	08012a4d 	.word	0x08012a4d
 80129f0:	08012a4d 	.word	0x08012a4d
 80129f4:	08012a4d 	.word	0x08012a4d
 80129f8:	08012a3d 	.word	0x08012a3d
 80129fc:	08012a4d 	.word	0x08012a4d
 8012a00:	08012a4d 	.word	0x08012a4d
 8012a04:	08012a4d 	.word	0x08012a4d
 8012a08:	08012a4d 	.word	0x08012a4d
 8012a0c:	08012a4d 	.word	0x08012a4d
 8012a10:	08012a4d 	.word	0x08012a4d
 8012a14:	08012a4d 	.word	0x08012a4d
 8012a18:	08012a45 	.word	0x08012a45
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a22:	e0bc      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a24:	2304      	movs	r3, #4
 8012a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a2a:	e0b8      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a2c:	2308      	movs	r3, #8
 8012a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a32:	e0b4      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a34:	2310      	movs	r3, #16
 8012a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a3a:	e0b0      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a3c:	2320      	movs	r3, #32
 8012a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a42:	e0ac      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a44:	2340      	movs	r3, #64	; 0x40
 8012a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a4a:	e0a8      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a4c:	2380      	movs	r3, #128	; 0x80
 8012a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a52:	e0a4      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4a8f      	ldr	r2, [pc, #572]	; (8012c98 <UART_SetConfig+0x6a0>)
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d130      	bne.n	8012ac0 <UART_SetConfig+0x4c8>
 8012a5e:	4b8d      	ldr	r3, [pc, #564]	; (8012c94 <UART_SetConfig+0x69c>)
 8012a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a62:	f003 0307 	and.w	r3, r3, #7
 8012a66:	2b05      	cmp	r3, #5
 8012a68:	d826      	bhi.n	8012ab8 <UART_SetConfig+0x4c0>
 8012a6a:	a201      	add	r2, pc, #4	; (adr r2, 8012a70 <UART_SetConfig+0x478>)
 8012a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a70:	08012a89 	.word	0x08012a89
 8012a74:	08012a91 	.word	0x08012a91
 8012a78:	08012a99 	.word	0x08012a99
 8012a7c:	08012aa1 	.word	0x08012aa1
 8012a80:	08012aa9 	.word	0x08012aa9
 8012a84:	08012ab1 	.word	0x08012ab1
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a8e:	e086      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a90:	2304      	movs	r3, #4
 8012a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a96:	e082      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012a98:	2308      	movs	r3, #8
 8012a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a9e:	e07e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012aa0:	2310      	movs	r3, #16
 8012aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012aa6:	e07a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012aa8:	2320      	movs	r3, #32
 8012aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012aae:	e076      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012ab0:	2340      	movs	r3, #64	; 0x40
 8012ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ab6:	e072      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012ab8:	2380      	movs	r3, #128	; 0x80
 8012aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012abe:	e06e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a75      	ldr	r2, [pc, #468]	; (8012c9c <UART_SetConfig+0x6a4>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d130      	bne.n	8012b2c <UART_SetConfig+0x534>
 8012aca:	4b72      	ldr	r3, [pc, #456]	; (8012c94 <UART_SetConfig+0x69c>)
 8012acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ace:	f003 0307 	and.w	r3, r3, #7
 8012ad2:	2b05      	cmp	r3, #5
 8012ad4:	d826      	bhi.n	8012b24 <UART_SetConfig+0x52c>
 8012ad6:	a201      	add	r2, pc, #4	; (adr r2, 8012adc <UART_SetConfig+0x4e4>)
 8012ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012adc:	08012af5 	.word	0x08012af5
 8012ae0:	08012afd 	.word	0x08012afd
 8012ae4:	08012b05 	.word	0x08012b05
 8012ae8:	08012b0d 	.word	0x08012b0d
 8012aec:	08012b15 	.word	0x08012b15
 8012af0:	08012b1d 	.word	0x08012b1d
 8012af4:	2300      	movs	r3, #0
 8012af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012afa:	e050      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012afc:	2304      	movs	r3, #4
 8012afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b02:	e04c      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b04:	2308      	movs	r3, #8
 8012b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b0a:	e048      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b0c:	2310      	movs	r3, #16
 8012b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b12:	e044      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b14:	2320      	movs	r3, #32
 8012b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b1a:	e040      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b1c:	2340      	movs	r3, #64	; 0x40
 8012b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b22:	e03c      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b24:	2380      	movs	r3, #128	; 0x80
 8012b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b2a:	e038      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a5b      	ldr	r2, [pc, #364]	; (8012ca0 <UART_SetConfig+0x6a8>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d130      	bne.n	8012b98 <UART_SetConfig+0x5a0>
 8012b36:	4b57      	ldr	r3, [pc, #348]	; (8012c94 <UART_SetConfig+0x69c>)
 8012b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b3a:	f003 0307 	and.w	r3, r3, #7
 8012b3e:	2b05      	cmp	r3, #5
 8012b40:	d826      	bhi.n	8012b90 <UART_SetConfig+0x598>
 8012b42:	a201      	add	r2, pc, #4	; (adr r2, 8012b48 <UART_SetConfig+0x550>)
 8012b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b48:	08012b61 	.word	0x08012b61
 8012b4c:	08012b69 	.word	0x08012b69
 8012b50:	08012b71 	.word	0x08012b71
 8012b54:	08012b79 	.word	0x08012b79
 8012b58:	08012b81 	.word	0x08012b81
 8012b5c:	08012b89 	.word	0x08012b89
 8012b60:	2302      	movs	r3, #2
 8012b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b66:	e01a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b68:	2304      	movs	r3, #4
 8012b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b6e:	e016      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b70:	2308      	movs	r3, #8
 8012b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b76:	e012      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b78:	2310      	movs	r3, #16
 8012b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b7e:	e00e      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b80:	2320      	movs	r3, #32
 8012b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b86:	e00a      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b88:	2340      	movs	r3, #64	; 0x40
 8012b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b8e:	e006      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b90:	2380      	movs	r3, #128	; 0x80
 8012b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b96:	e002      	b.n	8012b9e <UART_SetConfig+0x5a6>
 8012b98:	2380      	movs	r3, #128	; 0x80
 8012b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	4a3f      	ldr	r2, [pc, #252]	; (8012ca0 <UART_SetConfig+0x6a8>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	f040 80f8 	bne.w	8012d9a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012bae:	2b20      	cmp	r3, #32
 8012bb0:	dc46      	bgt.n	8012c40 <UART_SetConfig+0x648>
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	f2c0 8082 	blt.w	8012cbc <UART_SetConfig+0x6c4>
 8012bb8:	3b02      	subs	r3, #2
 8012bba:	2b1e      	cmp	r3, #30
 8012bbc:	d87e      	bhi.n	8012cbc <UART_SetConfig+0x6c4>
 8012bbe:	a201      	add	r2, pc, #4	; (adr r2, 8012bc4 <UART_SetConfig+0x5cc>)
 8012bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bc4:	08012c47 	.word	0x08012c47
 8012bc8:	08012cbd 	.word	0x08012cbd
 8012bcc:	08012c4f 	.word	0x08012c4f
 8012bd0:	08012cbd 	.word	0x08012cbd
 8012bd4:	08012cbd 	.word	0x08012cbd
 8012bd8:	08012cbd 	.word	0x08012cbd
 8012bdc:	08012c5f 	.word	0x08012c5f
 8012be0:	08012cbd 	.word	0x08012cbd
 8012be4:	08012cbd 	.word	0x08012cbd
 8012be8:	08012cbd 	.word	0x08012cbd
 8012bec:	08012cbd 	.word	0x08012cbd
 8012bf0:	08012cbd 	.word	0x08012cbd
 8012bf4:	08012cbd 	.word	0x08012cbd
 8012bf8:	08012cbd 	.word	0x08012cbd
 8012bfc:	08012c6f 	.word	0x08012c6f
 8012c00:	08012cbd 	.word	0x08012cbd
 8012c04:	08012cbd 	.word	0x08012cbd
 8012c08:	08012cbd 	.word	0x08012cbd
 8012c0c:	08012cbd 	.word	0x08012cbd
 8012c10:	08012cbd 	.word	0x08012cbd
 8012c14:	08012cbd 	.word	0x08012cbd
 8012c18:	08012cbd 	.word	0x08012cbd
 8012c1c:	08012cbd 	.word	0x08012cbd
 8012c20:	08012cbd 	.word	0x08012cbd
 8012c24:	08012cbd 	.word	0x08012cbd
 8012c28:	08012cbd 	.word	0x08012cbd
 8012c2c:	08012cbd 	.word	0x08012cbd
 8012c30:	08012cbd 	.word	0x08012cbd
 8012c34:	08012cbd 	.word	0x08012cbd
 8012c38:	08012cbd 	.word	0x08012cbd
 8012c3c:	08012caf 	.word	0x08012caf
 8012c40:	2b40      	cmp	r3, #64	; 0x40
 8012c42:	d037      	beq.n	8012cb4 <UART_SetConfig+0x6bc>
 8012c44:	e03a      	b.n	8012cbc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012c46:	f7fb fa85 	bl	800e154 <HAL_RCCEx_GetD3PCLK1Freq>
 8012c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012c4c:	e03c      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7fb fa94 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012c5c:	e034      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c5e:	f107 0318 	add.w	r3, r7, #24
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7fb fbe0 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012c6c:	e02c      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c6e:	4b09      	ldr	r3, [pc, #36]	; (8012c94 <UART_SetConfig+0x69c>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f003 0320 	and.w	r3, r3, #32
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d016      	beq.n	8012ca8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012c7a:	4b06      	ldr	r3, [pc, #24]	; (8012c94 <UART_SetConfig+0x69c>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	08db      	lsrs	r3, r3, #3
 8012c80:	f003 0303 	and.w	r3, r3, #3
 8012c84:	4a07      	ldr	r2, [pc, #28]	; (8012ca4 <UART_SetConfig+0x6ac>)
 8012c86:	fa22 f303 	lsr.w	r3, r2, r3
 8012c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012c8c:	e01c      	b.n	8012cc8 <UART_SetConfig+0x6d0>
 8012c8e:	bf00      	nop
 8012c90:	40011400 	.word	0x40011400
 8012c94:	58024400 	.word	0x58024400
 8012c98:	40007800 	.word	0x40007800
 8012c9c:	40007c00 	.word	0x40007c00
 8012ca0:	58000c00 	.word	0x58000c00
 8012ca4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8012ca8:	4b9d      	ldr	r3, [pc, #628]	; (8012f20 <UART_SetConfig+0x928>)
 8012caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012cac:	e00c      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012cae:	4b9d      	ldr	r3, [pc, #628]	; (8012f24 <UART_SetConfig+0x92c>)
 8012cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012cb2:	e009      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012cba:	e005      	b.n	8012cc8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012cc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f000 81de 	beq.w	801308c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd4:	4a94      	ldr	r2, [pc, #592]	; (8012f28 <UART_SetConfig+0x930>)
 8012cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ce2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	685a      	ldr	r2, [r3, #4]
 8012ce8:	4613      	mov	r3, r2
 8012cea:	005b      	lsls	r3, r3, #1
 8012cec:	4413      	add	r3, r2
 8012cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d305      	bcc.n	8012d00 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d903      	bls.n	8012d08 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012d00:	2301      	movs	r3, #1
 8012d02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012d06:	e1c1      	b.n	801308c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	60bb      	str	r3, [r7, #8]
 8012d0e:	60fa      	str	r2, [r7, #12]
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d14:	4a84      	ldr	r2, [pc, #528]	; (8012f28 <UART_SetConfig+0x930>)
 8012d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	603b      	str	r3, [r7, #0]
 8012d20:	607a      	str	r2, [r7, #4]
 8012d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012d2a:	f7ed fad5 	bl	80002d8 <__aeabi_uldivmod>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	460b      	mov	r3, r1
 8012d32:	4610      	mov	r0, r2
 8012d34:	4619      	mov	r1, r3
 8012d36:	f04f 0200 	mov.w	r2, #0
 8012d3a:	f04f 0300 	mov.w	r3, #0
 8012d3e:	020b      	lsls	r3, r1, #8
 8012d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012d44:	0202      	lsls	r2, r0, #8
 8012d46:	6979      	ldr	r1, [r7, #20]
 8012d48:	6849      	ldr	r1, [r1, #4]
 8012d4a:	0849      	lsrs	r1, r1, #1
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	4605      	mov	r5, r0
 8012d52:	eb12 0804 	adds.w	r8, r2, r4
 8012d56:	eb43 0905 	adc.w	r9, r3, r5
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	469a      	mov	sl, r3
 8012d62:	4693      	mov	fp, r2
 8012d64:	4652      	mov	r2, sl
 8012d66:	465b      	mov	r3, fp
 8012d68:	4640      	mov	r0, r8
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	f7ed fab4 	bl	80002d8 <__aeabi_uldivmod>
 8012d70:	4602      	mov	r2, r0
 8012d72:	460b      	mov	r3, r1
 8012d74:	4613      	mov	r3, r2
 8012d76:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012d7e:	d308      	bcc.n	8012d92 <UART_SetConfig+0x79a>
 8012d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d86:	d204      	bcs.n	8012d92 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d8e:	60da      	str	r2, [r3, #12]
 8012d90:	e17c      	b.n	801308c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8012d92:	2301      	movs	r3, #1
 8012d94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012d98:	e178      	b.n	801308c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	69db      	ldr	r3, [r3, #28]
 8012d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012da2:	f040 80c5 	bne.w	8012f30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8012da6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012daa:	2b20      	cmp	r3, #32
 8012dac:	dc48      	bgt.n	8012e40 <UART_SetConfig+0x848>
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	db7b      	blt.n	8012eaa <UART_SetConfig+0x8b2>
 8012db2:	2b20      	cmp	r3, #32
 8012db4:	d879      	bhi.n	8012eaa <UART_SetConfig+0x8b2>
 8012db6:	a201      	add	r2, pc, #4	; (adr r2, 8012dbc <UART_SetConfig+0x7c4>)
 8012db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dbc:	08012e47 	.word	0x08012e47
 8012dc0:	08012e4f 	.word	0x08012e4f
 8012dc4:	08012eab 	.word	0x08012eab
 8012dc8:	08012eab 	.word	0x08012eab
 8012dcc:	08012e57 	.word	0x08012e57
 8012dd0:	08012eab 	.word	0x08012eab
 8012dd4:	08012eab 	.word	0x08012eab
 8012dd8:	08012eab 	.word	0x08012eab
 8012ddc:	08012e67 	.word	0x08012e67
 8012de0:	08012eab 	.word	0x08012eab
 8012de4:	08012eab 	.word	0x08012eab
 8012de8:	08012eab 	.word	0x08012eab
 8012dec:	08012eab 	.word	0x08012eab
 8012df0:	08012eab 	.word	0x08012eab
 8012df4:	08012eab 	.word	0x08012eab
 8012df8:	08012eab 	.word	0x08012eab
 8012dfc:	08012e77 	.word	0x08012e77
 8012e00:	08012eab 	.word	0x08012eab
 8012e04:	08012eab 	.word	0x08012eab
 8012e08:	08012eab 	.word	0x08012eab
 8012e0c:	08012eab 	.word	0x08012eab
 8012e10:	08012eab 	.word	0x08012eab
 8012e14:	08012eab 	.word	0x08012eab
 8012e18:	08012eab 	.word	0x08012eab
 8012e1c:	08012eab 	.word	0x08012eab
 8012e20:	08012eab 	.word	0x08012eab
 8012e24:	08012eab 	.word	0x08012eab
 8012e28:	08012eab 	.word	0x08012eab
 8012e2c:	08012eab 	.word	0x08012eab
 8012e30:	08012eab 	.word	0x08012eab
 8012e34:	08012eab 	.word	0x08012eab
 8012e38:	08012eab 	.word	0x08012eab
 8012e3c:	08012e9d 	.word	0x08012e9d
 8012e40:	2b40      	cmp	r3, #64	; 0x40
 8012e42:	d02e      	beq.n	8012ea2 <UART_SetConfig+0x8aa>
 8012e44:	e031      	b.n	8012eaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012e46:	f7f9 f9cf 	bl	800c1e8 <HAL_RCC_GetPCLK1Freq>
 8012e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012e4c:	e033      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012e4e:	f7f9 f9e1 	bl	800c214 <HAL_RCC_GetPCLK2Freq>
 8012e52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012e54:	e02f      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fb f990 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012e64:	e027      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e66:	f107 0318 	add.w	r3, r7, #24
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fb fadc 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012e74:	e01f      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e76:	4b2d      	ldr	r3, [pc, #180]	; (8012f2c <UART_SetConfig+0x934>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f003 0320 	and.w	r3, r3, #32
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d009      	beq.n	8012e96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e82:	4b2a      	ldr	r3, [pc, #168]	; (8012f2c <UART_SetConfig+0x934>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	08db      	lsrs	r3, r3, #3
 8012e88:	f003 0303 	and.w	r3, r3, #3
 8012e8c:	4a24      	ldr	r2, [pc, #144]	; (8012f20 <UART_SetConfig+0x928>)
 8012e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8012e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e94:	e00f      	b.n	8012eb6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012e96:	4b22      	ldr	r3, [pc, #136]	; (8012f20 <UART_SetConfig+0x928>)
 8012e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012e9a:	e00c      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012e9c:	4b21      	ldr	r3, [pc, #132]	; (8012f24 <UART_SetConfig+0x92c>)
 8012e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012ea0:	e009      	b.n	8012eb6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012ea8:	e005      	b.n	8012eb6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f000 80e7 	beq.w	801308c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec2:	4a19      	ldr	r2, [pc, #100]	; (8012f28 <UART_SetConfig+0x930>)
 8012ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ec8:	461a      	mov	r2, r3
 8012eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed0:	005a      	lsls	r2, r3, #1
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	085b      	lsrs	r3, r3, #1
 8012ed8:	441a      	add	r2, r3
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee6:	2b0f      	cmp	r3, #15
 8012ee8:	d916      	bls.n	8012f18 <UART_SetConfig+0x920>
 8012eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ef0:	d212      	bcs.n	8012f18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	f023 030f 	bic.w	r3, r3, #15
 8012efa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efe:	085b      	lsrs	r3, r3, #1
 8012f00:	b29b      	uxth	r3, r3
 8012f02:	f003 0307 	and.w	r3, r3, #7
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012f14:	60da      	str	r2, [r3, #12]
 8012f16:	e0b9      	b.n	801308c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012f18:	2301      	movs	r3, #1
 8012f1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012f1e:	e0b5      	b.n	801308c <UART_SetConfig+0xa94>
 8012f20:	03d09000 	.word	0x03d09000
 8012f24:	003d0900 	.word	0x003d0900
 8012f28:	08019280 	.word	0x08019280
 8012f2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012f30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f34:	2b20      	cmp	r3, #32
 8012f36:	dc49      	bgt.n	8012fcc <UART_SetConfig+0x9d4>
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	db7c      	blt.n	8013036 <UART_SetConfig+0xa3e>
 8012f3c:	2b20      	cmp	r3, #32
 8012f3e:	d87a      	bhi.n	8013036 <UART_SetConfig+0xa3e>
 8012f40:	a201      	add	r2, pc, #4	; (adr r2, 8012f48 <UART_SetConfig+0x950>)
 8012f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f46:	bf00      	nop
 8012f48:	08012fd3 	.word	0x08012fd3
 8012f4c:	08012fdb 	.word	0x08012fdb
 8012f50:	08013037 	.word	0x08013037
 8012f54:	08013037 	.word	0x08013037
 8012f58:	08012fe3 	.word	0x08012fe3
 8012f5c:	08013037 	.word	0x08013037
 8012f60:	08013037 	.word	0x08013037
 8012f64:	08013037 	.word	0x08013037
 8012f68:	08012ff3 	.word	0x08012ff3
 8012f6c:	08013037 	.word	0x08013037
 8012f70:	08013037 	.word	0x08013037
 8012f74:	08013037 	.word	0x08013037
 8012f78:	08013037 	.word	0x08013037
 8012f7c:	08013037 	.word	0x08013037
 8012f80:	08013037 	.word	0x08013037
 8012f84:	08013037 	.word	0x08013037
 8012f88:	08013003 	.word	0x08013003
 8012f8c:	08013037 	.word	0x08013037
 8012f90:	08013037 	.word	0x08013037
 8012f94:	08013037 	.word	0x08013037
 8012f98:	08013037 	.word	0x08013037
 8012f9c:	08013037 	.word	0x08013037
 8012fa0:	08013037 	.word	0x08013037
 8012fa4:	08013037 	.word	0x08013037
 8012fa8:	08013037 	.word	0x08013037
 8012fac:	08013037 	.word	0x08013037
 8012fb0:	08013037 	.word	0x08013037
 8012fb4:	08013037 	.word	0x08013037
 8012fb8:	08013037 	.word	0x08013037
 8012fbc:	08013037 	.word	0x08013037
 8012fc0:	08013037 	.word	0x08013037
 8012fc4:	08013037 	.word	0x08013037
 8012fc8:	08013029 	.word	0x08013029
 8012fcc:	2b40      	cmp	r3, #64	; 0x40
 8012fce:	d02e      	beq.n	801302e <UART_SetConfig+0xa36>
 8012fd0:	e031      	b.n	8013036 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012fd2:	f7f9 f909 	bl	800c1e8 <HAL_RCC_GetPCLK1Freq>
 8012fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012fd8:	e033      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012fda:	f7f9 f91b 	bl	800c214 <HAL_RCC_GetPCLK2Freq>
 8012fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012fe0:	e02f      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fb f8ca 	bl	800e180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012ff0:	e027      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ff2:	f107 0318 	add.w	r3, r7, #24
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7fb fa16 	bl	800e428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013000:	e01f      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013002:	4b2d      	ldr	r3, [pc, #180]	; (80130b8 <UART_SetConfig+0xac0>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	f003 0320 	and.w	r3, r3, #32
 801300a:	2b00      	cmp	r3, #0
 801300c:	d009      	beq.n	8013022 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801300e:	4b2a      	ldr	r3, [pc, #168]	; (80130b8 <UART_SetConfig+0xac0>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	08db      	lsrs	r3, r3, #3
 8013014:	f003 0303 	and.w	r3, r3, #3
 8013018:	4a28      	ldr	r2, [pc, #160]	; (80130bc <UART_SetConfig+0xac4>)
 801301a:	fa22 f303 	lsr.w	r3, r2, r3
 801301e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013020:	e00f      	b.n	8013042 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013022:	4b26      	ldr	r3, [pc, #152]	; (80130bc <UART_SetConfig+0xac4>)
 8013024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013026:	e00c      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013028:	4b25      	ldr	r3, [pc, #148]	; (80130c0 <UART_SetConfig+0xac8>)
 801302a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801302c:	e009      	b.n	8013042 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801302e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013034:	e005      	b.n	8013042 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013036:	2300      	movs	r3, #0
 8013038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801303a:	2301      	movs	r3, #1
 801303c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013040:	bf00      	nop
    }

    if (pclk != 0U)
 8013042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013044:	2b00      	cmp	r3, #0
 8013046:	d021      	beq.n	801308c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304c:	4a1d      	ldr	r2, [pc, #116]	; (80130c4 <UART_SetConfig+0xacc>)
 801304e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013052:	461a      	mov	r2, r3
 8013054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013056:	fbb3 f2f2 	udiv	r2, r3, r2
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	085b      	lsrs	r3, r3, #1
 8013060:	441a      	add	r2, r3
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	fbb2 f3f3 	udiv	r3, r2, r3
 801306a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	2b0f      	cmp	r3, #15
 8013070:	d909      	bls.n	8013086 <UART_SetConfig+0xa8e>
 8013072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013078:	d205      	bcs.n	8013086 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307c:	b29a      	uxth	r2, r3
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	60da      	str	r2, [r3, #12]
 8013084:	e002      	b.n	801308c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013086:	2301      	movs	r3, #1
 8013088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	2201      	movs	r2, #1
 8013090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	2201      	movs	r2, #1
 8013098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	2200      	movs	r2, #0
 80130a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	2200      	movs	r2, #0
 80130a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80130a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3748      	adds	r7, #72	; 0x48
 80130b0:	46bd      	mov	sp, r7
 80130b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80130b6:	bf00      	nop
 80130b8:	58024400 	.word	0x58024400
 80130bc:	03d09000 	.word	0x03d09000
 80130c0:	003d0900 	.word	0x003d0900
 80130c4:	08019280 	.word	0x08019280

080130c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130d4:	f003 0301 	and.w	r3, r3, #1
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00a      	beq.n	80130f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	430a      	orrs	r2, r1
 80130f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130f6:	f003 0302 	and.w	r3, r3, #2
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00a      	beq.n	8013114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	430a      	orrs	r2, r1
 8013112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00a      	beq.n	8013136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	430a      	orrs	r2, r1
 8013134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801313a:	f003 0308 	and.w	r3, r3, #8
 801313e:	2b00      	cmp	r3, #0
 8013140:	d00a      	beq.n	8013158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	430a      	orrs	r2, r1
 8013156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801315c:	f003 0310 	and.w	r3, r3, #16
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00a      	beq.n	801317a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	430a      	orrs	r2, r1
 8013178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801317e:	f003 0320 	and.w	r3, r3, #32
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00a      	beq.n	801319c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	430a      	orrs	r2, r1
 801319a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d01a      	beq.n	80131de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	430a      	orrs	r2, r1
 80131bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131c6:	d10a      	bne.n	80131de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	430a      	orrs	r2, r1
 80131dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00a      	beq.n	8013200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	430a      	orrs	r2, r1
 80131fe:	605a      	str	r2, [r3, #4]
  }
}
 8013200:	bf00      	nop
 8013202:	370c      	adds	r7, #12
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr

0801320c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b098      	sub	sp, #96	; 0x60
 8013210:	af02      	add	r7, sp, #8
 8013212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801321c:	f7f1 fc88 	bl	8004b30 <HAL_GetTick>
 8013220:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f003 0308 	and.w	r3, r3, #8
 801322c:	2b08      	cmp	r3, #8
 801322e:	d12f      	bne.n	8013290 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013238:	2200      	movs	r2, #0
 801323a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 f88e 	bl	8013360 <UART_WaitOnFlagUntilTimeout>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d022      	beq.n	8013290 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	e853 3f00 	ldrex	r3, [r3]
 8013256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801325a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801325e:	653b      	str	r3, [r7, #80]	; 0x50
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	461a      	mov	r2, r3
 8013266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013268:	647b      	str	r3, [r7, #68]	; 0x44
 801326a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801326c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801326e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013270:	e841 2300 	strex	r3, r2, [r1]
 8013274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013278:	2b00      	cmp	r3, #0
 801327a:	d1e6      	bne.n	801324a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2220      	movs	r2, #32
 8013280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2200      	movs	r2, #0
 8013288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801328c:	2303      	movs	r3, #3
 801328e:	e063      	b.n	8013358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f003 0304 	and.w	r3, r3, #4
 801329a:	2b04      	cmp	r3, #4
 801329c:	d149      	bne.n	8013332 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801329e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132a6:	2200      	movs	r2, #0
 80132a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 f857 	bl	8013360 <UART_WaitOnFlagUntilTimeout>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d03c      	beq.n	8013332 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	e853 3f00 	ldrex	r3, [r3]
 80132c4:	623b      	str	r3, [r7, #32]
   return(result);
 80132c6:	6a3b      	ldr	r3, [r7, #32]
 80132c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80132cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	461a      	mov	r2, r3
 80132d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132d6:	633b      	str	r3, [r7, #48]	; 0x30
 80132d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132de:	e841 2300 	strex	r3, r2, [r1]
 80132e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80132e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1e6      	bne.n	80132b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	3308      	adds	r3, #8
 80132f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	e853 3f00 	ldrex	r3, [r3]
 80132f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f023 0301 	bic.w	r3, r3, #1
 8013300:	64bb      	str	r3, [r7, #72]	; 0x48
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3308      	adds	r3, #8
 8013308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801330a:	61fa      	str	r2, [r7, #28]
 801330c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801330e:	69b9      	ldr	r1, [r7, #24]
 8013310:	69fa      	ldr	r2, [r7, #28]
 8013312:	e841 2300 	strex	r3, r2, [r1]
 8013316:	617b      	str	r3, [r7, #20]
   return(result);
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d1e5      	bne.n	80132ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2220      	movs	r2, #32
 8013322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2200      	movs	r2, #0
 801332a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801332e:	2303      	movs	r3, #3
 8013330:	e012      	b.n	8013358 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2220      	movs	r2, #32
 8013336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2220      	movs	r2, #32
 801333e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2200      	movs	r2, #0
 801334c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2200      	movs	r2, #0
 8013352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3758      	adds	r7, #88	; 0x58
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	603b      	str	r3, [r7, #0]
 801336c:	4613      	mov	r3, r2
 801336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013370:	e049      	b.n	8013406 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013378:	d045      	beq.n	8013406 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801337a:	f7f1 fbd9 	bl	8004b30 <HAL_GetTick>
 801337e:	4602      	mov	r2, r0
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	1ad3      	subs	r3, r2, r3
 8013384:	69ba      	ldr	r2, [r7, #24]
 8013386:	429a      	cmp	r2, r3
 8013388:	d302      	bcc.n	8013390 <UART_WaitOnFlagUntilTimeout+0x30>
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d101      	bne.n	8013394 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013390:	2303      	movs	r3, #3
 8013392:	e048      	b.n	8013426 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	f003 0304 	and.w	r3, r3, #4
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d031      	beq.n	8013406 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	69db      	ldr	r3, [r3, #28]
 80133a8:	f003 0308 	and.w	r3, r3, #8
 80133ac:	2b08      	cmp	r3, #8
 80133ae:	d110      	bne.n	80133d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2208      	movs	r2, #8
 80133b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80133b8:	68f8      	ldr	r0, [r7, #12]
 80133ba:	f000 f839 	bl	8013430 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2208      	movs	r2, #8
 80133c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2200      	movs	r2, #0
 80133ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80133ce:	2301      	movs	r3, #1
 80133d0:	e029      	b.n	8013426 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80133dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80133e0:	d111      	bne.n	8013406 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80133ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80133ec:	68f8      	ldr	r0, [r7, #12]
 80133ee:	f000 f81f 	bl	8013430 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2220      	movs	r2, #32
 80133f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2200      	movs	r2, #0
 80133fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013402:	2303      	movs	r3, #3
 8013404:	e00f      	b.n	8013426 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	69da      	ldr	r2, [r3, #28]
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	4013      	ands	r3, r2
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	429a      	cmp	r2, r3
 8013414:	bf0c      	ite	eq
 8013416:	2301      	moveq	r3, #1
 8013418:	2300      	movne	r3, #0
 801341a:	b2db      	uxtb	r3, r3
 801341c:	461a      	mov	r2, r3
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	429a      	cmp	r2, r3
 8013422:	d0a6      	beq.n	8013372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	3710      	adds	r7, #16
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
	...

08013430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013430:	b480      	push	{r7}
 8013432:	b095      	sub	sp, #84	; 0x54
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013440:	e853 3f00 	ldrex	r3, [r3]
 8013444:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801344c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	461a      	mov	r2, r3
 8013454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013456:	643b      	str	r3, [r7, #64]	; 0x40
 8013458:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801345a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801345c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801345e:	e841 2300 	strex	r3, r2, [r1]
 8013462:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013466:	2b00      	cmp	r3, #0
 8013468:	d1e6      	bne.n	8013438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	3308      	adds	r3, #8
 8013470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013472:	6a3b      	ldr	r3, [r7, #32]
 8013474:	e853 3f00 	ldrex	r3, [r3]
 8013478:	61fb      	str	r3, [r7, #28]
   return(result);
 801347a:	69fa      	ldr	r2, [r7, #28]
 801347c:	4b1e      	ldr	r3, [pc, #120]	; (80134f8 <UART_EndRxTransfer+0xc8>)
 801347e:	4013      	ands	r3, r2
 8013480:	64bb      	str	r3, [r7, #72]	; 0x48
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	3308      	adds	r3, #8
 8013488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801348a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801348c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801348e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013492:	e841 2300 	strex	r3, r2, [r1]
 8013496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349a:	2b00      	cmp	r3, #0
 801349c:	d1e5      	bne.n	801346a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d118      	bne.n	80134d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	e853 3f00 	ldrex	r3, [r3]
 80134b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	f023 0310 	bic.w	r3, r3, #16
 80134ba:	647b      	str	r3, [r7, #68]	; 0x44
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	461a      	mov	r2, r3
 80134c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134c4:	61bb      	str	r3, [r7, #24]
 80134c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134c8:	6979      	ldr	r1, [r7, #20]
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	e841 2300 	strex	r3, r2, [r1]
 80134d0:	613b      	str	r3, [r7, #16]
   return(result);
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1e6      	bne.n	80134a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2220      	movs	r2, #32
 80134dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	2200      	movs	r2, #0
 80134ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 80134ec:	bf00      	nop
 80134ee:	3754      	adds	r7, #84	; 0x54
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr
 80134f8:	effffffe 	.word	0xeffffffe

080134fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801350a:	2b01      	cmp	r3, #1
 801350c:	d101      	bne.n	8013512 <HAL_UARTEx_DisableFifoMode+0x16>
 801350e:	2302      	movs	r3, #2
 8013510:	e027      	b.n	8013562 <HAL_UARTEx_DisableFifoMode+0x66>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2201      	movs	r2, #1
 8013516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2224      	movs	r2, #36	; 0x24
 801351e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f022 0201 	bic.w	r2, r2, #1
 8013538:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2200      	movs	r2, #0
 8013546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2220      	movs	r2, #32
 8013554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013560:	2300      	movs	r3, #0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801356e:	b580      	push	{r7, lr}
 8013570:	b084      	sub	sp, #16
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801357e:	2b01      	cmp	r3, #1
 8013580:	d101      	bne.n	8013586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013582:	2302      	movs	r3, #2
 8013584:	e02d      	b.n	80135e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2201      	movs	r2, #1
 801358a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2224      	movs	r2, #36	; 0x24
 8013592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	f022 0201 	bic.w	r2, r2, #1
 80135ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	689b      	ldr	r3, [r3, #8]
 80135b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	430a      	orrs	r2, r1
 80135c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 f850 	bl	8013668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2220      	movs	r2, #32
 80135d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80135e0:	2300      	movs	r3, #0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b084      	sub	sp, #16
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
 80135f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d101      	bne.n	8013602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80135fe:	2302      	movs	r3, #2
 8013600:	e02d      	b.n	801365e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2201      	movs	r2, #1
 8013606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2224      	movs	r2, #36	; 0x24
 801360e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	681a      	ldr	r2, [r3, #0]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f022 0201 	bic.w	r2, r2, #1
 8013628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	689b      	ldr	r3, [r3, #8]
 8013630:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	683a      	ldr	r2, [r7, #0]
 801363a:	430a      	orrs	r2, r1
 801363c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 f812 	bl	8013668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	68fa      	ldr	r2, [r7, #12]
 801364a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2220      	movs	r2, #32
 8013650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2200      	movs	r2, #0
 8013658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801365c:	2300      	movs	r3, #0
}
 801365e:	4618      	mov	r0, r3
 8013660:	3710      	adds	r7, #16
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
	...

08013668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013668:	b480      	push	{r7}
 801366a:	b085      	sub	sp, #20
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013674:	2b00      	cmp	r3, #0
 8013676:	d108      	bne.n	801368a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2201      	movs	r2, #1
 801367c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2201      	movs	r2, #1
 8013684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013688:	e031      	b.n	80136ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801368a:	2310      	movs	r3, #16
 801368c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801368e:	2310      	movs	r3, #16
 8013690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	0e5b      	lsrs	r3, r3, #25
 801369a:	b2db      	uxtb	r3, r3
 801369c:	f003 0307 	and.w	r3, r3, #7
 80136a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	689b      	ldr	r3, [r3, #8]
 80136a8:	0f5b      	lsrs	r3, r3, #29
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	f003 0307 	and.w	r3, r3, #7
 80136b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80136b2:	7bbb      	ldrb	r3, [r7, #14]
 80136b4:	7b3a      	ldrb	r2, [r7, #12]
 80136b6:	4911      	ldr	r1, [pc, #68]	; (80136fc <UARTEx_SetNbDataToProcess+0x94>)
 80136b8:	5c8a      	ldrb	r2, [r1, r2]
 80136ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80136be:	7b3a      	ldrb	r2, [r7, #12]
 80136c0:	490f      	ldr	r1, [pc, #60]	; (8013700 <UARTEx_SetNbDataToProcess+0x98>)
 80136c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80136c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80136d0:	7bfb      	ldrb	r3, [r7, #15]
 80136d2:	7b7a      	ldrb	r2, [r7, #13]
 80136d4:	4909      	ldr	r1, [pc, #36]	; (80136fc <UARTEx_SetNbDataToProcess+0x94>)
 80136d6:	5c8a      	ldrb	r2, [r1, r2]
 80136d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80136dc:	7b7a      	ldrb	r2, [r7, #13]
 80136de:	4908      	ldr	r1, [pc, #32]	; (8013700 <UARTEx_SetNbDataToProcess+0x98>)
 80136e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80136e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80136e6:	b29a      	uxth	r2, r3
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80136ee:	bf00      	nop
 80136f0:	3714      	adds	r7, #20
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop
 80136fc:	08019298 	.word	0x08019298
 8013700:	080192a0 	.word	0x080192a0

08013704 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d121      	bne.n	801375a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	4b27      	ldr	r3, [pc, #156]	; (80137b8 <FMC_SDRAM_Init+0xb4>)
 801371c:	4013      	ands	r3, r2
 801371e:	683a      	ldr	r2, [r7, #0]
 8013720:	6851      	ldr	r1, [r2, #4]
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	6892      	ldr	r2, [r2, #8]
 8013726:	4311      	orrs	r1, r2
 8013728:	683a      	ldr	r2, [r7, #0]
 801372a:	68d2      	ldr	r2, [r2, #12]
 801372c:	4311      	orrs	r1, r2
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	6912      	ldr	r2, [r2, #16]
 8013732:	4311      	orrs	r1, r2
 8013734:	683a      	ldr	r2, [r7, #0]
 8013736:	6952      	ldr	r2, [r2, #20]
 8013738:	4311      	orrs	r1, r2
 801373a:	683a      	ldr	r2, [r7, #0]
 801373c:	6992      	ldr	r2, [r2, #24]
 801373e:	4311      	orrs	r1, r2
 8013740:	683a      	ldr	r2, [r7, #0]
 8013742:	69d2      	ldr	r2, [r2, #28]
 8013744:	4311      	orrs	r1, r2
 8013746:	683a      	ldr	r2, [r7, #0]
 8013748:	6a12      	ldr	r2, [r2, #32]
 801374a:	4311      	orrs	r1, r2
 801374c:	683a      	ldr	r2, [r7, #0]
 801374e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013750:	430a      	orrs	r2, r1
 8013752:	431a      	orrs	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	601a      	str	r2, [r3, #0]
 8013758:	e026      	b.n	80137a8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	69d9      	ldr	r1, [r3, #28]
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	6a1b      	ldr	r3, [r3, #32]
 801376a:	4319      	orrs	r1, r3
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013770:	430b      	orrs	r3, r1
 8013772:	431a      	orrs	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685a      	ldr	r2, [r3, #4]
 801377c:	4b0e      	ldr	r3, [pc, #56]	; (80137b8 <FMC_SDRAM_Init+0xb4>)
 801377e:	4013      	ands	r3, r2
 8013780:	683a      	ldr	r2, [r7, #0]
 8013782:	6851      	ldr	r1, [r2, #4]
 8013784:	683a      	ldr	r2, [r7, #0]
 8013786:	6892      	ldr	r2, [r2, #8]
 8013788:	4311      	orrs	r1, r2
 801378a:	683a      	ldr	r2, [r7, #0]
 801378c:	68d2      	ldr	r2, [r2, #12]
 801378e:	4311      	orrs	r1, r2
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	6912      	ldr	r2, [r2, #16]
 8013794:	4311      	orrs	r1, r2
 8013796:	683a      	ldr	r2, [r7, #0]
 8013798:	6952      	ldr	r2, [r2, #20]
 801379a:	4311      	orrs	r1, r2
 801379c:	683a      	ldr	r2, [r7, #0]
 801379e:	6992      	ldr	r2, [r2, #24]
 80137a0:	430a      	orrs	r2, r1
 80137a2:	431a      	orrs	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80137a8:	2300      	movs	r3, #0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b4:	4770      	bx	lr
 80137b6:	bf00      	nop
 80137b8:	ffff8000 	.word	0xffff8000

080137bc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d128      	bne.n	8013820 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	1e59      	subs	r1, r3, #1
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	3b01      	subs	r3, #1
 80137e2:	011b      	lsls	r3, r3, #4
 80137e4:	4319      	orrs	r1, r3
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	689b      	ldr	r3, [r3, #8]
 80137ea:	3b01      	subs	r3, #1
 80137ec:	021b      	lsls	r3, r3, #8
 80137ee:	4319      	orrs	r1, r3
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	68db      	ldr	r3, [r3, #12]
 80137f4:	3b01      	subs	r3, #1
 80137f6:	031b      	lsls	r3, r3, #12
 80137f8:	4319      	orrs	r1, r3
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	3b01      	subs	r3, #1
 8013800:	041b      	lsls	r3, r3, #16
 8013802:	4319      	orrs	r1, r3
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	695b      	ldr	r3, [r3, #20]
 8013808:	3b01      	subs	r3, #1
 801380a:	051b      	lsls	r3, r3, #20
 801380c:	4319      	orrs	r1, r3
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	699b      	ldr	r3, [r3, #24]
 8013812:	3b01      	subs	r3, #1
 8013814:	061b      	lsls	r3, r3, #24
 8013816:	430b      	orrs	r3, r1
 8013818:	431a      	orrs	r2, r3
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	609a      	str	r2, [r3, #8]
 801381e:	e02d      	b.n	801387c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	689a      	ldr	r2, [r3, #8]
 8013824:	4b19      	ldr	r3, [pc, #100]	; (801388c <FMC_SDRAM_Timing_Init+0xd0>)
 8013826:	4013      	ands	r3, r2
 8013828:	68ba      	ldr	r2, [r7, #8]
 801382a:	68d2      	ldr	r2, [r2, #12]
 801382c:	3a01      	subs	r2, #1
 801382e:	0311      	lsls	r1, r2, #12
 8013830:	68ba      	ldr	r2, [r7, #8]
 8013832:	6952      	ldr	r2, [r2, #20]
 8013834:	3a01      	subs	r2, #1
 8013836:	0512      	lsls	r2, r2, #20
 8013838:	430a      	orrs	r2, r1
 801383a:	431a      	orrs	r2, r3
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	1e59      	subs	r1, r3, #1
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	3b01      	subs	r3, #1
 8013854:	011b      	lsls	r3, r3, #4
 8013856:	4319      	orrs	r1, r3
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	689b      	ldr	r3, [r3, #8]
 801385c:	3b01      	subs	r3, #1
 801385e:	021b      	lsls	r3, r3, #8
 8013860:	4319      	orrs	r1, r3
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	691b      	ldr	r3, [r3, #16]
 8013866:	3b01      	subs	r3, #1
 8013868:	041b      	lsls	r3, r3, #16
 801386a:	4319      	orrs	r1, r3
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	699b      	ldr	r3, [r3, #24]
 8013870:	3b01      	subs	r3, #1
 8013872:	061b      	lsls	r3, r3, #24
 8013874:	430b      	orrs	r3, r1
 8013876:	431a      	orrs	r2, r3
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3714      	adds	r7, #20
 8013882:	46bd      	mov	sp, r7
 8013884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop
 801388c:	ff0f0fff 	.word	0xff0f0fff

08013890 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	691a      	ldr	r2, [r3, #16]
 80138a0:	4b0c      	ldr	r3, [pc, #48]	; (80138d4 <FMC_SDRAM_SendCommand+0x44>)
 80138a2:	4013      	ands	r3, r2
 80138a4:	68ba      	ldr	r2, [r7, #8]
 80138a6:	6811      	ldr	r1, [r2, #0]
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	6852      	ldr	r2, [r2, #4]
 80138ac:	4311      	orrs	r1, r2
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	6892      	ldr	r2, [r2, #8]
 80138b2:	3a01      	subs	r2, #1
 80138b4:	0152      	lsls	r2, r2, #5
 80138b6:	4311      	orrs	r1, r2
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	68d2      	ldr	r2, [r2, #12]
 80138bc:	0252      	lsls	r2, r2, #9
 80138be:	430a      	orrs	r2, r1
 80138c0:	431a      	orrs	r2, r3
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80138c6:	2300      	movs	r3, #0
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3714      	adds	r7, #20
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	ffc00000 	.word	0xffc00000

080138d8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80138d8:	b480      	push	{r7}
 80138da:	b083      	sub	sp, #12
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	695a      	ldr	r2, [r3, #20]
 80138e6:	4b07      	ldr	r3, [pc, #28]	; (8013904 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80138e8:	4013      	ands	r3, r2
 80138ea:	683a      	ldr	r2, [r7, #0]
 80138ec:	0052      	lsls	r2, r2, #1
 80138ee:	431a      	orrs	r2, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	370c      	adds	r7, #12
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	ffffc001 	.word	0xffffc001

08013908 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8013908:	b084      	sub	sp, #16
 801390a:	b480      	push	{r7}
 801390c:	b085      	sub	sp, #20
 801390e:	af00      	add	r7, sp, #0
 8013910:	6078      	str	r0, [r7, #4]
 8013912:	f107 001c 	add.w	r0, r7, #28
 8013916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801391e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8013920:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8013922:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8013924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8013926:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8013928:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801392a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801392e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	4313      	orrs	r3, r2
 8013934:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	685a      	ldr	r2, [r3, #4]
 801393a:	4b07      	ldr	r3, [pc, #28]	; (8013958 <SDMMC_Init+0x50>)
 801393c:	4013      	ands	r3, r2
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	431a      	orrs	r2, r3
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8013946:	2300      	movs	r3, #0
}
 8013948:	4618      	mov	r0, r3
 801394a:	3714      	adds	r7, #20
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	b004      	add	sp, #16
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop
 8013958:	ffc02c00 	.word	0xffc02c00

0801395c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801396a:	4618      	mov	r0, r3
 801396c:	370c      	adds	r7, #12
 801396e:	46bd      	mov	sp, r7
 8013970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013974:	4770      	bx	lr

08013976 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8013976:	b480      	push	{r7}
 8013978:	b083      	sub	sp, #12
 801397a:	af00      	add	r7, sp, #0
 801397c:	6078      	str	r0, [r7, #4]
 801397e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	681a      	ldr	r2, [r3, #0]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801398a:	2300      	movs	r3, #0
}
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	f043 0203 	orr.w	r2, r3, #3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	370c      	adds	r7, #12
 80139b2:	46bd      	mov	sp, r7
 80139b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b8:	4770      	bx	lr

080139ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80139ba:	b480      	push	{r7}
 80139bc:	b083      	sub	sp, #12
 80139be:	af00      	add	r7, sp, #0
 80139c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0303 	and.w	r3, r3, #3
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	370c      	adds	r7, #12
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr
	...

080139d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80139d8:	b480      	push	{r7}
 80139da:	b085      	sub	sp, #20
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80139e2:	2300      	movs	r3, #0
 80139e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80139f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80139fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8013a02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	4313      	orrs	r3, r2
 8013a08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	68da      	ldr	r2, [r3, #12]
 8013a0e:	4b06      	ldr	r3, [pc, #24]	; (8013a28 <SDMMC_SendCommand+0x50>)
 8013a10:	4013      	ands	r3, r2
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	431a      	orrs	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013a1a:	2300      	movs	r3, #0
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3714      	adds	r7, #20
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr
 8013a28:	fffee0c0 	.word	0xfffee0c0

08013a2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	691b      	ldr	r3, [r3, #16]
 8013a38:	b2db      	uxtb	r3, r3
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8013a46:	b480      	push	{r7}
 8013a48:	b085      	sub	sp, #20
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
 8013a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	3314      	adds	r3, #20
 8013a54:	461a      	mov	r2, r3
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	4413      	add	r3, r2
 8013a5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3714      	adds	r7, #20
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8013a76:	2300      	movs	r3, #0
 8013a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	685a      	ldr	r2, [r3, #4]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013a92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8013a98:	431a      	orrs	r2, r3
                       Data->DPSM);
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8013a9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	4313      	orrs	r3, r2
 8013aa4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	431a      	orrs	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8013ab6:	2300      	movs	r3, #0

}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3714      	adds	r7, #20
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b088      	sub	sp, #32
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013ad2:	2310      	movs	r3, #16
 8013ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013adc:	2300      	movs	r3, #0
 8013ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ae6:	f107 0308 	add.w	r3, r7, #8
 8013aea:	4619      	mov	r1, r3
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7ff ff73 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8013af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013af6:	2110      	movs	r1, #16
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 fa5f 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b00:	69fb      	ldr	r3, [r7, #28]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3720      	adds	r7, #32
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b088      	sub	sp, #32
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8013b18:	2311      	movs	r3, #17
 8013b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b22:	2300      	movs	r3, #0
 8013b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b2c:	f107 0308 	add.w	r3, r7, #8
 8013b30:	4619      	mov	r1, r3
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff ff50 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b3c:	2111      	movs	r1, #17
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f000 fa3c 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b46:	69fb      	ldr	r3, [r7, #28]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3720      	adds	r7, #32
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b088      	sub	sp, #32
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8013b5e:	2312      	movs	r3, #18
 8013b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013b72:	f107 0308 	add.w	r3, r7, #8
 8013b76:	4619      	mov	r1, r3
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff ff2d 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013b82:	2112      	movs	r1, #18
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f000 fa19 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013b8c:	69fb      	ldr	r3, [r7, #28]
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3720      	adds	r7, #32
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}

08013b96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013b96:	b580      	push	{r7, lr}
 8013b98:	b088      	sub	sp, #32
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
 8013b9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013ba4:	2318      	movs	r3, #24
 8013ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013bb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013bb8:	f107 0308 	add.w	r3, r7, #8
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7ff ff0a 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8013bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bc8:	2118      	movs	r1, #24
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 f9f6 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013bd2:	69fb      	ldr	r3, [r7, #28]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3720      	adds	r7, #32
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b088      	sub	sp, #32
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013bea:	2319      	movs	r3, #25
 8013bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013bfe:	f107 0308 	add.w	r3, r7, #8
 8013c02:	4619      	mov	r1, r3
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7ff fee7 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8013c0e:	2119      	movs	r1, #25
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 f9d3 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013c18:	69fb      	ldr	r3, [r7, #28]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3720      	adds	r7, #32
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
	...

08013c24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b088      	sub	sp, #32
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013c30:	230c      	movs	r3, #12
 8013c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013c5c:	f107 0308 	add.w	r3, r7, #8
 8013c60:	4619      	mov	r1, r3
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f7ff feb8 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8013c68:	4a0b      	ldr	r2, [pc, #44]	; (8013c98 <SDMMC_CmdStopTransfer+0x74>)
 8013c6a:	210c      	movs	r1, #12
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f000 f9a5 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013c72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013c86:	d101      	bne.n	8013c8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8013c8c:	69fb      	ldr	r3, [r7, #28]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3720      	adds	r7, #32
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	05f5e100 	.word	0x05f5e100

08013c9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b088      	sub	sp, #32
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013caa:	2307      	movs	r3, #7
 8013cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013cb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013cbe:	f107 0308 	add.w	r3, r7, #8
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff fe87 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8013cce:	2107      	movs	r1, #7
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f000 f973 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013cd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013cd8:	69fb      	ldr	r3, [r7, #28]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3720      	adds	r7, #32
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}

08013ce2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8013ce2:	b580      	push	{r7, lr}
 8013ce4:	b088      	sub	sp, #32
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013cea:	2300      	movs	r3, #0
 8013cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d00:	f107 0308 	add.w	r3, r7, #8
 8013d04:	4619      	mov	r1, r3
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f7ff fe66 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 fb97 	bl	8014440 <SDMMC_GetCmdError>
 8013d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d14:	69fb      	ldr	r3, [r7, #28]
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3720      	adds	r7, #32
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}

08013d1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013d1e:	b580      	push	{r7, lr}
 8013d20:	b088      	sub	sp, #32
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013d26:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013d2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013d2c:	2308      	movs	r3, #8
 8013d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d36:	2300      	movs	r3, #0
 8013d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d40:	f107 0308 	add.w	r3, r7, #8
 8013d44:	4619      	mov	r1, r3
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f7ff fe46 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f000 fb29 	bl	80143a4 <SDMMC_GetCmdResp7>
 8013d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d54:	69fb      	ldr	r3, [r7, #28]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3720      	adds	r7, #32
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}

08013d5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b088      	sub	sp, #32
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
 8013d66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8013d6c:	2337      	movs	r3, #55	; 0x37
 8013d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013d76:	2300      	movs	r3, #0
 8013d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013d80:	f107 0308 	add.w	r3, r7, #8
 8013d84:	4619      	mov	r1, r3
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7ff fe26 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8013d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013d90:	2137      	movs	r1, #55	; 0x37
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f000 f912 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013d9a:	69fb      	ldr	r3, [r7, #28]
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3720      	adds	r7, #32
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b088      	sub	sp, #32
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013db2:	2329      	movs	r3, #41	; 0x29
 8013db4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013dc6:	f107 0308 	add.w	r3, r7, #8
 8013dca:	4619      	mov	r1, r3
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7ff fe03 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 fa2e 	bl	8014234 <SDMMC_GetCmdResp3>
 8013dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013dda:	69fb      	ldr	r3, [r7, #28]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3720      	adds	r7, #32
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b088      	sub	sp, #32
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013df2:	2306      	movs	r3, #6
 8013df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013dfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e06:	f107 0308 	add.w	r3, r7, #8
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f7ff fde3 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8013e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e16:	2106      	movs	r1, #6
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 f8cf 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e20:	69fb      	ldr	r3, [r7, #28]
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3720      	adds	r7, #32
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b088      	sub	sp, #32
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013e32:	2300      	movs	r3, #0
 8013e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013e36:	2333      	movs	r3, #51	; 0x33
 8013e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e40:	2300      	movs	r3, #0
 8013e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e4a:	f107 0308 	add.w	r3, r7, #8
 8013e4e:	4619      	mov	r1, r3
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f7ff fdc1 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8013e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e5a:	2133      	movs	r1, #51	; 0x33
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 f8ad 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013e64:	69fb      	ldr	r3, [r7, #28]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3720      	adds	r7, #32
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013e6e:	b580      	push	{r7, lr}
 8013e70:	b088      	sub	sp, #32
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013e76:	2300      	movs	r3, #0
 8013e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013e7a:	2302      	movs	r3, #2
 8013e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013e84:	2300      	movs	r3, #0
 8013e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013e8e:	f107 0308 	add.w	r3, r7, #8
 8013e92:	4619      	mov	r1, r3
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f7ff fd9f 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f000 f980 	bl	80141a0 <SDMMC_GetCmdResp2>
 8013ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ea2:	69fb      	ldr	r3, [r7, #28]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3720      	adds	r7, #32
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b088      	sub	sp, #32
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013eba:	2309      	movs	r3, #9
 8013ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ecc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013ece:	f107 0308 	add.w	r3, r7, #8
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f7ff fd7f 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 f960 	bl	80141a0 <SDMMC_GetCmdResp2>
 8013ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013ee2:	69fb      	ldr	r3, [r7, #28]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3720      	adds	r7, #32
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b088      	sub	sp, #32
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013efa:	2303      	movs	r3, #3
 8013efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f04:	2300      	movs	r3, #0
 8013f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f0e:	f107 0308 	add.w	r3, r7, #8
 8013f12:	4619      	mov	r1, r3
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7ff fd5f 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013f1a:	683a      	ldr	r2, [r7, #0]
 8013f1c:	2103      	movs	r1, #3
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f000 f9c8 	bl	80142b4 <SDMMC_GetCmdResp6>
 8013f24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f26:	69fb      	ldr	r3, [r7, #28]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3720      	adds	r7, #32
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b088      	sub	sp, #32
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013f3e:	230d      	movs	r3, #13
 8013f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f52:	f107 0308 	add.w	r3, r7, #8
 8013f56:	4619      	mov	r1, r3
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7ff fd3d 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013f62:	210d      	movs	r1, #13
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f000 f829 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013f6c:	69fb      	ldr	r3, [r7, #28]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3720      	adds	r7, #32
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}

08013f76 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8013f76:	b580      	push	{r7, lr}
 8013f78:	b088      	sub	sp, #32
 8013f7a:	af00      	add	r7, sp, #0
 8013f7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013f82:	230d      	movs	r3, #13
 8013f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013f96:	f107 0308 	add.w	r3, r7, #8
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff fd1b 	bl	80139d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fa6:	210d      	movs	r1, #13
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f000 f807 	bl	8013fbc <SDMMC_GetCmdResp1>
 8013fae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013fb0:	69fb      	ldr	r3, [r7, #28]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3720      	adds	r7, #32
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
	...

08013fbc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b088      	sub	sp, #32
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	607a      	str	r2, [r7, #4]
 8013fc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013fca:	4b70      	ldr	r3, [pc, #448]	; (801418c <SDMMC_GetCmdResp1+0x1d0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	4a70      	ldr	r2, [pc, #448]	; (8014190 <SDMMC_GetCmdResp1+0x1d4>)
 8013fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8013fd4:	0a5a      	lsrs	r2, r3, #9
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	fb02 f303 	mul.w	r3, r2, r3
 8013fdc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	1e5a      	subs	r2, r3, #1
 8013fe2:	61fa      	str	r2, [r7, #28]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d102      	bne.n	8013fee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013fe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013fec:	e0c9      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ff2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8013ff4:	69ba      	ldr	r2, [r7, #24]
 8013ff6:	4b67      	ldr	r3, [pc, #412]	; (8014194 <SDMMC_GetCmdResp1+0x1d8>)
 8013ff8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d0ef      	beq.n	8013fde <SDMMC_GetCmdResp1+0x22>
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014004:	2b00      	cmp	r3, #0
 8014006:	d1ea      	bne.n	8013fde <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801400c:	f003 0304 	and.w	r3, r3, #4
 8014010:	2b00      	cmp	r3, #0
 8014012:	d004      	beq.n	801401e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2204      	movs	r2, #4
 8014018:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801401a:	2304      	movs	r3, #4
 801401c:	e0b1      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014022:	f003 0301 	and.w	r3, r3, #1
 8014026:	2b00      	cmp	r3, #0
 8014028:	d004      	beq.n	8014034 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	2201      	movs	r2, #1
 801402e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014030:	2301      	movs	r3, #1
 8014032:	e0a6      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	4a58      	ldr	r2, [pc, #352]	; (8014198 <SDMMC_GetCmdResp1+0x1dc>)
 8014038:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f7ff fcf6 	bl	8013a2c <SDMMC_GetCommandResponse>
 8014040:	4603      	mov	r3, r0
 8014042:	461a      	mov	r2, r3
 8014044:	7afb      	ldrb	r3, [r7, #11]
 8014046:	4293      	cmp	r3, r2
 8014048:	d001      	beq.n	801404e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801404a:	2301      	movs	r3, #1
 801404c:	e099      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801404e:	2100      	movs	r1, #0
 8014050:	68f8      	ldr	r0, [r7, #12]
 8014052:	f7ff fcf8 	bl	8013a46 <SDMMC_GetResponse>
 8014056:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014058:	697a      	ldr	r2, [r7, #20]
 801405a:	4b50      	ldr	r3, [pc, #320]	; (801419c <SDMMC_GetCmdResp1+0x1e0>)
 801405c:	4013      	ands	r3, r2
 801405e:	2b00      	cmp	r3, #0
 8014060:	d101      	bne.n	8014066 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014062:	2300      	movs	r3, #0
 8014064:	e08d      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	2b00      	cmp	r3, #0
 801406a:	da02      	bge.n	8014072 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801406c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014070:	e087      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014078:	2b00      	cmp	r3, #0
 801407a:	d001      	beq.n	8014080 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801407c:	2340      	movs	r3, #64	; 0x40
 801407e:	e080      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014086:	2b00      	cmp	r3, #0
 8014088:	d001      	beq.n	801408e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801408a:	2380      	movs	r3, #128	; 0x80
 801408c:	e079      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014094:	2b00      	cmp	r3, #0
 8014096:	d002      	beq.n	801409e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014098:	f44f 7380 	mov.w	r3, #256	; 0x100
 801409c:	e071      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801409e:	697b      	ldr	r3, [r7, #20]
 80140a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d002      	beq.n	80140ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80140a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140ac:	e069      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d002      	beq.n	80140be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80140b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140bc:	e061      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80140c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80140cc:	e059      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d002      	beq.n	80140de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80140d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80140dc:	e051      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80140e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80140ec:	e049      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d002      	beq.n	80140fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80140f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80140fc:	e041      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014108:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801410c:	e039      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014114:	2b00      	cmp	r3, #0
 8014116:	d002      	beq.n	801411e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801411c:	e031      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014124:	2b00      	cmp	r3, #0
 8014126:	d002      	beq.n	801412e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014128:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801412c:	e029      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014134:	2b00      	cmp	r3, #0
 8014136:	d002      	beq.n	801413e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801413c:	e021      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014148:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801414c:	e019      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014154:	2b00      	cmp	r3, #0
 8014156:	d002      	beq.n	801415e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014158:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801415c:	e011      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014164:	2b00      	cmp	r3, #0
 8014166:	d002      	beq.n	801416e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801416c:	e009      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	f003 0308 	and.w	r3, r3, #8
 8014174:	2b00      	cmp	r3, #0
 8014176:	d002      	beq.n	801417e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014178:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801417c:	e001      	b.n	8014182 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801417e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014182:	4618      	mov	r0, r3
 8014184:	3720      	adds	r7, #32
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	2000000c 	.word	0x2000000c
 8014190:	10624dd3 	.word	0x10624dd3
 8014194:	00200045 	.word	0x00200045
 8014198:	002000c5 	.word	0x002000c5
 801419c:	fdffe008 	.word	0xfdffe008

080141a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80141a8:	4b1f      	ldr	r3, [pc, #124]	; (8014228 <SDMMC_GetCmdResp2+0x88>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	4a1f      	ldr	r2, [pc, #124]	; (801422c <SDMMC_GetCmdResp2+0x8c>)
 80141ae:	fba2 2303 	umull	r2, r3, r2, r3
 80141b2:	0a5b      	lsrs	r3, r3, #9
 80141b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80141b8:	fb02 f303 	mul.w	r3, r2, r3
 80141bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	1e5a      	subs	r2, r3, #1
 80141c2:	60fa      	str	r2, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d102      	bne.n	80141ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80141c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80141cc:	e026      	b.n	801421c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d0ef      	beq.n	80141be <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d1ea      	bne.n	80141be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141ec:	f003 0304 	and.w	r3, r3, #4
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2204      	movs	r2, #4
 80141f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80141fa:	2304      	movs	r3, #4
 80141fc:	e00e      	b.n	801421c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014202:	f003 0301 	and.w	r3, r3, #1
 8014206:	2b00      	cmp	r3, #0
 8014208:	d004      	beq.n	8014214 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2201      	movs	r2, #1
 801420e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014210:	2301      	movs	r3, #1
 8014212:	e003      	b.n	801421c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	4a06      	ldr	r2, [pc, #24]	; (8014230 <SDMMC_GetCmdResp2+0x90>)
 8014218:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3714      	adds	r7, #20
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	2000000c 	.word	0x2000000c
 801422c:	10624dd3 	.word	0x10624dd3
 8014230:	002000c5 	.word	0x002000c5

08014234 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014234:	b480      	push	{r7}
 8014236:	b085      	sub	sp, #20
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801423c:	4b1a      	ldr	r3, [pc, #104]	; (80142a8 <SDMMC_GetCmdResp3+0x74>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	4a1a      	ldr	r2, [pc, #104]	; (80142ac <SDMMC_GetCmdResp3+0x78>)
 8014242:	fba2 2303 	umull	r2, r3, r2, r3
 8014246:	0a5b      	lsrs	r3, r3, #9
 8014248:	f241 3288 	movw	r2, #5000	; 0x1388
 801424c:	fb02 f303 	mul.w	r3, r2, r3
 8014250:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	1e5a      	subs	r2, r3, #1
 8014256:	60fa      	str	r2, [r7, #12]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d102      	bne.n	8014262 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801425c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014260:	e01b      	b.n	801429a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014266:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801426e:	2b00      	cmp	r3, #0
 8014270:	d0ef      	beq.n	8014252 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014278:	2b00      	cmp	r3, #0
 801427a:	d1ea      	bne.n	8014252 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014280:	f003 0304 	and.w	r3, r3, #4
 8014284:	2b00      	cmp	r3, #0
 8014286:	d004      	beq.n	8014292 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2204      	movs	r2, #4
 801428c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801428e:	2304      	movs	r3, #4
 8014290:	e003      	b.n	801429a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4a06      	ldr	r2, [pc, #24]	; (80142b0 <SDMMC_GetCmdResp3+0x7c>)
 8014296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014298:	2300      	movs	r3, #0
}
 801429a:	4618      	mov	r0, r3
 801429c:	3714      	adds	r7, #20
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	2000000c 	.word	0x2000000c
 80142ac:	10624dd3 	.word	0x10624dd3
 80142b0:	002000c5 	.word	0x002000c5

080142b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b088      	sub	sp, #32
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	460b      	mov	r3, r1
 80142be:	607a      	str	r2, [r7, #4]
 80142c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80142c2:	4b35      	ldr	r3, [pc, #212]	; (8014398 <SDMMC_GetCmdResp6+0xe4>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a35      	ldr	r2, [pc, #212]	; (801439c <SDMMC_GetCmdResp6+0xe8>)
 80142c8:	fba2 2303 	umull	r2, r3, r2, r3
 80142cc:	0a5b      	lsrs	r3, r3, #9
 80142ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80142d2:	fb02 f303 	mul.w	r3, r2, r3
 80142d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80142d8:	69fb      	ldr	r3, [r7, #28]
 80142da:	1e5a      	subs	r2, r3, #1
 80142dc:	61fa      	str	r2, [r7, #28]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80142e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80142e6:	e052      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d0ef      	beq.n	80142d8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d1ea      	bne.n	80142d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014306:	f003 0304 	and.w	r3, r3, #4
 801430a:	2b00      	cmp	r3, #0
 801430c:	d004      	beq.n	8014318 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2204      	movs	r2, #4
 8014312:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014314:	2304      	movs	r3, #4
 8014316:	e03a      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801431c:	f003 0301 	and.w	r3, r3, #1
 8014320:	2b00      	cmp	r3, #0
 8014322:	d004      	beq.n	801432e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2201      	movs	r2, #1
 8014328:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801432a:	2301      	movs	r3, #1
 801432c:	e02f      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff fb7c 	bl	8013a2c <SDMMC_GetCommandResponse>
 8014334:	4603      	mov	r3, r0
 8014336:	461a      	mov	r2, r3
 8014338:	7afb      	ldrb	r3, [r7, #11]
 801433a:	4293      	cmp	r3, r2
 801433c:	d001      	beq.n	8014342 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801433e:	2301      	movs	r3, #1
 8014340:	e025      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	4a16      	ldr	r2, [pc, #88]	; (80143a0 <SDMMC_GetCmdResp6+0xec>)
 8014346:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014348:	2100      	movs	r1, #0
 801434a:	68f8      	ldr	r0, [r7, #12]
 801434c:	f7ff fb7b 	bl	8013a46 <SDMMC_GetResponse>
 8014350:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014358:	2b00      	cmp	r3, #0
 801435a:	d106      	bne.n	801436a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	0c1b      	lsrs	r3, r3, #16
 8014360:	b29a      	uxth	r2, r3
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014366:	2300      	movs	r3, #0
 8014368:	e011      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014370:	2b00      	cmp	r3, #0
 8014372:	d002      	beq.n	801437a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014378:	e009      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014388:	e001      	b.n	801438e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801438a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801438e:	4618      	mov	r0, r3
 8014390:	3720      	adds	r7, #32
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	2000000c 	.word	0x2000000c
 801439c:	10624dd3 	.word	0x10624dd3
 80143a0:	002000c5 	.word	0x002000c5

080143a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80143ac:	4b22      	ldr	r3, [pc, #136]	; (8014438 <SDMMC_GetCmdResp7+0x94>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4a22      	ldr	r2, [pc, #136]	; (801443c <SDMMC_GetCmdResp7+0x98>)
 80143b2:	fba2 2303 	umull	r2, r3, r2, r3
 80143b6:	0a5b      	lsrs	r3, r3, #9
 80143b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80143bc:	fb02 f303 	mul.w	r3, r2, r3
 80143c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	1e5a      	subs	r2, r3, #1
 80143c6:	60fa      	str	r2, [r7, #12]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d102      	bne.n	80143d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80143cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80143d0:	e02c      	b.n	801442c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d0ef      	beq.n	80143c2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d1ea      	bne.n	80143c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143f0:	f003 0304 	and.w	r3, r3, #4
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d004      	beq.n	8014402 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2204      	movs	r2, #4
 80143fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80143fe:	2304      	movs	r3, #4
 8014400:	e014      	b.n	801442c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014406:	f003 0301 	and.w	r3, r3, #1
 801440a:	2b00      	cmp	r3, #0
 801440c:	d004      	beq.n	8014418 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2201      	movs	r2, #1
 8014412:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014414:	2301      	movs	r3, #1
 8014416:	e009      	b.n	801442c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014420:	2b00      	cmp	r3, #0
 8014422:	d002      	beq.n	801442a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2240      	movs	r2, #64	; 0x40
 8014428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801442a:	2300      	movs	r3, #0

}
 801442c:	4618      	mov	r0, r3
 801442e:	3714      	adds	r7, #20
 8014430:	46bd      	mov	sp, r7
 8014432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014436:	4770      	bx	lr
 8014438:	2000000c 	.word	0x2000000c
 801443c:	10624dd3 	.word	0x10624dd3

08014440 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014440:	b480      	push	{r7}
 8014442:	b085      	sub	sp, #20
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8014448:	4b11      	ldr	r3, [pc, #68]	; (8014490 <SDMMC_GetCmdError+0x50>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4a11      	ldr	r2, [pc, #68]	; (8014494 <SDMMC_GetCmdError+0x54>)
 801444e:	fba2 2303 	umull	r2, r3, r2, r3
 8014452:	0a5b      	lsrs	r3, r3, #9
 8014454:	f241 3288 	movw	r2, #5000	; 0x1388
 8014458:	fb02 f303 	mul.w	r3, r2, r3
 801445c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	1e5a      	subs	r2, r3, #1
 8014462:	60fa      	str	r2, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d102      	bne.n	801446e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801446c:	e009      	b.n	8014482 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014476:	2b00      	cmp	r3, #0
 8014478:	d0f1      	beq.n	801445e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4a06      	ldr	r2, [pc, #24]	; (8014498 <SDMMC_GetCmdError+0x58>)
 801447e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014480:	2300      	movs	r3, #0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3714      	adds	r7, #20
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop
 8014490:	2000000c 	.word	0x2000000c
 8014494:	10624dd3 	.word	0x10624dd3
 8014498:	002000c5 	.word	0x002000c5

0801449c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801449c:	b084      	sub	sp, #16
 801449e:	b580      	push	{r7, lr}
 80144a0:	b084      	sub	sp, #16
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
 80144a6:	f107 001c 	add.w	r0, r7, #28
 80144aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80144ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d120      	bne.n	80144f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68da      	ldr	r2, [r3, #12]
 80144c4:	4b2a      	ldr	r3, [pc, #168]	; (8014570 <USB_CoreInit+0xd4>)
 80144c6:	4013      	ands	r3, r2
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80144d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144da:	2b01      	cmp	r3, #1
 80144dc:	d105      	bne.n	80144ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	68db      	ldr	r3, [r3, #12]
 80144e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 f9ee 	bl	80148cc <USB_CoreReset>
 80144f0:	4603      	mov	r3, r0
 80144f2:	73fb      	strb	r3, [r7, #15]
 80144f4:	e01a      	b.n	801452c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 f9e2 	bl	80148cc <USB_CoreReset>
 8014508:	4603      	mov	r3, r0
 801450a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801450e:	2b00      	cmp	r3, #0
 8014510:	d106      	bne.n	8014520 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	639a      	str	r2, [r3, #56]	; 0x38
 801451e:	e005      	b.n	801452c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452e:	2b01      	cmp	r3, #1
 8014530:	d116      	bne.n	8014560 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014536:	b29a      	uxth	r2, r3
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014540:	4b0c      	ldr	r3, [pc, #48]	; (8014574 <USB_CoreInit+0xd8>)
 8014542:	4313      	orrs	r3, r2
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	f043 0206 	orr.w	r2, r3, #6
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	f043 0220 	orr.w	r2, r3, #32
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014560:	7bfb      	ldrb	r3, [r7, #15]
}
 8014562:	4618      	mov	r0, r3
 8014564:	3710      	adds	r7, #16
 8014566:	46bd      	mov	sp, r7
 8014568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801456c:	b004      	add	sp, #16
 801456e:	4770      	bx	lr
 8014570:	ffbdffbf 	.word	0xffbdffbf
 8014574:	03ee0000 	.word	0x03ee0000

08014578 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014578:	b480      	push	{r7}
 801457a:	b083      	sub	sp, #12
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	689b      	ldr	r3, [r3, #8]
 8014584:	f043 0201 	orr.w	r2, r3, #1
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	370c      	adds	r7, #12
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801459a:	b480      	push	{r7}
 801459c:	b083      	sub	sp, #12
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	f023 0201 	bic.w	r2, r3, #1
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80145c8:	2300      	movs	r3, #0
 80145ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80145d8:	78fb      	ldrb	r3, [r7, #3]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d115      	bne.n	801460a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80145ea:	2001      	movs	r0, #1
 80145ec:	f7f0 faac 	bl	8004b48 <HAL_Delay>
      ms++;
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	3301      	adds	r3, #1
 80145f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 f95a 	bl	80148b0 <USB_GetMode>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b01      	cmp	r3, #1
 8014600:	d01e      	beq.n	8014640 <USB_SetCurrentMode+0x84>
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	2b31      	cmp	r3, #49	; 0x31
 8014606:	d9f0      	bls.n	80145ea <USB_SetCurrentMode+0x2e>
 8014608:	e01a      	b.n	8014640 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801460a:	78fb      	ldrb	r3, [r7, #3]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d115      	bne.n	801463c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801461c:	2001      	movs	r0, #1
 801461e:	f7f0 fa93 	bl	8004b48 <HAL_Delay>
      ms++;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	3301      	adds	r3, #1
 8014626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 f941 	bl	80148b0 <USB_GetMode>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d005      	beq.n	8014640 <USB_SetCurrentMode+0x84>
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	2b31      	cmp	r3, #49	; 0x31
 8014638:	d9f0      	bls.n	801461c <USB_SetCurrentMode+0x60>
 801463a:	e001      	b.n	8014640 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801463c:	2301      	movs	r3, #1
 801463e:	e005      	b.n	801464c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b32      	cmp	r3, #50	; 0x32
 8014644:	d101      	bne.n	801464a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014646:	2301      	movs	r3, #1
 8014648:	e000      	b.n	801464c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801464a:	2300      	movs	r3, #0
}
 801464c:	4618      	mov	r0, r3
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014654:	b480      	push	{r7}
 8014656:	b085      	sub	sp, #20
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801465e:	2300      	movs	r3, #0
 8014660:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	3301      	adds	r3, #1
 8014666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	4a13      	ldr	r2, [pc, #76]	; (80146b8 <USB_FlushTxFifo+0x64>)
 801466c:	4293      	cmp	r3, r2
 801466e:	d901      	bls.n	8014674 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014670:	2303      	movs	r3, #3
 8014672:	e01b      	b.n	80146ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	691b      	ldr	r3, [r3, #16]
 8014678:	2b00      	cmp	r3, #0
 801467a:	daf2      	bge.n	8014662 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801467c:	2300      	movs	r3, #0
 801467e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	019b      	lsls	r3, r3, #6
 8014684:	f043 0220 	orr.w	r2, r3, #32
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3301      	adds	r3, #1
 8014690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	4a08      	ldr	r2, [pc, #32]	; (80146b8 <USB_FlushTxFifo+0x64>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d901      	bls.n	801469e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801469a:	2303      	movs	r3, #3
 801469c:	e006      	b.n	80146ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	f003 0320 	and.w	r3, r3, #32
 80146a6:	2b20      	cmp	r3, #32
 80146a8:	d0f0      	beq.n	801468c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80146aa:	2300      	movs	r3, #0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3714      	adds	r7, #20
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr
 80146b8:	00030d40 	.word	0x00030d40

080146bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80146bc:	b480      	push	{r7}
 80146be:	b085      	sub	sp, #20
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146c4:	2300      	movs	r3, #0
 80146c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	3301      	adds	r3, #1
 80146cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	4a11      	ldr	r2, [pc, #68]	; (8014718 <USB_FlushRxFifo+0x5c>)
 80146d2:	4293      	cmp	r3, r2
 80146d4:	d901      	bls.n	80146da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80146d6:	2303      	movs	r3, #3
 80146d8:	e018      	b.n	801470c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	daf2      	bge.n	80146c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80146e2:	2300      	movs	r3, #0
 80146e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2210      	movs	r2, #16
 80146ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	3301      	adds	r3, #1
 80146f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	4a08      	ldr	r2, [pc, #32]	; (8014718 <USB_FlushRxFifo+0x5c>)
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d901      	bls.n	80146fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80146fa:	2303      	movs	r3, #3
 80146fc:	e006      	b.n	801470c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	691b      	ldr	r3, [r3, #16]
 8014702:	f003 0310 	and.w	r3, r3, #16
 8014706:	2b10      	cmp	r3, #16
 8014708:	d0f0      	beq.n	80146ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801470a:	2300      	movs	r3, #0
}
 801470c:	4618      	mov	r0, r3
 801470e:	3714      	adds	r7, #20
 8014710:	46bd      	mov	sp, r7
 8014712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014716:	4770      	bx	lr
 8014718:	00030d40 	.word	0x00030d40

0801471c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801471c:	b480      	push	{r7}
 801471e:	b089      	sub	sp, #36	; 0x24
 8014720:	af00      	add	r7, sp, #0
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	4611      	mov	r1, r2
 8014728:	461a      	mov	r2, r3
 801472a:	460b      	mov	r3, r1
 801472c:	71fb      	strb	r3, [r7, #7]
 801472e:	4613      	mov	r3, r2
 8014730:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801473a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801473e:	2b00      	cmp	r3, #0
 8014740:	d123      	bne.n	801478a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014742:	88bb      	ldrh	r3, [r7, #4]
 8014744:	3303      	adds	r3, #3
 8014746:	089b      	lsrs	r3, r3, #2
 8014748:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801474a:	2300      	movs	r3, #0
 801474c:	61bb      	str	r3, [r7, #24]
 801474e:	e018      	b.n	8014782 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014750:	79fb      	ldrb	r3, [r7, #7]
 8014752:	031a      	lsls	r2, r3, #12
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	4413      	add	r3, r2
 8014758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801475c:	461a      	mov	r2, r3
 801475e:	69fb      	ldr	r3, [r7, #28]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	3301      	adds	r3, #1
 8014768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	3301      	adds	r3, #1
 801476e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	3301      	adds	r3, #1
 8014774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	3301      	adds	r3, #1
 801477a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	3301      	adds	r3, #1
 8014780:	61bb      	str	r3, [r7, #24]
 8014782:	69ba      	ldr	r2, [r7, #24]
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	429a      	cmp	r2, r3
 8014788:	d3e2      	bcc.n	8014750 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801478a:	2300      	movs	r3, #0
}
 801478c:	4618      	mov	r0, r3
 801478e:	3724      	adds	r7, #36	; 0x24
 8014790:	46bd      	mov	sp, r7
 8014792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014796:	4770      	bx	lr

08014798 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014798:	b480      	push	{r7}
 801479a:	b08b      	sub	sp, #44	; 0x2c
 801479c:	af00      	add	r7, sp, #0
 801479e:	60f8      	str	r0, [r7, #12]
 80147a0:	60b9      	str	r1, [r7, #8]
 80147a2:	4613      	mov	r3, r2
 80147a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80147ae:	88fb      	ldrh	r3, [r7, #6]
 80147b0:	089b      	lsrs	r3, r3, #2
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80147b6:	88fb      	ldrh	r3, [r7, #6]
 80147b8:	f003 0303 	and.w	r3, r3, #3
 80147bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80147be:	2300      	movs	r3, #0
 80147c0:	623b      	str	r3, [r7, #32]
 80147c2:	e014      	b.n	80147ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ca:	681a      	ldr	r2, [r3, #0]
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80147d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d2:	3301      	adds	r3, #1
 80147d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80147d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d8:	3301      	adds	r3, #1
 80147da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80147dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147de:	3301      	adds	r3, #1
 80147e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80147e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e4:	3301      	adds	r3, #1
 80147e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80147e8:	6a3b      	ldr	r3, [r7, #32]
 80147ea:	3301      	adds	r3, #1
 80147ec:	623b      	str	r3, [r7, #32]
 80147ee:	6a3a      	ldr	r2, [r7, #32]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d3e6      	bcc.n	80147c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80147f6:	8bfb      	ldrh	r3, [r7, #30]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d01e      	beq.n	801483a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80147fc:	2300      	movs	r3, #0
 80147fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014806:	461a      	mov	r2, r3
 8014808:	f107 0310 	add.w	r3, r7, #16
 801480c:	6812      	ldr	r2, [r2, #0]
 801480e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014810:	693a      	ldr	r2, [r7, #16]
 8014812:	6a3b      	ldr	r3, [r7, #32]
 8014814:	b2db      	uxtb	r3, r3
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	fa22 f303 	lsr.w	r3, r2, r3
 801481c:	b2da      	uxtb	r2, r3
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014820:	701a      	strb	r2, [r3, #0]
      i++;
 8014822:	6a3b      	ldr	r3, [r7, #32]
 8014824:	3301      	adds	r3, #1
 8014826:	623b      	str	r3, [r7, #32]
      pDest++;
 8014828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482a:	3301      	adds	r3, #1
 801482c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801482e:	8bfb      	ldrh	r3, [r7, #30]
 8014830:	3b01      	subs	r3, #1
 8014832:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014834:	8bfb      	ldrh	r3, [r7, #30]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d1ea      	bne.n	8014810 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801483c:	4618      	mov	r0, r3
 801483e:	372c      	adds	r7, #44	; 0x2c
 8014840:	46bd      	mov	sp, r7
 8014842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014846:	4770      	bx	lr

08014848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014848:	b480      	push	{r7}
 801484a:	b085      	sub	sp, #20
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	695b      	ldr	r3, [r3, #20]
 8014854:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	699b      	ldr	r3, [r3, #24]
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	4013      	ands	r3, r2
 801485e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014860:	68fb      	ldr	r3, [r7, #12]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3714      	adds	r7, #20
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr

0801486e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801486e:	b480      	push	{r7}
 8014870:	b085      	sub	sp, #20
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
 8014876:	460b      	mov	r3, r1
 8014878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801487e:	78fb      	ldrb	r3, [r7, #3]
 8014880:	015a      	lsls	r2, r3, #5
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	4413      	add	r3, r2
 8014886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801488e:	78fb      	ldrb	r3, [r7, #3]
 8014890:	015a      	lsls	r2, r3, #5
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	4013      	ands	r3, r2
 80148a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80148a2:	68bb      	ldr	r3, [r7, #8]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3714      	adds	r7, #20
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80148b0:	b480      	push	{r7}
 80148b2:	b083      	sub	sp, #12
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	695b      	ldr	r3, [r3, #20]
 80148bc:	f003 0301 	and.w	r3, r3, #1
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	370c      	adds	r7, #12
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr

080148cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80148cc:	b480      	push	{r7}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80148d4:	2300      	movs	r3, #0
 80148d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	3301      	adds	r3, #1
 80148dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	4a13      	ldr	r2, [pc, #76]	; (8014930 <USB_CoreReset+0x64>)
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d901      	bls.n	80148ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80148e6:	2303      	movs	r3, #3
 80148e8:	e01b      	b.n	8014922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	691b      	ldr	r3, [r3, #16]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	daf2      	bge.n	80148d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80148f2:	2300      	movs	r3, #0
 80148f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	691b      	ldr	r3, [r3, #16]
 80148fa:	f043 0201 	orr.w	r2, r3, #1
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	3301      	adds	r3, #1
 8014906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	4a09      	ldr	r2, [pc, #36]	; (8014930 <USB_CoreReset+0x64>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d901      	bls.n	8014914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014910:	2303      	movs	r3, #3
 8014912:	e006      	b.n	8014922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	691b      	ldr	r3, [r3, #16]
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	2b01      	cmp	r3, #1
 801491e:	d0f0      	beq.n	8014902 <USB_CoreReset+0x36>

  return HAL_OK;
 8014920:	2300      	movs	r3, #0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3714      	adds	r7, #20
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	00030d40 	.word	0x00030d40

08014934 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014934:	b084      	sub	sp, #16
 8014936:	b580      	push	{r7, lr}
 8014938:	b086      	sub	sp, #24
 801493a:	af00      	add	r7, sp, #0
 801493c:	6078      	str	r0, [r7, #4]
 801493e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014946:	2300      	movs	r3, #0
 8014948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014954:	461a      	mov	r2, r3
 8014956:	2300      	movs	r3, #0
 8014958:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801495e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801496a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801497a:	2b00      	cmp	r3, #0
 801497c:	d018      	beq.n	80149b0 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014980:	2b01      	cmp	r3, #1
 8014982:	d10a      	bne.n	801499a <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	68fa      	ldr	r2, [r7, #12]
 801498e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014992:	f043 0304 	orr.w	r3, r3, #4
 8014996:	6013      	str	r3, [r2, #0]
 8014998:	e014      	b.n	80149c4 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80149a8:	f023 0304 	bic.w	r3, r3, #4
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	e009      	b.n	80149c4 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	68fa      	ldr	r2, [r7, #12]
 80149ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80149be:	f023 0304 	bic.w	r3, r3, #4
 80149c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80149c4:	2110      	movs	r1, #16
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f7ff fe44 	bl	8014654 <USB_FlushTxFifo>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 80149d2:	2301      	movs	r3, #1
 80149d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7ff fe70 	bl	80146bc <USB_FlushRxFifo>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 80149e2:	2301      	movs	r3, #1
 80149e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80149e6:	2300      	movs	r3, #0
 80149e8:	613b      	str	r3, [r7, #16]
 80149ea:	e015      	b.n	8014a18 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80149ec:	693b      	ldr	r3, [r7, #16]
 80149ee:	015a      	lsls	r2, r3, #5
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	4413      	add	r3, r2
 80149f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80149f8:	461a      	mov	r2, r3
 80149fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	015a      	lsls	r2, r3, #5
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	4413      	add	r3, r2
 8014a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	2300      	movs	r3, #0
 8014a10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	3301      	adds	r3, #1
 8014a16:	613b      	str	r3, [r7, #16]
 8014a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1a:	693a      	ldr	r2, [r7, #16]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d3e5      	bcc.n	80149ec <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00b      	beq.n	8014a52 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014a40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	4a13      	ldr	r2, [pc, #76]	; (8014a94 <USB_HostInit+0x160>)
 8014a46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4a13      	ldr	r2, [pc, #76]	; (8014a98 <USB_HostInit+0x164>)
 8014a4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8014a50:	e009      	b.n	8014a66 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2280      	movs	r2, #128	; 0x80
 8014a56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	4a10      	ldr	r2, [pc, #64]	; (8014a9c <USB_HostInit+0x168>)
 8014a5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4a0f      	ldr	r2, [pc, #60]	; (8014aa0 <USB_HostInit+0x16c>)
 8014a62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d105      	bne.n	8014a78 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	699b      	ldr	r3, [r3, #24]
 8014a70:	f043 0210 	orr.w	r2, r3, #16
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	699a      	ldr	r2, [r3, #24]
 8014a7c:	4b09      	ldr	r3, [pc, #36]	; (8014aa4 <USB_HostInit+0x170>)
 8014a7e:	4313      	orrs	r3, r2
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	3718      	adds	r7, #24
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014a90:	b004      	add	sp, #16
 8014a92:	4770      	bx	lr
 8014a94:	01000200 	.word	0x01000200
 8014a98:	00e00300 	.word	0x00e00300
 8014a9c:	00600080 	.word	0x00600080
 8014aa0:	004000e0 	.word	0x004000e0
 8014aa4:	a3200008 	.word	0xa3200008

08014aa8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b085      	sub	sp, #20
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014ac6:	f023 0303 	bic.w	r3, r3, #3
 8014aca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	78fb      	ldrb	r3, [r7, #3]
 8014ad6:	f003 0303 	and.w	r3, r3, #3
 8014ada:	68f9      	ldr	r1, [r7, #12]
 8014adc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014ae0:	4313      	orrs	r3, r2
 8014ae2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8014ae4:	78fb      	ldrb	r3, [r7, #3]
 8014ae6:	2b01      	cmp	r3, #1
 8014ae8:	d107      	bne.n	8014afa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014af0:	461a      	mov	r2, r3
 8014af2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8014af6:	6053      	str	r3, [r2, #4]
 8014af8:	e00c      	b.n	8014b14 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8014afa:	78fb      	ldrb	r3, [r7, #3]
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d107      	bne.n	8014b10 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014b06:	461a      	mov	r2, r3
 8014b08:	f241 7370 	movw	r3, #6000	; 0x1770
 8014b0c:	6053      	str	r3, [r2, #4]
 8014b0e:	e001      	b.n	8014b14 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8014b10:	2301      	movs	r3, #1
 8014b12:	e000      	b.n	8014b16 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8014b14:	2300      	movs	r3, #0
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3714      	adds	r7, #20
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr

08014b22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8014b22:	b580      	push	{r7, lr}
 8014b24:	b084      	sub	sp, #16
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014b42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8014b52:	2064      	movs	r0, #100	; 0x64
 8014b54:	f7ef fff8 	bl	8004b48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	68fa      	ldr	r2, [r7, #12]
 8014b5c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8014b66:	200a      	movs	r0, #10
 8014b68:	f7ef ffee 	bl	8004b48 <HAL_Delay>

  return HAL_OK;
 8014b6c:	2300      	movs	r3, #0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8014b76:	b480      	push	{r7}
 8014b78:	b085      	sub	sp, #20
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	6078      	str	r0, [r7, #4]
 8014b7e:	460b      	mov	r3, r1
 8014b80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014b86:	2300      	movs	r3, #0
 8014b88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8014b9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d109      	bne.n	8014bba <USB_DriveVbus+0x44>
 8014ba6:	78fb      	ldrb	r3, [r7, #3]
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d106      	bne.n	8014bba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014bb8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014bc4:	d109      	bne.n	8014bda <USB_DriveVbus+0x64>
 8014bc6:	78fb      	ldrb	r3, [r7, #3]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d106      	bne.n	8014bda <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	68fa      	ldr	r2, [r7, #12]
 8014bd0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8014bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bd8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8014bda:	2300      	movs	r3, #0
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3714      	adds	r7, #20
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b085      	sub	sp, #20
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	0c5b      	lsrs	r3, r3, #17
 8014c06:	f003 0303 	and.w	r3, r3, #3
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3714      	adds	r7, #20
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c14:	4770      	bx	lr

08014c16 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8014c16:	b480      	push	{r7}
 8014c18:	b085      	sub	sp, #20
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c28:	689b      	ldr	r3, [r3, #8]
 8014c2a:	b29b      	uxth	r3, r3
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c36:	4770      	bx	lr

08014c38 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b088      	sub	sp, #32
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	4608      	mov	r0, r1
 8014c42:	4611      	mov	r1, r2
 8014c44:	461a      	mov	r2, r3
 8014c46:	4603      	mov	r3, r0
 8014c48:	70fb      	strb	r3, [r7, #3]
 8014c4a:	460b      	mov	r3, r1
 8014c4c:	70bb      	strb	r3, [r7, #2]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8014c52:	2300      	movs	r3, #0
 8014c54:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8014c5a:	78fb      	ldrb	r3, [r7, #3]
 8014c5c:	015a      	lsls	r2, r3, #5
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	4413      	add	r3, r2
 8014c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c66:	461a      	mov	r2, r3
 8014c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8014c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014c72:	2b03      	cmp	r3, #3
 8014c74:	d87e      	bhi.n	8014d74 <USB_HC_Init+0x13c>
 8014c76:	a201      	add	r2, pc, #4	; (adr r2, 8014c7c <USB_HC_Init+0x44>)
 8014c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7c:	08014c8d 	.word	0x08014c8d
 8014c80:	08014d37 	.word	0x08014d37
 8014c84:	08014c8d 	.word	0x08014c8d
 8014c88:	08014cf9 	.word	0x08014cf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014c8c:	78fb      	ldrb	r3, [r7, #3]
 8014c8e:	015a      	lsls	r2, r3, #5
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	4413      	add	r3, r2
 8014c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014c98:	461a      	mov	r2, r3
 8014c9a:	f240 439d 	movw	r3, #1181	; 0x49d
 8014c9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8014ca0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	da10      	bge.n	8014cca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014ca8:	78fb      	ldrb	r3, [r7, #3]
 8014caa:	015a      	lsls	r2, r3, #5
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	4413      	add	r3, r2
 8014cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	78fa      	ldrb	r2, [r7, #3]
 8014cb8:	0151      	lsls	r1, r2, #5
 8014cba:	693a      	ldr	r2, [r7, #16]
 8014cbc:	440a      	add	r2, r1
 8014cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014cc6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8014cc8:	e057      	b.n	8014d7a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d051      	beq.n	8014d7a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8014cd6:	78fb      	ldrb	r3, [r7, #3]
 8014cd8:	015a      	lsls	r2, r3, #5
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	4413      	add	r3, r2
 8014cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ce2:	68db      	ldr	r3, [r3, #12]
 8014ce4:	78fa      	ldrb	r2, [r7, #3]
 8014ce6:	0151      	lsls	r1, r2, #5
 8014ce8:	693a      	ldr	r2, [r7, #16]
 8014cea:	440a      	add	r2, r1
 8014cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014cf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8014cf4:	60d3      	str	r3, [r2, #12]
      break;
 8014cf6:	e040      	b.n	8014d7a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014cf8:	78fb      	ldrb	r3, [r7, #3]
 8014cfa:	015a      	lsls	r2, r3, #5
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	4413      	add	r3, r2
 8014d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d04:	461a      	mov	r2, r3
 8014d06:	f240 639d 	movw	r3, #1693	; 0x69d
 8014d0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014d0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	da34      	bge.n	8014d7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8014d14:	78fb      	ldrb	r3, [r7, #3]
 8014d16:	015a      	lsls	r2, r3, #5
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d20:	68db      	ldr	r3, [r3, #12]
 8014d22:	78fa      	ldrb	r2, [r7, #3]
 8014d24:	0151      	lsls	r1, r2, #5
 8014d26:	693a      	ldr	r2, [r7, #16]
 8014d28:	440a      	add	r2, r1
 8014d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014d32:	60d3      	str	r3, [r2, #12]
      }

      break;
 8014d34:	e023      	b.n	8014d7e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8014d36:	78fb      	ldrb	r3, [r7, #3]
 8014d38:	015a      	lsls	r2, r3, #5
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d42:	461a      	mov	r2, r3
 8014d44:	f240 2325 	movw	r3, #549	; 0x225
 8014d48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8014d4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	da17      	bge.n	8014d82 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8014d52:	78fb      	ldrb	r3, [r7, #3]
 8014d54:	015a      	lsls	r2, r3, #5
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	4413      	add	r3, r2
 8014d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	78fa      	ldrb	r2, [r7, #3]
 8014d62:	0151      	lsls	r1, r2, #5
 8014d64:	693a      	ldr	r2, [r7, #16]
 8014d66:	440a      	add	r2, r1
 8014d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014d6c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8014d70:	60d3      	str	r3, [r2, #12]
      }
      break;
 8014d72:	e006      	b.n	8014d82 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8014d74:	2301      	movs	r3, #1
 8014d76:	77fb      	strb	r3, [r7, #31]
      break;
 8014d78:	e004      	b.n	8014d84 <USB_HC_Init+0x14c>
      break;
 8014d7a:	bf00      	nop
 8014d7c:	e002      	b.n	8014d84 <USB_HC_Init+0x14c>
      break;
 8014d7e:	bf00      	nop
 8014d80:	e000      	b.n	8014d84 <USB_HC_Init+0x14c>
      break;
 8014d82:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8014d84:	78fb      	ldrb	r3, [r7, #3]
 8014d86:	015a      	lsls	r2, r3, #5
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014d90:	68db      	ldr	r3, [r3, #12]
 8014d92:	78fa      	ldrb	r2, [r7, #3]
 8014d94:	0151      	lsls	r1, r2, #5
 8014d96:	693a      	ldr	r2, [r7, #16]
 8014d98:	440a      	add	r2, r1
 8014d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014d9e:	f043 0302 	orr.w	r3, r3, #2
 8014da2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014daa:	699a      	ldr	r2, [r3, #24]
 8014dac:	78fb      	ldrb	r3, [r7, #3]
 8014dae:	f003 030f 	and.w	r3, r3, #15
 8014db2:	2101      	movs	r1, #1
 8014db4:	fa01 f303 	lsl.w	r3, r1, r3
 8014db8:	6939      	ldr	r1, [r7, #16]
 8014dba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	699b      	ldr	r3, [r3, #24]
 8014dc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8014dce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	da03      	bge.n	8014dde <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8014dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014dda:	61bb      	str	r3, [r7, #24]
 8014ddc:	e001      	b.n	8014de2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8014dde:	2300      	movs	r3, #0
 8014de0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7ff ff00 	bl	8014be8 <USB_GetHostSpeed>
 8014de8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8014dea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014dee:	2b02      	cmp	r3, #2
 8014df0:	d106      	bne.n	8014e00 <USB_HC_Init+0x1c8>
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	d003      	beq.n	8014e00 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8014df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014dfc:	617b      	str	r3, [r7, #20]
 8014dfe:	e001      	b.n	8014e04 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8014e00:	2300      	movs	r3, #0
 8014e02:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014e04:	787b      	ldrb	r3, [r7, #1]
 8014e06:	059b      	lsls	r3, r3, #22
 8014e08:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8014e0c:	78bb      	ldrb	r3, [r7, #2]
 8014e0e:	02db      	lsls	r3, r3, #11
 8014e10:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014e14:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e1a:	049b      	lsls	r3, r3, #18
 8014e1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8014e20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8014e22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8014e28:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8014e2a:	69bb      	ldr	r3, [r7, #24]
 8014e2c:	431a      	orrs	r2, r3
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014e32:	78fa      	ldrb	r2, [r7, #3]
 8014e34:	0151      	lsls	r1, r2, #5
 8014e36:	693a      	ldr	r2, [r7, #16]
 8014e38:	440a      	add	r2, r1
 8014e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8014e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8014e42:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8014e44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e48:	2b03      	cmp	r3, #3
 8014e4a:	d003      	beq.n	8014e54 <USB_HC_Init+0x21c>
 8014e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d10f      	bne.n	8014e74 <USB_HC_Init+0x23c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8014e54:	78fb      	ldrb	r3, [r7, #3]
 8014e56:	015a      	lsls	r2, r3, #5
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	78fa      	ldrb	r2, [r7, #3]
 8014e64:	0151      	lsls	r1, r2, #5
 8014e66:	693a      	ldr	r2, [r7, #16]
 8014e68:	440a      	add	r2, r1
 8014e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014e72:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8014e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3720      	adds	r7, #32
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop

08014e80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b08c      	sub	sp, #48	; 0x30
 8014e84:	af02      	add	r7, sp, #8
 8014e86:	60f8      	str	r0, [r7, #12]
 8014e88:	60b9      	str	r1, [r7, #8]
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	785b      	ldrb	r3, [r3, #1]
 8014e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8014e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014e9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d02d      	beq.n	8014f06 <USB_HC_StartXfer+0x86>
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	791b      	ldrb	r3, [r3, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d129      	bne.n	8014f06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d117      	bne.n	8014ee8 <USB_HC_StartXfer+0x68>
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	79db      	ldrb	r3, [r3, #7]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d003      	beq.n	8014ec8 <USB_HC_StartXfer+0x48>
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	79db      	ldrb	r3, [r3, #7]
 8014ec4:	2b02      	cmp	r3, #2
 8014ec6:	d10f      	bne.n	8014ee8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	015a      	lsls	r2, r3, #5
 8014ecc:	6a3b      	ldr	r3, [r7, #32]
 8014ece:	4413      	add	r3, r2
 8014ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	69fa      	ldr	r2, [r7, #28]
 8014ed8:	0151      	lsls	r1, r2, #5
 8014eda:	6a3a      	ldr	r2, [r7, #32]
 8014edc:	440a      	add	r2, r1
 8014ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ee6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8014ee8:	79fb      	ldrb	r3, [r7, #7]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10b      	bne.n	8014f06 <USB_HC_StartXfer+0x86>
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	795b      	ldrb	r3, [r3, #5]
 8014ef2:	2b01      	cmp	r3, #1
 8014ef4:	d107      	bne.n	8014f06 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	785b      	ldrb	r3, [r3, #1]
 8014efa:	4619      	mov	r1, r3
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f000 fa0f 	bl	8015320 <USB_DoPing>
      return HAL_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	e0f8      	b.n	80150f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	695b      	ldr	r3, [r3, #20]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d018      	beq.n	8014f40 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	695b      	ldr	r3, [r3, #20]
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	8912      	ldrh	r2, [r2, #8]
 8014f16:	4413      	add	r3, r2
 8014f18:	3b01      	subs	r3, #1
 8014f1a:	68ba      	ldr	r2, [r7, #8]
 8014f1c:	8912      	ldrh	r2, [r2, #8]
 8014f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f22:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8014f24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014f26:	8b7b      	ldrh	r3, [r7, #26]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d90b      	bls.n	8014f44 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8014f2c:	8b7b      	ldrh	r3, [r7, #26]
 8014f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014f30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014f32:	68ba      	ldr	r2, [r7, #8]
 8014f34:	8912      	ldrh	r2, [r2, #8]
 8014f36:	fb03 f202 	mul.w	r2, r3, r2
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	611a      	str	r2, [r3, #16]
 8014f3e:	e001      	b.n	8014f44 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8014f40:	2301      	movs	r3, #1
 8014f42:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	78db      	ldrb	r3, [r3, #3]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d007      	beq.n	8014f5c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8014f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014f4e:	68ba      	ldr	r2, [r7, #8]
 8014f50:	8912      	ldrh	r2, [r2, #8]
 8014f52:	fb03 f202 	mul.w	r2, r3, r2
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	611a      	str	r2, [r3, #16]
 8014f5a:	e003      	b.n	8014f64 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	695a      	ldr	r2, [r3, #20]
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	691b      	ldr	r3, [r3, #16]
 8014f68:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014f6e:	04d9      	lsls	r1, r3, #19
 8014f70:	4b63      	ldr	r3, [pc, #396]	; (8015100 <USB_HC_StartXfer+0x280>)
 8014f72:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014f74:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	7a9b      	ldrb	r3, [r3, #10]
 8014f7a:	075b      	lsls	r3, r3, #29
 8014f7c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014f80:	69f9      	ldr	r1, [r7, #28]
 8014f82:	0148      	lsls	r0, r1, #5
 8014f84:	6a39      	ldr	r1, [r7, #32]
 8014f86:	4401      	add	r1, r0
 8014f88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8014f8c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8014f8e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8014f90:	79fb      	ldrb	r3, [r7, #7]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d009      	beq.n	8014faa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	68d9      	ldr	r1, [r3, #12]
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	015a      	lsls	r2, r3, #5
 8014f9e:	6a3b      	ldr	r3, [r7, #32]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fa6:	460a      	mov	r2, r1
 8014fa8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8014faa:	6a3b      	ldr	r3, [r7, #32]
 8014fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	f003 0301 	and.w	r3, r3, #1
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	bf0c      	ite	eq
 8014fba:	2301      	moveq	r3, #1
 8014fbc:	2300      	movne	r3, #0
 8014fbe:	b2db      	uxtb	r3, r3
 8014fc0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8014fc2:	69fb      	ldr	r3, [r7, #28]
 8014fc4:	015a      	lsls	r2, r3, #5
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	69fa      	ldr	r2, [r7, #28]
 8014fd2:	0151      	lsls	r1, r2, #5
 8014fd4:	6a3a      	ldr	r2, [r7, #32]
 8014fd6:	440a      	add	r2, r1
 8014fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8014fdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014fe0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	015a      	lsls	r2, r3, #5
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	4413      	add	r3, r2
 8014fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	7e7b      	ldrb	r3, [r7, #25]
 8014ff2:	075b      	lsls	r3, r3, #29
 8014ff4:	69f9      	ldr	r1, [r7, #28]
 8014ff6:	0148      	lsls	r0, r1, #5
 8014ff8:	6a39      	ldr	r1, [r7, #32]
 8014ffa:	4401      	add	r1, r0
 8014ffc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8015000:	4313      	orrs	r3, r2
 8015002:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8015004:	69fb      	ldr	r3, [r7, #28]
 8015006:	015a      	lsls	r2, r3, #5
 8015008:	6a3b      	ldr	r3, [r7, #32]
 801500a:	4413      	add	r3, r2
 801500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801501a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	78db      	ldrb	r3, [r3, #3]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d004      	beq.n	801502e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801502a:	613b      	str	r3, [r7, #16]
 801502c:	e003      	b.n	8015036 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015034:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801503c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 801503e:	69fb      	ldr	r3, [r7, #28]
 8015040:	015a      	lsls	r2, r3, #5
 8015042:	6a3b      	ldr	r3, [r7, #32]
 8015044:	4413      	add	r3, r2
 8015046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801504a:	461a      	mov	r2, r3
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8015050:	79fb      	ldrb	r3, [r7, #7]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d001      	beq.n	801505a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015056:	2300      	movs	r3, #0
 8015058:	e04e      	b.n	80150f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	78db      	ldrb	r3, [r3, #3]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d149      	bne.n	80150f6 <USB_HC_StartXfer+0x276>
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	695b      	ldr	r3, [r3, #20]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d045      	beq.n	80150f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	79db      	ldrb	r3, [r3, #7]
 801506e:	2b03      	cmp	r3, #3
 8015070:	d830      	bhi.n	80150d4 <USB_HC_StartXfer+0x254>
 8015072:	a201      	add	r2, pc, #4	; (adr r2, 8015078 <USB_HC_StartXfer+0x1f8>)
 8015074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015078:	08015089 	.word	0x08015089
 801507c:	080150ad 	.word	0x080150ad
 8015080:	08015089 	.word	0x08015089
 8015084:	080150ad 	.word	0x080150ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	695b      	ldr	r3, [r3, #20]
 801508c:	3303      	adds	r3, #3
 801508e:	089b      	lsrs	r3, r3, #2
 8015090:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015092:	8afa      	ldrh	r2, [r7, #22]
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015098:	b29b      	uxth	r3, r3
 801509a:	429a      	cmp	r2, r3
 801509c:	d91c      	bls.n	80150d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	699b      	ldr	r3, [r3, #24]
 80150a2:	f043 0220 	orr.w	r2, r3, #32
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80150aa:	e015      	b.n	80150d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	695b      	ldr	r3, [r3, #20]
 80150b0:	3303      	adds	r3, #3
 80150b2:	089b      	lsrs	r3, r3, #2
 80150b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80150b6:	8afa      	ldrh	r2, [r7, #22]
 80150b8:	6a3b      	ldr	r3, [r7, #32]
 80150ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150be:	691b      	ldr	r3, [r3, #16]
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d90a      	bls.n	80150dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	699b      	ldr	r3, [r3, #24]
 80150ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80150d2:	e003      	b.n	80150dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80150d4:	bf00      	nop
 80150d6:	e002      	b.n	80150de <USB_HC_StartXfer+0x25e>
        break;
 80150d8:	bf00      	nop
 80150da:	e000      	b.n	80150de <USB_HC_StartXfer+0x25e>
        break;
 80150dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	68d9      	ldr	r1, [r3, #12]
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	785a      	ldrb	r2, [r3, #1]
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	695b      	ldr	r3, [r3, #20]
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	2000      	movs	r0, #0
 80150ee:	9000      	str	r0, [sp, #0]
 80150f0:	68f8      	ldr	r0, [r7, #12]
 80150f2:	f7ff fb13 	bl	801471c <USB_WritePacket>
  }

  return HAL_OK;
 80150f6:	2300      	movs	r3, #0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3728      	adds	r7, #40	; 0x28
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	1ff80000 	.word	0x1ff80000

08015104 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015104:	b480      	push	{r7}
 8015106:	b085      	sub	sp, #20
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015116:	695b      	ldr	r3, [r3, #20]
 8015118:	b29b      	uxth	r3, r3
}
 801511a:	4618      	mov	r0, r3
 801511c:	3714      	adds	r7, #20
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015126:	b480      	push	{r7}
 8015128:	b089      	sub	sp, #36	; 0x24
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
 801512e:	460b      	mov	r3, r1
 8015130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8015136:	78fb      	ldrb	r3, [r7, #3]
 8015138:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801513a:	2300      	movs	r3, #0
 801513c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	015a      	lsls	r2, r3, #5
 8015142:	69fb      	ldr	r3, [r7, #28]
 8015144:	4413      	add	r3, r2
 8015146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	0c9b      	lsrs	r3, r3, #18
 801514e:	f003 0303 	and.w	r3, r3, #3
 8015152:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8015154:	69bb      	ldr	r3, [r7, #24]
 8015156:	015a      	lsls	r2, r3, #5
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	4413      	add	r3, r2
 801515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	0fdb      	lsrs	r3, r3, #31
 8015164:	f003 0301 	and.w	r3, r3, #1
 8015168:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	689b      	ldr	r3, [r3, #8]
 801516e:	f003 0320 	and.w	r3, r3, #32
 8015172:	2b20      	cmp	r3, #32
 8015174:	d104      	bne.n	8015180 <USB_HC_Halt+0x5a>
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d101      	bne.n	8015180 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 801517c:	2300      	movs	r3, #0
 801517e:	e0c8      	b.n	8015312 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d002      	beq.n	801518c <USB_HC_Halt+0x66>
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	2b02      	cmp	r3, #2
 801518a:	d163      	bne.n	8015254 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	015a      	lsls	r2, r3, #5
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	4413      	add	r3, r2
 8015194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	69ba      	ldr	r2, [r7, #24]
 801519c:	0151      	lsls	r1, r2, #5
 801519e:	69fa      	ldr	r2, [r7, #28]
 80151a0:	440a      	add	r2, r1
 80151a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80151a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80151aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	689b      	ldr	r3, [r3, #8]
 80151b0:	f003 0320 	and.w	r3, r3, #32
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f040 80ab 	bne.w	8015310 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d133      	bne.n	801522e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	015a      	lsls	r2, r3, #5
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	4413      	add	r3, r2
 80151ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	69ba      	ldr	r2, [r7, #24]
 80151d6:	0151      	lsls	r1, r2, #5
 80151d8:	69fa      	ldr	r2, [r7, #28]
 80151da:	440a      	add	r2, r1
 80151dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80151e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	015a      	lsls	r2, r3, #5
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	4413      	add	r3, r2
 80151ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	69ba      	ldr	r2, [r7, #24]
 80151f6:	0151      	lsls	r1, r2, #5
 80151f8:	69fa      	ldr	r2, [r7, #28]
 80151fa:	440a      	add	r2, r1
 80151fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015204:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	3301      	adds	r3, #1
 801520a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015212:	d81d      	bhi.n	8015250 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	015a      	lsls	r2, r3, #5
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	4413      	add	r3, r2
 801521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801522a:	d0ec      	beq.n	8015206 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801522c:	e070      	b.n	8015310 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	015a      	lsls	r2, r3, #5
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	4413      	add	r3, r2
 8015236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	69ba      	ldr	r2, [r7, #24]
 801523e:	0151      	lsls	r1, r2, #5
 8015240:	69fa      	ldr	r2, [r7, #28]
 8015242:	440a      	add	r2, r1
 8015244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801524c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801524e:	e05f      	b.n	8015310 <USB_HC_Halt+0x1ea>
            break;
 8015250:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8015252:	e05d      	b.n	8015310 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	015a      	lsls	r2, r3, #5
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	4413      	add	r3, r2
 801525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	69ba      	ldr	r2, [r7, #24]
 8015264:	0151      	lsls	r1, r2, #5
 8015266:	69fa      	ldr	r2, [r7, #28]
 8015268:	440a      	add	r2, r1
 801526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801526e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015272:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015280:	2b00      	cmp	r3, #0
 8015282:	d133      	bne.n	80152ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015284:	69bb      	ldr	r3, [r7, #24]
 8015286:	015a      	lsls	r2, r3, #5
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	4413      	add	r3, r2
 801528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	69ba      	ldr	r2, [r7, #24]
 8015294:	0151      	lsls	r1, r2, #5
 8015296:	69fa      	ldr	r2, [r7, #28]
 8015298:	440a      	add	r2, r1
 801529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801529e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	015a      	lsls	r2, r3, #5
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	4413      	add	r3, r2
 80152ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	69ba      	ldr	r2, [r7, #24]
 80152b4:	0151      	lsls	r1, r2, #5
 80152b6:	69fa      	ldr	r2, [r7, #28]
 80152b8:	440a      	add	r2, r1
 80152ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80152be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80152c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	3301      	adds	r3, #1
 80152c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80152d0:	d81d      	bhi.n	801530e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80152d2:	69bb      	ldr	r3, [r7, #24]
 80152d4:	015a      	lsls	r2, r3, #5
 80152d6:	69fb      	ldr	r3, [r7, #28]
 80152d8:	4413      	add	r3, r2
 80152da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80152e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80152e8:	d0ec      	beq.n	80152c4 <USB_HC_Halt+0x19e>
 80152ea:	e011      	b.n	8015310 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80152ec:	69bb      	ldr	r3, [r7, #24]
 80152ee:	015a      	lsls	r2, r3, #5
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	4413      	add	r3, r2
 80152f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	69ba      	ldr	r2, [r7, #24]
 80152fc:	0151      	lsls	r1, r2, #5
 80152fe:	69fa      	ldr	r2, [r7, #28]
 8015300:	440a      	add	r2, r1
 8015302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801530a:	6013      	str	r3, [r2, #0]
 801530c:	e000      	b.n	8015310 <USB_HC_Halt+0x1ea>
          break;
 801530e:	bf00      	nop
    }
  }

  return HAL_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3724      	adds	r7, #36	; 0x24
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr
	...

08015320 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015320:	b480      	push	{r7}
 8015322:	b087      	sub	sp, #28
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	460b      	mov	r3, r1
 801532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015330:	78fb      	ldrb	r3, [r7, #3]
 8015332:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015334:	2301      	movs	r3, #1
 8015336:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	04da      	lsls	r2, r3, #19
 801533c:	4b15      	ldr	r3, [pc, #84]	; (8015394 <USB_DoPing+0x74>)
 801533e:	4013      	ands	r3, r2
 8015340:	693a      	ldr	r2, [r7, #16]
 8015342:	0151      	lsls	r1, r2, #5
 8015344:	697a      	ldr	r2, [r7, #20]
 8015346:	440a      	add	r2, r1
 8015348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801534c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015350:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	015a      	lsls	r2, r3, #5
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	4413      	add	r3, r2
 801535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015368:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015370:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	015a      	lsls	r2, r3, #5
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	4413      	add	r3, r2
 801537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801537e:	461a      	mov	r2, r3
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	371c      	adds	r7, #28
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop
 8015394:	1ff80000 	.word	0x1ff80000

08015398 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b088      	sub	sp, #32
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80153a8:	2300      	movs	r3, #0
 80153aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f7ff f8f4 	bl	801459a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80153b2:	2110      	movs	r1, #16
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f7ff f94d 	bl	8014654 <USB_FlushTxFifo>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80153c0:	2301      	movs	r3, #1
 80153c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f7ff f979 	bl	80146bc <USB_FlushRxFifo>
 80153ca:	4603      	mov	r3, r0
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d001      	beq.n	80153d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80153d0:	2301      	movs	r3, #1
 80153d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80153d4:	2300      	movs	r3, #0
 80153d6:	61bb      	str	r3, [r7, #24]
 80153d8:	e01f      	b.n	801541a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80153da:	69bb      	ldr	r3, [r7, #24]
 80153dc:	015a      	lsls	r2, r3, #5
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	4413      	add	r3, r2
 80153e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80153f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80153f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015400:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	015a      	lsls	r2, r3, #5
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	4413      	add	r3, r2
 801540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801540e:	461a      	mov	r2, r3
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015414:	69bb      	ldr	r3, [r7, #24]
 8015416:	3301      	adds	r3, #1
 8015418:	61bb      	str	r3, [r7, #24]
 801541a:	69bb      	ldr	r3, [r7, #24]
 801541c:	2b0f      	cmp	r3, #15
 801541e:	d9dc      	bls.n	80153da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015420:	2300      	movs	r3, #0
 8015422:	61bb      	str	r3, [r7, #24]
 8015424:	e034      	b.n	8015490 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	015a      	lsls	r2, r3, #5
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	4413      	add	r3, r2
 801542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801543c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015444:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801544c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801544e:	69bb      	ldr	r3, [r7, #24]
 8015450:	015a      	lsls	r2, r3, #5
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	4413      	add	r3, r2
 8015456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801545a:	461a      	mov	r2, r3
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	3301      	adds	r3, #1
 8015464:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801546c:	d80c      	bhi.n	8015488 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	015a      	lsls	r2, r3, #5
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	4413      	add	r3, r2
 8015476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015484:	d0ec      	beq.n	8015460 <USB_StopHost+0xc8>
 8015486:	e000      	b.n	801548a <USB_StopHost+0xf2>
        break;
 8015488:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	3301      	adds	r3, #1
 801548e:	61bb      	str	r3, [r7, #24]
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	2b0f      	cmp	r3, #15
 8015494:	d9c7      	bls.n	8015426 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801549c:	461a      	mov	r2, r3
 801549e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7ff f863 	bl	8014578 <USB_EnableGlobalInt>

  return ret;
 80154b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3720      	adds	r7, #32
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}

080154bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	4613      	mov	r3, r2
 80154c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80154d0:	2302      	movs	r3, #2
 80154d2:	e029      	b.n	8015528 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	79fa      	ldrb	r2, [r7, #7]
 80154d8:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2200      	movs	r2, #0
 80154e0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2200      	movs	r2, #0
 80154e8:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80154ec:	68f8      	ldr	r0, [r7, #12]
 80154ee:	f000 f81f 	bl	8015530 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2200      	movs	r2, #0
 80154f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	2200      	movs	r2, #0
 80154fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2200      	movs	r2, #0
 8015506:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2200      	movs	r2, #0
 801550e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d003      	beq.n	8015520 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f7ef f861 	bl	80045e8 <USBH_LL_Init>

  return USBH_OK;
 8015526:	2300      	movs	r3, #0
}
 8015528:	4618      	mov	r0, r3
 801552a:	3710      	adds	r7, #16
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b084      	sub	sp, #16
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8015538:	2300      	movs	r3, #0
 801553a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801553c:	2300      	movs	r3, #0
 801553e:	60fb      	str	r3, [r7, #12]
 8015540:	e00a      	b.n	8015558 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8015542:	687a      	ldr	r2, [r7, #4]
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	4413      	add	r3, r2
 801554e:	2200      	movs	r2, #0
 8015550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	3301      	adds	r3, #1
 8015556:	60fb      	str	r3, [r7, #12]
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	2b0f      	cmp	r3, #15
 801555c:	d9f1      	bls.n	8015542 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801555e:	2300      	movs	r3, #0
 8015560:	60fb      	str	r3, [r7, #12]
 8015562:	e009      	b.n	8015578 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	4413      	add	r3, r2
 801556a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801556e:	2200      	movs	r2, #0
 8015570:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	3301      	adds	r3, #1
 8015576:	60fb      	str	r3, [r7, #12]
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801557e:	d3f1      	bcc.n	8015564 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2200      	movs	r2, #0
 8015584:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2200      	movs	r2, #0
 801558a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2201      	movs	r2, #1
 8015590:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2200      	movs	r2, #0
 8015596:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2240      	movs	r2, #64	; 0x40
 80155a4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2200      	movs	r2, #0
 80155aa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2200      	movs	r2, #0
 80155b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2201      	movs	r2, #1
 80155b8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2200      	movs	r2, #0
 80155c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2200      	movs	r2, #0
 80155c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	331c      	adds	r3, #28
 80155d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80155d4:	2100      	movs	r1, #0
 80155d6:	4618      	mov	r0, r3
 80155d8:	f001 fd96 	bl	8017108 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80155e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80155e6:	2100      	movs	r1, #0
 80155e8:	4618      	mov	r0, r3
 80155ea:	f001 fd8d 	bl	8017108 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f203 3326 	addw	r3, r3, #806	; 0x326
 80155f4:	2212      	movs	r2, #18
 80155f6:	2100      	movs	r1, #0
 80155f8:	4618      	mov	r0, r3
 80155fa:	f001 fd85 	bl	8017108 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015604:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8015608:	2100      	movs	r1, #0
 801560a:	4618      	mov	r0, r3
 801560c:	f001 fd7c 	bl	8017108 <memset>

  return USBH_OK;
 8015610:	2300      	movs	r3, #0
}
 8015612:	4618      	mov	r0, r3
 8015614:	3710      	adds	r7, #16
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801561a:	b480      	push	{r7}
 801561c:	b085      	sub	sp, #20
 801561e:	af00      	add	r7, sp, #0
 8015620:	6078      	str	r0, [r7, #4]
 8015622:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8015624:	2300      	movs	r3, #0
 8015626:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d017      	beq.n	801565e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8015634:	2b00      	cmp	r3, #0
 8015636:	d10f      	bne.n	8015658 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 801563e:	1c59      	adds	r1, r3, #1
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	f503 7389 	add.w	r3, r3, #274	; 0x112
 801564c:	6839      	ldr	r1, [r7, #0]
 801564e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8015652:	2300      	movs	r3, #0
 8015654:	73fb      	strb	r3, [r7, #15]
 8015656:	e004      	b.n	8015662 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8015658:	2302      	movs	r3, #2
 801565a:	73fb      	strb	r3, [r7, #15]
 801565c:	e001      	b.n	8015662 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801565e:	2302      	movs	r3, #2
 8015660:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8015662:	7bfb      	ldrb	r3, [r7, #15]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3714      	adds	r7, #20
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr

08015670 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8015670:	b480      	push	{r7}
 8015672:	b085      	sub	sp, #20
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	460b      	mov	r3, r1
 801567a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801567c:	2300      	movs	r3, #0
 801567e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8015686:	78fa      	ldrb	r2, [r7, #3]
 8015688:	429a      	cmp	r2, r3
 801568a:	d204      	bcs.n	8015696 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	78fa      	ldrb	r2, [r7, #3]
 8015690:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8015694:	e001      	b.n	801569a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8015696:	2302      	movs	r3, #2
 8015698:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801569a:	7bfb      	ldrb	r3, [r7, #15]
}
 801569c:	4618      	mov	r0, r3
 801569e:	3714      	adds	r7, #20
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b087      	sub	sp, #28
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	4608      	mov	r0, r1
 80156b2:	4611      	mov	r1, r2
 80156b4:	461a      	mov	r2, r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	70fb      	strb	r3, [r7, #3]
 80156ba:	460b      	mov	r3, r1
 80156bc:	70bb      	strb	r3, [r7, #2]
 80156be:	4613      	mov	r3, r2
 80156c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80156c2:	2300      	movs	r3, #0
 80156c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80156c6:	2300      	movs	r3, #0
 80156c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80156d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80156d2:	e025      	b.n	8015720 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80156d4:	7dfb      	ldrb	r3, [r7, #23]
 80156d6:	221a      	movs	r2, #26
 80156d8:	fb02 f303 	mul.w	r3, r2, r3
 80156dc:	3308      	adds	r3, #8
 80156de:	68fa      	ldr	r2, [r7, #12]
 80156e0:	4413      	add	r3, r2
 80156e2:	3302      	adds	r3, #2
 80156e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	795b      	ldrb	r3, [r3, #5]
 80156ea:	78fa      	ldrb	r2, [r7, #3]
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d002      	beq.n	80156f6 <USBH_FindInterface+0x4e>
 80156f0:	78fb      	ldrb	r3, [r7, #3]
 80156f2:	2bff      	cmp	r3, #255	; 0xff
 80156f4:	d111      	bne.n	801571a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80156fa:	78ba      	ldrb	r2, [r7, #2]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d002      	beq.n	8015706 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8015700:	78bb      	ldrb	r3, [r7, #2]
 8015702:	2bff      	cmp	r3, #255	; 0xff
 8015704:	d109      	bne.n	801571a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801570a:	787a      	ldrb	r2, [r7, #1]
 801570c:	429a      	cmp	r2, r3
 801570e:	d002      	beq.n	8015716 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8015710:	787b      	ldrb	r3, [r7, #1]
 8015712:	2bff      	cmp	r3, #255	; 0xff
 8015714:	d101      	bne.n	801571a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8015716:	7dfb      	ldrb	r3, [r7, #23]
 8015718:	e006      	b.n	8015728 <USBH_FindInterface+0x80>
    }
    if_ix++;
 801571a:	7dfb      	ldrb	r3, [r7, #23]
 801571c:	3301      	adds	r3, #1
 801571e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	2b09      	cmp	r3, #9
 8015724:	d9d6      	bls.n	80156d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8015726:	23ff      	movs	r3, #255	; 0xff
}
 8015728:	4618      	mov	r0, r3
 801572a:	371c      	adds	r7, #28
 801572c:	46bd      	mov	sp, r7
 801572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015732:	4770      	bx	lr

08015734 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7ee ff8f 	bl	8004660 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8015742:	2101      	movs	r1, #1
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f7ef f8a8 	bl	800489a <USBH_LL_DriverVBUS>

  return USBH_OK;
 801574a:	2300      	movs	r3, #0
}
 801574c:	4618      	mov	r0, r3
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <USBH_Stop>:
  *         Stop the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Stop(USBH_HandleTypeDef *phost)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  /* DeActivate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, FALSE);
 801575c:	2100      	movs	r1, #0
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7ef f89b 	bl	800489a <USBH_LL_DriverVBUS>

  /* Stop and cleanup the low level driver  */
  (void)USBH_LL_Stop(phost);
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f7ee ff96 	bl	8004696 <USBH_LL_Stop>

  /* Free Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	791b      	ldrb	r3, [r3, #4]
 801576e:	4619      	mov	r1, r3
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f001 fb6c 	bl	8016e4e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	795b      	ldrb	r3, [r3, #5]
 801577a:	4619      	mov	r1, r3
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f001 fb66 	bl	8016e4e <USBH_FreePipe>

  return USBH_OK;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b088      	sub	sp, #32
 8015790:	af04      	add	r7, sp, #16
 8015792:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8015794:	2302      	movs	r3, #2
 8015796:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8015798:	2300      	movs	r3, #0
 801579a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80157a2:	b2db      	uxtb	r3, r3
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d102      	bne.n	80157ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2203      	movs	r2, #3
 80157ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	2b0b      	cmp	r3, #11
 80157b6:	f200 81c0 	bhi.w	8015b3a <USBH_Process+0x3ae>
 80157ba:	a201      	add	r2, pc, #4	; (adr r2, 80157c0 <USBH_Process+0x34>)
 80157bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c0:	080157f1 	.word	0x080157f1
 80157c4:	08015823 	.word	0x08015823
 80157c8:	0801588b 	.word	0x0801588b
 80157cc:	08015ad5 	.word	0x08015ad5
 80157d0:	08015b3b 	.word	0x08015b3b
 80157d4:	0801592f 	.word	0x0801592f
 80157d8:	08015a7b 	.word	0x08015a7b
 80157dc:	08015965 	.word	0x08015965
 80157e0:	08015985 	.word	0x08015985
 80157e4:	080159a5 	.word	0x080159a5
 80157e8:	080159e9 	.word	0x080159e9
 80157ec:	08015abd 	.word	0x08015abd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	f000 81a0 	beq.w	8015b3e <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2201      	movs	r2, #1
 8015802:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8015804:	20c8      	movs	r0, #200	; 0xc8
 8015806:	f7ef f88f 	bl	8004928 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f7ee ff85 	bl	800471a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2200      	movs	r2, #0
 8015814:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015820:	e18d      	b.n	8015b3e <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8015828:	2b01      	cmp	r3, #1
 801582a:	d107      	bne.n	801583c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2202      	movs	r2, #2
 8015838:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801583a:	e18f      	b.n	8015b5c <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015846:	d914      	bls.n	8015872 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801584e:	3301      	adds	r3, #1
 8015850:	b2da      	uxtb	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 801585e:	2b03      	cmp	r3, #3
 8015860:	d903      	bls.n	801586a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	220d      	movs	r2, #13
 8015866:	701a      	strb	r2, [r3, #0]
      break;
 8015868:	e178      	b.n	8015b5c <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2200      	movs	r2, #0
 801586e:	701a      	strb	r2, [r3, #0]
      break;
 8015870:	e174      	b.n	8015b5c <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8015878:	f103 020a 	add.w	r2, r3, #10
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8015882:	200a      	movs	r0, #10
 8015884:	f7ef f850 	bl	8004928 <USBH_Delay>
      break;
 8015888:	e168      	b.n	8015b5c <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015890:	2b00      	cmp	r3, #0
 8015892:	d005      	beq.n	80158a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801589a:	2104      	movs	r1, #4
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80158a0:	2064      	movs	r0, #100	; 0x64
 80158a2:	f7ef f841 	bl	8004928 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f7ee ff10 	bl	80046cc <USBH_LL_GetSpeed>
 80158ac:	4603      	mov	r3, r0
 80158ae:	461a      	mov	r2, r3
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2205      	movs	r2, #5
 80158ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80158bc:	2100      	movs	r1, #0
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f001 faa3 	bl	8016e0a <USBH_AllocPipe>
 80158c4:	4603      	mov	r3, r0
 80158c6:	461a      	mov	r2, r3
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80158cc:	2180      	movs	r1, #128	; 0x80
 80158ce:	6878      	ldr	r0, [r7, #4]
 80158d0:	f001 fa9b 	bl	8016e0a <USBH_AllocPipe>
 80158d4:	4603      	mov	r3, r0
 80158d6:	461a      	mov	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	7919      	ldrb	r1, [r3, #4]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80158ec:	687a      	ldr	r2, [r7, #4]
 80158ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80158f0:	b292      	uxth	r2, r2
 80158f2:	9202      	str	r2, [sp, #8]
 80158f4:	2200      	movs	r2, #0
 80158f6:	9201      	str	r2, [sp, #4]
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	4603      	mov	r3, r0
 80158fc:	2280      	movs	r2, #128	; 0x80
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f001 fa54 	bl	8016dac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	7959      	ldrb	r1, [r3, #5]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8015918:	b292      	uxth	r2, r2
 801591a:	9202      	str	r2, [sp, #8]
 801591c:	2200      	movs	r2, #0
 801591e:	9201      	str	r2, [sp, #4]
 8015920:	9300      	str	r3, [sp, #0]
 8015922:	4603      	mov	r3, r0
 8015924:	2200      	movs	r2, #0
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f001 fa40 	bl	8016dac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801592c:	e116      	b.n	8015b5c <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 f91a 	bl	8015b68 <USBH_HandleEnum>
 8015934:	4603      	mov	r3, r0
 8015936:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8015938:	7bbb      	ldrb	r3, [r7, #14]
 801593a:	b2db      	uxtb	r3, r3
 801593c:	2b00      	cmp	r3, #0
 801593e:	f040 8100 	bne.w	8015b42 <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2200      	movs	r2, #0
 8015946:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8015950:	2b01      	cmp	r3, #1
 8015952:	d103      	bne.n	801595c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2208      	movs	r2, #8
 8015958:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801595a:	e0f2      	b.n	8015b42 <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2207      	movs	r2, #7
 8015960:	701a      	strb	r2, [r3, #0]
      break;
 8015962:	e0ee      	b.n	8015b42 <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 801596a:	2b00      	cmp	r3, #0
 801596c:	f000 80eb 	beq.w	8015b46 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015976:	2101      	movs	r1, #1
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2208      	movs	r2, #8
 8015980:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8015982:	e0e0      	b.n	8015b46 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801598a:	b29b      	uxth	r3, r3
 801598c:	4619      	mov	r1, r3
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 fc41 	bl	8016216 <USBH_SetCfg>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	f040 80d7 	bne.w	8015b4a <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2209      	movs	r2, #9
 80159a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80159a2:	e0d2      	b.n	8015b4a <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80159aa:	f003 0320 	and.w	r3, r3, #32
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d016      	beq.n	80159e0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80159b2:	2101      	movs	r1, #1
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f000 fc51 	bl	801625c <USBH_SetFeature>
 80159ba:	4603      	mov	r3, r0
 80159bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80159be:	7bbb      	ldrb	r3, [r7, #14]
 80159c0:	b2db      	uxtb	r3, r3
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d103      	bne.n	80159ce <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	220a      	movs	r2, #10
 80159ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80159cc:	e0bf      	b.n	8015b4e <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 80159ce:	7bbb      	ldrb	r3, [r7, #14]
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	2b03      	cmp	r3, #3
 80159d4:	f040 80bb 	bne.w	8015b4e <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	220a      	movs	r2, #10
 80159dc:	701a      	strb	r2, [r3, #0]
      break;
 80159de:	e0b6      	b.n	8015b4e <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	220a      	movs	r2, #10
 80159e4:	701a      	strb	r2, [r3, #0]
      break;
 80159e6:	e0b2      	b.n	8015b4e <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	f000 80af 	beq.w	8015b52 <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2200      	movs	r2, #0
 80159f8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80159fc:	2300      	movs	r3, #0
 80159fe:	73fb      	strb	r3, [r7, #15]
 8015a00:	e018      	b.n	8015a34 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8015a02:	7bfa      	ldrb	r2, [r7, #15]
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a0e:	791a      	ldrb	r2, [r3, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d109      	bne.n	8015a2e <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8015a1a:	7bfa      	ldrb	r2, [r7, #15]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8015a22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8015a2c:	e005      	b.n	8015a3a <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8015a2e:	7bfb      	ldrb	r3, [r7, #15]
 8015a30:	3301      	adds	r3, #1
 8015a32:	73fb      	strb	r3, [r7, #15]
 8015a34:	7bfb      	ldrb	r3, [r7, #15]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d0e3      	beq.n	8015a02 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d016      	beq.n	8015a72 <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	4798      	blx	r3
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d109      	bne.n	8015a6a <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2206      	movs	r2, #6
 8015a5a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015a62:	2103      	movs	r1, #3
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015a68:	e073      	b.n	8015b52 <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	220d      	movs	r2, #13
 8015a6e:	701a      	strb	r2, [r3, #0]
      break;
 8015a70:	e06f      	b.n	8015b52 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	220d      	movs	r2, #13
 8015a76:	701a      	strb	r2, [r3, #0]
      break;
 8015a78:	e06b      	b.n	8015b52 <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d017      	beq.n	8015ab4 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015a8a:	691b      	ldr	r3, [r3, #16]
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	4798      	blx	r3
 8015a90:	4603      	mov	r3, r0
 8015a92:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8015a94:	7bbb      	ldrb	r3, [r7, #14]
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d103      	bne.n	8015aa4 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	220b      	movs	r2, #11
 8015aa0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015aa2:	e058      	b.n	8015b56 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8015aa4:	7bbb      	ldrb	r3, [r7, #14]
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	2b02      	cmp	r3, #2
 8015aaa:	d154      	bne.n	8015b56 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	220d      	movs	r2, #13
 8015ab0:	701a      	strb	r2, [r3, #0]
      break;
 8015ab2:	e050      	b.n	8015b56 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	220d      	movs	r2, #13
 8015ab8:	701a      	strb	r2, [r3, #0]
      break;
 8015aba:	e04c      	b.n	8015b56 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d049      	beq.n	8015b5a <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015acc:	695b      	ldr	r3, [r3, #20]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	4798      	blx	r3
      }
      break;
 8015ad2:	e042      	b.n	8015b5a <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7ff fd27 	bl	8015530 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d009      	beq.n	8015b00 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015af2:	68db      	ldr	r3, [r3, #12]
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d005      	beq.n	8015b16 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8015b10:	2105      	movs	r1, #5
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	2b01      	cmp	r3, #1
 8015b20:	d107      	bne.n	8015b32 <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	2200      	movs	r2, #0
 8015b26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f7ff fe02 	bl	8015734 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8015b30:	e014      	b.n	8015b5c <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f7ee fd94 	bl	8004660 <USBH_LL_Start>
      break;
 8015b38:	e010      	b.n	8015b5c <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8015b3a:	bf00      	nop
 8015b3c:	e00e      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b3e:	bf00      	nop
 8015b40:	e00c      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b42:	bf00      	nop
 8015b44:	e00a      	b.n	8015b5c <USBH_Process+0x3d0>
    break;
 8015b46:	bf00      	nop
 8015b48:	e008      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b4a:	bf00      	nop
 8015b4c:	e006      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b4e:	bf00      	nop
 8015b50:	e004      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b52:	bf00      	nop
 8015b54:	e002      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b56:	bf00      	nop
 8015b58:	e000      	b.n	8015b5c <USBH_Process+0x3d0>
      break;
 8015b5a:	bf00      	nop
  }
  return USBH_OK;
 8015b5c:	2300      	movs	r3, #0
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3710      	adds	r7, #16
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop

08015b68 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b088      	sub	sp, #32
 8015b6c:	af04      	add	r7, sp, #16
 8015b6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8015b70:	2301      	movs	r3, #1
 8015b72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8015b74:	2301      	movs	r3, #1
 8015b76:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	785b      	ldrb	r3, [r3, #1]
 8015b7c:	2b07      	cmp	r3, #7
 8015b7e:	f200 81c1 	bhi.w	8015f04 <USBH_HandleEnum+0x39c>
 8015b82:	a201      	add	r2, pc, #4	; (adr r2, 8015b88 <USBH_HandleEnum+0x20>)
 8015b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b88:	08015ba9 	.word	0x08015ba9
 8015b8c:	08015c67 	.word	0x08015c67
 8015b90:	08015cd1 	.word	0x08015cd1
 8015b94:	08015d5f 	.word	0x08015d5f
 8015b98:	08015dc9 	.word	0x08015dc9
 8015b9c:	08015e39 	.word	0x08015e39
 8015ba0:	08015e7f 	.word	0x08015e7f
 8015ba4:	08015ec5 	.word	0x08015ec5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8015ba8:	2108      	movs	r1, #8
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f000 fa50 	bl	8016050 <USBH_Get_DevDesc>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015bb4:	7bbb      	ldrb	r3, [r7, #14]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d130      	bne.n	8015c1c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2201      	movs	r2, #1
 8015bc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	7919      	ldrb	r1, [r3, #4]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8015bde:	b292      	uxth	r2, r2
 8015be0:	9202      	str	r2, [sp, #8]
 8015be2:	2200      	movs	r2, #0
 8015be4:	9201      	str	r2, [sp, #4]
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	4603      	mov	r3, r0
 8015bea:	2280      	movs	r2, #128	; 0x80
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f001 f8dd 	bl	8016dac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	7959      	ldrb	r1, [r3, #5]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015c06:	b292      	uxth	r2, r2
 8015c08:	9202      	str	r2, [sp, #8]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	9201      	str	r2, [sp, #4]
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	4603      	mov	r3, r0
 8015c12:	2200      	movs	r2, #0
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f001 f8c9 	bl	8016dac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015c1a:	e175      	b.n	8015f08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015c1c:	7bbb      	ldrb	r3, [r7, #14]
 8015c1e:	2b03      	cmp	r3, #3
 8015c20:	f040 8172 	bne.w	8015f08 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015c3a:	2b03      	cmp	r3, #3
 8015c3c:	d903      	bls.n	8015c46 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	220d      	movs	r2, #13
 8015c42:	701a      	strb	r2, [r3, #0]
      break;
 8015c44:	e160      	b.n	8015f08 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	795b      	ldrb	r3, [r3, #5]
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f001 f8fe 	bl	8016e4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	791b      	ldrb	r3, [r3, #4]
 8015c56:	4619      	mov	r1, r3
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f001 f8f8 	bl	8016e4e <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2200      	movs	r2, #0
 8015c62:	701a      	strb	r2, [r3, #0]
      break;
 8015c64:	e150      	b.n	8015f08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8015c66:	2112      	movs	r1, #18
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f000 f9f1 	bl	8016050 <USBH_Get_DevDesc>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015c72:	7bbb      	ldrb	r3, [r7, #14]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d103      	bne.n	8015c80 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2202      	movs	r2, #2
 8015c7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015c7e:	e145      	b.n	8015f0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015c80:	7bbb      	ldrb	r3, [r7, #14]
 8015c82:	2b03      	cmp	r3, #3
 8015c84:	f040 8142 	bne.w	8015f0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015c8e:	3301      	adds	r3, #1
 8015c90:	b2da      	uxtb	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015c9e:	2b03      	cmp	r3, #3
 8015ca0:	d903      	bls.n	8015caa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	220d      	movs	r2, #13
 8015ca6:	701a      	strb	r2, [r3, #0]
      break;
 8015ca8:	e130      	b.n	8015f0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	795b      	ldrb	r3, [r3, #5]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f001 f8cc 	bl	8016e4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	791b      	ldrb	r3, [r3, #4]
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f001 f8c6 	bl	8016e4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	701a      	strb	r2, [r3, #0]
      break;
 8015cce:	e11d      	b.n	8015f0c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8015cd0:	2101      	movs	r1, #1
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 fa7b 	bl	80161ce <USBH_SetAddress>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015cdc:	7bbb      	ldrb	r3, [r7, #14]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d132      	bne.n	8015d48 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8015ce2:	2002      	movs	r0, #2
 8015ce4:	f7ee fe20 	bl	8004928 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2201      	movs	r2, #1
 8015cec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2203      	movs	r2, #3
 8015cf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	7919      	ldrb	r1, [r3, #4]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015d06:	687a      	ldr	r2, [r7, #4]
 8015d08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8015d0a:	b292      	uxth	r2, r2
 8015d0c:	9202      	str	r2, [sp, #8]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	9201      	str	r2, [sp, #4]
 8015d12:	9300      	str	r3, [sp, #0]
 8015d14:	4603      	mov	r3, r0
 8015d16:	2280      	movs	r2, #128	; 0x80
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f001 f847 	bl	8016dac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	7959      	ldrb	r1, [r3, #5]
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8015d32:	b292      	uxth	r2, r2
 8015d34:	9202      	str	r2, [sp, #8]
 8015d36:	2200      	movs	r2, #0
 8015d38:	9201      	str	r2, [sp, #4]
 8015d3a:	9300      	str	r3, [sp, #0]
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	2200      	movs	r2, #0
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	f001 f833 	bl	8016dac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8015d46:	e0e3      	b.n	8015f10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015d48:	7bbb      	ldrb	r3, [r7, #14]
 8015d4a:	2b03      	cmp	r3, #3
 8015d4c:	f040 80e0 	bne.w	8015f10 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	220d      	movs	r2, #13
 8015d54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	705a      	strb	r2, [r3, #1]
      break;
 8015d5c:	e0d8      	b.n	8015f10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8015d5e:	2109      	movs	r1, #9
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 f9a1 	bl	80160a8 <USBH_Get_CfgDesc>
 8015d66:	4603      	mov	r3, r0
 8015d68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015d6a:	7bbb      	ldrb	r3, [r7, #14]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d103      	bne.n	8015d78 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2204      	movs	r2, #4
 8015d74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015d76:	e0cd      	b.n	8015f14 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015d78:	7bbb      	ldrb	r3, [r7, #14]
 8015d7a:	2b03      	cmp	r3, #3
 8015d7c:	f040 80ca 	bne.w	8015f14 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015d86:	3301      	adds	r3, #1
 8015d88:	b2da      	uxtb	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015d96:	2b03      	cmp	r3, #3
 8015d98:	d903      	bls.n	8015da2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	220d      	movs	r2, #13
 8015d9e:	701a      	strb	r2, [r3, #0]
      break;
 8015da0:	e0b8      	b.n	8015f14 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	795b      	ldrb	r3, [r3, #5]
 8015da6:	4619      	mov	r1, r3
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f001 f850 	bl	8016e4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	791b      	ldrb	r3, [r3, #4]
 8015db2:	4619      	mov	r1, r3
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f001 f84a 	bl	8016e4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	701a      	strb	r2, [r3, #0]
      break;
 8015dc6:	e0a5      	b.n	8015f14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8015dce:	4619      	mov	r1, r3
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f000 f969 	bl	80160a8 <USBH_Get_CfgDesc>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8015dda:	7bbb      	ldrb	r3, [r7, #14]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d103      	bne.n	8015de8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2205      	movs	r2, #5
 8015de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8015de6:	e097      	b.n	8015f18 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015de8:	7bbb      	ldrb	r3, [r7, #14]
 8015dea:	2b03      	cmp	r3, #3
 8015dec:	f040 8094 	bne.w	8015f18 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015df6:	3301      	adds	r3, #1
 8015df8:	b2da      	uxtb	r2, r3
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8015e06:	2b03      	cmp	r3, #3
 8015e08:	d903      	bls.n	8015e12 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	220d      	movs	r2, #13
 8015e0e:	701a      	strb	r2, [r3, #0]
      break;
 8015e10:	e082      	b.n	8015f18 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	795b      	ldrb	r3, [r3, #5]
 8015e16:	4619      	mov	r1, r3
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f001 f818 	bl	8016e4e <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	791b      	ldrb	r3, [r3, #4]
 8015e22:	4619      	mov	r1, r3
 8015e24:	6878      	ldr	r0, [r7, #4]
 8015e26:	f001 f812 	bl	8016e4e <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2200      	movs	r2, #0
 8015e34:	701a      	strb	r2, [r3, #0]
      break;
 8015e36:	e06f      	b.n	8015f18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d019      	beq.n	8015e76 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8015e4e:	23ff      	movs	r3, #255	; 0xff
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f000 f953 	bl	80160fc <USBH_Get_StringDesc>
 8015e56:	4603      	mov	r3, r0
 8015e58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015e5a:	7bbb      	ldrb	r3, [r7, #14]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d103      	bne.n	8015e68 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2206      	movs	r2, #6
 8015e64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015e66:	e059      	b.n	8015f1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015e68:	7bbb      	ldrb	r3, [r7, #14]
 8015e6a:	2b03      	cmp	r3, #3
 8015e6c:	d156      	bne.n	8015f1c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2206      	movs	r2, #6
 8015e72:	705a      	strb	r2, [r3, #1]
      break;
 8015e74:	e052      	b.n	8015f1c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2206      	movs	r2, #6
 8015e7a:	705a      	strb	r2, [r3, #1]
      break;
 8015e7c:	e04e      	b.n	8015f1c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d019      	beq.n	8015ebc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8015e94:	23ff      	movs	r3, #255	; 0xff
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f000 f930 	bl	80160fc <USBH_Get_StringDesc>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015ea0:	7bbb      	ldrb	r3, [r7, #14]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d103      	bne.n	8015eae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2207      	movs	r2, #7
 8015eaa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8015eac:	e038      	b.n	8015f20 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015eae:	7bbb      	ldrb	r3, [r7, #14]
 8015eb0:	2b03      	cmp	r3, #3
 8015eb2:	d135      	bne.n	8015f20 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	2207      	movs	r2, #7
 8015eb8:	705a      	strb	r2, [r3, #1]
      break;
 8015eba:	e031      	b.n	8015f20 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2207      	movs	r2, #7
 8015ec0:	705a      	strb	r2, [r3, #1]
      break;
 8015ec2:	e02d      	b.n	8015f20 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d017      	beq.n	8015efe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8015eda:	23ff      	movs	r3, #255	; 0xff
 8015edc:	6878      	ldr	r0, [r7, #4]
 8015ede:	f000 f90d 	bl	80160fc <USBH_Get_StringDesc>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8015ee6:	7bbb      	ldrb	r3, [r7, #14]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d102      	bne.n	8015ef2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8015eec:	2300      	movs	r3, #0
 8015eee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8015ef0:	e018      	b.n	8015f24 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8015ef2:	7bbb      	ldrb	r3, [r7, #14]
 8015ef4:	2b03      	cmp	r3, #3
 8015ef6:	d115      	bne.n	8015f24 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	73fb      	strb	r3, [r7, #15]
      break;
 8015efc:	e012      	b.n	8015f24 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8015efe:	2300      	movs	r3, #0
 8015f00:	73fb      	strb	r3, [r7, #15]
      break;
 8015f02:	e00f      	b.n	8015f24 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8015f04:	bf00      	nop
 8015f06:	e00e      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f08:	bf00      	nop
 8015f0a:	e00c      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f0c:	bf00      	nop
 8015f0e:	e00a      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f10:	bf00      	nop
 8015f12:	e008      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f14:	bf00      	nop
 8015f16:	e006      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f18:	bf00      	nop
 8015f1a:	e004      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f1c:	bf00      	nop
 8015f1e:	e002      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f20:	bf00      	nop
 8015f22:	e000      	b.n	8015f26 <USBH_HandleEnum+0x3be>
      break;
 8015f24:	bf00      	nop
  }
  return Status;
 8015f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	683a      	ldr	r2, [r7, #0]
 8015f3e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8015f42:	bf00      	nop
 8015f44:	370c      	adds	r7, #12
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr

08015f4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b082      	sub	sp, #8
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8015f5c:	1c5a      	adds	r2, r3, #1
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f000 f804 	bl	8015f72 <USBH_HandleSof>
}
 8015f6a:	bf00      	nop
 8015f6c:	3708      	adds	r7, #8
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}

08015f72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8015f72:	b580      	push	{r7, lr}
 8015f74:	b082      	sub	sp, #8
 8015f76:	af00      	add	r7, sp, #0
 8015f78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	2b0b      	cmp	r3, #11
 8015f82:	d10a      	bne.n	8015f9a <USBH_HandleSof+0x28>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d005      	beq.n	8015f9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8015f94:	699b      	ldr	r3, [r3, #24]
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	4798      	blx	r3
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	3708      	adds	r7, #8
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}

08015fa2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8015fa2:	b480      	push	{r7}
 8015fa4:	b083      	sub	sp, #12
 8015fa6:	af00      	add	r7, sp, #0
 8015fa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2201      	movs	r2, #1
 8015fae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8015fb2:	bf00      	nop
}
 8015fb4:	370c      	adds	r7, #12
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbc:	4770      	bx	lr

08015fbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8015fbe:	b480      	push	{r7}
 8015fc0:	b083      	sub	sp, #12
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8015fce:	bf00      	nop
}
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd8:	4770      	bx	lr

08015fda <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8015fda:	b480      	push	{r7}
 8015fdc:	b083      	sub	sp, #12
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2200      	movs	r2, #0
 8015fee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8015ffa:	2300      	movs	r3, #0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	370c      	adds	r7, #12
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr

08016008 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2201      	movs	r2, #1
 8016014:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2200      	movs	r2, #0
 801601c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2200      	movs	r2, #0
 8016024:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7ee fb34 	bl	8004696 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	791b      	ldrb	r3, [r3, #4]
 8016032:	4619      	mov	r1, r3
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f000 ff0a 	bl	8016e4e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	795b      	ldrb	r3, [r3, #5]
 801603e:	4619      	mov	r1, r3
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 ff04 	bl	8016e4e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8016046:	2300      	movs	r3, #0
}
 8016048:	4618      	mov	r0, r3
 801604a:	3708      	adds	r7, #8
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af02      	add	r7, sp, #8
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	460b      	mov	r3, r1
 801605a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801605c:	887b      	ldrh	r3, [r7, #2]
 801605e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016062:	d901      	bls.n	8016068 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8016064:	2303      	movs	r3, #3
 8016066:	e01b      	b.n	80160a0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801606e:	887b      	ldrh	r3, [r7, #2]
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	4613      	mov	r3, r2
 8016074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016078:	2100      	movs	r1, #0
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f000 f872 	bl	8016164 <USBH_GetDescriptor>
 8016080:	4603      	mov	r3, r0
 8016082:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8016084:	7bfb      	ldrb	r3, [r7, #15]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d109      	bne.n	801609e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016090:	887a      	ldrh	r2, [r7, #2]
 8016092:	4619      	mov	r1, r3
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 f929 	bl	80162ec <USBH_ParseDevDesc>
 801609a:	4603      	mov	r3, r0
 801609c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3710      	adds	r7, #16
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af02      	add	r7, sp, #8
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	460b      	mov	r3, r1
 80160b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	331c      	adds	r3, #28
 80160b8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80160ba:	887b      	ldrh	r3, [r7, #2]
 80160bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160c0:	d901      	bls.n	80160c6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80160c2:	2303      	movs	r3, #3
 80160c4:	e016      	b.n	80160f4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80160c6:	887b      	ldrh	r3, [r7, #2]
 80160c8:	9300      	str	r3, [sp, #0]
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80160d0:	2100      	movs	r1, #0
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 f846 	bl	8016164 <USBH_GetDescriptor>
 80160d8:	4603      	mov	r3, r0
 80160da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80160dc:	7bfb      	ldrb	r3, [r7, #15]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d107      	bne.n	80160f2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80160e2:	887b      	ldrh	r3, [r7, #2]
 80160e4:	461a      	mov	r2, r3
 80160e6:	68b9      	ldr	r1, [r7, #8]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 f9b3 	bl	8016454 <USBH_ParseCfgDesc>
 80160ee:	4603      	mov	r3, r0
 80160f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80160f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3710      	adds	r7, #16
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}

080160fc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b088      	sub	sp, #32
 8016100:	af02      	add	r7, sp, #8
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	607a      	str	r2, [r7, #4]
 8016106:	461a      	mov	r2, r3
 8016108:	460b      	mov	r3, r1
 801610a:	72fb      	strb	r3, [r7, #11]
 801610c:	4613      	mov	r3, r2
 801610e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8016110:	893b      	ldrh	r3, [r7, #8]
 8016112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016116:	d802      	bhi.n	801611e <USBH_Get_StringDesc+0x22>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d101      	bne.n	8016122 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801611e:	2303      	movs	r3, #3
 8016120:	e01c      	b.n	801615c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8016122:	7afb      	ldrb	r3, [r7, #11]
 8016124:	b29b      	uxth	r3, r3
 8016126:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801612a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8016132:	893b      	ldrh	r3, [r7, #8]
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	460b      	mov	r3, r1
 8016138:	2100      	movs	r1, #0
 801613a:	68f8      	ldr	r0, [r7, #12]
 801613c:	f000 f812 	bl	8016164 <USBH_GetDescriptor>
 8016140:	4603      	mov	r3, r0
 8016142:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8016144:	7dfb      	ldrb	r3, [r7, #23]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d107      	bne.n	801615a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016150:	893a      	ldrh	r2, [r7, #8]
 8016152:	6879      	ldr	r1, [r7, #4]
 8016154:	4618      	mov	r0, r3
 8016156:	f000 fb8a 	bl	801686e <USBH_ParseStringDesc>
  }

  return status;
 801615a:	7dfb      	ldrb	r3, [r7, #23]
}
 801615c:	4618      	mov	r0, r3
 801615e:	3718      	adds	r7, #24
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b084      	sub	sp, #16
 8016168:	af00      	add	r7, sp, #0
 801616a:	60f8      	str	r0, [r7, #12]
 801616c:	607b      	str	r3, [r7, #4]
 801616e:	460b      	mov	r3, r1
 8016170:	72fb      	strb	r3, [r7, #11]
 8016172:	4613      	mov	r3, r2
 8016174:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	789b      	ldrb	r3, [r3, #2]
 801617a:	2b01      	cmp	r3, #1
 801617c:	d11c      	bne.n	80161b8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801617e:	7afb      	ldrb	r3, [r7, #11]
 8016180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016184:	b2da      	uxtb	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2206      	movs	r2, #6
 801618e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	893a      	ldrh	r2, [r7, #8]
 8016194:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8016196:	893b      	ldrh	r3, [r7, #8]
 8016198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801619c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80161a0:	d104      	bne.n	80161ac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	f240 4209 	movw	r2, #1033	; 0x409
 80161a8:	829a      	strh	r2, [r3, #20]
 80161aa:	e002      	b.n	80161b2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2200      	movs	r2, #0
 80161b0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	8b3a      	ldrh	r2, [r7, #24]
 80161b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80161b8:	8b3b      	ldrh	r3, [r7, #24]
 80161ba:	461a      	mov	r2, r3
 80161bc:	6879      	ldr	r1, [r7, #4]
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f000 fba3 	bl	801690a <USBH_CtlReq>
 80161c4:	4603      	mov	r3, r0
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3710      	adds	r7, #16
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}

080161ce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b082      	sub	sp, #8
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
 80161d6:	460b      	mov	r3, r1
 80161d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	789b      	ldrb	r3, [r3, #2]
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d10f      	bne.n	8016202 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2200      	movs	r2, #0
 80161e6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2205      	movs	r2, #5
 80161ec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80161ee:	78fb      	ldrb	r3, [r7, #3]
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2200      	movs	r2, #0
 80161fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016202:	2200      	movs	r2, #0
 8016204:	2100      	movs	r1, #0
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 fb7f 	bl	801690a <USBH_CtlReq>
 801620c:	4603      	mov	r3, r0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3708      	adds	r7, #8
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}

08016216 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8016216:	b580      	push	{r7, lr}
 8016218:	b082      	sub	sp, #8
 801621a:	af00      	add	r7, sp, #0
 801621c:	6078      	str	r0, [r7, #4]
 801621e:	460b      	mov	r3, r1
 8016220:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	789b      	ldrb	r3, [r3, #2]
 8016226:	2b01      	cmp	r3, #1
 8016228:	d10e      	bne.n	8016248 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2200      	movs	r2, #0
 801622e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2209      	movs	r2, #9
 8016234:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	887a      	ldrh	r2, [r7, #2]
 801623a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2200      	movs	r2, #0
 8016240:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2200      	movs	r2, #0
 8016246:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016248:	2200      	movs	r2, #0
 801624a:	2100      	movs	r1, #0
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 fb5c 	bl	801690a <USBH_CtlReq>
 8016252:	4603      	mov	r3, r0
}
 8016254:	4618      	mov	r0, r3
 8016256:	3708      	adds	r7, #8
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b082      	sub	sp, #8
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	460b      	mov	r3, r1
 8016266:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	789b      	ldrb	r3, [r3, #2]
 801626c:	2b01      	cmp	r3, #1
 801626e:	d10f      	bne.n	8016290 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2203      	movs	r2, #3
 801627a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801627c:	78fb      	ldrb	r3, [r7, #3]
 801627e:	b29a      	uxth	r2, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2200      	movs	r2, #0
 801628e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8016290:	2200      	movs	r2, #0
 8016292:	2100      	movs	r1, #0
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f000 fb38 	bl	801690a <USBH_CtlReq>
 801629a:	4603      	mov	r3, r0
}
 801629c:	4618      	mov	r0, r3
 801629e:	3708      	adds	r7, #8
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	460b      	mov	r3, r1
 80162ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	789b      	ldrb	r3, [r3, #2]
 80162b4:	2b01      	cmp	r3, #1
 80162b6:	d10f      	bne.n	80162d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	2202      	movs	r2, #2
 80162bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2201      	movs	r2, #1
 80162c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80162ca:	78fb      	ldrb	r3, [r7, #3]
 80162cc:	b29a      	uxth	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	2200      	movs	r2, #0
 80162d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80162d8:	2200      	movs	r2, #0
 80162da:	2100      	movs	r1, #0
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f000 fb14 	bl	801690a <USBH_CtlReq>
 80162e2:	4603      	mov	r3, r0
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	3708      	adds	r7, #8
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}

080162ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b087      	sub	sp, #28
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	4613      	mov	r3, r2
 80162f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	f203 3326 	addw	r3, r3, #806	; 0x326
 8016300:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8016302:	2300      	movs	r3, #0
 8016304:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d101      	bne.n	8016310 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 801630c:	2302      	movs	r3, #2
 801630e:	e098      	b.n	8016442 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	781a      	ldrb	r2, [r3, #0]
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	785a      	ldrb	r2, [r3, #1]
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	3302      	adds	r3, #2
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	b29a      	uxth	r2, r3
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	3303      	adds	r3, #3
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	b29b      	uxth	r3, r3
 8016330:	021b      	lsls	r3, r3, #8
 8016332:	b29b      	uxth	r3, r3
 8016334:	4313      	orrs	r3, r2
 8016336:	b29a      	uxth	r2, r3
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	791a      	ldrb	r2, [r3, #4]
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	795a      	ldrb	r2, [r3, #5]
 8016348:	693b      	ldr	r3, [r7, #16]
 801634a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	799a      	ldrb	r2, [r3, #6]
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	79da      	ldrb	r2, [r3, #7]
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016362:	2b00      	cmp	r3, #0
 8016364:	d004      	beq.n	8016370 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801636c:	2b01      	cmp	r3, #1
 801636e:	d11b      	bne.n	80163a8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	79db      	ldrb	r3, [r3, #7]
 8016374:	2b20      	cmp	r3, #32
 8016376:	dc0f      	bgt.n	8016398 <USBH_ParseDevDesc+0xac>
 8016378:	2b08      	cmp	r3, #8
 801637a:	db0f      	blt.n	801639c <USBH_ParseDevDesc+0xb0>
 801637c:	3b08      	subs	r3, #8
 801637e:	4a34      	ldr	r2, [pc, #208]	; (8016450 <USBH_ParseDevDesc+0x164>)
 8016380:	fa22 f303 	lsr.w	r3, r2, r3
 8016384:	f003 0301 	and.w	r3, r3, #1
 8016388:	2b00      	cmp	r3, #0
 801638a:	bf14      	ite	ne
 801638c:	2301      	movne	r3, #1
 801638e:	2300      	moveq	r3, #0
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d106      	bne.n	80163a4 <USBH_ParseDevDesc+0xb8>
 8016396:	e001      	b.n	801639c <USBH_ParseDevDesc+0xb0>
 8016398:	2b40      	cmp	r3, #64	; 0x40
 801639a:	d003      	beq.n	80163a4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801639c:	693b      	ldr	r3, [r7, #16]
 801639e:	2208      	movs	r2, #8
 80163a0:	71da      	strb	r2, [r3, #7]
        break;
 80163a2:	e000      	b.n	80163a6 <USBH_ParseDevDesc+0xba>
        break;
 80163a4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80163a6:	e00e      	b.n	80163c6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80163ae:	2b02      	cmp	r3, #2
 80163b0:	d107      	bne.n	80163c2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	79db      	ldrb	r3, [r3, #7]
 80163b6:	2b08      	cmp	r3, #8
 80163b8:	d005      	beq.n	80163c6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	2208      	movs	r2, #8
 80163be:	71da      	strb	r2, [r3, #7]
 80163c0:	e001      	b.n	80163c6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80163c2:	2303      	movs	r3, #3
 80163c4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80163c6:	88fb      	ldrh	r3, [r7, #6]
 80163c8:	2b08      	cmp	r3, #8
 80163ca:	d939      	bls.n	8016440 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	3308      	adds	r3, #8
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	3309      	adds	r3, #9
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	b29b      	uxth	r3, r3
 80163dc:	021b      	lsls	r3, r3, #8
 80163de:	b29b      	uxth	r3, r3
 80163e0:	4313      	orrs	r3, r2
 80163e2:	b29a      	uxth	r2, r3
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	330a      	adds	r3, #10
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	330b      	adds	r3, #11
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	021b      	lsls	r3, r3, #8
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	4313      	orrs	r3, r2
 80163fe:	b29a      	uxth	r2, r3
 8016400:	693b      	ldr	r3, [r7, #16]
 8016402:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	330c      	adds	r3, #12
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	b29a      	uxth	r2, r3
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	330d      	adds	r3, #13
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	b29b      	uxth	r3, r3
 8016414:	021b      	lsls	r3, r3, #8
 8016416:	b29b      	uxth	r3, r3
 8016418:	4313      	orrs	r3, r2
 801641a:	b29a      	uxth	r2, r3
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	7b9a      	ldrb	r2, [r3, #14]
 8016424:	693b      	ldr	r3, [r7, #16]
 8016426:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	7bda      	ldrb	r2, [r3, #15]
 801642c:	693b      	ldr	r3, [r7, #16]
 801642e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	7c1a      	ldrb	r2, [r3, #16]
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	7c5a      	ldrb	r2, [r3, #17]
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8016440:	7dfb      	ldrb	r3, [r7, #23]
}
 8016442:	4618      	mov	r0, r3
 8016444:	371c      	adds	r7, #28
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr
 801644e:	bf00      	nop
 8016450:	01000101 	.word	0x01000101

08016454 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b08c      	sub	sp, #48	; 0x30
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4613      	mov	r3, r2
 8016460:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016468:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801646a:	2300      	movs	r3, #0
 801646c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8016470:	2300      	movs	r3, #0
 8016472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8016476:	2300      	movs	r3, #0
 8016478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8016482:	2302      	movs	r3, #2
 8016484:	e0d7      	b.n	8016636 <USBH_ParseCfgDesc+0x1e2>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	781a      	ldrb	r2, [r3, #0]
 801648e:	6a3b      	ldr	r3, [r7, #32]
 8016490:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	785a      	ldrb	r2, [r3, #1]
 8016496:	6a3b      	ldr	r3, [r7, #32]
 8016498:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	3302      	adds	r3, #2
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	b29a      	uxth	r2, r3
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	3303      	adds	r3, #3
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	021b      	lsls	r3, r3, #8
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	4313      	orrs	r3, r2
 80164b0:	b29b      	uxth	r3, r3
 80164b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164b6:	bf28      	it	cs
 80164b8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80164bc:	b29a      	uxth	r2, r3
 80164be:	6a3b      	ldr	r3, [r7, #32]
 80164c0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	791a      	ldrb	r2, [r3, #4]
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80164ca:	68bb      	ldr	r3, [r7, #8]
 80164cc:	795a      	ldrb	r2, [r3, #5]
 80164ce:	6a3b      	ldr	r3, [r7, #32]
 80164d0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	799a      	ldrb	r2, [r3, #6]
 80164d6:	6a3b      	ldr	r3, [r7, #32]
 80164d8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	79da      	ldrb	r2, [r3, #7]
 80164de:	6a3b      	ldr	r3, [r7, #32]
 80164e0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	7a1a      	ldrb	r2, [r3, #8]
 80164e6:	6a3b      	ldr	r3, [r7, #32]
 80164e8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80164ea:	6a3b      	ldr	r3, [r7, #32]
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	2b09      	cmp	r3, #9
 80164f0:	d002      	beq.n	80164f8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80164f2:	6a3b      	ldr	r3, [r7, #32]
 80164f4:	2209      	movs	r2, #9
 80164f6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80164f8:	88fb      	ldrh	r3, [r7, #6]
 80164fa:	2b09      	cmp	r3, #9
 80164fc:	f240 8099 	bls.w	8016632 <USBH_ParseCfgDesc+0x1de>
  {
    ptr = USB_LEN_CFG_DESC;
 8016500:	2309      	movs	r3, #9
 8016502:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8016504:	2300      	movs	r3, #0
 8016506:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016508:	e07d      	b.n	8016606 <USBH_ParseCfgDesc+0x1b2>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801650a:	f107 0316 	add.w	r3, r7, #22
 801650e:	4619      	mov	r1, r3
 8016510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016512:	f000 f9df 	bl	80168d4 <USBH_GetNextDesc>
 8016516:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8016518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651a:	785b      	ldrb	r3, [r3, #1]
 801651c:	2b04      	cmp	r3, #4
 801651e:	d172      	bne.n	8016606 <USBH_ParseCfgDesc+0x1b2>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8016520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	2b09      	cmp	r3, #9
 8016526:	d002      	beq.n	801652e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8016528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652a:	2209      	movs	r2, #9
 801652c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801652e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016532:	221a      	movs	r2, #26
 8016534:	fb02 f303 	mul.w	r3, r2, r3
 8016538:	3308      	adds	r3, #8
 801653a:	6a3a      	ldr	r2, [r7, #32]
 801653c:	4413      	add	r3, r2
 801653e:	3302      	adds	r3, #2
 8016540:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8016542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016544:	69f8      	ldr	r0, [r7, #28]
 8016546:	f000 f87a 	bl	801663e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801654a:	2300      	movs	r3, #0
 801654c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8016550:	2300      	movs	r3, #0
 8016552:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8016554:	e03f      	b.n	80165d6 <USBH_ParseCfgDesc+0x182>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8016556:	f107 0316 	add.w	r3, r7, #22
 801655a:	4619      	mov	r1, r3
 801655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801655e:	f000 f9b9 	bl	80168d4 <USBH_GetNextDesc>
 8016562:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016566:	785b      	ldrb	r3, [r3, #1]
 8016568:	2b05      	cmp	r3, #5
 801656a:	d134      	bne.n	80165d6 <USBH_ParseCfgDesc+0x182>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	795b      	ldrb	r3, [r3, #5]
 8016570:	2b01      	cmp	r3, #1
 8016572:	d10f      	bne.n	8016594 <USBH_ParseCfgDesc+0x140>
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	799b      	ldrb	r3, [r3, #6]
 8016578:	2b02      	cmp	r3, #2
 801657a:	d10b      	bne.n	8016594 <USBH_ParseCfgDesc+0x140>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	79db      	ldrb	r3, [r3, #7]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d10b      	bne.n	801659c <USBH_ParseCfgDesc+0x148>
 8016584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	2b09      	cmp	r3, #9
 801658a:	d007      	beq.n	801659c <USBH_ParseCfgDesc+0x148>
              {
                pdesc->bLength = 0x09U;
 801658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658e:	2209      	movs	r2, #9
 8016590:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8016592:	e003      	b.n	801659c <USBH_ParseCfgDesc+0x148>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8016594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016596:	2207      	movs	r2, #7
 8016598:	701a      	strb	r2, [r3, #0]
 801659a:	e000      	b.n	801659e <USBH_ParseCfgDesc+0x14a>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801659c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801659e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80165a6:	3201      	adds	r2, #1
 80165a8:	00d2      	lsls	r2, r2, #3
 80165aa:	211a      	movs	r1, #26
 80165ac:	fb01 f303 	mul.w	r3, r1, r3
 80165b0:	4413      	add	r3, r2
 80165b2:	3308      	adds	r3, #8
 80165b4:	6a3a      	ldr	r2, [r7, #32]
 80165b6:	4413      	add	r3, r2
 80165b8:	3304      	adds	r3, #4
 80165ba:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80165bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165be:	69b9      	ldr	r1, [r7, #24]
 80165c0:	68f8      	ldr	r0, [r7, #12]
 80165c2:	f000 f86b 	bl	801669c <USBH_ParseEPDesc>
 80165c6:	4603      	mov	r3, r0
 80165c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80165cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165d0:	3301      	adds	r3, #1
 80165d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80165d6:	69fb      	ldr	r3, [r7, #28]
 80165d8:	791b      	ldrb	r3, [r3, #4]
 80165da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80165de:	429a      	cmp	r2, r3
 80165e0:	d204      	bcs.n	80165ec <USBH_ParseCfgDesc+0x198>
 80165e2:	6a3b      	ldr	r3, [r7, #32]
 80165e4:	885a      	ldrh	r2, [r3, #2]
 80165e6:	8afb      	ldrh	r3, [r7, #22]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d8b4      	bhi.n	8016556 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80165ec:	69fb      	ldr	r3, [r7, #28]
 80165ee:	791b      	ldrb	r3, [r3, #4]
 80165f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d201      	bcs.n	80165fc <USBH_ParseCfgDesc+0x1a8>
        {
          return USBH_NOT_SUPPORTED;
 80165f8:	2303      	movs	r3, #3
 80165fa:	e01c      	b.n	8016636 <USBH_ParseCfgDesc+0x1e2>
        }

        if_ix++;
 80165fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016600:	3301      	adds	r3, #1
 8016602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8016606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801660a:	2b09      	cmp	r3, #9
 801660c:	d805      	bhi.n	801661a <USBH_ParseCfgDesc+0x1c6>
 801660e:	6a3b      	ldr	r3, [r7, #32]
 8016610:	885a      	ldrh	r2, [r3, #2]
 8016612:	8afb      	ldrh	r3, [r7, #22]
 8016614:	429a      	cmp	r2, r3
 8016616:	f63f af78 	bhi.w	801650a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801661a:	6a3b      	ldr	r3, [r7, #32]
 801661c:	791b      	ldrb	r3, [r3, #4]
 801661e:	2b0a      	cmp	r3, #10
 8016620:	bf28      	it	cs
 8016622:	230a      	movcs	r3, #10
 8016624:	b2db      	uxtb	r3, r3
 8016626:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801662a:	429a      	cmp	r2, r3
 801662c:	d201      	bcs.n	8016632 <USBH_ParseCfgDesc+0x1de>
    {
      return USBH_NOT_SUPPORTED;
 801662e:	2303      	movs	r3, #3
 8016630:	e001      	b.n	8016636 <USBH_ParseCfgDesc+0x1e2>
    }
  }

  return status;
 8016632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016636:	4618      	mov	r0, r3
 8016638:	3730      	adds	r7, #48	; 0x30
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801663e:	b480      	push	{r7}
 8016640:	b083      	sub	sp, #12
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
 8016646:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	781a      	ldrb	r2, [r3, #0]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	785a      	ldrb	r2, [r3, #1]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	789a      	ldrb	r2, [r3, #2]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	78da      	ldrb	r2, [r3, #3]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	791a      	ldrb	r2, [r3, #4]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	795a      	ldrb	r2, [r3, #5]
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	799a      	ldrb	r2, [r3, #6]
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	79da      	ldrb	r2, [r3, #7]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	7a1a      	ldrb	r2, [r3, #8]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	721a      	strb	r2, [r3, #8]
}
 8016690:	bf00      	nop
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 801669c:	b480      	push	{r7}
 801669e:	b087      	sub	sp, #28
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80166a8:	2300      	movs	r3, #0
 80166aa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	781a      	ldrb	r2, [r3, #0]
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	785a      	ldrb	r2, [r3, #1]
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	789a      	ldrb	r2, [r3, #2]
 80166c0:	68bb      	ldr	r3, [r7, #8]
 80166c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	78da      	ldrb	r2, [r3, #3]
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	3304      	adds	r3, #4
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	3305      	adds	r3, #5
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	b29b      	uxth	r3, r3
 80166dc:	021b      	lsls	r3, r3, #8
 80166de:	b29b      	uxth	r3, r3
 80166e0:	4313      	orrs	r3, r2
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	799a      	ldrb	r2, [r3, #6]
 80166ec:	68bb      	ldr	r3, [r7, #8]
 80166ee:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	889b      	ldrh	r3, [r3, #4]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d009      	beq.n	801670c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80166fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016700:	d804      	bhi.n	801670c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8016706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801670a:	d901      	bls.n	8016710 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 801670c:	2303      	movs	r3, #3
 801670e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016716:	2b00      	cmp	r3, #0
 8016718:	d136      	bne.n	8016788 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 801671a:	68bb      	ldr	r3, [r7, #8]
 801671c:	78db      	ldrb	r3, [r3, #3]
 801671e:	f003 0303 	and.w	r3, r3, #3
 8016722:	2b02      	cmp	r3, #2
 8016724:	d108      	bne.n	8016738 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	889b      	ldrh	r3, [r3, #4]
 801672a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801672e:	f240 8097 	bls.w	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016732:	2303      	movs	r3, #3
 8016734:	75fb      	strb	r3, [r7, #23]
 8016736:	e093      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	78db      	ldrb	r3, [r3, #3]
 801673c:	f003 0303 	and.w	r3, r3, #3
 8016740:	2b00      	cmp	r3, #0
 8016742:	d107      	bne.n	8016754 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	889b      	ldrh	r3, [r3, #4]
 8016748:	2b40      	cmp	r3, #64	; 0x40
 801674a:	f240 8089 	bls.w	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801674e:	2303      	movs	r3, #3
 8016750:	75fb      	strb	r3, [r7, #23]
 8016752:	e085      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016754:	68bb      	ldr	r3, [r7, #8]
 8016756:	78db      	ldrb	r3, [r3, #3]
 8016758:	f003 0303 	and.w	r3, r3, #3
 801675c:	2b01      	cmp	r3, #1
 801675e:	d005      	beq.n	801676c <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	78db      	ldrb	r3, [r3, #3]
 8016764:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8016768:	2b03      	cmp	r3, #3
 801676a:	d10a      	bne.n	8016782 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	799b      	ldrb	r3, [r3, #6]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d003      	beq.n	801677c <USBH_ParseEPDesc+0xe0>
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	799b      	ldrb	r3, [r3, #6]
 8016778:	2b10      	cmp	r3, #16
 801677a:	d970      	bls.n	801685e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801677c:	2303      	movs	r3, #3
 801677e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8016780:	e06d      	b.n	801685e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016782:	2303      	movs	r3, #3
 8016784:	75fb      	strb	r3, [r7, #23]
 8016786:	e06b      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801678e:	2b01      	cmp	r3, #1
 8016790:	d13c      	bne.n	801680c <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	78db      	ldrb	r3, [r3, #3]
 8016796:	f003 0303 	and.w	r3, r3, #3
 801679a:	2b02      	cmp	r3, #2
 801679c:	d005      	beq.n	80167aa <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	78db      	ldrb	r3, [r3, #3]
 80167a2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d106      	bne.n	80167b8 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80167aa:	68bb      	ldr	r3, [r7, #8]
 80167ac:	889b      	ldrh	r3, [r3, #4]
 80167ae:	2b40      	cmp	r3, #64	; 0x40
 80167b0:	d956      	bls.n	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80167b2:	2303      	movs	r3, #3
 80167b4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80167b6:	e053      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	78db      	ldrb	r3, [r3, #3]
 80167bc:	f003 0303 	and.w	r3, r3, #3
 80167c0:	2b01      	cmp	r3, #1
 80167c2:	d10e      	bne.n	80167e2 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	799b      	ldrb	r3, [r3, #6]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d007      	beq.n	80167dc <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80167d0:	2b10      	cmp	r3, #16
 80167d2:	d803      	bhi.n	80167dc <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80167d8:	2b40      	cmp	r3, #64	; 0x40
 80167da:	d941      	bls.n	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80167dc:	2303      	movs	r3, #3
 80167de:	75fb      	strb	r3, [r7, #23]
 80167e0:	e03e      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	78db      	ldrb	r3, [r3, #3]
 80167e6:	f003 0303 	and.w	r3, r3, #3
 80167ea:	2b03      	cmp	r3, #3
 80167ec:	d10b      	bne.n	8016806 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	799b      	ldrb	r3, [r3, #6]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d004      	beq.n	8016800 <USBH_ParseEPDesc+0x164>
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	889b      	ldrh	r3, [r3, #4]
 80167fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167fe:	d32f      	bcc.n	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8016800:	2303      	movs	r3, #3
 8016802:	75fb      	strb	r3, [r7, #23]
 8016804:	e02c      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016806:	2303      	movs	r3, #3
 8016808:	75fb      	strb	r3, [r7, #23]
 801680a:	e029      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016812:	2b02      	cmp	r3, #2
 8016814:	d120      	bne.n	8016858 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	78db      	ldrb	r3, [r3, #3]
 801681a:	f003 0303 	and.w	r3, r3, #3
 801681e:	2b00      	cmp	r3, #0
 8016820:	d106      	bne.n	8016830 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	889b      	ldrh	r3, [r3, #4]
 8016826:	2b08      	cmp	r3, #8
 8016828:	d01a      	beq.n	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801682a:	2303      	movs	r3, #3
 801682c:	75fb      	strb	r3, [r7, #23]
 801682e:	e017      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	78db      	ldrb	r3, [r3, #3]
 8016834:	f003 0303 	and.w	r3, r3, #3
 8016838:	2b03      	cmp	r3, #3
 801683a:	d10a      	bne.n	8016852 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	799b      	ldrb	r3, [r3, #6]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d003      	beq.n	801684c <USBH_ParseEPDesc+0x1b0>
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	889b      	ldrh	r3, [r3, #4]
 8016848:	2b08      	cmp	r3, #8
 801684a:	d909      	bls.n	8016860 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801684c:	2303      	movs	r3, #3
 801684e:	75fb      	strb	r3, [r7, #23]
 8016850:	e006      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8016852:	2303      	movs	r3, #3
 8016854:	75fb      	strb	r3, [r7, #23]
 8016856:	e003      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8016858:	2303      	movs	r3, #3
 801685a:	75fb      	strb	r3, [r7, #23]
 801685c:	e000      	b.n	8016860 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801685e:	bf00      	nop
  }

  return status;
 8016860:	7dfb      	ldrb	r3, [r7, #23]
}
 8016862:	4618      	mov	r0, r3
 8016864:	371c      	adds	r7, #28
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr

0801686e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801686e:	b480      	push	{r7}
 8016870:	b087      	sub	sp, #28
 8016872:	af00      	add	r7, sp, #0
 8016874:	60f8      	str	r0, [r7, #12]
 8016876:	60b9      	str	r1, [r7, #8]
 8016878:	4613      	mov	r3, r2
 801687a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	3301      	adds	r3, #1
 8016880:	781b      	ldrb	r3, [r3, #0]
 8016882:	2b03      	cmp	r3, #3
 8016884:	d120      	bne.n	80168c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	1e9a      	subs	r2, r3, #2
 801688c:	88fb      	ldrh	r3, [r7, #6]
 801688e:	4293      	cmp	r3, r2
 8016890:	bf28      	it	cs
 8016892:	4613      	movcs	r3, r2
 8016894:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	3302      	adds	r3, #2
 801689a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801689c:	2300      	movs	r3, #0
 801689e:	82fb      	strh	r3, [r7, #22]
 80168a0:	e00b      	b.n	80168ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80168a2:	8afb      	ldrh	r3, [r7, #22]
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	4413      	add	r3, r2
 80168a8:	781a      	ldrb	r2, [r3, #0]
 80168aa:	68bb      	ldr	r3, [r7, #8]
 80168ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	3301      	adds	r3, #1
 80168b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80168b4:	8afb      	ldrh	r3, [r7, #22]
 80168b6:	3302      	adds	r3, #2
 80168b8:	82fb      	strh	r3, [r7, #22]
 80168ba:	8afa      	ldrh	r2, [r7, #22]
 80168bc:	8abb      	ldrh	r3, [r7, #20]
 80168be:	429a      	cmp	r2, r3
 80168c0:	d3ef      	bcc.n	80168a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	2200      	movs	r2, #0
 80168c6:	701a      	strb	r2, [r3, #0]
  }
}
 80168c8:	bf00      	nop
 80168ca:	371c      	adds	r7, #28
 80168cc:	46bd      	mov	sp, r7
 80168ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d2:	4770      	bx	lr

080168d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80168d4:	b480      	push	{r7}
 80168d6:	b085      	sub	sp, #20
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	881a      	ldrh	r2, [r3, #0]
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	4413      	add	r3, r2
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	4413      	add	r3, r2
 80168fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80168fc:	68fb      	ldr	r3, [r7, #12]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3714      	adds	r7, #20
 8016902:	46bd      	mov	sp, r7
 8016904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016908:	4770      	bx	lr

0801690a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801690a:	b580      	push	{r7, lr}
 801690c:	b086      	sub	sp, #24
 801690e:	af00      	add	r7, sp, #0
 8016910:	60f8      	str	r0, [r7, #12]
 8016912:	60b9      	str	r1, [r7, #8]
 8016914:	4613      	mov	r3, r2
 8016916:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8016918:	2301      	movs	r3, #1
 801691a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	789b      	ldrb	r3, [r3, #2]
 8016920:	2b01      	cmp	r3, #1
 8016922:	d002      	beq.n	801692a <USBH_CtlReq+0x20>
 8016924:	2b02      	cmp	r3, #2
 8016926:	d00f      	beq.n	8016948 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8016928:	e027      	b.n	801697a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	68ba      	ldr	r2, [r7, #8]
 801692e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	88fa      	ldrh	r2, [r7, #6]
 8016934:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	2201      	movs	r2, #1
 801693a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2202      	movs	r2, #2
 8016940:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8016942:	2301      	movs	r3, #1
 8016944:	75fb      	strb	r3, [r7, #23]
      break;
 8016946:	e018      	b.n	801697a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8016948:	68f8      	ldr	r0, [r7, #12]
 801694a:	f000 f81b 	bl	8016984 <USBH_HandleControl>
 801694e:	4603      	mov	r3, r0
 8016950:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8016952:	7dfb      	ldrb	r3, [r7, #23]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <USBH_CtlReq+0x54>
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	2b03      	cmp	r3, #3
 801695c:	d106      	bne.n	801696c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2201      	movs	r2, #1
 8016962:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	2200      	movs	r2, #0
 8016968:	761a      	strb	r2, [r3, #24]
      break;
 801696a:	e005      	b.n	8016978 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801696c:	7dfb      	ldrb	r3, [r7, #23]
 801696e:	2b02      	cmp	r3, #2
 8016970:	d102      	bne.n	8016978 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2201      	movs	r2, #1
 8016976:	709a      	strb	r2, [r3, #2]
      break;
 8016978:	bf00      	nop
  }
  return status;
 801697a:	7dfb      	ldrb	r3, [r7, #23]
}
 801697c:	4618      	mov	r0, r3
 801697e:	3718      	adds	r7, #24
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b086      	sub	sp, #24
 8016988:	af02      	add	r7, sp, #8
 801698a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801698c:	2301      	movs	r3, #1
 801698e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8016990:	2300      	movs	r3, #0
 8016992:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	7e1b      	ldrb	r3, [r3, #24]
 8016998:	3b01      	subs	r3, #1
 801699a:	2b0a      	cmp	r3, #10
 801699c:	f200 8156 	bhi.w	8016c4c <USBH_HandleControl+0x2c8>
 80169a0:	a201      	add	r2, pc, #4	; (adr r2, 80169a8 <USBH_HandleControl+0x24>)
 80169a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169a6:	bf00      	nop
 80169a8:	080169d5 	.word	0x080169d5
 80169ac:	080169ef 	.word	0x080169ef
 80169b0:	08016a59 	.word	0x08016a59
 80169b4:	08016a7f 	.word	0x08016a7f
 80169b8:	08016ab7 	.word	0x08016ab7
 80169bc:	08016ae1 	.word	0x08016ae1
 80169c0:	08016b33 	.word	0x08016b33
 80169c4:	08016b55 	.word	0x08016b55
 80169c8:	08016b91 	.word	0x08016b91
 80169cc:	08016bb7 	.word	0x08016bb7
 80169d0:	08016bf5 	.word	0x08016bf5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f103 0110 	add.w	r1, r3, #16
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	795b      	ldrb	r3, [r3, #5]
 80169de:	461a      	mov	r2, r3
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f000 f943 	bl	8016c6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2202      	movs	r2, #2
 80169ea:	761a      	strb	r2, [r3, #24]
      break;
 80169ec:	e139      	b.n	8016c62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	795b      	ldrb	r3, [r3, #5]
 80169f2:	4619      	mov	r1, r3
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f7ed ff3d 	bl	8004874 <USBH_LL_GetURBState>
 80169fa:	4603      	mov	r3, r0
 80169fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80169fe:	7bbb      	ldrb	r3, [r7, #14]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d11e      	bne.n	8016a42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	7c1b      	ldrb	r3, [r3, #16]
 8016a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016a0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	8adb      	ldrh	r3, [r3, #22]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00a      	beq.n	8016a2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016a16:	7b7b      	ldrb	r3, [r7, #13]
 8016a18:	2b80      	cmp	r3, #128	; 0x80
 8016a1a:	d103      	bne.n	8016a24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2203      	movs	r2, #3
 8016a20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016a22:	e115      	b.n	8016c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2205      	movs	r2, #5
 8016a28:	761a      	strb	r2, [r3, #24]
      break;
 8016a2a:	e111      	b.n	8016c50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8016a2c:	7b7b      	ldrb	r3, [r7, #13]
 8016a2e:	2b80      	cmp	r3, #128	; 0x80
 8016a30:	d103      	bne.n	8016a3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2209      	movs	r2, #9
 8016a36:	761a      	strb	r2, [r3, #24]
      break;
 8016a38:	e10a      	b.n	8016c50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	2207      	movs	r2, #7
 8016a3e:	761a      	strb	r2, [r3, #24]
      break;
 8016a40:	e106      	b.n	8016c50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016a42:	7bbb      	ldrb	r3, [r7, #14]
 8016a44:	2b04      	cmp	r3, #4
 8016a46:	d003      	beq.n	8016a50 <USBH_HandleControl+0xcc>
 8016a48:	7bbb      	ldrb	r3, [r7, #14]
 8016a4a:	2b02      	cmp	r3, #2
 8016a4c:	f040 8100 	bne.w	8016c50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	220b      	movs	r2, #11
 8016a54:	761a      	strb	r2, [r3, #24]
      break;
 8016a56:	e0fb      	b.n	8016c50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6899      	ldr	r1, [r3, #8]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	899a      	ldrh	r2, [r3, #12]
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	791b      	ldrb	r3, [r3, #4]
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f000 f93a 	bl	8016cea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2204      	movs	r2, #4
 8016a7a:	761a      	strb	r2, [r3, #24]
      break;
 8016a7c:	e0f1      	b.n	8016c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	791b      	ldrb	r3, [r3, #4]
 8016a82:	4619      	mov	r1, r3
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f7ed fef5 	bl	8004874 <USBH_LL_GetURBState>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016a8e:	7bbb      	ldrb	r3, [r7, #14]
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d102      	bne.n	8016a9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2209      	movs	r2, #9
 8016a98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016a9a:	7bbb      	ldrb	r3, [r7, #14]
 8016a9c:	2b05      	cmp	r3, #5
 8016a9e:	d102      	bne.n	8016aa6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016aa0:	2303      	movs	r3, #3
 8016aa2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016aa4:	e0d6      	b.n	8016c54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8016aa6:	7bbb      	ldrb	r3, [r7, #14]
 8016aa8:	2b04      	cmp	r3, #4
 8016aaa:	f040 80d3 	bne.w	8016c54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	220b      	movs	r2, #11
 8016ab2:	761a      	strb	r2, [r3, #24]
      break;
 8016ab4:	e0ce      	b.n	8016c54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6899      	ldr	r1, [r3, #8]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	899a      	ldrh	r2, [r3, #12]
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	795b      	ldrb	r3, [r3, #5]
 8016ac2:	2001      	movs	r0, #1
 8016ac4:	9000      	str	r0, [sp, #0]
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 f8ea 	bl	8016ca0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016ad2:	b29a      	uxth	r2, r3
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	2206      	movs	r2, #6
 8016adc:	761a      	strb	r2, [r3, #24]
      break;
 8016ade:	e0c0      	b.n	8016c62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	795b      	ldrb	r3, [r3, #5]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7ed fec4 	bl	8004874 <USBH_LL_GetURBState>
 8016aec:	4603      	mov	r3, r0
 8016aee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016af0:	7bbb      	ldrb	r3, [r7, #14]
 8016af2:	2b01      	cmp	r3, #1
 8016af4:	d103      	bne.n	8016afe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2207      	movs	r2, #7
 8016afa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016afc:	e0ac      	b.n	8016c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8016afe:	7bbb      	ldrb	r3, [r7, #14]
 8016b00:	2b05      	cmp	r3, #5
 8016b02:	d105      	bne.n	8016b10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	220c      	movs	r2, #12
 8016b08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016b0a:	2303      	movs	r3, #3
 8016b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8016b0e:	e0a3      	b.n	8016c58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016b10:	7bbb      	ldrb	r3, [r7, #14]
 8016b12:	2b02      	cmp	r3, #2
 8016b14:	d103      	bne.n	8016b1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2205      	movs	r2, #5
 8016b1a:	761a      	strb	r2, [r3, #24]
      break;
 8016b1c:	e09c      	b.n	8016c58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8016b1e:	7bbb      	ldrb	r3, [r7, #14]
 8016b20:	2b04      	cmp	r3, #4
 8016b22:	f040 8099 	bne.w	8016c58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	220b      	movs	r2, #11
 8016b2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016b2c:	2302      	movs	r3, #2
 8016b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8016b30:	e092      	b.n	8016c58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	791b      	ldrb	r3, [r3, #4]
 8016b36:	2200      	movs	r2, #0
 8016b38:	2100      	movs	r1, #0
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f000 f8d5 	bl	8016cea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016b46:	b29a      	uxth	r2, r3
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2208      	movs	r2, #8
 8016b50:	761a      	strb	r2, [r3, #24]

      break;
 8016b52:	e086      	b.n	8016c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	791b      	ldrb	r3, [r3, #4]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f7ed fe8a 	bl	8004874 <USBH_LL_GetURBState>
 8016b60:	4603      	mov	r3, r0
 8016b62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016b64:	7bbb      	ldrb	r3, [r7, #14]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d105      	bne.n	8016b76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	220d      	movs	r2, #13
 8016b6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8016b70:	2300      	movs	r3, #0
 8016b72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016b74:	e072      	b.n	8016c5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8016b76:	7bbb      	ldrb	r3, [r7, #14]
 8016b78:	2b04      	cmp	r3, #4
 8016b7a:	d103      	bne.n	8016b84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	220b      	movs	r2, #11
 8016b80:	761a      	strb	r2, [r3, #24]
      break;
 8016b82:	e06b      	b.n	8016c5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8016b84:	7bbb      	ldrb	r3, [r7, #14]
 8016b86:	2b05      	cmp	r3, #5
 8016b88:	d168      	bne.n	8016c5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8016b8a:	2303      	movs	r3, #3
 8016b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8016b8e:	e065      	b.n	8016c5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	795b      	ldrb	r3, [r3, #5]
 8016b94:	2201      	movs	r2, #1
 8016b96:	9200      	str	r2, [sp, #0]
 8016b98:	2200      	movs	r2, #0
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f000 f87f 	bl	8016ca0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	220a      	movs	r2, #10
 8016bb2:	761a      	strb	r2, [r3, #24]
      break;
 8016bb4:	e055      	b.n	8016c62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	795b      	ldrb	r3, [r3, #5]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f7ed fe59 	bl	8004874 <USBH_LL_GetURBState>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016bc6:	7bbb      	ldrb	r3, [r7, #14]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d105      	bne.n	8016bd8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	220d      	movs	r2, #13
 8016bd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016bd6:	e043      	b.n	8016c60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016bd8:	7bbb      	ldrb	r3, [r7, #14]
 8016bda:	2b02      	cmp	r3, #2
 8016bdc:	d103      	bne.n	8016be6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2209      	movs	r2, #9
 8016be2:	761a      	strb	r2, [r3, #24]
      break;
 8016be4:	e03c      	b.n	8016c60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8016be6:	7bbb      	ldrb	r3, [r7, #14]
 8016be8:	2b04      	cmp	r3, #4
 8016bea:	d139      	bne.n	8016c60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	220b      	movs	r2, #11
 8016bf0:	761a      	strb	r2, [r3, #24]
      break;
 8016bf2:	e035      	b.n	8016c60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	7e5b      	ldrb	r3, [r3, #25]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	b2da      	uxtb	r2, r3
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	765a      	strb	r2, [r3, #25]
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	7e5b      	ldrb	r3, [r3, #25]
 8016c04:	2b02      	cmp	r3, #2
 8016c06:	d806      	bhi.n	8016c16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	2201      	movs	r2, #1
 8016c12:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8016c14:	e025      	b.n	8016c62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8016c1c:	2106      	movs	r1, #6
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2200      	movs	r2, #0
 8016c26:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	795b      	ldrb	r3, [r3, #5]
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f000 f90d 	bl	8016e4e <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	791b      	ldrb	r3, [r3, #4]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f000 f907 	bl	8016e4e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2200      	movs	r2, #0
 8016c44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016c46:	2302      	movs	r3, #2
 8016c48:	73fb      	strb	r3, [r7, #15]
      break;
 8016c4a:	e00a      	b.n	8016c62 <USBH_HandleControl+0x2de>

    default:
      break;
 8016c4c:	bf00      	nop
 8016c4e:	e008      	b.n	8016c62 <USBH_HandleControl+0x2de>
      break;
 8016c50:	bf00      	nop
 8016c52:	e006      	b.n	8016c62 <USBH_HandleControl+0x2de>
      break;
 8016c54:	bf00      	nop
 8016c56:	e004      	b.n	8016c62 <USBH_HandleControl+0x2de>
      break;
 8016c58:	bf00      	nop
 8016c5a:	e002      	b.n	8016c62 <USBH_HandleControl+0x2de>
      break;
 8016c5c:	bf00      	nop
 8016c5e:	e000      	b.n	8016c62 <USBH_HandleControl+0x2de>
      break;
 8016c60:	bf00      	nop
  }

  return status;
 8016c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3710      	adds	r7, #16
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b088      	sub	sp, #32
 8016c70:	af04      	add	r7, sp, #16
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	4613      	mov	r3, r2
 8016c78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016c7a:	79f9      	ldrb	r1, [r7, #7]
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	9303      	str	r3, [sp, #12]
 8016c80:	2308      	movs	r3, #8
 8016c82:	9302      	str	r3, [sp, #8]
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	9301      	str	r3, [sp, #4]
 8016c88:	2300      	movs	r3, #0
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	2200      	movs	r2, #0
 8016c90:	68f8      	ldr	r0, [r7, #12]
 8016c92:	f7ed fdbe 	bl	8004812 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3710      	adds	r7, #16
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b088      	sub	sp, #32
 8016ca4:	af04      	add	r7, sp, #16
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	4611      	mov	r1, r2
 8016cac:	461a      	mov	r2, r3
 8016cae:	460b      	mov	r3, r1
 8016cb0:	80fb      	strh	r3, [r7, #6]
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016cc4:	7979      	ldrb	r1, [r7, #5]
 8016cc6:	7e3b      	ldrb	r3, [r7, #24]
 8016cc8:	9303      	str	r3, [sp, #12]
 8016cca:	88fb      	ldrh	r3, [r7, #6]
 8016ccc:	9302      	str	r3, [sp, #8]
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	9301      	str	r3, [sp, #4]
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	9300      	str	r3, [sp, #0]
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	2200      	movs	r2, #0
 8016cda:	68f8      	ldr	r0, [r7, #12]
 8016cdc:	f7ed fd99 	bl	8004812 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8016ce0:	2300      	movs	r3, #0
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}

08016cea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8016cea:	b580      	push	{r7, lr}
 8016cec:	b088      	sub	sp, #32
 8016cee:	af04      	add	r7, sp, #16
 8016cf0:	60f8      	str	r0, [r7, #12]
 8016cf2:	60b9      	str	r1, [r7, #8]
 8016cf4:	4611      	mov	r1, r2
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	80fb      	strh	r3, [r7, #6]
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016d00:	7979      	ldrb	r1, [r7, #5]
 8016d02:	2300      	movs	r3, #0
 8016d04:	9303      	str	r3, [sp, #12]
 8016d06:	88fb      	ldrh	r3, [r7, #6]
 8016d08:	9302      	str	r3, [sp, #8]
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	9301      	str	r3, [sp, #4]
 8016d0e:	2301      	movs	r3, #1
 8016d10:	9300      	str	r3, [sp, #0]
 8016d12:	2300      	movs	r3, #0
 8016d14:	2201      	movs	r2, #1
 8016d16:	68f8      	ldr	r0, [r7, #12]
 8016d18:	f7ed fd7b 	bl	8004812 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8016d1c:	2300      	movs	r3, #0

}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3710      	adds	r7, #16
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}

08016d26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016d26:	b580      	push	{r7, lr}
 8016d28:	b088      	sub	sp, #32
 8016d2a:	af04      	add	r7, sp, #16
 8016d2c:	60f8      	str	r0, [r7, #12]
 8016d2e:	60b9      	str	r1, [r7, #8]
 8016d30:	4611      	mov	r1, r2
 8016d32:	461a      	mov	r2, r3
 8016d34:	460b      	mov	r3, r1
 8016d36:	80fb      	strh	r3, [r7, #6]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d001      	beq.n	8016d4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016d46:	2300      	movs	r3, #0
 8016d48:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016d4a:	7979      	ldrb	r1, [r7, #5]
 8016d4c:	7e3b      	ldrb	r3, [r7, #24]
 8016d4e:	9303      	str	r3, [sp, #12]
 8016d50:	88fb      	ldrh	r3, [r7, #6]
 8016d52:	9302      	str	r3, [sp, #8]
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	9301      	str	r3, [sp, #4]
 8016d58:	2301      	movs	r3, #1
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	2302      	movs	r3, #2
 8016d5e:	2200      	movs	r2, #0
 8016d60:	68f8      	ldr	r0, [r7, #12]
 8016d62:	f7ed fd56 	bl	8004812 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3710      	adds	r7, #16
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}

08016d70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b088      	sub	sp, #32
 8016d74:	af04      	add	r7, sp, #16
 8016d76:	60f8      	str	r0, [r7, #12]
 8016d78:	60b9      	str	r1, [r7, #8]
 8016d7a:	4611      	mov	r1, r2
 8016d7c:	461a      	mov	r2, r3
 8016d7e:	460b      	mov	r3, r1
 8016d80:	80fb      	strh	r3, [r7, #6]
 8016d82:	4613      	mov	r3, r2
 8016d84:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8016d86:	7979      	ldrb	r1, [r7, #5]
 8016d88:	2300      	movs	r3, #0
 8016d8a:	9303      	str	r3, [sp, #12]
 8016d8c:	88fb      	ldrh	r3, [r7, #6]
 8016d8e:	9302      	str	r3, [sp, #8]
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	9301      	str	r3, [sp, #4]
 8016d94:	2301      	movs	r3, #1
 8016d96:	9300      	str	r3, [sp, #0]
 8016d98:	2302      	movs	r3, #2
 8016d9a:	2201      	movs	r2, #1
 8016d9c:	68f8      	ldr	r0, [r7, #12]
 8016d9e:	f7ed fd38 	bl	8004812 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8016da2:	2300      	movs	r3, #0
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3710      	adds	r7, #16
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}

08016dac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b086      	sub	sp, #24
 8016db0:	af04      	add	r7, sp, #16
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	4608      	mov	r0, r1
 8016db6:	4611      	mov	r1, r2
 8016db8:	461a      	mov	r2, r3
 8016dba:	4603      	mov	r3, r0
 8016dbc:	70fb      	strb	r3, [r7, #3]
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	70bb      	strb	r3, [r7, #2]
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8016dc6:	7878      	ldrb	r0, [r7, #1]
 8016dc8:	78ba      	ldrb	r2, [r7, #2]
 8016dca:	78f9      	ldrb	r1, [r7, #3]
 8016dcc:	8b3b      	ldrh	r3, [r7, #24]
 8016dce:	9302      	str	r3, [sp, #8]
 8016dd0:	7d3b      	ldrb	r3, [r7, #20]
 8016dd2:	9301      	str	r3, [sp, #4]
 8016dd4:	7c3b      	ldrb	r3, [r7, #16]
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	4603      	mov	r3, r0
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f7ed fccb 	bl	8004776 <USBH_LL_OpenPipe>

  return USBH_OK;
 8016de0:	2300      	movs	r3, #0
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3708      	adds	r7, #8
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}

08016dea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8016dea:	b580      	push	{r7, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	af00      	add	r7, sp, #0
 8016df0:	6078      	str	r0, [r7, #4]
 8016df2:	460b      	mov	r3, r1
 8016df4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8016df6:	78fb      	ldrb	r3, [r7, #3]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f7ed fcea 	bl	80047d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8016e00:	2300      	movs	r3, #0
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3708      	adds	r7, #8
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b084      	sub	sp, #16
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
 8016e12:	460b      	mov	r3, r1
 8016e14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 f839 	bl	8016e8e <USBH_GetFreePipe>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8016e20:	89fb      	ldrh	r3, [r7, #14]
 8016e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e26:	4293      	cmp	r3, r2
 8016e28:	d00b      	beq.n	8016e42 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8016e2a:	78fa      	ldrb	r2, [r7, #3]
 8016e2c:	89fb      	ldrh	r3, [r7, #14]
 8016e2e:	f003 030f 	and.w	r3, r3, #15
 8016e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016e36:	6879      	ldr	r1, [r7, #4]
 8016e38:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016e3c:	009b      	lsls	r3, r3, #2
 8016e3e:	440b      	add	r3, r1
 8016e40:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8016e42:	89fb      	ldrh	r3, [r7, #14]
 8016e44:	b2db      	uxtb	r3, r3
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3710      	adds	r7, #16
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016e4e:	b480      	push	{r7}
 8016e50:	b083      	sub	sp, #12
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	6078      	str	r0, [r7, #4]
 8016e56:	460b      	mov	r3, r1
 8016e58:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8016e5a:	78fb      	ldrb	r3, [r7, #3]
 8016e5c:	2b0f      	cmp	r3, #15
 8016e5e:	d80f      	bhi.n	8016e80 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016e60:	78fb      	ldrb	r3, [r7, #3]
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	4413      	add	r3, r2
 8016e6c:	685a      	ldr	r2, [r3, #4]
 8016e6e:	78fb      	ldrb	r3, [r7, #3]
 8016e70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	440b      	add	r3, r1
 8016e7e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b085      	sub	sp, #20
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016e96:	2300      	movs	r3, #0
 8016e98:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	73fb      	strb	r3, [r7, #15]
 8016e9e:	e010      	b.n	8016ec2 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	687a      	ldr	r2, [r7, #4]
 8016ea4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	4413      	add	r3, r2
 8016eac:	685b      	ldr	r3, [r3, #4]
 8016eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d102      	bne.n	8016ebc <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8016eb6:	7bfb      	ldrb	r3, [r7, #15]
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	e007      	b.n	8016ecc <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8016ebc:	7bfb      	ldrb	r3, [r7, #15]
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	73fb      	strb	r3, [r7, #15]
 8016ec2:	7bfb      	ldrb	r3, [r7, #15]
 8016ec4:	2b0f      	cmp	r3, #15
 8016ec6:	d9eb      	bls.n	8016ea0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8016ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3714      	adds	r7, #20
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr

08016ed8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016ed8:	b480      	push	{r7}
 8016eda:	b087      	sub	sp, #28
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	60f8      	str	r0, [r7, #12]
 8016ee0:	60b9      	str	r1, [r7, #8]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016ee6:	2301      	movs	r3, #1
 8016ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016eea:	2300      	movs	r3, #0
 8016eec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016eee:	4b1f      	ldr	r3, [pc, #124]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016ef0:	7a5b      	ldrb	r3, [r3, #9]
 8016ef2:	b2db      	uxtb	r3, r3
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d131      	bne.n	8016f5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016ef8:	4b1c      	ldr	r3, [pc, #112]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016efa:	7a5b      	ldrb	r3, [r3, #9]
 8016efc:	b2db      	uxtb	r3, r3
 8016efe:	461a      	mov	r2, r3
 8016f00:	4b1a      	ldr	r3, [pc, #104]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f02:	2100      	movs	r1, #0
 8016f04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016f06:	4b19      	ldr	r3, [pc, #100]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f08:	7a5b      	ldrb	r3, [r3, #9]
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	4a17      	ldr	r2, [pc, #92]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	4413      	add	r3, r2
 8016f12:	68fa      	ldr	r2, [r7, #12]
 8016f14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016f16:	4b15      	ldr	r3, [pc, #84]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f18:	7a5b      	ldrb	r3, [r3, #9]
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	4b13      	ldr	r3, [pc, #76]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f20:	4413      	add	r3, r2
 8016f22:	79fa      	ldrb	r2, [r7, #7]
 8016f24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016f26:	4b11      	ldr	r3, [pc, #68]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f28:	7a5b      	ldrb	r3, [r3, #9]
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	1c5a      	adds	r2, r3, #1
 8016f2e:	b2d1      	uxtb	r1, r2
 8016f30:	4a0e      	ldr	r2, [pc, #56]	; (8016f6c <FATFS_LinkDriverEx+0x94>)
 8016f32:	7251      	strb	r1, [r2, #9]
 8016f34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016f36:	7dbb      	ldrb	r3, [r7, #22]
 8016f38:	3330      	adds	r3, #48	; 0x30
 8016f3a:	b2da      	uxtb	r2, r3
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	3301      	adds	r3, #1
 8016f44:	223a      	movs	r2, #58	; 0x3a
 8016f46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	3302      	adds	r3, #2
 8016f4c:	222f      	movs	r2, #47	; 0x2f
 8016f4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	3303      	adds	r3, #3
 8016f54:	2200      	movs	r2, #0
 8016f56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016f58:	2300      	movs	r3, #0
 8016f5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	371c      	adds	r7, #28
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	20001fac 	.word	0x20001fac

08016f70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
 8016f78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	6839      	ldr	r1, [r7, #0]
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7ff ffaa 	bl	8016ed8 <FATFS_LinkDriverEx>
 8016f84:	4603      	mov	r3, r0
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}
	...

08016f90 <malloc>:
 8016f90:	4b02      	ldr	r3, [pc, #8]	; (8016f9c <malloc+0xc>)
 8016f92:	4601      	mov	r1, r0
 8016f94:	6818      	ldr	r0, [r3, #0]
 8016f96:	f000 b82b 	b.w	8016ff0 <_malloc_r>
 8016f9a:	bf00      	nop
 8016f9c:	20000088 	.word	0x20000088

08016fa0 <free>:
 8016fa0:	4b02      	ldr	r3, [pc, #8]	; (8016fac <free+0xc>)
 8016fa2:	4601      	mov	r1, r0
 8016fa4:	6818      	ldr	r0, [r3, #0]
 8016fa6:	f000 b8f3 	b.w	8017190 <_free_r>
 8016faa:	bf00      	nop
 8016fac:	20000088 	.word	0x20000088

08016fb0 <sbrk_aligned>:
 8016fb0:	b570      	push	{r4, r5, r6, lr}
 8016fb2:	4e0e      	ldr	r6, [pc, #56]	; (8016fec <sbrk_aligned+0x3c>)
 8016fb4:	460c      	mov	r4, r1
 8016fb6:	6831      	ldr	r1, [r6, #0]
 8016fb8:	4605      	mov	r5, r0
 8016fba:	b911      	cbnz	r1, 8016fc2 <sbrk_aligned+0x12>
 8016fbc:	f000 f8ac 	bl	8017118 <_sbrk_r>
 8016fc0:	6030      	str	r0, [r6, #0]
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f000 f8a7 	bl	8017118 <_sbrk_r>
 8016fca:	1c43      	adds	r3, r0, #1
 8016fcc:	d00a      	beq.n	8016fe4 <sbrk_aligned+0x34>
 8016fce:	1cc4      	adds	r4, r0, #3
 8016fd0:	f024 0403 	bic.w	r4, r4, #3
 8016fd4:	42a0      	cmp	r0, r4
 8016fd6:	d007      	beq.n	8016fe8 <sbrk_aligned+0x38>
 8016fd8:	1a21      	subs	r1, r4, r0
 8016fda:	4628      	mov	r0, r5
 8016fdc:	f000 f89c 	bl	8017118 <_sbrk_r>
 8016fe0:	3001      	adds	r0, #1
 8016fe2:	d101      	bne.n	8016fe8 <sbrk_aligned+0x38>
 8016fe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016fe8:	4620      	mov	r0, r4
 8016fea:	bd70      	pop	{r4, r5, r6, pc}
 8016fec:	20001fbc 	.word	0x20001fbc

08016ff0 <_malloc_r>:
 8016ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ff4:	1ccd      	adds	r5, r1, #3
 8016ff6:	f025 0503 	bic.w	r5, r5, #3
 8016ffa:	3508      	adds	r5, #8
 8016ffc:	2d0c      	cmp	r5, #12
 8016ffe:	bf38      	it	cc
 8017000:	250c      	movcc	r5, #12
 8017002:	2d00      	cmp	r5, #0
 8017004:	4607      	mov	r7, r0
 8017006:	db01      	blt.n	801700c <_malloc_r+0x1c>
 8017008:	42a9      	cmp	r1, r5
 801700a:	d905      	bls.n	8017018 <_malloc_r+0x28>
 801700c:	230c      	movs	r3, #12
 801700e:	603b      	str	r3, [r7, #0]
 8017010:	2600      	movs	r6, #0
 8017012:	4630      	mov	r0, r6
 8017014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80170ec <_malloc_r+0xfc>
 801701c:	f000 f868 	bl	80170f0 <__malloc_lock>
 8017020:	f8d8 3000 	ldr.w	r3, [r8]
 8017024:	461c      	mov	r4, r3
 8017026:	bb5c      	cbnz	r4, 8017080 <_malloc_r+0x90>
 8017028:	4629      	mov	r1, r5
 801702a:	4638      	mov	r0, r7
 801702c:	f7ff ffc0 	bl	8016fb0 <sbrk_aligned>
 8017030:	1c43      	adds	r3, r0, #1
 8017032:	4604      	mov	r4, r0
 8017034:	d155      	bne.n	80170e2 <_malloc_r+0xf2>
 8017036:	f8d8 4000 	ldr.w	r4, [r8]
 801703a:	4626      	mov	r6, r4
 801703c:	2e00      	cmp	r6, #0
 801703e:	d145      	bne.n	80170cc <_malloc_r+0xdc>
 8017040:	2c00      	cmp	r4, #0
 8017042:	d048      	beq.n	80170d6 <_malloc_r+0xe6>
 8017044:	6823      	ldr	r3, [r4, #0]
 8017046:	4631      	mov	r1, r6
 8017048:	4638      	mov	r0, r7
 801704a:	eb04 0903 	add.w	r9, r4, r3
 801704e:	f000 f863 	bl	8017118 <_sbrk_r>
 8017052:	4581      	cmp	r9, r0
 8017054:	d13f      	bne.n	80170d6 <_malloc_r+0xe6>
 8017056:	6821      	ldr	r1, [r4, #0]
 8017058:	1a6d      	subs	r5, r5, r1
 801705a:	4629      	mov	r1, r5
 801705c:	4638      	mov	r0, r7
 801705e:	f7ff ffa7 	bl	8016fb0 <sbrk_aligned>
 8017062:	3001      	adds	r0, #1
 8017064:	d037      	beq.n	80170d6 <_malloc_r+0xe6>
 8017066:	6823      	ldr	r3, [r4, #0]
 8017068:	442b      	add	r3, r5
 801706a:	6023      	str	r3, [r4, #0]
 801706c:	f8d8 3000 	ldr.w	r3, [r8]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d038      	beq.n	80170e6 <_malloc_r+0xf6>
 8017074:	685a      	ldr	r2, [r3, #4]
 8017076:	42a2      	cmp	r2, r4
 8017078:	d12b      	bne.n	80170d2 <_malloc_r+0xe2>
 801707a:	2200      	movs	r2, #0
 801707c:	605a      	str	r2, [r3, #4]
 801707e:	e00f      	b.n	80170a0 <_malloc_r+0xb0>
 8017080:	6822      	ldr	r2, [r4, #0]
 8017082:	1b52      	subs	r2, r2, r5
 8017084:	d41f      	bmi.n	80170c6 <_malloc_r+0xd6>
 8017086:	2a0b      	cmp	r2, #11
 8017088:	d917      	bls.n	80170ba <_malloc_r+0xca>
 801708a:	1961      	adds	r1, r4, r5
 801708c:	42a3      	cmp	r3, r4
 801708e:	6025      	str	r5, [r4, #0]
 8017090:	bf18      	it	ne
 8017092:	6059      	strne	r1, [r3, #4]
 8017094:	6863      	ldr	r3, [r4, #4]
 8017096:	bf08      	it	eq
 8017098:	f8c8 1000 	streq.w	r1, [r8]
 801709c:	5162      	str	r2, [r4, r5]
 801709e:	604b      	str	r3, [r1, #4]
 80170a0:	4638      	mov	r0, r7
 80170a2:	f104 060b 	add.w	r6, r4, #11
 80170a6:	f000 f829 	bl	80170fc <__malloc_unlock>
 80170aa:	f026 0607 	bic.w	r6, r6, #7
 80170ae:	1d23      	adds	r3, r4, #4
 80170b0:	1af2      	subs	r2, r6, r3
 80170b2:	d0ae      	beq.n	8017012 <_malloc_r+0x22>
 80170b4:	1b9b      	subs	r3, r3, r6
 80170b6:	50a3      	str	r3, [r4, r2]
 80170b8:	e7ab      	b.n	8017012 <_malloc_r+0x22>
 80170ba:	42a3      	cmp	r3, r4
 80170bc:	6862      	ldr	r2, [r4, #4]
 80170be:	d1dd      	bne.n	801707c <_malloc_r+0x8c>
 80170c0:	f8c8 2000 	str.w	r2, [r8]
 80170c4:	e7ec      	b.n	80170a0 <_malloc_r+0xb0>
 80170c6:	4623      	mov	r3, r4
 80170c8:	6864      	ldr	r4, [r4, #4]
 80170ca:	e7ac      	b.n	8017026 <_malloc_r+0x36>
 80170cc:	4634      	mov	r4, r6
 80170ce:	6876      	ldr	r6, [r6, #4]
 80170d0:	e7b4      	b.n	801703c <_malloc_r+0x4c>
 80170d2:	4613      	mov	r3, r2
 80170d4:	e7cc      	b.n	8017070 <_malloc_r+0x80>
 80170d6:	230c      	movs	r3, #12
 80170d8:	603b      	str	r3, [r7, #0]
 80170da:	4638      	mov	r0, r7
 80170dc:	f000 f80e 	bl	80170fc <__malloc_unlock>
 80170e0:	e797      	b.n	8017012 <_malloc_r+0x22>
 80170e2:	6025      	str	r5, [r4, #0]
 80170e4:	e7dc      	b.n	80170a0 <_malloc_r+0xb0>
 80170e6:	605b      	str	r3, [r3, #4]
 80170e8:	deff      	udf	#255	; 0xff
 80170ea:	bf00      	nop
 80170ec:	20001fb8 	.word	0x20001fb8

080170f0 <__malloc_lock>:
 80170f0:	4801      	ldr	r0, [pc, #4]	; (80170f8 <__malloc_lock+0x8>)
 80170f2:	f000 b84b 	b.w	801718c <__retarget_lock_acquire_recursive>
 80170f6:	bf00      	nop
 80170f8:	200020f8 	.word	0x200020f8

080170fc <__malloc_unlock>:
 80170fc:	4801      	ldr	r0, [pc, #4]	; (8017104 <__malloc_unlock+0x8>)
 80170fe:	f000 b846 	b.w	801718e <__retarget_lock_release_recursive>
 8017102:	bf00      	nop
 8017104:	200020f8 	.word	0x200020f8

08017108 <memset>:
 8017108:	4402      	add	r2, r0
 801710a:	4603      	mov	r3, r0
 801710c:	4293      	cmp	r3, r2
 801710e:	d100      	bne.n	8017112 <memset+0xa>
 8017110:	4770      	bx	lr
 8017112:	f803 1b01 	strb.w	r1, [r3], #1
 8017116:	e7f9      	b.n	801710c <memset+0x4>

08017118 <_sbrk_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4d06      	ldr	r5, [pc, #24]	; (8017134 <_sbrk_r+0x1c>)
 801711c:	2300      	movs	r3, #0
 801711e:	4604      	mov	r4, r0
 8017120:	4608      	mov	r0, r1
 8017122:	602b      	str	r3, [r5, #0]
 8017124:	f7ec f9aa 	bl	800347c <_sbrk>
 8017128:	1c43      	adds	r3, r0, #1
 801712a:	d102      	bne.n	8017132 <_sbrk_r+0x1a>
 801712c:	682b      	ldr	r3, [r5, #0]
 801712e:	b103      	cbz	r3, 8017132 <_sbrk_r+0x1a>
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	bd38      	pop	{r3, r4, r5, pc}
 8017134:	200020fc 	.word	0x200020fc

08017138 <__errno>:
 8017138:	4b01      	ldr	r3, [pc, #4]	; (8017140 <__errno+0x8>)
 801713a:	6818      	ldr	r0, [r3, #0]
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	20000088 	.word	0x20000088

08017144 <__libc_init_array>:
 8017144:	b570      	push	{r4, r5, r6, lr}
 8017146:	4d0d      	ldr	r5, [pc, #52]	; (801717c <__libc_init_array+0x38>)
 8017148:	4c0d      	ldr	r4, [pc, #52]	; (8017180 <__libc_init_array+0x3c>)
 801714a:	1b64      	subs	r4, r4, r5
 801714c:	10a4      	asrs	r4, r4, #2
 801714e:	2600      	movs	r6, #0
 8017150:	42a6      	cmp	r6, r4
 8017152:	d109      	bne.n	8017168 <__libc_init_array+0x24>
 8017154:	4d0b      	ldr	r5, [pc, #44]	; (8017184 <__libc_init_array+0x40>)
 8017156:	4c0c      	ldr	r4, [pc, #48]	; (8017188 <__libc_init_array+0x44>)
 8017158:	f000 f866 	bl	8017228 <_init>
 801715c:	1b64      	subs	r4, r4, r5
 801715e:	10a4      	asrs	r4, r4, #2
 8017160:	2600      	movs	r6, #0
 8017162:	42a6      	cmp	r6, r4
 8017164:	d105      	bne.n	8017172 <__libc_init_array+0x2e>
 8017166:	bd70      	pop	{r4, r5, r6, pc}
 8017168:	f855 3b04 	ldr.w	r3, [r5], #4
 801716c:	4798      	blx	r3
 801716e:	3601      	adds	r6, #1
 8017170:	e7ee      	b.n	8017150 <__libc_init_array+0xc>
 8017172:	f855 3b04 	ldr.w	r3, [r5], #4
 8017176:	4798      	blx	r3
 8017178:	3601      	adds	r6, #1
 801717a:	e7f2      	b.n	8017162 <__libc_init_array+0x1e>
 801717c:	080192b0 	.word	0x080192b0
 8017180:	080192b0 	.word	0x080192b0
 8017184:	080192b0 	.word	0x080192b0
 8017188:	080192b4 	.word	0x080192b4

0801718c <__retarget_lock_acquire_recursive>:
 801718c:	4770      	bx	lr

0801718e <__retarget_lock_release_recursive>:
 801718e:	4770      	bx	lr

08017190 <_free_r>:
 8017190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017192:	2900      	cmp	r1, #0
 8017194:	d044      	beq.n	8017220 <_free_r+0x90>
 8017196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801719a:	9001      	str	r0, [sp, #4]
 801719c:	2b00      	cmp	r3, #0
 801719e:	f1a1 0404 	sub.w	r4, r1, #4
 80171a2:	bfb8      	it	lt
 80171a4:	18e4      	addlt	r4, r4, r3
 80171a6:	f7ff ffa3 	bl	80170f0 <__malloc_lock>
 80171aa:	4a1e      	ldr	r2, [pc, #120]	; (8017224 <_free_r+0x94>)
 80171ac:	9801      	ldr	r0, [sp, #4]
 80171ae:	6813      	ldr	r3, [r2, #0]
 80171b0:	b933      	cbnz	r3, 80171c0 <_free_r+0x30>
 80171b2:	6063      	str	r3, [r4, #4]
 80171b4:	6014      	str	r4, [r2, #0]
 80171b6:	b003      	add	sp, #12
 80171b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171bc:	f7ff bf9e 	b.w	80170fc <__malloc_unlock>
 80171c0:	42a3      	cmp	r3, r4
 80171c2:	d908      	bls.n	80171d6 <_free_r+0x46>
 80171c4:	6825      	ldr	r5, [r4, #0]
 80171c6:	1961      	adds	r1, r4, r5
 80171c8:	428b      	cmp	r3, r1
 80171ca:	bf01      	itttt	eq
 80171cc:	6819      	ldreq	r1, [r3, #0]
 80171ce:	685b      	ldreq	r3, [r3, #4]
 80171d0:	1949      	addeq	r1, r1, r5
 80171d2:	6021      	streq	r1, [r4, #0]
 80171d4:	e7ed      	b.n	80171b2 <_free_r+0x22>
 80171d6:	461a      	mov	r2, r3
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	b10b      	cbz	r3, 80171e0 <_free_r+0x50>
 80171dc:	42a3      	cmp	r3, r4
 80171de:	d9fa      	bls.n	80171d6 <_free_r+0x46>
 80171e0:	6811      	ldr	r1, [r2, #0]
 80171e2:	1855      	adds	r5, r2, r1
 80171e4:	42a5      	cmp	r5, r4
 80171e6:	d10b      	bne.n	8017200 <_free_r+0x70>
 80171e8:	6824      	ldr	r4, [r4, #0]
 80171ea:	4421      	add	r1, r4
 80171ec:	1854      	adds	r4, r2, r1
 80171ee:	42a3      	cmp	r3, r4
 80171f0:	6011      	str	r1, [r2, #0]
 80171f2:	d1e0      	bne.n	80171b6 <_free_r+0x26>
 80171f4:	681c      	ldr	r4, [r3, #0]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	6053      	str	r3, [r2, #4]
 80171fa:	440c      	add	r4, r1
 80171fc:	6014      	str	r4, [r2, #0]
 80171fe:	e7da      	b.n	80171b6 <_free_r+0x26>
 8017200:	d902      	bls.n	8017208 <_free_r+0x78>
 8017202:	230c      	movs	r3, #12
 8017204:	6003      	str	r3, [r0, #0]
 8017206:	e7d6      	b.n	80171b6 <_free_r+0x26>
 8017208:	6825      	ldr	r5, [r4, #0]
 801720a:	1961      	adds	r1, r4, r5
 801720c:	428b      	cmp	r3, r1
 801720e:	bf04      	itt	eq
 8017210:	6819      	ldreq	r1, [r3, #0]
 8017212:	685b      	ldreq	r3, [r3, #4]
 8017214:	6063      	str	r3, [r4, #4]
 8017216:	bf04      	itt	eq
 8017218:	1949      	addeq	r1, r1, r5
 801721a:	6021      	streq	r1, [r4, #0]
 801721c:	6054      	str	r4, [r2, #4]
 801721e:	e7ca      	b.n	80171b6 <_free_r+0x26>
 8017220:	b003      	add	sp, #12
 8017222:	bd30      	pop	{r4, r5, pc}
 8017224:	20001fb8 	.word	0x20001fb8

08017228 <_init>:
 8017228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801722a:	bf00      	nop
 801722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801722e:	bc08      	pop	{r3}
 8017230:	469e      	mov	lr, r3
 8017232:	4770      	bx	lr

08017234 <_fini>:
 8017234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017236:	bf00      	nop
 8017238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801723a:	bc08      	pop	{r3}
 801723c:	469e      	mov	lr, r3
 801723e:	4770      	bx	lr
